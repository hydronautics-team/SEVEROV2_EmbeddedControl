
SEVEROV2_EmbeddedControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e01c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800e1b0  0800e1b0  0001e1b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4a8  0800e4a8  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e4a8  0800e4a8  0001e4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e4b0  0800e4b0  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4b0  0800e4b0  0001e4b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e4b4  0800e4b4  0001e4b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800e4b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          0000356c  200000a8  200000a8  000200a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003614  20003614  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002803c  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000054b0  00000000  00000000  00048114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dc0  00000000  00000000  0004d5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b98  00000000  00000000  0004f388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002674e  00000000  00000000  00050f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000254b0  00000000  00000000  0007766e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd69b  00000000  00000000  0009cb1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017a1b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000082c4  00000000  00000000  0017a20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e194 	.word	0x0800e194

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800e194 	.word	0x0800e194

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b974 	b.w	8000e6c <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468e      	mov	lr, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d14d      	bne.n	8000c46 <__udivmoddi4+0xaa>
 8000baa:	428a      	cmp	r2, r1
 8000bac:	4694      	mov	ip, r2
 8000bae:	d969      	bls.n	8000c84 <__udivmoddi4+0xe8>
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	b152      	cbz	r2, 8000bcc <__udivmoddi4+0x30>
 8000bb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bba:	f1c2 0120 	rsb	r1, r2, #32
 8000bbe:	fa20 f101 	lsr.w	r1, r0, r1
 8000bc2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bca:	4094      	lsls	r4, r2
 8000bcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd0:	0c21      	lsrs	r1, r4, #16
 8000bd2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bd6:	fa1f f78c 	uxth.w	r7, ip
 8000bda:	fb08 e316 	mls	r3, r8, r6, lr
 8000bde:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000be2:	fb06 f107 	mul.w	r1, r6, r7
 8000be6:	4299      	cmp	r1, r3
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x64>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bf2:	f080 811f 	bcs.w	8000e34 <__udivmoddi4+0x298>
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	f240 811c 	bls.w	8000e34 <__udivmoddi4+0x298>
 8000bfc:	3e02      	subs	r6, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a5b      	subs	r3, r3, r1
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c08:	fb08 3310 	mls	r3, r8, r0, r3
 8000c0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c10:	fb00 f707 	mul.w	r7, r0, r7
 8000c14:	42a7      	cmp	r7, r4
 8000c16:	d90a      	bls.n	8000c2e <__udivmoddi4+0x92>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c20:	f080 810a 	bcs.w	8000e38 <__udivmoddi4+0x29c>
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	f240 8107 	bls.w	8000e38 <__udivmoddi4+0x29c>
 8000c2a:	4464      	add	r4, ip
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c32:	1be4      	subs	r4, r4, r7
 8000c34:	2600      	movs	r6, #0
 8000c36:	b11d      	cbz	r5, 8000c40 <__udivmoddi4+0xa4>
 8000c38:	40d4      	lsrs	r4, r2
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c40:	4631      	mov	r1, r6
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d909      	bls.n	8000c5e <__udivmoddi4+0xc2>
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	f000 80ef 	beq.w	8000e2e <__udivmoddi4+0x292>
 8000c50:	2600      	movs	r6, #0
 8000c52:	e9c5 0100 	strd	r0, r1, [r5]
 8000c56:	4630      	mov	r0, r6
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	fab3 f683 	clz	r6, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d14a      	bne.n	8000cfc <__udivmoddi4+0x160>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d302      	bcc.n	8000c70 <__udivmoddi4+0xd4>
 8000c6a:	4282      	cmp	r2, r0
 8000c6c:	f200 80f9 	bhi.w	8000e62 <__udivmoddi4+0x2c6>
 8000c70:	1a84      	subs	r4, r0, r2
 8000c72:	eb61 0303 	sbc.w	r3, r1, r3
 8000c76:	2001      	movs	r0, #1
 8000c78:	469e      	mov	lr, r3
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d0e0      	beq.n	8000c40 <__udivmoddi4+0xa4>
 8000c7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c82:	e7dd      	b.n	8000c40 <__udivmoddi4+0xa4>
 8000c84:	b902      	cbnz	r2, 8000c88 <__udivmoddi4+0xec>
 8000c86:	deff      	udf	#255	; 0xff
 8000c88:	fab2 f282 	clz	r2, r2
 8000c8c:	2a00      	cmp	r2, #0
 8000c8e:	f040 8092 	bne.w	8000db6 <__udivmoddi4+0x21a>
 8000c92:	eba1 010c 	sub.w	r1, r1, ip
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	2601      	movs	r6, #1
 8000ca0:	0c20      	lsrs	r0, r4, #16
 8000ca2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ca6:	fb07 1113 	mls	r1, r7, r3, r1
 8000caa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cae:	fb0e f003 	mul.w	r0, lr, r3
 8000cb2:	4288      	cmp	r0, r1
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x12c>
 8000cb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cba:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x12a>
 8000cc0:	4288      	cmp	r0, r1
 8000cc2:	f200 80cb 	bhi.w	8000e5c <__udivmoddi4+0x2c0>
 8000cc6:	4643      	mov	r3, r8
 8000cc8:	1a09      	subs	r1, r1, r0
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x156>
 8000ce0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ce8:	d202      	bcs.n	8000cf0 <__udivmoddi4+0x154>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f200 80bb 	bhi.w	8000e66 <__udivmoddi4+0x2ca>
 8000cf0:	4608      	mov	r0, r1
 8000cf2:	eba4 040e 	sub.w	r4, r4, lr
 8000cf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cfa:	e79c      	b.n	8000c36 <__udivmoddi4+0x9a>
 8000cfc:	f1c6 0720 	rsb	r7, r6, #32
 8000d00:	40b3      	lsls	r3, r6
 8000d02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d12:	431c      	orrs	r4, r3
 8000d14:	40f9      	lsrs	r1, r7
 8000d16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d22:	0c20      	lsrs	r0, r4, #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fb09 1118 	mls	r1, r9, r8, r1
 8000d2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d30:	fb08 f00e 	mul.w	r0, r8, lr
 8000d34:	4288      	cmp	r0, r1
 8000d36:	fa02 f206 	lsl.w	r2, r2, r6
 8000d3a:	d90b      	bls.n	8000d54 <__udivmoddi4+0x1b8>
 8000d3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d40:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d44:	f080 8088 	bcs.w	8000e58 <__udivmoddi4+0x2bc>
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	f240 8085 	bls.w	8000e58 <__udivmoddi4+0x2bc>
 8000d4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d52:	4461      	add	r1, ip
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d68:	458e      	cmp	lr, r1
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x1e2>
 8000d6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d70:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d74:	d26c      	bcs.n	8000e50 <__udivmoddi4+0x2b4>
 8000d76:	458e      	cmp	lr, r1
 8000d78:	d96a      	bls.n	8000e50 <__udivmoddi4+0x2b4>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4461      	add	r1, ip
 8000d7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d82:	fba0 9402 	umull	r9, r4, r0, r2
 8000d86:	eba1 010e 	sub.w	r1, r1, lr
 8000d8a:	42a1      	cmp	r1, r4
 8000d8c:	46c8      	mov	r8, r9
 8000d8e:	46a6      	mov	lr, r4
 8000d90:	d356      	bcc.n	8000e40 <__udivmoddi4+0x2a4>
 8000d92:	d053      	beq.n	8000e3c <__udivmoddi4+0x2a0>
 8000d94:	b15d      	cbz	r5, 8000dae <__udivmoddi4+0x212>
 8000d96:	ebb3 0208 	subs.w	r2, r3, r8
 8000d9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000da2:	fa22 f306 	lsr.w	r3, r2, r6
 8000da6:	40f1      	lsrs	r1, r6
 8000da8:	431f      	orrs	r7, r3
 8000daa:	e9c5 7100 	strd	r7, r1, [r5]
 8000dae:	2600      	movs	r6, #0
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	f1c2 0320 	rsb	r3, r2, #32
 8000dba:	40d8      	lsrs	r0, r3
 8000dbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dc4:	4091      	lsls	r1, r2
 8000dc6:	4301      	orrs	r1, r0
 8000dc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dcc:	fa1f fe8c 	uxth.w	lr, ip
 8000dd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000dd8:	0c0b      	lsrs	r3, r1, #16
 8000dda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dde:	fb00 f60e 	mul.w	r6, r0, lr
 8000de2:	429e      	cmp	r6, r3
 8000de4:	fa04 f402 	lsl.w	r4, r4, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x260>
 8000dea:	eb1c 0303 	adds.w	r3, ip, r3
 8000dee:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000df2:	d22f      	bcs.n	8000e54 <__udivmoddi4+0x2b8>
 8000df4:	429e      	cmp	r6, r3
 8000df6:	d92d      	bls.n	8000e54 <__udivmoddi4+0x2b8>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	1b9b      	subs	r3, r3, r6
 8000dfe:	b289      	uxth	r1, r1
 8000e00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e04:	fb07 3316 	mls	r3, r7, r6, r3
 8000e08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e10:	428b      	cmp	r3, r1
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x28a>
 8000e14:	eb1c 0101 	adds.w	r1, ip, r1
 8000e18:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e1c:	d216      	bcs.n	8000e4c <__udivmoddi4+0x2b0>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d914      	bls.n	8000e4c <__udivmoddi4+0x2b0>
 8000e22:	3e02      	subs	r6, #2
 8000e24:	4461      	add	r1, ip
 8000e26:	1ac9      	subs	r1, r1, r3
 8000e28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e2c:	e738      	b.n	8000ca0 <__udivmoddi4+0x104>
 8000e2e:	462e      	mov	r6, r5
 8000e30:	4628      	mov	r0, r5
 8000e32:	e705      	b.n	8000c40 <__udivmoddi4+0xa4>
 8000e34:	4606      	mov	r6, r0
 8000e36:	e6e3      	b.n	8000c00 <__udivmoddi4+0x64>
 8000e38:	4618      	mov	r0, r3
 8000e3a:	e6f8      	b.n	8000c2e <__udivmoddi4+0x92>
 8000e3c:	454b      	cmp	r3, r9
 8000e3e:	d2a9      	bcs.n	8000d94 <__udivmoddi4+0x1f8>
 8000e40:	ebb9 0802 	subs.w	r8, r9, r2
 8000e44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e48:	3801      	subs	r0, #1
 8000e4a:	e7a3      	b.n	8000d94 <__udivmoddi4+0x1f8>
 8000e4c:	4646      	mov	r6, r8
 8000e4e:	e7ea      	b.n	8000e26 <__udivmoddi4+0x28a>
 8000e50:	4620      	mov	r0, r4
 8000e52:	e794      	b.n	8000d7e <__udivmoddi4+0x1e2>
 8000e54:	4640      	mov	r0, r8
 8000e56:	e7d1      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e58:	46d0      	mov	r8, sl
 8000e5a:	e77b      	b.n	8000d54 <__udivmoddi4+0x1b8>
 8000e5c:	3b02      	subs	r3, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	e732      	b.n	8000cc8 <__udivmoddi4+0x12c>
 8000e62:	4630      	mov	r0, r6
 8000e64:	e709      	b.n	8000c7a <__udivmoddi4+0xde>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e742      	b.n	8000cf2 <__udivmoddi4+0x156>

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <fromTickToMs>:

uint32_t fromSecToTick(float sec) {
	return (sec * configTICK_RATE_HZ);
}

float fromTickToMs(uint32_t ticks) {
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	return ((float) (ticks) * 1000.0f) / (float) configTICK_RATE_HZ;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	ee07 3a90 	vmov	s15, r3
 8000e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e82:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000ea4 <fromTickToMs+0x34>
 8000e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e8a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000ea4 <fromTickToMs+0x34>
 8000e8e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000e92:	eef0 7a66 	vmov.f32	s15, s13
}
 8000e96:	eeb0 0a67 	vmov.f32	s0, s15
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	447a0000 	.word	0x447a0000

08000ea8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000eae:	4a18      	ldr	r2, [pc, #96]	; (8000f10 <MX_CAN1_Init+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000eb4:	2210      	movs	r2, #16
 8000eb6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ec6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ece:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ed2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000efa:	f003 fd37 	bl	800496c <HAL_CAN_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000f04:	f002 f9dd 	bl	80032c2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200000c4 	.word	0x200000c4
 8000f10:	40006400 	.word	0x40006400

08000f14 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <HAL_CAN_MspInit+0xa4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d13c      	bne.n	8000fb0 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <HAL_CAN_MspInit+0xa8>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a1f      	ldr	r2, [pc, #124]	; (8000fbc <HAL_CAN_MspInit+0xa8>)
 8000f40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HAL_CAN_MspInit+0xa8>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_CAN_MspInit+0xa8>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a18      	ldr	r2, [pc, #96]	; (8000fbc <HAL_CAN_MspInit+0xa8>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <HAL_CAN_MspInit+0xa8>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f80:	2309      	movs	r3, #9
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <HAL_CAN_MspInit+0xac>)
 8000f8c:	f004 ffec 	bl	8005f68 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2105      	movs	r1, #5
 8000f94:	2013      	movs	r0, #19
 8000f96:	f004 f8d5 	bl	8005144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f9a:	2013      	movs	r0, #19
 8000f9c:	f004 f8ee 	bl	800517c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2105      	movs	r1, #5
 8000fa4:	2014      	movs	r0, #20
 8000fa6:	f004 f8cd 	bl	8005144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000faa:	2014      	movs	r0, #20
 8000fac:	f004 f8e6 	bl	800517c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	; 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40006400 	.word	0x40006400
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <GetCrc16Checksumm>:
#include "checksum.h"

uint16_t GetCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 8000fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fd4:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	len = len-2;
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	3b02      	subs	r3, #2
 8000fda:	807b      	strh	r3, [r7, #2]

    while (len--) {
 8000fdc:	e025      	b.n	800102a <GetCrc16Checksumm+0x66>
        crc ^= *pcBlock++ << 8;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	607a      	str	r2, [r7, #4]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fee:	4053      	eors	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	81fb      	strh	r3, [r7, #14]

        for (i = 0; i < 8; i++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	737b      	strb	r3, [r7, #13]
 8000ff8:	e014      	b.n	8001024 <GetCrc16Checksumm+0x60>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 8000ffa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	da09      	bge.n	8001016 <GetCrc16Checksumm+0x52>
 8001002:	89fb      	ldrh	r3, [r7, #14]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	b21b      	sxth	r3, r3
 8001008:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800100c:	f083 0301 	eor.w	r3, r3, #1
 8001010:	b21b      	sxth	r3, r3
 8001012:	b29b      	uxth	r3, r3
 8001014:	e002      	b.n	800101c <GetCrc16Checksumm+0x58>
 8001016:	89fb      	ldrh	r3, [r7, #14]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	b29b      	uxth	r3, r3
 800101c:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++)
 800101e:	7b7b      	ldrb	r3, [r7, #13]
 8001020:	3301      	adds	r3, #1
 8001022:	737b      	strb	r3, [r7, #13]
 8001024:	7b7b      	ldrb	r3, [r7, #13]
 8001026:	2b07      	cmp	r3, #7
 8001028:	d9e7      	bls.n	8000ffa <GetCrc16Checksumm+0x36>
    while (len--) {
 800102a:	887b      	ldrh	r3, [r7, #2]
 800102c:	1e5a      	subs	r2, r3, #1
 800102e:	807a      	strh	r2, [r7, #2]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1d4      	bne.n	8000fde <GetCrc16Checksumm+0x1a>
    }
    return crc;
 8001034:	89fb      	ldrh	r3, [r7, #14]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <IsCrc16ChecksummCorrect>:

bool IsCrc16ChecksummCorrect(uint8_t *pcBlock, uint16_t len)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	460b      	mov	r3, r1
 800104c:	807b      	strh	r3, [r7, #2]
	uint16_t crc_calculated = GetCrc16Checksumm(pcBlock, len);
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	4619      	mov	r1, r3
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffb6 	bl	8000fc4 <GetCrc16Checksumm>
 8001058:	4603      	mov	r3, r0
 800105a:	82fb      	strh	r3, [r7, #22]

	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	3b02      	subs	r3, #2
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	4413      	add	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
	uint16_t crc_got = *crc_pointer;
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	81fb      	strh	r3, [r7, #14]

	if(crc_got == crc_calculated) {
 800106c:	89fa      	ldrh	r2, [r7, #14]
 800106e:	8afb      	ldrh	r3, [r7, #22]
 8001070:	429a      	cmp	r2, r3
 8001072:	d101      	bne.n	8001078 <IsCrc16ChecksummCorrect+0x36>
		return true;
 8001074:	2301      	movs	r3, #1
 8001076:	e000      	b.n	800107a <IsCrc16ChecksummCorrect+0x38>
	}
	else {
		return false;
 8001078:	2300      	movs	r3, #0
	}
}
 800107a:	4618      	mov	r0, r3
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <AddCrc16Checksumm>:

void AddCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	460b      	mov	r3, r1
 800108c:	807b      	strh	r3, [r7, #2]
	uint16_t crc = GetCrc16Checksumm(pcBlock, len);
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	4619      	mov	r1, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ff96 	bl	8000fc4 <GetCrc16Checksumm>
 8001098:	4603      	mov	r3, r0
 800109a:	81fb      	strh	r3, [r7, #14]
	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	3b02      	subs	r3, #2
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	60bb      	str	r3, [r7, #8]
	*crc_pointer = crc;
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	89fa      	ldrh	r2, [r7, #14]
 80010aa:	801a      	strh	r2, [r3, #0]
}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <IsChecksumm8bCorrect>:
    msg[length - 2] = (uint8_t) (crc >> 8);
    msg[length - 1] = (uint8_t) crc;
}

bool IsChecksumm8bCorrect(uint8_t *msg, uint16_t length)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
    uint8_t crcGot, crc = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	75fb      	strb	r3, [r7, #23]
    int i;

    crcGot = msg[length-1] ;
 80010c4:	887b      	ldrh	r3, [r7, #2]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	4413      	add	r3, r2
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	73fb      	strb	r3, [r7, #15]

        for(i=0; i < length - 1; i++){
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	e009      	b.n	80010ea <IsChecksumm8bCorrect+0x36>
            crc ^= msg[i];
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	4413      	add	r3, r2
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	4053      	eors	r3, r2
 80010e2:	75fb      	strb	r3, [r7, #23]
        for(i=0; i < length - 1; i++){
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	3301      	adds	r3, #1
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	dbf0      	blt.n	80010d6 <IsChecksumm8bCorrect+0x22>
        }

    if(crc == crcGot)
 80010f4:	7dfa      	ldrb	r2, [r7, #23]
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d101      	bne.n	8001100 <IsChecksumm8bCorrect+0x4c>
        return 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <IsChecksumm8bCorrect+0x4e>
    else return 0;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	371c      	adds	r7, #28
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <AddChecksumm8b>:

void AddChecksumm8b(uint8_t *msg, uint16_t length)
{
 800110e:	b480      	push	{r7}
 8001110:	b085      	sub	sp, #20
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
	int i = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]

	for(i=0; i < length - 1; i++) {
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	e009      	b.n	800113c <AddChecksumm8b+0x2e>
		crc ^= msg[i];
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	781a      	ldrb	r2, [r3, #0]
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	4053      	eors	r3, r2
 8001134:	73fb      	strb	r3, [r7, #15]
	for(i=0; i < length - 1; i++) {
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	3301      	adds	r3, #1
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	887b      	ldrh	r3, [r7, #2]
 800113e:	3b01      	subs	r3, #1
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	429a      	cmp	r2, r3
 8001144:	dbf0      	blt.n	8001128 <AddChecksumm8b+0x1a>
	}

	msg[length-1] = crc;
 8001146:	887b      	ldrh	r3, [r7, #2]
 8001148:	3b01      	subs	r3, #1
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	701a      	strb	r2, [r3, #0]
}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <IsChecksumm8bCorrectVma>:

bool IsChecksumm8bCorrectVma(uint8_t *msg, uint16_t length)
{
 800115e:	b480      	push	{r7}
 8001160:	b087      	sub	sp, #28
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	460b      	mov	r3, r1
 8001168:	807b      	strh	r3, [r7, #2]
	uint8_t crcGot, crc = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	75fb      	strb	r3, [r7, #23]
	int i;

	crcGot = msg[length-1] ;
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	3b01      	subs	r3, #1
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	73fb      	strb	r3, [r7, #15]

	for (i = 1; i < length - 1; ++i) {
 800117a:	2301      	movs	r3, #1
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	e009      	b.n	8001194 <IsChecksumm8bCorrectVma+0x36>
		crc ^= msg[i];
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	781a      	ldrb	r2, [r3, #0]
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	4053      	eors	r3, r2
 800118c:	75fb      	strb	r3, [r7, #23]
	for (i = 1; i < length - 1; ++i) {
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	3301      	adds	r3, #1
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	3b01      	subs	r3, #1
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	429a      	cmp	r2, r3
 800119c:	dbf0      	blt.n	8001180 <IsChecksumm8bCorrectVma+0x22>
	}

	if (crc == crcGot) {
 800119e:	7dfa      	ldrb	r2, [r7, #23]
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d101      	bne.n	80011aa <IsChecksumm8bCorrectVma+0x4c>
		return 1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <IsChecksumm8bCorrectVma+0x4e>
	}
	else {
		return 0;
 80011aa:	2300      	movs	r3, #0
	}
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	371c      	adds	r7, #28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <AddChecksumm8bVma>:

void AddChecksumm8bVma(uint8_t *msg, uint16_t length)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]

	for(int i = 1; i < length - 1; i++) {
 80011c8:	2301      	movs	r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	e009      	b.n	80011e2 <AddChecksumm8bVma+0x2a>
		crc ^= msg[i];
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	4413      	add	r3, r2
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	4053      	eors	r3, r2
 80011da:	73fb      	strb	r3, [r7, #15]
	for(int i = 1; i < length - 1; i++) {
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	3301      	adds	r3, #1
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	887b      	ldrh	r3, [r7, #2]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dbf0      	blt.n	80011ce <AddChecksumm8bVma+0x16>
	}

	msg[length-1] = crc;
 80011ec:	887b      	ldrh	r3, [r7, #2]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	4413      	add	r3, r2
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	701a      	strb	r2, [r3, #0]
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <PickBit>:
        array[i] = 0x00;
    }
}

bool PickBit(uint8_t input, uint8_t bit)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	460a      	mov	r2, r1
 800120e:	71fb      	strb	r3, [r7, #7]
 8001210:	4613      	mov	r3, r2
 8001212:	71bb      	strb	r3, [r7, #6]
	//return (bool) ((input << (7 - bit)) >> 7);

	switch(bit) {
 8001214:	79bb      	ldrb	r3, [r7, #6]
 8001216:	2b07      	cmp	r3, #7
 8001218:	d857      	bhi.n	80012ca <PickBit+0xc6>
 800121a:	a201      	add	r2, pc, #4	; (adr r2, 8001220 <PickBit+0x1c>)
 800121c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001220:	08001241 	.word	0x08001241
 8001224:	08001253 	.word	0x08001253
 8001228:	08001265 	.word	0x08001265
 800122c:	08001277 	.word	0x08001277
 8001230:	08001289 	.word	0x08001289
 8001234:	0800129b 	.word	0x0800129b
 8001238:	080012ad 	.word	0x080012ad
 800123c:	080012bf 	.word	0x080012bf
	case 0:
			return (bool) (input & 0b00000001);
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	bf14      	ite	ne
 800124a:	2301      	movne	r3, #1
 800124c:	2300      	moveq	r3, #0
 800124e:	b2db      	uxtb	r3, r3
 8001250:	e03c      	b.n	80012cc <PickBit+0xc8>
	case 1:
			return (bool) (input & 0b00000010);
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	bf14      	ite	ne
 800125c:	2301      	movne	r3, #1
 800125e:	2300      	moveq	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	e033      	b.n	80012cc <PickBit+0xc8>
	case 2:
			return (bool) (input & 0b00000100);
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf14      	ite	ne
 800126e:	2301      	movne	r3, #1
 8001270:	2300      	moveq	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	e02a      	b.n	80012cc <PickBit+0xc8>
	case 3:
			return (bool) (input & 0b00001000);
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	2b00      	cmp	r3, #0
 800127e:	bf14      	ite	ne
 8001280:	2301      	movne	r3, #1
 8001282:	2300      	moveq	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	e021      	b.n	80012cc <PickBit+0xc8>
	case 4:
			return (bool) (input & 0b00010000);
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	2b00      	cmp	r3, #0
 8001290:	bf14      	ite	ne
 8001292:	2301      	movne	r3, #1
 8001294:	2300      	moveq	r3, #0
 8001296:	b2db      	uxtb	r3, r3
 8001298:	e018      	b.n	80012cc <PickBit+0xc8>
	case 5:
			return (bool) (input & 0b00100000);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f003 0320 	and.w	r3, r3, #32
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	bf14      	ite	ne
 80012a4:	2301      	movne	r3, #1
 80012a6:	2300      	moveq	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	e00f      	b.n	80012cc <PickBit+0xc8>
	case 6:
			return (bool) (input & 0b01000000);
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bf14      	ite	ne
 80012b6:	2301      	movne	r3, #1
 80012b8:	2300      	moveq	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	e006      	b.n	80012cc <PickBit+0xc8>
	case 7:
			return (bool) (input & 0b10000000);
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	09db      	lsrs	r3, r3, #7
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	e000      	b.n	80012cc <PickBit+0xc8>
	}
	return false;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <transmitPackage>:
		uartBus[i].lastMessage = 0;
	}
}

bool transmitPackage(struct uartBus_s *bus, bool isrMode)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
    bus->packageTransmitted = false;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	725a      	strb	r2, [r3, #9]

    HAL_UART_AbortTransmit_IT(bus->huart);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4618      	mov	r0, r3
 80012f0:	f007 fec8 	bl	8009084 <HAL_UART_AbortTransmit_IT>
    switch(bus->txrxType) {
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00d      	beq.n	800131a <transmitPackage+0x42>
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d117      	bne.n	8001332 <transmitPackage+0x5a>
        case TXRX_DMA:
            HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6859      	ldr	r1, [r3, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001310:	b29b      	uxth	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	f007 fe08 	bl	8008f28 <HAL_UART_Transmit_DMA>
            break;
 8001318:	e00d      	b.n	8001336 <transmitPackage+0x5e>
        case TXRX_IT:
        	HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6859      	ldr	r1, [r3, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001328:	b29b      	uxth	r3, r3
 800132a:	461a      	mov	r2, r3
 800132c:	f007 fd87 	bl	8008e3e <HAL_UART_Transmit_IT>
            break;
 8001330:	e001      	b.n	8001336 <transmitPackage+0x5e>
        default:
            return false;
 8001332:	2300      	movs	r3, #0
 8001334:	e036      	b.n	80013a4 <transmitPackage+0xcc>
    }

    bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 8001336:	f00a feaf 	bl	800c098 <xTaskGetTickCount>
 800133a:	4603      	mov	r3, r0
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fd97 	bl	8000e70 <fromTickToMs>
 8001342:	eef0 7a40 	vmov.f32	s15, s0
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edc3 7a05 	vstr	s15, [r3, #20]
    while (!bus->packageTransmitted && !isrMode) {
 800134c:	e01c      	b.n	8001388 <transmitPackage+0xb0>
    	if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 800134e:	f00a fea3 	bl	800c098 <xTaskGetTickCount>
 8001352:	4603      	mov	r3, r0
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fd8b 	bl	8000e70 <fromTickToMs>
 800135a:	eeb0 7a40 	vmov.f32	s14, s0
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	edd3 7a05 	vldr	s15, [r3, #20]
 8001364:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001374:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137c:	dd01      	ble.n	8001382 <transmitPackage+0xaa>
    		return false;
 800137e:	2300      	movs	r3, #0
 8001380:	e010      	b.n	80013a4 <transmitPackage+0xcc>
    	}
    	osDelay(DELAY_UART_TIMEOUT);
 8001382:	2032      	movs	r0, #50	; 0x32
 8001384:	f009 fa24 	bl	800a7d0 <osDelay>
    while (!bus->packageTransmitted && !isrMode) {
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	7a5b      	ldrb	r3, [r3, #9]
 800138c:	f083 0301 	eor.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d005      	beq.n	80013a2 <transmitPackage+0xca>
 8001396:	78fb      	ldrb	r3, [r7, #3]
 8001398:	f083 0301 	eor.w	r3, r3, #1
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1d5      	bne.n	800134e <transmitPackage+0x76>
    }
    return true;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <transmitAndReceive>:
	}
	return true;
}

bool transmitAndReceive(struct uartBus_s *bus, bool isrMode)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
	bus->packageReceived = false;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	721a      	strb	r2, [r3, #8]
	bus->packageTransmitted = false;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	725a      	strb	r2, [r3, #9]

	HAL_UART_AbortReceive_IT(bus->huart);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c8:	4618      	mov	r0, r3
 80013ca:	f007 fecf 	bl	800916c <HAL_UART_AbortReceive_IT>
	HAL_UART_AbortTransmit_IT(bus->huart);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4618      	mov	r0, r3
 80013d4:	f007 fe56 	bl	8009084 <HAL_UART_AbortTransmit_IT>
	switch(bus->txrxType) {
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d018      	beq.n	8001414 <transmitAndReceive+0x68>
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d12d      	bne.n	8001442 <transmitAndReceive+0x96>
		case TXRX_DMA:
			HAL_UART_Receive_DMA(bus->huart, bus->rxBuffer, bus->rxLength);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6819      	ldr	r1, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	f007 fe14 	bl	8009024 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6859      	ldr	r1, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800140a:	b29b      	uxth	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	f007 fd8b 	bl	8008f28 <HAL_UART_Transmit_DMA>
			break;
 8001412:	e018      	b.n	8001446 <transmitAndReceive+0x9a>
		case TXRX_IT:
			HAL_UART_Receive_IT(bus->huart, bus->rxBuffer, bus->rxLength);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6819      	ldr	r1, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001422:	b29b      	uxth	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	f007 fd4f 	bl	8008ec8 <HAL_UART_Receive_IT>
			HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6859      	ldr	r1, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001438:	b29b      	uxth	r3, r3
 800143a:	461a      	mov	r2, r3
 800143c:	f007 fcff 	bl	8008e3e <HAL_UART_Transmit_IT>
			break;
 8001440:	e001      	b.n	8001446 <transmitAndReceive+0x9a>
		default:
			return false;
 8001442:	2300      	movs	r3, #0
 8001444:	e03d      	b.n	80014c2 <transmitAndReceive+0x116>
	}

	bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 8001446:	f00a fe27 	bl	800c098 <xTaskGetTickCount>
 800144a:	4603      	mov	r3, r0
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fd0f 	bl	8000e70 <fromTickToMs>
 8001452:	eef0 7a40 	vmov.f32	s15, s0
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	edc3 7a05 	vstr	s15, [r3, #20]
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 800145c:	e01c      	b.n	8001498 <transmitAndReceive+0xec>
		if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 800145e:	f00a fe1b 	bl	800c098 <xTaskGetTickCount>
 8001462:	4603      	mov	r3, r0
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fd03 	bl	8000e70 <fromTickToMs>
 800146a:	eeb0 7a40 	vmov.f32	s14, s0
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	edd3 7a05 	vldr	s15, [r3, #20]
 8001474:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001484:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148c:	dd01      	ble.n	8001492 <transmitAndReceive+0xe6>
			return false;
 800148e:	2300      	movs	r3, #0
 8001490:	e017      	b.n	80014c2 <transmitAndReceive+0x116>
		}
		osDelay(DELAY_UART_TIMEOUT);
 8001492:	2032      	movs	r0, #50	; 0x32
 8001494:	f009 f99c 	bl	800a7d0 <osDelay>
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7a5b      	ldrb	r3, [r3, #9]
 800149c:	f083 0301 	eor.w	r3, r3, #1
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00c      	beq.n	80014c0 <transmitAndReceive+0x114>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7a1b      	ldrb	r3, [r3, #8]
 80014aa:	f083 0301 	eor.w	r3, r3, #1
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <transmitAndReceive+0x114>
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	f083 0301 	eor.w	r3, r3, #1
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1ce      	bne.n	800145e <transmitAndReceive+0xb2>
	}
	return true;
 80014c0:	2301      	movs	r3, #1
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <HAL_UART_TxCpltCallback+0x6c>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d103      	bne.n	80014e6 <HAL_UART_TxCpltCallback+0x1a>
		uartBus[SHORE_UART].packageTransmitted = true;
 80014de:	4b16      	ldr	r3, [pc, #88]	; (8001538 <HAL_UART_TxCpltCallback+0x6c>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	725a      	strb	r2, [r3, #9]
		return;
 80014e4:	e022      	b.n	800152c <HAL_UART_TxCpltCallback+0x60>
	}

	struct uartBus_s *bus = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	e01a      	b.n	8001526 <HAL_UART_TxCpltCallback+0x5a>
		if(uartBus[i].huart == huart) {
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	4911      	ldr	r1, [pc, #68]	; (8001538 <HAL_UART_TxCpltCallback+0x6c>)
 80014f4:	4613      	mov	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	1a9b      	subs	r3, r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	440b      	add	r3, r1
 80014fe:	3330      	adds	r3, #48	; 0x30
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	429a      	cmp	r2, r3
 8001506:	d10b      	bne.n	8001520 <HAL_UART_TxCpltCallback+0x54>
			bus = &uartBus[i];
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	4613      	mov	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	1a9b      	subs	r3, r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4a09      	ldr	r2, [pc, #36]	; (8001538 <HAL_UART_TxCpltCallback+0x6c>)
 8001514:	4413      	add	r3, r2
 8001516:	60bb      	str	r3, [r7, #8]
			bus->packageTransmitted = true;
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	2201      	movs	r2, #1
 800151c:	725a      	strb	r2, [r3, #9]
			break;
 800151e:	e005      	b.n	800152c <HAL_UART_TxCpltCallback+0x60>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	3301      	adds	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d9e1      	bls.n	80014f0 <HAL_UART_TxCpltCallback+0x24>
		}
	}
}
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	200000ec 	.word	0x200000ec

0800153c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 8001544:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <HAL_UART_RxCpltCallback+0x7c>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	429a      	cmp	r2, r3
 800154c:	d102      	bne.n	8001554 <HAL_UART_RxCpltCallback+0x18>
		ShoreReceive();
 800154e:	f000 f8db 	bl	8001708 <ShoreReceive>
		return;
 8001552:	e02d      	b.n	80015b0 <HAL_UART_RxCpltCallback+0x74>
	}

	struct uartBus_s *bus = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e025      	b.n	80015aa <HAL_UART_RxCpltCallback+0x6e>
		if(uartBus[i].huart == huart) {
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	4915      	ldr	r1, [pc, #84]	; (80015b8 <HAL_UART_RxCpltCallback+0x7c>)
 8001562:	4613      	mov	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	1a9b      	subs	r3, r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	440b      	add	r3, r1
 800156c:	3330      	adds	r3, #48	; 0x30
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	429a      	cmp	r2, r3
 8001574:	d116      	bne.n	80015a4 <HAL_UART_RxCpltCallback+0x68>
			bus = &uartBus[i];
 8001576:	7bfa      	ldrb	r2, [r7, #15]
 8001578:	4613      	mov	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	1a9b      	subs	r3, r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <HAL_UART_RxCpltCallback+0x7c>)
 8001582:	4413      	add	r3, r2
 8001584:	60bb      	str	r3, [r7, #8]
			bus->packageReceived = true;
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	2201      	movs	r2, #1
 800158a:	721a      	strb	r2, [r3, #8]
			bus->lastMessage = fromTickToMs(xTaskGetTickCount());
 800158c:	f00a fd84 	bl	800c098 <xTaskGetTickCount>
 8001590:	4603      	mov	r3, r0
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fc6c 	bl	8000e70 <fromTickToMs>
 8001598:	eef0 7a40 	vmov.f32	s15, s0
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	edc3 7a06 	vstr	s15, [r3, #24]
			break;
 80015a2:	e005      	b.n	80015b0 <HAL_UART_RxCpltCallback+0x74>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	3301      	adds	r3, #1
 80015a8:	73fb      	strb	r3, [r7, #15]
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d9d6      	bls.n	800155e <HAL_UART_RxCpltCallback+0x22>
		}
	}
}
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200000ec 	.word	0x200000ec

080015bc <receiveI2cPackageDMA>:

bool receiveI2cPackageDMA (uint8_t I2C, uint16_t addr, uint8_t *buf, uint8_t length)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	603a      	str	r2, [r7, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
 80015ca:	460b      	mov	r3, r1
 80015cc:	80bb      	strh	r3, [r7, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	71bb      	strb	r3, [r7, #6]
	float timeBegin = fromTickToMs(xTaskGetTickCount());
 80015d2:	f00a fd61 	bl	800c098 <xTaskGetTickCount>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fc49 	bl	8000e70 <fromTickToMs>
 80015de:	ed87 0a03 	vstr	s0, [r7, #12]
	i2c1PackageReceived = false;
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <receiveI2cPackageDMA+0x98>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
	switch(I2C) {
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d12c      	bne.n	8001648 <receiveI2cPackageDMA+0x8c>
	case DEV_I2C:
		HAL_I2C_Master_Receive_IT(&hi2c1, addr>>1, buf, length);
 80015ee:	88bb      	ldrh	r3, [r7, #4]
 80015f0:	085b      	lsrs	r3, r3, #1
 80015f2:	b299      	uxth	r1, r3
 80015f4:	79bb      	ldrb	r3, [r7, #6]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	4817      	ldr	r0, [pc, #92]	; (8001658 <receiveI2cPackageDMA+0x9c>)
 80015fc:	f004 ffc8 	bl	8006590 <HAL_I2C_Master_Receive_IT>
		while (!i2c1PackageReceived) {
 8001600:	e01a      	b.n	8001638 <receiveI2cPackageDMA+0x7c>
			if(fromTickToMs(xTaskGetTickCount()) - timeBegin > WAITING_SENSORS) {
 8001602:	f00a fd49 	bl	800c098 <xTaskGetTickCount>
 8001606:	4603      	mov	r3, r0
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fc31 	bl	8000e70 <fromTickToMs>
 800160e:	eeb0 7a40 	vmov.f32	s14, s0
 8001612:	edd7 7a03 	vldr	s15, [r7, #12]
 8001616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800161e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001626:	dd04      	ble.n	8001632 <receiveI2cPackageDMA+0x76>
				//HAL_I2C_Master_Abort_IT(&hi2c2, addr>>1);
				HAL_I2C_Init(&hi2c1);
 8001628:	480b      	ldr	r0, [pc, #44]	; (8001658 <receiveI2cPackageDMA+0x9c>)
 800162a:	f004 fe6d 	bl	8006308 <HAL_I2C_Init>
				return false;
 800162e:	2300      	movs	r3, #0
 8001630:	e00b      	b.n	800164a <receiveI2cPackageDMA+0x8e>
			}
			osDelay(DELAY_SENSOR_TASK);
 8001632:	200a      	movs	r0, #10
 8001634:	f009 f8cc 	bl	800a7d0 <osDelay>
		while (!i2c1PackageReceived) {
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <receiveI2cPackageDMA+0x98>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	f083 0301 	eor.w	r3, r3, #1
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1dd      	bne.n	8001602 <receiveI2cPackageDMA+0x46>
		}
		break;
 8001646:	bf00      	nop
	}
	return true;
 8001648:	2301      	movs	r3, #1
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000197 	.word	0x20000197
 8001658:	20001bc8 	.word	0x20001bc8

0800165c <HAL_I2C_MasterRxCpltCallback>:
	}
}


void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1) {
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a06      	ldr	r2, [pc, #24]	; (8001680 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d102      	bne.n	8001672 <HAL_I2C_MasterRxCpltCallback+0x16>
		i2c1PackageReceived = true;
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_I2C_MasterRxCpltCallback+0x28>)
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
	}
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20001bc8 	.word	0x20001bc8
 8001684:	20000197 	.word	0x20000197

08001688 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1) {
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a06      	ldr	r2, [pc, #24]	; (80016ac <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d102      	bne.n	800169e <HAL_I2C_MasterTxCpltCallback+0x16>
		i2c1PackageTransmit = true;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_I2C_MasterTxCpltCallback+0x28>)
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
	}
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20001bc8 	.word	0x20001bc8
 80016b0:	20000196 	.word	0x20000196

080016b4 <SensorsResponseUpdate>:


void SensorsResponseUpdate(uint8_t *buf, uint8_t Sensor_id)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
	switch(Sensor_id) {
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d11a      	bne.n	80016fc <SensorsResponseUpdate+0x48>
	case DEV_I2C:
		if(IsChecksumm8bCorrect(buf, PRESSURE_SENSOR_SIZE)) {
 80016c6:	210a      	movs	r1, #10
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fcf3 	bl	80010b4 <IsChecksumm8bCorrect>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d012      	beq.n	80016fa <SensorsResponseUpdate+0x46>
			struct pressureResponse_s res;
			memcpy((void*)&res, (void*)buf, DEVICES_RESPONSE_LENGTH);
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	6810      	ldr	r0, [r2, #0]
 80016dc:	6851      	ldr	r1, [r2, #4]
 80016de:	c303      	stmia	r3!, {r0, r1}
 80016e0:	8912      	ldrh	r2, [r2, #8]
 80016e2:	801a      	strh	r2, [r3, #0]
			if(res.code == 0xAA) {
 80016e4:	7b3b      	ldrb	r3, [r7, #12]
 80016e6:	2baa      	cmp	r3, #170	; 0xaa
 80016e8:	d107      	bne.n	80016fa <SensorsResponseUpdate+0x46>
				rSensors.pressure = res.value;//(9.124*res.value - 3.177) - rSensors.pressure_null;
 80016ea:	f8d7 300d 	ldr.w	r3, [r7, #13]
 80016ee:	4a05      	ldr	r2, [pc, #20]	; (8001704 <SensorsResponseUpdate+0x50>)
 80016f0:	6553      	str	r3, [r2, #84]	; 0x54
				rSensors.velocity_pressure = res.v_value;
 80016f2:	f8d7 3011 	ldr.w	r3, [r7, #17]
 80016f6:	4a03      	ldr	r2, [pc, #12]	; (8001704 <SensorsResponseUpdate+0x50>)
 80016f8:	65d3      	str	r3, [r2, #92]	; 0x5c
			}
		}
		break;
 80016fa:	bf00      	nop
	}
}
 80016fc:	bf00      	nop
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20001684 	.word	0x20001684

08001708 <ShoreReceive>:

void ShoreReceive()
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b085      	sub	sp, #20
 800170c:	af02      	add	r7, sp, #8
	static portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 800170e:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <ShoreReceive+0xec>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
	if(counterRx == 0) {
 8001714:	4b38      	ldr	r3, [pc, #224]	; (80017f8 <ShoreReceive+0xf0>)
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d142      	bne.n	80017a2 <ShoreReceive+0x9a>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 800171c:	2300      	movs	r3, #0
 800171e:	71fb      	strb	r3, [r7, #7]
 8001720:	e03b      	b.n	800179a <ShoreReceive+0x92>
			if(uartBus[SHORE_UART].rxBuffer[0] == ShoreCodes[i]) {
 8001722:	4b36      	ldr	r3, [pc, #216]	; (80017fc <ShoreReceive+0xf4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	4935      	ldr	r1, [pc, #212]	; (8001800 <ShoreReceive+0xf8>)
 800172c:	5ccb      	ldrb	r3, [r1, r3]
 800172e:	429a      	cmp	r2, r3
 8001730:	d125      	bne.n	800177e <ShoreReceive+0x76>
				counterRx = 1;
 8001732:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <ShoreReceive+0xf0>)
 8001734:	2201      	movs	r2, #1
 8001736:	801a      	strh	r2, [r3, #0]
				uartBus[SHORE_UART].rxLength = ShoreLength[i]-1;
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	4a32      	ldr	r2, [pc, #200]	; (8001804 <ShoreReceive+0xfc>)
 800173c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	3b01      	subs	r3, #1
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <ShoreReceive+0xf4>)
 8001748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer+1, uartBus[SHORE_UART].rxLength);
 800174c:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <ShoreReceive+0xf4>)
 800174e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001750:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <ShoreReceive+0xf4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	3301      	adds	r3, #1
 8001756:	4a29      	ldr	r2, [pc, #164]	; (80017fc <ShoreReceive+0xf4>)
 8001758:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800175c:	b292      	uxth	r2, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f007 fbb2 	bl	8008ec8 <HAL_UART_Receive_IT>
				xTimerStartFromISR(UARTTimer, &xHigherPriorityTaskWoken);
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <ShoreReceive+0x100>)
 8001766:	681c      	ldr	r4, [r3, #0]
 8001768:	f00a fca6 	bl	800c0b8 <xTaskGetTickCountFromISR>
 800176c:	4602      	mov	r2, r0
 800176e:	2300      	movs	r3, #0
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <ShoreReceive+0xec>)
 8001774:	2106      	movs	r1, #6
 8001776:	4620      	mov	r0, r4
 8001778:	f00b faa0 	bl	800ccbc <xTimerGenericCommand>
				break;
 800177c:	e026      	b.n	80017cc <ShoreReceive+0xc4>
			}

			if(i == SHORE_REQUEST_MODES_NUMBER-1) {
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d107      	bne.n	8001794 <ShoreReceive+0x8c>
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8001784:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <ShoreReceive+0xf4>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <ShoreReceive+0xf4>)
 800178a:	6811      	ldr	r1, [r2, #0]
 800178c:	2201      	movs	r2, #1
 800178e:	4618      	mov	r0, r3
 8001790:	f007 fb9a 	bl	8008ec8 <HAL_UART_Receive_IT>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	3301      	adds	r3, #1
 8001798:	71fb      	strb	r3, [r7, #7]
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d9c0      	bls.n	8001722 <ShoreReceive+0x1a>
 80017a0:	e014      	b.n	80017cc <ShoreReceive+0xc4>
			}
		}
	}
	else if(counterRx == 1) {
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <ShoreReceive+0xf0>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d110      	bne.n	80017cc <ShoreReceive+0xc4>
		uartBus[SHORE_UART].packageReceived = true;
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <ShoreReceive+0xf4>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	721a      	strb	r2, [r3, #8]
		uartBus[SHORE_UART].lastMessage = fromTickToMs(xTaskGetTickCount());
 80017b0:	f00a fc72 	bl	800c098 <xTaskGetTickCount>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fb5a 	bl	8000e70 <fromTickToMs>
 80017bc:	eef0 7a40 	vmov.f32	s15, s0
 80017c0:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <ShoreReceive+0xf4>)
 80017c2:	edc3 7a06 	vstr	s15, [r3, #24]
		counterRx = 2;
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <ShoreReceive+0xf0>)
 80017c8:	2202      	movs	r2, #2
 80017ca:	801a      	strh	r2, [r3, #0]
	}

	if (xHigherPriorityTaskWoken == pdTRUE) {
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <ShoreReceive+0xec>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d10a      	bne.n	80017ea <ShoreReceive+0xe2>
		xHigherPriorityTaskWoken = pdFALSE;
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <ShoreReceive+0xec>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
		taskYIELD();
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <ShoreReceive+0x104>)
 80017dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	f3bf 8f4f 	dsb	sy
 80017e6:	f3bf 8f6f 	isb	sy
	}
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd90      	pop	{r4, r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000198 	.word	0x20000198
 80017f8:	20000194 	.word	0x20000194
 80017fc:	200000ec 	.word	0x200000ec
 8001800:	0800e290 	.word	0x0800e290
 8001804:	0800e288 	.word	0x0800e288
 8001808:	2000019c 	.word	0x2000019c
 800180c:	e000ed04 	.word	0xe000ed04

08001810 <DevicesRequestUpdate>:

void DevicesRequestUpdate(uint8_t *buf, uint8_t dev)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
	struct devicesRequest_s req;

    req.AA1 = 0xAA;
 800181c:	23aa      	movs	r3, #170	; 0xaa
 800181e:	723b      	strb	r3, [r7, #8]
    req.AA2 = 0xAA;
 8001820:	23aa      	movs	r3, #170	; 0xaa
 8001822:	727b      	strb	r3, [r7, #9]
    req.address = rDevice[dev].address;
 8001824:	78fa      	ldrb	r2, [r7, #3]
 8001826:	491e      	ldr	r1, [pc, #120]	; (80018a0 <DevicesRequestUpdate+0x90>)
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	440b      	add	r3, r1
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	72bb      	strb	r3, [r7, #10]
    req.setting = rDevice[dev].settings;
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	4919      	ldr	r1, [pc, #100]	; (80018a0 <DevicesRequestUpdate+0x90>)
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	440b      	add	r3, r1
 8001844:	3301      	adds	r3, #1
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	72fb      	strb	r3, [r7, #11]
    req.velocity1 = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	733b      	strb	r3, [r7, #12]
    req.velocity2 = rDevice[dev].force;
 800184e:	78fa      	ldrb	r2, [r7, #3]
 8001850:	4913      	ldr	r1, [pc, #76]	; (80018a0 <DevicesRequestUpdate+0x90>)
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	440b      	add	r3, r1
 800185c:	3302      	adds	r3, #2
 800185e:	f993 3000 	ldrsb.w	r3, [r3]
 8001862:	737b      	strb	r3, [r7, #13]

    if(dev == GRAB) {
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d107      	bne.n	800187a <DevicesRequestUpdate+0x6a>
    	req.velocity1 = rDevice[GRAB_ROTATION].force;
 800186a:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <DevicesRequestUpdate+0x90>)
 800186c:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001870:	733b      	strb	r3, [r7, #12]
    	req.velocity2 = rDevice[GRAB].force;
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <DevicesRequestUpdate+0x90>)
 8001874:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001878:	737b      	strb	r3, [r7, #13]
//    		rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_NULL;
//    	}
//    }


    memcpy((void*)buf, (void*)&req, DEVICES_REQUEST_LENGTH);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	461a      	mov	r2, r3
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	6010      	str	r0, [r2, #0]
 8001886:	8899      	ldrh	r1, [r3, #4]
 8001888:	799b      	ldrb	r3, [r3, #6]
 800188a:	8091      	strh	r1, [r2, #4]
 800188c:	7193      	strb	r3, [r2, #6]
    AddChecksumm8b(buf, DEVICES_REQUEST_LENGTH);
 800188e:	2107      	movs	r1, #7
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fc3c 	bl	800110e <AddChecksumm8b>
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20001708 	.word	0x20001708

080018a4 <DevicesResponseUpdate>:

void DevicesResponseUpdate(uint8_t *buf, uint8_t dev)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70fb      	strb	r3, [r7, #3]
    if(IsChecksumm8bCorrect(buf, DEVICES_RESPONSE_LENGTH)) {
 80018b0:	210a      	movs	r1, #10
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fbfe 	bl	80010b4 <IsChecksumm8bCorrect>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d04a      	beq.n	8001954 <DevicesResponseUpdate+0xb0>
    	struct devicesResponse_s res;
    	memcpy((void*)&res, (void*)buf, DEVICES_RESPONSE_LENGTH);
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	6810      	ldr	r0, [r2, #0]
 80018c6:	6851      	ldr	r1, [r2, #4]
 80018c8:	c303      	stmia	r3!, {r0, r1}
 80018ca:	8912      	ldrh	r2, [r2, #8]
 80018cc:	801a      	strh	r2, [r3, #0]

        rDevice[dev].current = res.current1;
 80018ce:	78fa      	ldrb	r2, [r7, #3]
 80018d0:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80018d4:	b298      	uxth	r0, r3
 80018d6:	4924      	ldr	r1, [pc, #144]	; (8001968 <DevicesResponseUpdate+0xc4>)
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	440b      	add	r3, r1
 80018e2:	3304      	adds	r3, #4
 80018e4:	4602      	mov	r2, r0
 80018e6:	801a      	strh	r2, [r3, #0]
        rDevice[dev].velocity1 = res.velocity1;
 80018e8:	78fa      	ldrb	r2, [r7, #3]
 80018ea:	7cf8      	ldrb	r0, [r7, #19]
 80018ec:	491e      	ldr	r1, [pc, #120]	; (8001968 <DevicesResponseUpdate+0xc4>)
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	440b      	add	r3, r1
 80018f8:	3307      	adds	r3, #7
 80018fa:	4602      	mov	r2, r0
 80018fc:	701a      	strb	r2, [r3, #0]
        rDevice[dev].velocity2 = res.velocity2;
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	7d38      	ldrb	r0, [r7, #20]
 8001902:	4919      	ldr	r1, [pc, #100]	; (8001968 <DevicesResponseUpdate+0xc4>)
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	440b      	add	r3, r1
 800190e:	3308      	adds	r3, #8
 8001910:	4602      	mov	r2, r0
 8001912:	701a      	strb	r2, [r3, #0]

        if(rDevice[DEV2].velocity1 == 0x00 && dev == DEV2) {
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <DevicesResponseUpdate+0xc4>)
 8001916:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800191a:	2b00      	cmp	r3, #0
 800191c:	d106      	bne.n	800192c <DevicesResponseUpdate+0x88>
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	2b05      	cmp	r3, #5
 8001922:	d103      	bne.n	800192c <DevicesResponseUpdate+0x88>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_FORWARD_SAT;
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <DevicesResponseUpdate+0xc8>)
 8001926:	2203      	movs	r2, #3
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	e00a      	b.n	8001942 <DevicesResponseUpdate+0x9e>
        }
        else if(rDevice[DEV2].velocity2 == 0x00 && dev == DEV2) {
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <DevicesResponseUpdate+0xc4>)
 800192e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001932:	2b00      	cmp	r3, #0
 8001934:	d105      	bne.n	8001942 <DevicesResponseUpdate+0x9e>
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	2b05      	cmp	r3, #5
 800193a:	d102      	bne.n	8001942 <DevicesResponseUpdate+0x9e>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_BACKWARD_SAT;
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <DevicesResponseUpdate+0xc8>)
 800193e:	2204      	movs	r2, #4
 8001940:	701a      	strb	r2, [r3, #0]
        }
        // TODO make errors work pls
        //writeBit(&(robot->device[dev].errors), res.errors, AGAR);

        ++uartBus[DEVICES_UART].successRxCounter;
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <DevicesResponseUpdate+0xcc>)
 8001944:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001948:	3301      	adds	r3, #1
 800194a:	b29a      	uxth	r2, r3
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <DevicesResponseUpdate+0xcc>)
 800194e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
    }
    else {
    	++uartBus[DEVICES_UART].brokenRxCounter;
    }
}
 8001952:	e004      	b.n	800195e <DevicesResponseUpdate+0xba>
    	++uartBus[DEVICES_UART].brokenRxCounter;
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <DevicesResponseUpdate+0xcc>)
 8001956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001958:	3301      	adds	r3, #1
 800195a:	4a05      	ldr	r2, [pc, #20]	; (8001970 <DevicesResponseUpdate+0xcc>)
 800195c:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20001708 	.word	0x20001708
 800196c:	20001744 	.word	0x20001744
 8001970:	200000ec 	.word	0x200000ec

08001974 <ShoreRequest>:

void ShoreRequest(uint8_t *requestBuf)
{
 8001974:	b5b0      	push	{r4, r5, r7, lr}
 8001976:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800197a:	af00      	add	r7, sp, #0
 800197c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001980:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8001984:	6018      	str	r0, [r3, #0]
    if (IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_LENGTH)) {
 8001986:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800198a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800198e:	211e      	movs	r1, #30
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	f7ff fb56 	bl	8001042 <IsCrc16ChecksummCorrect>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 8174 	beq.w	8001c86 <ShoreRequest+0x312>
    	struct shoreRequest_s req;
    	memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_LENGTH);
 800199e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80019a2:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f507 740d 	add.w	r4, r7, #564	; 0x234
 80019ac:	461d      	mov	r5, r3
 80019ae:	6828      	ldr	r0, [r5, #0]
 80019b0:	6869      	ldr	r1, [r5, #4]
 80019b2:	68aa      	ldr	r2, [r5, #8]
 80019b4:	68eb      	ldr	r3, [r5, #12]
 80019b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b8:	6928      	ldr	r0, [r5, #16]
 80019ba:	6969      	ldr	r1, [r5, #20]
 80019bc:	69aa      	ldr	r2, [r5, #24]
 80019be:	c407      	stmia	r4!, {r0, r1, r2}
 80019c0:	8bab      	ldrh	r3, [r5, #28]
 80019c2:	8023      	strh	r3, [r4, #0]

    	uint8_t tempCameraNum = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257

        rJoySpeed.march = req.march;
 80019ca:	f9b7 3236 	ldrsh.w	r3, [r7, #566]	; 0x236
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d6:	4bb1      	ldr	r3, [pc, #708]	; (8001c9c <ShoreRequest+0x328>)
 80019d8:	edc3 7a00 	vstr	s15, [r3]
        rJoySpeed.lag = req.lag;
 80019dc:	f9b7 3238 	ldrsh.w	r3, [r7, #568]	; 0x238
 80019e0:	ee07 3a90 	vmov	s15, r3
 80019e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e8:	4bac      	ldr	r3, [pc, #688]	; (8001c9c <ShoreRequest+0x328>)
 80019ea:	edc3 7a01 	vstr	s15, [r3, #4]
        rJoySpeed.depth = req.depth;
 80019ee:	f9b7 323a 	ldrsh.w	r3, [r7, #570]	; 0x23a
 80019f2:	ee07 3a90 	vmov	s15, r3
 80019f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019fa:	4ba8      	ldr	r3, [pc, #672]	; (8001c9c <ShoreRequest+0x328>)
 80019fc:	edc3 7a02 	vstr	s15, [r3, #8]
        rJoySpeed.roll = req.roll;
 8001a00:	f9b7 323c 	ldrsh.w	r3, [r7, #572]	; 0x23c
 8001a04:	ee07 3a90 	vmov	s15, r3
 8001a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a0c:	4ba3      	ldr	r3, [pc, #652]	; (8001c9c <ShoreRequest+0x328>)
 8001a0e:	edc3 7a03 	vstr	s15, [r3, #12]
        rJoySpeed.pitch = req.pitch;
 8001a12:	f9b7 323e 	ldrsh.w	r3, [r7, #574]	; 0x23e
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1e:	4b9f      	ldr	r3, [pc, #636]	; (8001c9c <ShoreRequest+0x328>)
 8001a20:	edc3 7a04 	vstr	s15, [r3, #16]
        rJoySpeed.yaw = req.yaw;
 8001a24:	f9b7 3240 	ldrsh.w	r3, [r7, #576]	; 0x240
 8001a28:	ee07 3a90 	vmov	s15, r3
 8001a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a30:	4b9a      	ldr	r3, [pc, #616]	; (8001c9c <ShoreRequest+0x328>)
 8001a32:	edc3 7a05 	vstr	s15, [r3, #20]

        rDevice[GRAB].force = req.grab;
 8001a36:	f997 2243 	ldrsb.w	r2, [r7, #579]	; 0x243
 8001a3a:	4b99      	ldr	r3, [pc, #612]	; (8001ca0 <ShoreRequest+0x32c>)
 8001a3c:	731a      	strb	r2, [r3, #12]
        if (rDevice[GRAB].force < -127) {
 8001a3e:	4b98      	ldr	r3, [pc, #608]	; (8001ca0 <ShoreRequest+0x32c>)
 8001a40:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001a44:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001a48:	d102      	bne.n	8001a50 <ShoreRequest+0xdc>
            rDevice[GRAB].force = -127;
 8001a4a:	4b95      	ldr	r3, [pc, #596]	; (8001ca0 <ShoreRequest+0x32c>)
 8001a4c:	2281      	movs	r2, #129	; 0x81
 8001a4e:	731a      	strb	r2, [r3, #12]
        }
        rDevice[TILT].force = req.tilt;
 8001a50:	f997 2244 	ldrsb.w	r2, [r7, #580]	; 0x244
 8001a54:	4b92      	ldr	r3, [pc, #584]	; (8001ca0 <ShoreRequest+0x32c>)
 8001a56:	f883 2020 	strb.w	r2, [r3, #32]
        if (rDevice[TILT].force < -127) {
 8001a5a:	4b91      	ldr	r3, [pc, #580]	; (8001ca0 <ShoreRequest+0x32c>)
 8001a5c:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8001a60:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001a64:	d103      	bne.n	8001a6e <ShoreRequest+0xfa>
        	rDevice[TILT].force = -127;
 8001a66:	4b8e      	ldr	r3, [pc, #568]	; (8001ca0 <ShoreRequest+0x32c>)
 8001a68:	2281      	movs	r2, #129	; 0x81
 8001a6a:	f883 2020 	strb.w	r2, [r3, #32]
        }
        rDevice[GRAB_ROTATION].force  = req.grab_rotate;
 8001a6e:	f997 2245 	ldrsb.w	r2, [r7, #581]	; 0x245
 8001a72:	4b8b      	ldr	r3, [pc, #556]	; (8001ca0 <ShoreRequest+0x32c>)
 8001a74:	759a      	strb	r2, [r3, #22]
        if (rDevice[GRAB_ROTATION].force < -127) {
 8001a76:	4b8a      	ldr	r3, [pc, #552]	; (8001ca0 <ShoreRequest+0x32c>)
 8001a78:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001a7c:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001a80:	d102      	bne.n	8001a88 <ShoreRequest+0x114>
            rDevice[GRAB_ROTATION].force = -127;
 8001a82:	4b87      	ldr	r3, [pc, #540]	; (8001ca0 <ShoreRequest+0x32c>)
 8001a84:	2281      	movs	r2, #129	; 0x81
 8001a86:	759a      	strb	r2, [r3, #22]
        }

        rDevice[DEV1].force = req.dev1;
 8001a88:	f997 2246 	ldrsb.w	r2, [r7, #582]	; 0x246
 8001a8c:	4b84      	ldr	r3, [pc, #528]	; (8001ca0 <ShoreRequest+0x32c>)
 8001a8e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        rDevice[DEV2].force = req.dev2;
 8001a92:	f997 2247 	ldrsb.w	r2, [r7, #583]	; 0x247
 8001a96:	4b82      	ldr	r3, [pc, #520]	; (8001ca0 <ShoreRequest+0x32c>)
 8001a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        rState.lag_error = (float) req.lag_error;
 8001a9c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001aa0:	ee07 3a90 	vmov	s15, r3
 8001aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa8:	4b7e      	ldr	r3, [pc, #504]	; (8001ca4 <ShoreRequest+0x330>)
 8001aaa:	edc3 7a02 	vstr	s15, [r3, #8]

        rSensors.resetIMU = PickBit(req.stabilize_flags, SHORE_STABILIZE_IMU_BIT);
 8001aae:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001ab2:	2106      	movs	r1, #6
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fba5 	bl	8001204 <PickBit>
 8001aba:	4603      	mov	r3, r0
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b7a      	ldr	r3, [pc, #488]	; (8001ca8 <ShoreRequest+0x334>)
 8001ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(PickBit(req.stabilize_flags, SHORE_STABILIZE_SAVE_BIT)) {
 8001ac4:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001ac8:	2107      	movs	r1, #7
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fb9a 	bl	8001204 <PickBit>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d009      	beq.n	8001aea <ShoreRequest+0x176>
        	struct flashConfiguration_s config;
        	flashFillStructure(&config);
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 fd4a 	bl	8002574 <flashFillStructure>
        	flashWriteSettings(&config);
 8001ae0:	f107 0308 	add.w	r3, r7, #8
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 fd07 	bl	80024f8 <flashWriteSettings>
        }

        tempCameraNum = req.cameras;
 8001aea:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
 8001aee:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257

        uint8_t old_reset = rComputer.reset;
 8001af2:	4b6e      	ldr	r3, [pc, #440]	; (8001cac <ShoreRequest+0x338>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256
        if(old_reset != req.pc_reset) {
 8001afa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8001afe:	f897 2256 	ldrb.w	r2, [r7, #598]	; 0x256
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d002      	beq.n	8001b0c <ShoreRequest+0x198>
            if(req.pc_reset == PC_ON_CODE) {
 8001b06:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8001b0a:	2baa      	cmp	r3, #170	; 0xaa
            else if(req.pc_reset == PC_OFF_CODE) {
           // 	HAL_GPIO_WritePin(PC_CONTROL1_GPIO_Port, PC_CONTROL1_Pin, GPIO_PIN_SET); // RESET
           //	HAL_GPIO_WritePin(PC_CONTROL2_GPIO_Port, PC_CONTROL2_Pin, GPIO_PIN_SET); // ONOFF
            }
        }
        rComputer.reset = req.pc_reset;
 8001b0c:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 8001b10:	4b66      	ldr	r3, [pc, #408]	; (8001cac <ShoreRequest+0x338>)
 8001b12:	701a      	strb	r2, [r3, #0]

        bool wasEnabled = rStabConstants[STAB_YAW].enable;
 8001b14:	4b66      	ldr	r3, [pc, #408]	; (8001cb0 <ShoreRequest+0x33c>)
 8001b16:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001b1a:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_YAW].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_YAW_BIT);
 8001b1e:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001b22:	2103      	movs	r1, #3
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fb6d 	bl	8001204 <PickBit>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b60      	ldr	r3, [pc, #384]	; (8001cb0 <ShoreRequest+0x33c>)
 8001b30:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
        if(wasEnabled == false && rStabConstants[STAB_YAW].enable == true) {
 8001b34:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001b38:	f083 0301 	eor.w	r3, r3, #1
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d007      	beq.n	8001b52 <ShoreRequest+0x1de>
 8001b42:	4b5b      	ldr	r3, [pc, #364]	; (8001cb0 <ShoreRequest+0x33c>)
 8001b44:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <ShoreRequest+0x1de>
        	stabilizationStart(STAB_YAW);
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	f001 fbbd 	bl	80032cc <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_ROLL].enable;
 8001b52:	4b57      	ldr	r3, [pc, #348]	; (8001cb0 <ShoreRequest+0x33c>)
 8001b54:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001b58:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_ROLL].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_ROLL_BIT);
 8001b5c:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001b60:	2101      	movs	r1, #1
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fb4e 	bl	8001204 <PickBit>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b50      	ldr	r3, [pc, #320]	; (8001cb0 <ShoreRequest+0x33c>)
 8001b6e:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
        if(wasEnabled == false && rStabConstants[STAB_ROLL].enable == true) {
 8001b72:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001b76:	f083 0301 	eor.w	r3, r3, #1
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d007      	beq.n	8001b90 <ShoreRequest+0x21c>
 8001b80:	4b4b      	ldr	r3, [pc, #300]	; (8001cb0 <ShoreRequest+0x33c>)
 8001b82:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <ShoreRequest+0x21c>
        	stabilizationStart(STAB_ROLL);
 8001b8a:	2004      	movs	r0, #4
 8001b8c:	f001 fb9e 	bl	80032cc <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_PITCH].enable;
 8001b90:	4b47      	ldr	r3, [pc, #284]	; (8001cb0 <ShoreRequest+0x33c>)
 8001b92:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8001b96:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_PITCH].enable = true; //PickBit(req.stabilize_flags, SHORE_STABILIZE_PITCH_BIT);
 8001b9a:	4b45      	ldr	r3, [pc, #276]	; (8001cb0 <ShoreRequest+0x33c>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
        if(wasEnabled == false && rStabConstants[STAB_PITCH].enable == true) {
 8001ba2:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001ba6:	f083 0301 	eor.w	r3, r3, #1
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d007      	beq.n	8001bc0 <ShoreRequest+0x24c>
 8001bb0:	4b3f      	ldr	r3, [pc, #252]	; (8001cb0 <ShoreRequest+0x33c>)
 8001bb2:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d002      	beq.n	8001bc0 <ShoreRequest+0x24c>
        	stabilizationStart(STAB_PITCH);
 8001bba:	2005      	movs	r0, #5
 8001bbc:	f001 fb86 	bl	80032cc <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_DEPTH].enable;
 8001bc0:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <ShoreRequest+0x33c>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_DEPTH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_DEPTH_BIT);
 8001bc8:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fb18 	bl	8001204 <PickBit>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <ShoreRequest+0x33c>)
 8001bda:	701a      	strb	r2, [r3, #0]
        if(wasEnabled == false && rStabConstants[STAB_DEPTH].enable == true) {
 8001bdc:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001be0:	f083 0301 	eor.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d006      	beq.n	8001bf8 <ShoreRequest+0x284>
 8001bea:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <ShoreRequest+0x33c>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <ShoreRequest+0x284>
        	stabilizationStart(STAB_DEPTH);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f001 fb6a 	bl	80032cc <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_LAG].enable;
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <ShoreRequest+0x33c>)
 8001bfa:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001bfe:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_LAG].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_LAG_BIT);
 8001c02:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001c06:	2104      	movs	r1, #4
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fafb 	bl	8001204 <PickBit>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b27      	ldr	r3, [pc, #156]	; (8001cb0 <ShoreRequest+0x33c>)
 8001c14:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        if(wasEnabled == false && rStabConstants[STAB_LAG].enable == true) {
 8001c18:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001c1c:	f083 0301 	eor.w	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <ShoreRequest+0x2c2>
 8001c26:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <ShoreRequest+0x33c>)
 8001c28:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <ShoreRequest+0x2c2>
        	stabilizationStart(STAB_LAG);
 8001c30:	2002      	movs	r0, #2
 8001c32:	f001 fb4b 	bl	80032cc <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_MARCH].enable;
 8001c36:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <ShoreRequest+0x33c>)
 8001c38:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001c3c:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_MARCH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_MARCH_BIT);
 8001c40:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001c44:	2105      	movs	r1, #5
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fadc 	bl	8001204 <PickBit>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <ShoreRequest+0x33c>)
 8001c52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        if(wasEnabled == false && rStabConstants[STAB_MARCH].enable == true) {
 8001c56:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001c5a:	f083 0301 	eor.w	r3, r3, #1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d007      	beq.n	8001c74 <ShoreRequest+0x300>
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <ShoreRequest+0x33c>)
 8001c66:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <ShoreRequest+0x300>
        	stabilizationStart(STAB_MARCH);
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f001 fb2c 	bl	80032cc <stabilizationStart>
//        		break;
//        	}
//        }

        // TODO tuuuupoooo
        formThrustVectors();
 8001c74:	f002 f900 	bl	8003e78 <formThrustVectors>

        ++uartBus[SHORE_UART].successRxCounter;
 8001c78:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <ShoreRequest+0x340>)
 8001c7a:	895b      	ldrh	r3, [r3, #10]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <ShoreRequest+0x340>)
 8001c82:	815a      	strh	r2, [r3, #10]

        	brokenRxTolerance = 0;
        }
        */
    }
}
 8001c84:	e004      	b.n	8001c90 <ShoreRequest+0x31c>
    	++uartBus[SHORE_UART].brokenRxCounter;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <ShoreRequest+0x340>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <ShoreRequest+0x340>)
 8001c8e:	60d3      	str	r3, [r2, #12]
}
 8001c90:	bf00      	nop
 8001c92:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bdb0      	pop	{r4, r5, r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200016f0 	.word	0x200016f0
 8001ca0:	20001708 	.word	0x20001708
 8001ca4:	200015b8 	.word	0x200015b8
 8001ca8:	20001684 	.word	0x20001684
 8001cac:	200016ec 	.word	0x200016ec
 8001cb0:	20001748 	.word	0x20001748
 8001cb4:	200000ec 	.word	0x200000ec

08001cb8 <ShoreConfigRequest>:

void ShoreConfigRequest(uint8_t *requestBuf)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b098      	sub	sp, #96	; 0x60
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, REQUEST_CONFIG_LENGTH)) {
 8001cc0:	2154      	movs	r1, #84	; 0x54
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff f9bd 	bl	8001042 <IsCrc16ChecksummCorrect>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 8158 	beq.w	8001f80 <ShoreConfigRequest+0x2c8>
		struct shoreConfigRequest_s req;
		memcpy((void*)&req, (void*)requestBuf, REQUEST_CONFIG_LENGTH);
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	f107 0308 	add.w	r3, r7, #8
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	2254      	movs	r2, #84	; 0x54
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f00b ff7a 	bl	800dbd4 <memcpy>

		rJoySpeed.march = req.march;
 8001ce0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ce4:	ee07 3a90 	vmov	s15, r3
 8001ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cec:	4ba9      	ldr	r3, [pc, #676]	; (8001f94 <ShoreConfigRequest+0x2dc>)
 8001cee:	edc3 7a00 	vstr	s15, [r3]
		rJoySpeed.lag = req.lag;
 8001cf2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001cf6:	ee07 3a90 	vmov	s15, r3
 8001cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfe:	4ba5      	ldr	r3, [pc, #660]	; (8001f94 <ShoreConfigRequest+0x2dc>)
 8001d00:	edc3 7a01 	vstr	s15, [r3, #4]
		rJoySpeed.depth = req.depth;
 8001d04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d08:	ee07 3a90 	vmov	s15, r3
 8001d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d10:	4ba0      	ldr	r3, [pc, #640]	; (8001f94 <ShoreConfigRequest+0x2dc>)
 8001d12:	edc3 7a02 	vstr	s15, [r3, #8]
		rJoySpeed.roll = req.roll;
 8001d16:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d1a:	ee07 3a90 	vmov	s15, r3
 8001d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d22:	4b9c      	ldr	r3, [pc, #624]	; (8001f94 <ShoreConfigRequest+0x2dc>)
 8001d24:	edc3 7a03 	vstr	s15, [r3, #12]
		rJoySpeed.pitch = req.pitch;
 8001d28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d2c:	ee07 3a90 	vmov	s15, r3
 8001d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d34:	4b97      	ldr	r3, [pc, #604]	; (8001f94 <ShoreConfigRequest+0x2dc>)
 8001d36:	edc3 7a04 	vstr	s15, [r3, #16]
		rJoySpeed.yaw = req.yaw;
 8001d3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d3e:	ee07 3a90 	vmov	s15, r3
 8001d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d46:	4b93      	ldr	r3, [pc, #588]	; (8001f94 <ShoreConfigRequest+0x2dc>)
 8001d48:	edc3 7a05 	vstr	s15, [r3, #20]

		rStabConstants[req.contour].pJoyUnitCast = req.pJoyUnitCast;
 8001d4c:	7a7b      	ldrb	r3, [r7, #9]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f8d7 2016 	ldr.w	r2, [r7, #22]
 8001d54:	4613      	mov	r3, r2
 8001d56:	461a      	mov	r2, r3
 8001d58:	498f      	ldr	r1, [pc, #572]	; (8001f98 <ShoreConfigRequest+0x2e0>)
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4403      	add	r3, r0
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	440b      	add	r3, r1
 8001d64:	3304      	adds	r3, #4
 8001d66:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pSpeedDyn = req.pSpeedDyn;
 8001d68:	7a7b      	ldrb	r3, [r7, #9]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f8d7 201a 	ldr.w	r2, [r7, #26]
 8001d70:	4613      	mov	r3, r2
 8001d72:	461a      	mov	r2, r3
 8001d74:	4988      	ldr	r1, [pc, #544]	; (8001f98 <ShoreConfigRequest+0x2e0>)
 8001d76:	4603      	mov	r3, r0
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4403      	add	r3, r0
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	440b      	add	r3, r1
 8001d80:	3308      	adds	r3, #8
 8001d82:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pErrGain = req.pErrGain;
 8001d84:	7a7b      	ldrb	r3, [r7, #9]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f8d7 201e 	ldr.w	r2, [r7, #30]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4981      	ldr	r1, [pc, #516]	; (8001f98 <ShoreConfigRequest+0x2e0>)
 8001d92:	4603      	mov	r3, r0
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4403      	add	r3, r0
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	440b      	add	r3, r1
 8001d9c:	330c      	adds	r3, #12
 8001d9e:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].aFilter[POS_FILTER].T = req.posFilterT;
 8001da0:	7a7b      	ldrb	r3, [r7, #9]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f8d7 2022 	ldr.w	r2, [r7, #34]	; 0x22
 8001da8:	4613      	mov	r3, r2
 8001daa:	461a      	mov	r2, r3
 8001dac:	497a      	ldr	r1, [pc, #488]	; (8001f98 <ShoreConfigRequest+0x2e0>)
 8001dae:	4603      	mov	r3, r0
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4403      	add	r3, r0
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	440b      	add	r3, r1
 8001db8:	3310      	adds	r3, #16
 8001dba:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[POS_FILTER].K = req.posFilterK;
 8001dbc:	7a7b      	ldrb	r3, [r7, #9]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f8d7 2026 	ldr.w	r2, [r7, #38]	; 0x26
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4973      	ldr	r1, [pc, #460]	; (8001f98 <ShoreConfigRequest+0x2e0>)
 8001dca:	4603      	mov	r3, r0
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4403      	add	r3, r0
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	440b      	add	r3, r1
 8001dd4:	3314      	adds	r3, #20
 8001dd6:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].T = req.speedFilterT;
 8001dd8:	7a7b      	ldrb	r3, [r7, #9]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f8d7 202a 	ldr.w	r2, [r7, #42]	; 0x2a
 8001de0:	4613      	mov	r3, r2
 8001de2:	461a      	mov	r2, r3
 8001de4:	496c      	ldr	r1, [pc, #432]	; (8001f98 <ShoreConfigRequest+0x2e0>)
 8001de6:	4603      	mov	r3, r0
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4403      	add	r3, r0
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	3318      	adds	r3, #24
 8001df2:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].K = req.speedFilterK;
 8001df4:	7a7b      	ldrb	r3, [r7, #9]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f8d7 202e 	ldr.w	r2, [r7, #46]	; 0x2e
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4965      	ldr	r1, [pc, #404]	; (8001f98 <ShoreConfigRequest+0x2e0>)
 8001e02:	4603      	mov	r3, r0
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4403      	add	r3, r0
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	440b      	add	r3, r1
 8001e0c:	331c      	adds	r3, #28
 8001e0e:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].pid.pGain = req.pid_pGain;
 8001e10:	7a7b      	ldrb	r3, [r7, #9]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f8d7 2032 	ldr.w	r2, [r7, #50]	; 0x32
 8001e18:	4613      	mov	r3, r2
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	495e      	ldr	r1, [pc, #376]	; (8001f98 <ShoreConfigRequest+0x2e0>)
 8001e1e:	4603      	mov	r3, r0
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	4403      	add	r3, r0
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	440b      	add	r3, r1
 8001e28:	3328      	adds	r3, #40	; 0x28
 8001e2a:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iGain = req.pid_iGain;
 8001e2c:	7a7b      	ldrb	r3, [r7, #9]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f8d7 2036 	ldr.w	r2, [r7, #54]	; 0x36
 8001e34:	4613      	mov	r3, r2
 8001e36:	461a      	mov	r2, r3
 8001e38:	4957      	ldr	r1, [pc, #348]	; (8001f98 <ShoreConfigRequest+0x2e0>)
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4403      	add	r3, r0
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	440b      	add	r3, r1
 8001e44:	332c      	adds	r3, #44	; 0x2c
 8001e46:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iMax = req.pid_iMax;
 8001e48:	7a7b      	ldrb	r3, [r7, #9]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f8d7 203a 	ldr.w	r2, [r7, #58]	; 0x3a
 8001e50:	4613      	mov	r3, r2
 8001e52:	461a      	mov	r2, r3
 8001e54:	4950      	ldr	r1, [pc, #320]	; (8001f98 <ShoreConfigRequest+0x2e0>)
 8001e56:	4603      	mov	r3, r0
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4403      	add	r3, r0
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	440b      	add	r3, r1
 8001e60:	3330      	adds	r3, #48	; 0x30
 8001e62:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iMin = req.pid_iMin;
 8001e64:	7a7b      	ldrb	r3, [r7, #9]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f8d7 203e 	ldr.w	r2, [r7, #62]	; 0x3e
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4949      	ldr	r1, [pc, #292]	; (8001f98 <ShoreConfigRequest+0x2e0>)
 8001e72:	4603      	mov	r3, r0
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4403      	add	r3, r0
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	440b      	add	r3, r1
 8001e7c:	3334      	adds	r3, #52	; 0x34
 8001e7e:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].pThrustersMin = req.pThrustersMin;
 8001e80:	7a7b      	ldrb	r3, [r7, #9]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f8d7 2042 	ldr.w	r2, [r7, #66]	; 0x42
 8001e88:	4613      	mov	r3, r2
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4942      	ldr	r1, [pc, #264]	; (8001f98 <ShoreConfigRequest+0x2e0>)
 8001e8e:	4603      	mov	r3, r0
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4403      	add	r3, r0
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	440b      	add	r3, r1
 8001e98:	3338      	adds	r3, #56	; 0x38
 8001e9a:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pThrustersMax = req.pThrustersMax;
 8001e9c:	7a7b      	ldrb	r3, [r7, #9]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f8d7 2046 	ldr.w	r2, [r7, #70]	; 0x46
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	493b      	ldr	r1, [pc, #236]	; (8001f98 <ShoreConfigRequest+0x2e0>)
 8001eaa:	4603      	mov	r3, r0
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4403      	add	r3, r0
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	440b      	add	r3, r1
 8001eb4:	333c      	adds	r3, #60	; 0x3c
 8001eb6:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].T = req.thrustersFilterT;
 8001eb8:	7a7b      	ldrb	r3, [r7, #9]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f8d7 204a 	ldr.w	r2, [r7, #74]	; 0x4a
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4934      	ldr	r1, [pc, #208]	; (8001f98 <ShoreConfigRequest+0x2e0>)
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4403      	add	r3, r0
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	3320      	adds	r3, #32
 8001ed2:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].K = req.thrustersFilterK;
 8001ed4:	7a7b      	ldrb	r3, [r7, #9]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f8d7 204e 	ldr.w	r2, [r7, #78]	; 0x4e
 8001edc:	4613      	mov	r3, r2
 8001ede:	461a      	mov	r2, r3
 8001ee0:	492d      	ldr	r1, [pc, #180]	; (8001f98 <ShoreConfigRequest+0x2e0>)
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4403      	add	r3, r0
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	440b      	add	r3, r1
 8001eec:	3324      	adds	r3, #36	; 0x24
 8001eee:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].sOutSummatorMax = req.sOutSummatorMax;
 8001ef0:	7a7b      	ldrb	r3, [r7, #9]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f8d7 2052 	ldr.w	r2, [r7, #82]	; 0x52
 8001ef8:	4613      	mov	r3, r2
 8001efa:	461a      	mov	r2, r3
 8001efc:	4926      	ldr	r1, [pc, #152]	; (8001f98 <ShoreConfigRequest+0x2e0>)
 8001efe:	4603      	mov	r3, r0
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4403      	add	r3, r0
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	440b      	add	r3, r1
 8001f08:	3340      	adds	r3, #64	; 0x40
 8001f0a:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].sOutSummatorMin = req.sOutSummatorMin;
 8001f0c:	7a7b      	ldrb	r3, [r7, #9]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f8d7 2056 	ldr.w	r2, [r7, #86]	; 0x56
 8001f14:	4613      	mov	r3, r2
 8001f16:	461a      	mov	r2, r3
 8001f18:	491f      	ldr	r1, [pc, #124]	; (8001f98 <ShoreConfigRequest+0x2e0>)
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4403      	add	r3, r0
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	3344      	adds	r3, #68	; 0x44
 8001f26:	601a      	str	r2, [r3, #0]

		if(rState.contourSelected != req.contour) {
 8001f28:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <ShoreConfigRequest+0x2e4>)
 8001f2a:	785a      	ldrb	r2, [r3, #1]
 8001f2c:	7a7b      	ldrb	r3, [r7, #9]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d01d      	beq.n	8001f6e <ShoreConfigRequest+0x2b6>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8001f32:	2300      	movs	r3, #0
 8001f34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001f38:	e00e      	b.n	8001f58 <ShoreConfigRequest+0x2a0>
				rStabConstants[i].enable = false;
 8001f3a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001f3e:	4916      	ldr	r1, [pc, #88]	; (8001f98 <ShoreConfigRequest+0x2e0>)
 8001f40:	4613      	mov	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	440b      	add	r3, r1
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8001f4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001f52:	3301      	adds	r3, #1
 8001f54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001f58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001f5c:	2b05      	cmp	r3, #5
 8001f5e:	d9ec      	bls.n	8001f3a <ShoreConfigRequest+0x282>
			}
			rState.contourSelected = req.contour;
 8001f60:	7a7a      	ldrb	r2, [r7, #9]
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <ShoreConfigRequest+0x2e4>)
 8001f64:	705a      	strb	r2, [r3, #1]
			stabilizationStart(req.contour);
 8001f66:	7a7b      	ldrb	r3, [r7, #9]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f001 f9af 	bl	80032cc <stabilizationStart>
		}

		// TODO tuuuupooo
		formThrustVectors();
 8001f6e:	f001 ff83 	bl	8003e78 <formThrustVectors>

		++uartBus[SHORE_UART].successRxCounter;;
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <ShoreConfigRequest+0x2e8>)
 8001f74:	895b      	ldrh	r3, [r3, #10]
 8001f76:	3301      	adds	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <ShoreConfigRequest+0x2e8>)
 8001f7c:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 8001f7e:	e004      	b.n	8001f8a <ShoreConfigRequest+0x2d2>
		++uartBus[SHORE_UART].brokenRxCounter;
 8001f80:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <ShoreConfigRequest+0x2e8>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	3301      	adds	r3, #1
 8001f86:	4a06      	ldr	r2, [pc, #24]	; (8001fa0 <ShoreConfigRequest+0x2e8>)
 8001f88:	60d3      	str	r3, [r2, #12]
}
 8001f8a:	bf00      	nop
 8001f8c:	3760      	adds	r7, #96	; 0x60
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200016f0 	.word	0x200016f0
 8001f98:	20001748 	.word	0x20001748
 8001f9c:	200015b8 	.word	0x200015b8
 8001fa0:	200000ec 	.word	0x200000ec

08001fa4 <ShoreDirectRequest>:

void ShoreDirectRequest(uint8_t *requestBuf)
{
 8001fa4:	b5b0      	push	{r4, r5, r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_DIRECT_LENGTH)) {
 8001fac:	2111      	movs	r1, #17
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff f847 	bl	8001042 <IsCrc16ChecksummCorrect>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 809b 	beq.w	80020f2 <ShoreDirectRequest+0x14e>
		struct shoreRequestDirect_s req;
		memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_DIRECT_LENGTH);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f107 040c 	add.w	r4, r7, #12
 8001fc2:	461d      	mov	r5, r3
 8001fc4:	6828      	ldr	r0, [r5, #0]
 8001fc6:	6869      	ldr	r1, [r5, #4]
 8001fc8:	68aa      	ldr	r2, [r5, #8]
 8001fca:	68eb      	ldr	r3, [r5, #12]
 8001fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fce:	7c2b      	ldrb	r3, [r5, #16]
 8001fd0:	7023      	strb	r3, [r4, #0]

		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	77fb      	strb	r3, [r7, #31]
 8001fd6:	e00b      	b.n	8001ff0 <ShoreDirectRequest+0x4c>
			rStabConstants[i].enable = false;
 8001fd8:	7ffa      	ldrb	r2, [r7, #31]
 8001fda:	494a      	ldr	r1, [pc, #296]	; (8002104 <ShoreDirectRequest+0x160>)
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	440b      	add	r3, r1
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8001fea:	7ffb      	ldrb	r3, [r7, #31]
 8001fec:	3301      	adds	r3, #1
 8001fee:	77fb      	strb	r3, [r7, #31]
 8001ff0:	7ffb      	ldrb	r3, [r7, #31]
 8001ff2:	2b05      	cmp	r3, #5
 8001ff4:	d9f0      	bls.n	8001fd8 <ShoreDirectRequest+0x34>
		}

		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	77bb      	strb	r3, [r7, #30]
 8001ffa:	e070      	b.n	80020de <ShoreDirectRequest+0x13a>
			if(i != req.number) {
 8001ffc:	7b7b      	ldrb	r3, [r7, #13]
 8001ffe:	7fba      	ldrb	r2, [r7, #30]
 8002000:	429a      	cmp	r2, r3
 8002002:	d00a      	beq.n	800201a <ShoreDirectRequest+0x76>
				rThrusters[i].desiredSpeed = 0;
 8002004:	7fba      	ldrb	r2, [r7, #30]
 8002006:	4940      	ldr	r1, [pc, #256]	; (8002108 <ShoreDirectRequest+0x164>)
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	440b      	add	r3, r1
 8002012:	3302      	adds	r3, #2
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
 8002018:	e05e      	b.n	80020d8 <ShoreDirectRequest+0x134>
			}
			else {
				rThrusters[req.number].desiredSpeed = req.velocity;
 800201a:	7b7b      	ldrb	r3, [r7, #13]
 800201c:	4619      	mov	r1, r3
 800201e:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8002022:	4a39      	ldr	r2, [pc, #228]	; (8002108 <ShoreDirectRequest+0x164>)
 8002024:	460b      	mov	r3, r1
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	440b      	add	r3, r1
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4413      	add	r3, r2
 800202e:	3302      	adds	r3, #2
 8002030:	4602      	mov	r2, r0
 8002032:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].address = req.id;
 8002034:	7b7b      	ldrb	r3, [r7, #13]
 8002036:	4619      	mov	r1, r3
 8002038:	7bb8      	ldrb	r0, [r7, #14]
 800203a:	4a33      	ldr	r2, [pc, #204]	; (8002108 <ShoreDirectRequest+0x164>)
 800203c:	460b      	mov	r3, r1
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	440b      	add	r3, r1
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4413      	add	r3, r2
 8002046:	4602      	mov	r2, r0
 8002048:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].kForward = req.kForward;
 800204a:	7b7b      	ldrb	r3, [r7, #13]
 800204c:	4618      	mov	r0, r3
 800204e:	f8d7 2011 	ldr.w	r2, [r7, #17]
 8002052:	4613      	mov	r3, r2
 8002054:	461a      	mov	r2, r3
 8002056:	492c      	ldr	r1, [pc, #176]	; (8002108 <ShoreDirectRequest+0x164>)
 8002058:	4603      	mov	r3, r0
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4403      	add	r3, r0
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	440b      	add	r3, r1
 8002062:	330c      	adds	r3, #12
 8002064:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].kBackward = req.kBackward;
 8002066:	7b7b      	ldrb	r3, [r7, #13]
 8002068:	4618      	mov	r0, r3
 800206a:	f8d7 2015 	ldr.w	r2, [r7, #21]
 800206e:	4613      	mov	r3, r2
 8002070:	461a      	mov	r2, r3
 8002072:	4925      	ldr	r1, [pc, #148]	; (8002108 <ShoreDirectRequest+0x164>)
 8002074:	4603      	mov	r3, r0
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4403      	add	r3, r0
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	440b      	add	r3, r1
 800207e:	3310      	adds	r3, #16
 8002080:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].sForward = req.sForward;
 8002082:	7b7b      	ldrb	r3, [r7, #13]
 8002084:	4619      	mov	r1, r3
 8002086:	f997 0019 	ldrsb.w	r0, [r7, #25]
 800208a:	4a1f      	ldr	r2, [pc, #124]	; (8002108 <ShoreDirectRequest+0x164>)
 800208c:	460b      	mov	r3, r1
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	440b      	add	r3, r1
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4413      	add	r3, r2
 8002096:	3314      	adds	r3, #20
 8002098:	4602      	mov	r2, r0
 800209a:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].sBackward = req.sBackward;
 800209c:	7b7b      	ldrb	r3, [r7, #13]
 800209e:	4619      	mov	r1, r3
 80020a0:	f997 001a 	ldrsb.w	r0, [r7, #26]
 80020a4:	4a18      	ldr	r2, [pc, #96]	; (8002108 <ShoreDirectRequest+0x164>)
 80020a6:	460b      	mov	r3, r1
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	440b      	add	r3, r1
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	3315      	adds	r3, #21
 80020b2:	4602      	mov	r2, r0
 80020b4:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].inverse = req.reverse;
 80020b6:	7c3b      	ldrb	r3, [r7, #16]
 80020b8:	7b7a      	ldrb	r2, [r7, #13]
 80020ba:	4611      	mov	r1, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bf14      	ite	ne
 80020c0:	2301      	movne	r3, #1
 80020c2:	2300      	moveq	r3, #0
 80020c4:	b2d8      	uxtb	r0, r3
 80020c6:	4a10      	ldr	r2, [pc, #64]	; (8002108 <ShoreDirectRequest+0x164>)
 80020c8:	460b      	mov	r3, r1
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	440b      	add	r3, r1
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	3316      	adds	r3, #22
 80020d4:	4602      	mov	r2, r0
 80020d6:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80020d8:	7fbb      	ldrb	r3, [r7, #30]
 80020da:	3301      	adds	r3, #1
 80020dc:	77bb      	strb	r3, [r7, #30]
 80020de:	7fbb      	ldrb	r3, [r7, #30]
 80020e0:	2b07      	cmp	r3, #7
 80020e2:	d98b      	bls.n	8001ffc <ShoreDirectRequest+0x58>
			}
		}

		++uartBus[SHORE_UART].successRxCounter;;
 80020e4:	4b09      	ldr	r3, [pc, #36]	; (800210c <ShoreDirectRequest+0x168>)
 80020e6:	895b      	ldrh	r3, [r3, #10]
 80020e8:	3301      	adds	r3, #1
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	4b07      	ldr	r3, [pc, #28]	; (800210c <ShoreDirectRequest+0x168>)
 80020ee:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 80020f0:	e004      	b.n	80020fc <ShoreDirectRequest+0x158>
		++uartBus[SHORE_UART].brokenRxCounter;
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <ShoreDirectRequest+0x168>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	3301      	adds	r3, #1
 80020f8:	4a04      	ldr	r2, [pc, #16]	; (800210c <ShoreDirectRequest+0x168>)
 80020fa:	60d3      	str	r3, [r2, #12]
}
 80020fc:	bf00      	nop
 80020fe:	3720      	adds	r7, #32
 8002100:	46bd      	mov	sp, r7
 8002102:	bdb0      	pop	{r4, r5, r7, pc}
 8002104:	20001748 	.word	0x20001748
 8002108:	200015c4 	.word	0x200015c4
 800210c:	200000ec 	.word	0x200000ec

08002110 <ShoreResponse>:

void ShoreResponse(uint8_t *responseBuf)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b094      	sub	sp, #80	; 0x50
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	struct shoreResponse_s res;

    res.roll = rSensors.roll;
 8002118:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <ShoreResponse+0x78>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60bb      	str	r3, [r7, #8]
    res.pitch = rSensors.pitch;
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <ShoreResponse+0x78>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	60fb      	str	r3, [r7, #12]
    res.yaw =  rSensors.yaw;//*rStabState[STAB_YAW].posSignal;//rSensors.yaw;
 8002124:	4b18      	ldr	r3, [pc, #96]	; (8002188 <ShoreResponse+0x78>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	613b      	str	r3, [r7, #16]
    res.rollSpeed = rSensors.rollSpeed;
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <ShoreResponse+0x78>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	617b      	str	r3, [r7, #20]
    res.pitchSpeed = rSensors.pitchSpeed;
 8002130:	4b15      	ldr	r3, [pc, #84]	; (8002188 <ShoreResponse+0x78>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	61bb      	str	r3, [r7, #24]
    res.yawSpeed = rSensors.yawSpeed;
 8002136:	4b14      	ldr	r3, [pc, #80]	; (8002188 <ShoreResponse+0x78>)
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	61fb      	str	r3, [r7, #28]

    res.pressure = rSensors.pressure;
 800213c:	4b12      	ldr	r3, [pc, #72]	; (8002188 <ShoreResponse+0x78>)
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	623b      	str	r3, [r7, #32]

    res.vma_errors = 0x55;         //!!!!!TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 8002142:	2300      	movs	r3, #0
 8002144:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8002148:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800214c:	2300      	movs	r3, #0
 800214e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    // TODO do this properly pls
    res.dev_errors = 0;//robot->device.errors;
 8002152:	2300      	movs	r3, #0
 8002154:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8002158:	2300      	movs	r3, #0
 800215a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    res.pc_errors = rComputer.errors;
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <ShoreResponse+0x7c>)
 8002160:	785b      	ldrb	r3, [r3, #1]
 8002162:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

    memcpy((void*)responseBuf, (void*)&res, SHORE_RESPONSE_LENGTH);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4618      	mov	r0, r3
 800216a:	f107 0308 	add.w	r3, r7, #8
 800216e:	2246      	movs	r2, #70	; 0x46
 8002170:	4619      	mov	r1, r3
 8002172:	f00b fd2f 	bl	800dbd4 <memcpy>
    AddCrc16Checksumm(responseBuf, SHORE_RESPONSE_LENGTH);
 8002176:	2146      	movs	r1, #70	; 0x46
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7fe ff82 	bl	8001082 <AddCrc16Checksumm>
}
 800217e:	bf00      	nop
 8002180:	3750      	adds	r7, #80	; 0x50
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20001684 	.word	0x20001684
 800218c:	200016ec 	.word	0x200016ec

08002190 <ShoreConfigResponse>:

void ShoreConfigResponse(uint8_t *responseBuf)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b09c      	sub	sp, #112	; 0x70
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	struct shoreConfigResponse_s res;

	res.code = REQUEST_CONFIG_CODE;
 8002198:	2355      	movs	r3, #85	; 0x55
 800219a:	733b      	strb	r3, [r7, #12]

	res.roll = rSensors.roll;
 800219c:	4b74      	ldr	r3, [pc, #464]	; (8002370 <ShoreConfigResponse+0x1e0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f8c7 300d 	str.w	r3, [r7, #13]
	res.pitch = rSensors.pitch;
 80021a4:	4b72      	ldr	r3, [pc, #456]	; (8002370 <ShoreConfigResponse+0x1e0>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f8c7 3011 	str.w	r3, [r7, #17]
	res.yaw = rSensors.yaw;
 80021ac:	4b70      	ldr	r3, [pc, #448]	; (8002370 <ShoreConfigResponse+0x1e0>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f8c7 3015 	str.w	r3, [r7, #21]
	res.raw_yaw = rSensors.raw_yaw;
 80021b4:	4b6e      	ldr	r3, [pc, #440]	; (8002370 <ShoreConfigResponse+0x1e0>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f8c7 3019 	str.w	r3, [r7, #25]

	res.rollSpeed = rSensors.rollSpeed;
 80021bc:	4b6c      	ldr	r3, [pc, #432]	; (8002370 <ShoreConfigResponse+0x1e0>)
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	f8c7 301d 	str.w	r3, [r7, #29]
	res.pitchSpeed = rSensors.pitchSpeed;
 80021c4:	4b6a      	ldr	r3, [pc, #424]	; (8002370 <ShoreConfigResponse+0x1e0>)
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
	res.yawSpeed = rSensors.yawSpeed;
 80021cc:	4b68      	ldr	r3, [pc, #416]	; (8002370 <ShoreConfigResponse+0x1e0>)
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25

	res.pressure = rSensors.pressure;
 80021d4:	4b66      	ldr	r3, [pc, #408]	; (8002370 <ShoreConfigResponse+0x1e0>)
 80021d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d8:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
	res.in_pressure = 0;
 80021dc:	f04f 0300 	mov.w	r3, #0
 80021e0:	f8c7 302d 	str.w	r3, [r7, #45]	; 0x2d

	res.inputSignal = *rStabState[rState.contourSelected].inputSignal;
 80021e4:	4b63      	ldr	r3, [pc, #396]	; (8002374 <ShoreConfigResponse+0x1e4>)
 80021e6:	785b      	ldrb	r3, [r3, #1]
 80021e8:	4619      	mov	r1, r3
 80021ea:	4a63      	ldr	r2, [pc, #396]	; (8002378 <ShoreConfigResponse+0x1e8>)
 80021ec:	2358      	movs	r3, #88	; 0x58
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f8c7 3031 	str.w	r3, [r7, #49]	; 0x31
	res.speedSignal = *rStabState[rState.contourSelected].speedSignal;
 80021fc:	4b5d      	ldr	r3, [pc, #372]	; (8002374 <ShoreConfigResponse+0x1e4>)
 80021fe:	785b      	ldrb	r3, [r3, #1]
 8002200:	4619      	mov	r1, r3
 8002202:	4a5d      	ldr	r2, [pc, #372]	; (8002378 <ShoreConfigResponse+0x1e8>)
 8002204:	2358      	movs	r3, #88	; 0x58
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	3304      	adds	r3, #4
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f8c7 3035 	str.w	r3, [r7, #53]	; 0x35
	res.posSignal = *rStabState[rState.contourSelected].posSignal;
 8002216:	4b57      	ldr	r3, [pc, #348]	; (8002374 <ShoreConfigResponse+0x1e4>)
 8002218:	785b      	ldrb	r3, [r3, #1]
 800221a:	4619      	mov	r1, r3
 800221c:	4a56      	ldr	r2, [pc, #344]	; (8002378 <ShoreConfigResponse+0x1e8>)
 800221e:	2358      	movs	r3, #88	; 0x58
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	4413      	add	r3, r2
 8002226:	3308      	adds	r3, #8
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8c7 3039 	str.w	r3, [r7, #57]	; 0x39

	res.joyUnitCasted = rStabState[rState.contourSelected].joyUnitCasted;
 8002230:	4b50      	ldr	r3, [pc, #320]	; (8002374 <ShoreConfigResponse+0x1e4>)
 8002232:	785b      	ldrb	r3, [r3, #1]
 8002234:	4619      	mov	r1, r3
 8002236:	4a50      	ldr	r2, [pc, #320]	; (8002378 <ShoreConfigResponse+0x1e8>)
 8002238:	2358      	movs	r3, #88	; 0x58
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	331c      	adds	r3, #28
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8c7 303d 	str.w	r3, [r7, #61]	; 0x3d
	res.joy_iValue = rStabState[rState.contourSelected].joy_iValue;
 8002248:	4b4a      	ldr	r3, [pc, #296]	; (8002374 <ShoreConfigResponse+0x1e4>)
 800224a:	785b      	ldrb	r3, [r3, #1]
 800224c:	4619      	mov	r1, r3
 800224e:	4a4a      	ldr	r2, [pc, #296]	; (8002378 <ShoreConfigResponse+0x1e8>)
 8002250:	2358      	movs	r3, #88	; 0x58
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	3320      	adds	r3, #32
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8c7 3041 	str.w	r3, [r7, #65]	; 0x41
	res.posError = rStabState[rState.contourSelected].posError;
 8002260:	4b44      	ldr	r3, [pc, #272]	; (8002374 <ShoreConfigResponse+0x1e4>)
 8002262:	785b      	ldrb	r3, [r3, #1]
 8002264:	4619      	mov	r1, r3
 8002266:	4a44      	ldr	r2, [pc, #272]	; (8002378 <ShoreConfigResponse+0x1e8>)
 8002268:	2358      	movs	r3, #88	; 0x58
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	3324      	adds	r3, #36	; 0x24
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f8c7 3045 	str.w	r3, [r7, #69]	; 0x45
	res.speedError = rStabState[rState.contourSelected].speedError;
 8002278:	4b3e      	ldr	r3, [pc, #248]	; (8002374 <ShoreConfigResponse+0x1e4>)
 800227a:	785b      	ldrb	r3, [r3, #1]
 800227c:	4619      	mov	r1, r3
 800227e:	4a3e      	ldr	r2, [pc, #248]	; (8002378 <ShoreConfigResponse+0x1e8>)
 8002280:	2358      	movs	r3, #88	; 0x58
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	4413      	add	r3, r2
 8002288:	3328      	adds	r3, #40	; 0x28
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8c7 3049 	str.w	r3, [r7, #73]	; 0x49
	res.dynSummator = rStabState[rState.contourSelected].dynSummator;
 8002290:	4b38      	ldr	r3, [pc, #224]	; (8002374 <ShoreConfigResponse+0x1e4>)
 8002292:	785b      	ldrb	r3, [r3, #1]
 8002294:	4619      	mov	r1, r3
 8002296:	4a38      	ldr	r2, [pc, #224]	; (8002378 <ShoreConfigResponse+0x1e8>)
 8002298:	2358      	movs	r3, #88	; 0x58
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4413      	add	r3, r2
 80022a0:	332c      	adds	r3, #44	; 0x2c
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8c7 304d 	str.w	r3, [r7, #77]	; 0x4d
	res.pidValue = rStabState[rState.contourSelected].pidValue;
 80022a8:	4b32      	ldr	r3, [pc, #200]	; (8002374 <ShoreConfigResponse+0x1e4>)
 80022aa:	785b      	ldrb	r3, [r3, #1]
 80022ac:	4619      	mov	r1, r3
 80022ae:	4a32      	ldr	r2, [pc, #200]	; (8002378 <ShoreConfigResponse+0x1e8>)
 80022b0:	2358      	movs	r3, #88	; 0x58
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	3330      	adds	r3, #48	; 0x30
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f8c7 3051 	str.w	r3, [r7, #81]	; 0x51
	res.posErrorAmp = rStabState[rState.contourSelected].posErrorAmp;
 80022c0:	4b2c      	ldr	r3, [pc, #176]	; (8002374 <ShoreConfigResponse+0x1e4>)
 80022c2:	785b      	ldrb	r3, [r3, #1]
 80022c4:	4619      	mov	r1, r3
 80022c6:	4a2c      	ldr	r2, [pc, #176]	; (8002378 <ShoreConfigResponse+0x1e8>)
 80022c8:	2358      	movs	r3, #88	; 0x58
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	3338      	adds	r3, #56	; 0x38
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8c7 3055 	str.w	r3, [r7, #85]	; 0x55
	res.speedFiltered = rStabState[rState.contourSelected].speedFiltered;
 80022d8:	4b26      	ldr	r3, [pc, #152]	; (8002374 <ShoreConfigResponse+0x1e4>)
 80022da:	785b      	ldrb	r3, [r3, #1]
 80022dc:	4619      	mov	r1, r3
 80022de:	4a26      	ldr	r2, [pc, #152]	; (8002378 <ShoreConfigResponse+0x1e8>)
 80022e0:	2358      	movs	r3, #88	; 0x58
 80022e2:	fb01 f303 	mul.w	r3, r1, r3
 80022e6:	4413      	add	r3, r2
 80022e8:	333c      	adds	r3, #60	; 0x3c
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f8c7 3059 	str.w	r3, [r7, #89]	; 0x59
	res.posFiltered = rStabState[rState.contourSelected].posFiltered;
 80022f0:	4b20      	ldr	r3, [pc, #128]	; (8002374 <ShoreConfigResponse+0x1e4>)
 80022f2:	785b      	ldrb	r3, [r3, #1]
 80022f4:	4619      	mov	r1, r3
 80022f6:	4a20      	ldr	r2, [pc, #128]	; (8002378 <ShoreConfigResponse+0x1e8>)
 80022f8:	2358      	movs	r3, #88	; 0x58
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	4413      	add	r3, r2
 8002300:	3340      	adds	r3, #64	; 0x40
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8c7 305d 	str.w	r3, [r7, #93]	; 0x5d

	res.pid_iValue = rStabState[rState.contourSelected].pid_iValue;
 8002308:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <ShoreConfigResponse+0x1e4>)
 800230a:	785b      	ldrb	r3, [r3, #1]
 800230c:	4619      	mov	r1, r3
 800230e:	4a1a      	ldr	r2, [pc, #104]	; (8002378 <ShoreConfigResponse+0x1e8>)
 8002310:	2358      	movs	r3, #88	; 0x58
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	4413      	add	r3, r2
 8002318:	3334      	adds	r3, #52	; 0x34
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8c7 3061 	str.w	r3, [r7, #97]	; 0x61

	res.thrustersFiltered = rStabState[rState.contourSelected].thrustersFiltered;
 8002320:	4b14      	ldr	r3, [pc, #80]	; (8002374 <ShoreConfigResponse+0x1e4>)
 8002322:	785b      	ldrb	r3, [r3, #1]
 8002324:	4619      	mov	r1, r3
 8002326:	4a14      	ldr	r2, [pc, #80]	; (8002378 <ShoreConfigResponse+0x1e8>)
 8002328:	2358      	movs	r3, #88	; 0x58
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	334c      	adds	r3, #76	; 0x4c
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f8c7 3065 	str.w	r3, [r7, #101]	; 0x65
	res.outputSignal = rStabState[rState.contourSelected].outputSignal;
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <ShoreConfigResponse+0x1e4>)
 800233a:	785b      	ldrb	r3, [r3, #1]
 800233c:	4619      	mov	r1, r3
 800233e:	4a0e      	ldr	r2, [pc, #56]	; (8002378 <ShoreConfigResponse+0x1e8>)
 8002340:	2358      	movs	r3, #88	; 0x58
 8002342:	fb01 f303 	mul.w	r3, r1, r3
 8002346:	4413      	add	r3, r2
 8002348:	3350      	adds	r3, #80	; 0x50
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8c7 3069 	str.w	r3, [r7, #105]	; 0x69

	memcpy((void*)responseBuf, (void*)&res, SHORE_CONFIG_RESPONSE_LENGTH);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4618      	mov	r0, r3
 8002354:	f107 030c 	add.w	r3, r7, #12
 8002358:	2263      	movs	r2, #99	; 0x63
 800235a:	4619      	mov	r1, r3
 800235c:	f00b fc3a 	bl	800dbd4 <memcpy>

	AddCrc16Checksumm(responseBuf, SHORE_CONFIG_RESPONSE_LENGTH);
 8002360:	2163      	movs	r1, #99	; 0x63
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7fe fe8d 	bl	8001082 <AddCrc16Checksumm>
}
 8002368:	bf00      	nop
 800236a:	3770      	adds	r7, #112	; 0x70
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20001684 	.word	0x20001684
 8002374:	200015b8 	.word	0x200015b8
 8002378:	200018f8 	.word	0x200018f8

0800237c <ShoreDirectResponse>:

void ShoreDirectResponse(uint8_t *responseBuf)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	struct shoreResponseDirect_s res;

	res.number = 0xFF;
 8002384:	23ff      	movs	r3, #255	; 0xff
 8002386:	723b      	strb	r3, [r7, #8]
	res.connection = 0xAA;
 8002388:	23aa      	movs	r3, #170	; 0xaa
 800238a:	727b      	strb	r3, [r7, #9]
	res.current = 0xBB;
 800238c:	23bb      	movs	r3, #187	; 0xbb
 800238e:	817b      	strh	r3, [r7, #10]

    memcpy((void*)responseBuf, (void*)&res, SHORE_DIRECT_RESPONSE_LENGTH);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	461a      	mov	r2, r3
 8002394:	f107 0308 	add.w	r3, r7, #8
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	6010      	str	r0, [r2, #0]
 800239c:	889b      	ldrh	r3, [r3, #4]
 800239e:	8093      	strh	r3, [r2, #4]

    AddCrc16Checksumm(responseBuf, SHORE_DIRECT_RESPONSE_LENGTH);
 80023a0:	2106      	movs	r1, #6
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe fe6d 	bl	8001082 <AddCrc16Checksumm>
}
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <ImuReceive>:
		crc ^= (crc & 0x00ff) << 5; }
	return crc;
}

void ImuReceive(uint8_t *ReceiveBuf)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	 // Если первый байт синхронизации некорректный, игнорируем ответ
	 if (ReceiveBuf[0] != 0xFA)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2bfa      	cmp	r3, #250	; 0xfa
 80023be:	d13c      	bne.n	800243a <ImuReceive+0x8a>
//            ++uartBus[IMU_UART].brokenRxCounter;
//            return;
//        }
//    }

  	  memcpy(&rSensors.yaw, ReceiveBuf + 12, sizeof(rSensors.yaw));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	330c      	adds	r3, #12
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <ImuReceive+0x94>)
 80023ca:	609a      	str	r2, [r3, #8]
  	  memcpy(&rSensors.pitch, ReceiveBuf + 16, sizeof(rSensors.pitch));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3310      	adds	r3, #16
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <ImuReceive+0x94>)
 80023d6:	605a      	str	r2, [r3, #4]
  	  memcpy(&rSensors.roll, ReceiveBuf + 20, sizeof(rSensors.roll));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3314      	adds	r3, #20
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	4b18      	ldr	r3, [pc, #96]	; (8002444 <ImuReceive+0x94>)
 80023e2:	601a      	str	r2, [r3, #0]

  	  memcpy(&rSensors.accelX, ReceiveBuf + 36, sizeof(rSensors.accelX));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3324      	adds	r3, #36	; 0x24
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	4b15      	ldr	r3, [pc, #84]	; (8002444 <ImuReceive+0x94>)
 80023ee:	629a      	str	r2, [r3, #40]	; 0x28
  	  memcpy(&rSensors.accelY, ReceiveBuf + 40, sizeof(rSensors.accelY));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3328      	adds	r3, #40	; 0x28
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <ImuReceive+0x94>)
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c
  	  memcpy(&rSensors.accelZ, ReceiveBuf + 44, sizeof(rSensors.accelZ));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	332c      	adds	r3, #44	; 0x2c
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <ImuReceive+0x94>)
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
  	  memcpy(&rSensors.crc, ReceiveBuf + 48, sizeof(rSensors.crc));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3330      	adds	r3, #48	; 0x30
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	b29a      	uxth	r2, r3
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <ImuReceive+0x94>)
 8002412:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52


//	float diffTime = fromTickToMs(xTaskGetTickCount() - rSensors.LastTick) / 1000.0f;
    rSensors.LastTick = xTaskGetTickCount();
 8002416:	f009 fe3f 	bl	800c098 <xTaskGetTickCount>
 800241a:	ee07 0a90 	vmov	s15, r0
 800241e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <ImuReceive+0x94>)
 8002424:	edc3 7a05 	vstr	s15, [r3, #20]


    ++uartBus[IMU_UART].successRxCounter;
 8002428:	4b07      	ldr	r3, [pc, #28]	; (8002448 <ImuReceive+0x98>)
 800242a:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800242e:	3301      	adds	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	4b05      	ldr	r3, [pc, #20]	; (8002448 <ImuReceive+0x98>)
 8002434:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8002438:	e000      	b.n	800243c <ImuReceive+0x8c>
		 return;
 800243a:	bf00      	nop
}
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20001684 	.word	0x20001684
 8002448:	200000ec 	.word	0x200000ec

0800244c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <MX_DMA_Init+0xa8>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a26      	ldr	r2, [pc, #152]	; (80024f4 <MX_DMA_Init+0xa8>)
 800245c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <MX_DMA_Init+0xa8>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	603b      	str	r3, [r7, #0]
 8002472:	4b20      	ldr	r3, [pc, #128]	; (80024f4 <MX_DMA_Init+0xa8>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	4a1f      	ldr	r2, [pc, #124]	; (80024f4 <MX_DMA_Init+0xa8>)
 8002478:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800247c:	6313      	str	r3, [r2, #48]	; 0x30
 800247e:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <MX_DMA_Init+0xa8>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800248a:	2200      	movs	r2, #0
 800248c:	2105      	movs	r1, #5
 800248e:	200c      	movs	r0, #12
 8002490:	f002 fe58 	bl	8005144 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002494:	200c      	movs	r0, #12
 8002496:	f002 fe71 	bl	800517c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	2105      	movs	r1, #5
 800249e:	200e      	movs	r0, #14
 80024a0:	f002 fe50 	bl	8005144 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80024a4:	200e      	movs	r0, #14
 80024a6:	f002 fe69 	bl	800517c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80024aa:	2200      	movs	r2, #0
 80024ac:	2105      	movs	r1, #5
 80024ae:	2010      	movs	r0, #16
 80024b0:	f002 fe48 	bl	8005144 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80024b4:	2010      	movs	r0, #16
 80024b6:	f002 fe61 	bl	800517c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2105      	movs	r1, #5
 80024be:	2011      	movs	r0, #17
 80024c0:	f002 fe40 	bl	8005144 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80024c4:	2011      	movs	r0, #17
 80024c6:	f002 fe59 	bl	800517c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2105      	movs	r1, #5
 80024ce:	203a      	movs	r0, #58	; 0x3a
 80024d0:	f002 fe38 	bl	8005144 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80024d4:	203a      	movs	r0, #58	; 0x3a
 80024d6:	f002 fe51 	bl	800517c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80024da:	2200      	movs	r2, #0
 80024dc:	2105      	movs	r1, #5
 80024de:	2046      	movs	r0, #70	; 0x46
 80024e0:	f002 fe30 	bl	8005144 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80024e4:	2046      	movs	r0, #70	; 0x46
 80024e6:	f002 fe49 	bl	800517c <HAL_NVIC_EnableIRQ>

}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800

080024f8 <flashWriteSettings>:
		dest_addr++;
	}
}

void flashWriteSettings(struct flashConfiguration_s *config)
{
 80024f8:	b5b0      	push	{r4, r5, r7, lr}
 80024fa:	b08c      	sub	sp, #48	; 0x30
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	// Write settings
	HAL_FLASH_Unlock();
 8002500:	f003 faae 	bl	8005a60 <HAL_FLASH_Unlock>

	// erase page
	FLASH_EraseInitTypeDef erase_conf;
	erase_conf.TypeErase = FLASH_TYPEERASE_SECTORS; // erase 1 page
 8002504:	2300      	movs	r3, #0
 8002506:	613b      	str	r3, [r7, #16]
	erase_conf.Sector = (uint32_t)(CONFIG_PAGE_ADDR);
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <flashWriteSettings+0x78>)
 800250a:	61bb      	str	r3, [r7, #24]
	erase_conf.NbSectors = 1;
 800250c:	2301      	movs	r3, #1
 800250e:	61fb      	str	r3, [r7, #28]

	uint32_t page_error;
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
 8002510:	f107 020c 	add.w	r2, r7, #12
 8002514:	f107 0310 	add.w	r3, r7, #16
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f003 fc02 	bl	8005d24 <HAL_FLASHEx_Erase>

	// write page
	uint32_t *source_addr = (void *)config;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t *dest_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 8002524:	4b12      	ldr	r3, [pc, #72]	; (8002570 <flashWriteSettings+0x78>)
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 8002528:	2300      	movs	r3, #0
 800252a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800252e:	e015      	b.n	800255c <flashWriteSettings+0x64>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)dest_addr, *source_addr);
 8002530:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2200      	movs	r2, #0
 8002538:	461c      	mov	r4, r3
 800253a:	4615      	mov	r5, r2
 800253c:	4622      	mov	r2, r4
 800253e:	462b      	mov	r3, r5
 8002540:	2002      	movs	r0, #2
 8002542:	f003 fa39 	bl	80059b8 <HAL_FLASH_Program>
		source_addr++;
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002548:	3304      	adds	r3, #4
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
		dest_addr++;
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	3304      	adds	r3, #4
 8002550:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 8002552:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002556:	3301      	adds	r3, #1
 8002558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800255c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002560:	2b89      	cmp	r3, #137	; 0x89
 8002562:	d9e5      	bls.n	8002530 <flashWriteSettings+0x38>
	}

	HAL_FLASH_Lock();
 8002564:	f003 fa9e 	bl	8005aa4 <HAL_FLASH_Lock>
}
 8002568:	bf00      	nop
 800256a:	3730      	adds	r7, #48	; 0x30
 800256c:	46bd      	mov	sp, r7
 800256e:	bdb0      	pop	{r4, r5, r7, pc}
 8002570:	0803f800 	.word	0x0803f800

08002574 <flashFillStructure>:

void flashFillStructure(struct flashConfiguration_s *config)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
	config->writeFlag = 0xAA;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	22aa      	movs	r2, #170	; 0xaa
 8002580:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002582:	2300      	movs	r3, #0
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	e154      	b.n	8002832 <flashFillStructure+0x2be>
		config->stabConstants[i].pJoyUnitCast = rStabConstants[i].pJoyUnitCast;
 8002588:	7bf9      	ldrb	r1, [r7, #15]
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	48ae      	ldr	r0, [pc, #696]	; (8002848 <flashFillStructure+0x2d4>)
 800258e:	460b      	mov	r3, r1
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	440b      	add	r3, r1
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4403      	add	r3, r0
 8002598:	3304      	adds	r3, #4
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	3301      	adds	r3, #1
 80025aa:	4602      	mov	r2, r0
 80025ac:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pSpeedDyn = rStabConstants[i].pSpeedDyn;
 80025ae:	7bf9      	ldrb	r1, [r7, #15]
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	48a5      	ldr	r0, [pc, #660]	; (8002848 <flashFillStructure+0x2d4>)
 80025b4:	460b      	mov	r3, r1
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	440b      	add	r3, r1
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4403      	add	r3, r0
 80025be:	3308      	adds	r3, #8
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	3305      	adds	r3, #5
 80025d0:	4602      	mov	r2, r0
 80025d2:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pErrGain = rStabConstants[i].pErrGain;
 80025d4:	7bf9      	ldrb	r1, [r7, #15]
 80025d6:	7bfa      	ldrb	r2, [r7, #15]
 80025d8:	489b      	ldr	r0, [pc, #620]	; (8002848 <flashFillStructure+0x2d4>)
 80025da:	460b      	mov	r3, r1
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	440b      	add	r3, r1
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4403      	add	r3, r0
 80025e4:	330c      	adds	r3, #12
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	3308      	adds	r3, #8
 80025f6:	3301      	adds	r3, #1
 80025f8:	4602      	mov	r2, r0
 80025fa:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T1 = rStabConstants[i].aFilter[POS_FILTER].T;
 80025fc:	7bf9      	ldrb	r1, [r7, #15]
 80025fe:	7bfa      	ldrb	r2, [r7, #15]
 8002600:	4891      	ldr	r0, [pc, #580]	; (8002848 <flashFillStructure+0x2d4>)
 8002602:	460b      	mov	r3, r1
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	440b      	add	r3, r1
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4403      	add	r3, r0
 800260c:	3310      	adds	r3, #16
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	3308      	adds	r3, #8
 800261e:	3305      	adds	r3, #5
 8002620:	4602      	mov	r2, r0
 8002622:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T2 = rStabConstants[i].aFilter[SPEED_FILTER].T;
 8002624:	7bf9      	ldrb	r1, [r7, #15]
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	4887      	ldr	r0, [pc, #540]	; (8002848 <flashFillStructure+0x2d4>)
 800262a:	460b      	mov	r3, r1
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	440b      	add	r3, r1
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4403      	add	r3, r0
 8002634:	3318      	adds	r3, #24
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	4413      	add	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	3310      	adds	r3, #16
 8002646:	3301      	adds	r3, #1
 8002648:	4602      	mov	r2, r0
 800264a:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K1 = rStabConstants[i].aFilter[POS_FILTER].K;
 800264c:	7bf9      	ldrb	r1, [r7, #15]
 800264e:	7bfa      	ldrb	r2, [r7, #15]
 8002650:	487d      	ldr	r0, [pc, #500]	; (8002848 <flashFillStructure+0x2d4>)
 8002652:	460b      	mov	r3, r1
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	440b      	add	r3, r1
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4403      	add	r3, r0
 800265c:	3314      	adds	r3, #20
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	4413      	add	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	3310      	adds	r3, #16
 800266e:	3305      	adds	r3, #5
 8002670:	4602      	mov	r2, r0
 8002672:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K2 = rStabConstants[i].aFilter[SPEED_FILTER].K;
 8002674:	7bf9      	ldrb	r1, [r7, #15]
 8002676:	7bfa      	ldrb	r2, [r7, #15]
 8002678:	4873      	ldr	r0, [pc, #460]	; (8002848 <flashFillStructure+0x2d4>)
 800267a:	460b      	mov	r3, r1
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	440b      	add	r3, r1
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4403      	add	r3, r0
 8002684:	331c      	adds	r3, #28
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	3318      	adds	r3, #24
 8002696:	3301      	adds	r3, #1
 8002698:	4602      	mov	r2, r0
 800269a:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_pGain = rStabConstants[i].pid.pGain;
 800269c:	7bf9      	ldrb	r1, [r7, #15]
 800269e:	7bfa      	ldrb	r2, [r7, #15]
 80026a0:	4869      	ldr	r0, [pc, #420]	; (8002848 <flashFillStructure+0x2d4>)
 80026a2:	460b      	mov	r3, r1
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4403      	add	r3, r0
 80026ac:	3328      	adds	r3, #40	; 0x28
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	3318      	adds	r3, #24
 80026be:	3305      	adds	r3, #5
 80026c0:	4602      	mov	r2, r0
 80026c2:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iGain = rStabConstants[i].pid.iGain;
 80026c4:	7bf9      	ldrb	r1, [r7, #15]
 80026c6:	7bfa      	ldrb	r2, [r7, #15]
 80026c8:	485f      	ldr	r0, [pc, #380]	; (8002848 <flashFillStructure+0x2d4>)
 80026ca:	460b      	mov	r3, r1
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	440b      	add	r3, r1
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4403      	add	r3, r0
 80026d4:	332c      	adds	r3, #44	; 0x2c
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	3320      	adds	r3, #32
 80026e6:	3301      	adds	r3, #1
 80026e8:	4602      	mov	r2, r0
 80026ea:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMax = rStabConstants[i].pid.iMax;
 80026ec:	7bf9      	ldrb	r1, [r7, #15]
 80026ee:	7bfa      	ldrb	r2, [r7, #15]
 80026f0:	4855      	ldr	r0, [pc, #340]	; (8002848 <flashFillStructure+0x2d4>)
 80026f2:	460b      	mov	r3, r1
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	440b      	add	r3, r1
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4403      	add	r3, r0
 80026fc:	3330      	adds	r3, #48	; 0x30
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	3320      	adds	r3, #32
 800270e:	3305      	adds	r3, #5
 8002710:	4602      	mov	r2, r0
 8002712:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMin = rStabConstants[i].pid.iMin;
 8002714:	7bf9      	ldrb	r1, [r7, #15]
 8002716:	7bfa      	ldrb	r2, [r7, #15]
 8002718:	484b      	ldr	r0, [pc, #300]	; (8002848 <flashFillStructure+0x2d4>)
 800271a:	460b      	mov	r3, r1
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	440b      	add	r3, r1
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4403      	add	r3, r0
 8002724:	3334      	adds	r3, #52	; 0x34
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	3328      	adds	r3, #40	; 0x28
 8002736:	3301      	adds	r3, #1
 8002738:	4602      	mov	r2, r0
 800273a:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMin = rStabConstants[i].pThrustersMin;
 800273c:	7bf9      	ldrb	r1, [r7, #15]
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	4841      	ldr	r0, [pc, #260]	; (8002848 <flashFillStructure+0x2d4>)
 8002742:	460b      	mov	r3, r1
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	440b      	add	r3, r1
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4403      	add	r3, r0
 800274c:	3338      	adds	r3, #56	; 0x38
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	3328      	adds	r3, #40	; 0x28
 800275e:	3305      	adds	r3, #5
 8002760:	4602      	mov	r2, r0
 8002762:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMax = rStabConstants[i].pThrustersMax;
 8002764:	7bf9      	ldrb	r1, [r7, #15]
 8002766:	7bfa      	ldrb	r2, [r7, #15]
 8002768:	4837      	ldr	r0, [pc, #220]	; (8002848 <flashFillStructure+0x2d4>)
 800276a:	460b      	mov	r3, r1
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	440b      	add	r3, r1
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4403      	add	r3, r0
 8002774:	333c      	adds	r3, #60	; 0x3c
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	4413      	add	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	3330      	adds	r3, #48	; 0x30
 8002786:	3301      	adds	r3, #1
 8002788:	4602      	mov	r2, r0
 800278a:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_T = rStabConstants[i].aFilter[THRUSTERS_FILTER].T;
 800278c:	7bf9      	ldrb	r1, [r7, #15]
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	482d      	ldr	r0, [pc, #180]	; (8002848 <flashFillStructure+0x2d4>)
 8002792:	460b      	mov	r3, r1
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	440b      	add	r3, r1
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4403      	add	r3, r0
 800279c:	3320      	adds	r3, #32
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	3330      	adds	r3, #48	; 0x30
 80027ae:	3305      	adds	r3, #5
 80027b0:	4602      	mov	r2, r0
 80027b2:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_K = rStabConstants[i].aFilter[THRUSTERS_FILTER].K;
 80027b4:	7bf9      	ldrb	r1, [r7, #15]
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	4823      	ldr	r0, [pc, #140]	; (8002848 <flashFillStructure+0x2d4>)
 80027ba:	460b      	mov	r3, r1
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	440b      	add	r3, r1
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4403      	add	r3, r0
 80027c4:	3324      	adds	r3, #36	; 0x24
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	3338      	adds	r3, #56	; 0x38
 80027d6:	3301      	adds	r3, #1
 80027d8:	4602      	mov	r2, r0
 80027da:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMax = rStabConstants[i].sOutSummatorMax;
 80027dc:	7bf9      	ldrb	r1, [r7, #15]
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	4819      	ldr	r0, [pc, #100]	; (8002848 <flashFillStructure+0x2d4>)
 80027e2:	460b      	mov	r3, r1
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	440b      	add	r3, r1
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	4403      	add	r3, r0
 80027ec:	3340      	adds	r3, #64	; 0x40
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	3338      	adds	r3, #56	; 0x38
 80027fe:	3305      	adds	r3, #5
 8002800:	4602      	mov	r2, r0
 8002802:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMin = rStabConstants[i].sOutSummatorMin;
 8002804:	7bf9      	ldrb	r1, [r7, #15]
 8002806:	7bfa      	ldrb	r2, [r7, #15]
 8002808:	480f      	ldr	r0, [pc, #60]	; (8002848 <flashFillStructure+0x2d4>)
 800280a:	460b      	mov	r3, r1
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	440b      	add	r3, r1
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4403      	add	r3, r0
 8002814:	3344      	adds	r3, #68	; 0x44
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	3340      	adds	r3, #64	; 0x40
 8002826:	3301      	adds	r3, #1
 8002828:	4602      	mov	r2, r0
 800282a:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	3301      	adds	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	2b05      	cmp	r3, #5
 8002836:	f67f aea7 	bls.w	8002588 <flashFillStructure+0x14>
//		config->thrusters[i].kBackward = rThrusters[i].kBackward;
//		config->thrusters[i].sForward = rThrusters[i].sForward;
//		config->thrusters[i].sBackward = rThrusters[i].sBackward;
//		config->thrusters[i].inverse = rThrusters[i].inverse;
//	}
}
 800283a:	bf00      	nop
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	20001748 	.word	0x20001748

0800284c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800284c:	b590      	push	{r4, r7, lr}
 800284e:	b083      	sub	sp, #12
 8002850:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of mutData */
  mutDataHandle = osMutexNew(&mutData_attributes);
 8002852:	4844      	ldr	r0, [pc, #272]	; (8002964 <MX_FREERTOS_Init+0x118>)
 8002854:	f008 f896 	bl	800a984 <osMutexNew>
 8002858:	4603      	mov	r3, r0
 800285a:	4a43      	ldr	r2, [pc, #268]	; (8002968 <MX_FREERTOS_Init+0x11c>)
 800285c:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of tUartTimer */
  tUartTimerHandle = osTimerNew(func_tUartTimer, osTimerOnce, NULL, &tUartTimer_attributes);
 800285e:	4b43      	ldr	r3, [pc, #268]	; (800296c <MX_FREERTOS_Init+0x120>)
 8002860:	2200      	movs	r2, #0
 8002862:	2100      	movs	r1, #0
 8002864:	4842      	ldr	r0, [pc, #264]	; (8002970 <MX_FREERTOS_Init+0x124>)
 8002866:	f008 f811 	bl	800a88c <osTimerNew>
 800286a:	4603      	mov	r3, r0
 800286c:	4a41      	ldr	r2, [pc, #260]	; (8002974 <MX_FREERTOS_Init+0x128>)
 800286e:	6013      	str	r3, [r2, #0]

  /* creation of tSilence */
  tSilenceHandle = osTimerNew(tSilence_func, osTimerOnce, NULL, &tSilence_attributes);
 8002870:	4b41      	ldr	r3, [pc, #260]	; (8002978 <MX_FREERTOS_Init+0x12c>)
 8002872:	2200      	movs	r2, #0
 8002874:	2100      	movs	r1, #0
 8002876:	4841      	ldr	r0, [pc, #260]	; (800297c <MX_FREERTOS_Init+0x130>)
 8002878:	f008 f808 	bl	800a88c <osTimerNew>
 800287c:	4603      	mov	r3, r0
 800287e:	4a40      	ldr	r2, [pc, #256]	; (8002980 <MX_FREERTOS_Init+0x134>)
 8002880:	6013      	str	r3, [r2, #0]

  /* creation of tTechCommTImer */
  tTechCommTImerHandle = osTimerNew(tTechCommTImer_callback, osTimerOnce, NULL, &tTechCommTImer_attributes);
 8002882:	4b40      	ldr	r3, [pc, #256]	; (8002984 <MX_FREERTOS_Init+0x138>)
 8002884:	2200      	movs	r2, #0
 8002886:	2100      	movs	r1, #0
 8002888:	483f      	ldr	r0, [pc, #252]	; (8002988 <MX_FREERTOS_Init+0x13c>)
 800288a:	f007 ffff 	bl	800a88c <osTimerNew>
 800288e:	4603      	mov	r3, r0
 8002890:	4a3e      	ldr	r2, [pc, #248]	; (800298c <MX_FREERTOS_Init+0x140>)
 8002892:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE BEGIN RTOS_TIMERS */
  SilenceTimer = xTimerCreate("silence", DELAY_SILENCE/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) tSilence_func);
 8002894:	4b39      	ldr	r3, [pc, #228]	; (800297c <MX_FREERTOS_Init+0x130>)
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	2300      	movs	r3, #0
 800289a:	2200      	movs	r2, #0
 800289c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028a0:	483b      	ldr	r0, [pc, #236]	; (8002990 <MX_FREERTOS_Init+0x144>)
 80028a2:	f00a f971 	bl	800cb88 <xTimerCreate>
 80028a6:	4603      	mov	r3, r0
 80028a8:	4a3a      	ldr	r2, [pc, #232]	; (8002994 <MX_FREERTOS_Init+0x148>)
 80028aa:	6013      	str	r3, [r2, #0]
  UARTTimer = xTimerCreate("timer", DELAY_TIMER_TASK/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) func_tUartTimer);
 80028ac:	4b30      	ldr	r3, [pc, #192]	; (8002970 <MX_FREERTOS_Init+0x124>)
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	2300      	movs	r3, #0
 80028b2:	2200      	movs	r2, #0
 80028b4:	211e      	movs	r1, #30
 80028b6:	4838      	ldr	r0, [pc, #224]	; (8002998 <MX_FREERTOS_Init+0x14c>)
 80028b8:	f00a f966 	bl	800cb88 <xTimerCreate>
 80028bc:	4603      	mov	r3, r0
 80028be:	4a37      	ldr	r2, [pc, #220]	; (800299c <MX_FREERTOS_Init+0x150>)
 80028c0:	6013      	str	r3, [r2, #0]

  xTimerStart(SilenceTimer, 10);
 80028c2:	4b34      	ldr	r3, [pc, #208]	; (8002994 <MX_FREERTOS_Init+0x148>)
 80028c4:	681c      	ldr	r4, [r3, #0]
 80028c6:	f009 fbe7 	bl	800c098 <xTaskGetTickCount>
 80028ca:	4602      	mov	r2, r0
 80028cc:	230a      	movs	r3, #10
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	2300      	movs	r3, #0
 80028d2:	2101      	movs	r1, #1
 80028d4:	4620      	mov	r0, r4
 80028d6:	f00a f9f1 	bl	800ccbc <xTimerGenericCommand>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80028da:	4a31      	ldr	r2, [pc, #196]	; (80029a0 <MX_FREERTOS_Init+0x154>)
 80028dc:	2100      	movs	r1, #0
 80028de:	4831      	ldr	r0, [pc, #196]	; (80029a4 <MX_FREERTOS_Init+0x158>)
 80028e0:	f007 fee4 	bl	800a6ac <osThreadNew>
 80028e4:	4603      	mov	r3, r0
 80028e6:	4a30      	ldr	r2, [pc, #192]	; (80029a8 <MX_FREERTOS_Init+0x15c>)
 80028e8:	6013      	str	r3, [r2, #0]

  /* creation of tLedBlinkingTask */
  tLedBlinkingTaskHandle = osThreadNew(func_tLedBlinkingTask, NULL, &tLedBlinkingTask_attributes);
 80028ea:	4a30      	ldr	r2, [pc, #192]	; (80029ac <MX_FREERTOS_Init+0x160>)
 80028ec:	2100      	movs	r1, #0
 80028ee:	4830      	ldr	r0, [pc, #192]	; (80029b0 <MX_FREERTOS_Init+0x164>)
 80028f0:	f007 fedc 	bl	800a6ac <osThreadNew>
 80028f4:	4603      	mov	r3, r0
 80028f6:	4a2f      	ldr	r2, [pc, #188]	; (80029b4 <MX_FREERTOS_Init+0x168>)
 80028f8:	6013      	str	r3, [r2, #0]

  /* creation of tVmaCommTask */
  tVmaCommTaskHandle = osThreadNew(func_tVmaCommTask, NULL, &tVmaCommTask_attributes);
 80028fa:	4a2f      	ldr	r2, [pc, #188]	; (80029b8 <MX_FREERTOS_Init+0x16c>)
 80028fc:	2100      	movs	r1, #0
 80028fe:	482f      	ldr	r0, [pc, #188]	; (80029bc <MX_FREERTOS_Init+0x170>)
 8002900:	f007 fed4 	bl	800a6ac <osThreadNew>
 8002904:	4603      	mov	r3, r0
 8002906:	4a2e      	ldr	r2, [pc, #184]	; (80029c0 <MX_FREERTOS_Init+0x174>)
 8002908:	6013      	str	r3, [r2, #0]

  /* creation of tImuCommTask */
  tImuCommTaskHandle = osThreadNew(func_tImuCommTask, NULL, &tImuCommTask_attributes);
 800290a:	4a2e      	ldr	r2, [pc, #184]	; (80029c4 <MX_FREERTOS_Init+0x178>)
 800290c:	2100      	movs	r1, #0
 800290e:	482e      	ldr	r0, [pc, #184]	; (80029c8 <MX_FREERTOS_Init+0x17c>)
 8002910:	f007 fecc 	bl	800a6ac <osThreadNew>
 8002914:	4603      	mov	r3, r0
 8002916:	4a2d      	ldr	r2, [pc, #180]	; (80029cc <MX_FREERTOS_Init+0x180>)
 8002918:	6013      	str	r3, [r2, #0]

  /* creation of tStabilizationTask */
  tStabilizationTaskHandle = osThreadNew(func_tStabilizationTask, NULL, &tStabilizationTask_attributes);
 800291a:	4a2d      	ldr	r2, [pc, #180]	; (80029d0 <MX_FREERTOS_Init+0x184>)
 800291c:	2100      	movs	r1, #0
 800291e:	482d      	ldr	r0, [pc, #180]	; (80029d4 <MX_FREERTOS_Init+0x188>)
 8002920:	f007 fec4 	bl	800a6ac <osThreadNew>
 8002924:	4603      	mov	r3, r0
 8002926:	4a2c      	ldr	r2, [pc, #176]	; (80029d8 <MX_FREERTOS_Init+0x18c>)
 8002928:	6013      	str	r3, [r2, #0]

  /* creation of tDevCommTask */
  tDevCommTaskHandle = osThreadNew(func_tDevCommTask, NULL, &tDevCommTask_attributes);
 800292a:	4a2c      	ldr	r2, [pc, #176]	; (80029dc <MX_FREERTOS_Init+0x190>)
 800292c:	2100      	movs	r1, #0
 800292e:	482c      	ldr	r0, [pc, #176]	; (80029e0 <MX_FREERTOS_Init+0x194>)
 8002930:	f007 febc 	bl	800a6ac <osThreadNew>
 8002934:	4603      	mov	r3, r0
 8002936:	4a2b      	ldr	r2, [pc, #172]	; (80029e4 <MX_FREERTOS_Init+0x198>)
 8002938:	6013      	str	r3, [r2, #0]

  /* creation of tSensCommTask */
  tSensCommTaskHandle = osThreadNew(func_tSensCommTask, NULL, &tSensCommTask_attributes);
 800293a:	4a2b      	ldr	r2, [pc, #172]	; (80029e8 <MX_FREERTOS_Init+0x19c>)
 800293c:	2100      	movs	r1, #0
 800293e:	482b      	ldr	r0, [pc, #172]	; (80029ec <MX_FREERTOS_Init+0x1a0>)
 8002940:	f007 feb4 	bl	800a6ac <osThreadNew>
 8002944:	4603      	mov	r3, r0
 8002946:	4a2a      	ldr	r2, [pc, #168]	; (80029f0 <MX_FREERTOS_Init+0x1a4>)
 8002948:	6013      	str	r3, [r2, #0]

  /* creation of tPcCommTask */
  tPcCommTaskHandle = osThreadNew(func_tPcCommTask, NULL, &tPcCommTask_attributes);
 800294a:	4a2a      	ldr	r2, [pc, #168]	; (80029f4 <MX_FREERTOS_Init+0x1a8>)
 800294c:	2100      	movs	r1, #0
 800294e:	482a      	ldr	r0, [pc, #168]	; (80029f8 <MX_FREERTOS_Init+0x1ac>)
 8002950:	f007 feac 	bl	800a6ac <osThreadNew>
 8002954:	4603      	mov	r3, r0
 8002956:	4a29      	ldr	r2, [pc, #164]	; (80029fc <MX_FREERTOS_Init+0x1b0>)
 8002958:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800295a:	bf00      	nop
 800295c:	3704      	adds	r7, #4
 800295e:	46bd      	mov	sp, r7
 8002960:	bd90      	pop	{r4, r7, pc}
 8002962:	bf00      	nop
 8002964:	0800e3e4 	.word	0x0800e3e4
 8002968:	20001564 	.word	0x20001564
 800296c:	0800e3b4 	.word	0x0800e3b4
 8002970:	08002da9 	.word	0x08002da9
 8002974:	20001558 	.word	0x20001558
 8002978:	0800e3c4 	.word	0x0800e3c4
 800297c:	08002eb5 	.word	0x08002eb5
 8002980:	2000155c 	.word	0x2000155c
 8002984:	0800e3d4 	.word	0x0800e3d4
 8002988:	08002f89 	.word	0x08002f89
 800298c:	20001560 	.word	0x20001560
 8002990:	0800e260 	.word	0x0800e260
 8002994:	200001a0 	.word	0x200001a0
 8002998:	0800e268 	.word	0x0800e268
 800299c:	2000019c 	.word	0x2000019c
 80029a0:	0800e294 	.word	0x0800e294
 80029a4:	08002a01 	.word	0x08002a01
 80029a8:	200001a4 	.word	0x200001a4
 80029ac:	0800e2b8 	.word	0x0800e2b8
 80029b0:	08002a11 	.word	0x08002a11
 80029b4:	200001a8 	.word	0x200001a8
 80029b8:	0800e2dc 	.word	0x0800e2dc
 80029bc:	08002a55 	.word	0x08002a55
 80029c0:	20000478 	.word	0x20000478
 80029c4:	0800e300 	.word	0x0800e300
 80029c8:	08002b21 	.word	0x08002b21
 80029cc:	20000748 	.word	0x20000748
 80029d0:	0800e324 	.word	0x0800e324
 80029d4:	08002c01 	.word	0x08002c01
 80029d8:	20000a18 	.word	0x20000a18
 80029dc:	0800e348 	.word	0x0800e348
 80029e0:	08002c69 	.word	0x08002c69
 80029e4:	20000ce8 	.word	0x20000ce8
 80029e8:	0800e36c 	.word	0x0800e36c
 80029ec:	08002d45 	.word	0x08002d45
 80029f0:	20000fb8 	.word	0x20000fb8
 80029f4:	0800e390 	.word	0x0800e390
 80029f8:	08002d99 	.word	0x08002d99
 80029fc:	20001288 	.word	0x20001288

08002a00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002a08:	2001      	movs	r0, #1
 8002a0a:	f007 fee1 	bl	800a7d0 <osDelay>
 8002a0e:	e7fb      	b.n	8002a08 <StartDefaultTask+0x8>

08002a10 <func_tLedBlinkingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tLedBlinkingTask */
void func_tLedBlinkingTask(void *argument)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tLedBlinkingTask */
  /* Infinite loop */
  for(;;)
  {
        HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 8002a18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a1c:	480c      	ldr	r0, [pc, #48]	; (8002a50 <func_tLedBlinkingTask+0x40>)
 8002a1e:	f003 fc58 	bl	80062d2 <HAL_GPIO_TogglePin>
        osDelayUntil(DELAY_LED_TASK);
 8002a22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a26:	f007 feee 	bl	800a806 <osDelayUntil>
        HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 8002a2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a2e:	4808      	ldr	r0, [pc, #32]	; (8002a50 <func_tLedBlinkingTask+0x40>)
 8002a30:	f003 fc4f 	bl	80062d2 <HAL_GPIO_TogglePin>
        osDelayUntil(DELAY_LED_TASK);
 8002a34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a38:	f007 fee5 	bl	800a806 <osDelayUntil>
        HAL_GPIO_TogglePin(led1_GPIO_Port, led3_Pin);
 8002a3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a40:	4803      	ldr	r0, [pc, #12]	; (8002a50 <func_tLedBlinkingTask+0x40>)
 8002a42:	f003 fc46 	bl	80062d2 <HAL_GPIO_TogglePin>
        osDelayUntil(DELAY_LED_TASK);
 8002a46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a4a:	f007 fedc 	bl	800a806 <osDelayUntil>
        HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 8002a4e:	e7e3      	b.n	8002a18 <func_tLedBlinkingTask+0x8>
 8002a50:	40020400 	.word	0x40020400

08002a54 <func_tVmaCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tVmaCommTask */
void func_tVmaCommTask(void *argument)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tVmaCommTask */
	uint8_t transaction = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8002a60:	4b2a      	ldr	r3, [pc, #168]	; (8002b0c <func_tVmaCommTask+0xb8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2114      	movs	r1, #20
 8002a66:	4618      	mov	r0, r3
 8002a68:	f008 fcfe 	bl	800b468 <xQueueSemaphoreTake>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d10b      	bne.n	8002a8a <func_tVmaCommTask+0x36>
			fillThrustersRequest(ThrustersRequestBuffer, transaction);
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	4619      	mov	r1, r3
 8002a76:	4826      	ldr	r0, [pc, #152]	; (8002b10 <func_tVmaCommTask+0xbc>)
 8002a78:	f001 f948 	bl	8003d0c <fillThrustersRequest>
			xSemaphoreGive(mutDataHandle);
 8002a7c:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <func_tVmaCommTask+0xb8>)
 8002a7e:	6818      	ldr	r0, [r3, #0]
 8002a80:	2300      	movs	r3, #0
 8002a82:	2200      	movs	r2, #0
 8002a84:	2100      	movs	r1, #0
 8002a86:	f008 fa75 	bl	800af74 <xQueueGenericSend>
		}

		uartBus[THRUSTERS_UART].txBuffer = ThrustersRequestBuffer;
 8002a8a:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <func_tVmaCommTask+0xc0>)
 8002a8c:	4a20      	ldr	r2, [pc, #128]	; (8002b10 <func_tVmaCommTask+0xbc>)
 8002a8e:	63da      	str	r2, [r3, #60]	; 0x3c
		uartBus[THRUSTERS_UART].txLength = THRUSTERS_REQUEST_LENGTH;
 8002a90:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <func_tVmaCommTask+0xc0>)
 8002a92:	2205      	movs	r2, #5
 8002a94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

		uartBus[THRUSTERS_UART].rxBuffer = ThrustersResponseBuffer[transaction];
 8002a98:	7bfa      	ldrb	r2, [r7, #15]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	4a1d      	ldr	r2, [pc, #116]	; (8002b18 <func_tVmaCommTask+0xc4>)
 8002aa2:	4413      	add	r3, r2
 8002aa4:	4a1b      	ldr	r2, [pc, #108]	; (8002b14 <func_tVmaCommTask+0xc0>)
 8002aa6:	6393      	str	r3, [r2, #56]	; 0x38
		uartBus[THRUSTERS_UART].rxLength = THRUSTERS_RESPONSE_LENGTH;
 8002aa8:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <func_tVmaCommTask+0xc0>)
 8002aaa:	2209      	movs	r2, #9
 8002aac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		transmitAndReceive(&uartBus[THRUSTERS_UART], false);
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	481a      	ldr	r0, [pc, #104]	; (8002b1c <func_tVmaCommTask+0xc8>)
 8002ab4:	f7fe fc7a 	bl	80013ac <transmitAndReceive>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8002ab8:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <func_tVmaCommTask+0xb8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2114      	movs	r1, #20
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f008 fcd2 	bl	800b468 <xQueueSemaphoreTake>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d111      	bne.n	8002aee <func_tVmaCommTask+0x9a>
			fillThrustersResponse(ThrustersResponseBuffer[transaction], transaction);
 8002aca:	7bfa      	ldrb	r2, [r7, #15]
 8002acc:	4613      	mov	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	4a11      	ldr	r2, [pc, #68]	; (8002b18 <func_tVmaCommTask+0xc4>)
 8002ad4:	4413      	add	r3, r2
 8002ad6:	7bfa      	ldrb	r2, [r7, #15]
 8002ad8:	4611      	mov	r1, r2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f001 f990 	bl	8003e00 <fillThrustersResponse>
			xSemaphoreGive(mutDataHandle);
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <func_tVmaCommTask+0xb8>)
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2100      	movs	r1, #0
 8002aea:	f008 fa43 	bl	800af74 <xQueueGenericSend>
		}

		transaction = (transaction + 1) % THRUSTERS_NUMBER;
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	3301      	adds	r3, #1
 8002af2:	425a      	negs	r2, r3
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	f002 0207 	and.w	r2, r2, #7
 8002afc:	bf58      	it	pl
 8002afe:	4253      	negpl	r3, r2
 8002b00:	73fb      	strb	r3, [r7, #15]
		osDelayUntil(DELAY_THRUSTERS_TASK);
 8002b02:	2014      	movs	r0, #20
 8002b04:	f007 fe7f 	bl	800a806 <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8002b08:	e7aa      	b.n	8002a60 <func_tVmaCommTask+0xc>
 8002b0a:	bf00      	nop
 8002b0c:	20001564 	.word	0x20001564
 8002b10:	20001b28 	.word	0x20001b28
 8002b14:	200000ec 	.word	0x200000ec
 8002b18:	20001b30 	.word	0x20001b30
 8002b1c:	20000124 	.word	0x20000124

08002b20 <func_tImuCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tImuCommTask */
void func_tImuCommTask(void *argument)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tImuCommTask */
  /* Infinite loop */
  for(;;)
  {
	  	if(rSensors.resetIMU) {
 8002b28:	4b2e      	ldr	r3, [pc, #184]	; (8002be4 <func_tImuCommTask+0xc4>)
 8002b2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d014      	beq.n	8002b5c <func_tImuCommTask+0x3c>
			uartBus[IMU_UART].txBuffer = ImuResetRequestBuffer;
 8002b32:	4b2d      	ldr	r3, [pc, #180]	; (8002be8 <func_tImuCommTask+0xc8>)
 8002b34:	4a2d      	ldr	r2, [pc, #180]	; (8002bec <func_tImuCommTask+0xcc>)
 8002b36:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH;
 8002b3a:	4b2b      	ldr	r3, [pc, #172]	; (8002be8 <func_tImuCommTask+0xc8>)
 8002b3c:	2214      	movs	r2, #20
 8002b3e:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 8002b42:	2100      	movs	r1, #0
 8002b44:	482a      	ldr	r0, [pc, #168]	; (8002bf0 <func_tImuCommTask+0xd0>)
 8002b46:	f7fe fbc7 	bl	80012d8 <transmitPackage>

	  		rSensors.pressure_null = rSensors.pressure;
 8002b4a:	4b26      	ldr	r3, [pc, #152]	; (8002be4 <func_tImuCommTask+0xc4>)
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4e:	4a25      	ldr	r2, [pc, #148]	; (8002be4 <func_tImuCommTask+0xc4>)
 8002b50:	6593      	str	r3, [r2, #88]	; 0x58
	  		rSensors.resetIMU = false;
 8002b52:	4b24      	ldr	r3, [pc, #144]	; (8002be4 <func_tImuCommTask+0xc4>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002b5a:	e03f      	b.n	8002bdc <func_tImuCommTask+0xbc>
	  	}
	  	else {
	  		uartBus[IMU_UART].txBuffer = ImuRequestBuffer;
 8002b5c:	4b22      	ldr	r3, [pc, #136]	; (8002be8 <func_tImuCommTask+0xc8>)
 8002b5e:	4a25      	ldr	r2, [pc, #148]	; (8002bf4 <func_tImuCommTask+0xd4>)
 8002b60:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	  		uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH;
 8002b64:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <func_tImuCommTask+0xc8>)
 8002b66:	2214      	movs	r2, #20
 8002b68:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

	  		uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
 8002b6c:	4b1e      	ldr	r3, [pc, #120]	; (8002be8 <func_tImuCommTask+0xc8>)
 8002b6e:	4a22      	ldr	r2, [pc, #136]	; (8002bf8 <func_tImuCommTask+0xd8>)
 8002b70:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  		uartBus[IMU_UART].rxLength = IMU_RESPONSE_LENGTH;//*IMU_CHECKSUMS;
 8002b74:	4b1c      	ldr	r3, [pc, #112]	; (8002be8 <func_tImuCommTask+0xc8>)
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

	  		HAL_UART_Receive_IT(uartBus[IMU_UART].huart, uartBus[IMU_UART].rxBuffer, uartBus[IMU_UART].rxLength);
 8002b7c:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <func_tImuCommTask+0xc8>)
 8002b7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b82:	4a19      	ldr	r2, [pc, #100]	; (8002be8 <func_tImuCommTask+0xc8>)
 8002b84:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 8002b88:	4a17      	ldr	r2, [pc, #92]	; (8002be8 <func_tImuCommTask+0xc8>)
 8002b8a:	f892 20cc 	ldrb.w	r2, [r2, #204]	; 0xcc
 8002b8e:	b292      	uxth	r2, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f006 f999 	bl	8008ec8 <HAL_UART_Receive_IT>
	  		HAL_UART_Transmit_IT(uartBus[IMU_UART].huart, uartBus[IMU_UART].txBuffer, uartBus[IMU_UART].txLength);
 8002b96:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <func_tImuCommTask+0xc8>)
 8002b98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b9c:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <func_tImuCommTask+0xc8>)
 8002b9e:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
 8002ba2:	4a11      	ldr	r2, [pc, #68]	; (8002be8 <func_tImuCommTask+0xc8>)
 8002ba4:	f892 20cd 	ldrb.w	r2, [r2, #205]	; 0xcd
 8002ba8:	b292      	uxth	r2, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f006 f947 	bl	8008e3e <HAL_UART_Transmit_IT>
	  		osDelayUntil(DELAY_IMU_TASK);
 8002bb0:	200a      	movs	r0, #10
 8002bb2:	f007 fe28 	bl	800a806 <osDelayUntil>

	  		//if(transmitAndReceive(&uartBus[IMU_UART], false)) {
	  			if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_IMU_TASK) == pdTRUE) {
 8002bb6:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <func_tImuCommTask+0xdc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	210a      	movs	r1, #10
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f008 fc53 	bl	800b468 <xQueueSemaphoreTake>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d109      	bne.n	8002bdc <func_tImuCommTask+0xbc>
	  				ImuReceive(ImuResponseBuffer);
 8002bc8:	480b      	ldr	r0, [pc, #44]	; (8002bf8 <func_tImuCommTask+0xd8>)
 8002bca:	f7ff fbf1 	bl	80023b0 <ImuReceive>
	  				xSemaphoreGive(mutDataHandle);
 8002bce:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <func_tImuCommTask+0xdc>)
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	f008 f9cc 	bl	800af74 <xQueueGenericSend>
	  			}
	  		//}

	  	}

	  	osDelayUntil(DELAY_IMU_TASK);
 8002bdc:	200a      	movs	r0, #10
 8002bde:	f007 fe12 	bl	800a806 <osDelayUntil>
	  	if(rSensors.resetIMU) {
 8002be2:	e7a1      	b.n	8002b28 <func_tImuCommTask+0x8>
 8002be4:	20001684 	.word	0x20001684
 8002be8:	200000ec 	.word	0x200000ec
 8002bec:	20000014 	.word	0x20000014
 8002bf0:	20000194 	.word	0x20000194
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	20001b08 	.word	0x20001b08
 8002bfc:	20001564 	.word	0x20001564

08002c00 <func_tStabilizationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tStabilizationTask */
void func_tStabilizationTask(void *argument)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tStabilizationTask */
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 8002c08:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <func_tStabilizationTask+0x60>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	210a      	movs	r1, #10
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f008 fc2a 	bl	800b468 <xQueueSemaphoreTake>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d11d      	bne.n	8002c56 <func_tStabilizationTask+0x56>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	73fb      	strb	r3, [r7, #15]
 8002c1e:	e010      	b.n	8002c42 <func_tStabilizationTask+0x42>
				if (rStabConstants[i].enable) {
 8002c20:	7bfa      	ldrb	r2, [r7, #15]
 8002c22:	4910      	ldr	r1, [pc, #64]	; (8002c64 <func_tStabilizationTask+0x64>)
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <func_tStabilizationTask+0x3c>
					stabilizationUpdate(i);
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 fc36 	bl	80034a8 <stabilizationUpdate>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	73fb      	strb	r3, [r7, #15]
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	2b05      	cmp	r3, #5
 8002c46:	d9eb      	bls.n	8002c20 <func_tStabilizationTask+0x20>
				}
			}
			//formThrustVectors();
			xSemaphoreGive(mutDataHandle);
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <func_tStabilizationTask+0x60>)
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2100      	movs	r1, #0
 8002c52:	f008 f98f 	bl	800af74 <xQueueGenericSend>
		}

		osDelayUntil(DELAY_STABILIZATION_TASK);
 8002c56:	200a      	movs	r0, #10
 8002c58:	f007 fdd5 	bl	800a806 <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 8002c5c:	e7d4      	b.n	8002c08 <func_tStabilizationTask+0x8>
 8002c5e:	bf00      	nop
 8002c60:	20001564 	.word	0x20001564
 8002c64:	20001748 	.word	0x20001748

08002c68 <func_tDevCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tDevCommTask */
void func_tDevCommTask(void *argument)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tDevCommTask */
    uint8_t transaction = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8002c74:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <func_tDevCommTask+0xc4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	210a      	movs	r1, #10
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f008 fbf4 	bl	800b468 <xQueueSemaphoreTake>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d10b      	bne.n	8002c9e <func_tDevCommTask+0x36>
            DevicesRequestUpdate(DevicesRequestBuffer, transaction);
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4829      	ldr	r0, [pc, #164]	; (8002d30 <func_tDevCommTask+0xc8>)
 8002c8c:	f7fe fdc0 	bl	8001810 <DevicesRequestUpdate>
            xSemaphoreGive(mutDataHandle);
 8002c90:	4b26      	ldr	r3, [pc, #152]	; (8002d2c <func_tDevCommTask+0xc4>)
 8002c92:	6818      	ldr	r0, [r3, #0]
 8002c94:	2300      	movs	r3, #0
 8002c96:	2200      	movs	r2, #0
 8002c98:	2100      	movs	r1, #0
 8002c9a:	f008 f96b 	bl	800af74 <xQueueGenericSend>
        }

		uartBus[DEVICES_UART].txBuffer = DevicesRequestBuffer;
 8002c9e:	4b25      	ldr	r3, [pc, #148]	; (8002d34 <func_tDevCommTask+0xcc>)
 8002ca0:	4a23      	ldr	r2, [pc, #140]	; (8002d30 <func_tDevCommTask+0xc8>)
 8002ca2:	675a      	str	r2, [r3, #116]	; 0x74
		uartBus[DEVICES_UART].txLength = DEVICES_REQUEST_LENGTH;
 8002ca4:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <func_tDevCommTask+0xcc>)
 8002ca6:	2207      	movs	r2, #7
 8002ca8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

		uartBus[DEVICES_UART].rxBuffer = DevicesResponseBuffer[transaction];
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4a20      	ldr	r2, [pc, #128]	; (8002d38 <func_tDevCommTask+0xd0>)
 8002cb8:	4413      	add	r3, r2
 8002cba:	4a1e      	ldr	r2, [pc, #120]	; (8002d34 <func_tDevCommTask+0xcc>)
 8002cbc:	6713      	str	r3, [r2, #112]	; 0x70
		uartBus[DEVICES_UART].rxLength = DEVICES_RESPONSE_LENGTH;
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <func_tDevCommTask+0xcc>)
 8002cc0:	220a      	movs	r2, #10
 8002cc2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

		transmitAndReceive(&uartBus[DEVICES_UART], false);
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	481c      	ldr	r0, [pc, #112]	; (8002d3c <func_tDevCommTask+0xd4>)
 8002cca:	f7fe fb6f 	bl	80013ac <transmitAndReceive>

        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8002cce:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <func_tDevCommTask+0xc4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	210a      	movs	r1, #10
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f008 fbc7 	bl	800b468 <xQueueSemaphoreTake>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d112      	bne.n	8002d06 <func_tDevCommTask+0x9e>
            DevicesResponseUpdate(DevicesResponseBuffer[transaction], transaction);
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	4a13      	ldr	r2, [pc, #76]	; (8002d38 <func_tDevCommTask+0xd0>)
 8002cec:	4413      	add	r3, r2
 8002cee:	7bfa      	ldrb	r2, [r7, #15]
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe fdd6 	bl	80018a4 <DevicesResponseUpdate>
            xSemaphoreGive(mutDataHandle);
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <func_tDevCommTask+0xc4>)
 8002cfa:	6818      	ldr	r0, [r3, #0]
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2100      	movs	r1, #0
 8002d02:	f008 f937 	bl	800af74 <xQueueGenericSend>
        }

        transaction = (transaction + 1) % DEVICES_NUMBER;
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <func_tDevCommTask+0xd8>)
 8002d0c:	fb83 3102 	smull	r3, r1, r3, r2
 8002d10:	17d3      	asrs	r3, r2, #31
 8002d12:	1ac9      	subs	r1, r1, r3
 8002d14:	460b      	mov	r3, r1
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	440b      	add	r3, r1
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	1ad1      	subs	r1, r2, r3
 8002d1e:	460b      	mov	r3, r1
 8002d20:	73fb      	strb	r3, [r7, #15]
        osDelayUntil(DELAY_DEVICES_TASK);
 8002d22:	200a      	movs	r0, #10
 8002d24:	f007 fd6f 	bl	800a806 <osDelayUntil>
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8002d28:	e7a4      	b.n	8002c74 <func_tDevCommTask+0xc>
 8002d2a:	bf00      	nop
 8002d2c:	20001564 	.word	0x20001564
 8002d30:	20001b78 	.word	0x20001b78
 8002d34:	200000ec 	.word	0x200000ec
 8002d38:	20001b80 	.word	0x20001b80
 8002d3c:	2000015c 	.word	0x2000015c
 8002d40:	2aaaaaab 	.word	0x2aaaaaab

08002d44 <func_tSensCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tSensCommTask */
void func_tSensCommTask(void *argument)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tSensCommTask */
  /* Infinite loop */
  for(;;)
  {
	  receiveI2cPackageDMA(DEV_I2C, SENSORS_PRESSURE_ADDR, PressureResponseBuffer, PRESSURE_SENSOR_SIZE);
 8002d4c:	230a      	movs	r3, #10
 8002d4e:	4a10      	ldr	r2, [pc, #64]	; (8002d90 <func_tSensCommTask+0x4c>)
 8002d50:	210f      	movs	r1, #15
 8002d52:	2000      	movs	r0, #0
 8002d54:	f7fe fc32 	bl	80015bc <receiveI2cPackageDMA>
	  osDelayUntil(DELAY_SENSOR_TASK);
 8002d58:	200a      	movs	r0, #10
 8002d5a:	f007 fd54 	bl	800a806 <osDelayUntil>
	  if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_SENSOR_TASK) == pdTRUE) {
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <func_tSensCommTask+0x50>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	210a      	movs	r1, #10
 8002d64:	4618      	mov	r0, r3
 8002d66:	f008 fb7f 	bl	800b468 <xQueueSemaphoreTake>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d10a      	bne.n	8002d86 <func_tSensCommTask+0x42>
	  	  SensorsResponseUpdate(PressureResponseBuffer, DEV_I2C);
 8002d70:	2100      	movs	r1, #0
 8002d72:	4807      	ldr	r0, [pc, #28]	; (8002d90 <func_tSensCommTask+0x4c>)
 8002d74:	f7fe fc9e 	bl	80016b4 <SensorsResponseUpdate>
	  	  xSemaphoreGive(mutDataHandle);
 8002d78:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <func_tSensCommTask+0x50>)
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2100      	movs	r1, #0
 8002d82:	f008 f8f7 	bl	800af74 <xQueueGenericSend>
	  }
	  osDelayUntil(DELAY_SENSOR_TASK);
 8002d86:	200a      	movs	r0, #10
 8002d88:	f007 fd3d 	bl	800a806 <osDelayUntil>
	  receiveI2cPackageDMA(DEV_I2C, SENSORS_PRESSURE_ADDR, PressureResponseBuffer, PRESSURE_SENSOR_SIZE);
 8002d8c:	e7de      	b.n	8002d4c <func_tSensCommTask+0x8>
 8002d8e:	bf00      	nop
 8002d90:	20001bbc 	.word	0x20001bbc
 8002d94:	20001564 	.word	0x20001564

08002d98 <func_tPcCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tPcCommTask */
void func_tPcCommTask(void *argument)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tPcCommTask */
  /* Infinite loop */
  for(;;)
  {
	  osDelayUntil(DELAY_PC_TASK);
 8002da0:	200a      	movs	r0, #10
 8002da2:	f007 fd30 	bl	800a806 <osDelayUntil>
 8002da6:	e7fb      	b.n	8002da0 <func_tPcCommTask+0x8>

08002da8 <func_tUartTimer>:
  /* USER CODE END func_tPcCommTask */
}

/* func_tUartTimer function */
void func_tUartTimer(void *argument)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tUartTimer */
	if (uartBus[SHORE_UART].packageReceived) {
 8002db0:	4b3d      	ldr	r3, [pc, #244]	; (8002ea8 <func_tUartTimer+0x100>)
 8002db2:	7a1b      	ldrb	r3, [r3, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d05a      	beq.n	8002e6e <func_tUartTimer+0xc6>
		bool package = true;
 8002db8:	2301      	movs	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 8002dbc:	4b3b      	ldr	r3, [pc, #236]	; (8002eac <func_tUartTimer+0x104>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2105      	movs	r1, #5
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f008 fb50 	bl	800b468 <xQueueSemaphoreTake>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d140      	bne.n	8002e50 <func_tUartTimer+0xa8>
		//	xSemaphoreTake( xSemaphore, xBlockTime )		xQueueSemaphoreTake( ( xSemaphore ), ( xBlockTime ) )
			switch(uartBus[SHORE_UART].rxBuffer[0]) {
 8002dce:	4b36      	ldr	r3, [pc, #216]	; (8002ea8 <func_tUartTimer+0x100>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2baa      	cmp	r3, #170	; 0xaa
 8002dd6:	d023      	beq.n	8002e20 <func_tUartTimer+0x78>
 8002dd8:	2baa      	cmp	r3, #170	; 0xaa
 8002dda:	dc30      	bgt.n	8002e3e <func_tUartTimer+0x96>
 8002ddc:	2b55      	cmp	r3, #85	; 0x55
 8002dde:	d010      	beq.n	8002e02 <func_tUartTimer+0x5a>
 8002de0:	2ba5      	cmp	r3, #165	; 0xa5
 8002de2:	d12c      	bne.n	8002e3e <func_tUartTimer+0x96>
				case SHORE_REQUEST_CODE:
					ShoreRequest(uartBus[SHORE_UART].rxBuffer);
 8002de4:	4b30      	ldr	r3, [pc, #192]	; (8002ea8 <func_tUartTimer+0x100>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fe fdc3 	bl	8001974 <ShoreRequest>
					ShoreResponse(uartBus[SHORE_UART].txBuffer);
 8002dee:	4b2e      	ldr	r3, [pc, #184]	; (8002ea8 <func_tUartTimer+0x100>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff f98c 	bl	8002110 <ShoreResponse>
					uartBus[SHORE_UART].txLength = SHORE_RESPONSE_LENGTH;
 8002df8:	4b2b      	ldr	r3, [pc, #172]	; (8002ea8 <func_tUartTimer+0x100>)
 8002dfa:	2246      	movs	r2, #70	; 0x46
 8002dfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8002e00:	e01f      	b.n	8002e42 <func_tUartTimer+0x9a>
				case REQUEST_CONFIG_CODE:
					ShoreConfigRequest(uartBus[SHORE_UART].rxBuffer);
 8002e02:	4b29      	ldr	r3, [pc, #164]	; (8002ea8 <func_tUartTimer+0x100>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe ff56 	bl	8001cb8 <ShoreConfigRequest>
					ShoreConfigResponse(uartBus[SHORE_UART].txBuffer);
 8002e0c:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <func_tUartTimer+0x100>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff f9bd 	bl	8002190 <ShoreConfigResponse>
					uartBus[SHORE_UART].txLength = SHORE_CONFIG_RESPONSE_LENGTH;
 8002e16:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <func_tUartTimer+0x100>)
 8002e18:	2263      	movs	r2, #99	; 0x63
 8002e1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8002e1e:	e010      	b.n	8002e42 <func_tUartTimer+0x9a>
				case DIRECT_REQUEST_CODE:
					ShoreDirectRequest(uartBus[SHORE_UART].rxBuffer);
 8002e20:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <func_tUartTimer+0x100>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff f8bd 	bl	8001fa4 <ShoreDirectRequest>
					ShoreDirectResponse(uartBus[SHORE_UART].txBuffer);
 8002e2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ea8 <func_tUartTimer+0x100>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff faa4 	bl	800237c <ShoreDirectResponse>
					uartBus[SHORE_UART].txLength = SHORE_DIRECT_RESPONSE_LENGTH;
 8002e34:	4b1c      	ldr	r3, [pc, #112]	; (8002ea8 <func_tUartTimer+0x100>)
 8002e36:	2206      	movs	r2, #6
 8002e38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8002e3c:	e001      	b.n	8002e42 <func_tUartTimer+0x9a>
				default:
					package = false;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	73fb      	strb	r3, [r7, #15]
			}
			xSemaphoreGive(mutDataHandle);
 8002e42:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <func_tUartTimer+0x104>)
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	2300      	movs	r3, #0
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	f008 f892 	bl	800af74 <xQueueGenericSend>
		}
		if(package) {
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d010      	beq.n	8002e78 <func_tUartTimer+0xd0>
			HAL_UART_Transmit_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].txBuffer, uartBus[SHORE_UART].txLength);
 8002e56:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <func_tUartTimer+0x100>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4a13      	ldr	r2, [pc, #76]	; (8002ea8 <func_tUartTimer+0x100>)
 8002e5c:	6851      	ldr	r1, [r2, #4]
 8002e5e:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <func_tUartTimer+0x100>)
 8002e60:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8002e64:	b292      	uxth	r2, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f005 ffe9 	bl	8008e3e <HAL_UART_Transmit_IT>
 8002e6c:	e004      	b.n	8002e78 <func_tUartTimer+0xd0>
		}
	}
	else {
		++uartBus[SHORE_UART].outdatedRxCounter;
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <func_tUartTimer+0x100>)
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	3301      	adds	r3, #1
 8002e74:	4a0c      	ldr	r2, [pc, #48]	; (8002ea8 <func_tUartTimer+0x100>)
 8002e76:	6113      	str	r3, [r2, #16]
	}
	counterRx = 0;
 8002e78:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <func_tUartTimer+0x108>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	801a      	strh	r2, [r3, #0]
	uartBus[SHORE_UART].packageReceived = false;
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <func_tUartTimer+0x100>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	721a      	strb	r2, [r3, #8]
	HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <func_tUartTimer+0x100>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f006 f96f 	bl	800916c <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8002e8e:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <func_tUartTimer+0x100>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	4a05      	ldr	r2, [pc, #20]	; (8002ea8 <func_tUartTimer+0x100>)
 8002e94:	6811      	ldr	r1, [r2, #0]
 8002e96:	2201      	movs	r2, #1
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f006 f815 	bl	8008ec8 <HAL_UART_Receive_IT>
  /* USER CODE END func_tUartTimer */
}
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	200000ec 	.word	0x200000ec
 8002eac:	20001564 	.word	0x20001564
 8002eb0:	20000194 	.word	0x20000194

08002eb4 <tSilence_func>:

/* tSilence_func function */
void tSilence_func(void *argument)
{
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tSilence_func */
	if(fromTickToMs(xTaskGetTickCount()) - uartBus[SHORE_UART].lastMessage > UART_SWITCH_DELAY && counterRx == 0) {
 8002ebc:	f009 f8ec 	bl	800c098 <xTaskGetTickCount>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fd ffd4 	bl	8000e70 <fromTickToMs>
 8002ec8:	eeb0 7a40 	vmov.f32	s14, s0
 8002ecc:	4b28      	ldr	r3, [pc, #160]	; (8002f70 <tSilence_func+0xbc>)
 8002ece:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ed6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002f74 <tSilence_func+0xc0>
 8002eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee2:	dd34      	ble.n	8002f4e <tSilence_func+0x9a>
 8002ee4:	4b24      	ldr	r3, [pc, #144]	; (8002f78 <tSilence_func+0xc4>)
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d130      	bne.n	8002f4e <tSilence_func+0x9a>
//			uartBus[SHORE_UART].huart = &huart5;
//		}
//		else if(uartBus[SHORE_UART].huart == &huart5) {
//			uartBus[SHORE_UART].huart = &huart1;
//		}
		HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 8002eec:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <tSilence_func+0xbc>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f006 f93b 	bl	800916c <HAL_UART_AbortReceive_IT>
		HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8002ef6:	4b1e      	ldr	r3, [pc, #120]	; (8002f70 <tSilence_func+0xbc>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	4a1d      	ldr	r2, [pc, #116]	; (8002f70 <tSilence_func+0xbc>)
 8002efc:	6811      	ldr	r1, [r2, #0]
 8002efe:	2201      	movs	r2, #1
 8002f00:	4618      	mov	r0, r3
 8002f02:	f005 ffe1 	bl	8008ec8 <HAL_UART_Receive_IT>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 8002f06:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <tSilence_func+0xc8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2105      	movs	r1, #5
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f008 faab 	bl	800b468 <xQueueSemaphoreTake>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d11a      	bne.n	8002f4e <tSilence_func+0x9a>
			resetThrusters();
 8002f18:	f000 feb6 	bl	8003c88 <resetThrusters>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	73fb      	strb	r3, [r7, #15]
 8002f20:	e00b      	b.n	8002f3a <tSilence_func+0x86>
				rStabConstants[i].enable = false;
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	4916      	ldr	r1, [pc, #88]	; (8002f80 <tSilence_func+0xcc>)
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	440b      	add	r3, r1
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	3301      	adds	r3, #1
 8002f38:	73fb      	strb	r3, [r7, #15]
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	2b05      	cmp	r3, #5
 8002f3e:	d9f0      	bls.n	8002f22 <tSilence_func+0x6e>
			}
			xSemaphoreGive(mutDataHandle);
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <tSilence_func+0xc8>)
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	2300      	movs	r3, #0
 8002f46:	2200      	movs	r2, #0
 8002f48:	2100      	movs	r1, #0
 8002f4a:	f008 f813 	bl	800af74 <xQueueGenericSend>
//			break;
//			}
		}
//	}
	//HAL_GPIO_WritePin(GPIOE, RES_PC_2_Pin, GPIO_PIN_SET); // ONOFF
	xTimerStart(SilenceTimer, 50);
 8002f4e:	4b0d      	ldr	r3, [pc, #52]	; (8002f84 <tSilence_func+0xd0>)
 8002f50:	681c      	ldr	r4, [r3, #0]
 8002f52:	f009 f8a1 	bl	800c098 <xTaskGetTickCount>
 8002f56:	4602      	mov	r2, r0
 8002f58:	2332      	movs	r3, #50	; 0x32
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4620      	mov	r0, r4
 8002f62:	f009 feab 	bl	800ccbc <xTimerGenericCommand>
  /* USER CODE END tSilence_func */
}
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd90      	pop	{r4, r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	200000ec 	.word	0x200000ec
 8002f74:	447a0000 	.word	0x447a0000
 8002f78:	20000194 	.word	0x20000194
 8002f7c:	20001564 	.word	0x20001564
 8002f80:	20001748 	.word	0x20001748
 8002f84:	200001a0 	.word	0x200001a0

08002f88 <tTechCommTImer_callback>:

/* tTechCommTImer_callback function */
void tTechCommTImer_callback(void *argument)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tTechCommTImer_callback */

  /* USER CODE END tTechCommTImer_callback */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa2:	f107 030c 	add.w	r3, r7, #12
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	605a      	str	r2, [r3, #4]
 8002fac:	609a      	str	r2, [r3, #8]
 8002fae:	60da      	str	r2, [r3, #12]
 8002fb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	4b20      	ldr	r3, [pc, #128]	; (8003038 <MX_GPIO_Init+0x9c>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	4a1f      	ldr	r2, [pc, #124]	; (8003038 <MX_GPIO_Init+0x9c>)
 8002fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <MX_GPIO_Init+0x9c>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	4b19      	ldr	r3, [pc, #100]	; (8003038 <MX_GPIO_Init+0x9c>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	4a18      	ldr	r2, [pc, #96]	; (8003038 <MX_GPIO_Init+0x9c>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fde:	4b16      	ldr	r3, [pc, #88]	; (8003038 <MX_GPIO_Init+0x9c>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	607b      	str	r3, [r7, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <MX_GPIO_Init+0x9c>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	4a11      	ldr	r2, [pc, #68]	; (8003038 <MX_GPIO_Init+0x9c>)
 8002ff4:	f043 0302 	orr.w	r3, r3, #2
 8002ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffa:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <MX_GPIO_Init+0x9c>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led1_Pin|led2_Pin|led3_Pin, GPIO_PIN_RESET);
 8003006:	2200      	movs	r2, #0
 8003008:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800300c:	480b      	ldr	r0, [pc, #44]	; (800303c <MX_GPIO_Init+0xa0>)
 800300e:	f003 f947 	bl	80062a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin;
 8003012:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003016:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003018:	2301      	movs	r3, #1
 800301a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003020:	2300      	movs	r3, #0
 8003022:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003024:	f107 030c 	add.w	r3, r7, #12
 8003028:	4619      	mov	r1, r3
 800302a:	4804      	ldr	r0, [pc, #16]	; (800303c <MX_GPIO_Init+0xa0>)
 800302c:	f002 ff9c 	bl	8005f68 <HAL_GPIO_Init>

}
 8003030:	bf00      	nop
 8003032:	3720      	adds	r7, #32
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40023800 	.word	0x40023800
 800303c:	40020400 	.word	0x40020400

08003040 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <MX_I2C1_Init+0x50>)
 8003046:	4a13      	ldr	r2, [pc, #76]	; (8003094 <MX_I2C1_Init+0x54>)
 8003048:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800304a:	4b11      	ldr	r3, [pc, #68]	; (8003090 <MX_I2C1_Init+0x50>)
 800304c:	4a12      	ldr	r2, [pc, #72]	; (8003098 <MX_I2C1_Init+0x58>)
 800304e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003050:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <MX_I2C1_Init+0x50>)
 8003052:	2200      	movs	r2, #0
 8003054:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003056:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <MX_I2C1_Init+0x50>)
 8003058:	2200      	movs	r2, #0
 800305a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <MX_I2C1_Init+0x50>)
 800305e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003062:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003064:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <MX_I2C1_Init+0x50>)
 8003066:	2200      	movs	r2, #0
 8003068:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <MX_I2C1_Init+0x50>)
 800306c:	2200      	movs	r2, #0
 800306e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003070:	4b07      	ldr	r3, [pc, #28]	; (8003090 <MX_I2C1_Init+0x50>)
 8003072:	2200      	movs	r2, #0
 8003074:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <MX_I2C1_Init+0x50>)
 8003078:	2200      	movs	r2, #0
 800307a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800307c:	4804      	ldr	r0, [pc, #16]	; (8003090 <MX_I2C1_Init+0x50>)
 800307e:	f003 f943 	bl	8006308 <HAL_I2C_Init>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003088:	f000 f91b 	bl	80032c2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800308c:	bf00      	nop
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20001bc8 	.word	0x20001bc8
 8003094:	40005400 	.word	0x40005400
 8003098:	000186a0 	.word	0x000186a0

0800309c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	f107 0314 	add.w	r3, r7, #20
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	60da      	str	r2, [r3, #12]
 80030b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1d      	ldr	r2, [pc, #116]	; (8003130 <HAL_I2C_MspInit+0x94>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d133      	bne.n	8003126 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	4b1c      	ldr	r3, [pc, #112]	; (8003134 <HAL_I2C_MspInit+0x98>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	4a1b      	ldr	r2, [pc, #108]	; (8003134 <HAL_I2C_MspInit+0x98>)
 80030c8:	f043 0302 	orr.w	r3, r3, #2
 80030cc:	6313      	str	r3, [r2, #48]	; 0x30
 80030ce:	4b19      	ldr	r3, [pc, #100]	; (8003134 <HAL_I2C_MspInit+0x98>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030da:	23c0      	movs	r3, #192	; 0xc0
 80030dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030de:	2312      	movs	r3, #18
 80030e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e6:	2303      	movs	r3, #3
 80030e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80030ea:	2304      	movs	r3, #4
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ee:	f107 0314 	add.w	r3, r7, #20
 80030f2:	4619      	mov	r1, r3
 80030f4:	4810      	ldr	r0, [pc, #64]	; (8003138 <HAL_I2C_MspInit+0x9c>)
 80030f6:	f002 ff37 	bl	8005f68 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <HAL_I2C_MspInit+0x98>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	4a0c      	ldr	r2, [pc, #48]	; (8003134 <HAL_I2C_MspInit+0x98>)
 8003104:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003108:	6413      	str	r3, [r2, #64]	; 0x40
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <HAL_I2C_MspInit+0x98>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003116:	2200      	movs	r2, #0
 8003118:	2105      	movs	r1, #5
 800311a:	201f      	movs	r0, #31
 800311c:	f002 f812 	bl	8005144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003120:	201f      	movs	r0, #31
 8003122:	f002 f82b 	bl	800517c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003126:	bf00      	nop
 8003128:	3728      	adds	r7, #40	; 0x28
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40005400 	.word	0x40005400
 8003134:	40023800 	.word	0x40023800
 8003138:	40020400 	.word	0x40020400

0800313c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003140:	f001 fbae 	bl	80048a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003144:	f000 f846 	bl	80031d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003148:	f7ff ff28 	bl	8002f9c <MX_GPIO_Init>
  MX_DMA_Init();
 800314c:	f7ff f97e 	bl	800244c <MX_DMA_Init>
  MX_CAN1_Init();
 8003150:	f7fd feaa 	bl	8000ea8 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8003154:	f001 f8f8 	bl	8004348 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8003158:	f001 f94a 	bl	80043f0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800315c:	f7ff ff70 	bl	8003040 <MX_I2C1_Init>
  MX_TIM7_Init();
 8003160:	f001 f89c 	bl	800429c <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8003164:	f001 f91a 	bl	800439c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, led1_Pin, GPIO_PIN_SET);
 8003168:	2201      	movs	r2, #1
 800316a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800316e:	4818      	ldr	r0, [pc, #96]	; (80031d0 <main+0x94>)
 8003170:	f003 f896 	bl	80062a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, led2_Pin, GPIO_PIN_SET);
 8003174:	2201      	movs	r2, #1
 8003176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800317a:	4815      	ldr	r0, [pc, #84]	; (80031d0 <main+0x94>)
 800317c:	f003 f890 	bl	80062a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, led3_Pin, GPIO_PIN_SET);
 8003180:	2201      	movs	r2, #1
 8003182:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003186:	4812      	ldr	r0, [pc, #72]	; (80031d0 <main+0x94>)
 8003188:	f003 f88a 	bl	80062a0 <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 800318c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003190:	f001 fbc8 	bl	8004924 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, led1_Pin, GPIO_PIN_RESET);
 8003194:	2200      	movs	r2, #0
 8003196:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800319a:	480d      	ldr	r0, [pc, #52]	; (80031d0 <main+0x94>)
 800319c:	f003 f880 	bl	80062a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, led2_Pin, GPIO_PIN_RESET);
 80031a0:	2200      	movs	r2, #0
 80031a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031a6:	480a      	ldr	r0, [pc, #40]	; (80031d0 <main+0x94>)
 80031a8:	f003 f87a 	bl	80062a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, led3_Pin, GPIO_PIN_RESET);
 80031ac:	2200      	movs	r2, #0
 80031ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031b2:	4807      	ldr	r0, [pc, #28]	; (80031d0 <main+0x94>)
 80031b4:	f003 f874 	bl	80062a0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80031b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031bc:	f001 fbb2 	bl	8004924 <HAL_Delay>
	  /* USER CODE END 2 */

	  /* Init scheduler */
	  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80031c0:	f007 fa2a 	bl	800a618 <osKernelInitialize>
	  MX_FREERTOS_Init();
 80031c4:	f7ff fb42 	bl	800284c <MX_FREERTOS_Init>

	  /* Start scheduler */
	  osKernelStart();
 80031c8:	f007 fa4a 	bl	800a660 <osKernelStart>
	  /* We should never get here as control is now taken by the scheduler */
	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */


	    while (1) {
 80031cc:	e7fe      	b.n	80031cc <main+0x90>
 80031ce:	bf00      	nop
 80031d0:	40020400 	.word	0x40020400

080031d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b094      	sub	sp, #80	; 0x50
 80031d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031da:	f107 0320 	add.w	r3, r7, #32
 80031de:	2230      	movs	r2, #48	; 0x30
 80031e0:	2100      	movs	r1, #0
 80031e2:	4618      	mov	r0, r3
 80031e4:	f00a fd04 	bl	800dbf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031e8:	f107 030c 	add.w	r3, r7, #12
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031f8:	2300      	movs	r3, #0
 80031fa:	60bb      	str	r3, [r7, #8]
 80031fc:	4b27      	ldr	r3, [pc, #156]	; (800329c <SystemClock_Config+0xc8>)
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	4a26      	ldr	r2, [pc, #152]	; (800329c <SystemClock_Config+0xc8>)
 8003202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003206:	6413      	str	r3, [r2, #64]	; 0x40
 8003208:	4b24      	ldr	r3, [pc, #144]	; (800329c <SystemClock_Config+0xc8>)
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003214:	2300      	movs	r3, #0
 8003216:	607b      	str	r3, [r7, #4]
 8003218:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <SystemClock_Config+0xcc>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a20      	ldr	r2, [pc, #128]	; (80032a0 <SystemClock_Config+0xcc>)
 800321e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	4b1e      	ldr	r3, [pc, #120]	; (80032a0 <SystemClock_Config+0xcc>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322c:	607b      	str	r3, [r7, #4]
 800322e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003230:	2301      	movs	r3, #1
 8003232:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800323a:	2302      	movs	r3, #2
 800323c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800323e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003244:	230c      	movs	r3, #12
 8003246:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003248:	2348      	movs	r3, #72	; 0x48
 800324a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800324c:	2302      	movs	r3, #2
 800324e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003250:	2304      	movs	r3, #4
 8003252:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003254:	f107 0320 	add.w	r3, r7, #32
 8003258:	4618      	mov	r0, r3
 800325a:	f004 fdf9 	bl	8007e50 <HAL_RCC_OscConfig>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003264:	f000 f82d 	bl	80032c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003268:	230f      	movs	r3, #15
 800326a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800326c:	2302      	movs	r3, #2
 800326e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003278:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800327e:	f107 030c 	add.w	r3, r7, #12
 8003282:	2102      	movs	r1, #2
 8003284:	4618      	mov	r0, r3
 8003286:	f005 f85b 	bl	8008340 <HAL_RCC_ClockConfig>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003290:	f000 f817 	bl	80032c2 <Error_Handler>
  }
}
 8003294:	bf00      	nop
 8003296:	3750      	adds	r7, #80	; 0x50
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40023800 	.word	0x40023800
 80032a0:	40007000 	.word	0x40007000

080032a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b4:	d101      	bne.n	80032ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80032b6:	f001 fb15 	bl	80048e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032c2:	b480      	push	{r7}
 80032c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032c6:	b672      	cpsid	i
}
 80032c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032ca:	e7fe      	b.n	80032ca <Error_Handler+0x8>

080032cc <stabilizationStart>:


}

void stabilizationStart(uint8_t contour)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	71fb      	strb	r3, [r7, #7]
	rStabConstants[contour].enable = true;
 80032d6:	79fa      	ldrb	r2, [r7, #7]
 80032d8:	4970      	ldr	r1, [pc, #448]	; (800349c <stabilizationStart+0x1d0>)
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	440b      	add	r3, r1
 80032e4:	2201      	movs	r2, #1
 80032e6:	701a      	strb	r2, [r3, #0]

	rStabState[contour].oldSpeed = *rStabState[contour].speedSignal;
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	4a6d      	ldr	r2, [pc, #436]	; (80034a0 <stabilizationStart+0x1d4>)
 80032ec:	2158      	movs	r1, #88	; 0x58
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	4413      	add	r3, r2
 80032f4:	3304      	adds	r3, #4
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	4968      	ldr	r1, [pc, #416]	; (80034a0 <stabilizationStart+0x1d4>)
 80032fe:	2058      	movs	r0, #88	; 0x58
 8003300:	fb00 f303 	mul.w	r3, r0, r3
 8003304:	440b      	add	r3, r1
 8003306:	3314      	adds	r3, #20
 8003308:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPos = *rStabState[contour].posSignal;
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	4a64      	ldr	r2, [pc, #400]	; (80034a0 <stabilizationStart+0x1d4>)
 800330e:	2158      	movs	r1, #88	; 0x58
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	4413      	add	r3, r2
 8003316:	3308      	adds	r3, #8
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	4960      	ldr	r1, [pc, #384]	; (80034a0 <stabilizationStart+0x1d4>)
 8003320:	2058      	movs	r0, #88	; 0x58
 8003322:	fb00 f303 	mul.w	r3, r0, r3
 8003326:	440b      	add	r3, r1
 8003328:	3318      	adds	r3, #24
 800332a:	601a      	str	r2, [r3, #0]
	rStabState[contour].posDerivative = 0;
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	4a5c      	ldr	r2, [pc, #368]	; (80034a0 <stabilizationStart+0x1d4>)
 8003330:	2158      	movs	r1, #88	; 0x58
 8003332:	fb01 f303 	mul.w	r3, r1, r3
 8003336:	4413      	add	r3, r2
 8003338:	3310      	adds	r3, #16
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
	//rStabState[contour].speedIntegral = 0;
if(contour==STAB_YAW)
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d103      	bne.n	800334e <stabilizationStart+0x82>
{
	rSensors.yaw =0;
 8003346:	4b57      	ldr	r3, [pc, #348]	; (80034a4 <stabilizationStart+0x1d8>)
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
}
	rStabState[contour].joyUnitCasted = 0;
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	4a53      	ldr	r2, [pc, #332]	; (80034a0 <stabilizationStart+0x1d4>)
 8003352:	2158      	movs	r1, #88	; 0x58
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	331c      	adds	r3, #28
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
	rStabState[contour].joy_iValue = *rStabState[contour].posSignal;
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	4a4e      	ldr	r2, [pc, #312]	; (80034a0 <stabilizationStart+0x1d4>)
 8003366:	2158      	movs	r1, #88	; 0x58
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	4413      	add	r3, r2
 800336e:	3308      	adds	r3, #8
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	6812      	ldr	r2, [r2, #0]
 8003376:	494a      	ldr	r1, [pc, #296]	; (80034a0 <stabilizationStart+0x1d4>)
 8003378:	2058      	movs	r0, #88	; 0x58
 800337a:	fb00 f303 	mul.w	r3, r0, r3
 800337e:	440b      	add	r3, r1
 8003380:	3320      	adds	r3, #32
 8003382:	601a      	str	r2, [r3, #0]
	rStabState[contour].posError = 0;
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	4a46      	ldr	r2, [pc, #280]	; (80034a0 <stabilizationStart+0x1d4>)
 8003388:	2158      	movs	r1, #88	; 0x58
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	3324      	adds	r3, #36	; 0x24
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedError = 0;
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	4a41      	ldr	r2, [pc, #260]	; (80034a0 <stabilizationStart+0x1d4>)
 800339c:	2158      	movs	r1, #88	; 0x58
 800339e:	fb01 f303 	mul.w	r3, r1, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	3328      	adds	r3, #40	; 0x28
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
	rStabState[contour].dynSummator = 0;
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	4a3c      	ldr	r2, [pc, #240]	; (80034a0 <stabilizationStart+0x1d4>)
 80033b0:	2158      	movs	r1, #88	; 0x58
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	332c      	adds	r3, #44	; 0x2c
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
	rStabState[contour].pidValue = 0;
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	4a37      	ldr	r2, [pc, #220]	; (80034a0 <stabilizationStart+0x1d4>)
 80033c4:	2158      	movs	r1, #88	; 0x58
 80033c6:	fb01 f303 	mul.w	r3, r1, r3
 80033ca:	4413      	add	r3, r2
 80033cc:	3330      	adds	r3, #48	; 0x30
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
	rStabState[contour].pid_iValue = 0;
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	4a32      	ldr	r2, [pc, #200]	; (80034a0 <stabilizationStart+0x1d4>)
 80033d8:	2158      	movs	r1, #88	; 0x58
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	3334      	adds	r3, #52	; 0x34
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
	rStabState[contour].posErrorAmp = 0;
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	4a2d      	ldr	r2, [pc, #180]	; (80034a0 <stabilizationStart+0x1d4>)
 80033ec:	2158      	movs	r1, #88	; 0x58
 80033ee:	fb01 f303 	mul.w	r3, r1, r3
 80033f2:	4413      	add	r3, r2
 80033f4:	3338      	adds	r3, #56	; 0x38
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedFiltered = 0;
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	4a28      	ldr	r2, [pc, #160]	; (80034a0 <stabilizationStart+0x1d4>)
 8003400:	2158      	movs	r1, #88	; 0x58
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	4413      	add	r3, r2
 8003408:	333c      	adds	r3, #60	; 0x3c
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
	rStabState[contour].posFiltered = 0;
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	4a23      	ldr	r2, [pc, #140]	; (80034a0 <stabilizationStart+0x1d4>)
 8003414:	2158      	movs	r1, #88	; 0x58
 8003416:	fb01 f303 	mul.w	r3, r1, r3
 800341a:	4413      	add	r3, r2
 800341c:	3340      	adds	r3, #64	; 0x40
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPosFiltered = 0;
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	4a1e      	ldr	r2, [pc, #120]	; (80034a0 <stabilizationStart+0x1d4>)
 8003428:	2158      	movs	r1, #88	; 0x58
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	4413      	add	r3, r2
 8003430:	3344      	adds	r3, #68	; 0x44
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldSpeedError = 0;
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	4a19      	ldr	r2, [pc, #100]	; (80034a0 <stabilizationStart+0x1d4>)
 800343c:	2158      	movs	r1, #88	; 0x58
 800343e:	fb01 f303 	mul.w	r3, r1, r3
 8003442:	4413      	add	r3, r2
 8003444:	3348      	adds	r3, #72	; 0x48
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
	rStabState[contour].thrustersFiltered = 0;
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <stabilizationStart+0x1d4>)
 8003450:	2158      	movs	r1, #88	; 0x58
 8003452:	fb01 f303 	mul.w	r3, r1, r3
 8003456:	4413      	add	r3, r2
 8003458:	334c      	adds	r3, #76	; 0x4c
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
	rStabState[contour].outputSignal = 0;
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	4a0f      	ldr	r2, [pc, #60]	; (80034a0 <stabilizationStart+0x1d4>)
 8003464:	2158      	movs	r1, #88	; 0x58
 8003466:	fb01 f303 	mul.w	r3, r1, r3
 800346a:	4413      	add	r3, r2
 800346c:	3350      	adds	r3, #80	; 0x50
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
	rStabState[contour].LastTick = xTaskGetTickCount();
 8003474:	f008 fe10 	bl	800c098 <xTaskGetTickCount>
 8003478:	ee07 0a90 	vmov	s15, r0
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003482:	4a07      	ldr	r2, [pc, #28]	; (80034a0 <stabilizationStart+0x1d4>)
 8003484:	2158      	movs	r1, #88	; 0x58
 8003486:	fb01 f303 	mul.w	r3, r1, r3
 800348a:	4413      	add	r3, r2
 800348c:	3354      	adds	r3, #84	; 0x54
 800348e:	edc3 7a00 	vstr	s15, [r3]
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20001748 	.word	0x20001748
 80034a0:	200018f8 	.word	0x200018f8
 80034a4:	20001684 	.word	0x20001684

080034a8 <stabilizationUpdate>:

void stabilizationUpdate(uint8_t contour)
{
 80034a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	4603      	mov	r3, r0
 80034b2:	71fb      	strb	r3, [r7, #7]
	struct robotStabilizationConstants_s *constants = &rStabConstants[contour];
 80034b4:	79fa      	ldrb	r2, [r7, #7]
 80034b6:	4613      	mov	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4413      	add	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4aa6      	ldr	r2, [pc, #664]	; (8003758 <stabilizationUpdate+0x2b0>)
 80034c0:	4413      	add	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]
	struct robotStabilizationState_s *state = &rStabState[contour];
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	2258      	movs	r2, #88	; 0x58
 80034c8:	fb02 f303 	mul.w	r3, r2, r3
 80034cc:	4aa3      	ldr	r2, [pc, #652]	; (800375c <stabilizationUpdate+0x2b4>)
 80034ce:	4413      	add	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
	float diffTime = fromTickToMs(xTaskGetTickCount() - state->LastTick) / 1000.0f;
 80034d2:	f008 fde1 	bl	800c098 <xTaskGetTickCount>
 80034d6:	ee07 0a90 	vmov	s15, r0
 80034da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80034e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034ec:	ee17 0a90 	vmov	r0, s15
 80034f0:	f7fd fcbe 	bl	8000e70 <fromTickToMs>
 80034f4:	eeb0 7a40 	vmov.f32	s14, s0
 80034f8:	eddf 6a99 	vldr	s13, [pc, #612]	; 8003760 <stabilizationUpdate+0x2b8>
 80034fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003500:	edc7 7a03 	vstr	s15, [r7, #12]
	state->LastTick = xTaskGetTickCount();
 8003504:	f008 fdc8 	bl	800c098 <xTaskGetTickCount>
 8003508:	ee07 0a90 	vmov	s15, r0
 800350c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	// Speed feedback filtering
	struct AperiodicFilter *filter = &constants->aFilter[SPEED_FILTER];
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	3318      	adds	r3, #24
 800351a:	60bb      	str	r3, [r7, #8]

	if(filter->T != 0) {
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	edd3 7a00 	vldr	s15, [r3]
 8003522:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352a:	d02b      	beq.n	8003584 <stabilizationUpdate+0xdc>
		//state->speedFiltered = state->speedFiltered*exp(-diffTime/filter->T/1e5) + state->oldSpeed*filter->K*80*(1-exp(-diffTime/filter->T/1e5));
		state->speedFiltered = state->oldSpeed + diffTime * (1/filter->T*100) * (*state->speedSignal * filter->K*70 - state->oldSpeed);
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	ed93 7a05 	vldr	s14, [r3, #20]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	edd3 6a00 	vldr	s13, [r3]
 8003538:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800353c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003540:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8003770 <stabilizationUpdate+0x2c8>
 8003544:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003548:	edd7 7a03 	vldr	s15, [r7, #12]
 800354c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	ed93 6a00 	vldr	s12, [r3]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	edd3 7a01 	vldr	s15, [r3, #4]
 800355e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003562:	ed9f 6a80 	vldr	s12, [pc, #512]	; 8003764 <stabilizationUpdate+0x2bc>
 8003566:	ee27 6a86 	vmul.f32	s12, s15, s12
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003570:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8003582:	e023      	b.n	80035cc <stabilizationUpdate+0x124>
	}
	else {
		if(contour==STAB_PITCH)
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	2b05      	cmp	r3, #5
 8003588:	d110      	bne.n	80035ac <stabilizationUpdate+0x104>
		{
			state->speedFiltered = *state->speedSignal*filter->K*250;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	ed93 7a00 	vldr	s14, [r3]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	edd3 7a01 	vldr	s15, [r3, #4]
 8003598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800359c:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003768 <stabilizationUpdate+0x2c0>
 80035a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 80035aa:	e00f      	b.n	80035cc <stabilizationUpdate+0x124>
		}
		else
		state->speedFiltered = *state->speedSignal*filter->K*10;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	ed93 7a00 	vldr	s14, [r3]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80035ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035be:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80035c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	//state->oldSpeed = *state->speedSignal;
	state->oldSpeed = state->speedFiltered;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	615a      	str	r2, [r3, #20]

	// Position feedback filtering
	filter = &constants->aFilter[POS_FILTER];
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	3310      	adds	r3, #16
 80035d8:	60bb      	str	r3, [r7, #8]
	if(filter->T != 0) {
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	edd3 7a00 	vldr	s15, [r3]
 80035e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e8:	d061      	beq.n	80036ae <stabilizationUpdate+0x206>
		state->posFiltered = state->posFiltered*exp(-diffTime/filter->T) + state->oldPos*filter->K*(1-exp(-diffTime/filter->T));
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fc ff52 	bl	8000498 <__aeabi_f2d>
 80035f4:	4604      	mov	r4, r0
 80035f6:	460d      	mov	r5, r1
 80035f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80035fc:	eeb1 7a67 	vneg.f32	s14, s15
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	edd3 7a00 	vldr	s15, [r3]
 8003606:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800360a:	ee16 0a90 	vmov	r0, s13
 800360e:	f7fc ff43 	bl	8000498 <__aeabi_f2d>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	ec43 2b10 	vmov	d0, r2, r3
 800361a:	f00a fbb5 	bl	800dd88 <exp>
 800361e:	ec53 2b10 	vmov	r2, r3, d0
 8003622:	4620      	mov	r0, r4
 8003624:	4629      	mov	r1, r5
 8003626:	f7fc ff8f 	bl	8000548 <__aeabi_dmul>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4690      	mov	r8, r2
 8003630:	4699      	mov	r9, r3
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	ed93 7a06 	vldr	s14, [r3, #24]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	edd3 7a01 	vldr	s15, [r3, #4]
 800363e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003642:	ee17 0a90 	vmov	r0, s15
 8003646:	f7fc ff27 	bl	8000498 <__aeabi_f2d>
 800364a:	4604      	mov	r4, r0
 800364c:	460d      	mov	r5, r1
 800364e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003652:	eeb1 7a67 	vneg.f32	s14, s15
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	edd3 7a00 	vldr	s15, [r3]
 800365c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003660:	ee16 0a90 	vmov	r0, s13
 8003664:	f7fc ff18 	bl	8000498 <__aeabi_f2d>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	ec43 2b10 	vmov	d0, r2, r3
 8003670:	f00a fb8a 	bl	800dd88 <exp>
 8003674:	ec53 2b10 	vmov	r2, r3, d0
 8003678:	f04f 0000 	mov.w	r0, #0
 800367c:	493b      	ldr	r1, [pc, #236]	; (800376c <stabilizationUpdate+0x2c4>)
 800367e:	f7fc fdab 	bl	80001d8 <__aeabi_dsub>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4620      	mov	r0, r4
 8003688:	4629      	mov	r1, r5
 800368a:	f7fc ff5d 	bl	8000548 <__aeabi_dmul>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4640      	mov	r0, r8
 8003694:	4649      	mov	r1, r9
 8003696:	f7fc fda1 	bl	80001dc <__adddf3>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	f7fd fa13 	bl	8000acc <__aeabi_d2f>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40
 80036ac:	e00b      	b.n	80036c6 <stabilizationUpdate+0x21e>
	}
	else {
		state->posFiltered = *state->posSignal*filter->K;
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	ed93 7a00 	vldr	s14, [r3]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80036bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	}
	state->oldPos = *state->posSignal;
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	619a      	str	r2, [r3, #24]

	// Speed integration calculation
	state->speedIntegral += (*state->speedSignal * diffTime);
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	ed93 7a03 	vldr	s14, [r3, #12]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	edd3 6a00 	vldr	s13, [r3]
 80036de:	edd7 7a03 	vldr	s15, [r7, #12]
 80036e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	edc3 7a03 	vstr	s15, [r3, #12]

    // Position derivative calculation
    state->posDerivative = (state->posFiltered - state->oldPosFiltered) / diffTime;
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80036fc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003700:	ed97 7a03 	vldr	s14, [r7, #12]
 8003704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	edc3 7a04 	vstr	s15, [r3, #16]
    state->oldPosFiltered = state->posFiltered;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	645a      	str	r2, [r3, #68]	; 0x44

	// Input signal unit cast
	state->joyUnitCasted = constants->pJoyUnitCast * *state->inputSignal;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	ed93 7a01 	vldr	s14, [r3, #4]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	edd3 7a00 	vldr	s15, [r3]
 8003724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	edc3 7a07 	vstr	s15, [r3, #28]

    // Casted input signal integration
	if(constants->joyIntegration) {
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	785b      	ldrb	r3, [r3, #1]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01e      	beq.n	8003774 <stabilizationUpdate+0x2cc>
		state->joy_iValue += state->joyUnitCasted * diffTime;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	ed93 7a08 	vldr	s14, [r3, #32]
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	edd3 6a07 	vldr	s13, [r3, #28]
 8003742:	edd7 7a03 	vldr	s15, [r7, #12]
 8003746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800374a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	edc3 7a08 	vstr	s15, [r3, #32]
 8003754:	e012      	b.n	800377c <stabilizationUpdate+0x2d4>
 8003756:	bf00      	nop
 8003758:	20001748 	.word	0x20001748
 800375c:	200018f8 	.word	0x200018f8
 8003760:	447a0000 	.word	0x447a0000
 8003764:	428c0000 	.word	0x428c0000
 8003768:	437a0000 	.word	0x437a0000
 800376c:	3ff00000 	.word	0x3ff00000
 8003770:	42c80000 	.word	0x42c80000
	}
	else {
		state->joy_iValue = state->joyUnitCasted;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	69da      	ldr	r2, [r3, #28]
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	621a      	str	r2, [r3, #32]
	}

    // Position feedback summator
    state->posError = state->joy_iValue - state->posFiltered;
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	ed93 7a08 	vldr	s14, [r3, #32]
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Feedback amplifiers
    state->posErrorAmp = state->posError * constants->pErrGain;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	edd3 7a03 	vldr	s15, [r3, #12]
 800379e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    // PI integration
    state->pid_iValue += (state->posErrorAmp * diffTime) * constants->pid.iGain;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80037b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80037b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80037c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // PI integration saturation
    if(state->pid_iValue > constants->pid.iMax*100) {
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80037dc:	ed5f 6a1c 	vldr	s13, [pc, #-112]	; 8003770 <stabilizationUpdate+0x2c8>
 80037e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80037e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ec:	dd0a      	ble.n	8003804 <stabilizationUpdate+0x35c>
    	state->pid_iValue = constants->pid.iMax*100;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80037f4:	ed1f 7a22 	vldr	s14, [pc, #-136]	; 8003770 <stabilizationUpdate+0x2c8>
 80037f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8003802:	e018      	b.n	8003836 <stabilizationUpdate+0x38e>
    }
    else if(state->pid_iValue < constants->pid.iMin*100) {
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003810:	ed5f 6a29 	vldr	s13, [pc, #-164]	; 8003770 <stabilizationUpdate+0x2c8>
 8003814:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003818:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800381c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003820:	d509      	bpl.n	8003836 <stabilizationUpdate+0x38e>
    	state->pid_iValue = constants->pid.iMin*100;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003828:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 8003770 <stabilizationUpdate+0x2c8>
 800382c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    }

    // PI summator
    state->pidValue =  state->pid_iValue + (state->posErrorAmp * constants->pid.pGain);
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800384c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    // Dynamic summator
    state->dynSummator = state->pidValue + *state->inputSignal * constants->pSpeedDyn;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	edd3 6a00 	vldr	s13, [r3]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	edd3 7a02 	vldr	s15, [r3, #8]
 800386a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800386e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    // Speed feedback
    state->speedError = state->dynSummator - state->speedFiltered;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003884:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    // Out filtering
    filter = &constants->aFilter[THRUSTERS_FILTER];
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	3320      	adds	r3, #32
 8003892:	60bb      	str	r3, [r7, #8]
    if(filter->T != 0) {
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	edd3 7a00 	vldr	s15, [r3]
 800389a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800389e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a2:	d061      	beq.n	8003968 <stabilizationUpdate+0x4c0>
    	state->thrustersFiltered = state->thrustersFiltered*exp(-diffTime/filter->T) + state->oldSpeedError*filter->K*(1-exp(-diffTime/filter->T));
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fc fdf5 	bl	8000498 <__aeabi_f2d>
 80038ae:	4604      	mov	r4, r0
 80038b0:	460d      	mov	r5, r1
 80038b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80038b6:	eeb1 7a67 	vneg.f32	s14, s15
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	edd3 7a00 	vldr	s15, [r3]
 80038c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80038c4:	ee16 0a90 	vmov	r0, s13
 80038c8:	f7fc fde6 	bl	8000498 <__aeabi_f2d>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	ec43 2b10 	vmov	d0, r2, r3
 80038d4:	f00a fa58 	bl	800dd88 <exp>
 80038d8:	ec53 2b10 	vmov	r2, r3, d0
 80038dc:	4620      	mov	r0, r4
 80038de:	4629      	mov	r1, r5
 80038e0:	f7fc fe32 	bl	8000548 <__aeabi_dmul>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4690      	mov	r8, r2
 80038ea:	4699      	mov	r9, r3
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80038f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038fc:	ee17 0a90 	vmov	r0, s15
 8003900:	f7fc fdca 	bl	8000498 <__aeabi_f2d>
 8003904:	4604      	mov	r4, r0
 8003906:	460d      	mov	r5, r1
 8003908:	edd7 7a03 	vldr	s15, [r7, #12]
 800390c:	eeb1 7a67 	vneg.f32	s14, s15
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	edd3 7a00 	vldr	s15, [r3]
 8003916:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800391a:	ee16 0a90 	vmov	r0, s13
 800391e:	f7fc fdbb 	bl	8000498 <__aeabi_f2d>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	ec43 2b10 	vmov	d0, r2, r3
 800392a:	f00a fa2d 	bl	800dd88 <exp>
 800392e:	ec53 2b10 	vmov	r2, r3, d0
 8003932:	f04f 0000 	mov.w	r0, #0
 8003936:	492a      	ldr	r1, [pc, #168]	; (80039e0 <stabilizationUpdate+0x538>)
 8003938:	f7fc fc4e 	bl	80001d8 <__aeabi_dsub>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4620      	mov	r0, r4
 8003942:	4629      	mov	r1, r5
 8003944:	f7fc fe00 	bl	8000548 <__aeabi_dmul>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4640      	mov	r0, r8
 800394e:	4649      	mov	r1, r9
 8003950:	f7fc fc44 	bl	80001dc <__adddf3>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4610      	mov	r0, r2
 800395a:	4619      	mov	r1, r3
 800395c:	f7fd f8b6 	bl	8000acc <__aeabi_d2f>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	64da      	str	r2, [r3, #76]	; 0x4c
 8003966:	e00a      	b.n	800397e <stabilizationUpdate+0x4d6>
    }
    else {
    	state->thrustersFiltered = state->speedError*filter->K;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	edd3 7a01 	vldr	s15, [r3, #4]
 8003974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    }
    state->oldSpeedError = state->speedError;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	649a      	str	r2, [r3, #72]	; 0x48

    if(state->thrustersFiltered > constants->pThrustersMax) {
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800399a:	dd04      	ble.n	80039a6 <stabilizationUpdate+0x4fe>
    	state->thrustersFiltered = constants->pThrustersMax;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80039a4:	e00e      	b.n	80039c4 <stabilizationUpdate+0x51c>
    }
    else if(state->thrustersFiltered < constants->pThrustersMin) {
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80039b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ba:	d503      	bpl.n	80039c4 <stabilizationUpdate+0x51c>
    	state->thrustersFiltered = constants->pThrustersMin;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    state->outputSignal = -1*state->speedError;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80039ca:	eef1 7a67 	vneg.f32	s15, s15
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 80039d4:	bf00      	nop
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039de:	bf00      	nop
 80039e0:	3ff00000 	.word	0x3ff00000

080039e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	607b      	str	r3, [r7, #4]
 80039ee:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <HAL_MspInit+0x54>)
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f2:	4a11      	ldr	r2, [pc, #68]	; (8003a38 <HAL_MspInit+0x54>)
 80039f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039f8:	6453      	str	r3, [r2, #68]	; 0x44
 80039fa:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <HAL_MspInit+0x54>)
 80039fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a02:	607b      	str	r3, [r7, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a06:	2300      	movs	r3, #0
 8003a08:	603b      	str	r3, [r7, #0]
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_MspInit+0x54>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	4a0a      	ldr	r2, [pc, #40]	; (8003a38 <HAL_MspInit+0x54>)
 8003a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a14:	6413      	str	r3, [r2, #64]	; 0x40
 8003a16:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <HAL_MspInit+0x54>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a22:	2200      	movs	r2, #0
 8003a24:	210f      	movs	r1, #15
 8003a26:	f06f 0001 	mvn.w	r0, #1
 8003a2a:	f001 fb8b 	bl	8005144 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40023800 	.word	0x40023800

08003a3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08e      	sub	sp, #56	; 0x38
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	4b34      	ldr	r3, [pc, #208]	; (8003b24 <HAL_InitTick+0xe8>)
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	4a33      	ldr	r2, [pc, #204]	; (8003b24 <HAL_InitTick+0xe8>)
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5c:	4b31      	ldr	r3, [pc, #196]	; (8003b24 <HAL_InitTick+0xe8>)
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a68:	f107 0210 	add.w	r2, r7, #16
 8003a6c:	f107 0314 	add.w	r3, r7, #20
 8003a70:	4611      	mov	r1, r2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f004 fe44 	bl	8008700 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d103      	bne.n	8003a8a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003a82:	f004 fe15 	bl	80086b0 <HAL_RCC_GetPCLK1Freq>
 8003a86:	6378      	str	r0, [r7, #52]	; 0x34
 8003a88:	e004      	b.n	8003a94 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003a8a:	f004 fe11 	bl	80086b0 <HAL_RCC_GetPCLK1Freq>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a96:	4a24      	ldr	r2, [pc, #144]	; (8003b28 <HAL_InitTick+0xec>)
 8003a98:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9c:	0c9b      	lsrs	r3, r3, #18
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003aa2:	4b22      	ldr	r3, [pc, #136]	; (8003b2c <HAL_InitTick+0xf0>)
 8003aa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003aa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003aaa:	4b20      	ldr	r3, [pc, #128]	; (8003b2c <HAL_InitTick+0xf0>)
 8003aac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ab0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003ab2:	4a1e      	ldr	r2, [pc, #120]	; (8003b2c <HAL_InitTick+0xf0>)
 8003ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003ab8:	4b1c      	ldr	r3, [pc, #112]	; (8003b2c <HAL_InitTick+0xf0>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003abe:	4b1b      	ldr	r3, [pc, #108]	; (8003b2c <HAL_InitTick+0xf0>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ac4:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <HAL_InitTick+0xf0>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8003aca:	4818      	ldr	r0, [pc, #96]	; (8003b2c <HAL_InitTick+0xf0>)
 8003acc:	f004 fe4a 	bl	8008764 <HAL_TIM_Base_Init>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003ad6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d11b      	bne.n	8003b16 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8003ade:	4813      	ldr	r0, [pc, #76]	; (8003b2c <HAL_InitTick+0xf0>)
 8003ae0:	f004 fe90 	bl	8008804 <HAL_TIM_Base_Start_IT>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003aea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d111      	bne.n	8003b16 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003af2:	201c      	movs	r0, #28
 8003af4:	f001 fb42 	bl	800517c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b0f      	cmp	r3, #15
 8003afc:	d808      	bhi.n	8003b10 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8003afe:	2200      	movs	r2, #0
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	201c      	movs	r0, #28
 8003b04:	f001 fb1e 	bl	8005144 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b08:	4a09      	ldr	r2, [pc, #36]	; (8003b30 <HAL_InitTick+0xf4>)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	e002      	b.n	8003b16 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003b16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3738      	adds	r7, #56	; 0x38
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023800 	.word	0x40023800
 8003b28:	431bde83 	.word	0x431bde83
 8003b2c:	20001c1c 	.word	0x20001c1c
 8003b30:	20000038 	.word	0x20000038

08003b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b38:	e7fe      	b.n	8003b38 <NMI_Handler+0x4>

08003b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b3e:	e7fe      	b.n	8003b3e <HardFault_Handler+0x4>

08003b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b44:	e7fe      	b.n	8003b44 <MemManage_Handler+0x4>

08003b46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b46:	b480      	push	{r7}
 8003b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b4a:	e7fe      	b.n	8003b4a <BusFault_Handler+0x4>

08003b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b50:	e7fe      	b.n	8003b50 <UsageFault_Handler+0x4>

08003b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b52:	b480      	push	{r7}
 8003b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b56:	bf00      	nop
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003b64:	4802      	ldr	r0, [pc, #8]	; (8003b70 <DMA1_Stream1_IRQHandler+0x10>)
 8003b66:	f001 fcaf 	bl	80054c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20001ef8 	.word	0x20001ef8

08003b74 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003b78:	4802      	ldr	r0, [pc, #8]	; (8003b84 <DMA1_Stream3_IRQHandler+0x10>)
 8003b7a:	f001 fca5 	bl	80054c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003b7e:	bf00      	nop
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20001f58 	.word	0x20001f58

08003b88 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003b8c:	4802      	ldr	r0, [pc, #8]	; (8003b98 <DMA1_Stream5_IRQHandler+0x10>)
 8003b8e:	f001 fc9b 	bl	80054c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20001e38 	.word	0x20001e38

08003b9c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003ba0:	4802      	ldr	r0, [pc, #8]	; (8003bac <DMA1_Stream6_IRQHandler+0x10>)
 8003ba2:	f001 fc91 	bl	80054c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003ba6:	bf00      	nop
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20001e98 	.word	0x20001e98

08003bb0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003bb4:	4802      	ldr	r0, [pc, #8]	; (8003bc0 <CAN1_TX_IRQHandler+0x10>)
 8003bb6:	f000 ffd4 	bl	8004b62 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	200000c4 	.word	0x200000c4

08003bc4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003bc8:	4802      	ldr	r0, [pc, #8]	; (8003bd4 <CAN1_RX0_IRQHandler+0x10>)
 8003bca:	f000 ffca 	bl	8004b62 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003bce:	bf00      	nop
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	200000c4 	.word	0x200000c4

08003bd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003bdc:	4802      	ldr	r0, [pc, #8]	; (8003be8 <TIM2_IRQHandler+0x10>)
 8003bde:	f004 fe81 	bl	80088e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003be2:	bf00      	nop
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20001c1c 	.word	0x20001c1c

08003bec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003bf0:	4802      	ldr	r0, [pc, #8]	; (8003bfc <I2C1_EV_IRQHandler+0x10>)
 8003bf2:	f002 fd7b 	bl	80066ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003bf6:	bf00      	nop
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20001bc8 	.word	0x20001bc8

08003c00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c04:	4802      	ldr	r0, [pc, #8]	; (8003c10 <USART1_IRQHandler+0x10>)
 8003c06:	f005 fb63 	bl	80092d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c0a:	bf00      	nop
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20001cac 	.word	0x20001cac

08003c14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c18:	4802      	ldr	r0, [pc, #8]	; (8003c24 <USART2_IRQHandler+0x10>)
 8003c1a:	f005 fb59 	bl	80092d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003c1e:	bf00      	nop
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20001cf0 	.word	0x20001cf0

08003c28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003c2c:	4802      	ldr	r0, [pc, #8]	; (8003c38 <USART3_IRQHandler+0x10>)
 8003c2e:	f005 fb4f 	bl	80092d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003c32:	bf00      	nop
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20001d34 	.word	0x20001d34

08003c3c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003c40:	4802      	ldr	r0, [pc, #8]	; (8003c4c <DMA2_Stream2_IRQHandler+0x10>)
 8003c42:	f001 fc41 	bl	80054c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003c46:	bf00      	nop
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20001d78 	.word	0x20001d78

08003c50 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003c54:	4802      	ldr	r0, [pc, #8]	; (8003c60 <DMA2_Stream7_IRQHandler+0x10>)
 8003c56:	f001 fc37 	bl	80054c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003c5a:	bf00      	nop
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20001dd8 	.word	0x20001dd8

08003c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c68:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <SystemInit+0x20>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	4a05      	ldr	r2, [pc, #20]	; (8003c84 <SystemInit+0x20>)
 8003c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c78:	bf00      	nop
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	e000ed00 	.word	0xe000ed00

08003c88 <resetThrusters>:
	rThrusters[MarshDown].kForward = 0.7;
	rThrusters[MarshDown].kBackward = 0.7;
}

void resetThrusters()
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
	rJoySpeed.depth = 0;
 8003c8c:	4b1d      	ldr	r3, [pc, #116]	; (8003d04 <resetThrusters+0x7c>)
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	609a      	str	r2, [r3, #8]
	rJoySpeed.lag = 0;
 8003c94:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <resetThrusters+0x7c>)
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	605a      	str	r2, [r3, #4]
	rJoySpeed.march = 0;
 8003c9c:	4b19      	ldr	r3, [pc, #100]	; (8003d04 <resetThrusters+0x7c>)
 8003c9e:	f04f 0200 	mov.w	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
	rJoySpeed.pitch = 0;
 8003ca4:	4b17      	ldr	r3, [pc, #92]	; (8003d04 <resetThrusters+0x7c>)
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	611a      	str	r2, [r3, #16]
	rJoySpeed.roll = 0;
 8003cac:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <resetThrusters+0x7c>)
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	60da      	str	r2, [r3, #12]
	rJoySpeed.yaw = 0;
 8003cb4:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <resetThrusters+0x7c>)
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	615a      	str	r2, [r3, #20]

	rThrusters[Lag1st].desiredSpeed = 0;
 8003cbc:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <resetThrusters+0x80>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rThrusters[Lag2nd].desiredSpeed = 0;
 8003cc4:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <resetThrusters+0x80>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	rThrusters[MarshLEFT].desiredSpeed = 0;
 8003ccc:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <resetThrusters+0x80>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	709a      	strb	r2, [r3, #2]
	rThrusters[MarshRIGHT].desiredSpeed = 0;
 8003cd2:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <resetThrusters+0x80>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	769a      	strb	r2, [r3, #26]
	rThrusters[VertBACK].desiredSpeed = 0;
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <resetThrusters+0x80>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	rThrusters[VertLEFT].desiredSpeed = 0;
 8003ce0:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <resetThrusters+0x80>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rThrusters[VertRIGHT].desiredSpeed = 0;
 8003ce8:	4b07      	ldr	r3, [pc, #28]	; (8003d08 <resetThrusters+0x80>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	rThrusters[MarshDown].desiredSpeed = 0;
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <resetThrusters+0x80>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	200016f0 	.word	0x200016f0
 8003d08:	200015c4 	.word	0x200015c4

08003d0c <fillThrustersRequest>:

void fillThrustersRequest(uint8_t *buf, uint8_t thruster)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	70fb      	strb	r3, [r7, #3]
    struct thrustersRequest_s res;

    res.AA = 0xAA;
 8003d18:	23aa      	movs	r3, #170	; 0xaa
 8003d1a:	723b      	strb	r3, [r7, #8]
    res.type = 0x01;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	727b      	strb	r3, [r7, #9]
    res.address = rThrusters[thruster].address;
 8003d20:	78fa      	ldrb	r2, [r7, #3]
 8003d22:	4936      	ldr	r1, [pc, #216]	; (8003dfc <fillThrustersRequest+0xf0>)
 8003d24:	4613      	mov	r3, r2
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	4413      	add	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	440b      	add	r3, r1
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	72bb      	strb	r3, [r7, #10]
    int16_t velocity = rThrusters[thruster].desiredSpeed;
 8003d32:	78fa      	ldrb	r2, [r7, #3]
 8003d34:	4931      	ldr	r1, [pc, #196]	; (8003dfc <fillThrustersRequest+0xf0>)
 8003d36:	4613      	mov	r3, r2
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	4413      	add	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	440b      	add	r3, r1
 8003d40:	3302      	adds	r3, #2
 8003d42:	f993 3000 	ldrsb.w	r3, [r3]
 8003d46:	81fb      	strh	r3, [r7, #14]

    // Inverting
    if(rThrusters[thruster].inverse) {
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	492c      	ldr	r1, [pc, #176]	; (8003dfc <fillThrustersRequest+0xf0>)
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	4413      	add	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	440b      	add	r3, r1
 8003d56:	3316      	adds	r3, #22
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <fillThrustersRequest+0x5a>
    	velocity *= -1;
 8003d5e:	89fb      	ldrh	r3, [r7, #14]
 8003d60:	425b      	negs	r3, r3
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	81fb      	strh	r3, [r7, #14]
    }

    // Multiplier constants
    if(velocity > 0) {
 8003d66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	dd17      	ble.n	8003d9e <fillThrustersRequest+0x92>
    	velocity = (int16_t) ( (float) (velocity) * rThrusters[thruster].kForward);
 8003d6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d72:	ee07 3a90 	vmov	s15, r3
 8003d76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	491f      	ldr	r1, [pc, #124]	; (8003dfc <fillThrustersRequest+0xf0>)
 8003d7e:	4613      	mov	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	4413      	add	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	440b      	add	r3, r1
 8003d88:	330c      	adds	r3, #12
 8003d8a:	edd3 7a00 	vldr	s15, [r3]
 8003d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d96:	ee17 3a90 	vmov	r3, s15
 8003d9a:	81fb      	strh	r3, [r7, #14]
 8003d9c:	e01a      	b.n	8003dd4 <fillThrustersRequest+0xc8>
    }
    else if(velocity < 0) {
 8003d9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	da16      	bge.n	8003dd4 <fillThrustersRequest+0xc8>
    	velocity = (int16_t) ((float) (velocity) * rThrusters[thruster].kBackward);
 8003da6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003daa:	ee07 3a90 	vmov	s15, r3
 8003dae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	4911      	ldr	r1, [pc, #68]	; (8003dfc <fillThrustersRequest+0xf0>)
 8003db6:	4613      	mov	r3, r2
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	4413      	add	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	440b      	add	r3, r1
 8003dc0:	3310      	adds	r3, #16
 8003dc2:	edd3 7a00 	vldr	s15, [r3]
 8003dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dce:	ee17 3a90 	vmov	r3, s15
 8003dd2:	81fb      	strh	r3, [r7, #14]
//    	velocity = rThrusters[thruster].sForward;
//    }
//    else if(velocity < -rThrusters[thruster].sBackward) {
//    	velocity = -rThrusters[thruster].sBackward;
//    }
    res.velocity = velocity;
 8003dd4:	89fb      	ldrh	r3, [r7, #14]
 8003dd6:	b25b      	sxtb	r3, r3
 8003dd8:	72fb      	strb	r3, [r7, #11]

    memcpy((void*)buf, (void*)&res, THRUSTERS_REQUEST_LENGTH);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	f107 0308 	add.w	r3, r7, #8
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	6010      	str	r0, [r2, #0]
 8003de6:	791b      	ldrb	r3, [r3, #4]
 8003de8:	7113      	strb	r3, [r2, #4]
    AddChecksumm8bVma(buf, THRUSTERS_REQUEST_LENGTH);
 8003dea:	2105      	movs	r1, #5
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7fd f9e3 	bl	80011b8 <AddChecksumm8bVma>
}
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	200015c4 	.word	0x200015c4

08003e00 <fillThrustersResponse>:

void fillThrustersResponse(uint8_t *buf, uint8_t thruster)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	70fb      	strb	r3, [r7, #3]
	//TODO errors parsing! and what is all this new stuff means
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 8003e0c:	2109      	movs	r1, #9
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fd f9a5 	bl	800115e <IsChecksumm8bCorrectVma>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d01f      	beq.n	8003e5a <fillThrustersResponse+0x5a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d01b      	beq.n	8003e5a <fillThrustersResponse+0x5a>
    	struct thrustersResponse_s res;
    	memcpy((void*)&res, (void*)buf, THRUSTERS_RESPONSE_LENGTH);
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	f107 030c 	add.w	r3, r7, #12
 8003e28:	6810      	ldr	r0, [r2, #0]
 8003e2a:	6851      	ldr	r1, [r2, #4]
 8003e2c:	c303      	stmia	r3!, {r0, r1}
 8003e2e:	7a12      	ldrb	r2, [r2, #8]
 8003e30:	701a      	strb	r2, [r3, #0]

        rThrusters[thruster].current = res.current;
 8003e32:	78fa      	ldrb	r2, [r7, #3]
 8003e34:	8a38      	ldrh	r0, [r7, #16]
 8003e36:	490e      	ldr	r1, [pc, #56]	; (8003e70 <fillThrustersResponse+0x70>)
 8003e38:	4613      	mov	r3, r2
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	4413      	add	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	440b      	add	r3, r1
 8003e42:	3304      	adds	r3, #4
 8003e44:	4602      	mov	r2, r0
 8003e46:	801a      	strh	r2, [r3, #0]

        ++uartBus[THRUSTERS_UART].successRxCounter;
 8003e48:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <fillThrustersResponse+0x74>)
 8003e4a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003e4e:	3301      	adds	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <fillThrustersResponse+0x74>)
 8003e54:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 8003e58:	e005      	b.n	8003e66 <fillThrustersResponse+0x66>
    }
    else {
    	++uartBus[THRUSTERS_UART].brokenRxCounter;
 8003e5a:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <fillThrustersResponse+0x74>)
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5e:	3301      	adds	r3, #1
 8003e60:	4a04      	ldr	r2, [pc, #16]	; (8003e74 <fillThrustersResponse+0x74>)
 8003e62:	6453      	str	r3, [r2, #68]	; 0x44
    }
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	200015c4 	.word	0x200015c4
 8003e74:	200000ec 	.word	0x200000ec

08003e78 <formThrustVectors>:

void formThrustVectors()
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af00      	add	r7, sp, #0
	float velocity[THRUSTERS_NUMBER];
	for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e84:	e00d      	b.n	8003ea2 <formThrustVectors+0x2a>
		velocity[i] = 0;
 8003e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	3328      	adds	r3, #40	; 0x28
 8003e8e:	443b      	add	r3, r7
 8003e90:	3b24      	subs	r3, #36	; 0x24
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8003e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ea6:	2b07      	cmp	r3, #7
 8003ea8:	d9ed      	bls.n	8003e86 <formThrustVectors+0xe>
	}
	// March thrusters1
	addMarchToSumm(velocity);
 8003eaa:	1d3b      	adds	r3, r7, #4
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 f841 	bl	8003f34 <addMarchToSumm>
	// Lag Thrusters
	addYawToSumm(velocity);
 8003eb2:	1d3b      	adds	r3, r7, #4
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 f8ed 	bl	8004094 <addYawToSumm>
	addLagToSumm(velocity);
 8003eba:	1d3b      	adds	r3, r7, #4
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 f87b 	bl	8003fb8 <addLagToSumm>
	// Two vertical thrusters
	addDepthToSumm(velocity);
 8003ec2:	1d3b      	adds	r3, r7, #4
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 f8af 	bl	8004028 <addDepthToSumm>
	addRollToSumm(velocity);
 8003eca:	1d3b      	adds	r3, r7, #4
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 f919 	bl	8004104 <addRollToSumm>
	// One vertical corrective thruster
	addPitchToSumm(velocity);
 8003ed2:	1d3b      	adds	r3, r7, #4
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 f943 	bl	8004160 <addPitchToSumm>

	for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i) {
 8003eda:	2300      	movs	r3, #0
 8003edc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003ee0:	e01d      	b.n	8003f1e <formThrustVectors+0xa6>
		rThrusters[i].desiredSpeed = resizeFloatToUint8(velocity[i]);
 8003ee2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	3328      	adds	r3, #40	; 0x28
 8003eea:	443b      	add	r3, r7
 8003eec:	3b24      	subs	r3, #36	; 0x24
 8003eee:	edd3 7a00 	vldr	s15, [r3]
 8003ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ef6:	f000 f9a5 	bl	8004244 <resizeFloatToUint8>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003f00:	b258      	sxtb	r0, r3
 8003f02:	490b      	ldr	r1, [pc, #44]	; (8003f30 <formThrustVectors+0xb8>)
 8003f04:	4613      	mov	r3, r2
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	4413      	add	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	440b      	add	r3, r1
 8003f0e:	3302      	adds	r3, #2
 8003f10:	4602      	mov	r2, r0
 8003f12:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i) {
 8003f14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f18:	3301      	adds	r3, #1
 8003f1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003f1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f22:	2b07      	cmp	r3, #7
 8003f24:	d9dd      	bls.n	8003ee2 <formThrustVectors+0x6a>
	}
}
 8003f26:	bf00      	nop
 8003f28:	bf00      	nop
 8003f2a:	3728      	adds	r7, #40	; 0x28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	200015c4 	.word	0x200015c4

08003f34 <addMarchToSumm>:

void addMarchToSumm(float *velocity)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
	float value = 0;
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_MARCH].enable) {
 8003f42:	4b1a      	ldr	r3, [pc, #104]	; (8003fac <addMarchToSumm+0x78>)
 8003f44:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d004      	beq.n	8003f56 <addMarchToSumm+0x22>
		value = rStabState[STAB_MARCH].outputSignal;
 8003f4c:	4b18      	ldr	r3, [pc, #96]	; (8003fb0 <addMarchToSumm+0x7c>)
 8003f4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	e002      	b.n	8003f5c <addMarchToSumm+0x28>
	}
	else {
		value = rJoySpeed.march;
 8003f56:	4b17      	ldr	r3, [pc, #92]	; (8003fb4 <addMarchToSumm+0x80>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60fb      	str	r3, [r7, #12]
	}
	// March contour summ
	velocity[MarshLEFT] += value;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	ed93 7a00 	vldr	s14, [r3]
 8003f62:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	edc3 7a00 	vstr	s15, [r3]
	velocity[MarshRIGHT] += value;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3304      	adds	r3, #4
 8003f74:	ed93 7a00 	vldr	s14, [r3]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f84:	edc3 7a00 	vstr	s15, [r3]
	velocity[MarshDown] += value;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	331c      	adds	r3, #28
 8003f8c:	ed93 7a00 	vldr	s14, [r3]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	331c      	adds	r3, #28
 8003f94:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f9c:	edc3 7a00 	vstr	s15, [r3]
//		}
//		else if(velocity[i] < rStabConstants[STAB_MARCH].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_MARCH].sOutSummatorMin;
//		}
//	}
}
 8003fa0:	bf00      	nop
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	20001748 	.word	0x20001748
 8003fb0:	200018f8 	.word	0x200018f8
 8003fb4:	200016f0 	.word	0x200016f0

08003fb8 <addLagToSumm>:

void addLagToSumm(float *velocity)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
	float value = 0;
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_LAG].enable) {
 8003fc6:	4b15      	ldr	r3, [pc, #84]	; (800401c <addLagToSumm+0x64>)
 8003fc8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d004      	beq.n	8003fda <addLagToSumm+0x22>
		value = rStabState[STAB_LAG].outputSignal;
 8003fd0:	4b13      	ldr	r3, [pc, #76]	; (8004020 <addLagToSumm+0x68>)
 8003fd2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	e002      	b.n	8003fe0 <addLagToSumm+0x28>
	}
	else {
		value = rJoySpeed.lag;
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <addLagToSumm+0x6c>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	60fb      	str	r3, [r7, #12]
	}
	// Lag contour summ
	velocity[Lag1st] += value;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3314      	adds	r3, #20
 8003fe4:	ed93 7a00 	vldr	s14, [r3]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3314      	adds	r3, #20
 8003fec:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ff4:	edc3 7a00 	vstr	s15, [r3]
	velocity[Lag2nd] += value;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3318      	adds	r3, #24
 8003ffc:	ed93 7a00 	vldr	s14, [r3]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3318      	adds	r3, #24
 8004004:	edd7 7a03 	vldr	s15, [r7, #12]
 8004008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800400c:	edc3 7a00 	vstr	s15, [r3]
//		}
//		else if(velocity[i] < rStabConstants[STAB_LAG].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_LAG].sOutSummatorMin;
//		}
//	}
}
 8004010:	bf00      	nop
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	20001748 	.word	0x20001748
 8004020:	200018f8 	.word	0x200018f8
 8004024:	200016f0 	.word	0x200016f0

08004028 <addDepthToSumm>:

void addDepthToSumm(float *velocity)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
	float value = 0;
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_DEPTH].enable) {
 8004036:	4b14      	ldr	r3, [pc, #80]	; (8004088 <addDepthToSumm+0x60>)
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <addDepthToSumm+0x1e>
		value = rStabState[STAB_DEPTH].outputSignal;
 800403e:	4b13      	ldr	r3, [pc, #76]	; (800408c <addDepthToSumm+0x64>)
 8004040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	e002      	b.n	800404c <addDepthToSumm+0x24>
	}
	else {
		value = rJoySpeed.depth;
 8004046:	4b12      	ldr	r3, [pc, #72]	; (8004090 <addDepthToSumm+0x68>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	60fb      	str	r3, [r7, #12]
	}
	// Depth contour summ
	//velocity[VertBACK] -= value;
	velocity[VertLEFT] -= value;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3308      	adds	r3, #8
 8004050:	ed93 7a00 	vldr	s14, [r3]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3308      	adds	r3, #8
 8004058:	edd7 7a03 	vldr	s15, [r7, #12]
 800405c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004060:	edc3 7a00 	vstr	s15, [r3]
	velocity[VertRIGHT] -= value;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	330c      	adds	r3, #12
 8004068:	ed93 7a00 	vldr	s14, [r3]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	330c      	adds	r3, #12
 8004070:	edd7 7a03 	vldr	s15, [r7, #12]
 8004074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004078:	edc3 7a00 	vstr	s15, [r3]
//		}
//		else if(velocity[i] < rStabConstants[STAB_DEPTH].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_DEPTH].sOutSummatorMin;
//		}
//	}
}
 800407c:	bf00      	nop
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	20001748 	.word	0x20001748
 800408c:	200018f8 	.word	0x200018f8
 8004090:	200016f0 	.word	0x200016f0

08004094 <addYawToSumm>:

void addYawToSumm(float *velocity)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
	float value = 0;
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_YAW].enable) {
 80040a2:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <addYawToSumm+0x64>)
 80040a4:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d004      	beq.n	80040b6 <addYawToSumm+0x22>
		value = rStabState[STAB_YAW].outputSignal;
 80040ac:	4b13      	ldr	r3, [pc, #76]	; (80040fc <addYawToSumm+0x68>)
 80040ae:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	e002      	b.n	80040bc <addYawToSumm+0x28>
	}
	else {
		value = rJoySpeed.yaw;
 80040b6:	4b12      	ldr	r3, [pc, #72]	; (8004100 <addYawToSumm+0x6c>)
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	60fb      	str	r3, [r7, #12]
	}
	// Yaw contour summ
//	velocity[MarshLEFT] += value;
//	velocity[MarshRIGHT] -= value;
	velocity[Lag1st] += value;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3314      	adds	r3, #20
 80040c0:	ed93 7a00 	vldr	s14, [r3]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3314      	adds	r3, #20
 80040c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80040cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040d0:	edc3 7a00 	vstr	s15, [r3]
	velocity[Lag2nd] -= value;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3318      	adds	r3, #24
 80040d8:	ed93 7a00 	vldr	s14, [r3]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3318      	adds	r3, #24
 80040e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80040e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040e8:	edc3 7a00 	vstr	s15, [r3]
//		}
//		else if(velocity[i] < rStabConstants[STAB_YAW].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_YAW].sOutSummatorMin;
//		}
//	}
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	20001748 	.word	0x20001748
 80040fc:	200018f8 	.word	0x200018f8
 8004100:	200016f0 	.word	0x200016f0

08004104 <addRollToSumm>:

void addRollToSumm(float *velocity)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
	float value = 0;
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_ROLL].enable) {
 8004112:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <addRollToSumm+0x4c>)
 8004114:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8004118:	2b00      	cmp	r3, #0
 800411a:	d004      	beq.n	8004126 <addRollToSumm+0x22>
		value = rStabState[STAB_ROLL].outputSignal;
 800411c:	4b0d      	ldr	r3, [pc, #52]	; (8004154 <addRollToSumm+0x50>)
 800411e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	e002      	b.n	800412c <addRollToSumm+0x28>
	}
	else {
		value = rJoySpeed.roll;
 8004126:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <addRollToSumm+0x54>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	60fb      	str	r3, [r7, #12]
	}
	// Yaw contour summ
	velocity[VertBACK] += value;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3310      	adds	r3, #16
 8004130:	ed93 7a00 	vldr	s14, [r3]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3310      	adds	r3, #16
 8004138:	edd7 7a03 	vldr	s15, [r7, #12]
 800413c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004140:	edc3 7a00 	vstr	s15, [r3]
//		}
//		else if(velocity[i] < rStabConstants[STAB_ROLL].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_ROLL].sOutSummatorMin;
//		}
//	}
}
 8004144:	bf00      	nop
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	20001748 	.word	0x20001748
 8004154:	200018f8 	.word	0x200018f8
 8004158:	200016f0 	.word	0x200016f0
 800415c:	00000000 	.word	0x00000000

08004160 <addPitchToSumm>:

void addPitchToSumm(float *velocity)
{
 8004160:	b5b0      	push	{r4, r5, r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
	float value = 0;
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_PITCH].enable) {
 800416e:	4b32      	ldr	r3, [pc, #200]	; (8004238 <addPitchToSumm+0xd8>)
 8004170:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8004174:	2b00      	cmp	r3, #0
 8004176:	d004      	beq.n	8004182 <addPitchToSumm+0x22>
		value = rStabState[STAB_PITCH].outputSignal;
 8004178:	4b30      	ldr	r3, [pc, #192]	; (800423c <addPitchToSumm+0xdc>)
 800417a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	e002      	b.n	8004188 <addPitchToSumm+0x28>
	}
	else {
		value = rJoySpeed.pitch;
 8004182:	4b2f      	ldr	r3, [pc, #188]	; (8004240 <addPitchToSumm+0xe0>)
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	60fb      	str	r3, [r7, #12]
	}
	velocity[VertBACK] += value;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3310      	adds	r3, #16
 800418c:	ed93 7a00 	vldr	s14, [r3]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3310      	adds	r3, #16
 8004194:	edd7 7a03 	vldr	s15, [r7, #12]
 8004198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800419c:	edc3 7a00 	vstr	s15, [r3]

	velocity[VertLEFT] -= 0.4*value;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3308      	adds	r3, #8
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fc f976 	bl	8000498 <__aeabi_f2d>
 80041ac:	4604      	mov	r4, r0
 80041ae:	460d      	mov	r5, r1
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f7fc f971 	bl	8000498 <__aeabi_f2d>
 80041b6:	a31e      	add	r3, pc, #120	; (adr r3, 8004230 <addPitchToSumm+0xd0>)
 80041b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041bc:	f7fc f9c4 	bl	8000548 <__aeabi_dmul>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4620      	mov	r0, r4
 80041c6:	4629      	mov	r1, r5
 80041c8:	f7fc f806 	bl	80001d8 <__aeabi_dsub>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4610      	mov	r0, r2
 80041d2:	4619      	mov	r1, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f103 0408 	add.w	r4, r3, #8
 80041da:	f7fc fc77 	bl	8000acc <__aeabi_d2f>
 80041de:	4603      	mov	r3, r0
 80041e0:	6023      	str	r3, [r4, #0]
	velocity[VertRIGHT] -= 0.4*value;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	330c      	adds	r3, #12
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fc f955 	bl	8000498 <__aeabi_f2d>
 80041ee:	4604      	mov	r4, r0
 80041f0:	460d      	mov	r5, r1
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f7fc f950 	bl	8000498 <__aeabi_f2d>
 80041f8:	a30d      	add	r3, pc, #52	; (adr r3, 8004230 <addPitchToSumm+0xd0>)
 80041fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fe:	f7fc f9a3 	bl	8000548 <__aeabi_dmul>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4620      	mov	r0, r4
 8004208:	4629      	mov	r1, r5
 800420a:	f7fb ffe5 	bl	80001d8 <__aeabi_dsub>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4610      	mov	r0, r2
 8004214:	4619      	mov	r1, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f103 040c 	add.w	r4, r3, #12
 800421c:	f7fc fc56 	bl	8000acc <__aeabi_d2f>
 8004220:	4603      	mov	r3, r0
 8004222:	6023      	str	r3, [r4, #0]
//		}
//		else if(velocity[i] < rStabConstants[STAB_PITCH].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_PITCH].sOutSummatorMin;
//		}
//	}
}
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bdb0      	pop	{r4, r5, r7, pc}
 800422c:	f3af 8000 	nop.w
 8004230:	9999999a 	.word	0x9999999a
 8004234:	3fd99999 	.word	0x3fd99999
 8004238:	20001748 	.word	0x20001748
 800423c:	200018f8 	.word	0x200018f8
 8004240:	200016f0 	.word	0x200016f0

08004244 <resizeFloatToUint8>:

uint8_t resizeFloatToUint8(float input)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	ed87 0a01 	vstr	s0, [r7, #4]
	int32_t cast = (int32_t) input;
 800424e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004252:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004256:	ee17 3a90 	vmov	r3, s15
 800425a:	60fb      	str	r3, [r7, #12]
	cast = cast / 0xFF;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4a0e      	ldr	r2, [pc, #56]	; (8004298 <resizeFloatToUint8+0x54>)
 8004260:	fb82 1203 	smull	r1, r2, r2, r3
 8004264:	441a      	add	r2, r3
 8004266:	11d2      	asrs	r2, r2, #7
 8004268:	17db      	asrs	r3, r3, #31
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	60fb      	str	r3, [r7, #12]
	if (cast > 127) {
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b7f      	cmp	r3, #127	; 0x7f
 8004272:	dd02      	ble.n	800427a <resizeFloatToUint8+0x36>
		cast = 127;
 8004274:	237f      	movs	r3, #127	; 0x7f
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	e006      	b.n	8004288 <resizeFloatToUint8+0x44>
	}
	else if(cast < -127) {
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8004280:	da02      	bge.n	8004288 <resizeFloatToUint8+0x44>
		cast = -127;
 8004282:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8004286:	60fb      	str	r3, [r7, #12]
	}
	return (int8_t) cast;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	b2db      	uxtb	r3, r3
}
 800428c:	4618      	mov	r0, r3
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	80808081 	.word	0x80808081

0800429c <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042a2:	463b      	mov	r3, r7
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80042aa:	4b14      	ldr	r3, [pc, #80]	; (80042fc <MX_TIM7_Init+0x60>)
 80042ac:	4a14      	ldr	r2, [pc, #80]	; (8004300 <MX_TIM7_Init+0x64>)
 80042ae:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80042b0:	4b12      	ldr	r3, [pc, #72]	; (80042fc <MX_TIM7_Init+0x60>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042b6:	4b11      	ldr	r3, [pc, #68]	; (80042fc <MX_TIM7_Init+0x60>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 80042bc:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <MX_TIM7_Init+0x60>)
 80042be:	2200      	movs	r2, #0
 80042c0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042c2:	4b0e      	ldr	r3, [pc, #56]	; (80042fc <MX_TIM7_Init+0x60>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80042c8:	480c      	ldr	r0, [pc, #48]	; (80042fc <MX_TIM7_Init+0x60>)
 80042ca:	f004 fa4b 	bl	8008764 <HAL_TIM_Base_Init>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80042d4:	f7fe fff5 	bl	80032c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042d8:	2300      	movs	r3, #0
 80042da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042dc:	2300      	movs	r3, #0
 80042de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80042e0:	463b      	mov	r3, r7
 80042e2:	4619      	mov	r1, r3
 80042e4:	4805      	ldr	r0, [pc, #20]	; (80042fc <MX_TIM7_Init+0x60>)
 80042e6:	f004 fccd 	bl	8008c84 <HAL_TIMEx_MasterConfigSynchronization>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80042f0:	f7fe ffe7 	bl	80032c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80042f4:	bf00      	nop
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	20001c64 	.word	0x20001c64
 8004300:	40001400 	.word	0x40001400

08004304 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a0b      	ldr	r2, [pc, #44]	; (8004340 <HAL_TIM_Base_MspInit+0x3c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d10d      	bne.n	8004332 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004316:	2300      	movs	r3, #0
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <HAL_TIM_Base_MspInit+0x40>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	4a09      	ldr	r2, [pc, #36]	; (8004344 <HAL_TIM_Base_MspInit+0x40>)
 8004320:	f043 0320 	orr.w	r3, r3, #32
 8004324:	6413      	str	r3, [r2, #64]	; 0x40
 8004326:	4b07      	ldr	r3, [pc, #28]	; (8004344 <HAL_TIM_Base_MspInit+0x40>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004332:	bf00      	nop
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40001400 	.word	0x40001400
 8004344:	40023800 	.word	0x40023800

08004348 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800434c:	4b11      	ldr	r3, [pc, #68]	; (8004394 <MX_USART1_UART_Init+0x4c>)
 800434e:	4a12      	ldr	r2, [pc, #72]	; (8004398 <MX_USART1_UART_Init+0x50>)
 8004350:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004352:	4b10      	ldr	r3, [pc, #64]	; (8004394 <MX_USART1_UART_Init+0x4c>)
 8004354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004358:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800435a:	4b0e      	ldr	r3, [pc, #56]	; (8004394 <MX_USART1_UART_Init+0x4c>)
 800435c:	2200      	movs	r2, #0
 800435e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004360:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <MX_USART1_UART_Init+0x4c>)
 8004362:	2200      	movs	r2, #0
 8004364:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004366:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <MX_USART1_UART_Init+0x4c>)
 8004368:	2200      	movs	r2, #0
 800436a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800436c:	4b09      	ldr	r3, [pc, #36]	; (8004394 <MX_USART1_UART_Init+0x4c>)
 800436e:	220c      	movs	r2, #12
 8004370:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004372:	4b08      	ldr	r3, [pc, #32]	; (8004394 <MX_USART1_UART_Init+0x4c>)
 8004374:	2200      	movs	r2, #0
 8004376:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004378:	4b06      	ldr	r3, [pc, #24]	; (8004394 <MX_USART1_UART_Init+0x4c>)
 800437a:	2200      	movs	r2, #0
 800437c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800437e:	4805      	ldr	r0, [pc, #20]	; (8004394 <MX_USART1_UART_Init+0x4c>)
 8004380:	f004 fd10 	bl	8008da4 <HAL_UART_Init>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800438a:	f7fe ff9a 	bl	80032c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800438e:	bf00      	nop
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20001cac 	.word	0x20001cac
 8004398:	40011000 	.word	0x40011000

0800439c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80043a0:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <MX_USART2_UART_Init+0x4c>)
 80043a2:	4a12      	ldr	r2, [pc, #72]	; (80043ec <MX_USART2_UART_Init+0x50>)
 80043a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80043a6:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <MX_USART2_UART_Init+0x4c>)
 80043a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80043ae:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <MX_USART2_UART_Init+0x4c>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80043b4:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <MX_USART2_UART_Init+0x4c>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80043ba:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <MX_USART2_UART_Init+0x4c>)
 80043bc:	2200      	movs	r2, #0
 80043be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <MX_USART2_UART_Init+0x4c>)
 80043c2:	220c      	movs	r2, #12
 80043c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043c6:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <MX_USART2_UART_Init+0x4c>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <MX_USART2_UART_Init+0x4c>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80043d2:	4805      	ldr	r0, [pc, #20]	; (80043e8 <MX_USART2_UART_Init+0x4c>)
 80043d4:	f004 fce6 	bl	8008da4 <HAL_UART_Init>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80043de:	f7fe ff70 	bl	80032c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80043e2:	bf00      	nop
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	20001cf0 	.word	0x20001cf0
 80043ec:	40004400 	.word	0x40004400

080043f0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80043f4:	4b11      	ldr	r3, [pc, #68]	; (800443c <MX_USART3_UART_Init+0x4c>)
 80043f6:	4a12      	ldr	r2, [pc, #72]	; (8004440 <MX_USART3_UART_Init+0x50>)
 80043f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80043fa:	4b10      	ldr	r3, [pc, #64]	; (800443c <MX_USART3_UART_Init+0x4c>)
 80043fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004400:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004402:	4b0e      	ldr	r3, [pc, #56]	; (800443c <MX_USART3_UART_Init+0x4c>)
 8004404:	2200      	movs	r2, #0
 8004406:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004408:	4b0c      	ldr	r3, [pc, #48]	; (800443c <MX_USART3_UART_Init+0x4c>)
 800440a:	2200      	movs	r2, #0
 800440c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800440e:	4b0b      	ldr	r3, [pc, #44]	; (800443c <MX_USART3_UART_Init+0x4c>)
 8004410:	2200      	movs	r2, #0
 8004412:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004414:	4b09      	ldr	r3, [pc, #36]	; (800443c <MX_USART3_UART_Init+0x4c>)
 8004416:	220c      	movs	r2, #12
 8004418:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800441a:	4b08      	ldr	r3, [pc, #32]	; (800443c <MX_USART3_UART_Init+0x4c>)
 800441c:	2200      	movs	r2, #0
 800441e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004420:	4b06      	ldr	r3, [pc, #24]	; (800443c <MX_USART3_UART_Init+0x4c>)
 8004422:	2200      	movs	r2, #0
 8004424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004426:	4805      	ldr	r0, [pc, #20]	; (800443c <MX_USART3_UART_Init+0x4c>)
 8004428:	f004 fcbc 	bl	8008da4 <HAL_UART_Init>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004432:	f7fe ff46 	bl	80032c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004436:	bf00      	nop
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20001d34 	.word	0x20001d34
 8004440:	40004800 	.word	0x40004800

08004444 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08e      	sub	sp, #56	; 0x38
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800444c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	605a      	str	r2, [r3, #4]
 8004456:	609a      	str	r2, [r3, #8]
 8004458:	60da      	str	r2, [r3, #12]
 800445a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a98      	ldr	r2, [pc, #608]	; (80046c4 <HAL_UART_MspInit+0x280>)
 8004462:	4293      	cmp	r3, r2
 8004464:	f040 8094 	bne.w	8004590 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004468:	2300      	movs	r3, #0
 800446a:	623b      	str	r3, [r7, #32]
 800446c:	4b96      	ldr	r3, [pc, #600]	; (80046c8 <HAL_UART_MspInit+0x284>)
 800446e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004470:	4a95      	ldr	r2, [pc, #596]	; (80046c8 <HAL_UART_MspInit+0x284>)
 8004472:	f043 0310 	orr.w	r3, r3, #16
 8004476:	6453      	str	r3, [r2, #68]	; 0x44
 8004478:	4b93      	ldr	r3, [pc, #588]	; (80046c8 <HAL_UART_MspInit+0x284>)
 800447a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	623b      	str	r3, [r7, #32]
 8004482:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004484:	2300      	movs	r3, #0
 8004486:	61fb      	str	r3, [r7, #28]
 8004488:	4b8f      	ldr	r3, [pc, #572]	; (80046c8 <HAL_UART_MspInit+0x284>)
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	4a8e      	ldr	r2, [pc, #568]	; (80046c8 <HAL_UART_MspInit+0x284>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	6313      	str	r3, [r2, #48]	; 0x30
 8004494:	4b8c      	ldr	r3, [pc, #560]	; (80046c8 <HAL_UART_MspInit+0x284>)
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	61fb      	str	r3, [r7, #28]
 800449e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80044a0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a6:	2302      	movs	r3, #2
 80044a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ae:	2303      	movs	r3, #3
 80044b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80044b2:	2307      	movs	r3, #7
 80044b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044ba:	4619      	mov	r1, r3
 80044bc:	4883      	ldr	r0, [pc, #524]	; (80046cc <HAL_UART_MspInit+0x288>)
 80044be:	f001 fd53 	bl	8005f68 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80044c2:	4b83      	ldr	r3, [pc, #524]	; (80046d0 <HAL_UART_MspInit+0x28c>)
 80044c4:	4a83      	ldr	r2, [pc, #524]	; (80046d4 <HAL_UART_MspInit+0x290>)
 80044c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80044c8:	4b81      	ldr	r3, [pc, #516]	; (80046d0 <HAL_UART_MspInit+0x28c>)
 80044ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044ce:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044d0:	4b7f      	ldr	r3, [pc, #508]	; (80046d0 <HAL_UART_MspInit+0x28c>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044d6:	4b7e      	ldr	r3, [pc, #504]	; (80046d0 <HAL_UART_MspInit+0x28c>)
 80044d8:	2200      	movs	r2, #0
 80044da:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044dc:	4b7c      	ldr	r3, [pc, #496]	; (80046d0 <HAL_UART_MspInit+0x28c>)
 80044de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044e2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044e4:	4b7a      	ldr	r3, [pc, #488]	; (80046d0 <HAL_UART_MspInit+0x28c>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044ea:	4b79      	ldr	r3, [pc, #484]	; (80046d0 <HAL_UART_MspInit+0x28c>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80044f0:	4b77      	ldr	r3, [pc, #476]	; (80046d0 <HAL_UART_MspInit+0x28c>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80044f6:	4b76      	ldr	r3, [pc, #472]	; (80046d0 <HAL_UART_MspInit+0x28c>)
 80044f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044fc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044fe:	4b74      	ldr	r3, [pc, #464]	; (80046d0 <HAL_UART_MspInit+0x28c>)
 8004500:	2200      	movs	r2, #0
 8004502:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004504:	4872      	ldr	r0, [pc, #456]	; (80046d0 <HAL_UART_MspInit+0x28c>)
 8004506:	f000 fe47 	bl	8005198 <HAL_DMA_Init>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8004510:	f7fe fed7 	bl	80032c2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a6e      	ldr	r2, [pc, #440]	; (80046d0 <HAL_UART_MspInit+0x28c>)
 8004518:	639a      	str	r2, [r3, #56]	; 0x38
 800451a:	4a6d      	ldr	r2, [pc, #436]	; (80046d0 <HAL_UART_MspInit+0x28c>)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8004520:	4b6d      	ldr	r3, [pc, #436]	; (80046d8 <HAL_UART_MspInit+0x294>)
 8004522:	4a6e      	ldr	r2, [pc, #440]	; (80046dc <HAL_UART_MspInit+0x298>)
 8004524:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004526:	4b6c      	ldr	r3, [pc, #432]	; (80046d8 <HAL_UART_MspInit+0x294>)
 8004528:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800452c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800452e:	4b6a      	ldr	r3, [pc, #424]	; (80046d8 <HAL_UART_MspInit+0x294>)
 8004530:	2240      	movs	r2, #64	; 0x40
 8004532:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004534:	4b68      	ldr	r3, [pc, #416]	; (80046d8 <HAL_UART_MspInit+0x294>)
 8004536:	2200      	movs	r2, #0
 8004538:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800453a:	4b67      	ldr	r3, [pc, #412]	; (80046d8 <HAL_UART_MspInit+0x294>)
 800453c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004540:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004542:	4b65      	ldr	r3, [pc, #404]	; (80046d8 <HAL_UART_MspInit+0x294>)
 8004544:	2200      	movs	r2, #0
 8004546:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004548:	4b63      	ldr	r3, [pc, #396]	; (80046d8 <HAL_UART_MspInit+0x294>)
 800454a:	2200      	movs	r2, #0
 800454c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800454e:	4b62      	ldr	r3, [pc, #392]	; (80046d8 <HAL_UART_MspInit+0x294>)
 8004550:	2200      	movs	r2, #0
 8004552:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004554:	4b60      	ldr	r3, [pc, #384]	; (80046d8 <HAL_UART_MspInit+0x294>)
 8004556:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800455a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800455c:	4b5e      	ldr	r3, [pc, #376]	; (80046d8 <HAL_UART_MspInit+0x294>)
 800455e:	2200      	movs	r2, #0
 8004560:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004562:	485d      	ldr	r0, [pc, #372]	; (80046d8 <HAL_UART_MspInit+0x294>)
 8004564:	f000 fe18 	bl	8005198 <HAL_DMA_Init>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800456e:	f7fe fea8 	bl	80032c2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a58      	ldr	r2, [pc, #352]	; (80046d8 <HAL_UART_MspInit+0x294>)
 8004576:	635a      	str	r2, [r3, #52]	; 0x34
 8004578:	4a57      	ldr	r2, [pc, #348]	; (80046d8 <HAL_UART_MspInit+0x294>)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800457e:	2200      	movs	r2, #0
 8004580:	2105      	movs	r1, #5
 8004582:	2025      	movs	r0, #37	; 0x25
 8004584:	f000 fdde 	bl	8005144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004588:	2025      	movs	r0, #37	; 0x25
 800458a:	f000 fdf7 	bl	800517c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800458e:	e14a      	b.n	8004826 <HAL_UART_MspInit+0x3e2>
  else if(uartHandle->Instance==USART2)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a52      	ldr	r2, [pc, #328]	; (80046e0 <HAL_UART_MspInit+0x29c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	f040 80ac 	bne.w	80046f4 <HAL_UART_MspInit+0x2b0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800459c:	2300      	movs	r3, #0
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	4b49      	ldr	r3, [pc, #292]	; (80046c8 <HAL_UART_MspInit+0x284>)
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	4a48      	ldr	r2, [pc, #288]	; (80046c8 <HAL_UART_MspInit+0x284>)
 80045a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045aa:	6413      	str	r3, [r2, #64]	; 0x40
 80045ac:	4b46      	ldr	r3, [pc, #280]	; (80046c8 <HAL_UART_MspInit+0x284>)
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b4:	61bb      	str	r3, [r7, #24]
 80045b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	4b42      	ldr	r3, [pc, #264]	; (80046c8 <HAL_UART_MspInit+0x284>)
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	4a41      	ldr	r2, [pc, #260]	; (80046c8 <HAL_UART_MspInit+0x284>)
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	6313      	str	r3, [r2, #48]	; 0x30
 80045c8:	4b3f      	ldr	r3, [pc, #252]	; (80046c8 <HAL_UART_MspInit+0x284>)
 80045ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80045d4:	230c      	movs	r3, #12
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d8:	2302      	movs	r3, #2
 80045da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045e0:	2303      	movs	r3, #3
 80045e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80045e4:	2307      	movs	r3, #7
 80045e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045ec:	4619      	mov	r1, r3
 80045ee:	4837      	ldr	r0, [pc, #220]	; (80046cc <HAL_UART_MspInit+0x288>)
 80045f0:	f001 fcba 	bl	8005f68 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80045f4:	4b3b      	ldr	r3, [pc, #236]	; (80046e4 <HAL_UART_MspInit+0x2a0>)
 80045f6:	4a3c      	ldr	r2, [pc, #240]	; (80046e8 <HAL_UART_MspInit+0x2a4>)
 80045f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80045fa:	4b3a      	ldr	r3, [pc, #232]	; (80046e4 <HAL_UART_MspInit+0x2a0>)
 80045fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004600:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004602:	4b38      	ldr	r3, [pc, #224]	; (80046e4 <HAL_UART_MspInit+0x2a0>)
 8004604:	2200      	movs	r2, #0
 8004606:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004608:	4b36      	ldr	r3, [pc, #216]	; (80046e4 <HAL_UART_MspInit+0x2a0>)
 800460a:	2200      	movs	r2, #0
 800460c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800460e:	4b35      	ldr	r3, [pc, #212]	; (80046e4 <HAL_UART_MspInit+0x2a0>)
 8004610:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004614:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004616:	4b33      	ldr	r3, [pc, #204]	; (80046e4 <HAL_UART_MspInit+0x2a0>)
 8004618:	2200      	movs	r2, #0
 800461a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800461c:	4b31      	ldr	r3, [pc, #196]	; (80046e4 <HAL_UART_MspInit+0x2a0>)
 800461e:	2200      	movs	r2, #0
 8004620:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004622:	4b30      	ldr	r3, [pc, #192]	; (80046e4 <HAL_UART_MspInit+0x2a0>)
 8004624:	2200      	movs	r2, #0
 8004626:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004628:	4b2e      	ldr	r3, [pc, #184]	; (80046e4 <HAL_UART_MspInit+0x2a0>)
 800462a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800462e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004630:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <HAL_UART_MspInit+0x2a0>)
 8004632:	2200      	movs	r2, #0
 8004634:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004636:	482b      	ldr	r0, [pc, #172]	; (80046e4 <HAL_UART_MspInit+0x2a0>)
 8004638:	f000 fdae 	bl	8005198 <HAL_DMA_Init>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_UART_MspInit+0x202>
      Error_Handler();
 8004642:	f7fe fe3e 	bl	80032c2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a26      	ldr	r2, [pc, #152]	; (80046e4 <HAL_UART_MspInit+0x2a0>)
 800464a:	639a      	str	r2, [r3, #56]	; 0x38
 800464c:	4a25      	ldr	r2, [pc, #148]	; (80046e4 <HAL_UART_MspInit+0x2a0>)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004652:	4b26      	ldr	r3, [pc, #152]	; (80046ec <HAL_UART_MspInit+0x2a8>)
 8004654:	4a26      	ldr	r2, [pc, #152]	; (80046f0 <HAL_UART_MspInit+0x2ac>)
 8004656:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004658:	4b24      	ldr	r3, [pc, #144]	; (80046ec <HAL_UART_MspInit+0x2a8>)
 800465a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800465e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004660:	4b22      	ldr	r3, [pc, #136]	; (80046ec <HAL_UART_MspInit+0x2a8>)
 8004662:	2240      	movs	r2, #64	; 0x40
 8004664:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004666:	4b21      	ldr	r3, [pc, #132]	; (80046ec <HAL_UART_MspInit+0x2a8>)
 8004668:	2200      	movs	r2, #0
 800466a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800466c:	4b1f      	ldr	r3, [pc, #124]	; (80046ec <HAL_UART_MspInit+0x2a8>)
 800466e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004672:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004674:	4b1d      	ldr	r3, [pc, #116]	; (80046ec <HAL_UART_MspInit+0x2a8>)
 8004676:	2200      	movs	r2, #0
 8004678:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800467a:	4b1c      	ldr	r3, [pc, #112]	; (80046ec <HAL_UART_MspInit+0x2a8>)
 800467c:	2200      	movs	r2, #0
 800467e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004680:	4b1a      	ldr	r3, [pc, #104]	; (80046ec <HAL_UART_MspInit+0x2a8>)
 8004682:	2200      	movs	r2, #0
 8004684:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004686:	4b19      	ldr	r3, [pc, #100]	; (80046ec <HAL_UART_MspInit+0x2a8>)
 8004688:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800468c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800468e:	4b17      	ldr	r3, [pc, #92]	; (80046ec <HAL_UART_MspInit+0x2a8>)
 8004690:	2200      	movs	r2, #0
 8004692:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004694:	4815      	ldr	r0, [pc, #84]	; (80046ec <HAL_UART_MspInit+0x2a8>)
 8004696:	f000 fd7f 	bl	8005198 <HAL_DMA_Init>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <HAL_UART_MspInit+0x260>
      Error_Handler();
 80046a0:	f7fe fe0f 	bl	80032c2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a11      	ldr	r2, [pc, #68]	; (80046ec <HAL_UART_MspInit+0x2a8>)
 80046a8:	635a      	str	r2, [r3, #52]	; 0x34
 80046aa:	4a10      	ldr	r2, [pc, #64]	; (80046ec <HAL_UART_MspInit+0x2a8>)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80046b0:	2200      	movs	r2, #0
 80046b2:	2105      	movs	r1, #5
 80046b4:	2026      	movs	r0, #38	; 0x26
 80046b6:	f000 fd45 	bl	8005144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80046ba:	2026      	movs	r0, #38	; 0x26
 80046bc:	f000 fd5e 	bl	800517c <HAL_NVIC_EnableIRQ>
}
 80046c0:	e0b1      	b.n	8004826 <HAL_UART_MspInit+0x3e2>
 80046c2:	bf00      	nop
 80046c4:	40011000 	.word	0x40011000
 80046c8:	40023800 	.word	0x40023800
 80046cc:	40020000 	.word	0x40020000
 80046d0:	20001d78 	.word	0x20001d78
 80046d4:	40026440 	.word	0x40026440
 80046d8:	20001dd8 	.word	0x20001dd8
 80046dc:	400264b8 	.word	0x400264b8
 80046e0:	40004400 	.word	0x40004400
 80046e4:	20001e38 	.word	0x20001e38
 80046e8:	40026088 	.word	0x40026088
 80046ec:	20001e98 	.word	0x20001e98
 80046f0:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a4d      	ldr	r2, [pc, #308]	; (8004830 <HAL_UART_MspInit+0x3ec>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	f040 8093 	bne.w	8004826 <HAL_UART_MspInit+0x3e2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004700:	2300      	movs	r3, #0
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	4b4b      	ldr	r3, [pc, #300]	; (8004834 <HAL_UART_MspInit+0x3f0>)
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	4a4a      	ldr	r2, [pc, #296]	; (8004834 <HAL_UART_MspInit+0x3f0>)
 800470a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800470e:	6413      	str	r3, [r2, #64]	; 0x40
 8004710:	4b48      	ldr	r3, [pc, #288]	; (8004834 <HAL_UART_MspInit+0x3f0>)
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800471c:	2300      	movs	r3, #0
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	4b44      	ldr	r3, [pc, #272]	; (8004834 <HAL_UART_MspInit+0x3f0>)
 8004722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004724:	4a43      	ldr	r2, [pc, #268]	; (8004834 <HAL_UART_MspInit+0x3f0>)
 8004726:	f043 0302 	orr.w	r3, r3, #2
 800472a:	6313      	str	r3, [r2, #48]	; 0x30
 800472c:	4b41      	ldr	r3, [pc, #260]	; (8004834 <HAL_UART_MspInit+0x3f0>)
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004738:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800473e:	2302      	movs	r3, #2
 8004740:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004742:	2300      	movs	r3, #0
 8004744:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004746:	2303      	movs	r3, #3
 8004748:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800474a:	2307      	movs	r3, #7
 800474c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800474e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004752:	4619      	mov	r1, r3
 8004754:	4838      	ldr	r0, [pc, #224]	; (8004838 <HAL_UART_MspInit+0x3f4>)
 8004756:	f001 fc07 	bl	8005f68 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800475a:	4b38      	ldr	r3, [pc, #224]	; (800483c <HAL_UART_MspInit+0x3f8>)
 800475c:	4a38      	ldr	r2, [pc, #224]	; (8004840 <HAL_UART_MspInit+0x3fc>)
 800475e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004760:	4b36      	ldr	r3, [pc, #216]	; (800483c <HAL_UART_MspInit+0x3f8>)
 8004762:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004766:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004768:	4b34      	ldr	r3, [pc, #208]	; (800483c <HAL_UART_MspInit+0x3f8>)
 800476a:	2200      	movs	r2, #0
 800476c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800476e:	4b33      	ldr	r3, [pc, #204]	; (800483c <HAL_UART_MspInit+0x3f8>)
 8004770:	2200      	movs	r2, #0
 8004772:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004774:	4b31      	ldr	r3, [pc, #196]	; (800483c <HAL_UART_MspInit+0x3f8>)
 8004776:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800477a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800477c:	4b2f      	ldr	r3, [pc, #188]	; (800483c <HAL_UART_MspInit+0x3f8>)
 800477e:	2200      	movs	r2, #0
 8004780:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004782:	4b2e      	ldr	r3, [pc, #184]	; (800483c <HAL_UART_MspInit+0x3f8>)
 8004784:	2200      	movs	r2, #0
 8004786:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004788:	4b2c      	ldr	r3, [pc, #176]	; (800483c <HAL_UART_MspInit+0x3f8>)
 800478a:	2200      	movs	r2, #0
 800478c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800478e:	4b2b      	ldr	r3, [pc, #172]	; (800483c <HAL_UART_MspInit+0x3f8>)
 8004790:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004794:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004796:	4b29      	ldr	r3, [pc, #164]	; (800483c <HAL_UART_MspInit+0x3f8>)
 8004798:	2200      	movs	r2, #0
 800479a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800479c:	4827      	ldr	r0, [pc, #156]	; (800483c <HAL_UART_MspInit+0x3f8>)
 800479e:	f000 fcfb 	bl	8005198 <HAL_DMA_Init>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <HAL_UART_MspInit+0x368>
      Error_Handler();
 80047a8:	f7fe fd8b 	bl	80032c2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a23      	ldr	r2, [pc, #140]	; (800483c <HAL_UART_MspInit+0x3f8>)
 80047b0:	639a      	str	r2, [r3, #56]	; 0x38
 80047b2:	4a22      	ldr	r2, [pc, #136]	; (800483c <HAL_UART_MspInit+0x3f8>)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80047b8:	4b22      	ldr	r3, [pc, #136]	; (8004844 <HAL_UART_MspInit+0x400>)
 80047ba:	4a23      	ldr	r2, [pc, #140]	; (8004848 <HAL_UART_MspInit+0x404>)
 80047bc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80047be:	4b21      	ldr	r3, [pc, #132]	; (8004844 <HAL_UART_MspInit+0x400>)
 80047c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047c4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047c6:	4b1f      	ldr	r3, [pc, #124]	; (8004844 <HAL_UART_MspInit+0x400>)
 80047c8:	2240      	movs	r2, #64	; 0x40
 80047ca:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047cc:	4b1d      	ldr	r3, [pc, #116]	; (8004844 <HAL_UART_MspInit+0x400>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047d2:	4b1c      	ldr	r3, [pc, #112]	; (8004844 <HAL_UART_MspInit+0x400>)
 80047d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047d8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047da:	4b1a      	ldr	r3, [pc, #104]	; (8004844 <HAL_UART_MspInit+0x400>)
 80047dc:	2200      	movs	r2, #0
 80047de:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047e0:	4b18      	ldr	r3, [pc, #96]	; (8004844 <HAL_UART_MspInit+0x400>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80047e6:	4b17      	ldr	r3, [pc, #92]	; (8004844 <HAL_UART_MspInit+0x400>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80047ec:	4b15      	ldr	r3, [pc, #84]	; (8004844 <HAL_UART_MspInit+0x400>)
 80047ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047f2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047f4:	4b13      	ldr	r3, [pc, #76]	; (8004844 <HAL_UART_MspInit+0x400>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80047fa:	4812      	ldr	r0, [pc, #72]	; (8004844 <HAL_UART_MspInit+0x400>)
 80047fc:	f000 fccc 	bl	8005198 <HAL_DMA_Init>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_UART_MspInit+0x3c6>
      Error_Handler();
 8004806:	f7fe fd5c 	bl	80032c2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a0d      	ldr	r2, [pc, #52]	; (8004844 <HAL_UART_MspInit+0x400>)
 800480e:	635a      	str	r2, [r3, #52]	; 0x34
 8004810:	4a0c      	ldr	r2, [pc, #48]	; (8004844 <HAL_UART_MspInit+0x400>)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004816:	2200      	movs	r2, #0
 8004818:	2105      	movs	r1, #5
 800481a:	2027      	movs	r0, #39	; 0x27
 800481c:	f000 fc92 	bl	8005144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004820:	2027      	movs	r0, #39	; 0x27
 8004822:	f000 fcab 	bl	800517c <HAL_NVIC_EnableIRQ>
}
 8004826:	bf00      	nop
 8004828:	3738      	adds	r7, #56	; 0x38
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40004800 	.word	0x40004800
 8004834:	40023800 	.word	0x40023800
 8004838:	40020400 	.word	0x40020400
 800483c:	20001ef8 	.word	0x20001ef8
 8004840:	40026028 	.word	0x40026028
 8004844:	20001f58 	.word	0x20001f58
 8004848:	40026058 	.word	0x40026058

0800484c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800484c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004884 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004850:	480d      	ldr	r0, [pc, #52]	; (8004888 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004852:	490e      	ldr	r1, [pc, #56]	; (800488c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004854:	4a0e      	ldr	r2, [pc, #56]	; (8004890 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004858:	e002      	b.n	8004860 <LoopCopyDataInit>

0800485a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800485a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800485c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800485e:	3304      	adds	r3, #4

08004860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004864:	d3f9      	bcc.n	800485a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004866:	4a0b      	ldr	r2, [pc, #44]	; (8004894 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004868:	4c0b      	ldr	r4, [pc, #44]	; (8004898 <LoopFillZerobss+0x26>)
  movs r3, #0
 800486a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800486c:	e001      	b.n	8004872 <LoopFillZerobss>

0800486e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800486e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004870:	3204      	adds	r2, #4

08004872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004874:	d3fb      	bcc.n	800486e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004876:	f7ff f9f5 	bl	8003c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800487a:	f009 f985 	bl	800db88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800487e:	f7fe fc5d 	bl	800313c <main>
  bx  lr    
 8004882:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004884:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800488c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8004890:	0800e4b8 	.word	0x0800e4b8
  ldr r2, =_sbss
 8004894:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8004898:	20003614 	.word	0x20003614

0800489c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800489c:	e7fe      	b.n	800489c <ADC_IRQHandler>
	...

080048a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80048a4:	4b0e      	ldr	r3, [pc, #56]	; (80048e0 <HAL_Init+0x40>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a0d      	ldr	r2, [pc, #52]	; (80048e0 <HAL_Init+0x40>)
 80048aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_Init+0x40>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a0a      	ldr	r2, [pc, #40]	; (80048e0 <HAL_Init+0x40>)
 80048b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048bc:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <HAL_Init+0x40>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a07      	ldr	r2, [pc, #28]	; (80048e0 <HAL_Init+0x40>)
 80048c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048c8:	2003      	movs	r0, #3
 80048ca:	f000 fc30 	bl	800512e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048ce:	200f      	movs	r0, #15
 80048d0:	f7ff f8b4 	bl	8003a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048d4:	f7ff f886 	bl	80039e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40023c00 	.word	0x40023c00

080048e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048e8:	4b06      	ldr	r3, [pc, #24]	; (8004904 <HAL_IncTick+0x20>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	461a      	mov	r2, r3
 80048ee:	4b06      	ldr	r3, [pc, #24]	; (8004908 <HAL_IncTick+0x24>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4413      	add	r3, r2
 80048f4:	4a04      	ldr	r2, [pc, #16]	; (8004908 <HAL_IncTick+0x24>)
 80048f6:	6013      	str	r3, [r2, #0]
}
 80048f8:	bf00      	nop
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	2000003c 	.word	0x2000003c
 8004908:	20001fb8 	.word	0x20001fb8

0800490c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  return uwTick;
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <HAL_GetTick+0x14>)
 8004912:	681b      	ldr	r3, [r3, #0]
}
 8004914:	4618      	mov	r0, r3
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	20001fb8 	.word	0x20001fb8

08004924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800492c:	f7ff ffee 	bl	800490c <HAL_GetTick>
 8004930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800493c:	d005      	beq.n	800494a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800493e:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <HAL_Delay+0x44>)
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4413      	add	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800494a:	bf00      	nop
 800494c:	f7ff ffde 	bl	800490c <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	429a      	cmp	r2, r3
 800495a:	d8f7      	bhi.n	800494c <HAL_Delay+0x28>
  {
  }
}
 800495c:	bf00      	nop
 800495e:	bf00      	nop
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	2000003c 	.word	0x2000003c

0800496c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e0ed      	b.n	8004b5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d102      	bne.n	8004990 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fc fac2 	bl	8000f14 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049a0:	f7ff ffb4 	bl	800490c <HAL_GetTick>
 80049a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80049a6:	e012      	b.n	80049ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80049a8:	f7ff ffb0 	bl	800490c <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b0a      	cmp	r3, #10
 80049b4:	d90b      	bls.n	80049ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2205      	movs	r2, #5
 80049c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e0c5      	b.n	8004b5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0e5      	beq.n	80049a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0202 	bic.w	r2, r2, #2
 80049ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049ec:	f7ff ff8e 	bl	800490c <HAL_GetTick>
 80049f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80049f2:	e012      	b.n	8004a1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80049f4:	f7ff ff8a 	bl	800490c <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b0a      	cmp	r3, #10
 8004a00:	d90b      	bls.n	8004a1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2205      	movs	r2, #5
 8004a12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e09f      	b.n	8004b5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e5      	bne.n	80049f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	7e1b      	ldrb	r3, [r3, #24]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d108      	bne.n	8004a42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	e007      	b.n	8004a52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	7e5b      	ldrb	r3, [r3, #25]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d108      	bne.n	8004a6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	e007      	b.n	8004a7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	7e9b      	ldrb	r3, [r3, #26]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d108      	bne.n	8004a96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0220 	orr.w	r2, r2, #32
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	e007      	b.n	8004aa6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0220 	bic.w	r2, r2, #32
 8004aa4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	7edb      	ldrb	r3, [r3, #27]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d108      	bne.n	8004ac0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0210 	bic.w	r2, r2, #16
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	e007      	b.n	8004ad0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0210 	orr.w	r2, r2, #16
 8004ace:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	7f1b      	ldrb	r3, [r3, #28]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d108      	bne.n	8004aea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0208 	orr.w	r2, r2, #8
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	e007      	b.n	8004afa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0208 	bic.w	r2, r2, #8
 8004af8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	7f5b      	ldrb	r3, [r3, #29]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d108      	bne.n	8004b14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f042 0204 	orr.w	r2, r2, #4
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	e007      	b.n	8004b24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0204 	bic.w	r2, r2, #4
 8004b22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	ea42 0103 	orr.w	r1, r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	1e5a      	subs	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b08a      	sub	sp, #40	; 0x28
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d07c      	beq.n	8004ca2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d023      	beq.n	8004bfa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f983 	bl	8004ed0 <HAL_CAN_TxMailbox0CompleteCallback>
 8004bca:	e016      	b.n	8004bfa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d004      	beq.n	8004be0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bde:	e00c      	b.n	8004bfa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d004      	beq.n	8004bf4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf2:	e002      	b.n	8004bfa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f989 	bl	8004f0c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d024      	beq.n	8004c4e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f963 	bl	8004ee4 <HAL_CAN_TxMailbox1CompleteCallback>
 8004c1e:	e016      	b.n	8004c4e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d004      	beq.n	8004c34 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
 8004c32:	e00c      	b.n	8004c4e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d004      	beq.n	8004c48 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
 8004c46:	e002      	b.n	8004c4e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f969 	bl	8004f20 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d024      	beq.n	8004ca2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004c60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f943 	bl	8004ef8 <HAL_CAN_TxMailbox2CompleteCallback>
 8004c72:	e016      	b.n	8004ca2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d004      	beq.n	8004c88 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
 8004c86:	e00c      	b.n	8004ca2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d004      	beq.n	8004c9c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9a:	e002      	b.n	8004ca2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f949 	bl	8004f34 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00c      	beq.n	8004cc6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d007      	beq.n	8004cc6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2210      	movs	r2, #16
 8004cc4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00b      	beq.n	8004ce8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d006      	beq.n	8004ce8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2208      	movs	r2, #8
 8004ce0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f93a 	bl	8004f5c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d009      	beq.n	8004d06 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0303 	and.w	r3, r3, #3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f921 	bl	8004f48 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00c      	beq.n	8004d2a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	f003 0310 	and.w	r3, r3, #16
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2210      	movs	r2, #16
 8004d28:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00b      	beq.n	8004d4c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d006      	beq.n	8004d4c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2208      	movs	r2, #8
 8004d44:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f91c 	bl	8004f84 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d009      	beq.n	8004d6a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f903 	bl	8004f70 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00b      	beq.n	8004d8c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d006      	beq.n	8004d8c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2210      	movs	r2, #16
 8004d84:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f906 	bl	8004f98 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00b      	beq.n	8004dae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d006      	beq.n	8004dae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2208      	movs	r2, #8
 8004da6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f8ff 	bl	8004fac <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d07b      	beq.n	8004eb0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	f003 0304 	and.w	r3, r3, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d072      	beq.n	8004ea8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d008      	beq.n	8004dfa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	f043 0302 	orr.w	r3, r3, #2
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	f043 0304 	orr.w	r3, r3, #4
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d043      	beq.n	8004ea8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d03e      	beq.n	8004ea8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e30:	2b60      	cmp	r3, #96	; 0x60
 8004e32:	d02b      	beq.n	8004e8c <HAL_CAN_IRQHandler+0x32a>
 8004e34:	2b60      	cmp	r3, #96	; 0x60
 8004e36:	d82e      	bhi.n	8004e96 <HAL_CAN_IRQHandler+0x334>
 8004e38:	2b50      	cmp	r3, #80	; 0x50
 8004e3a:	d022      	beq.n	8004e82 <HAL_CAN_IRQHandler+0x320>
 8004e3c:	2b50      	cmp	r3, #80	; 0x50
 8004e3e:	d82a      	bhi.n	8004e96 <HAL_CAN_IRQHandler+0x334>
 8004e40:	2b40      	cmp	r3, #64	; 0x40
 8004e42:	d019      	beq.n	8004e78 <HAL_CAN_IRQHandler+0x316>
 8004e44:	2b40      	cmp	r3, #64	; 0x40
 8004e46:	d826      	bhi.n	8004e96 <HAL_CAN_IRQHandler+0x334>
 8004e48:	2b30      	cmp	r3, #48	; 0x30
 8004e4a:	d010      	beq.n	8004e6e <HAL_CAN_IRQHandler+0x30c>
 8004e4c:	2b30      	cmp	r3, #48	; 0x30
 8004e4e:	d822      	bhi.n	8004e96 <HAL_CAN_IRQHandler+0x334>
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d002      	beq.n	8004e5a <HAL_CAN_IRQHandler+0x2f8>
 8004e54:	2b20      	cmp	r3, #32
 8004e56:	d005      	beq.n	8004e64 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004e58:	e01d      	b.n	8004e96 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	f043 0308 	orr.w	r3, r3, #8
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e62:	e019      	b.n	8004e98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	f043 0310 	orr.w	r3, r3, #16
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e6c:	e014      	b.n	8004e98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	f043 0320 	orr.w	r3, r3, #32
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e76:	e00f      	b.n	8004e98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e80:	e00a      	b.n	8004e98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e8a:	e005      	b.n	8004e98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e94:	e000      	b.n	8004e98 <HAL_CAN_IRQHandler+0x336>
            break;
 8004e96:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699a      	ldr	r2, [r3, #24]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ea6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2204      	movs	r2, #4
 8004eae:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d008      	beq.n	8004ec8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f87c 	bl	8004fc0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004ec8:	bf00      	nop
 8004eca:	3728      	adds	r7, #40	; 0x28
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f003 0307 	and.w	r3, r3, #7
 8004fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fe4:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <__NVIC_SetPriorityGrouping+0x44>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005006:	4a04      	ldr	r2, [pc, #16]	; (8005018 <__NVIC_SetPriorityGrouping+0x44>)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	60d3      	str	r3, [r2, #12]
}
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	e000ed00 	.word	0xe000ed00

0800501c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005020:	4b04      	ldr	r3, [pc, #16]	; (8005034 <__NVIC_GetPriorityGrouping+0x18>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	0a1b      	lsrs	r3, r3, #8
 8005026:	f003 0307 	and.w	r3, r3, #7
}
 800502a:	4618      	mov	r0, r3
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	e000ed00 	.word	0xe000ed00

08005038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	4603      	mov	r3, r0
 8005040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005046:	2b00      	cmp	r3, #0
 8005048:	db0b      	blt.n	8005062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	f003 021f 	and.w	r2, r3, #31
 8005050:	4907      	ldr	r1, [pc, #28]	; (8005070 <__NVIC_EnableIRQ+0x38>)
 8005052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005056:	095b      	lsrs	r3, r3, #5
 8005058:	2001      	movs	r0, #1
 800505a:	fa00 f202 	lsl.w	r2, r0, r2
 800505e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	e000e100 	.word	0xe000e100

08005074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	4603      	mov	r3, r0
 800507c:	6039      	str	r1, [r7, #0]
 800507e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005084:	2b00      	cmp	r3, #0
 8005086:	db0a      	blt.n	800509e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	b2da      	uxtb	r2, r3
 800508c:	490c      	ldr	r1, [pc, #48]	; (80050c0 <__NVIC_SetPriority+0x4c>)
 800508e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005092:	0112      	lsls	r2, r2, #4
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	440b      	add	r3, r1
 8005098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800509c:	e00a      	b.n	80050b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	4908      	ldr	r1, [pc, #32]	; (80050c4 <__NVIC_SetPriority+0x50>)
 80050a4:	79fb      	ldrb	r3, [r7, #7]
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	3b04      	subs	r3, #4
 80050ac:	0112      	lsls	r2, r2, #4
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	440b      	add	r3, r1
 80050b2:	761a      	strb	r2, [r3, #24]
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	e000e100 	.word	0xe000e100
 80050c4:	e000ed00 	.word	0xe000ed00

080050c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b089      	sub	sp, #36	; 0x24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	f1c3 0307 	rsb	r3, r3, #7
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	bf28      	it	cs
 80050e6:	2304      	movcs	r3, #4
 80050e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	3304      	adds	r3, #4
 80050ee:	2b06      	cmp	r3, #6
 80050f0:	d902      	bls.n	80050f8 <NVIC_EncodePriority+0x30>
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	3b03      	subs	r3, #3
 80050f6:	e000      	b.n	80050fa <NVIC_EncodePriority+0x32>
 80050f8:	2300      	movs	r3, #0
 80050fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	43da      	mvns	r2, r3
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	401a      	ands	r2, r3
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005110:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	fa01 f303 	lsl.w	r3, r1, r3
 800511a:	43d9      	mvns	r1, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005120:	4313      	orrs	r3, r2
         );
}
 8005122:	4618      	mov	r0, r3
 8005124:	3724      	adds	r7, #36	; 0x24
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b082      	sub	sp, #8
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff ff4c 	bl	8004fd4 <__NVIC_SetPriorityGrouping>
}
 800513c:	bf00      	nop
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	4603      	mov	r3, r0
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005156:	f7ff ff61 	bl	800501c <__NVIC_GetPriorityGrouping>
 800515a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	6978      	ldr	r0, [r7, #20]
 8005162:	f7ff ffb1 	bl	80050c8 <NVIC_EncodePriority>
 8005166:	4602      	mov	r2, r0
 8005168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800516c:	4611      	mov	r1, r2
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff ff80 	bl	8005074 <__NVIC_SetPriority>
}
 8005174:	bf00      	nop
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	4603      	mov	r3, r0
 8005184:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800518a:	4618      	mov	r0, r3
 800518c:	f7ff ff54 	bl	8005038 <__NVIC_EnableIRQ>
}
 8005190:	bf00      	nop
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80051a4:	f7ff fbb2 	bl	800490c <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e099      	b.n	80052e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0201 	bic.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051d4:	e00f      	b.n	80051f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051d6:	f7ff fb99 	bl	800490c <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b05      	cmp	r3, #5
 80051e2:	d908      	bls.n	80051f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2220      	movs	r2, #32
 80051e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2203      	movs	r2, #3
 80051ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e078      	b.n	80052e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1e8      	bne.n	80051d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	4b38      	ldr	r3, [pc, #224]	; (80052f0 <HAL_DMA_Init+0x158>)
 8005210:	4013      	ands	r3, r2
 8005212:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005222:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800522e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800523a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	2b04      	cmp	r3, #4
 800524e:	d107      	bne.n	8005260 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005258:	4313      	orrs	r3, r2
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	4313      	orrs	r3, r2
 800525e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f023 0307 	bic.w	r3, r3, #7
 8005276:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	4313      	orrs	r3, r2
 8005280:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	2b04      	cmp	r3, #4
 8005288:	d117      	bne.n	80052ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00e      	beq.n	80052ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fb0f 	bl	80058c0 <DMA_CheckFifoParam>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d008      	beq.n	80052ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2240      	movs	r2, #64	; 0x40
 80052ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80052b6:	2301      	movs	r3, #1
 80052b8:	e016      	b.n	80052e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fac6 	bl	8005854 <DMA_CalcBaseAndBitshift>
 80052c8:	4603      	mov	r3, r0
 80052ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d0:	223f      	movs	r2, #63	; 0x3f
 80052d2:	409a      	lsls	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	f010803f 	.word	0xf010803f

080052f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_DMA_Start_IT+0x26>
 8005316:	2302      	movs	r3, #2
 8005318:	e040      	b.n	800539c <HAL_DMA_Start_IT+0xa8>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b01      	cmp	r3, #1
 800532c:	d12f      	bne.n	800538e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2202      	movs	r2, #2
 8005332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 fa58 	bl	80057f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800534c:	223f      	movs	r2, #63	; 0x3f
 800534e:	409a      	lsls	r2, r3
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0216 	orr.w	r2, r2, #22
 8005362:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	2b00      	cmp	r3, #0
 800536a:	d007      	beq.n	800537c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0208 	orr.w	r2, r2, #8
 800537a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	e005      	b.n	800539a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005396:	2302      	movs	r3, #2
 8005398:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800539a:	7dfb      	ldrb	r3, [r7, #23]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80053b2:	f7ff faab 	bl	800490c <HAL_GetTick>
 80053b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d008      	beq.n	80053d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2280      	movs	r2, #128	; 0x80
 80053c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e052      	b.n	800547c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0216 	bic.w	r2, r2, #22
 80053e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695a      	ldr	r2, [r3, #20]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d103      	bne.n	8005406 <HAL_DMA_Abort+0x62>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005402:	2b00      	cmp	r3, #0
 8005404:	d007      	beq.n	8005416 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0208 	bic.w	r2, r2, #8
 8005414:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0201 	bic.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005426:	e013      	b.n	8005450 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005428:	f7ff fa70 	bl	800490c <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b05      	cmp	r3, #5
 8005434:	d90c      	bls.n	8005450 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2203      	movs	r2, #3
 8005440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e015      	b.n	800547c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1e4      	bne.n	8005428 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005462:	223f      	movs	r2, #63	; 0x3f
 8005464:	409a      	lsls	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d004      	beq.n	80054a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2280      	movs	r2, #128	; 0x80
 800549c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e00c      	b.n	80054bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2205      	movs	r2, #5
 80054a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0201 	bic.w	r2, r2, #1
 80054b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80054d4:	4b8e      	ldr	r3, [pc, #568]	; (8005710 <HAL_DMA_IRQHandler+0x248>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a8e      	ldr	r2, [pc, #568]	; (8005714 <HAL_DMA_IRQHandler+0x24c>)
 80054da:	fba2 2303 	umull	r2, r3, r2, r3
 80054de:	0a9b      	lsrs	r3, r3, #10
 80054e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f2:	2208      	movs	r2, #8
 80054f4:	409a      	lsls	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4013      	ands	r3, r2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d01a      	beq.n	8005534 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d013      	beq.n	8005534 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0204 	bic.w	r2, r2, #4
 800551a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005520:	2208      	movs	r2, #8
 8005522:	409a      	lsls	r2, r3
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552c:	f043 0201 	orr.w	r2, r3, #1
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005538:	2201      	movs	r2, #1
 800553a:	409a      	lsls	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4013      	ands	r3, r2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d012      	beq.n	800556a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00b      	beq.n	800556a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005556:	2201      	movs	r2, #1
 8005558:	409a      	lsls	r2, r3
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005562:	f043 0202 	orr.w	r2, r3, #2
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800556e:	2204      	movs	r2, #4
 8005570:	409a      	lsls	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4013      	ands	r3, r2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d012      	beq.n	80055a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00b      	beq.n	80055a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800558c:	2204      	movs	r2, #4
 800558e:	409a      	lsls	r2, r3
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005598:	f043 0204 	orr.w	r2, r3, #4
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a4:	2210      	movs	r2, #16
 80055a6:	409a      	lsls	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4013      	ands	r3, r2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d043      	beq.n	8005638 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0308 	and.w	r3, r3, #8
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d03c      	beq.n	8005638 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055c2:	2210      	movs	r2, #16
 80055c4:	409a      	lsls	r2, r3
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d018      	beq.n	800560a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d108      	bne.n	80055f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d024      	beq.n	8005638 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	4798      	blx	r3
 80055f6:	e01f      	b.n	8005638 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01b      	beq.n	8005638 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	4798      	blx	r3
 8005608:	e016      	b.n	8005638 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005614:	2b00      	cmp	r3, #0
 8005616:	d107      	bne.n	8005628 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0208 	bic.w	r2, r2, #8
 8005626:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800563c:	2220      	movs	r2, #32
 800563e:	409a      	lsls	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4013      	ands	r3, r2
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 808f 	beq.w	8005768 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0310 	and.w	r3, r3, #16
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 8087 	beq.w	8005768 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565e:	2220      	movs	r2, #32
 8005660:	409a      	lsls	r2, r3
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b05      	cmp	r3, #5
 8005670:	d136      	bne.n	80056e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0216 	bic.w	r2, r2, #22
 8005680:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695a      	ldr	r2, [r3, #20]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005690:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d103      	bne.n	80056a2 <HAL_DMA_IRQHandler+0x1da>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d007      	beq.n	80056b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0208 	bic.w	r2, r2, #8
 80056b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b6:	223f      	movs	r2, #63	; 0x3f
 80056b8:	409a      	lsls	r2, r3
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d07e      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	4798      	blx	r3
        }
        return;
 80056de:	e079      	b.n	80057d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d01d      	beq.n	800572a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10d      	bne.n	8005718 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005700:	2b00      	cmp	r3, #0
 8005702:	d031      	beq.n	8005768 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	4798      	blx	r3
 800570c:	e02c      	b.n	8005768 <HAL_DMA_IRQHandler+0x2a0>
 800570e:	bf00      	nop
 8005710:	20000034 	.word	0x20000034
 8005714:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571c:	2b00      	cmp	r3, #0
 800571e:	d023      	beq.n	8005768 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	4798      	blx	r3
 8005728:	e01e      	b.n	8005768 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10f      	bne.n	8005758 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0210 	bic.w	r2, r2, #16
 8005746:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576c:	2b00      	cmp	r3, #0
 800576e:	d032      	beq.n	80057d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d022      	beq.n	80057c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2205      	movs	r2, #5
 8005780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0201 	bic.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	3301      	adds	r3, #1
 8005798:	60bb      	str	r3, [r7, #8]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	429a      	cmp	r2, r3
 800579e:	d307      	bcc.n	80057b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1f2      	bne.n	8005794 <HAL_DMA_IRQHandler+0x2cc>
 80057ae:	e000      	b.n	80057b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80057b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d005      	beq.n	80057d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	4798      	blx	r3
 80057d2:	e000      	b.n	80057d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80057d4:	bf00      	nop
    }
  }
}
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057ea:	b2db      	uxtb	r3, r3
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005814:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	2b40      	cmp	r3, #64	; 0x40
 8005824:	d108      	bne.n	8005838 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005836:	e007      	b.n	8005848 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	60da      	str	r2, [r3, #12]
}
 8005848:	bf00      	nop
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	b2db      	uxtb	r3, r3
 8005862:	3b10      	subs	r3, #16
 8005864:	4a14      	ldr	r2, [pc, #80]	; (80058b8 <DMA_CalcBaseAndBitshift+0x64>)
 8005866:	fba2 2303 	umull	r2, r3, r2, r3
 800586a:	091b      	lsrs	r3, r3, #4
 800586c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800586e:	4a13      	ldr	r2, [pc, #76]	; (80058bc <DMA_CalcBaseAndBitshift+0x68>)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b03      	cmp	r3, #3
 8005880:	d909      	bls.n	8005896 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800588a:	f023 0303 	bic.w	r3, r3, #3
 800588e:	1d1a      	adds	r2, r3, #4
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	659a      	str	r2, [r3, #88]	; 0x58
 8005894:	e007      	b.n	80058a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800589e:	f023 0303 	bic.w	r3, r3, #3
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	aaaaaaab 	.word	0xaaaaaaab
 80058bc:	0800e40c 	.word	0x0800e40c

080058c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058c8:	2300      	movs	r3, #0
 80058ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d11f      	bne.n	800591a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2b03      	cmp	r3, #3
 80058de:	d856      	bhi.n	800598e <DMA_CheckFifoParam+0xce>
 80058e0:	a201      	add	r2, pc, #4	; (adr r2, 80058e8 <DMA_CheckFifoParam+0x28>)
 80058e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e6:	bf00      	nop
 80058e8:	080058f9 	.word	0x080058f9
 80058ec:	0800590b 	.word	0x0800590b
 80058f0:	080058f9 	.word	0x080058f9
 80058f4:	0800598f 	.word	0x0800598f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d046      	beq.n	8005992 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005908:	e043      	b.n	8005992 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005912:	d140      	bne.n	8005996 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005918:	e03d      	b.n	8005996 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005922:	d121      	bne.n	8005968 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b03      	cmp	r3, #3
 8005928:	d837      	bhi.n	800599a <DMA_CheckFifoParam+0xda>
 800592a:	a201      	add	r2, pc, #4	; (adr r2, 8005930 <DMA_CheckFifoParam+0x70>)
 800592c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005930:	08005941 	.word	0x08005941
 8005934:	08005947 	.word	0x08005947
 8005938:	08005941 	.word	0x08005941
 800593c:	08005959 	.word	0x08005959
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	73fb      	strb	r3, [r7, #15]
      break;
 8005944:	e030      	b.n	80059a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d025      	beq.n	800599e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005956:	e022      	b.n	800599e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005960:	d11f      	bne.n	80059a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005966:	e01c      	b.n	80059a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b02      	cmp	r3, #2
 800596c:	d903      	bls.n	8005976 <DMA_CheckFifoParam+0xb6>
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2b03      	cmp	r3, #3
 8005972:	d003      	beq.n	800597c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005974:	e018      	b.n	80059a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	73fb      	strb	r3, [r7, #15]
      break;
 800597a:	e015      	b.n	80059a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00e      	beq.n	80059a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	73fb      	strb	r3, [r7, #15]
      break;
 800598c:	e00b      	b.n	80059a6 <DMA_CheckFifoParam+0xe6>
      break;
 800598e:	bf00      	nop
 8005990:	e00a      	b.n	80059a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005992:	bf00      	nop
 8005994:	e008      	b.n	80059a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005996:	bf00      	nop
 8005998:	e006      	b.n	80059a8 <DMA_CheckFifoParam+0xe8>
      break;
 800599a:	bf00      	nop
 800599c:	e004      	b.n	80059a8 <DMA_CheckFifoParam+0xe8>
      break;
 800599e:	bf00      	nop
 80059a0:	e002      	b.n	80059a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80059a2:	bf00      	nop
 80059a4:	e000      	b.n	80059a8 <DMA_CheckFifoParam+0xe8>
      break;
 80059a6:	bf00      	nop
    }
  } 
  
  return status; 
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop

080059b8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80059ca:	4b23      	ldr	r3, [pc, #140]	; (8005a58 <HAL_FLASH_Program+0xa0>)
 80059cc:	7e1b      	ldrb	r3, [r3, #24]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <HAL_FLASH_Program+0x1e>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e03b      	b.n	8005a4e <HAL_FLASH_Program+0x96>
 80059d6:	4b20      	ldr	r3, [pc, #128]	; (8005a58 <HAL_FLASH_Program+0xa0>)
 80059d8:	2201      	movs	r2, #1
 80059da:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80059e0:	f000 f870 	bl	8005ac4 <FLASH_WaitForLastOperation>
 80059e4:	4603      	mov	r3, r0
 80059e6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d12b      	bne.n	8005a46 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d105      	bne.n	8005a00 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80059f4:	783b      	ldrb	r3, [r7, #0]
 80059f6:	4619      	mov	r1, r3
 80059f8:	68b8      	ldr	r0, [r7, #8]
 80059fa:	f000 f91b 	bl	8005c34 <FLASH_Program_Byte>
 80059fe:	e016      	b.n	8005a2e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d105      	bne.n	8005a12 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005a06:	883b      	ldrh	r3, [r7, #0]
 8005a08:	4619      	mov	r1, r3
 8005a0a:	68b8      	ldr	r0, [r7, #8]
 8005a0c:	f000 f8ee 	bl	8005bec <FLASH_Program_HalfWord>
 8005a10:	e00d      	b.n	8005a2e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d105      	bne.n	8005a24 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	68b8      	ldr	r0, [r7, #8]
 8005a1e:	f000 f8c3 	bl	8005ba8 <FLASH_Program_Word>
 8005a22:	e004      	b.n	8005a2e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a28:	68b8      	ldr	r0, [r7, #8]
 8005a2a:	f000 f88b 	bl	8005b44 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a2e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a32:	f000 f847 	bl	8005ac4 <FLASH_WaitForLastOperation>
 8005a36:	4603      	mov	r3, r0
 8005a38:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005a3a:	4b08      	ldr	r3, [pc, #32]	; (8005a5c <HAL_FLASH_Program+0xa4>)
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	4a07      	ldr	r2, [pc, #28]	; (8005a5c <HAL_FLASH_Program+0xa4>)
 8005a40:	f023 0301 	bic.w	r3, r3, #1
 8005a44:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a46:	4b04      	ldr	r3, [pc, #16]	; (8005a58 <HAL_FLASH_Program+0xa0>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20001fbc 	.word	0x20001fbc
 8005a5c:	40023c00 	.word	0x40023c00

08005a60 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005a6a:	4b0b      	ldr	r3, [pc, #44]	; (8005a98 <HAL_FLASH_Unlock+0x38>)
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	da0b      	bge.n	8005a8a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005a72:	4b09      	ldr	r3, [pc, #36]	; (8005a98 <HAL_FLASH_Unlock+0x38>)
 8005a74:	4a09      	ldr	r2, [pc, #36]	; (8005a9c <HAL_FLASH_Unlock+0x3c>)
 8005a76:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005a78:	4b07      	ldr	r3, [pc, #28]	; (8005a98 <HAL_FLASH_Unlock+0x38>)
 8005a7a:	4a09      	ldr	r2, [pc, #36]	; (8005aa0 <HAL_FLASH_Unlock+0x40>)
 8005a7c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005a7e:	4b06      	ldr	r3, [pc, #24]	; (8005a98 <HAL_FLASH_Unlock+0x38>)
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	da01      	bge.n	8005a8a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	40023c00 	.word	0x40023c00
 8005a9c:	45670123 	.word	0x45670123
 8005aa0:	cdef89ab 	.word	0xcdef89ab

08005aa4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <HAL_FLASH_Lock+0x1c>)
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	4a04      	ldr	r2, [pc, #16]	; (8005ac0 <HAL_FLASH_Lock+0x1c>)
 8005aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ab2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	40023c00 	.word	0x40023c00

08005ac4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005ad0:	4b1a      	ldr	r3, [pc, #104]	; (8005b3c <FLASH_WaitForLastOperation+0x78>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005ad6:	f7fe ff19 	bl	800490c <HAL_GetTick>
 8005ada:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005adc:	e010      	b.n	8005b00 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ae4:	d00c      	beq.n	8005b00 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d007      	beq.n	8005afc <FLASH_WaitForLastOperation+0x38>
 8005aec:	f7fe ff0e 	bl	800490c <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d201      	bcs.n	8005b00 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e019      	b.n	8005b34 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005b00:	4b0f      	ldr	r3, [pc, #60]	; (8005b40 <FLASH_WaitForLastOperation+0x7c>)
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1e8      	bne.n	8005ade <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005b0c:	4b0c      	ldr	r3, [pc, #48]	; (8005b40 <FLASH_WaitForLastOperation+0x7c>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005b18:	4b09      	ldr	r3, [pc, #36]	; (8005b40 <FLASH_WaitForLastOperation+0x7c>)
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005b1e:	4b08      	ldr	r3, [pc, #32]	; (8005b40 <FLASH_WaitForLastOperation+0x7c>)
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005b2a:	f000 f8a5 	bl	8005c78 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e000      	b.n	8005b34 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
  
}  
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	20001fbc 	.word	0x20001fbc
 8005b40:	40023c00 	.word	0x40023c00

08005b44 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b50:	4b14      	ldr	r3, [pc, #80]	; (8005ba4 <FLASH_Program_DoubleWord+0x60>)
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	4a13      	ldr	r2, [pc, #76]	; (8005ba4 <FLASH_Program_DoubleWord+0x60>)
 8005b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005b5c:	4b11      	ldr	r3, [pc, #68]	; (8005ba4 <FLASH_Program_DoubleWord+0x60>)
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	4a10      	ldr	r2, [pc, #64]	; (8005ba4 <FLASH_Program_DoubleWord+0x60>)
 8005b62:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005b66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005b68:	4b0e      	ldr	r3, [pc, #56]	; (8005ba4 <FLASH_Program_DoubleWord+0x60>)
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	4a0d      	ldr	r2, [pc, #52]	; (8005ba4 <FLASH_Program_DoubleWord+0x60>)
 8005b6e:	f043 0301 	orr.w	r3, r3, #1
 8005b72:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005b7a:	f3bf 8f6f 	isb	sy
}
 8005b7e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005b80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	f04f 0300 	mov.w	r3, #0
 8005b8c:	000a      	movs	r2, r1
 8005b8e:	2300      	movs	r3, #0
 8005b90:	68f9      	ldr	r1, [r7, #12]
 8005b92:	3104      	adds	r1, #4
 8005b94:	4613      	mov	r3, r2
 8005b96:	600b      	str	r3, [r1, #0]
}
 8005b98:	bf00      	nop
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	40023c00 	.word	0x40023c00

08005ba8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005bb2:	4b0d      	ldr	r3, [pc, #52]	; (8005be8 <FLASH_Program_Word+0x40>)
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	4a0c      	ldr	r2, [pc, #48]	; (8005be8 <FLASH_Program_Word+0x40>)
 8005bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bbc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005bbe:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <FLASH_Program_Word+0x40>)
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	4a09      	ldr	r2, [pc, #36]	; (8005be8 <FLASH_Program_Word+0x40>)
 8005bc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bc8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005bca:	4b07      	ldr	r3, [pc, #28]	; (8005be8 <FLASH_Program_Word+0x40>)
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	4a06      	ldr	r2, [pc, #24]	; (8005be8 <FLASH_Program_Word+0x40>)
 8005bd0:	f043 0301 	orr.w	r3, r3, #1
 8005bd4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	601a      	str	r2, [r3, #0]
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	40023c00 	.word	0x40023c00

08005bec <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005bf8:	4b0d      	ldr	r3, [pc, #52]	; (8005c30 <FLASH_Program_HalfWord+0x44>)
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	4a0c      	ldr	r2, [pc, #48]	; (8005c30 <FLASH_Program_HalfWord+0x44>)
 8005bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005c04:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <FLASH_Program_HalfWord+0x44>)
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	4a09      	ldr	r2, [pc, #36]	; (8005c30 <FLASH_Program_HalfWord+0x44>)
 8005c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005c10:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <FLASH_Program_HalfWord+0x44>)
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	4a06      	ldr	r2, [pc, #24]	; (8005c30 <FLASH_Program_HalfWord+0x44>)
 8005c16:	f043 0301 	orr.w	r3, r3, #1
 8005c1a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	887a      	ldrh	r2, [r7, #2]
 8005c20:	801a      	strh	r2, [r3, #0]
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	40023c00 	.word	0x40023c00

08005c34 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005c40:	4b0c      	ldr	r3, [pc, #48]	; (8005c74 <FLASH_Program_Byte+0x40>)
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	4a0b      	ldr	r2, [pc, #44]	; (8005c74 <FLASH_Program_Byte+0x40>)
 8005c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005c4c:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <FLASH_Program_Byte+0x40>)
 8005c4e:	4a09      	ldr	r2, [pc, #36]	; (8005c74 <FLASH_Program_Byte+0x40>)
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005c54:	4b07      	ldr	r3, [pc, #28]	; (8005c74 <FLASH_Program_Byte+0x40>)
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	4a06      	ldr	r2, [pc, #24]	; (8005c74 <FLASH_Program_Byte+0x40>)
 8005c5a:	f043 0301 	orr.w	r3, r3, #1
 8005c5e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	78fa      	ldrb	r2, [r7, #3]
 8005c64:	701a      	strb	r2, [r3, #0]
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	40023c00 	.word	0x40023c00

08005c78 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005c78:	b480      	push	{r7}
 8005c7a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005c7c:	4b27      	ldr	r3, [pc, #156]	; (8005d1c <FLASH_SetErrorCode+0xa4>)
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f003 0310 	and.w	r3, r3, #16
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d008      	beq.n	8005c9a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005c88:	4b25      	ldr	r3, [pc, #148]	; (8005d20 <FLASH_SetErrorCode+0xa8>)
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	f043 0310 	orr.w	r3, r3, #16
 8005c90:	4a23      	ldr	r2, [pc, #140]	; (8005d20 <FLASH_SetErrorCode+0xa8>)
 8005c92:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005c94:	4b21      	ldr	r3, [pc, #132]	; (8005d1c <FLASH_SetErrorCode+0xa4>)
 8005c96:	2210      	movs	r2, #16
 8005c98:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005c9a:	4b20      	ldr	r3, [pc, #128]	; (8005d1c <FLASH_SetErrorCode+0xa4>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f003 0320 	and.w	r3, r3, #32
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d008      	beq.n	8005cb8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005ca6:	4b1e      	ldr	r3, [pc, #120]	; (8005d20 <FLASH_SetErrorCode+0xa8>)
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	f043 0308 	orr.w	r3, r3, #8
 8005cae:	4a1c      	ldr	r2, [pc, #112]	; (8005d20 <FLASH_SetErrorCode+0xa8>)
 8005cb0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005cb2:	4b1a      	ldr	r3, [pc, #104]	; (8005d1c <FLASH_SetErrorCode+0xa4>)
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005cb8:	4b18      	ldr	r3, [pc, #96]	; (8005d1c <FLASH_SetErrorCode+0xa4>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d008      	beq.n	8005cd6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005cc4:	4b16      	ldr	r3, [pc, #88]	; (8005d20 <FLASH_SetErrorCode+0xa8>)
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	f043 0304 	orr.w	r3, r3, #4
 8005ccc:	4a14      	ldr	r2, [pc, #80]	; (8005d20 <FLASH_SetErrorCode+0xa8>)
 8005cce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005cd0:	4b12      	ldr	r3, [pc, #72]	; (8005d1c <FLASH_SetErrorCode+0xa4>)
 8005cd2:	2240      	movs	r2, #64	; 0x40
 8005cd4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005cd6:	4b11      	ldr	r3, [pc, #68]	; (8005d1c <FLASH_SetErrorCode+0xa4>)
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d008      	beq.n	8005cf4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005ce2:	4b0f      	ldr	r3, [pc, #60]	; (8005d20 <FLASH_SetErrorCode+0xa8>)
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	f043 0302 	orr.w	r3, r3, #2
 8005cea:	4a0d      	ldr	r2, [pc, #52]	; (8005d20 <FLASH_SetErrorCode+0xa8>)
 8005cec:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005cee:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <FLASH_SetErrorCode+0xa4>)
 8005cf0:	2280      	movs	r2, #128	; 0x80
 8005cf2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005cf4:	4b09      	ldr	r3, [pc, #36]	; (8005d1c <FLASH_SetErrorCode+0xa4>)
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d008      	beq.n	8005d12 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005d00:	4b07      	ldr	r3, [pc, #28]	; (8005d20 <FLASH_SetErrorCode+0xa8>)
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	f043 0320 	orr.w	r3, r3, #32
 8005d08:	4a05      	ldr	r2, [pc, #20]	; (8005d20 <FLASH_SetErrorCode+0xa8>)
 8005d0a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005d0c:	4b03      	ldr	r3, [pc, #12]	; (8005d1c <FLASH_SetErrorCode+0xa4>)
 8005d0e:	2202      	movs	r2, #2
 8005d10:	60da      	str	r2, [r3, #12]
  }
}
 8005d12:	bf00      	nop
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	40023c00 	.word	0x40023c00
 8005d20:	20001fbc 	.word	0x20001fbc

08005d24 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005d36:	4b31      	ldr	r3, [pc, #196]	; (8005dfc <HAL_FLASHEx_Erase+0xd8>)
 8005d38:	7e1b      	ldrb	r3, [r3, #24]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d101      	bne.n	8005d42 <HAL_FLASHEx_Erase+0x1e>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e058      	b.n	8005df4 <HAL_FLASHEx_Erase+0xd0>
 8005d42:	4b2e      	ldr	r3, [pc, #184]	; (8005dfc <HAL_FLASHEx_Erase+0xd8>)
 8005d44:	2201      	movs	r2, #1
 8005d46:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005d48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005d4c:	f7ff feba 	bl	8005ac4 <FLASH_WaitForLastOperation>
 8005d50:	4603      	mov	r3, r0
 8005d52:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d148      	bne.n	8005dec <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d60:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d115      	bne.n	8005d96 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	4619      	mov	r1, r3
 8005d76:	4610      	mov	r0, r2
 8005d78:	f000 f844 	bl	8005e04 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005d7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005d80:	f7ff fea0 	bl	8005ac4 <FLASH_WaitForLastOperation>
 8005d84:	4603      	mov	r3, r0
 8005d86:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005d88:	4b1d      	ldr	r3, [pc, #116]	; (8005e00 <HAL_FLASHEx_Erase+0xdc>)
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	4a1c      	ldr	r2, [pc, #112]	; (8005e00 <HAL_FLASHEx_Erase+0xdc>)
 8005d8e:	f023 0304 	bic.w	r3, r3, #4
 8005d92:	6113      	str	r3, [r2, #16]
 8005d94:	e028      	b.n	8005de8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	60bb      	str	r3, [r7, #8]
 8005d9c:	e01c      	b.n	8005dd8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	4619      	mov	r1, r3
 8005da6:	68b8      	ldr	r0, [r7, #8]
 8005da8:	f000 f850 	bl	8005e4c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005dac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005db0:	f7ff fe88 	bl	8005ac4 <FLASH_WaitForLastOperation>
 8005db4:	4603      	mov	r3, r0
 8005db6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005db8:	4b11      	ldr	r3, [pc, #68]	; (8005e00 <HAL_FLASHEx_Erase+0xdc>)
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	4a10      	ldr	r2, [pc, #64]	; (8005e00 <HAL_FLASHEx_Erase+0xdc>)
 8005dbe:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005dc2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	601a      	str	r2, [r3, #0]
          break;
 8005dd0:	e00a      	b.n	8005de8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	60bb      	str	r3, [r7, #8]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68da      	ldr	r2, [r3, #12]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	4413      	add	r3, r2
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d3da      	bcc.n	8005d9e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005de8:	f000 f878 	bl	8005edc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005dec:	4b03      	ldr	r3, [pc, #12]	; (8005dfc <HAL_FLASHEx_Erase+0xd8>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	761a      	strb	r2, [r3, #24]

  return status;
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	20001fbc 	.word	0x20001fbc
 8005e00:	40023c00 	.word	0x40023c00

08005e04 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	6039      	str	r1, [r7, #0]
 8005e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005e10:	4b0d      	ldr	r3, [pc, #52]	; (8005e48 <FLASH_MassErase+0x44>)
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	4a0c      	ldr	r2, [pc, #48]	; (8005e48 <FLASH_MassErase+0x44>)
 8005e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005e1c:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <FLASH_MassErase+0x44>)
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	4a09      	ldr	r2, [pc, #36]	; (8005e48 <FLASH_MassErase+0x44>)
 8005e22:	f043 0304 	orr.w	r3, r3, #4
 8005e26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005e28:	4b07      	ldr	r3, [pc, #28]	; (8005e48 <FLASH_MassErase+0x44>)
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	79fb      	ldrb	r3, [r7, #7]
 8005e2e:	021b      	lsls	r3, r3, #8
 8005e30:	4313      	orrs	r3, r2
 8005e32:	4a05      	ldr	r2, [pc, #20]	; (8005e48 <FLASH_MassErase+0x44>)
 8005e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e38:	6113      	str	r3, [r2, #16]
}
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	40023c00 	.word	0x40023c00

08005e4c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	460b      	mov	r3, r1
 8005e56:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005e5c:	78fb      	ldrb	r3, [r7, #3]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d102      	bne.n	8005e68 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	e010      	b.n	8005e8a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005e68:	78fb      	ldrb	r3, [r7, #3]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d103      	bne.n	8005e76 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	e009      	b.n	8005e8a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005e76:	78fb      	ldrb	r3, [r7, #3]
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d103      	bne.n	8005e84 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	e002      	b.n	8005e8a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005e84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005e88:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005e8a:	4b13      	ldr	r3, [pc, #76]	; (8005ed8 <FLASH_Erase_Sector+0x8c>)
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	4a12      	ldr	r2, [pc, #72]	; (8005ed8 <FLASH_Erase_Sector+0x8c>)
 8005e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005e96:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <FLASH_Erase_Sector+0x8c>)
 8005e98:	691a      	ldr	r2, [r3, #16]
 8005e9a:	490f      	ldr	r1, [pc, #60]	; (8005ed8 <FLASH_Erase_Sector+0x8c>)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005ea2:	4b0d      	ldr	r3, [pc, #52]	; (8005ed8 <FLASH_Erase_Sector+0x8c>)
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	4a0c      	ldr	r2, [pc, #48]	; (8005ed8 <FLASH_Erase_Sector+0x8c>)
 8005ea8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005eac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005eae:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <FLASH_Erase_Sector+0x8c>)
 8005eb0:	691a      	ldr	r2, [r3, #16]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	00db      	lsls	r3, r3, #3
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	4a07      	ldr	r2, [pc, #28]	; (8005ed8 <FLASH_Erase_Sector+0x8c>)
 8005eba:	f043 0302 	orr.w	r3, r3, #2
 8005ebe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005ec0:	4b05      	ldr	r3, [pc, #20]	; (8005ed8 <FLASH_Erase_Sector+0x8c>)
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	4a04      	ldr	r2, [pc, #16]	; (8005ed8 <FLASH_Erase_Sector+0x8c>)
 8005ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eca:	6113      	str	r3, [r2, #16]
}
 8005ecc:	bf00      	nop
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	40023c00 	.word	0x40023c00

08005edc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005ee0:	4b20      	ldr	r3, [pc, #128]	; (8005f64 <FLASH_FlushCaches+0x88>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d017      	beq.n	8005f1c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005eec:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <FLASH_FlushCaches+0x88>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a1c      	ldr	r2, [pc, #112]	; (8005f64 <FLASH_FlushCaches+0x88>)
 8005ef2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ef6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005ef8:	4b1a      	ldr	r3, [pc, #104]	; (8005f64 <FLASH_FlushCaches+0x88>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a19      	ldr	r2, [pc, #100]	; (8005f64 <FLASH_FlushCaches+0x88>)
 8005efe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	4b17      	ldr	r3, [pc, #92]	; (8005f64 <FLASH_FlushCaches+0x88>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a16      	ldr	r2, [pc, #88]	; (8005f64 <FLASH_FlushCaches+0x88>)
 8005f0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f0e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005f10:	4b14      	ldr	r3, [pc, #80]	; (8005f64 <FLASH_FlushCaches+0x88>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a13      	ldr	r2, [pc, #76]	; (8005f64 <FLASH_FlushCaches+0x88>)
 8005f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f1a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005f1c:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <FLASH_FlushCaches+0x88>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d017      	beq.n	8005f58 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005f28:	4b0e      	ldr	r3, [pc, #56]	; (8005f64 <FLASH_FlushCaches+0x88>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a0d      	ldr	r2, [pc, #52]	; (8005f64 <FLASH_FlushCaches+0x88>)
 8005f2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f32:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005f34:	4b0b      	ldr	r3, [pc, #44]	; (8005f64 <FLASH_FlushCaches+0x88>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a0a      	ldr	r2, [pc, #40]	; (8005f64 <FLASH_FlushCaches+0x88>)
 8005f3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	4b08      	ldr	r3, [pc, #32]	; (8005f64 <FLASH_FlushCaches+0x88>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a07      	ldr	r2, [pc, #28]	; (8005f64 <FLASH_FlushCaches+0x88>)
 8005f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f4a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005f4c:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <FLASH_FlushCaches+0x88>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a04      	ldr	r2, [pc, #16]	; (8005f64 <FLASH_FlushCaches+0x88>)
 8005f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f56:	6013      	str	r3, [r2, #0]
  }
}
 8005f58:	bf00      	nop
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40023c00 	.word	0x40023c00

08005f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b089      	sub	sp, #36	; 0x24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61fb      	str	r3, [r7, #28]
 8005f82:	e16b      	b.n	800625c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f84:	2201      	movs	r2, #1
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4013      	ands	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	f040 815a 	bne.w	8006256 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f003 0303 	and.w	r3, r3, #3
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d005      	beq.n	8005fba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d130      	bne.n	800601c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	2203      	movs	r2, #3
 8005fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	091b      	lsrs	r3, r3, #4
 8006006:	f003 0201 	and.w	r2, r3, #1
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	fa02 f303 	lsl.w	r3, r2, r3
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	4313      	orrs	r3, r2
 8006014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f003 0303 	and.w	r3, r3, #3
 8006024:	2b03      	cmp	r3, #3
 8006026:	d017      	beq.n	8006058 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	2203      	movs	r2, #3
 8006034:	fa02 f303 	lsl.w	r3, r2, r3
 8006038:	43db      	mvns	r3, r3
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	4013      	ands	r3, r2
 800603e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	fa02 f303 	lsl.w	r3, r2, r3
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	4313      	orrs	r3, r2
 8006050:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f003 0303 	and.w	r3, r3, #3
 8006060:	2b02      	cmp	r3, #2
 8006062:	d123      	bne.n	80060ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	08da      	lsrs	r2, r3, #3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3208      	adds	r2, #8
 800606c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	f003 0307 	and.w	r3, r3, #7
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	220f      	movs	r2, #15
 800607c:	fa02 f303 	lsl.w	r3, r2, r3
 8006080:	43db      	mvns	r3, r3
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	4013      	ands	r3, r2
 8006086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	f003 0307 	and.w	r3, r3, #7
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	4313      	orrs	r3, r2
 800609c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	08da      	lsrs	r2, r3, #3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	3208      	adds	r2, #8
 80060a6:	69b9      	ldr	r1, [r7, #24]
 80060a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	2203      	movs	r2, #3
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	43db      	mvns	r3, r3
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	4013      	ands	r3, r2
 80060c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f003 0203 	and.w	r2, r3, #3
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	fa02 f303 	lsl.w	r3, r2, r3
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 80b4 	beq.w	8006256 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	4b60      	ldr	r3, [pc, #384]	; (8006274 <HAL_GPIO_Init+0x30c>)
 80060f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f6:	4a5f      	ldr	r2, [pc, #380]	; (8006274 <HAL_GPIO_Init+0x30c>)
 80060f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060fc:	6453      	str	r3, [r2, #68]	; 0x44
 80060fe:	4b5d      	ldr	r3, [pc, #372]	; (8006274 <HAL_GPIO_Init+0x30c>)
 8006100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800610a:	4a5b      	ldr	r2, [pc, #364]	; (8006278 <HAL_GPIO_Init+0x310>)
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	089b      	lsrs	r3, r3, #2
 8006110:	3302      	adds	r3, #2
 8006112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	220f      	movs	r2, #15
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	43db      	mvns	r3, r3
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	4013      	ands	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a52      	ldr	r2, [pc, #328]	; (800627c <HAL_GPIO_Init+0x314>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d02b      	beq.n	800618e <HAL_GPIO_Init+0x226>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a51      	ldr	r2, [pc, #324]	; (8006280 <HAL_GPIO_Init+0x318>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d025      	beq.n	800618a <HAL_GPIO_Init+0x222>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a50      	ldr	r2, [pc, #320]	; (8006284 <HAL_GPIO_Init+0x31c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d01f      	beq.n	8006186 <HAL_GPIO_Init+0x21e>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a4f      	ldr	r2, [pc, #316]	; (8006288 <HAL_GPIO_Init+0x320>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d019      	beq.n	8006182 <HAL_GPIO_Init+0x21a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a4e      	ldr	r2, [pc, #312]	; (800628c <HAL_GPIO_Init+0x324>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d013      	beq.n	800617e <HAL_GPIO_Init+0x216>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a4d      	ldr	r2, [pc, #308]	; (8006290 <HAL_GPIO_Init+0x328>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d00d      	beq.n	800617a <HAL_GPIO_Init+0x212>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a4c      	ldr	r2, [pc, #304]	; (8006294 <HAL_GPIO_Init+0x32c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d007      	beq.n	8006176 <HAL_GPIO_Init+0x20e>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a4b      	ldr	r2, [pc, #300]	; (8006298 <HAL_GPIO_Init+0x330>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d101      	bne.n	8006172 <HAL_GPIO_Init+0x20a>
 800616e:	2307      	movs	r3, #7
 8006170:	e00e      	b.n	8006190 <HAL_GPIO_Init+0x228>
 8006172:	2308      	movs	r3, #8
 8006174:	e00c      	b.n	8006190 <HAL_GPIO_Init+0x228>
 8006176:	2306      	movs	r3, #6
 8006178:	e00a      	b.n	8006190 <HAL_GPIO_Init+0x228>
 800617a:	2305      	movs	r3, #5
 800617c:	e008      	b.n	8006190 <HAL_GPIO_Init+0x228>
 800617e:	2304      	movs	r3, #4
 8006180:	e006      	b.n	8006190 <HAL_GPIO_Init+0x228>
 8006182:	2303      	movs	r3, #3
 8006184:	e004      	b.n	8006190 <HAL_GPIO_Init+0x228>
 8006186:	2302      	movs	r3, #2
 8006188:	e002      	b.n	8006190 <HAL_GPIO_Init+0x228>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <HAL_GPIO_Init+0x228>
 800618e:	2300      	movs	r3, #0
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	f002 0203 	and.w	r2, r2, #3
 8006196:	0092      	lsls	r2, r2, #2
 8006198:	4093      	lsls	r3, r2
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	4313      	orrs	r3, r2
 800619e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061a0:	4935      	ldr	r1, [pc, #212]	; (8006278 <HAL_GPIO_Init+0x310>)
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	089b      	lsrs	r3, r3, #2
 80061a6:	3302      	adds	r3, #2
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80061ae:	4b3b      	ldr	r3, [pc, #236]	; (800629c <HAL_GPIO_Init+0x334>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	43db      	mvns	r3, r3
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	4013      	ands	r3, r2
 80061bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80061d2:	4a32      	ldr	r2, [pc, #200]	; (800629c <HAL_GPIO_Init+0x334>)
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80061d8:	4b30      	ldr	r3, [pc, #192]	; (800629c <HAL_GPIO_Init+0x334>)
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	43db      	mvns	r3, r3
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	4013      	ands	r3, r2
 80061e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061fc:	4a27      	ldr	r2, [pc, #156]	; (800629c <HAL_GPIO_Init+0x334>)
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006202:	4b26      	ldr	r3, [pc, #152]	; (800629c <HAL_GPIO_Init+0x334>)
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	43db      	mvns	r3, r3
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	4013      	ands	r3, r2
 8006210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	4313      	orrs	r3, r2
 8006224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006226:	4a1d      	ldr	r2, [pc, #116]	; (800629c <HAL_GPIO_Init+0x334>)
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800622c:	4b1b      	ldr	r3, [pc, #108]	; (800629c <HAL_GPIO_Init+0x334>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	43db      	mvns	r3, r3
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	4013      	ands	r3, r2
 800623a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006250:	4a12      	ldr	r2, [pc, #72]	; (800629c <HAL_GPIO_Init+0x334>)
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	3301      	adds	r3, #1
 800625a:	61fb      	str	r3, [r7, #28]
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	2b0f      	cmp	r3, #15
 8006260:	f67f ae90 	bls.w	8005f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop
 8006268:	3724      	adds	r7, #36	; 0x24
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40023800 	.word	0x40023800
 8006278:	40013800 	.word	0x40013800
 800627c:	40020000 	.word	0x40020000
 8006280:	40020400 	.word	0x40020400
 8006284:	40020800 	.word	0x40020800
 8006288:	40020c00 	.word	0x40020c00
 800628c:	40021000 	.word	0x40021000
 8006290:	40021400 	.word	0x40021400
 8006294:	40021800 	.word	0x40021800
 8006298:	40021c00 	.word	0x40021c00
 800629c:	40013c00 	.word	0x40013c00

080062a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	807b      	strh	r3, [r7, #2]
 80062ac:	4613      	mov	r3, r2
 80062ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062b0:	787b      	ldrb	r3, [r7, #1]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062b6:	887a      	ldrh	r2, [r7, #2]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80062bc:	e003      	b.n	80062c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80062be:	887b      	ldrh	r3, [r7, #2]
 80062c0:	041a      	lsls	r2, r3, #16
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	619a      	str	r2, [r3, #24]
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b085      	sub	sp, #20
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	460b      	mov	r3, r1
 80062dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80062e4:	887a      	ldrh	r2, [r7, #2]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	4013      	ands	r3, r2
 80062ea:	041a      	lsls	r2, r3, #16
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	43d9      	mvns	r1, r3
 80062f0:	887b      	ldrh	r3, [r7, #2]
 80062f2:	400b      	ands	r3, r1
 80062f4:	431a      	orrs	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	619a      	str	r2, [r3, #24]
}
 80062fa:	bf00      	nop
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
	...

08006308 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e12b      	b.n	8006572 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d106      	bne.n	8006334 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7fc feb4 	bl	800309c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2224      	movs	r2, #36	; 0x24
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0201 	bic.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800635a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800636a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800636c:	f002 f9a0 	bl	80086b0 <HAL_RCC_GetPCLK1Freq>
 8006370:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	4a81      	ldr	r2, [pc, #516]	; (800657c <HAL_I2C_Init+0x274>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d807      	bhi.n	800638c <HAL_I2C_Init+0x84>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4a80      	ldr	r2, [pc, #512]	; (8006580 <HAL_I2C_Init+0x278>)
 8006380:	4293      	cmp	r3, r2
 8006382:	bf94      	ite	ls
 8006384:	2301      	movls	r3, #1
 8006386:	2300      	movhi	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	e006      	b.n	800639a <HAL_I2C_Init+0x92>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4a7d      	ldr	r2, [pc, #500]	; (8006584 <HAL_I2C_Init+0x27c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	bf94      	ite	ls
 8006394:	2301      	movls	r3, #1
 8006396:	2300      	movhi	r3, #0
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e0e7      	b.n	8006572 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4a78      	ldr	r2, [pc, #480]	; (8006588 <HAL_I2C_Init+0x280>)
 80063a6:	fba2 2303 	umull	r2, r3, r2, r3
 80063aa:	0c9b      	lsrs	r3, r3, #18
 80063ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	430a      	orrs	r2, r1
 80063c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	4a6a      	ldr	r2, [pc, #424]	; (800657c <HAL_I2C_Init+0x274>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d802      	bhi.n	80063dc <HAL_I2C_Init+0xd4>
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	3301      	adds	r3, #1
 80063da:	e009      	b.n	80063f0 <HAL_I2C_Init+0xe8>
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80063e2:	fb02 f303 	mul.w	r3, r2, r3
 80063e6:	4a69      	ldr	r2, [pc, #420]	; (800658c <HAL_I2C_Init+0x284>)
 80063e8:	fba2 2303 	umull	r2, r3, r2, r3
 80063ec:	099b      	lsrs	r3, r3, #6
 80063ee:	3301      	adds	r3, #1
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6812      	ldr	r2, [r2, #0]
 80063f4:	430b      	orrs	r3, r1
 80063f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006402:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	495c      	ldr	r1, [pc, #368]	; (800657c <HAL_I2C_Init+0x274>)
 800640c:	428b      	cmp	r3, r1
 800640e:	d819      	bhi.n	8006444 <HAL_I2C_Init+0x13c>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	1e59      	subs	r1, r3, #1
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	fbb1 f3f3 	udiv	r3, r1, r3
 800641e:	1c59      	adds	r1, r3, #1
 8006420:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006424:	400b      	ands	r3, r1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <HAL_I2C_Init+0x138>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	1e59      	subs	r1, r3, #1
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	fbb1 f3f3 	udiv	r3, r1, r3
 8006438:	3301      	adds	r3, #1
 800643a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800643e:	e051      	b.n	80064e4 <HAL_I2C_Init+0x1dc>
 8006440:	2304      	movs	r3, #4
 8006442:	e04f      	b.n	80064e4 <HAL_I2C_Init+0x1dc>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d111      	bne.n	8006470 <HAL_I2C_Init+0x168>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	1e58      	subs	r0, r3, #1
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6859      	ldr	r1, [r3, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	440b      	add	r3, r1
 800645a:	fbb0 f3f3 	udiv	r3, r0, r3
 800645e:	3301      	adds	r3, #1
 8006460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006464:	2b00      	cmp	r3, #0
 8006466:	bf0c      	ite	eq
 8006468:	2301      	moveq	r3, #1
 800646a:	2300      	movne	r3, #0
 800646c:	b2db      	uxtb	r3, r3
 800646e:	e012      	b.n	8006496 <HAL_I2C_Init+0x18e>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	1e58      	subs	r0, r3, #1
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6859      	ldr	r1, [r3, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	440b      	add	r3, r1
 800647e:	0099      	lsls	r1, r3, #2
 8006480:	440b      	add	r3, r1
 8006482:	fbb0 f3f3 	udiv	r3, r0, r3
 8006486:	3301      	adds	r3, #1
 8006488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800648c:	2b00      	cmp	r3, #0
 800648e:	bf0c      	ite	eq
 8006490:	2301      	moveq	r3, #1
 8006492:	2300      	movne	r3, #0
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <HAL_I2C_Init+0x196>
 800649a:	2301      	movs	r3, #1
 800649c:	e022      	b.n	80064e4 <HAL_I2C_Init+0x1dc>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10e      	bne.n	80064c4 <HAL_I2C_Init+0x1bc>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	1e58      	subs	r0, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6859      	ldr	r1, [r3, #4]
 80064ae:	460b      	mov	r3, r1
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	440b      	add	r3, r1
 80064b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80064b8:	3301      	adds	r3, #1
 80064ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c2:	e00f      	b.n	80064e4 <HAL_I2C_Init+0x1dc>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	1e58      	subs	r0, r3, #1
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6859      	ldr	r1, [r3, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	440b      	add	r3, r1
 80064d2:	0099      	lsls	r1, r3, #2
 80064d4:	440b      	add	r3, r1
 80064d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80064da:	3301      	adds	r3, #1
 80064dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	6809      	ldr	r1, [r1, #0]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69da      	ldr	r2, [r3, #28]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	431a      	orrs	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006512:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6911      	ldr	r1, [r2, #16]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	68d2      	ldr	r2, [r2, #12]
 800651e:	4311      	orrs	r1, r2
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	6812      	ldr	r2, [r2, #0]
 8006524:	430b      	orrs	r3, r1
 8006526:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695a      	ldr	r2, [r3, #20]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	431a      	orrs	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 0201 	orr.w	r2, r2, #1
 8006552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2220      	movs	r2, #32
 800655e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	000186a0 	.word	0x000186a0
 8006580:	001e847f 	.word	0x001e847f
 8006584:	003d08ff 	.word	0x003d08ff
 8006588:	431bde83 	.word	0x431bde83
 800658c:	10624dd3 	.word	0x10624dd3

08006590 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	607a      	str	r2, [r7, #4]
 800659a:	461a      	mov	r2, r3
 800659c:	460b      	mov	r3, r1
 800659e:	817b      	strh	r3, [r7, #10]
 80065a0:	4613      	mov	r3, r2
 80065a2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	f040 808d 	bne.w	80066d0 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80065b6:	4b4a      	ldr	r3, [pc, #296]	; (80066e0 <HAL_I2C_Master_Receive_IT+0x150>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	08db      	lsrs	r3, r3, #3
 80065bc:	4a49      	ldr	r2, [pc, #292]	; (80066e4 <HAL_I2C_Master_Receive_IT+0x154>)
 80065be:	fba2 2303 	umull	r2, r3, r2, r3
 80065c2:	0a1a      	lsrs	r2, r3, #8
 80065c4:	4613      	mov	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	009a      	lsls	r2, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	3b01      	subs	r3, #1
 80065d4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d116      	bne.n	800660a <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2220      	movs	r2, #32
 80065e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	f043 0220 	orr.w	r2, r3, #32
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e063      	b.n	80066d2 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	2b02      	cmp	r3, #2
 8006616:	d0db      	beq.n	80065d0 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800661e:	2b01      	cmp	r3, #1
 8006620:	d101      	bne.n	8006626 <HAL_I2C_Master_Receive_IT+0x96>
 8006622:	2302      	movs	r3, #2
 8006624:	e055      	b.n	80066d2 <HAL_I2C_Master_Receive_IT+0x142>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b01      	cmp	r3, #1
 800663a:	d007      	beq.n	800664c <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f042 0201 	orr.w	r2, r2, #1
 800664a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800665a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2222      	movs	r2, #34	; 0x22
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2210      	movs	r2, #16
 8006668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	893a      	ldrh	r2, [r7, #8]
 800667c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006682:	b29a      	uxth	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4a17      	ldr	r2, [pc, #92]	; (80066e8 <HAL_I2C_Master_Receive_IT+0x158>)
 800668c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800668e:	897a      	ldrh	r2, [r7, #10]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80066aa:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066ba:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066ca:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	e000      	b.n	80066d2 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 80066d0:	2302      	movs	r3, #2
  }
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	20000034 	.word	0x20000034
 80066e4:	14f8b589 	.word	0x14f8b589
 80066e8:	ffff0000 	.word	0xffff0000

080066ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800670c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006714:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006716:	7bfb      	ldrb	r3, [r7, #15]
 8006718:	2b10      	cmp	r3, #16
 800671a:	d003      	beq.n	8006724 <HAL_I2C_EV_IRQHandler+0x38>
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	2b40      	cmp	r3, #64	; 0x40
 8006720:	f040 80c1 	bne.w	80068a6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10d      	bne.n	800675a <HAL_I2C_EV_IRQHandler+0x6e>
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006744:	d003      	beq.n	800674e <HAL_I2C_EV_IRQHandler+0x62>
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800674c:	d101      	bne.n	8006752 <HAL_I2C_EV_IRQHandler+0x66>
 800674e:	2301      	movs	r3, #1
 8006750:	e000      	b.n	8006754 <HAL_I2C_EV_IRQHandler+0x68>
 8006752:	2300      	movs	r3, #0
 8006754:	2b01      	cmp	r3, #1
 8006756:	f000 8132 	beq.w	80069be <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00c      	beq.n	800677e <HAL_I2C_EV_IRQHandler+0x92>
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	0a5b      	lsrs	r3, r3, #9
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	d006      	beq.n	800677e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f001 fb51 	bl	8007e18 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fcc8 	bl	800710c <I2C_Master_SB>
 800677c:	e092      	b.n	80068a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	08db      	lsrs	r3, r3, #3
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d009      	beq.n	800679e <HAL_I2C_EV_IRQHandler+0xb2>
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	0a5b      	lsrs	r3, r3, #9
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fd3e 	bl	8007218 <I2C_Master_ADD10>
 800679c:	e082      	b.n	80068a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	085b      	lsrs	r3, r3, #1
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d009      	beq.n	80067be <HAL_I2C_EV_IRQHandler+0xd2>
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	0a5b      	lsrs	r3, r3, #9
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fd58 	bl	800726c <I2C_Master_ADDR>
 80067bc:	e072      	b.n	80068a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	089b      	lsrs	r3, r3, #2
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d03b      	beq.n	8006842 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067d8:	f000 80f3 	beq.w	80069c2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	09db      	lsrs	r3, r3, #7
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00f      	beq.n	8006808 <HAL_I2C_EV_IRQHandler+0x11c>
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	0a9b      	lsrs	r3, r3, #10
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d009      	beq.n	8006808 <HAL_I2C_EV_IRQHandler+0x11c>
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	089b      	lsrs	r3, r3, #2
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d103      	bne.n	8006808 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f938 	bl	8006a76 <I2C_MasterTransmit_TXE>
 8006806:	e04d      	b.n	80068a4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	089b      	lsrs	r3, r3, #2
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 80d6 	beq.w	80069c2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	0a5b      	lsrs	r3, r3, #9
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 80cf 	beq.w	80069c2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006824:	7bbb      	ldrb	r3, [r7, #14]
 8006826:	2b21      	cmp	r3, #33	; 0x21
 8006828:	d103      	bne.n	8006832 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f9bf 	bl	8006bae <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006830:	e0c7      	b.n	80069c2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006832:	7bfb      	ldrb	r3, [r7, #15]
 8006834:	2b40      	cmp	r3, #64	; 0x40
 8006836:	f040 80c4 	bne.w	80069c2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fa2d 	bl	8006c9a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006840:	e0bf      	b.n	80069c2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800684c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006850:	f000 80b7 	beq.w	80069c2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	099b      	lsrs	r3, r3, #6
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00f      	beq.n	8006880 <HAL_I2C_EV_IRQHandler+0x194>
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	0a9b      	lsrs	r3, r3, #10
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	2b00      	cmp	r3, #0
 800686a:	d009      	beq.n	8006880 <HAL_I2C_EV_IRQHandler+0x194>
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	089b      	lsrs	r3, r3, #2
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d103      	bne.n	8006880 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 faa2 	bl	8006dc2 <I2C_MasterReceive_RXNE>
 800687e:	e011      	b.n	80068a4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	089b      	lsrs	r3, r3, #2
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 809a 	beq.w	80069c2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	0a5b      	lsrs	r3, r3, #9
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 8093 	beq.w	80069c2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fb4b 	bl	8006f38 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068a2:	e08e      	b.n	80069c2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80068a4:	e08d      	b.n	80069c2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d004      	beq.n	80068b8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	61fb      	str	r3, [r7, #28]
 80068b6:	e007      	b.n	80068c8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	085b      	lsrs	r3, r3, #1
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d012      	beq.n	80068fa <HAL_I2C_EV_IRQHandler+0x20e>
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	0a5b      	lsrs	r3, r3, #9
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00c      	beq.n	80068fa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d003      	beq.n	80068f0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80068f0:	69b9      	ldr	r1, [r7, #24]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 ff09 	bl	800770a <I2C_Slave_ADDR>
 80068f8:	e066      	b.n	80069c8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	091b      	lsrs	r3, r3, #4
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d009      	beq.n	800691a <HAL_I2C_EV_IRQHandler+0x22e>
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	0a5b      	lsrs	r3, r3, #9
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 ff44 	bl	80077a0 <I2C_Slave_STOPF>
 8006918:	e056      	b.n	80069c8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800691a:	7bbb      	ldrb	r3, [r7, #14]
 800691c:	2b21      	cmp	r3, #33	; 0x21
 800691e:	d002      	beq.n	8006926 <HAL_I2C_EV_IRQHandler+0x23a>
 8006920:	7bbb      	ldrb	r3, [r7, #14]
 8006922:	2b29      	cmp	r3, #41	; 0x29
 8006924:	d125      	bne.n	8006972 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	09db      	lsrs	r3, r3, #7
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00f      	beq.n	8006952 <HAL_I2C_EV_IRQHandler+0x266>
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	0a9b      	lsrs	r3, r3, #10
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d009      	beq.n	8006952 <HAL_I2C_EV_IRQHandler+0x266>
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	089b      	lsrs	r3, r3, #2
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d103      	bne.n	8006952 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fe1f 	bl	800758e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006950:	e039      	b.n	80069c6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	089b      	lsrs	r3, r3, #2
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d033      	beq.n	80069c6 <HAL_I2C_EV_IRQHandler+0x2da>
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	0a5b      	lsrs	r3, r3, #9
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d02d      	beq.n	80069c6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fe4c 	bl	8007608 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006970:	e029      	b.n	80069c6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	099b      	lsrs	r3, r3, #6
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00f      	beq.n	800699e <HAL_I2C_EV_IRQHandler+0x2b2>
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	0a9b      	lsrs	r3, r3, #10
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d009      	beq.n	800699e <HAL_I2C_EV_IRQHandler+0x2b2>
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	089b      	lsrs	r3, r3, #2
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d103      	bne.n	800699e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fe57 	bl	800764a <I2C_SlaveReceive_RXNE>
 800699c:	e014      	b.n	80069c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	089b      	lsrs	r3, r3, #2
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00e      	beq.n	80069c8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	0a5b      	lsrs	r3, r3, #9
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d008      	beq.n	80069c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fe85 	bl	80076c6 <I2C_SlaveReceive_BTF>
 80069bc:	e004      	b.n	80069c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80069be:	bf00      	nop
 80069c0:	e002      	b.n	80069c8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069c2:	bf00      	nop
 80069c4:	e000      	b.n	80069c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80069c6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80069c8:	3720      	adds	r7, #32
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80069ea:	bf00      	nop
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	460b      	mov	r3, r1
 8006a00:	70fb      	strb	r3, [r7, #3]
 8006a02:	4613      	mov	r3, r2
 8006a04:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b083      	sub	sp, #12
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006a1a:	bf00      	nop
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006a2e:	bf00      	nop
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006a42:	bf00      	nop
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b083      	sub	sp, #12
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006a56:	bf00      	nop
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006a6a:	bf00      	nop
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a84:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a8c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a92:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d150      	bne.n	8006b3e <I2C_MasterTransmit_TXE+0xc8>
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	2b21      	cmp	r3, #33	; 0x21
 8006aa0:	d14d      	bne.n	8006b3e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b08      	cmp	r3, #8
 8006aa6:	d01d      	beq.n	8006ae4 <I2C_MasterTransmit_TXE+0x6e>
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	d01a      	beq.n	8006ae4 <I2C_MasterTransmit_TXE+0x6e>
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ab4:	d016      	beq.n	8006ae4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ac4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2211      	movs	r2, #17
 8006aca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7fa fdd3 	bl	8001688 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ae2:	e060      	b.n	8006ba6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006af2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b02:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b40      	cmp	r3, #64	; 0x40
 8006b1c:	d107      	bne.n	8006b2e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7ff ff7d 	bl	8006a26 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b2c:	e03b      	b.n	8006ba6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7fa fda6 	bl	8001688 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b3c:	e033      	b.n	8006ba6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	2b21      	cmp	r3, #33	; 0x21
 8006b42:	d005      	beq.n	8006b50 <I2C_MasterTransmit_TXE+0xda>
 8006b44:	7bbb      	ldrb	r3, [r7, #14]
 8006b46:	2b40      	cmp	r3, #64	; 0x40
 8006b48:	d12d      	bne.n	8006ba6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
 8006b4c:	2b22      	cmp	r3, #34	; 0x22
 8006b4e:	d12a      	bne.n	8006ba6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d108      	bne.n	8006b6c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b68:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006b6a:	e01c      	b.n	8006ba6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b40      	cmp	r3, #64	; 0x40
 8006b76:	d103      	bne.n	8006b80 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f88e 	bl	8006c9a <I2C_MemoryTransmit_TXE_BTF>
}
 8006b7e:	e012      	b.n	8006ba6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	781a      	ldrb	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006ba4:	e7ff      	b.n	8006ba6 <I2C_MasterTransmit_TXE+0x130>
 8006ba6:	bf00      	nop
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bba:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b21      	cmp	r3, #33	; 0x21
 8006bc6:	d164      	bne.n	8006c92 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d012      	beq.n	8006bf8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	781a      	ldrb	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	1c5a      	adds	r2, r3, #1
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006bf6:	e04c      	b.n	8006c92 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2b08      	cmp	r3, #8
 8006bfc:	d01d      	beq.n	8006c3a <I2C_MasterTransmit_BTF+0x8c>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b20      	cmp	r3, #32
 8006c02:	d01a      	beq.n	8006c3a <I2C_MasterTransmit_BTF+0x8c>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c0a:	d016      	beq.n	8006c3a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c1a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2211      	movs	r2, #17
 8006c20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7fa fd28 	bl	8001688 <HAL_I2C_MasterTxCpltCallback>
}
 8006c38:	e02b      	b.n	8006c92 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c48:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c58:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2220      	movs	r2, #32
 8006c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b40      	cmp	r3, #64	; 0x40
 8006c72:	d107      	bne.n	8006c84 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f7ff fed2 	bl	8006a26 <HAL_I2C_MemTxCpltCallback>
}
 8006c82:	e006      	b.n	8006c92 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7fa fcfb 	bl	8001688 <HAL_I2C_MasterTxCpltCallback>
}
 8006c92:	bf00      	nop
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b084      	sub	sp, #16
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d11d      	bne.n	8006cee <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d10b      	bne.n	8006cd2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cca:	1c9a      	adds	r2, r3, #2
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006cd0:	e073      	b.n	8006dba <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	121b      	asrs	r3, r3, #8
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006cec:	e065      	b.n	8006dba <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d10b      	bne.n	8006d0e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006d0c:	e055      	b.n	8006dba <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d151      	bne.n	8006dba <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
 8006d18:	2b22      	cmp	r3, #34	; 0x22
 8006d1a:	d10d      	bne.n	8006d38 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d2a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006d36:	e040      	b.n	8006dba <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d015      	beq.n	8006d6e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
 8006d44:	2b21      	cmp	r3, #33	; 0x21
 8006d46:	d112      	bne.n	8006d6e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	781a      	ldrb	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	3b01      	subs	r3, #1
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006d6c:	e025      	b.n	8006dba <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d120      	bne.n	8006dba <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
 8006d7a:	2b21      	cmp	r3, #33	; 0x21
 8006d7c:	d11d      	bne.n	8006dba <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d8c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d9c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2220      	movs	r2, #32
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7ff fe36 	bl	8006a26 <HAL_I2C_MemTxCpltCallback>
}
 8006dba:	bf00      	nop
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b22      	cmp	r3, #34	; 0x22
 8006dd4:	f040 80ac 	bne.w	8006f30 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d921      	bls.n	8006e2a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	691a      	ldr	r2, [r3, #16]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	3b01      	subs	r3, #1
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	f040 808c 	bne.w	8006f30 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e26:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006e28:	e082      	b.n	8006f30 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d075      	beq.n	8006f1e <I2C_MasterReceive_RXNE+0x15c>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d002      	beq.n	8006e3e <I2C_MasterReceive_RXNE+0x7c>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d16f      	bne.n	8006f1e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 ffb8 	bl	8007db4 <I2C_WaitOnSTOPRequestThroughIT>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d142      	bne.n	8006ed0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e58:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e68:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	691a      	ldr	r2, [r3, #16]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e74:	b2d2      	uxtb	r2, r2
 8006e76:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2220      	movs	r2, #32
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b40      	cmp	r3, #64	; 0x40
 8006ea2:	d10a      	bne.n	8006eba <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7ff fdc1 	bl	8006a3a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006eb8:	e03a      	b.n	8006f30 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2212      	movs	r2, #18
 8006ec6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7fa fbc7 	bl	800165c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006ece:	e02f      	b.n	8006f30 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ede:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	691a      	ldr	r2, [r3, #16]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eea:	b2d2      	uxtb	r2, r2
 8006eec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	1c5a      	adds	r2, r3, #1
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	3b01      	subs	r3, #1
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7ff fd99 	bl	8006a4e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006f1c:	e008      	b.n	8006f30 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f2c:	605a      	str	r2, [r3, #4]
}
 8006f2e:	e7ff      	b.n	8006f30 <I2C_MasterReceive_RXNE+0x16e>
 8006f30:	bf00      	nop
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f44:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d11b      	bne.n	8006f88 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f5e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	691a      	ldr	r2, [r3, #16]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	b2d2      	uxtb	r2, r2
 8006f6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006f86:	e0bd      	b.n	8007104 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d129      	bne.n	8006fe6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fa0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	d00a      	beq.n	8006fbe <I2C_MasterReceive_BTF+0x86>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d007      	beq.n	8006fbe <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fbc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	691a      	ldr	r2, [r3, #16]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	b2d2      	uxtb	r2, r2
 8006fca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006fe4:	e08e      	b.n	8007104 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d176      	bne.n	80070de <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d002      	beq.n	8006ffc <I2C_MasterReceive_BTF+0xc4>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2b10      	cmp	r3, #16
 8006ffa:	d108      	bne.n	800700e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	e019      	b.n	8007042 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2b04      	cmp	r3, #4
 8007012:	d002      	beq.n	800701a <I2C_MasterReceive_BTF+0xe2>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b02      	cmp	r3, #2
 8007018:	d108      	bne.n	800702c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	e00a      	b.n	8007042 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2b10      	cmp	r3, #16
 8007030:	d007      	beq.n	8007042 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007040:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	691a      	ldr	r2, [r3, #16]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704c:	b2d2      	uxtb	r2, r2
 800704e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007054:	1c5a      	adds	r2, r3, #1
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	b29a      	uxth	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	691a      	ldr	r2, [r3, #16]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007084:	b29b      	uxth	r3, r3
 8007086:	3b01      	subs	r3, #1
 8007088:	b29a      	uxth	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800709c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b40      	cmp	r3, #64	; 0x40
 80070b0:	d10a      	bne.n	80070c8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f7ff fcba 	bl	8006a3a <HAL_I2C_MemRxCpltCallback>
}
 80070c6:	e01d      	b.n	8007104 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2212      	movs	r2, #18
 80070d4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7fa fac0 	bl	800165c <HAL_I2C_MasterRxCpltCallback>
}
 80070dc:	e012      	b.n	8007104 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	691a      	ldr	r2, [r3, #16]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	b2d2      	uxtb	r2, r2
 80070ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	1c5a      	adds	r2, r3, #1
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	3b01      	subs	r3, #1
 80070fe:	b29a      	uxth	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007104:	bf00      	nop
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b40      	cmp	r3, #64	; 0x40
 800711e:	d117      	bne.n	8007150 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007124:	2b00      	cmp	r3, #0
 8007126:	d109      	bne.n	800713c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712c:	b2db      	uxtb	r3, r3
 800712e:	461a      	mov	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007138:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800713a:	e067      	b.n	800720c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007140:	b2db      	uxtb	r3, r3
 8007142:	f043 0301 	orr.w	r3, r3, #1
 8007146:	b2da      	uxtb	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	611a      	str	r2, [r3, #16]
}
 800714e:	e05d      	b.n	800720c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007158:	d133      	bne.n	80071c2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b21      	cmp	r3, #33	; 0x21
 8007164:	d109      	bne.n	800717a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716a:	b2db      	uxtb	r3, r3
 800716c:	461a      	mov	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007176:	611a      	str	r2, [r3, #16]
 8007178:	e008      	b.n	800718c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800717e:	b2db      	uxtb	r3, r3
 8007180:	f043 0301 	orr.w	r3, r3, #1
 8007184:	b2da      	uxtb	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007190:	2b00      	cmp	r3, #0
 8007192:	d004      	beq.n	800719e <I2C_Master_SB+0x92>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719a:	2b00      	cmp	r3, #0
 800719c:	d108      	bne.n	80071b0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d032      	beq.n	800720c <I2C_Master_SB+0x100>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d02d      	beq.n	800720c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071be:	605a      	str	r2, [r3, #4]
}
 80071c0:	e024      	b.n	800720c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10e      	bne.n	80071e8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	11db      	asrs	r3, r3, #7
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	f003 0306 	and.w	r3, r3, #6
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	f063 030f 	orn	r3, r3, #15
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	611a      	str	r2, [r3, #16]
}
 80071e6:	e011      	b.n	800720c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d10d      	bne.n	800720c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	11db      	asrs	r3, r3, #7
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	f003 0306 	and.w	r3, r3, #6
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	f063 030e 	orn	r3, r3, #14
 8007204:	b2da      	uxtb	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	611a      	str	r2, [r3, #16]
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007224:	b2da      	uxtb	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007230:	2b00      	cmp	r3, #0
 8007232:	d004      	beq.n	800723e <I2C_Master_ADD10+0x26>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723a:	2b00      	cmp	r3, #0
 800723c:	d108      	bne.n	8007250 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00c      	beq.n	8007260 <I2C_Master_ADD10+0x48>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724c:	2b00      	cmp	r3, #0
 800724e:	d007      	beq.n	8007260 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800725e:	605a      	str	r2, [r3, #4]
  }
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800726c:	b480      	push	{r7}
 800726e:	b091      	sub	sp, #68	; 0x44
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800727a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007282:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007288:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b22      	cmp	r3, #34	; 0x22
 8007294:	f040 8169 	bne.w	800756a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10f      	bne.n	80072c0 <I2C_Master_ADDR+0x54>
 80072a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80072a4:	2b40      	cmp	r3, #64	; 0x40
 80072a6:	d10b      	bne.n	80072c0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072a8:	2300      	movs	r3, #0
 80072aa:	633b      	str	r3, [r7, #48]	; 0x30
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	633b      	str	r3, [r7, #48]	; 0x30
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	633b      	str	r3, [r7, #48]	; 0x30
 80072bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072be:	e160      	b.n	8007582 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d11d      	bne.n	8007304 <I2C_Master_ADDR+0x98>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80072d0:	d118      	bne.n	8007304 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072d2:	2300      	movs	r3, #0
 80072d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072f6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	651a      	str	r2, [r3, #80]	; 0x50
 8007302:	e13e      	b.n	8007582 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007308:	b29b      	uxth	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d113      	bne.n	8007336 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800730e:	2300      	movs	r3, #0
 8007310:	62bb      	str	r3, [r7, #40]	; 0x28
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	62bb      	str	r3, [r7, #40]	; 0x28
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	62bb      	str	r3, [r7, #40]	; 0x28
 8007322:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	e115      	b.n	8007562 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733a:	b29b      	uxth	r3, r3
 800733c:	2b01      	cmp	r3, #1
 800733e:	f040 808a 	bne.w	8007456 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007344:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007348:	d137      	bne.n	80073ba <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007358:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007368:	d113      	bne.n	8007392 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007378:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800737a:	2300      	movs	r3, #0
 800737c:	627b      	str	r3, [r7, #36]	; 0x24
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	627b      	str	r3, [r7, #36]	; 0x24
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	627b      	str	r3, [r7, #36]	; 0x24
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	e0e7      	b.n	8007562 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007392:	2300      	movs	r3, #0
 8007394:	623b      	str	r3, [r7, #32]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	695b      	ldr	r3, [r3, #20]
 800739c:	623b      	str	r3, [r7, #32]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	623b      	str	r3, [r7, #32]
 80073a6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	e0d3      	b.n	8007562 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	2b08      	cmp	r3, #8
 80073be:	d02e      	beq.n	800741e <I2C_Master_ADDR+0x1b2>
 80073c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c2:	2b20      	cmp	r3, #32
 80073c4:	d02b      	beq.n	800741e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80073c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c8:	2b12      	cmp	r3, #18
 80073ca:	d102      	bne.n	80073d2 <I2C_Master_ADDR+0x166>
 80073cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d125      	bne.n	800741e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80073d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d4:	2b04      	cmp	r3, #4
 80073d6:	d00e      	beq.n	80073f6 <I2C_Master_ADDR+0x18a>
 80073d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d00b      	beq.n	80073f6 <I2C_Master_ADDR+0x18a>
 80073de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e0:	2b10      	cmp	r3, #16
 80073e2:	d008      	beq.n	80073f6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	e007      	b.n	8007406 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007404:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007406:	2300      	movs	r3, #0
 8007408:	61fb      	str	r3, [r7, #28]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	61fb      	str	r3, [r7, #28]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	61fb      	str	r3, [r7, #28]
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	e0a1      	b.n	8007562 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800742c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800742e:	2300      	movs	r3, #0
 8007430:	61bb      	str	r3, [r7, #24]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	61bb      	str	r3, [r7, #24]
 8007442:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	e085      	b.n	8007562 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800745a:	b29b      	uxth	r3, r3
 800745c:	2b02      	cmp	r3, #2
 800745e:	d14d      	bne.n	80074fc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	2b04      	cmp	r3, #4
 8007464:	d016      	beq.n	8007494 <I2C_Master_ADDR+0x228>
 8007466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007468:	2b02      	cmp	r3, #2
 800746a:	d013      	beq.n	8007494 <I2C_Master_ADDR+0x228>
 800746c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746e:	2b10      	cmp	r3, #16
 8007470:	d010      	beq.n	8007494 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007480:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	e007      	b.n	80074a4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074a2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074b2:	d117      	bne.n	80074e4 <I2C_Master_ADDR+0x278>
 80074b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074ba:	d00b      	beq.n	80074d4 <I2C_Master_ADDR+0x268>
 80074bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d008      	beq.n	80074d4 <I2C_Master_ADDR+0x268>
 80074c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c4:	2b08      	cmp	r3, #8
 80074c6:	d005      	beq.n	80074d4 <I2C_Master_ADDR+0x268>
 80074c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ca:	2b10      	cmp	r3, #16
 80074cc:	d002      	beq.n	80074d4 <I2C_Master_ADDR+0x268>
 80074ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d0:	2b20      	cmp	r3, #32
 80074d2:	d107      	bne.n	80074e4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685a      	ldr	r2, [r3, #4]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074e2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074e4:	2300      	movs	r3, #0
 80074e6:	617b      	str	r3, [r7, #20]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	617b      	str	r3, [r7, #20]
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	e032      	b.n	8007562 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800750a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800751a:	d117      	bne.n	800754c <I2C_Master_ADDR+0x2e0>
 800751c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007522:	d00b      	beq.n	800753c <I2C_Master_ADDR+0x2d0>
 8007524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007526:	2b01      	cmp	r3, #1
 8007528:	d008      	beq.n	800753c <I2C_Master_ADDR+0x2d0>
 800752a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752c:	2b08      	cmp	r3, #8
 800752e:	d005      	beq.n	800753c <I2C_Master_ADDR+0x2d0>
 8007530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007532:	2b10      	cmp	r3, #16
 8007534:	d002      	beq.n	800753c <I2C_Master_ADDR+0x2d0>
 8007536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007538:	2b20      	cmp	r3, #32
 800753a:	d107      	bne.n	800754c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800754a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800754c:	2300      	movs	r3, #0
 800754e:	613b      	str	r3, [r7, #16]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	613b      	str	r3, [r7, #16]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	613b      	str	r3, [r7, #16]
 8007560:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007568:	e00b      	b.n	8007582 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800756a:	2300      	movs	r3, #0
 800756c:	60fb      	str	r3, [r7, #12]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	60fb      	str	r3, [r7, #12]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	60fb      	str	r3, [r7, #12]
 800757e:	68fb      	ldr	r3, [r7, #12]
}
 8007580:	e7ff      	b.n	8007582 <I2C_Master_ADDR+0x316>
 8007582:	bf00      	nop
 8007584:	3744      	adds	r7, #68	; 0x44
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr

0800758e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b084      	sub	sp, #16
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800759c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d02b      	beq.n	8007600 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	781a      	ldrb	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	1c5a      	adds	r2, r3, #1
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	3b01      	subs	r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d114      	bne.n	8007600 <I2C_SlaveTransmit_TXE+0x72>
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
 80075d8:	2b29      	cmp	r3, #41	; 0x29
 80075da:	d111      	bne.n	8007600 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075ea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2221      	movs	r2, #33	; 0x21
 80075f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2228      	movs	r2, #40	; 0x28
 80075f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7ff f9e7 	bl	80069ce <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007600:	bf00      	nop
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007614:	b29b      	uxth	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d011      	beq.n	800763e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761e:	781a      	ldrb	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	1c5a      	adds	r2, r3, #1
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007634:	b29b      	uxth	r3, r3
 8007636:	3b01      	subs	r3, #1
 8007638:	b29a      	uxth	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800763e:	bf00      	nop
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b084      	sub	sp, #16
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007658:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800765e:	b29b      	uxth	r3, r3
 8007660:	2b00      	cmp	r3, #0
 8007662:	d02c      	beq.n	80076be <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	691a      	ldr	r2, [r3, #16]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	b2d2      	uxtb	r2, r2
 8007670:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007680:	b29b      	uxth	r3, r3
 8007682:	3b01      	subs	r3, #1
 8007684:	b29a      	uxth	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800768e:	b29b      	uxth	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d114      	bne.n	80076be <I2C_SlaveReceive_RXNE+0x74>
 8007694:	7bfb      	ldrb	r3, [r7, #15]
 8007696:	2b2a      	cmp	r3, #42	; 0x2a
 8007698:	d111      	bne.n	80076be <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076a8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2222      	movs	r2, #34	; 0x22
 80076ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2228      	movs	r2, #40	; 0x28
 80076b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f7ff f992 	bl	80069e2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80076be:	bf00      	nop
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d012      	beq.n	80076fe <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	691a      	ldr	r2, [r3, #16]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e2:	b2d2      	uxtb	r2, r2
 80076e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ea:	1c5a      	adds	r2, r3, #1
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	3b01      	subs	r3, #1
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80076fe:	bf00      	nop
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b084      	sub	sp, #16
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007714:	2300      	movs	r3, #0
 8007716:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800771e:	b2db      	uxtb	r3, r3
 8007720:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007724:	2b28      	cmp	r3, #40	; 0x28
 8007726:	d127      	bne.n	8007778 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007736:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	089b      	lsrs	r3, r3, #2
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	2b00      	cmp	r3, #0
 8007742:	d101      	bne.n	8007748 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007744:	2301      	movs	r3, #1
 8007746:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	09db      	lsrs	r3, r3, #7
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b00      	cmp	r3, #0
 8007752:	d103      	bne.n	800775c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	81bb      	strh	r3, [r7, #12]
 800775a:	e002      	b.n	8007762 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800776a:	89ba      	ldrh	r2, [r7, #12]
 800776c:	7bfb      	ldrb	r3, [r7, #15]
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff f940 	bl	80069f6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007776:	e00e      	b.n	8007796 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007778:	2300      	movs	r3, #0
 800777a:	60bb      	str	r3, [r7, #8]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	60bb      	str	r3, [r7, #8]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	60bb      	str	r3, [r7, #8]
 800778c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007796:	bf00      	nop
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685a      	ldr	r2, [r3, #4]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80077be:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80077c0:	2300      	movs	r3, #0
 80077c2:	60bb      	str	r3, [r7, #8]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	60bb      	str	r3, [r7, #8]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f042 0201 	orr.w	r2, r2, #1
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077ec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077fc:	d172      	bne.n	80078e4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
 8007800:	2b22      	cmp	r3, #34	; 0x22
 8007802:	d002      	beq.n	800780a <I2C_Slave_STOPF+0x6a>
 8007804:	7bfb      	ldrb	r3, [r7, #15]
 8007806:	2b2a      	cmp	r3, #42	; 0x2a
 8007808:	d135      	bne.n	8007876 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	b29a      	uxth	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800781c:	b29b      	uxth	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d005      	beq.n	800782e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007826:	f043 0204 	orr.w	r2, r3, #4
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800783c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007842:	4618      	mov	r0, r3
 8007844:	f7fd ffca 	bl	80057dc <HAL_DMA_GetState>
 8007848:	4603      	mov	r3, r0
 800784a:	2b01      	cmp	r3, #1
 800784c:	d049      	beq.n	80078e2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007852:	4a69      	ldr	r2, [pc, #420]	; (80079f8 <I2C_Slave_STOPF+0x258>)
 8007854:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785a:	4618      	mov	r0, r3
 800785c:	f7fd fe12 	bl	8005484 <HAL_DMA_Abort_IT>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d03d      	beq.n	80078e2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007870:	4610      	mov	r0, r2
 8007872:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007874:	e035      	b.n	80078e2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	b29a      	uxth	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007888:	b29b      	uxth	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	d005      	beq.n	800789a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007892:	f043 0204 	orr.w	r2, r3, #4
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fd ff94 	bl	80057dc <HAL_DMA_GetState>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d014      	beq.n	80078e4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078be:	4a4e      	ldr	r2, [pc, #312]	; (80079f8 <I2C_Slave_STOPF+0x258>)
 80078c0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fd fddc 	bl	8005484 <HAL_DMA_Abort_IT>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d008      	beq.n	80078e4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80078dc:	4610      	mov	r0, r2
 80078de:	4798      	blx	r3
 80078e0:	e000      	b.n	80078e4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80078e2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d03e      	beq.n	800796c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b04      	cmp	r3, #4
 80078fa:	d112      	bne.n	8007922 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	691a      	ldr	r2, [r3, #16]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007906:	b2d2      	uxtb	r2, r2
 8007908:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	1c5a      	adds	r2, r3, #1
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007918:	b29b      	uxth	r3, r3
 800791a:	3b01      	subs	r3, #1
 800791c:	b29a      	uxth	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	695b      	ldr	r3, [r3, #20]
 8007928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792c:	2b40      	cmp	r3, #64	; 0x40
 800792e:	d112      	bne.n	8007956 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	691a      	ldr	r2, [r3, #16]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793a:	b2d2      	uxtb	r2, r2
 800793c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800794c:	b29b      	uxth	r3, r3
 800794e:	3b01      	subs	r3, #1
 8007950:	b29a      	uxth	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800795a:	b29b      	uxth	r3, r3
 800795c:	2b00      	cmp	r3, #0
 800795e:	d005      	beq.n	800796c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007964:	f043 0204 	orr.w	r2, r3, #4
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007970:	2b00      	cmp	r3, #0
 8007972:	d003      	beq.n	800797c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f843 	bl	8007a00 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800797a:	e039      	b.n	80079f0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800797c:	7bfb      	ldrb	r3, [r7, #15]
 800797e:	2b2a      	cmp	r3, #42	; 0x2a
 8007980:	d109      	bne.n	8007996 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2228      	movs	r2, #40	; 0x28
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7ff f826 	bl	80069e2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b28      	cmp	r3, #40	; 0x28
 80079a0:	d111      	bne.n	80079c6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a15      	ldr	r2, [pc, #84]	; (80079fc <I2C_Slave_STOPF+0x25c>)
 80079a6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2220      	movs	r2, #32
 80079b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7ff f827 	bl	8006a12 <HAL_I2C_ListenCpltCallback>
}
 80079c4:	e014      	b.n	80079f0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ca:	2b22      	cmp	r3, #34	; 0x22
 80079cc:	d002      	beq.n	80079d4 <I2C_Slave_STOPF+0x234>
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	2b22      	cmp	r3, #34	; 0x22
 80079d2:	d10d      	bne.n	80079f0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2220      	movs	r2, #32
 80079de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7fe fff9 	bl	80069e2 <HAL_I2C_SlaveRxCpltCallback>
}
 80079f0:	bf00      	nop
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	08007c65 	.word	0x08007c65
 80079fc:	ffff0000 	.word	0xffff0000

08007a00 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a0e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a16:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007a18:	7bbb      	ldrb	r3, [r7, #14]
 8007a1a:	2b10      	cmp	r3, #16
 8007a1c:	d002      	beq.n	8007a24 <I2C_ITError+0x24>
 8007a1e:	7bbb      	ldrb	r3, [r7, #14]
 8007a20:	2b40      	cmp	r3, #64	; 0x40
 8007a22:	d10a      	bne.n	8007a3a <I2C_ITError+0x3a>
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
 8007a26:	2b22      	cmp	r3, #34	; 0x22
 8007a28:	d107      	bne.n	8007a3a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a38:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
 8007a3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a40:	2b28      	cmp	r3, #40	; 0x28
 8007a42:	d107      	bne.n	8007a54 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2228      	movs	r2, #40	; 0x28
 8007a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007a52:	e015      	b.n	8007a80 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a62:	d00a      	beq.n	8007a7a <I2C_ITError+0x7a>
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
 8007a66:	2b60      	cmp	r3, #96	; 0x60
 8007a68:	d007      	beq.n	8007a7a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a8e:	d162      	bne.n	8007b56 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a9e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d020      	beq.n	8007af0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab2:	4a6a      	ldr	r2, [pc, #424]	; (8007c5c <I2C_ITError+0x25c>)
 8007ab4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7fd fce2 	bl	8005484 <HAL_DMA_Abort_IT>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 8089 	beq.w	8007bda <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 0201 	bic.w	r2, r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2220      	movs	r2, #32
 8007adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007aea:	4610      	mov	r0, r2
 8007aec:	4798      	blx	r3
 8007aee:	e074      	b.n	8007bda <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af4:	4a59      	ldr	r2, [pc, #356]	; (8007c5c <I2C_ITError+0x25c>)
 8007af6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7fd fcc1 	bl	8005484 <HAL_DMA_Abort_IT>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d068      	beq.n	8007bda <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b12:	2b40      	cmp	r3, #64	; 0x40
 8007b14:	d10b      	bne.n	8007b2e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	691a      	ldr	r2, [r3, #16]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b20:	b2d2      	uxtb	r2, r2
 8007b22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b28:	1c5a      	adds	r2, r3, #1
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f022 0201 	bic.w	r2, r2, #1
 8007b3c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b50:	4610      	mov	r0, r2
 8007b52:	4798      	blx	r3
 8007b54:	e041      	b.n	8007bda <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b60      	cmp	r3, #96	; 0x60
 8007b60:	d125      	bne.n	8007bae <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2220      	movs	r2, #32
 8007b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	695b      	ldr	r3, [r3, #20]
 8007b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7a:	2b40      	cmp	r3, #64	; 0x40
 8007b7c:	d10b      	bne.n	8007b96 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	691a      	ldr	r2, [r3, #16]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b88:	b2d2      	uxtb	r2, r2
 8007b8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b90:	1c5a      	adds	r2, r3, #1
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f022 0201 	bic.w	r2, r2, #1
 8007ba4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7fe ff5b 	bl	8006a62 <HAL_I2C_AbortCpltCallback>
 8007bac:	e015      	b.n	8007bda <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb8:	2b40      	cmp	r3, #64	; 0x40
 8007bba:	d10b      	bne.n	8007bd4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	691a      	ldr	r2, [r3, #16]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	b2d2      	uxtb	r2, r2
 8007bc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bce:	1c5a      	adds	r2, r3, #1
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7fe ff3a 	bl	8006a4e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bde:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10e      	bne.n	8007c08 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d109      	bne.n	8007c08 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d104      	bne.n	8007c08 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d007      	beq.n	8007c18 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c16:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c1e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c24:	f003 0304 	and.w	r3, r3, #4
 8007c28:	2b04      	cmp	r3, #4
 8007c2a:	d113      	bne.n	8007c54 <I2C_ITError+0x254>
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
 8007c2e:	2b28      	cmp	r3, #40	; 0x28
 8007c30:	d110      	bne.n	8007c54 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a0a      	ldr	r2, [pc, #40]	; (8007c60 <I2C_ITError+0x260>)
 8007c36:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2220      	movs	r2, #32
 8007c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7fe fedf 	bl	8006a12 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007c54:	bf00      	nop
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	08007c65 	.word	0x08007c65
 8007c60:	ffff0000 	.word	0xffff0000

08007c64 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c74:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c7c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007c7e:	4b4b      	ldr	r3, [pc, #300]	; (8007dac <I2C_DMAAbort+0x148>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	08db      	lsrs	r3, r3, #3
 8007c84:	4a4a      	ldr	r2, [pc, #296]	; (8007db0 <I2C_DMAAbort+0x14c>)
 8007c86:	fba2 2303 	umull	r2, r3, r2, r3
 8007c8a:	0a1a      	lsrs	r2, r3, #8
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	00da      	lsls	r2, r3, #3
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d106      	bne.n	8007cac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca2:	f043 0220 	orr.w	r2, r3, #32
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007caa:	e00a      	b.n	8007cc2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cc0:	d0ea      	beq.n	8007c98 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cce:	2200      	movs	r2, #0
 8007cd0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cde:	2200      	movs	r2, #0
 8007ce0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cf0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d003      	beq.n	8007d08 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d04:	2200      	movs	r2, #0
 8007d06:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d003      	beq.n	8007d18 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d14:	2200      	movs	r2, #0
 8007d16:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 0201 	bic.w	r2, r2, #1
 8007d26:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b60      	cmp	r3, #96	; 0x60
 8007d32:	d10e      	bne.n	8007d52 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2220      	movs	r2, #32
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	2200      	movs	r2, #0
 8007d48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007d4a:	6978      	ldr	r0, [r7, #20]
 8007d4c:	f7fe fe89 	bl	8006a62 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007d50:	e027      	b.n	8007da2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d52:	7cfb      	ldrb	r3, [r7, #19]
 8007d54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007d58:	2b28      	cmp	r3, #40	; 0x28
 8007d5a:	d117      	bne.n	8007d8c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f042 0201 	orr.w	r2, r2, #1
 8007d6a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d7a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	2228      	movs	r2, #40	; 0x28
 8007d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007d8a:	e007      	b.n	8007d9c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2220      	movs	r2, #32
 8007d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007d9c:	6978      	ldr	r0, [r7, #20]
 8007d9e:	f7fe fe56 	bl	8006a4e <HAL_I2C_ErrorCallback>
}
 8007da2:	bf00      	nop
 8007da4:	3718      	adds	r7, #24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	20000034 	.word	0x20000034
 8007db0:	14f8b589 	.word	0x14f8b589

08007db4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007dc0:	4b13      	ldr	r3, [pc, #76]	; (8007e10 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	08db      	lsrs	r3, r3, #3
 8007dc6:	4a13      	ldr	r2, [pc, #76]	; (8007e14 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dcc:	0a1a      	lsrs	r2, r3, #8
 8007dce:	4613      	mov	r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d107      	bne.n	8007df2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de6:	f043 0220 	orr.w	r2, r3, #32
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e008      	b.n	8007e04 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e00:	d0e9      	beq.n	8007dd6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	20000034 	.word	0x20000034
 8007e14:	14f8b589 	.word	0x14f8b589

08007e18 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e24:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007e28:	d103      	bne.n	8007e32 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007e30:	e007      	b.n	8007e42 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e36:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007e3a:	d102      	bne.n	8007e42 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2208      	movs	r2, #8
 8007e40:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007e42:	bf00      	nop
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
	...

08007e50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e267      	b.n	8008332 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d075      	beq.n	8007f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e6e:	4b88      	ldr	r3, [pc, #544]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f003 030c 	and.w	r3, r3, #12
 8007e76:	2b04      	cmp	r3, #4
 8007e78:	d00c      	beq.n	8007e94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e7a:	4b85      	ldr	r3, [pc, #532]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e82:	2b08      	cmp	r3, #8
 8007e84:	d112      	bne.n	8007eac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e86:	4b82      	ldr	r3, [pc, #520]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e92:	d10b      	bne.n	8007eac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e94:	4b7e      	ldr	r3, [pc, #504]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d05b      	beq.n	8007f58 <HAL_RCC_OscConfig+0x108>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d157      	bne.n	8007f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e242      	b.n	8008332 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eb4:	d106      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x74>
 8007eb6:	4b76      	ldr	r3, [pc, #472]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a75      	ldr	r2, [pc, #468]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	e01d      	b.n	8007f00 <HAL_RCC_OscConfig+0xb0>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ecc:	d10c      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x98>
 8007ece:	4b70      	ldr	r3, [pc, #448]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a6f      	ldr	r2, [pc, #444]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ed8:	6013      	str	r3, [r2, #0]
 8007eda:	4b6d      	ldr	r3, [pc, #436]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a6c      	ldr	r2, [pc, #432]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ee4:	6013      	str	r3, [r2, #0]
 8007ee6:	e00b      	b.n	8007f00 <HAL_RCC_OscConfig+0xb0>
 8007ee8:	4b69      	ldr	r3, [pc, #420]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a68      	ldr	r2, [pc, #416]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ef2:	6013      	str	r3, [r2, #0]
 8007ef4:	4b66      	ldr	r3, [pc, #408]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a65      	ldr	r2, [pc, #404]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d013      	beq.n	8007f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f08:	f7fc fd00 	bl	800490c <HAL_GetTick>
 8007f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f0e:	e008      	b.n	8007f22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f10:	f7fc fcfc 	bl	800490c <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	2b64      	cmp	r3, #100	; 0x64
 8007f1c:	d901      	bls.n	8007f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e207      	b.n	8008332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f22:	4b5b      	ldr	r3, [pc, #364]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d0f0      	beq.n	8007f10 <HAL_RCC_OscConfig+0xc0>
 8007f2e:	e014      	b.n	8007f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f30:	f7fc fcec 	bl	800490c <HAL_GetTick>
 8007f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f36:	e008      	b.n	8007f4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f38:	f7fc fce8 	bl	800490c <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	2b64      	cmp	r3, #100	; 0x64
 8007f44:	d901      	bls.n	8007f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e1f3      	b.n	8008332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f4a:	4b51      	ldr	r3, [pc, #324]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1f0      	bne.n	8007f38 <HAL_RCC_OscConfig+0xe8>
 8007f56:	e000      	b.n	8007f5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 0302 	and.w	r3, r3, #2
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d063      	beq.n	800802e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007f66:	4b4a      	ldr	r3, [pc, #296]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f003 030c 	and.w	r3, r3, #12
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00b      	beq.n	8007f8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f72:	4b47      	ldr	r3, [pc, #284]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007f7a:	2b08      	cmp	r3, #8
 8007f7c:	d11c      	bne.n	8007fb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f7e:	4b44      	ldr	r3, [pc, #272]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d116      	bne.n	8007fb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f8a:	4b41      	ldr	r3, [pc, #260]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 0302 	and.w	r3, r3, #2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d005      	beq.n	8007fa2 <HAL_RCC_OscConfig+0x152>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d001      	beq.n	8007fa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e1c7      	b.n	8008332 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fa2:	4b3b      	ldr	r3, [pc, #236]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	00db      	lsls	r3, r3, #3
 8007fb0:	4937      	ldr	r1, [pc, #220]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fb6:	e03a      	b.n	800802e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d020      	beq.n	8008002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fc0:	4b34      	ldr	r3, [pc, #208]	; (8008094 <HAL_RCC_OscConfig+0x244>)
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc6:	f7fc fca1 	bl	800490c <HAL_GetTick>
 8007fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fcc:	e008      	b.n	8007fe0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fce:	f7fc fc9d 	bl	800490c <HAL_GetTick>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d901      	bls.n	8007fe0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e1a8      	b.n	8008332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fe0:	4b2b      	ldr	r3, [pc, #172]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0302 	and.w	r3, r3, #2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d0f0      	beq.n	8007fce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fec:	4b28      	ldr	r3, [pc, #160]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	00db      	lsls	r3, r3, #3
 8007ffa:	4925      	ldr	r1, [pc, #148]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	600b      	str	r3, [r1, #0]
 8008000:	e015      	b.n	800802e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008002:	4b24      	ldr	r3, [pc, #144]	; (8008094 <HAL_RCC_OscConfig+0x244>)
 8008004:	2200      	movs	r2, #0
 8008006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008008:	f7fc fc80 	bl	800490c <HAL_GetTick>
 800800c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800800e:	e008      	b.n	8008022 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008010:	f7fc fc7c 	bl	800490c <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	2b02      	cmp	r3, #2
 800801c:	d901      	bls.n	8008022 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e187      	b.n	8008332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008022:	4b1b      	ldr	r3, [pc, #108]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0302 	and.w	r3, r3, #2
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1f0      	bne.n	8008010 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0308 	and.w	r3, r3, #8
 8008036:	2b00      	cmp	r3, #0
 8008038:	d036      	beq.n	80080a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d016      	beq.n	8008070 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008042:	4b15      	ldr	r3, [pc, #84]	; (8008098 <HAL_RCC_OscConfig+0x248>)
 8008044:	2201      	movs	r2, #1
 8008046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008048:	f7fc fc60 	bl	800490c <HAL_GetTick>
 800804c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800804e:	e008      	b.n	8008062 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008050:	f7fc fc5c 	bl	800490c <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	2b02      	cmp	r3, #2
 800805c:	d901      	bls.n	8008062 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e167      	b.n	8008332 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008062:	4b0b      	ldr	r3, [pc, #44]	; (8008090 <HAL_RCC_OscConfig+0x240>)
 8008064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008066:	f003 0302 	and.w	r3, r3, #2
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0f0      	beq.n	8008050 <HAL_RCC_OscConfig+0x200>
 800806e:	e01b      	b.n	80080a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008070:	4b09      	ldr	r3, [pc, #36]	; (8008098 <HAL_RCC_OscConfig+0x248>)
 8008072:	2200      	movs	r2, #0
 8008074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008076:	f7fc fc49 	bl	800490c <HAL_GetTick>
 800807a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800807c:	e00e      	b.n	800809c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800807e:	f7fc fc45 	bl	800490c <HAL_GetTick>
 8008082:	4602      	mov	r2, r0
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	2b02      	cmp	r3, #2
 800808a:	d907      	bls.n	800809c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e150      	b.n	8008332 <HAL_RCC_OscConfig+0x4e2>
 8008090:	40023800 	.word	0x40023800
 8008094:	42470000 	.word	0x42470000
 8008098:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800809c:	4b88      	ldr	r3, [pc, #544]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 800809e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080a0:	f003 0302 	and.w	r3, r3, #2
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1ea      	bne.n	800807e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 0304 	and.w	r3, r3, #4
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 8097 	beq.w	80081e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080b6:	2300      	movs	r3, #0
 80080b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080ba:	4b81      	ldr	r3, [pc, #516]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 80080bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10f      	bne.n	80080e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080c6:	2300      	movs	r3, #0
 80080c8:	60bb      	str	r3, [r7, #8]
 80080ca:	4b7d      	ldr	r3, [pc, #500]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 80080cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ce:	4a7c      	ldr	r2, [pc, #496]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 80080d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080d4:	6413      	str	r3, [r2, #64]	; 0x40
 80080d6:	4b7a      	ldr	r3, [pc, #488]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 80080d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080de:	60bb      	str	r3, [r7, #8]
 80080e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080e2:	2301      	movs	r3, #1
 80080e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080e6:	4b77      	ldr	r3, [pc, #476]	; (80082c4 <HAL_RCC_OscConfig+0x474>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d118      	bne.n	8008124 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80080f2:	4b74      	ldr	r3, [pc, #464]	; (80082c4 <HAL_RCC_OscConfig+0x474>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a73      	ldr	r2, [pc, #460]	; (80082c4 <HAL_RCC_OscConfig+0x474>)
 80080f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080fe:	f7fc fc05 	bl	800490c <HAL_GetTick>
 8008102:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008104:	e008      	b.n	8008118 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008106:	f7fc fc01 	bl	800490c <HAL_GetTick>
 800810a:	4602      	mov	r2, r0
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	2b02      	cmp	r3, #2
 8008112:	d901      	bls.n	8008118 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008114:	2303      	movs	r3, #3
 8008116:	e10c      	b.n	8008332 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008118:	4b6a      	ldr	r3, [pc, #424]	; (80082c4 <HAL_RCC_OscConfig+0x474>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008120:	2b00      	cmp	r3, #0
 8008122:	d0f0      	beq.n	8008106 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d106      	bne.n	800813a <HAL_RCC_OscConfig+0x2ea>
 800812c:	4b64      	ldr	r3, [pc, #400]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 800812e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008130:	4a63      	ldr	r2, [pc, #396]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 8008132:	f043 0301 	orr.w	r3, r3, #1
 8008136:	6713      	str	r3, [r2, #112]	; 0x70
 8008138:	e01c      	b.n	8008174 <HAL_RCC_OscConfig+0x324>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	2b05      	cmp	r3, #5
 8008140:	d10c      	bne.n	800815c <HAL_RCC_OscConfig+0x30c>
 8008142:	4b5f      	ldr	r3, [pc, #380]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 8008144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008146:	4a5e      	ldr	r2, [pc, #376]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 8008148:	f043 0304 	orr.w	r3, r3, #4
 800814c:	6713      	str	r3, [r2, #112]	; 0x70
 800814e:	4b5c      	ldr	r3, [pc, #368]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 8008150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008152:	4a5b      	ldr	r2, [pc, #364]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 8008154:	f043 0301 	orr.w	r3, r3, #1
 8008158:	6713      	str	r3, [r2, #112]	; 0x70
 800815a:	e00b      	b.n	8008174 <HAL_RCC_OscConfig+0x324>
 800815c:	4b58      	ldr	r3, [pc, #352]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 800815e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008160:	4a57      	ldr	r2, [pc, #348]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 8008162:	f023 0301 	bic.w	r3, r3, #1
 8008166:	6713      	str	r3, [r2, #112]	; 0x70
 8008168:	4b55      	ldr	r3, [pc, #340]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 800816a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800816c:	4a54      	ldr	r2, [pc, #336]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 800816e:	f023 0304 	bic.w	r3, r3, #4
 8008172:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d015      	beq.n	80081a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800817c:	f7fc fbc6 	bl	800490c <HAL_GetTick>
 8008180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008182:	e00a      	b.n	800819a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008184:	f7fc fbc2 	bl	800490c <HAL_GetTick>
 8008188:	4602      	mov	r2, r0
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008192:	4293      	cmp	r3, r2
 8008194:	d901      	bls.n	800819a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e0cb      	b.n	8008332 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800819a:	4b49      	ldr	r3, [pc, #292]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 800819c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800819e:	f003 0302 	and.w	r3, r3, #2
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d0ee      	beq.n	8008184 <HAL_RCC_OscConfig+0x334>
 80081a6:	e014      	b.n	80081d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081a8:	f7fc fbb0 	bl	800490c <HAL_GetTick>
 80081ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081ae:	e00a      	b.n	80081c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081b0:	f7fc fbac 	bl	800490c <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80081be:	4293      	cmp	r3, r2
 80081c0:	d901      	bls.n	80081c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e0b5      	b.n	8008332 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081c6:	4b3e      	ldr	r3, [pc, #248]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 80081c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ca:	f003 0302 	and.w	r3, r3, #2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1ee      	bne.n	80081b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80081d2:	7dfb      	ldrb	r3, [r7, #23]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d105      	bne.n	80081e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081d8:	4b39      	ldr	r3, [pc, #228]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 80081da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081dc:	4a38      	ldr	r2, [pc, #224]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 80081de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 80a1 	beq.w	8008330 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80081ee:	4b34      	ldr	r3, [pc, #208]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	f003 030c 	and.w	r3, r3, #12
 80081f6:	2b08      	cmp	r3, #8
 80081f8:	d05c      	beq.n	80082b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d141      	bne.n	8008286 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008202:	4b31      	ldr	r3, [pc, #196]	; (80082c8 <HAL_RCC_OscConfig+0x478>)
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008208:	f7fc fb80 	bl	800490c <HAL_GetTick>
 800820c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800820e:	e008      	b.n	8008222 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008210:	f7fc fb7c 	bl	800490c <HAL_GetTick>
 8008214:	4602      	mov	r2, r0
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	2b02      	cmp	r3, #2
 800821c:	d901      	bls.n	8008222 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e087      	b.n	8008332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008222:	4b27      	ldr	r3, [pc, #156]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1f0      	bne.n	8008210 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	69da      	ldr	r2, [r3, #28]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	431a      	orrs	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823c:	019b      	lsls	r3, r3, #6
 800823e:	431a      	orrs	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008244:	085b      	lsrs	r3, r3, #1
 8008246:	3b01      	subs	r3, #1
 8008248:	041b      	lsls	r3, r3, #16
 800824a:	431a      	orrs	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008250:	061b      	lsls	r3, r3, #24
 8008252:	491b      	ldr	r1, [pc, #108]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 8008254:	4313      	orrs	r3, r2
 8008256:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008258:	4b1b      	ldr	r3, [pc, #108]	; (80082c8 <HAL_RCC_OscConfig+0x478>)
 800825a:	2201      	movs	r2, #1
 800825c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800825e:	f7fc fb55 	bl	800490c <HAL_GetTick>
 8008262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008264:	e008      	b.n	8008278 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008266:	f7fc fb51 	bl	800490c <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	2b02      	cmp	r3, #2
 8008272:	d901      	bls.n	8008278 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008274:	2303      	movs	r3, #3
 8008276:	e05c      	b.n	8008332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008278:	4b11      	ldr	r3, [pc, #68]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d0f0      	beq.n	8008266 <HAL_RCC_OscConfig+0x416>
 8008284:	e054      	b.n	8008330 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008286:	4b10      	ldr	r3, [pc, #64]	; (80082c8 <HAL_RCC_OscConfig+0x478>)
 8008288:	2200      	movs	r2, #0
 800828a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800828c:	f7fc fb3e 	bl	800490c <HAL_GetTick>
 8008290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008292:	e008      	b.n	80082a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008294:	f7fc fb3a 	bl	800490c <HAL_GetTick>
 8008298:	4602      	mov	r2, r0
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d901      	bls.n	80082a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e045      	b.n	8008332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082a6:	4b06      	ldr	r3, [pc, #24]	; (80082c0 <HAL_RCC_OscConfig+0x470>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1f0      	bne.n	8008294 <HAL_RCC_OscConfig+0x444>
 80082b2:	e03d      	b.n	8008330 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d107      	bne.n	80082cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e038      	b.n	8008332 <HAL_RCC_OscConfig+0x4e2>
 80082c0:	40023800 	.word	0x40023800
 80082c4:	40007000 	.word	0x40007000
 80082c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80082cc:	4b1b      	ldr	r3, [pc, #108]	; (800833c <HAL_RCC_OscConfig+0x4ec>)
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d028      	beq.n	800832c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d121      	bne.n	800832c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d11a      	bne.n	800832c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80082fc:	4013      	ands	r3, r2
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008302:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008304:	4293      	cmp	r3, r2
 8008306:	d111      	bne.n	800832c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008312:	085b      	lsrs	r3, r3, #1
 8008314:	3b01      	subs	r3, #1
 8008316:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008318:	429a      	cmp	r2, r3
 800831a:	d107      	bne.n	800832c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008326:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008328:	429a      	cmp	r2, r3
 800832a:	d001      	beq.n	8008330 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e000      	b.n	8008332 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	40023800 	.word	0x40023800

08008340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d101      	bne.n	8008354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	e0cc      	b.n	80084ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008354:	4b68      	ldr	r3, [pc, #416]	; (80084f8 <HAL_RCC_ClockConfig+0x1b8>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0307 	and.w	r3, r3, #7
 800835c:	683a      	ldr	r2, [r7, #0]
 800835e:	429a      	cmp	r2, r3
 8008360:	d90c      	bls.n	800837c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008362:	4b65      	ldr	r3, [pc, #404]	; (80084f8 <HAL_RCC_ClockConfig+0x1b8>)
 8008364:	683a      	ldr	r2, [r7, #0]
 8008366:	b2d2      	uxtb	r2, r2
 8008368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800836a:	4b63      	ldr	r3, [pc, #396]	; (80084f8 <HAL_RCC_ClockConfig+0x1b8>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 0307 	and.w	r3, r3, #7
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	429a      	cmp	r2, r3
 8008376:	d001      	beq.n	800837c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e0b8      	b.n	80084ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0302 	and.w	r3, r3, #2
 8008384:	2b00      	cmp	r3, #0
 8008386:	d020      	beq.n	80083ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	2b00      	cmp	r3, #0
 8008392:	d005      	beq.n	80083a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008394:	4b59      	ldr	r3, [pc, #356]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	4a58      	ldr	r2, [pc, #352]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 800839a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800839e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0308 	and.w	r3, r3, #8
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d005      	beq.n	80083b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80083ac:	4b53      	ldr	r3, [pc, #332]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	4a52      	ldr	r2, [pc, #328]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 80083b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80083b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083b8:	4b50      	ldr	r3, [pc, #320]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	494d      	ldr	r1, [pc, #308]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d044      	beq.n	8008460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d107      	bne.n	80083ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083de:	4b47      	ldr	r3, [pc, #284]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d119      	bne.n	800841e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e07f      	b.n	80084ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d003      	beq.n	80083fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	d107      	bne.n	800840e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083fe:	4b3f      	ldr	r3, [pc, #252]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d109      	bne.n	800841e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e06f      	b.n	80084ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800840e:	4b3b      	ldr	r3, [pc, #236]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0302 	and.w	r3, r3, #2
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e067      	b.n	80084ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800841e:	4b37      	ldr	r3, [pc, #220]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f023 0203 	bic.w	r2, r3, #3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	4934      	ldr	r1, [pc, #208]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 800842c:	4313      	orrs	r3, r2
 800842e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008430:	f7fc fa6c 	bl	800490c <HAL_GetTick>
 8008434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008436:	e00a      	b.n	800844e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008438:	f7fc fa68 	bl	800490c <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	f241 3288 	movw	r2, #5000	; 0x1388
 8008446:	4293      	cmp	r3, r2
 8008448:	d901      	bls.n	800844e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e04f      	b.n	80084ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800844e:	4b2b      	ldr	r3, [pc, #172]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f003 020c 	and.w	r2, r3, #12
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	429a      	cmp	r2, r3
 800845e:	d1eb      	bne.n	8008438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008460:	4b25      	ldr	r3, [pc, #148]	; (80084f8 <HAL_RCC_ClockConfig+0x1b8>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0307 	and.w	r3, r3, #7
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	429a      	cmp	r2, r3
 800846c:	d20c      	bcs.n	8008488 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800846e:	4b22      	ldr	r3, [pc, #136]	; (80084f8 <HAL_RCC_ClockConfig+0x1b8>)
 8008470:	683a      	ldr	r2, [r7, #0]
 8008472:	b2d2      	uxtb	r2, r2
 8008474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008476:	4b20      	ldr	r3, [pc, #128]	; (80084f8 <HAL_RCC_ClockConfig+0x1b8>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 0307 	and.w	r3, r3, #7
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	429a      	cmp	r2, r3
 8008482:	d001      	beq.n	8008488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e032      	b.n	80084ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0304 	and.w	r3, r3, #4
 8008490:	2b00      	cmp	r3, #0
 8008492:	d008      	beq.n	80084a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008494:	4b19      	ldr	r3, [pc, #100]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	4916      	ldr	r1, [pc, #88]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 80084a2:	4313      	orrs	r3, r2
 80084a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0308 	and.w	r3, r3, #8
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d009      	beq.n	80084c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084b2:	4b12      	ldr	r3, [pc, #72]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	00db      	lsls	r3, r3, #3
 80084c0:	490e      	ldr	r1, [pc, #56]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80084c6:	f000 f821 	bl	800850c <HAL_RCC_GetSysClockFreq>
 80084ca:	4602      	mov	r2, r0
 80084cc:	4b0b      	ldr	r3, [pc, #44]	; (80084fc <HAL_RCC_ClockConfig+0x1bc>)
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	091b      	lsrs	r3, r3, #4
 80084d2:	f003 030f 	and.w	r3, r3, #15
 80084d6:	490a      	ldr	r1, [pc, #40]	; (8008500 <HAL_RCC_ClockConfig+0x1c0>)
 80084d8:	5ccb      	ldrb	r3, [r1, r3]
 80084da:	fa22 f303 	lsr.w	r3, r2, r3
 80084de:	4a09      	ldr	r2, [pc, #36]	; (8008504 <HAL_RCC_ClockConfig+0x1c4>)
 80084e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80084e2:	4b09      	ldr	r3, [pc, #36]	; (8008508 <HAL_RCC_ClockConfig+0x1c8>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fb faa8 	bl	8003a3c <HAL_InitTick>

  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	40023c00 	.word	0x40023c00
 80084fc:	40023800 	.word	0x40023800
 8008500:	0800e3f4 	.word	0x0800e3f4
 8008504:	20000034 	.word	0x20000034
 8008508:	20000038 	.word	0x20000038

0800850c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800850c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008510:	b090      	sub	sp, #64	; 0x40
 8008512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008514:	2300      	movs	r3, #0
 8008516:	637b      	str	r3, [r7, #52]	; 0x34
 8008518:	2300      	movs	r3, #0
 800851a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800851c:	2300      	movs	r3, #0
 800851e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008520:	2300      	movs	r3, #0
 8008522:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008524:	4b59      	ldr	r3, [pc, #356]	; (800868c <HAL_RCC_GetSysClockFreq+0x180>)
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f003 030c 	and.w	r3, r3, #12
 800852c:	2b08      	cmp	r3, #8
 800852e:	d00d      	beq.n	800854c <HAL_RCC_GetSysClockFreq+0x40>
 8008530:	2b08      	cmp	r3, #8
 8008532:	f200 80a1 	bhi.w	8008678 <HAL_RCC_GetSysClockFreq+0x16c>
 8008536:	2b00      	cmp	r3, #0
 8008538:	d002      	beq.n	8008540 <HAL_RCC_GetSysClockFreq+0x34>
 800853a:	2b04      	cmp	r3, #4
 800853c:	d003      	beq.n	8008546 <HAL_RCC_GetSysClockFreq+0x3a>
 800853e:	e09b      	b.n	8008678 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008540:	4b53      	ldr	r3, [pc, #332]	; (8008690 <HAL_RCC_GetSysClockFreq+0x184>)
 8008542:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008544:	e09b      	b.n	800867e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008546:	4b53      	ldr	r3, [pc, #332]	; (8008694 <HAL_RCC_GetSysClockFreq+0x188>)
 8008548:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800854a:	e098      	b.n	800867e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800854c:	4b4f      	ldr	r3, [pc, #316]	; (800868c <HAL_RCC_GetSysClockFreq+0x180>)
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008554:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008556:	4b4d      	ldr	r3, [pc, #308]	; (800868c <HAL_RCC_GetSysClockFreq+0x180>)
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800855e:	2b00      	cmp	r3, #0
 8008560:	d028      	beq.n	80085b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008562:	4b4a      	ldr	r3, [pc, #296]	; (800868c <HAL_RCC_GetSysClockFreq+0x180>)
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	099b      	lsrs	r3, r3, #6
 8008568:	2200      	movs	r2, #0
 800856a:	623b      	str	r3, [r7, #32]
 800856c:	627a      	str	r2, [r7, #36]	; 0x24
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008574:	2100      	movs	r1, #0
 8008576:	4b47      	ldr	r3, [pc, #284]	; (8008694 <HAL_RCC_GetSysClockFreq+0x188>)
 8008578:	fb03 f201 	mul.w	r2, r3, r1
 800857c:	2300      	movs	r3, #0
 800857e:	fb00 f303 	mul.w	r3, r0, r3
 8008582:	4413      	add	r3, r2
 8008584:	4a43      	ldr	r2, [pc, #268]	; (8008694 <HAL_RCC_GetSysClockFreq+0x188>)
 8008586:	fba0 1202 	umull	r1, r2, r0, r2
 800858a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800858c:	460a      	mov	r2, r1
 800858e:	62ba      	str	r2, [r7, #40]	; 0x28
 8008590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008592:	4413      	add	r3, r2
 8008594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008598:	2200      	movs	r2, #0
 800859a:	61bb      	str	r3, [r7, #24]
 800859c:	61fa      	str	r2, [r7, #28]
 800859e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80085a6:	f7f8 fae1 	bl	8000b6c <__aeabi_uldivmod>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	4613      	mov	r3, r2
 80085b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085b2:	e053      	b.n	800865c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085b4:	4b35      	ldr	r3, [pc, #212]	; (800868c <HAL_RCC_GetSysClockFreq+0x180>)
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	099b      	lsrs	r3, r3, #6
 80085ba:	2200      	movs	r2, #0
 80085bc:	613b      	str	r3, [r7, #16]
 80085be:	617a      	str	r2, [r7, #20]
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80085c6:	f04f 0b00 	mov.w	fp, #0
 80085ca:	4652      	mov	r2, sl
 80085cc:	465b      	mov	r3, fp
 80085ce:	f04f 0000 	mov.w	r0, #0
 80085d2:	f04f 0100 	mov.w	r1, #0
 80085d6:	0159      	lsls	r1, r3, #5
 80085d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80085dc:	0150      	lsls	r0, r2, #5
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	ebb2 080a 	subs.w	r8, r2, sl
 80085e6:	eb63 090b 	sbc.w	r9, r3, fp
 80085ea:	f04f 0200 	mov.w	r2, #0
 80085ee:	f04f 0300 	mov.w	r3, #0
 80085f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80085f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80085fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80085fe:	ebb2 0408 	subs.w	r4, r2, r8
 8008602:	eb63 0509 	sbc.w	r5, r3, r9
 8008606:	f04f 0200 	mov.w	r2, #0
 800860a:	f04f 0300 	mov.w	r3, #0
 800860e:	00eb      	lsls	r3, r5, #3
 8008610:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008614:	00e2      	lsls	r2, r4, #3
 8008616:	4614      	mov	r4, r2
 8008618:	461d      	mov	r5, r3
 800861a:	eb14 030a 	adds.w	r3, r4, sl
 800861e:	603b      	str	r3, [r7, #0]
 8008620:	eb45 030b 	adc.w	r3, r5, fp
 8008624:	607b      	str	r3, [r7, #4]
 8008626:	f04f 0200 	mov.w	r2, #0
 800862a:	f04f 0300 	mov.w	r3, #0
 800862e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008632:	4629      	mov	r1, r5
 8008634:	028b      	lsls	r3, r1, #10
 8008636:	4621      	mov	r1, r4
 8008638:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800863c:	4621      	mov	r1, r4
 800863e:	028a      	lsls	r2, r1, #10
 8008640:	4610      	mov	r0, r2
 8008642:	4619      	mov	r1, r3
 8008644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008646:	2200      	movs	r2, #0
 8008648:	60bb      	str	r3, [r7, #8]
 800864a:	60fa      	str	r2, [r7, #12]
 800864c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008650:	f7f8 fa8c 	bl	8000b6c <__aeabi_uldivmod>
 8008654:	4602      	mov	r2, r0
 8008656:	460b      	mov	r3, r1
 8008658:	4613      	mov	r3, r2
 800865a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800865c:	4b0b      	ldr	r3, [pc, #44]	; (800868c <HAL_RCC_GetSysClockFreq+0x180>)
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	0c1b      	lsrs	r3, r3, #16
 8008662:	f003 0303 	and.w	r3, r3, #3
 8008666:	3301      	adds	r3, #1
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800866c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800866e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008670:	fbb2 f3f3 	udiv	r3, r2, r3
 8008674:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008676:	e002      	b.n	800867e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008678:	4b05      	ldr	r3, [pc, #20]	; (8008690 <HAL_RCC_GetSysClockFreq+0x184>)
 800867a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800867c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800867e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008680:	4618      	mov	r0, r3
 8008682:	3740      	adds	r7, #64	; 0x40
 8008684:	46bd      	mov	sp, r7
 8008686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800868a:	bf00      	nop
 800868c:	40023800 	.word	0x40023800
 8008690:	00f42400 	.word	0x00f42400
 8008694:	016e3600 	.word	0x016e3600

08008698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008698:	b480      	push	{r7}
 800869a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800869c:	4b03      	ldr	r3, [pc, #12]	; (80086ac <HAL_RCC_GetHCLKFreq+0x14>)
 800869e:	681b      	ldr	r3, [r3, #0]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	20000034 	.word	0x20000034

080086b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80086b4:	f7ff fff0 	bl	8008698 <HAL_RCC_GetHCLKFreq>
 80086b8:	4602      	mov	r2, r0
 80086ba:	4b05      	ldr	r3, [pc, #20]	; (80086d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	0a9b      	lsrs	r3, r3, #10
 80086c0:	f003 0307 	and.w	r3, r3, #7
 80086c4:	4903      	ldr	r1, [pc, #12]	; (80086d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086c6:	5ccb      	ldrb	r3, [r1, r3]
 80086c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	40023800 	.word	0x40023800
 80086d4:	0800e404 	.word	0x0800e404

080086d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80086dc:	f7ff ffdc 	bl	8008698 <HAL_RCC_GetHCLKFreq>
 80086e0:	4602      	mov	r2, r0
 80086e2:	4b05      	ldr	r3, [pc, #20]	; (80086f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	0b5b      	lsrs	r3, r3, #13
 80086e8:	f003 0307 	and.w	r3, r3, #7
 80086ec:	4903      	ldr	r1, [pc, #12]	; (80086fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80086ee:	5ccb      	ldrb	r3, [r1, r3]
 80086f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	40023800 	.word	0x40023800
 80086fc:	0800e404 	.word	0x0800e404

08008700 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	220f      	movs	r2, #15
 800870e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008710:	4b12      	ldr	r3, [pc, #72]	; (800875c <HAL_RCC_GetClockConfig+0x5c>)
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f003 0203 	and.w	r2, r3, #3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800871c:	4b0f      	ldr	r3, [pc, #60]	; (800875c <HAL_RCC_GetClockConfig+0x5c>)
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008728:	4b0c      	ldr	r3, [pc, #48]	; (800875c <HAL_RCC_GetClockConfig+0x5c>)
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008734:	4b09      	ldr	r3, [pc, #36]	; (800875c <HAL_RCC_GetClockConfig+0x5c>)
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	08db      	lsrs	r3, r3, #3
 800873a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008742:	4b07      	ldr	r3, [pc, #28]	; (8008760 <HAL_RCC_GetClockConfig+0x60>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0207 	and.w	r2, r3, #7
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	601a      	str	r2, [r3, #0]
}
 800874e:	bf00      	nop
 8008750:	370c      	adds	r7, #12
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	40023800 	.word	0x40023800
 8008760:	40023c00 	.word	0x40023c00

08008764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d101      	bne.n	8008776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e041      	b.n	80087fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800877c:	b2db      	uxtb	r3, r3
 800877e:	2b00      	cmp	r3, #0
 8008780:	d106      	bne.n	8008790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7fb fdba 	bl	8004304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2202      	movs	r2, #2
 8008794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	3304      	adds	r3, #4
 80087a0:	4619      	mov	r1, r3
 80087a2:	4610      	mov	r0, r2
 80087a4:	f000 f9ce 	bl	8008b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
	...

08008804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b01      	cmp	r3, #1
 8008816:	d001      	beq.n	800881c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e04e      	b.n	80088ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2202      	movs	r2, #2
 8008820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68da      	ldr	r2, [r3, #12]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f042 0201 	orr.w	r2, r2, #1
 8008832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a23      	ldr	r2, [pc, #140]	; (80088c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d022      	beq.n	8008884 <HAL_TIM_Base_Start_IT+0x80>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008846:	d01d      	beq.n	8008884 <HAL_TIM_Base_Start_IT+0x80>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a1f      	ldr	r2, [pc, #124]	; (80088cc <HAL_TIM_Base_Start_IT+0xc8>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d018      	beq.n	8008884 <HAL_TIM_Base_Start_IT+0x80>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a1e      	ldr	r2, [pc, #120]	; (80088d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d013      	beq.n	8008884 <HAL_TIM_Base_Start_IT+0x80>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a1c      	ldr	r2, [pc, #112]	; (80088d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d00e      	beq.n	8008884 <HAL_TIM_Base_Start_IT+0x80>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a1b      	ldr	r2, [pc, #108]	; (80088d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d009      	beq.n	8008884 <HAL_TIM_Base_Start_IT+0x80>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a19      	ldr	r2, [pc, #100]	; (80088dc <HAL_TIM_Base_Start_IT+0xd8>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d004      	beq.n	8008884 <HAL_TIM_Base_Start_IT+0x80>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a18      	ldr	r2, [pc, #96]	; (80088e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d111      	bne.n	80088a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f003 0307 	and.w	r3, r3, #7
 800888e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2b06      	cmp	r3, #6
 8008894:	d010      	beq.n	80088b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f042 0201 	orr.w	r2, r2, #1
 80088a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088a6:	e007      	b.n	80088b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f042 0201 	orr.w	r2, r2, #1
 80088b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3714      	adds	r7, #20
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	40010000 	.word	0x40010000
 80088cc:	40000400 	.word	0x40000400
 80088d0:	40000800 	.word	0x40000800
 80088d4:	40000c00 	.word	0x40000c00
 80088d8:	40010400 	.word	0x40010400
 80088dc:	40014000 	.word	0x40014000
 80088e0:	40001800 	.word	0x40001800

080088e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	f003 0302 	and.w	r3, r3, #2
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d122      	bne.n	8008940 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	f003 0302 	and.w	r3, r3, #2
 8008904:	2b02      	cmp	r3, #2
 8008906:	d11b      	bne.n	8008940 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f06f 0202 	mvn.w	r2, #2
 8008910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	f003 0303 	and.w	r3, r3, #3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d003      	beq.n	800892e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f8ee 	bl	8008b08 <HAL_TIM_IC_CaptureCallback>
 800892c:	e005      	b.n	800893a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f8e0 	bl	8008af4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f8f1 	bl	8008b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	f003 0304 	and.w	r3, r3, #4
 800894a:	2b04      	cmp	r3, #4
 800894c:	d122      	bne.n	8008994 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	f003 0304 	and.w	r3, r3, #4
 8008958:	2b04      	cmp	r3, #4
 800895a:	d11b      	bne.n	8008994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f06f 0204 	mvn.w	r2, #4
 8008964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2202      	movs	r2, #2
 800896a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008976:	2b00      	cmp	r3, #0
 8008978:	d003      	beq.n	8008982 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f8c4 	bl	8008b08 <HAL_TIM_IC_CaptureCallback>
 8008980:	e005      	b.n	800898e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f8b6 	bl	8008af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f8c7 	bl	8008b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	f003 0308 	and.w	r3, r3, #8
 800899e:	2b08      	cmp	r3, #8
 80089a0:	d122      	bne.n	80089e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	f003 0308 	and.w	r3, r3, #8
 80089ac:	2b08      	cmp	r3, #8
 80089ae:	d11b      	bne.n	80089e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f06f 0208 	mvn.w	r2, #8
 80089b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2204      	movs	r2, #4
 80089be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	69db      	ldr	r3, [r3, #28]
 80089c6:	f003 0303 	and.w	r3, r3, #3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f89a 	bl	8008b08 <HAL_TIM_IC_CaptureCallback>
 80089d4:	e005      	b.n	80089e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f88c 	bl	8008af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f89d 	bl	8008b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	f003 0310 	and.w	r3, r3, #16
 80089f2:	2b10      	cmp	r3, #16
 80089f4:	d122      	bne.n	8008a3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	f003 0310 	and.w	r3, r3, #16
 8008a00:	2b10      	cmp	r3, #16
 8008a02:	d11b      	bne.n	8008a3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f06f 0210 	mvn.w	r2, #16
 8008a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2208      	movs	r2, #8
 8008a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	69db      	ldr	r3, [r3, #28]
 8008a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f870 	bl	8008b08 <HAL_TIM_IC_CaptureCallback>
 8008a28:	e005      	b.n	8008a36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f862 	bl	8008af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f873 	bl	8008b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d10e      	bne.n	8008a68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	f003 0301 	and.w	r3, r3, #1
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d107      	bne.n	8008a68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f06f 0201 	mvn.w	r2, #1
 8008a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f7fa fc1e 	bl	80032a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a72:	2b80      	cmp	r3, #128	; 0x80
 8008a74:	d10e      	bne.n	8008a94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a80:	2b80      	cmp	r3, #128	; 0x80
 8008a82:	d107      	bne.n	8008a94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f97e 	bl	8008d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a9e:	2b40      	cmp	r3, #64	; 0x40
 8008aa0:	d10e      	bne.n	8008ac0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aac:	2b40      	cmp	r3, #64	; 0x40
 8008aae:	d107      	bne.n	8008ac0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f838 	bl	8008b30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	f003 0320 	and.w	r3, r3, #32
 8008aca:	2b20      	cmp	r3, #32
 8008acc:	d10e      	bne.n	8008aec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	f003 0320 	and.w	r3, r3, #32
 8008ad8:	2b20      	cmp	r3, #32
 8008ada:	d107      	bne.n	8008aec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f06f 0220 	mvn.w	r2, #32
 8008ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f948 	bl	8008d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008aec:	bf00      	nop
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b24:	bf00      	nop
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b38:	bf00      	nop
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a40      	ldr	r2, [pc, #256]	; (8008c58 <TIM_Base_SetConfig+0x114>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d013      	beq.n	8008b84 <TIM_Base_SetConfig+0x40>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b62:	d00f      	beq.n	8008b84 <TIM_Base_SetConfig+0x40>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a3d      	ldr	r2, [pc, #244]	; (8008c5c <TIM_Base_SetConfig+0x118>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d00b      	beq.n	8008b84 <TIM_Base_SetConfig+0x40>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a3c      	ldr	r2, [pc, #240]	; (8008c60 <TIM_Base_SetConfig+0x11c>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d007      	beq.n	8008b84 <TIM_Base_SetConfig+0x40>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a3b      	ldr	r2, [pc, #236]	; (8008c64 <TIM_Base_SetConfig+0x120>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d003      	beq.n	8008b84 <TIM_Base_SetConfig+0x40>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a3a      	ldr	r2, [pc, #232]	; (8008c68 <TIM_Base_SetConfig+0x124>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d108      	bne.n	8008b96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a2f      	ldr	r2, [pc, #188]	; (8008c58 <TIM_Base_SetConfig+0x114>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d02b      	beq.n	8008bf6 <TIM_Base_SetConfig+0xb2>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ba4:	d027      	beq.n	8008bf6 <TIM_Base_SetConfig+0xb2>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a2c      	ldr	r2, [pc, #176]	; (8008c5c <TIM_Base_SetConfig+0x118>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d023      	beq.n	8008bf6 <TIM_Base_SetConfig+0xb2>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a2b      	ldr	r2, [pc, #172]	; (8008c60 <TIM_Base_SetConfig+0x11c>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d01f      	beq.n	8008bf6 <TIM_Base_SetConfig+0xb2>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a2a      	ldr	r2, [pc, #168]	; (8008c64 <TIM_Base_SetConfig+0x120>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d01b      	beq.n	8008bf6 <TIM_Base_SetConfig+0xb2>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a29      	ldr	r2, [pc, #164]	; (8008c68 <TIM_Base_SetConfig+0x124>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d017      	beq.n	8008bf6 <TIM_Base_SetConfig+0xb2>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a28      	ldr	r2, [pc, #160]	; (8008c6c <TIM_Base_SetConfig+0x128>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d013      	beq.n	8008bf6 <TIM_Base_SetConfig+0xb2>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a27      	ldr	r2, [pc, #156]	; (8008c70 <TIM_Base_SetConfig+0x12c>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d00f      	beq.n	8008bf6 <TIM_Base_SetConfig+0xb2>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a26      	ldr	r2, [pc, #152]	; (8008c74 <TIM_Base_SetConfig+0x130>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d00b      	beq.n	8008bf6 <TIM_Base_SetConfig+0xb2>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a25      	ldr	r2, [pc, #148]	; (8008c78 <TIM_Base_SetConfig+0x134>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d007      	beq.n	8008bf6 <TIM_Base_SetConfig+0xb2>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a24      	ldr	r2, [pc, #144]	; (8008c7c <TIM_Base_SetConfig+0x138>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d003      	beq.n	8008bf6 <TIM_Base_SetConfig+0xb2>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a23      	ldr	r2, [pc, #140]	; (8008c80 <TIM_Base_SetConfig+0x13c>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d108      	bne.n	8008c08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	689a      	ldr	r2, [r3, #8]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a0a      	ldr	r2, [pc, #40]	; (8008c58 <TIM_Base_SetConfig+0x114>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d003      	beq.n	8008c3c <TIM_Base_SetConfig+0xf8>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a0c      	ldr	r2, [pc, #48]	; (8008c68 <TIM_Base_SetConfig+0x124>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d103      	bne.n	8008c44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	691a      	ldr	r2, [r3, #16]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	615a      	str	r2, [r3, #20]
}
 8008c4a:	bf00      	nop
 8008c4c:	3714      	adds	r7, #20
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	40010000 	.word	0x40010000
 8008c5c:	40000400 	.word	0x40000400
 8008c60:	40000800 	.word	0x40000800
 8008c64:	40000c00 	.word	0x40000c00
 8008c68:	40010400 	.word	0x40010400
 8008c6c:	40014000 	.word	0x40014000
 8008c70:	40014400 	.word	0x40014400
 8008c74:	40014800 	.word	0x40014800
 8008c78:	40001800 	.word	0x40001800
 8008c7c:	40001c00 	.word	0x40001c00
 8008c80:	40002000 	.word	0x40002000

08008c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d101      	bne.n	8008c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c98:	2302      	movs	r3, #2
 8008c9a:	e05a      	b.n	8008d52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a21      	ldr	r2, [pc, #132]	; (8008d60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d022      	beq.n	8008d26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ce8:	d01d      	beq.n	8008d26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a1d      	ldr	r2, [pc, #116]	; (8008d64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d018      	beq.n	8008d26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a1b      	ldr	r2, [pc, #108]	; (8008d68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d013      	beq.n	8008d26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a1a      	ldr	r2, [pc, #104]	; (8008d6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d00e      	beq.n	8008d26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a18      	ldr	r2, [pc, #96]	; (8008d70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d009      	beq.n	8008d26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a17      	ldr	r2, [pc, #92]	; (8008d74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d004      	beq.n	8008d26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a15      	ldr	r2, [pc, #84]	; (8008d78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d10c      	bne.n	8008d40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	68ba      	ldr	r2, [r7, #8]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3714      	adds	r7, #20
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	40010000 	.word	0x40010000
 8008d64:	40000400 	.word	0x40000400
 8008d68:	40000800 	.word	0x40000800
 8008d6c:	40000c00 	.word	0x40000c00
 8008d70:	40010400 	.word	0x40010400
 8008d74:	40014000 	.word	0x40014000
 8008d78:	40001800 	.word	0x40001800

08008d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d101      	bne.n	8008db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e03f      	b.n	8008e36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d106      	bne.n	8008dd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f7fb fb3a 	bl	8004444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2224      	movs	r2, #36	; 0x24
 8008dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68da      	ldr	r2, [r3, #12]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008de6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f001 f95d 	bl	800a0a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	691a      	ldr	r2, [r3, #16]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	695a      	ldr	r2, [r3, #20]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68da      	ldr	r2, [r3, #12]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2220      	movs	r2, #32
 8008e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2220      	movs	r2, #32
 8008e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b085      	sub	sp, #20
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	60f8      	str	r0, [r7, #12]
 8008e46:	60b9      	str	r1, [r7, #8]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	2b20      	cmp	r3, #32
 8008e56:	d130      	bne.n	8008eba <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d002      	beq.n	8008e64 <HAL_UART_Transmit_IT+0x26>
 8008e5e:	88fb      	ldrh	r3, [r7, #6]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	e029      	b.n	8008ebc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d101      	bne.n	8008e76 <HAL_UART_Transmit_IT+0x38>
 8008e72:	2302      	movs	r3, #2
 8008e74:	e022      	b.n	8008ebc <HAL_UART_Transmit_IT+0x7e>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	88fa      	ldrh	r2, [r7, #6]
 8008e88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	88fa      	ldrh	r2, [r7, #6]
 8008e8e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2200      	movs	r2, #0
 8008e94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2221      	movs	r2, #33	; 0x21
 8008e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68da      	ldr	r2, [r3, #12]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008eb4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	e000      	b.n	8008ebc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008eba:	2302      	movs	r3, #2
  }
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3714      	adds	r7, #20
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	2b20      	cmp	r3, #32
 8008ee0:	d11d      	bne.n	8008f1e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d002      	beq.n	8008eee <HAL_UART_Receive_IT+0x26>
 8008ee8:	88fb      	ldrh	r3, [r7, #6]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d101      	bne.n	8008ef2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e016      	b.n	8008f20 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d101      	bne.n	8008f00 <HAL_UART_Receive_IT+0x38>
 8008efc:	2302      	movs	r3, #2
 8008efe:	e00f      	b.n	8008f20 <HAL_UART_Receive_IT+0x58>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008f0e:	88fb      	ldrh	r3, [r7, #6]
 8008f10:	461a      	mov	r2, r3
 8008f12:	68b9      	ldr	r1, [r7, #8]
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f000 fdfa 	bl	8009b0e <UART_Start_Receive_IT>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	e000      	b.n	8008f20 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008f1e:	2302      	movs	r3, #2
  }
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b08c      	sub	sp, #48	; 0x30
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	4613      	mov	r3, r2
 8008f34:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b20      	cmp	r3, #32
 8008f40:	d165      	bne.n	800900e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d002      	beq.n	8008f4e <HAL_UART_Transmit_DMA+0x26>
 8008f48:	88fb      	ldrh	r3, [r7, #6]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d101      	bne.n	8008f52 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e05e      	b.n	8009010 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d101      	bne.n	8008f60 <HAL_UART_Transmit_DMA+0x38>
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	e057      	b.n	8009010 <HAL_UART_Transmit_DMA+0xe8>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	88fa      	ldrh	r2, [r7, #6]
 8008f72:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	88fa      	ldrh	r2, [r7, #6]
 8008f78:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2221      	movs	r2, #33	; 0x21
 8008f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f8c:	4a22      	ldr	r2, [pc, #136]	; (8009018 <HAL_UART_Transmit_DMA+0xf0>)
 8008f8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f94:	4a21      	ldr	r2, [pc, #132]	; (800901c <HAL_UART_Transmit_DMA+0xf4>)
 8008f96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f9c:	4a20      	ldr	r2, [pc, #128]	; (8009020 <HAL_UART_Transmit_DMA+0xf8>)
 8008f9e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008fa8:	f107 0308 	add.w	r3, r7, #8
 8008fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb4:	6819      	ldr	r1, [r3, #0]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	3304      	adds	r3, #4
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	88fb      	ldrh	r3, [r7, #6]
 8008fc0:	f7fc f998 	bl	80052f4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fcc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	3314      	adds	r3, #20
 8008fdc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	e853 3f00 	ldrex	r3, [r3]
 8008fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3314      	adds	r3, #20
 8008ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ff6:	627a      	str	r2, [r7, #36]	; 0x24
 8008ff8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffa:	6a39      	ldr	r1, [r7, #32]
 8008ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ffe:	e841 2300 	strex	r3, r2, [r1]
 8009002:	61fb      	str	r3, [r7, #28]
   return(result);
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1e5      	bne.n	8008fd6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800900a:	2300      	movs	r3, #0
 800900c:	e000      	b.n	8009010 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800900e:	2302      	movs	r3, #2
  }
}
 8009010:	4618      	mov	r0, r3
 8009012:	3730      	adds	r7, #48	; 0x30
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	08009869 	.word	0x08009869
 800901c:	08009903 	.word	0x08009903
 8009020:	08009a7b 	.word	0x08009a7b

08009024 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	4613      	mov	r3, r2
 8009030:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b20      	cmp	r3, #32
 800903c:	d11d      	bne.n	800907a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d002      	beq.n	800904a <HAL_UART_Receive_DMA+0x26>
 8009044:	88fb      	ldrh	r3, [r7, #6]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d101      	bne.n	800904e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e016      	b.n	800907c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009054:	2b01      	cmp	r3, #1
 8009056:	d101      	bne.n	800905c <HAL_UART_Receive_DMA+0x38>
 8009058:	2302      	movs	r3, #2
 800905a:	e00f      	b.n	800907c <HAL_UART_Receive_DMA+0x58>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800906a:	88fb      	ldrh	r3, [r7, #6]
 800906c:	461a      	mov	r2, r3
 800906e:	68b9      	ldr	r1, [r7, #8]
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 fd8b 	bl	8009b8c <UART_Start_Receive_DMA>
 8009076:	4603      	mov	r3, r0
 8009078:	e000      	b.n	800907c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800907a:	2302      	movs	r3, #2
  }
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b08e      	sub	sp, #56	; 0x38
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	330c      	adds	r3, #12
 8009092:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	e853 3f00 	ldrex	r3, [r3]
 800909a:	61fb      	str	r3, [r7, #28]
   return(result);
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80090a2:	637b      	str	r3, [r7, #52]	; 0x34
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	330c      	adds	r3, #12
 80090aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090b4:	e841 2300 	strex	r3, r2, [r1]
 80090b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1e5      	bne.n	800908c <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	695b      	ldr	r3, [r3, #20]
 80090c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ca:	2b80      	cmp	r3, #128	; 0x80
 80090cc:	d13c      	bne.n	8009148 <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	3314      	adds	r3, #20
 80090d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	e853 3f00 	ldrex	r3, [r3]
 80090dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090e4:	633b      	str	r3, [r7, #48]	; 0x30
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	3314      	adds	r3, #20
 80090ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ee:	61ba      	str	r2, [r7, #24]
 80090f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f2:	6979      	ldr	r1, [r7, #20]
 80090f4:	69ba      	ldr	r2, [r7, #24]
 80090f6:	e841 2300 	strex	r3, r2, [r1]
 80090fa:	613b      	str	r3, [r7, #16]
   return(result);
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1e5      	bne.n	80090ce <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009106:	2b00      	cmp	r3, #0
 8009108:	d013      	beq.n	8009132 <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800910e:	4a16      	ldr	r2, [pc, #88]	; (8009168 <HAL_UART_AbortTransmit_IT+0xe4>)
 8009110:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009116:	4618      	mov	r0, r3
 8009118:	f7fc f9b4 	bl	8005484 <HAL_DMA_Abort_IT>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d01c      	beq.n	800915c <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800912c:	4610      	mov	r0, r2
 800912e:	4798      	blx	r3
 8009130:	e014      	b.n	800915c <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2220      	movs	r2, #32
 800913c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 fb71 	bl	8009828 <HAL_UART_AbortTransmitCpltCallback>
 8009146:	e009      	b.n	800915c <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2220      	movs	r2, #32
 8009152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 fb66 	bl	8009828 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3738      	adds	r7, #56	; 0x38
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	08009e07 	.word	0x08009e07

0800916c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b09a      	sub	sp, #104	; 0x68
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	330c      	adds	r3, #12
 800917a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800917e:	e853 3f00 	ldrex	r3, [r3]
 8009182:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009186:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800918a:	667b      	str	r3, [r7, #100]	; 0x64
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	330c      	adds	r3, #12
 8009192:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009194:	657a      	str	r2, [r7, #84]	; 0x54
 8009196:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009198:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800919a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800919c:	e841 2300 	strex	r3, r2, [r1]
 80091a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80091a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e5      	bne.n	8009174 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3314      	adds	r3, #20
 80091ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b2:	e853 3f00 	ldrex	r3, [r3]
 80091b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ba:	f023 0301 	bic.w	r3, r3, #1
 80091be:	663b      	str	r3, [r7, #96]	; 0x60
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3314      	adds	r3, #20
 80091c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80091c8:	643a      	str	r2, [r7, #64]	; 0x40
 80091ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091d0:	e841 2300 	strex	r3, r2, [r1]
 80091d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1e5      	bne.n	80091a8 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d119      	bne.n	8009218 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	330c      	adds	r3, #12
 80091ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	e853 3f00 	ldrex	r3, [r3]
 80091f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	f023 0310 	bic.w	r3, r3, #16
 80091fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	330c      	adds	r3, #12
 8009202:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009204:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800920a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800920c:	e841 2300 	strex	r3, r2, [r1]
 8009210:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1e5      	bne.n	80091e4 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009222:	2b40      	cmp	r3, #64	; 0x40
 8009224:	d13f      	bne.n	80092a6 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3314      	adds	r3, #20
 800922c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	e853 3f00 	ldrex	r3, [r3]
 8009234:	60bb      	str	r3, [r7, #8]
   return(result);
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800923c:	65bb      	str	r3, [r7, #88]	; 0x58
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	3314      	adds	r3, #20
 8009244:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009246:	61ba      	str	r2, [r7, #24]
 8009248:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924a:	6979      	ldr	r1, [r7, #20]
 800924c:	69ba      	ldr	r2, [r7, #24]
 800924e:	e841 2300 	strex	r3, r2, [r1]
 8009252:	613b      	str	r3, [r7, #16]
   return(result);
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1e5      	bne.n	8009226 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925e:	2b00      	cmp	r3, #0
 8009260:	d013      	beq.n	800928a <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009266:	4a19      	ldr	r2, [pc, #100]	; (80092cc <HAL_UART_AbortReceive_IT+0x160>)
 8009268:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926e:	4618      	mov	r0, r3
 8009270:	f7fc f908 	bl	8005484 <HAL_DMA_Abort_IT>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d022      	beq.n	80092c0 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009284:	4610      	mov	r0, r2
 8009286:	4798      	blx	r3
 8009288:	e01a      	b.n	80092c0 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2220      	movs	r2, #32
 8009294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 facc 	bl	800983c <HAL_UART_AbortReceiveCpltCallback>
 80092a4:	e00c      	b.n	80092c0 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2220      	movs	r2, #32
 80092b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 fabe 	bl	800983c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3768      	adds	r7, #104	; 0x68
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	08009e31 	.word	0x08009e31

080092d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b0ba      	sub	sp, #232	; 0xe8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80092f6:	2300      	movs	r3, #0
 80092f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80092fc:	2300      	movs	r3, #0
 80092fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009306:	f003 030f 	and.w	r3, r3, #15
 800930a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800930e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10f      	bne.n	8009336 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800931a:	f003 0320 	and.w	r3, r3, #32
 800931e:	2b00      	cmp	r3, #0
 8009320:	d009      	beq.n	8009336 <HAL_UART_IRQHandler+0x66>
 8009322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009326:	f003 0320 	and.w	r3, r3, #32
 800932a:	2b00      	cmp	r3, #0
 800932c:	d003      	beq.n	8009336 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 fdfe 	bl	8009f30 <UART_Receive_IT>
      return;
 8009334:	e256      	b.n	80097e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009336:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800933a:	2b00      	cmp	r3, #0
 800933c:	f000 80de 	beq.w	80094fc <HAL_UART_IRQHandler+0x22c>
 8009340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009344:	f003 0301 	and.w	r3, r3, #1
 8009348:	2b00      	cmp	r3, #0
 800934a:	d106      	bne.n	800935a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800934c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009350:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009354:	2b00      	cmp	r3, #0
 8009356:	f000 80d1 	beq.w	80094fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800935a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00b      	beq.n	800937e <HAL_UART_IRQHandler+0xae>
 8009366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800936a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800936e:	2b00      	cmp	r3, #0
 8009370:	d005      	beq.n	800937e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009376:	f043 0201 	orr.w	r2, r3, #1
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800937e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009382:	f003 0304 	and.w	r3, r3, #4
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00b      	beq.n	80093a2 <HAL_UART_IRQHandler+0xd2>
 800938a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800938e:	f003 0301 	and.w	r3, r3, #1
 8009392:	2b00      	cmp	r3, #0
 8009394:	d005      	beq.n	80093a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939a:	f043 0202 	orr.w	r2, r3, #2
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093a6:	f003 0302 	and.w	r3, r3, #2
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00b      	beq.n	80093c6 <HAL_UART_IRQHandler+0xf6>
 80093ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d005      	beq.n	80093c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093be:	f043 0204 	orr.w	r2, r3, #4
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80093c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ca:	f003 0308 	and.w	r3, r3, #8
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d011      	beq.n	80093f6 <HAL_UART_IRQHandler+0x126>
 80093d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093d6:	f003 0320 	and.w	r3, r3, #32
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d105      	bne.n	80093ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80093de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093e2:	f003 0301 	and.w	r3, r3, #1
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d005      	beq.n	80093f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ee:	f043 0208 	orr.w	r2, r3, #8
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f000 81ed 	beq.w	80097da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009404:	f003 0320 	and.w	r3, r3, #32
 8009408:	2b00      	cmp	r3, #0
 800940a:	d008      	beq.n	800941e <HAL_UART_IRQHandler+0x14e>
 800940c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009410:	f003 0320 	and.w	r3, r3, #32
 8009414:	2b00      	cmp	r3, #0
 8009416:	d002      	beq.n	800941e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fd89 	bl	8009f30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	695b      	ldr	r3, [r3, #20]
 8009424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009428:	2b40      	cmp	r3, #64	; 0x40
 800942a:	bf0c      	ite	eq
 800942c:	2301      	moveq	r3, #1
 800942e:	2300      	movne	r3, #0
 8009430:	b2db      	uxtb	r3, r3
 8009432:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800943a:	f003 0308 	and.w	r3, r3, #8
 800943e:	2b00      	cmp	r3, #0
 8009440:	d103      	bne.n	800944a <HAL_UART_IRQHandler+0x17a>
 8009442:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009446:	2b00      	cmp	r3, #0
 8009448:	d04f      	beq.n	80094ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fc64 	bl	8009d18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800945a:	2b40      	cmp	r3, #64	; 0x40
 800945c:	d141      	bne.n	80094e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3314      	adds	r3, #20
 8009464:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009468:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800946c:	e853 3f00 	ldrex	r3, [r3]
 8009470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009474:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800947c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3314      	adds	r3, #20
 8009486:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800948a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800948e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009492:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009496:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800949a:	e841 2300 	strex	r3, r2, [r1]
 800949e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80094a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1d9      	bne.n	800945e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d013      	beq.n	80094da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b6:	4a7d      	ldr	r2, [pc, #500]	; (80096ac <HAL_UART_IRQHandler+0x3dc>)
 80094b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fb ffe0 	bl	8005484 <HAL_DMA_Abort_IT>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d016      	beq.n	80094f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80094d4:	4610      	mov	r0, r2
 80094d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094d8:	e00e      	b.n	80094f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f99a 	bl	8009814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094e0:	e00a      	b.n	80094f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f996 	bl	8009814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094e8:	e006      	b.n	80094f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f992 	bl	8009814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80094f6:	e170      	b.n	80097da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094f8:	bf00      	nop
    return;
 80094fa:	e16e      	b.n	80097da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009500:	2b01      	cmp	r3, #1
 8009502:	f040 814a 	bne.w	800979a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800950a:	f003 0310 	and.w	r3, r3, #16
 800950e:	2b00      	cmp	r3, #0
 8009510:	f000 8143 	beq.w	800979a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009518:	f003 0310 	and.w	r3, r3, #16
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 813c 	beq.w	800979a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009522:	2300      	movs	r3, #0
 8009524:	60bb      	str	r3, [r7, #8]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	60bb      	str	r3, [r7, #8]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	60bb      	str	r3, [r7, #8]
 8009536:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009542:	2b40      	cmp	r3, #64	; 0x40
 8009544:	f040 80b4 	bne.w	80096b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009554:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 8140 	beq.w	80097de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009562:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009566:	429a      	cmp	r2, r3
 8009568:	f080 8139 	bcs.w	80097de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009572:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800957e:	f000 8088 	beq.w	8009692 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	330c      	adds	r3, #12
 8009588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009590:	e853 3f00 	ldrex	r3, [r3]
 8009594:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009598:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800959c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	330c      	adds	r3, #12
 80095aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80095ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80095b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80095ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80095be:	e841 2300 	strex	r3, r2, [r1]
 80095c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80095c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1d9      	bne.n	8009582 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3314      	adds	r3, #20
 80095d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095d8:	e853 3f00 	ldrex	r3, [r3]
 80095dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80095de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095e0:	f023 0301 	bic.w	r3, r3, #1
 80095e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3314      	adds	r3, #20
 80095ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80095f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80095f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80095fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80095fe:	e841 2300 	strex	r3, r2, [r1]
 8009602:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009604:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1e1      	bne.n	80095ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	3314      	adds	r3, #20
 8009610:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009614:	e853 3f00 	ldrex	r3, [r3]
 8009618:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800961a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800961c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009620:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	3314      	adds	r3, #20
 800962a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800962e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009630:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009632:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009634:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009636:	e841 2300 	strex	r3, r2, [r1]
 800963a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800963c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1e3      	bne.n	800960a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2220      	movs	r2, #32
 8009646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	330c      	adds	r3, #12
 8009656:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800965a:	e853 3f00 	ldrex	r3, [r3]
 800965e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009662:	f023 0310 	bic.w	r3, r3, #16
 8009666:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	330c      	adds	r3, #12
 8009670:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009674:	65ba      	str	r2, [r7, #88]	; 0x58
 8009676:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009678:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800967a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800967c:	e841 2300 	strex	r3, r2, [r1]
 8009680:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1e3      	bne.n	8009650 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968c:	4618      	mov	r0, r3
 800968e:	f7fb fe89 	bl	80053a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800969a:	b29b      	uxth	r3, r3
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	b29b      	uxth	r3, r3
 80096a0:	4619      	mov	r1, r3
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f8d4 	bl	8009850 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80096a8:	e099      	b.n	80097de <HAL_UART_IRQHandler+0x50e>
 80096aa:	bf00      	nop
 80096ac:	08009ddf 	.word	0x08009ddf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f000 808b 	beq.w	80097e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80096cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f000 8086 	beq.w	80097e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	330c      	adds	r3, #12
 80096dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e0:	e853 3f00 	ldrex	r3, [r3]
 80096e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	330c      	adds	r3, #12
 80096f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80096fa:	647a      	str	r2, [r7, #68]	; 0x44
 80096fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009700:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009702:	e841 2300 	strex	r3, r2, [r1]
 8009706:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1e3      	bne.n	80096d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3314      	adds	r3, #20
 8009714:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009718:	e853 3f00 	ldrex	r3, [r3]
 800971c:	623b      	str	r3, [r7, #32]
   return(result);
 800971e:	6a3b      	ldr	r3, [r7, #32]
 8009720:	f023 0301 	bic.w	r3, r3, #1
 8009724:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	3314      	adds	r3, #20
 800972e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009732:	633a      	str	r2, [r7, #48]	; 0x30
 8009734:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009736:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800973a:	e841 2300 	strex	r3, r2, [r1]
 800973e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1e3      	bne.n	800970e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2220      	movs	r2, #32
 800974a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	330c      	adds	r3, #12
 800975a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	e853 3f00 	ldrex	r3, [r3]
 8009762:	60fb      	str	r3, [r7, #12]
   return(result);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f023 0310 	bic.w	r3, r3, #16
 800976a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	330c      	adds	r3, #12
 8009774:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009778:	61fa      	str	r2, [r7, #28]
 800977a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977c:	69b9      	ldr	r1, [r7, #24]
 800977e:	69fa      	ldr	r2, [r7, #28]
 8009780:	e841 2300 	strex	r3, r2, [r1]
 8009784:	617b      	str	r3, [r7, #20]
   return(result);
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d1e3      	bne.n	8009754 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800978c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009790:	4619      	mov	r1, r3
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f85c 	bl	8009850 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009798:	e023      	b.n	80097e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800979a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800979e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d009      	beq.n	80097ba <HAL_UART_IRQHandler+0x4ea>
 80097a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d003      	beq.n	80097ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fb54 	bl	8009e60 <UART_Transmit_IT>
    return;
 80097b8:	e014      	b.n	80097e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80097ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00e      	beq.n	80097e4 <HAL_UART_IRQHandler+0x514>
 80097c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d008      	beq.n	80097e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 fb94 	bl	8009f00 <UART_EndTransmit_IT>
    return;
 80097d8:	e004      	b.n	80097e4 <HAL_UART_IRQHandler+0x514>
    return;
 80097da:	bf00      	nop
 80097dc:	e002      	b.n	80097e4 <HAL_UART_IRQHandler+0x514>
      return;
 80097de:	bf00      	nop
 80097e0:	e000      	b.n	80097e4 <HAL_UART_IRQHandler+0x514>
      return;
 80097e2:	bf00      	nop
  }
}
 80097e4:	37e8      	adds	r7, #232	; 0xe8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop

080097ec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009830:	bf00      	nop
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	460b      	mov	r3, r1
 800985a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b090      	sub	sp, #64	; 0x40
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009874:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009880:	2b00      	cmp	r3, #0
 8009882:	d137      	bne.n	80098f4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009886:	2200      	movs	r2, #0
 8009888:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800988a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	3314      	adds	r3, #20
 8009890:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	e853 3f00 	ldrex	r3, [r3]
 8009898:	623b      	str	r3, [r7, #32]
   return(result);
 800989a:	6a3b      	ldr	r3, [r7, #32]
 800989c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80098a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	3314      	adds	r3, #20
 80098a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098aa:	633a      	str	r2, [r7, #48]	; 0x30
 80098ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098b2:	e841 2300 	strex	r3, r2, [r1]
 80098b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d1e5      	bne.n	800988a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80098be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	330c      	adds	r3, #12
 80098c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	e853 3f00 	ldrex	r3, [r3]
 80098cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098d4:	637b      	str	r3, [r7, #52]	; 0x34
 80098d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	330c      	adds	r3, #12
 80098dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098de:	61fa      	str	r2, [r7, #28]
 80098e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e2:	69b9      	ldr	r1, [r7, #24]
 80098e4:	69fa      	ldr	r2, [r7, #28]
 80098e6:	e841 2300 	strex	r3, r2, [r1]
 80098ea:	617b      	str	r3, [r7, #20]
   return(result);
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1e5      	bne.n	80098be <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80098f2:	e002      	b.n	80098fa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80098f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80098f6:	f7f7 fde9 	bl	80014cc <HAL_UART_TxCpltCallback>
}
 80098fa:	bf00      	nop
 80098fc:	3740      	adds	r7, #64	; 0x40
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f7ff ff6b 	bl	80097ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009916:	bf00      	nop
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b09c      	sub	sp, #112	; 0x70
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009936:	2b00      	cmp	r3, #0
 8009938:	d172      	bne.n	8009a20 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800993a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800993c:	2200      	movs	r2, #0
 800993e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	330c      	adds	r3, #12
 8009946:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800994a:	e853 3f00 	ldrex	r3, [r3]
 800994e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009952:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009956:	66bb      	str	r3, [r7, #104]	; 0x68
 8009958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	330c      	adds	r3, #12
 800995e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009960:	65ba      	str	r2, [r7, #88]	; 0x58
 8009962:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009964:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009966:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009968:	e841 2300 	strex	r3, r2, [r1]
 800996c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800996e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009970:	2b00      	cmp	r3, #0
 8009972:	d1e5      	bne.n	8009940 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3314      	adds	r3, #20
 800997a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997e:	e853 3f00 	ldrex	r3, [r3]
 8009982:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009986:	f023 0301 	bic.w	r3, r3, #1
 800998a:	667b      	str	r3, [r7, #100]	; 0x64
 800998c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3314      	adds	r3, #20
 8009992:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009994:	647a      	str	r2, [r7, #68]	; 0x44
 8009996:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009998:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800999a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800999c:	e841 2300 	strex	r3, r2, [r1]
 80099a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80099a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1e5      	bne.n	8009974 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	3314      	adds	r3, #20
 80099ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b2:	e853 3f00 	ldrex	r3, [r3]
 80099b6:	623b      	str	r3, [r7, #32]
   return(result);
 80099b8:	6a3b      	ldr	r3, [r7, #32]
 80099ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099be:	663b      	str	r3, [r7, #96]	; 0x60
 80099c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	3314      	adds	r3, #20
 80099c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80099c8:	633a      	str	r2, [r7, #48]	; 0x30
 80099ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099d0:	e841 2300 	strex	r3, r2, [r1]
 80099d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1e5      	bne.n	80099a8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80099dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099de:	2220      	movs	r2, #32
 80099e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d119      	bne.n	8009a20 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	330c      	adds	r3, #12
 80099f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	e853 3f00 	ldrex	r3, [r3]
 80099fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f023 0310 	bic.w	r3, r3, #16
 8009a02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	330c      	adds	r3, #12
 8009a0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a0c:	61fa      	str	r2, [r7, #28]
 8009a0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a10:	69b9      	ldr	r1, [r7, #24]
 8009a12:	69fa      	ldr	r2, [r7, #28]
 8009a14:	e841 2300 	strex	r3, r2, [r1]
 8009a18:	617b      	str	r3, [r7, #20]
   return(result);
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1e5      	bne.n	80099ec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d106      	bne.n	8009a36 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009a30:	f7ff ff0e 	bl	8009850 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a34:	e002      	b.n	8009a3c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009a36:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009a38:	f7f7 fd80 	bl	800153c <HAL_UART_RxCpltCallback>
}
 8009a3c:	bf00      	nop
 8009a3e:	3770      	adds	r7, #112	; 0x70
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a50:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d108      	bne.n	8009a6c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a5e:	085b      	lsrs	r3, r3, #1
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	4619      	mov	r1, r3
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f7ff fef3 	bl	8009850 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a6a:	e002      	b.n	8009a72 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	f7ff fec7 	bl	8009800 <HAL_UART_RxHalfCpltCallback>
}
 8009a72:	bf00      	nop
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b084      	sub	sp, #16
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009a82:	2300      	movs	r3, #0
 8009a84:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	695b      	ldr	r3, [r3, #20]
 8009a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a96:	2b80      	cmp	r3, #128	; 0x80
 8009a98:	bf0c      	ite	eq
 8009a9a:	2301      	moveq	r3, #1
 8009a9c:	2300      	movne	r3, #0
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	2b21      	cmp	r3, #33	; 0x21
 8009aac:	d108      	bne.n	8009ac0 <UART_DMAError+0x46>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d005      	beq.n	8009ac0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009aba:	68b8      	ldr	r0, [r7, #8]
 8009abc:	f000 f904 	bl	8009cc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	695b      	ldr	r3, [r3, #20]
 8009ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aca:	2b40      	cmp	r3, #64	; 0x40
 8009acc:	bf0c      	ite	eq
 8009ace:	2301      	moveq	r3, #1
 8009ad0:	2300      	movne	r3, #0
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	2b22      	cmp	r3, #34	; 0x22
 8009ae0:	d108      	bne.n	8009af4 <UART_DMAError+0x7a>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d005      	beq.n	8009af4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	2200      	movs	r2, #0
 8009aec:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009aee:	68b8      	ldr	r0, [r7, #8]
 8009af0:	f000 f912 	bl	8009d18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af8:	f043 0210 	orr.w	r2, r3, #16
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b00:	68b8      	ldr	r0, [r7, #8]
 8009b02:	f7ff fe87 	bl	8009814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b06:	bf00      	nop
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b0e:	b480      	push	{r7}
 8009b10:	b085      	sub	sp, #20
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	60f8      	str	r0, [r7, #12]
 8009b16:	60b9      	str	r1, [r7, #8]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	88fa      	ldrh	r2, [r7, #6]
 8009b26:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	88fa      	ldrh	r2, [r7, #6]
 8009b2c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2200      	movs	r2, #0
 8009b32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2222      	movs	r2, #34	; 0x22
 8009b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d007      	beq.n	8009b5c <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68da      	ldr	r2, [r3, #12]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b5a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	695a      	ldr	r2, [r3, #20]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f042 0201 	orr.w	r2, r2, #1
 8009b6a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68da      	ldr	r2, [r3, #12]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f042 0220 	orr.w	r2, r2, #32
 8009b7a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
	...

08009b8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b098      	sub	sp, #96	; 0x60
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	4613      	mov	r3, r2
 8009b98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009b9a:	68ba      	ldr	r2, [r7, #8]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	88fa      	ldrh	r2, [r7, #6]
 8009ba4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2222      	movs	r2, #34	; 0x22
 8009bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb8:	4a40      	ldr	r2, [pc, #256]	; (8009cbc <UART_Start_Receive_DMA+0x130>)
 8009bba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc0:	4a3f      	ldr	r2, [pc, #252]	; (8009cc0 <UART_Start_Receive_DMA+0x134>)
 8009bc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc8:	4a3e      	ldr	r2, [pc, #248]	; (8009cc4 <UART_Start_Receive_DMA+0x138>)
 8009bca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009bd4:	f107 0308 	add.w	r3, r7, #8
 8009bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	3304      	adds	r3, #4
 8009be4:	4619      	mov	r1, r3
 8009be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	88fb      	ldrh	r3, [r7, #6]
 8009bec:	f7fb fb82 	bl	80052f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	613b      	str	r3, [r7, #16]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	613b      	str	r3, [r7, #16]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	613b      	str	r3, [r7, #16]
 8009c04:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d019      	beq.n	8009c4a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	330c      	adds	r3, #12
 8009c1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c20:	e853 3f00 	ldrex	r3, [r3]
 8009c24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	330c      	adds	r3, #12
 8009c34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c36:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009c38:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009c3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c3e:	e841 2300 	strex	r3, r2, [r1]
 8009c42:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1e5      	bne.n	8009c16 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	3314      	adds	r3, #20
 8009c50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c54:	e853 3f00 	ldrex	r3, [r3]
 8009c58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5c:	f043 0301 	orr.w	r3, r3, #1
 8009c60:	657b      	str	r3, [r7, #84]	; 0x54
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	3314      	adds	r3, #20
 8009c68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c6a:	63ba      	str	r2, [r7, #56]	; 0x38
 8009c6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c72:	e841 2300 	strex	r3, r2, [r1]
 8009c76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1e5      	bne.n	8009c4a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	3314      	adds	r3, #20
 8009c84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	e853 3f00 	ldrex	r3, [r3]
 8009c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c94:	653b      	str	r3, [r7, #80]	; 0x50
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	3314      	adds	r3, #20
 8009c9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c9e:	627a      	str	r2, [r7, #36]	; 0x24
 8009ca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca2:	6a39      	ldr	r1, [r7, #32]
 8009ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ca6:	e841 2300 	strex	r3, r2, [r1]
 8009caa:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1e5      	bne.n	8009c7e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3760      	adds	r7, #96	; 0x60
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	0800991f 	.word	0x0800991f
 8009cc0:	08009a45 	.word	0x08009a45
 8009cc4:	08009a7b 	.word	0x08009a7b

08009cc8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b089      	sub	sp, #36	; 0x24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	330c      	adds	r3, #12
 8009cd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	e853 3f00 	ldrex	r3, [r3]
 8009cde:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009ce6:	61fb      	str	r3, [r7, #28]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	330c      	adds	r3, #12
 8009cee:	69fa      	ldr	r2, [r7, #28]
 8009cf0:	61ba      	str	r2, [r7, #24]
 8009cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf4:	6979      	ldr	r1, [r7, #20]
 8009cf6:	69ba      	ldr	r2, [r7, #24]
 8009cf8:	e841 2300 	strex	r3, r2, [r1]
 8009cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d1e5      	bne.n	8009cd0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2220      	movs	r2, #32
 8009d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009d0c:	bf00      	nop
 8009d0e:	3724      	adds	r7, #36	; 0x24
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b095      	sub	sp, #84	; 0x54
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	330c      	adds	r3, #12
 8009d26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d2a:	e853 3f00 	ldrex	r3, [r3]
 8009d2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	330c      	adds	r3, #12
 8009d3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d40:	643a      	str	r2, [r7, #64]	; 0x40
 8009d42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d48:	e841 2300 	strex	r3, r2, [r1]
 8009d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d1e5      	bne.n	8009d20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	3314      	adds	r3, #20
 8009d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5c:	6a3b      	ldr	r3, [r7, #32]
 8009d5e:	e853 3f00 	ldrex	r3, [r3]
 8009d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	f023 0301 	bic.w	r3, r3, #1
 8009d6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	3314      	adds	r3, #20
 8009d72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d7c:	e841 2300 	strex	r3, r2, [r1]
 8009d80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1e5      	bne.n	8009d54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d119      	bne.n	8009dc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	330c      	adds	r3, #12
 8009d96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	e853 3f00 	ldrex	r3, [r3]
 8009d9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	f023 0310 	bic.w	r3, r3, #16
 8009da6:	647b      	str	r3, [r7, #68]	; 0x44
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	330c      	adds	r3, #12
 8009dae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009db0:	61ba      	str	r2, [r7, #24]
 8009db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db4:	6979      	ldr	r1, [r7, #20]
 8009db6:	69ba      	ldr	r2, [r7, #24]
 8009db8:	e841 2300 	strex	r3, r2, [r1]
 8009dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d1e5      	bne.n	8009d90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2220      	movs	r2, #32
 8009dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009dd2:	bf00      	nop
 8009dd4:	3754      	adds	r7, #84	; 0x54
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr

08009dde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b084      	sub	sp, #16
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2200      	movs	r2, #0
 8009df0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f7ff fd0b 	bl	8009814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dfe:	bf00      	nop
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b084      	sub	sp, #16
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e12:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2220      	movs	r2, #32
 8009e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f7ff fd00 	bl	8009828 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e28:	bf00      	nop
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e3c:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2220      	movs	r2, #32
 8009e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f7ff fcf2 	bl	800983c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e58:	bf00      	nop
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	2b21      	cmp	r3, #33	; 0x21
 8009e72:	d13e      	bne.n	8009ef2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e7c:	d114      	bne.n	8009ea8 <UART_Transmit_IT+0x48>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d110      	bne.n	8009ea8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a1b      	ldr	r3, [r3, #32]
 8009e8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	881b      	ldrh	r3, [r3, #0]
 8009e90:	461a      	mov	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a1b      	ldr	r3, [r3, #32]
 8009ea0:	1c9a      	adds	r2, r3, #2
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	621a      	str	r2, [r3, #32]
 8009ea6:	e008      	b.n	8009eba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a1b      	ldr	r3, [r3, #32]
 8009eac:	1c59      	adds	r1, r3, #1
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	6211      	str	r1, [r2, #32]
 8009eb2:	781a      	ldrb	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d10f      	bne.n	8009eee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	68da      	ldr	r2, [r3, #12]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009edc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68da      	ldr	r2, [r3, #12]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009eec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	e000      	b.n	8009ef4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009ef2:	2302      	movs	r3, #2
  }
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3714      	adds	r7, #20
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68da      	ldr	r2, [r3, #12]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2220      	movs	r2, #32
 8009f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f7f7 fad3 	bl	80014cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3708      	adds	r7, #8
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b08c      	sub	sp, #48	; 0x30
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	2b22      	cmp	r3, #34	; 0x22
 8009f42:	f040 80ab 	bne.w	800a09c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f4e:	d117      	bne.n	8009f80 <UART_Receive_IT+0x50>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d113      	bne.n	8009f80 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f60:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f6e:	b29a      	uxth	r2, r3
 8009f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f78:	1c9a      	adds	r2, r3, #2
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	629a      	str	r2, [r3, #40]	; 0x28
 8009f7e:	e026      	b.n	8009fce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009f86:	2300      	movs	r3, #0
 8009f88:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f92:	d007      	beq.n	8009fa4 <UART_Receive_IT+0x74>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10a      	bne.n	8009fb2 <UART_Receive_IT+0x82>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d106      	bne.n	8009fb2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	b2da      	uxtb	r2, r3
 8009fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fae:	701a      	strb	r2, [r3, #0]
 8009fb0:	e008      	b.n	8009fc4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fbe:	b2da      	uxtb	r2, r3
 8009fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc8:	1c5a      	adds	r2, r3, #1
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	4619      	mov	r1, r3
 8009fdc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d15a      	bne.n	800a098 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68da      	ldr	r2, [r3, #12]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f022 0220 	bic.w	r2, r2, #32
 8009ff0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68da      	ldr	r2, [r3, #12]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a000:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	695a      	ldr	r2, [r3, #20]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f022 0201 	bic.w	r2, r2, #1
 800a010:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2220      	movs	r2, #32
 800a016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d135      	bne.n	800a08e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	330c      	adds	r3, #12
 800a02e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	e853 3f00 	ldrex	r3, [r3]
 800a036:	613b      	str	r3, [r7, #16]
   return(result);
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	f023 0310 	bic.w	r3, r3, #16
 800a03e:	627b      	str	r3, [r7, #36]	; 0x24
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	330c      	adds	r3, #12
 800a046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a048:	623a      	str	r2, [r7, #32]
 800a04a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04c:	69f9      	ldr	r1, [r7, #28]
 800a04e:	6a3a      	ldr	r2, [r7, #32]
 800a050:	e841 2300 	strex	r3, r2, [r1]
 800a054:	61bb      	str	r3, [r7, #24]
   return(result);
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1e5      	bne.n	800a028 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f003 0310 	and.w	r3, r3, #16
 800a066:	2b10      	cmp	r3, #16
 800a068:	d10a      	bne.n	800a080 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a06a:	2300      	movs	r3, #0
 800a06c:	60fb      	str	r3, [r7, #12]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	60fb      	str	r3, [r7, #12]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	60fb      	str	r3, [r7, #12]
 800a07e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a084:	4619      	mov	r1, r3
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f7ff fbe2 	bl	8009850 <HAL_UARTEx_RxEventCallback>
 800a08c:	e002      	b.n	800a094 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f7f7 fa54 	bl	800153c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	e002      	b.n	800a09e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a098:	2300      	movs	r3, #0
 800a09a:	e000      	b.n	800a09e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a09c:	2302      	movs	r3, #2
  }
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3730      	adds	r7, #48	; 0x30
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
	...

0800a0a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0ac:	b0c0      	sub	sp, #256	; 0x100
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a0c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0c4:	68d9      	ldr	r1, [r3, #12]
 800a0c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	ea40 0301 	orr.w	r3, r0, r1
 800a0d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a0d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0d6:	689a      	ldr	r2, [r3, #8]
 800a0d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	431a      	orrs	r2, r3
 800a0e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0e4:	695b      	ldr	r3, [r3, #20]
 800a0e6:	431a      	orrs	r2, r3
 800a0e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0ec:	69db      	ldr	r3, [r3, #28]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a0f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a100:	f021 010c 	bic.w	r1, r1, #12
 800a104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a10e:	430b      	orrs	r3, r1
 800a110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a11e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a122:	6999      	ldr	r1, [r3, #24]
 800a124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	ea40 0301 	orr.w	r3, r0, r1
 800a12e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	4b8f      	ldr	r3, [pc, #572]	; (800a374 <UART_SetConfig+0x2cc>)
 800a138:	429a      	cmp	r2, r3
 800a13a:	d005      	beq.n	800a148 <UART_SetConfig+0xa0>
 800a13c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	4b8d      	ldr	r3, [pc, #564]	; (800a378 <UART_SetConfig+0x2d0>)
 800a144:	429a      	cmp	r2, r3
 800a146:	d104      	bne.n	800a152 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a148:	f7fe fac6 	bl	80086d8 <HAL_RCC_GetPCLK2Freq>
 800a14c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a150:	e003      	b.n	800a15a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a152:	f7fe faad 	bl	80086b0 <HAL_RCC_GetPCLK1Freq>
 800a156:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a15a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a15e:	69db      	ldr	r3, [r3, #28]
 800a160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a164:	f040 810c 	bne.w	800a380 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a16c:	2200      	movs	r2, #0
 800a16e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a172:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a176:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a17a:	4622      	mov	r2, r4
 800a17c:	462b      	mov	r3, r5
 800a17e:	1891      	adds	r1, r2, r2
 800a180:	65b9      	str	r1, [r7, #88]	; 0x58
 800a182:	415b      	adcs	r3, r3
 800a184:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a18a:	4621      	mov	r1, r4
 800a18c:	eb12 0801 	adds.w	r8, r2, r1
 800a190:	4629      	mov	r1, r5
 800a192:	eb43 0901 	adc.w	r9, r3, r1
 800a196:	f04f 0200 	mov.w	r2, #0
 800a19a:	f04f 0300 	mov.w	r3, #0
 800a19e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a1a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a1a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a1aa:	4690      	mov	r8, r2
 800a1ac:	4699      	mov	r9, r3
 800a1ae:	4623      	mov	r3, r4
 800a1b0:	eb18 0303 	adds.w	r3, r8, r3
 800a1b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a1b8:	462b      	mov	r3, r5
 800a1ba:	eb49 0303 	adc.w	r3, r9, r3
 800a1be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a1c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a1ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a1d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	18db      	adds	r3, r3, r3
 800a1da:	653b      	str	r3, [r7, #80]	; 0x50
 800a1dc:	4613      	mov	r3, r2
 800a1de:	eb42 0303 	adc.w	r3, r2, r3
 800a1e2:	657b      	str	r3, [r7, #84]	; 0x54
 800a1e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a1e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a1ec:	f7f6 fcbe 	bl	8000b6c <__aeabi_uldivmod>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	4b61      	ldr	r3, [pc, #388]	; (800a37c <UART_SetConfig+0x2d4>)
 800a1f6:	fba3 2302 	umull	r2, r3, r3, r2
 800a1fa:	095b      	lsrs	r3, r3, #5
 800a1fc:	011c      	lsls	r4, r3, #4
 800a1fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a202:	2200      	movs	r2, #0
 800a204:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a208:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a20c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a210:	4642      	mov	r2, r8
 800a212:	464b      	mov	r3, r9
 800a214:	1891      	adds	r1, r2, r2
 800a216:	64b9      	str	r1, [r7, #72]	; 0x48
 800a218:	415b      	adcs	r3, r3
 800a21a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a21c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a220:	4641      	mov	r1, r8
 800a222:	eb12 0a01 	adds.w	sl, r2, r1
 800a226:	4649      	mov	r1, r9
 800a228:	eb43 0b01 	adc.w	fp, r3, r1
 800a22c:	f04f 0200 	mov.w	r2, #0
 800a230:	f04f 0300 	mov.w	r3, #0
 800a234:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a238:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a23c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a240:	4692      	mov	sl, r2
 800a242:	469b      	mov	fp, r3
 800a244:	4643      	mov	r3, r8
 800a246:	eb1a 0303 	adds.w	r3, sl, r3
 800a24a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a24e:	464b      	mov	r3, r9
 800a250:	eb4b 0303 	adc.w	r3, fp, r3
 800a254:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a264:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a26c:	460b      	mov	r3, r1
 800a26e:	18db      	adds	r3, r3, r3
 800a270:	643b      	str	r3, [r7, #64]	; 0x40
 800a272:	4613      	mov	r3, r2
 800a274:	eb42 0303 	adc.w	r3, r2, r3
 800a278:	647b      	str	r3, [r7, #68]	; 0x44
 800a27a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a27e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a282:	f7f6 fc73 	bl	8000b6c <__aeabi_uldivmod>
 800a286:	4602      	mov	r2, r0
 800a288:	460b      	mov	r3, r1
 800a28a:	4611      	mov	r1, r2
 800a28c:	4b3b      	ldr	r3, [pc, #236]	; (800a37c <UART_SetConfig+0x2d4>)
 800a28e:	fba3 2301 	umull	r2, r3, r3, r1
 800a292:	095b      	lsrs	r3, r3, #5
 800a294:	2264      	movs	r2, #100	; 0x64
 800a296:	fb02 f303 	mul.w	r3, r2, r3
 800a29a:	1acb      	subs	r3, r1, r3
 800a29c:	00db      	lsls	r3, r3, #3
 800a29e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a2a2:	4b36      	ldr	r3, [pc, #216]	; (800a37c <UART_SetConfig+0x2d4>)
 800a2a4:	fba3 2302 	umull	r2, r3, r3, r2
 800a2a8:	095b      	lsrs	r3, r3, #5
 800a2aa:	005b      	lsls	r3, r3, #1
 800a2ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a2b0:	441c      	add	r4, r3
 800a2b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a2bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a2c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a2c4:	4642      	mov	r2, r8
 800a2c6:	464b      	mov	r3, r9
 800a2c8:	1891      	adds	r1, r2, r2
 800a2ca:	63b9      	str	r1, [r7, #56]	; 0x38
 800a2cc:	415b      	adcs	r3, r3
 800a2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a2d4:	4641      	mov	r1, r8
 800a2d6:	1851      	adds	r1, r2, r1
 800a2d8:	6339      	str	r1, [r7, #48]	; 0x30
 800a2da:	4649      	mov	r1, r9
 800a2dc:	414b      	adcs	r3, r1
 800a2de:	637b      	str	r3, [r7, #52]	; 0x34
 800a2e0:	f04f 0200 	mov.w	r2, #0
 800a2e4:	f04f 0300 	mov.w	r3, #0
 800a2e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a2ec:	4659      	mov	r1, fp
 800a2ee:	00cb      	lsls	r3, r1, #3
 800a2f0:	4651      	mov	r1, sl
 800a2f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2f6:	4651      	mov	r1, sl
 800a2f8:	00ca      	lsls	r2, r1, #3
 800a2fa:	4610      	mov	r0, r2
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	4603      	mov	r3, r0
 800a300:	4642      	mov	r2, r8
 800a302:	189b      	adds	r3, r3, r2
 800a304:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a308:	464b      	mov	r3, r9
 800a30a:	460a      	mov	r2, r1
 800a30c:	eb42 0303 	adc.w	r3, r2, r3
 800a310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a320:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a328:	460b      	mov	r3, r1
 800a32a:	18db      	adds	r3, r3, r3
 800a32c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a32e:	4613      	mov	r3, r2
 800a330:	eb42 0303 	adc.w	r3, r2, r3
 800a334:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a33a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a33e:	f7f6 fc15 	bl	8000b6c <__aeabi_uldivmod>
 800a342:	4602      	mov	r2, r0
 800a344:	460b      	mov	r3, r1
 800a346:	4b0d      	ldr	r3, [pc, #52]	; (800a37c <UART_SetConfig+0x2d4>)
 800a348:	fba3 1302 	umull	r1, r3, r3, r2
 800a34c:	095b      	lsrs	r3, r3, #5
 800a34e:	2164      	movs	r1, #100	; 0x64
 800a350:	fb01 f303 	mul.w	r3, r1, r3
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	00db      	lsls	r3, r3, #3
 800a358:	3332      	adds	r3, #50	; 0x32
 800a35a:	4a08      	ldr	r2, [pc, #32]	; (800a37c <UART_SetConfig+0x2d4>)
 800a35c:	fba2 2303 	umull	r2, r3, r2, r3
 800a360:	095b      	lsrs	r3, r3, #5
 800a362:	f003 0207 	and.w	r2, r3, #7
 800a366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4422      	add	r2, r4
 800a36e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a370:	e105      	b.n	800a57e <UART_SetConfig+0x4d6>
 800a372:	bf00      	nop
 800a374:	40011000 	.word	0x40011000
 800a378:	40011400 	.word	0x40011400
 800a37c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a384:	2200      	movs	r2, #0
 800a386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a38a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a38e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a392:	4642      	mov	r2, r8
 800a394:	464b      	mov	r3, r9
 800a396:	1891      	adds	r1, r2, r2
 800a398:	6239      	str	r1, [r7, #32]
 800a39a:	415b      	adcs	r3, r3
 800a39c:	627b      	str	r3, [r7, #36]	; 0x24
 800a39e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a3a2:	4641      	mov	r1, r8
 800a3a4:	1854      	adds	r4, r2, r1
 800a3a6:	4649      	mov	r1, r9
 800a3a8:	eb43 0501 	adc.w	r5, r3, r1
 800a3ac:	f04f 0200 	mov.w	r2, #0
 800a3b0:	f04f 0300 	mov.w	r3, #0
 800a3b4:	00eb      	lsls	r3, r5, #3
 800a3b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a3ba:	00e2      	lsls	r2, r4, #3
 800a3bc:	4614      	mov	r4, r2
 800a3be:	461d      	mov	r5, r3
 800a3c0:	4643      	mov	r3, r8
 800a3c2:	18e3      	adds	r3, r4, r3
 800a3c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a3c8:	464b      	mov	r3, r9
 800a3ca:	eb45 0303 	adc.w	r3, r5, r3
 800a3ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a3d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a3de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a3e2:	f04f 0200 	mov.w	r2, #0
 800a3e6:	f04f 0300 	mov.w	r3, #0
 800a3ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a3ee:	4629      	mov	r1, r5
 800a3f0:	008b      	lsls	r3, r1, #2
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3f8:	4621      	mov	r1, r4
 800a3fa:	008a      	lsls	r2, r1, #2
 800a3fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a400:	f7f6 fbb4 	bl	8000b6c <__aeabi_uldivmod>
 800a404:	4602      	mov	r2, r0
 800a406:	460b      	mov	r3, r1
 800a408:	4b60      	ldr	r3, [pc, #384]	; (800a58c <UART_SetConfig+0x4e4>)
 800a40a:	fba3 2302 	umull	r2, r3, r3, r2
 800a40e:	095b      	lsrs	r3, r3, #5
 800a410:	011c      	lsls	r4, r3, #4
 800a412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a416:	2200      	movs	r2, #0
 800a418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a41c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a420:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a424:	4642      	mov	r2, r8
 800a426:	464b      	mov	r3, r9
 800a428:	1891      	adds	r1, r2, r2
 800a42a:	61b9      	str	r1, [r7, #24]
 800a42c:	415b      	adcs	r3, r3
 800a42e:	61fb      	str	r3, [r7, #28]
 800a430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a434:	4641      	mov	r1, r8
 800a436:	1851      	adds	r1, r2, r1
 800a438:	6139      	str	r1, [r7, #16]
 800a43a:	4649      	mov	r1, r9
 800a43c:	414b      	adcs	r3, r1
 800a43e:	617b      	str	r3, [r7, #20]
 800a440:	f04f 0200 	mov.w	r2, #0
 800a444:	f04f 0300 	mov.w	r3, #0
 800a448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a44c:	4659      	mov	r1, fp
 800a44e:	00cb      	lsls	r3, r1, #3
 800a450:	4651      	mov	r1, sl
 800a452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a456:	4651      	mov	r1, sl
 800a458:	00ca      	lsls	r2, r1, #3
 800a45a:	4610      	mov	r0, r2
 800a45c:	4619      	mov	r1, r3
 800a45e:	4603      	mov	r3, r0
 800a460:	4642      	mov	r2, r8
 800a462:	189b      	adds	r3, r3, r2
 800a464:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a468:	464b      	mov	r3, r9
 800a46a:	460a      	mov	r2, r1
 800a46c:	eb42 0303 	adc.w	r3, r2, r3
 800a470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a47e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a480:	f04f 0200 	mov.w	r2, #0
 800a484:	f04f 0300 	mov.w	r3, #0
 800a488:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a48c:	4649      	mov	r1, r9
 800a48e:	008b      	lsls	r3, r1, #2
 800a490:	4641      	mov	r1, r8
 800a492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a496:	4641      	mov	r1, r8
 800a498:	008a      	lsls	r2, r1, #2
 800a49a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a49e:	f7f6 fb65 	bl	8000b6c <__aeabi_uldivmod>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	4b39      	ldr	r3, [pc, #228]	; (800a58c <UART_SetConfig+0x4e4>)
 800a4a8:	fba3 1302 	umull	r1, r3, r3, r2
 800a4ac:	095b      	lsrs	r3, r3, #5
 800a4ae:	2164      	movs	r1, #100	; 0x64
 800a4b0:	fb01 f303 	mul.w	r3, r1, r3
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	011b      	lsls	r3, r3, #4
 800a4b8:	3332      	adds	r3, #50	; 0x32
 800a4ba:	4a34      	ldr	r2, [pc, #208]	; (800a58c <UART_SetConfig+0x4e4>)
 800a4bc:	fba2 2303 	umull	r2, r3, r2, r3
 800a4c0:	095b      	lsrs	r3, r3, #5
 800a4c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4c6:	441c      	add	r4, r3
 800a4c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	673b      	str	r3, [r7, #112]	; 0x70
 800a4d0:	677a      	str	r2, [r7, #116]	; 0x74
 800a4d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a4d6:	4642      	mov	r2, r8
 800a4d8:	464b      	mov	r3, r9
 800a4da:	1891      	adds	r1, r2, r2
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	415b      	adcs	r3, r3
 800a4e0:	60fb      	str	r3, [r7, #12]
 800a4e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a4e6:	4641      	mov	r1, r8
 800a4e8:	1851      	adds	r1, r2, r1
 800a4ea:	6039      	str	r1, [r7, #0]
 800a4ec:	4649      	mov	r1, r9
 800a4ee:	414b      	adcs	r3, r1
 800a4f0:	607b      	str	r3, [r7, #4]
 800a4f2:	f04f 0200 	mov.w	r2, #0
 800a4f6:	f04f 0300 	mov.w	r3, #0
 800a4fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a4fe:	4659      	mov	r1, fp
 800a500:	00cb      	lsls	r3, r1, #3
 800a502:	4651      	mov	r1, sl
 800a504:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a508:	4651      	mov	r1, sl
 800a50a:	00ca      	lsls	r2, r1, #3
 800a50c:	4610      	mov	r0, r2
 800a50e:	4619      	mov	r1, r3
 800a510:	4603      	mov	r3, r0
 800a512:	4642      	mov	r2, r8
 800a514:	189b      	adds	r3, r3, r2
 800a516:	66bb      	str	r3, [r7, #104]	; 0x68
 800a518:	464b      	mov	r3, r9
 800a51a:	460a      	mov	r2, r1
 800a51c:	eb42 0303 	adc.w	r3, r2, r3
 800a520:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	663b      	str	r3, [r7, #96]	; 0x60
 800a52c:	667a      	str	r2, [r7, #100]	; 0x64
 800a52e:	f04f 0200 	mov.w	r2, #0
 800a532:	f04f 0300 	mov.w	r3, #0
 800a536:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a53a:	4649      	mov	r1, r9
 800a53c:	008b      	lsls	r3, r1, #2
 800a53e:	4641      	mov	r1, r8
 800a540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a544:	4641      	mov	r1, r8
 800a546:	008a      	lsls	r2, r1, #2
 800a548:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a54c:	f7f6 fb0e 	bl	8000b6c <__aeabi_uldivmod>
 800a550:	4602      	mov	r2, r0
 800a552:	460b      	mov	r3, r1
 800a554:	4b0d      	ldr	r3, [pc, #52]	; (800a58c <UART_SetConfig+0x4e4>)
 800a556:	fba3 1302 	umull	r1, r3, r3, r2
 800a55a:	095b      	lsrs	r3, r3, #5
 800a55c:	2164      	movs	r1, #100	; 0x64
 800a55e:	fb01 f303 	mul.w	r3, r1, r3
 800a562:	1ad3      	subs	r3, r2, r3
 800a564:	011b      	lsls	r3, r3, #4
 800a566:	3332      	adds	r3, #50	; 0x32
 800a568:	4a08      	ldr	r2, [pc, #32]	; (800a58c <UART_SetConfig+0x4e4>)
 800a56a:	fba2 2303 	umull	r2, r3, r2, r3
 800a56e:	095b      	lsrs	r3, r3, #5
 800a570:	f003 020f 	and.w	r2, r3, #15
 800a574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4422      	add	r2, r4
 800a57c:	609a      	str	r2, [r3, #8]
}
 800a57e:	bf00      	nop
 800a580:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a584:	46bd      	mov	sp, r7
 800a586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a58a:	bf00      	nop
 800a58c:	51eb851f 	.word	0x51eb851f

0800a590 <__NVIC_SetPriority>:
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	4603      	mov	r3, r0
 800a598:	6039      	str	r1, [r7, #0]
 800a59a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a59c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	db0a      	blt.n	800a5ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	b2da      	uxtb	r2, r3
 800a5a8:	490c      	ldr	r1, [pc, #48]	; (800a5dc <__NVIC_SetPriority+0x4c>)
 800a5aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5ae:	0112      	lsls	r2, r2, #4
 800a5b0:	b2d2      	uxtb	r2, r2
 800a5b2:	440b      	add	r3, r1
 800a5b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a5b8:	e00a      	b.n	800a5d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	b2da      	uxtb	r2, r3
 800a5be:	4908      	ldr	r1, [pc, #32]	; (800a5e0 <__NVIC_SetPriority+0x50>)
 800a5c0:	79fb      	ldrb	r3, [r7, #7]
 800a5c2:	f003 030f 	and.w	r3, r3, #15
 800a5c6:	3b04      	subs	r3, #4
 800a5c8:	0112      	lsls	r2, r2, #4
 800a5ca:	b2d2      	uxtb	r2, r2
 800a5cc:	440b      	add	r3, r1
 800a5ce:	761a      	strb	r2, [r3, #24]
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr
 800a5dc:	e000e100 	.word	0xe000e100
 800a5e0:	e000ed00 	.word	0xe000ed00

0800a5e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a5e8:	4b05      	ldr	r3, [pc, #20]	; (800a600 <SysTick_Handler+0x1c>)
 800a5ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a5ec:	f002 f8a6 	bl	800c73c <xTaskGetSchedulerState>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d001      	beq.n	800a5fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a5f6:	f003 f847 	bl	800d688 <xPortSysTickHandler>
  }
}
 800a5fa:	bf00      	nop
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	e000e010 	.word	0xe000e010

0800a604 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a604:	b580      	push	{r7, lr}
 800a606:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a608:	2100      	movs	r1, #0
 800a60a:	f06f 0004 	mvn.w	r0, #4
 800a60e:	f7ff ffbf 	bl	800a590 <__NVIC_SetPriority>
#endif
}
 800a612:	bf00      	nop
 800a614:	bd80      	pop	{r7, pc}
	...

0800a618 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a61e:	f3ef 8305 	mrs	r3, IPSR
 800a622:	603b      	str	r3, [r7, #0]
  return(result);
 800a624:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a626:	2b00      	cmp	r3, #0
 800a628:	d003      	beq.n	800a632 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a62a:	f06f 0305 	mvn.w	r3, #5
 800a62e:	607b      	str	r3, [r7, #4]
 800a630:	e00c      	b.n	800a64c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a632:	4b0a      	ldr	r3, [pc, #40]	; (800a65c <osKernelInitialize+0x44>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d105      	bne.n	800a646 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a63a:	4b08      	ldr	r3, [pc, #32]	; (800a65c <osKernelInitialize+0x44>)
 800a63c:	2201      	movs	r2, #1
 800a63e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a640:	2300      	movs	r3, #0
 800a642:	607b      	str	r3, [r7, #4]
 800a644:	e002      	b.n	800a64c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a64a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a64c:	687b      	ldr	r3, [r7, #4]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	370c      	adds	r7, #12
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	20001fdc 	.word	0x20001fdc

0800a660 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a666:	f3ef 8305 	mrs	r3, IPSR
 800a66a:	603b      	str	r3, [r7, #0]
  return(result);
 800a66c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d003      	beq.n	800a67a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a672:	f06f 0305 	mvn.w	r3, #5
 800a676:	607b      	str	r3, [r7, #4]
 800a678:	e010      	b.n	800a69c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a67a:	4b0b      	ldr	r3, [pc, #44]	; (800a6a8 <osKernelStart+0x48>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d109      	bne.n	800a696 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a682:	f7ff ffbf 	bl	800a604 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a686:	4b08      	ldr	r3, [pc, #32]	; (800a6a8 <osKernelStart+0x48>)
 800a688:	2202      	movs	r2, #2
 800a68a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a68c:	f001 fbe8 	bl	800be60 <vTaskStartScheduler>
      stat = osOK;
 800a690:	2300      	movs	r3, #0
 800a692:	607b      	str	r3, [r7, #4]
 800a694:	e002      	b.n	800a69c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a69a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a69c:	687b      	ldr	r3, [r7, #4]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20001fdc 	.word	0x20001fdc

0800a6ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b08e      	sub	sp, #56	; 0x38
 800a6b0:	af04      	add	r7, sp, #16
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6bc:	f3ef 8305 	mrs	r3, IPSR
 800a6c0:	617b      	str	r3, [r7, #20]
  return(result);
 800a6c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d17e      	bne.n	800a7c6 <osThreadNew+0x11a>
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d07b      	beq.n	800a7c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a6ce:	2380      	movs	r3, #128	; 0x80
 800a6d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a6d2:	2318      	movs	r3, #24
 800a6d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a6da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d045      	beq.n	800a772 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d002      	beq.n	800a6f4 <osThreadNew+0x48>
        name = attr->name;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d002      	beq.n	800a702 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	699b      	ldr	r3, [r3, #24]
 800a700:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d008      	beq.n	800a71a <osThreadNew+0x6e>
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	2b38      	cmp	r3, #56	; 0x38
 800a70c:	d805      	bhi.n	800a71a <osThreadNew+0x6e>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	f003 0301 	and.w	r3, r3, #1
 800a716:	2b00      	cmp	r3, #0
 800a718:	d001      	beq.n	800a71e <osThreadNew+0x72>
        return (NULL);
 800a71a:	2300      	movs	r3, #0
 800a71c:	e054      	b.n	800a7c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	695b      	ldr	r3, [r3, #20]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d003      	beq.n	800a72e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	695b      	ldr	r3, [r3, #20]
 800a72a:	089b      	lsrs	r3, r3, #2
 800a72c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00e      	beq.n	800a754 <osThreadNew+0xa8>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	2bcb      	cmp	r3, #203	; 0xcb
 800a73c:	d90a      	bls.n	800a754 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a742:	2b00      	cmp	r3, #0
 800a744:	d006      	beq.n	800a754 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	695b      	ldr	r3, [r3, #20]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d002      	beq.n	800a754 <osThreadNew+0xa8>
        mem = 1;
 800a74e:	2301      	movs	r3, #1
 800a750:	61bb      	str	r3, [r7, #24]
 800a752:	e010      	b.n	800a776 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d10c      	bne.n	800a776 <osThreadNew+0xca>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d108      	bne.n	800a776 <osThreadNew+0xca>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	691b      	ldr	r3, [r3, #16]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d104      	bne.n	800a776 <osThreadNew+0xca>
          mem = 0;
 800a76c:	2300      	movs	r3, #0
 800a76e:	61bb      	str	r3, [r7, #24]
 800a770:	e001      	b.n	800a776 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a772:	2300      	movs	r3, #0
 800a774:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d110      	bne.n	800a79e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a784:	9202      	str	r2, [sp, #8]
 800a786:	9301      	str	r3, [sp, #4]
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	6a3a      	ldr	r2, [r7, #32]
 800a790:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f001 f8fa 	bl	800b98c <xTaskCreateStatic>
 800a798:	4603      	mov	r3, r0
 800a79a:	613b      	str	r3, [r7, #16]
 800a79c:	e013      	b.n	800a7c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d110      	bne.n	800a7c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a7a4:	6a3b      	ldr	r3, [r7, #32]
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	f107 0310 	add.w	r3, r7, #16
 800a7ac:	9301      	str	r3, [sp, #4]
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	9300      	str	r3, [sp, #0]
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f001 f945 	bl	800ba46 <xTaskCreate>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d001      	beq.n	800a7c6 <osThreadNew+0x11a>
            hTask = NULL;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a7c6:	693b      	ldr	r3, [r7, #16]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3728      	adds	r7, #40	; 0x28
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7d8:	f3ef 8305 	mrs	r3, IPSR
 800a7dc:	60bb      	str	r3, [r7, #8]
  return(result);
 800a7de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d003      	beq.n	800a7ec <osDelay+0x1c>
    stat = osErrorISR;
 800a7e4:	f06f 0305 	mvn.w	r3, #5
 800a7e8:	60fb      	str	r3, [r7, #12]
 800a7ea:	e007      	b.n	800a7fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d002      	beq.n	800a7fc <osDelay+0x2c>
      vTaskDelay(ticks);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f001 fafe 	bl	800bdf8 <vTaskDelay>
    }
  }

  return (stat);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800a806:	b580      	push	{r7, lr}
 800a808:	b086      	sub	sp, #24
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a80e:	f3ef 8305 	mrs	r3, IPSR
 800a812:	60fb      	str	r3, [r7, #12]
  return(result);
 800a814:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800a816:	2b00      	cmp	r3, #0
 800a818:	d003      	beq.n	800a822 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800a81a:	f06f 0305 	mvn.w	r3, #5
 800a81e:	617b      	str	r3, [r7, #20]
 800a820:	e019      	b.n	800a856 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800a822:	2300      	movs	r3, #0
 800a824:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800a826:	f001 fc37 	bl	800c098 <xTaskGetTickCount>
 800a82a:	4603      	mov	r3, r0
 800a82c:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	1ad3      	subs	r3, r2, r3
 800a834:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d009      	beq.n	800a850 <osDelayUntil+0x4a>
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	db06      	blt.n	800a850 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800a842:	f107 0308 	add.w	r3, r7, #8
 800a846:	6939      	ldr	r1, [r7, #16]
 800a848:	4618      	mov	r0, r3
 800a84a:	f001 fa57 	bl	800bcfc <vTaskDelayUntil>
 800a84e:	e002      	b.n	800a856 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800a850:	f06f 0303 	mvn.w	r3, #3
 800a854:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a856:	697b      	ldr	r3, [r7, #20]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3718      	adds	r7, #24
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <TimerCallback>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f002 fd2d 	bl	800d2c8 <pvTimerGetTimerID>
 800a86e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d005      	beq.n	800a882 <TimerCallback+0x22>
    callb->func (callb->arg);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	6852      	ldr	r2, [r2, #4]
 800a87e:	4610      	mov	r0, r2
 800a880:	4798      	blx	r3
  }
}
 800a882:	bf00      	nop
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
	...

0800a88c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08c      	sub	sp, #48	; 0x30
 800a890:	af02      	add	r7, sp, #8
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	607a      	str	r2, [r7, #4]
 800a896:	603b      	str	r3, [r7, #0]
 800a898:	460b      	mov	r3, r1
 800a89a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a89c:	2300      	movs	r3, #0
 800a89e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8a0:	f3ef 8305 	mrs	r3, IPSR
 800a8a4:	613b      	str	r3, [r7, #16]
  return(result);
 800a8a6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d163      	bne.n	800a974 <osTimerNew+0xe8>
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d060      	beq.n	800a974 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a8b2:	2008      	movs	r0, #8
 800a8b4:	f002 ff78 	bl	800d7a8 <pvPortMalloc>
 800a8b8:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d059      	beq.n	800a974 <osTimerNew+0xe8>
      callb->func = func;
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a8cc:	7afb      	ldrb	r3, [r7, #11]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d102      	bne.n	800a8d8 <osTimerNew+0x4c>
        reload = pdFALSE;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	61fb      	str	r3, [r7, #28]
 800a8d6:	e001      	b.n	800a8dc <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800a8dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8e0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d01c      	beq.n	800a926 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d002      	beq.n	800a8fa <osTimerNew+0x6e>
          name = attr->name;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d006      	beq.n	800a910 <osTimerNew+0x84>
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	2b2b      	cmp	r3, #43	; 0x2b
 800a908:	d902      	bls.n	800a910 <osTimerNew+0x84>
          mem = 1;
 800a90a:	2301      	movs	r3, #1
 800a90c:	61bb      	str	r3, [r7, #24]
 800a90e:	e00c      	b.n	800a92a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d108      	bne.n	800a92a <osTimerNew+0x9e>
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d104      	bne.n	800a92a <osTimerNew+0x9e>
            mem = 0;
 800a920:	2300      	movs	r3, #0
 800a922:	61bb      	str	r3, [r7, #24]
 800a924:	e001      	b.n	800a92a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800a926:	2300      	movs	r3, #0
 800a928:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d10c      	bne.n	800a94a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	9301      	str	r3, [sp, #4]
 800a936:	4b12      	ldr	r3, [pc, #72]	; (800a980 <osTimerNew+0xf4>)
 800a938:	9300      	str	r3, [sp, #0]
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	69fa      	ldr	r2, [r7, #28]
 800a93e:	2101      	movs	r1, #1
 800a940:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a942:	f002 f942 	bl	800cbca <xTimerCreateStatic>
 800a946:	6238      	str	r0, [r7, #32]
 800a948:	e00b      	b.n	800a962 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d108      	bne.n	800a962 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a950:	4b0b      	ldr	r3, [pc, #44]	; (800a980 <osTimerNew+0xf4>)
 800a952:	9300      	str	r3, [sp, #0]
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	69fa      	ldr	r2, [r7, #28]
 800a958:	2101      	movs	r1, #1
 800a95a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a95c:	f002 f914 	bl	800cb88 <xTimerCreate>
 800a960:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800a962:	6a3b      	ldr	r3, [r7, #32]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d105      	bne.n	800a974 <osTimerNew+0xe8>
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d002      	beq.n	800a974 <osTimerNew+0xe8>
        vPortFree (callb);
 800a96e:	6978      	ldr	r0, [r7, #20]
 800a970:	f002 ffe6 	bl	800d940 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a974:	6a3b      	ldr	r3, [r7, #32]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3728      	adds	r7, #40	; 0x28
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	0800a861 	.word	0x0800a861

0800a984 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a984:	b580      	push	{r7, lr}
 800a986:	b088      	sub	sp, #32
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a98c:	2300      	movs	r3, #0
 800a98e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a990:	f3ef 8305 	mrs	r3, IPSR
 800a994:	60bb      	str	r3, [r7, #8]
  return(result);
 800a996:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d174      	bne.n	800aa86 <osMutexNew+0x102>
    if (attr != NULL) {
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d003      	beq.n	800a9aa <osMutexNew+0x26>
      type = attr->attr_bits;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	61bb      	str	r3, [r7, #24]
 800a9a8:	e001      	b.n	800a9ae <osMutexNew+0x2a>
    } else {
      type = 0U;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	f003 0301 	and.w	r3, r3, #1
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d002      	beq.n	800a9be <osMutexNew+0x3a>
      rmtx = 1U;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	617b      	str	r3, [r7, #20]
 800a9bc:	e001      	b.n	800a9c2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	f003 0308 	and.w	r3, r3, #8
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d15c      	bne.n	800aa86 <osMutexNew+0x102>
      mem = -1;
 800a9cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9d0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d015      	beq.n	800aa04 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d006      	beq.n	800a9ee <osMutexNew+0x6a>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	2b4f      	cmp	r3, #79	; 0x4f
 800a9e6:	d902      	bls.n	800a9ee <osMutexNew+0x6a>
          mem = 1;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	613b      	str	r3, [r7, #16]
 800a9ec:	e00c      	b.n	800aa08 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d108      	bne.n	800aa08 <osMutexNew+0x84>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d104      	bne.n	800aa08 <osMutexNew+0x84>
            mem = 0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	613b      	str	r3, [r7, #16]
 800aa02:	e001      	b.n	800aa08 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d112      	bne.n	800aa34 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d007      	beq.n	800aa24 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	4619      	mov	r1, r3
 800aa1a:	2004      	movs	r0, #4
 800aa1c:	f000 fa8f 	bl	800af3e <xQueueCreateMutexStatic>
 800aa20:	61f8      	str	r0, [r7, #28]
 800aa22:	e016      	b.n	800aa52 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	4619      	mov	r1, r3
 800aa2a:	2001      	movs	r0, #1
 800aa2c:	f000 fa87 	bl	800af3e <xQueueCreateMutexStatic>
 800aa30:	61f8      	str	r0, [r7, #28]
 800aa32:	e00e      	b.n	800aa52 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10b      	bne.n	800aa52 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d004      	beq.n	800aa4a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800aa40:	2004      	movs	r0, #4
 800aa42:	f000 fa64 	bl	800af0e <xQueueCreateMutex>
 800aa46:	61f8      	str	r0, [r7, #28]
 800aa48:	e003      	b.n	800aa52 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800aa4a:	2001      	movs	r0, #1
 800aa4c:	f000 fa5f 	bl	800af0e <xQueueCreateMutex>
 800aa50:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00c      	beq.n	800aa72 <osMutexNew+0xee>
        if (attr != NULL) {
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d003      	beq.n	800aa66 <osMutexNew+0xe2>
          name = attr->name;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	60fb      	str	r3, [r7, #12]
 800aa64:	e001      	b.n	800aa6a <osMutexNew+0xe6>
        } else {
          name = NULL;
 800aa66:	2300      	movs	r3, #0
 800aa68:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800aa6a:	68f9      	ldr	r1, [r7, #12]
 800aa6c:	69f8      	ldr	r0, [r7, #28]
 800aa6e:	f000 ff2f 	bl	800b8d0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d006      	beq.n	800aa86 <osMutexNew+0x102>
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d003      	beq.n	800aa86 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800aa7e:	69fb      	ldr	r3, [r7, #28]
 800aa80:	f043 0301 	orr.w	r3, r3, #1
 800aa84:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800aa86:	69fb      	ldr	r3, [r7, #28]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3720      	adds	r7, #32
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	4a07      	ldr	r2, [pc, #28]	; (800aabc <vApplicationGetIdleTaskMemory+0x2c>)
 800aaa0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	4a06      	ldr	r2, [pc, #24]	; (800aac0 <vApplicationGetIdleTaskMemory+0x30>)
 800aaa6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2280      	movs	r2, #128	; 0x80
 800aaac:	601a      	str	r2, [r3, #0]
}
 800aaae:	bf00      	nop
 800aab0:	3714      	adds	r7, #20
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	20001fe0 	.word	0x20001fe0
 800aac0:	200020ac 	.word	0x200020ac

0800aac4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	4a07      	ldr	r2, [pc, #28]	; (800aaf0 <vApplicationGetTimerTaskMemory+0x2c>)
 800aad4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	4a06      	ldr	r2, [pc, #24]	; (800aaf4 <vApplicationGetTimerTaskMemory+0x30>)
 800aada:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aae2:	601a      	str	r2, [r3, #0]
}
 800aae4:	bf00      	nop
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	200022ac 	.word	0x200022ac
 800aaf4:	20002378 	.word	0x20002378

0800aaf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f103 0208 	add.w	r2, r3, #8
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f103 0208 	add.w	r2, r3, #8
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f103 0208 	add.w	r2, r3, #8
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ab2c:	bf00      	nop
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab46:	bf00      	nop
 800ab48:	370c      	adds	r7, #12
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr

0800ab52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab52:	b480      	push	{r7}
 800ab54:	b085      	sub	sp, #20
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
 800ab5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	689a      	ldr	r2, [r3, #8]
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	689b      	ldr	r3, [r3, #8]
 800ab74:	683a      	ldr	r2, [r7, #0]
 800ab76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	683a      	ldr	r2, [r7, #0]
 800ab7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	1c5a      	adds	r2, r3, #1
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	601a      	str	r2, [r3, #0]
}
 800ab8e:	bf00      	nop
 800ab90:	3714      	adds	r7, #20
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b085      	sub	sp, #20
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
 800aba2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abb0:	d103      	bne.n	800abba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	60fb      	str	r3, [r7, #12]
 800abb8:	e00c      	b.n	800abd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	3308      	adds	r3, #8
 800abbe:	60fb      	str	r3, [r7, #12]
 800abc0:	e002      	b.n	800abc8 <vListInsert+0x2e>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	60fb      	str	r3, [r7, #12]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	68ba      	ldr	r2, [r7, #8]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d2f6      	bcs.n	800abc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	685a      	ldr	r2, [r3, #4]
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	683a      	ldr	r2, [r7, #0]
 800abe2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	683a      	ldr	r2, [r7, #0]
 800abee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	1c5a      	adds	r2, r3, #1
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	601a      	str	r2, [r3, #0]
}
 800ac00:	bf00      	nop
 800ac02:	3714      	adds	r7, #20
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	6892      	ldr	r2, [r2, #8]
 800ac22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	6852      	ldr	r2, [r2, #4]
 800ac2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d103      	bne.n	800ac40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	689a      	ldr	r2, [r3, #8]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	1e5a      	subs	r2, r3, #1
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3714      	adds	r7, #20
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d10a      	bne.n	800ac8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ac74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac78:	f383 8811 	msr	BASEPRI, r3
 800ac7c:	f3bf 8f6f 	isb	sy
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ac86:	bf00      	nop
 800ac88:	e7fe      	b.n	800ac88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ac8a:	f002 fc6b 	bl	800d564 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac96:	68f9      	ldr	r1, [r7, #12]
 800ac98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac9a:	fb01 f303 	mul.w	r3, r1, r3
 800ac9e:	441a      	add	r2, r3
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2200      	movs	r2, #0
 800aca8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acba:	3b01      	subs	r3, #1
 800acbc:	68f9      	ldr	r1, [r7, #12]
 800acbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800acc0:	fb01 f303 	mul.w	r3, r1, r3
 800acc4:	441a      	add	r2, r3
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	22ff      	movs	r2, #255	; 0xff
 800acce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	22ff      	movs	r2, #255	; 0xff
 800acd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d114      	bne.n	800ad0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	691b      	ldr	r3, [r3, #16]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d01a      	beq.n	800ad1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	3310      	adds	r3, #16
 800acec:	4618      	mov	r0, r3
 800acee:	f001 fb63 	bl	800c3b8 <xTaskRemoveFromEventList>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d012      	beq.n	800ad1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800acf8:	4b0c      	ldr	r3, [pc, #48]	; (800ad2c <xQueueGenericReset+0xcc>)
 800acfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acfe:	601a      	str	r2, [r3, #0]
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	e009      	b.n	800ad1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	3310      	adds	r3, #16
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7ff fef2 	bl	800aaf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	3324      	adds	r3, #36	; 0x24
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7ff feed 	bl	800aaf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ad1e:	f002 fc51 	bl	800d5c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ad22:	2301      	movs	r3, #1
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	e000ed04 	.word	0xe000ed04

0800ad30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b08e      	sub	sp, #56	; 0x38
 800ad34:	af02      	add	r7, sp, #8
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	607a      	str	r2, [r7, #4]
 800ad3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10a      	bne.n	800ad5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ad44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad48:	f383 8811 	msr	BASEPRI, r3
 800ad4c:	f3bf 8f6f 	isb	sy
 800ad50:	f3bf 8f4f 	dsb	sy
 800ad54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad56:	bf00      	nop
 800ad58:	e7fe      	b.n	800ad58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d10a      	bne.n	800ad76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ad60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad72:	bf00      	nop
 800ad74:	e7fe      	b.n	800ad74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d002      	beq.n	800ad82 <xQueueGenericCreateStatic+0x52>
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d001      	beq.n	800ad86 <xQueueGenericCreateStatic+0x56>
 800ad82:	2301      	movs	r3, #1
 800ad84:	e000      	b.n	800ad88 <xQueueGenericCreateStatic+0x58>
 800ad86:	2300      	movs	r3, #0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d10a      	bne.n	800ada2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ad8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad90:	f383 8811 	msr	BASEPRI, r3
 800ad94:	f3bf 8f6f 	isb	sy
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	623b      	str	r3, [r7, #32]
}
 800ad9e:	bf00      	nop
 800ada0:	e7fe      	b.n	800ada0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d102      	bne.n	800adae <xQueueGenericCreateStatic+0x7e>
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d101      	bne.n	800adb2 <xQueueGenericCreateStatic+0x82>
 800adae:	2301      	movs	r3, #1
 800adb0:	e000      	b.n	800adb4 <xQueueGenericCreateStatic+0x84>
 800adb2:	2300      	movs	r3, #0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d10a      	bne.n	800adce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800adb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbc:	f383 8811 	msr	BASEPRI, r3
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	61fb      	str	r3, [r7, #28]
}
 800adca:	bf00      	nop
 800adcc:	e7fe      	b.n	800adcc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800adce:	2350      	movs	r3, #80	; 0x50
 800add0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	2b50      	cmp	r3, #80	; 0x50
 800add6:	d00a      	beq.n	800adee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800add8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800addc:	f383 8811 	msr	BASEPRI, r3
 800ade0:	f3bf 8f6f 	isb	sy
 800ade4:	f3bf 8f4f 	dsb	sy
 800ade8:	61bb      	str	r3, [r7, #24]
}
 800adea:	bf00      	nop
 800adec:	e7fe      	b.n	800adec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800adee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800adf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00d      	beq.n	800ae16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800adfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfc:	2201      	movs	r2, #1
 800adfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ae06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae08:	9300      	str	r3, [sp, #0]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	68b9      	ldr	r1, [r7, #8]
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f000 f83f 	bl	800ae94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3730      	adds	r7, #48	; 0x30
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b08a      	sub	sp, #40	; 0x28
 800ae24:	af02      	add	r7, sp, #8
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d10a      	bne.n	800ae4a <xQueueGenericCreate+0x2a>
	__asm volatile
 800ae34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	613b      	str	r3, [r7, #16]
}
 800ae46:	bf00      	nop
 800ae48:	e7fe      	b.n	800ae48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	68ba      	ldr	r2, [r7, #8]
 800ae4e:	fb02 f303 	mul.w	r3, r2, r3
 800ae52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	3350      	adds	r3, #80	; 0x50
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f002 fca5 	bl	800d7a8 <pvPortMalloc>
 800ae5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ae60:	69bb      	ldr	r3, [r7, #24]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d011      	beq.n	800ae8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	3350      	adds	r3, #80	; 0x50
 800ae6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae78:	79fa      	ldrb	r2, [r7, #7]
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	9300      	str	r3, [sp, #0]
 800ae7e:	4613      	mov	r3, r2
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	68b9      	ldr	r1, [r7, #8]
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f000 f805 	bl	800ae94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae8a:	69bb      	ldr	r3, [r7, #24]
	}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3720      	adds	r7, #32
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
 800aea0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d103      	bne.n	800aeb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	69ba      	ldr	r2, [r7, #24]
 800aeac:	601a      	str	r2, [r3, #0]
 800aeae:	e002      	b.n	800aeb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	68fa      	ldr	r2, [r7, #12]
 800aeba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aec2:	2101      	movs	r1, #1
 800aec4:	69b8      	ldr	r0, [r7, #24]
 800aec6:	f7ff fecb 	bl	800ac60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800aeca:	69bb      	ldr	r3, [r7, #24]
 800aecc:	78fa      	ldrb	r2, [r7, #3]
 800aece:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aed2:	bf00      	nop
 800aed4:	3710      	adds	r7, #16
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b082      	sub	sp, #8
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00e      	beq.n	800af06 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800aefa:	2300      	movs	r3, #0
 800aefc:	2200      	movs	r2, #0
 800aefe:	2100      	movs	r1, #0
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 f837 	bl	800af74 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800af06:	bf00      	nop
 800af08:	3708      	adds	r7, #8
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b086      	sub	sp, #24
 800af12:	af00      	add	r7, sp, #0
 800af14:	4603      	mov	r3, r0
 800af16:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800af18:	2301      	movs	r3, #1
 800af1a:	617b      	str	r3, [r7, #20]
 800af1c:	2300      	movs	r3, #0
 800af1e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800af20:	79fb      	ldrb	r3, [r7, #7]
 800af22:	461a      	mov	r2, r3
 800af24:	6939      	ldr	r1, [r7, #16]
 800af26:	6978      	ldr	r0, [r7, #20]
 800af28:	f7ff ff7a 	bl	800ae20 <xQueueGenericCreate>
 800af2c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	f7ff ffd3 	bl	800aeda <prvInitialiseMutex>

		return xNewQueue;
 800af34:	68fb      	ldr	r3, [r7, #12]
	}
 800af36:	4618      	mov	r0, r3
 800af38:	3718      	adds	r7, #24
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800af3e:	b580      	push	{r7, lr}
 800af40:	b088      	sub	sp, #32
 800af42:	af02      	add	r7, sp, #8
 800af44:	4603      	mov	r3, r0
 800af46:	6039      	str	r1, [r7, #0]
 800af48:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800af4a:	2301      	movs	r3, #1
 800af4c:	617b      	str	r3, [r7, #20]
 800af4e:	2300      	movs	r3, #0
 800af50:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800af52:	79fb      	ldrb	r3, [r7, #7]
 800af54:	9300      	str	r3, [sp, #0]
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	2200      	movs	r2, #0
 800af5a:	6939      	ldr	r1, [r7, #16]
 800af5c:	6978      	ldr	r0, [r7, #20]
 800af5e:	f7ff fee7 	bl	800ad30 <xQueueGenericCreateStatic>
 800af62:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f7ff ffb8 	bl	800aeda <prvInitialiseMutex>

		return xNewQueue;
 800af6a:	68fb      	ldr	r3, [r7, #12]
	}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3718      	adds	r7, #24
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b08e      	sub	sp, #56	; 0x38
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
 800af80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800af82:	2300      	movs	r3, #0
 800af84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d10a      	bne.n	800afa6 <xQueueGenericSend+0x32>
	__asm volatile
 800af90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af94:	f383 8811 	msr	BASEPRI, r3
 800af98:	f3bf 8f6f 	isb	sy
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800afa2:	bf00      	nop
 800afa4:	e7fe      	b.n	800afa4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d103      	bne.n	800afb4 <xQueueGenericSend+0x40>
 800afac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d101      	bne.n	800afb8 <xQueueGenericSend+0x44>
 800afb4:	2301      	movs	r3, #1
 800afb6:	e000      	b.n	800afba <xQueueGenericSend+0x46>
 800afb8:	2300      	movs	r3, #0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d10a      	bne.n	800afd4 <xQueueGenericSend+0x60>
	__asm volatile
 800afbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afd0:	bf00      	nop
 800afd2:	e7fe      	b.n	800afd2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	d103      	bne.n	800afe2 <xQueueGenericSend+0x6e>
 800afda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d101      	bne.n	800afe6 <xQueueGenericSend+0x72>
 800afe2:	2301      	movs	r3, #1
 800afe4:	e000      	b.n	800afe8 <xQueueGenericSend+0x74>
 800afe6:	2300      	movs	r3, #0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10a      	bne.n	800b002 <xQueueGenericSend+0x8e>
	__asm volatile
 800afec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff0:	f383 8811 	msr	BASEPRI, r3
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	f3bf 8f4f 	dsb	sy
 800affc:	623b      	str	r3, [r7, #32]
}
 800affe:	bf00      	nop
 800b000:	e7fe      	b.n	800b000 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b002:	f001 fb9b 	bl	800c73c <xTaskGetSchedulerState>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d102      	bne.n	800b012 <xQueueGenericSend+0x9e>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d101      	bne.n	800b016 <xQueueGenericSend+0xa2>
 800b012:	2301      	movs	r3, #1
 800b014:	e000      	b.n	800b018 <xQueueGenericSend+0xa4>
 800b016:	2300      	movs	r3, #0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10a      	bne.n	800b032 <xQueueGenericSend+0xbe>
	__asm volatile
 800b01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b020:	f383 8811 	msr	BASEPRI, r3
 800b024:	f3bf 8f6f 	isb	sy
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	61fb      	str	r3, [r7, #28]
}
 800b02e:	bf00      	nop
 800b030:	e7fe      	b.n	800b030 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b032:	f002 fa97 	bl	800d564 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b03e:	429a      	cmp	r2, r3
 800b040:	d302      	bcc.n	800b048 <xQueueGenericSend+0xd4>
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	2b02      	cmp	r3, #2
 800b046:	d129      	bne.n	800b09c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b048:	683a      	ldr	r2, [r7, #0]
 800b04a:	68b9      	ldr	r1, [r7, #8]
 800b04c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b04e:	f000 fb2f 	bl	800b6b0 <prvCopyDataToQueue>
 800b052:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d010      	beq.n	800b07e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05e:	3324      	adds	r3, #36	; 0x24
 800b060:	4618      	mov	r0, r3
 800b062:	f001 f9a9 	bl	800c3b8 <xTaskRemoveFromEventList>
 800b066:	4603      	mov	r3, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d013      	beq.n	800b094 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b06c:	4b3f      	ldr	r3, [pc, #252]	; (800b16c <xQueueGenericSend+0x1f8>)
 800b06e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b072:	601a      	str	r2, [r3, #0]
 800b074:	f3bf 8f4f 	dsb	sy
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	e00a      	b.n	800b094 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b080:	2b00      	cmp	r3, #0
 800b082:	d007      	beq.n	800b094 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b084:	4b39      	ldr	r3, [pc, #228]	; (800b16c <xQueueGenericSend+0x1f8>)
 800b086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b08a:	601a      	str	r2, [r3, #0]
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b094:	f002 fa96 	bl	800d5c4 <vPortExitCritical>
				return pdPASS;
 800b098:	2301      	movs	r3, #1
 800b09a:	e063      	b.n	800b164 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d103      	bne.n	800b0aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b0a2:	f002 fa8f 	bl	800d5c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	e05c      	b.n	800b164 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b0aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d106      	bne.n	800b0be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b0b0:	f107 0314 	add.w	r3, r7, #20
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f001 f9e3 	bl	800c480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b0be:	f002 fa81 	bl	800d5c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b0c2:	f000 ff3d 	bl	800bf40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b0c6:	f002 fa4d 	bl	800d564 <vPortEnterCritical>
 800b0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0d0:	b25b      	sxtb	r3, r3
 800b0d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0d6:	d103      	bne.n	800b0e0 <xQueueGenericSend+0x16c>
 800b0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0e6:	b25b      	sxtb	r3, r3
 800b0e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0ec:	d103      	bne.n	800b0f6 <xQueueGenericSend+0x182>
 800b0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0f6:	f002 fa65 	bl	800d5c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0fa:	1d3a      	adds	r2, r7, #4
 800b0fc:	f107 0314 	add.w	r3, r7, #20
 800b100:	4611      	mov	r1, r2
 800b102:	4618      	mov	r0, r3
 800b104:	f001 f9d2 	bl	800c4ac <xTaskCheckForTimeOut>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d124      	bne.n	800b158 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b10e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b110:	f000 fbc6 	bl	800b8a0 <prvIsQueueFull>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d018      	beq.n	800b14c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11c:	3310      	adds	r3, #16
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	4611      	mov	r1, r2
 800b122:	4618      	mov	r0, r3
 800b124:	f001 f8f8 	bl	800c318 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b12a:	f000 fb51 	bl	800b7d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b12e:	f000 ff15 	bl	800bf5c <xTaskResumeAll>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	f47f af7c 	bne.w	800b032 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b13a:	4b0c      	ldr	r3, [pc, #48]	; (800b16c <xQueueGenericSend+0x1f8>)
 800b13c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b140:	601a      	str	r2, [r3, #0]
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	f3bf 8f6f 	isb	sy
 800b14a:	e772      	b.n	800b032 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b14c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b14e:	f000 fb3f 	bl	800b7d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b152:	f000 ff03 	bl	800bf5c <xTaskResumeAll>
 800b156:	e76c      	b.n	800b032 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b15a:	f000 fb39 	bl	800b7d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b15e:	f000 fefd 	bl	800bf5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b162:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b164:	4618      	mov	r0, r3
 800b166:	3738      	adds	r7, #56	; 0x38
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	e000ed04 	.word	0xe000ed04

0800b170 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b090      	sub	sp, #64	; 0x40
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
 800b17c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b184:	2b00      	cmp	r3, #0
 800b186:	d10a      	bne.n	800b19e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18c:	f383 8811 	msr	BASEPRI, r3
 800b190:	f3bf 8f6f 	isb	sy
 800b194:	f3bf 8f4f 	dsb	sy
 800b198:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b19a:	bf00      	nop
 800b19c:	e7fe      	b.n	800b19c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d103      	bne.n	800b1ac <xQueueGenericSendFromISR+0x3c>
 800b1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d101      	bne.n	800b1b0 <xQueueGenericSendFromISR+0x40>
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e000      	b.n	800b1b2 <xQueueGenericSendFromISR+0x42>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d10a      	bne.n	800b1cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ba:	f383 8811 	msr	BASEPRI, r3
 800b1be:	f3bf 8f6f 	isb	sy
 800b1c2:	f3bf 8f4f 	dsb	sy
 800b1c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b1c8:	bf00      	nop
 800b1ca:	e7fe      	b.n	800b1ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	d103      	bne.n	800b1da <xQueueGenericSendFromISR+0x6a>
 800b1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d101      	bne.n	800b1de <xQueueGenericSendFromISR+0x6e>
 800b1da:	2301      	movs	r3, #1
 800b1dc:	e000      	b.n	800b1e0 <xQueueGenericSendFromISR+0x70>
 800b1de:	2300      	movs	r3, #0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d10a      	bne.n	800b1fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e8:	f383 8811 	msr	BASEPRI, r3
 800b1ec:	f3bf 8f6f 	isb	sy
 800b1f0:	f3bf 8f4f 	dsb	sy
 800b1f4:	623b      	str	r3, [r7, #32]
}
 800b1f6:	bf00      	nop
 800b1f8:	e7fe      	b.n	800b1f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1fa:	f002 fa95 	bl	800d728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b1fe:	f3ef 8211 	mrs	r2, BASEPRI
 800b202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b206:	f383 8811 	msr	BASEPRI, r3
 800b20a:	f3bf 8f6f 	isb	sy
 800b20e:	f3bf 8f4f 	dsb	sy
 800b212:	61fa      	str	r2, [r7, #28]
 800b214:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b216:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b218:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b222:	429a      	cmp	r2, r3
 800b224:	d302      	bcc.n	800b22c <xQueueGenericSendFromISR+0xbc>
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	2b02      	cmp	r3, #2
 800b22a:	d12f      	bne.n	800b28c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b23c:	683a      	ldr	r2, [r7, #0]
 800b23e:	68b9      	ldr	r1, [r7, #8]
 800b240:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b242:	f000 fa35 	bl	800b6b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b246:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b24a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b24e:	d112      	bne.n	800b276 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b254:	2b00      	cmp	r3, #0
 800b256:	d016      	beq.n	800b286 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25a:	3324      	adds	r3, #36	; 0x24
 800b25c:	4618      	mov	r0, r3
 800b25e:	f001 f8ab 	bl	800c3b8 <xTaskRemoveFromEventList>
 800b262:	4603      	mov	r3, r0
 800b264:	2b00      	cmp	r3, #0
 800b266:	d00e      	beq.n	800b286 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00b      	beq.n	800b286 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2201      	movs	r2, #1
 800b272:	601a      	str	r2, [r3, #0]
 800b274:	e007      	b.n	800b286 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b276:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b27a:	3301      	adds	r3, #1
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	b25a      	sxtb	r2, r3
 800b280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b286:	2301      	movs	r3, #1
 800b288:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b28a:	e001      	b.n	800b290 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b28c:	2300      	movs	r3, #0
 800b28e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b292:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b29a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3740      	adds	r7, #64	; 0x40
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
	...

0800b2a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b08c      	sub	sp, #48	; 0x30
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d10a      	bne.n	800b2d8 <xQueueReceive+0x30>
	__asm volatile
 800b2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	623b      	str	r3, [r7, #32]
}
 800b2d4:	bf00      	nop
 800b2d6:	e7fe      	b.n	800b2d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d103      	bne.n	800b2e6 <xQueueReceive+0x3e>
 800b2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d101      	bne.n	800b2ea <xQueueReceive+0x42>
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e000      	b.n	800b2ec <xQueueReceive+0x44>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d10a      	bne.n	800b306 <xQueueReceive+0x5e>
	__asm volatile
 800b2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f4:	f383 8811 	msr	BASEPRI, r3
 800b2f8:	f3bf 8f6f 	isb	sy
 800b2fc:	f3bf 8f4f 	dsb	sy
 800b300:	61fb      	str	r3, [r7, #28]
}
 800b302:	bf00      	nop
 800b304:	e7fe      	b.n	800b304 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b306:	f001 fa19 	bl	800c73c <xTaskGetSchedulerState>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d102      	bne.n	800b316 <xQueueReceive+0x6e>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d101      	bne.n	800b31a <xQueueReceive+0x72>
 800b316:	2301      	movs	r3, #1
 800b318:	e000      	b.n	800b31c <xQueueReceive+0x74>
 800b31a:	2300      	movs	r3, #0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d10a      	bne.n	800b336 <xQueueReceive+0x8e>
	__asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	61bb      	str	r3, [r7, #24]
}
 800b332:	bf00      	nop
 800b334:	e7fe      	b.n	800b334 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b336:	f002 f915 	bl	800d564 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b33e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b342:	2b00      	cmp	r3, #0
 800b344:	d01f      	beq.n	800b386 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b346:	68b9      	ldr	r1, [r7, #8]
 800b348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b34a:	f000 fa1b 	bl	800b784 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b350:	1e5a      	subs	r2, r3, #1
 800b352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b354:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d00f      	beq.n	800b37e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b360:	3310      	adds	r3, #16
 800b362:	4618      	mov	r0, r3
 800b364:	f001 f828 	bl	800c3b8 <xTaskRemoveFromEventList>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d007      	beq.n	800b37e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b36e:	4b3d      	ldr	r3, [pc, #244]	; (800b464 <xQueueReceive+0x1bc>)
 800b370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b374:	601a      	str	r2, [r3, #0]
 800b376:	f3bf 8f4f 	dsb	sy
 800b37a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b37e:	f002 f921 	bl	800d5c4 <vPortExitCritical>
				return pdPASS;
 800b382:	2301      	movs	r3, #1
 800b384:	e069      	b.n	800b45a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d103      	bne.n	800b394 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b38c:	f002 f91a 	bl	800d5c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b390:	2300      	movs	r3, #0
 800b392:	e062      	b.n	800b45a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b396:	2b00      	cmp	r3, #0
 800b398:	d106      	bne.n	800b3a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b39a:	f107 0310 	add.w	r3, r7, #16
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f001 f86e 	bl	800c480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3a8:	f002 f90c 	bl	800d5c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3ac:	f000 fdc8 	bl	800bf40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3b0:	f002 f8d8 	bl	800d564 <vPortEnterCritical>
 800b3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3ba:	b25b      	sxtb	r3, r3
 800b3bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3c0:	d103      	bne.n	800b3ca <xQueueReceive+0x122>
 800b3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3d0:	b25b      	sxtb	r3, r3
 800b3d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3d6:	d103      	bne.n	800b3e0 <xQueueReceive+0x138>
 800b3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3e0:	f002 f8f0 	bl	800d5c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3e4:	1d3a      	adds	r2, r7, #4
 800b3e6:	f107 0310 	add.w	r3, r7, #16
 800b3ea:	4611      	mov	r1, r2
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f001 f85d 	bl	800c4ac <xTaskCheckForTimeOut>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d123      	bne.n	800b440 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3fa:	f000 fa3b 	bl	800b874 <prvIsQueueEmpty>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d017      	beq.n	800b434 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b406:	3324      	adds	r3, #36	; 0x24
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	4611      	mov	r1, r2
 800b40c:	4618      	mov	r0, r3
 800b40e:	f000 ff83 	bl	800c318 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b414:	f000 f9dc 	bl	800b7d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b418:	f000 fda0 	bl	800bf5c <xTaskResumeAll>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d189      	bne.n	800b336 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b422:	4b10      	ldr	r3, [pc, #64]	; (800b464 <xQueueReceive+0x1bc>)
 800b424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b428:	601a      	str	r2, [r3, #0]
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	f3bf 8f6f 	isb	sy
 800b432:	e780      	b.n	800b336 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b436:	f000 f9cb 	bl	800b7d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b43a:	f000 fd8f 	bl	800bf5c <xTaskResumeAll>
 800b43e:	e77a      	b.n	800b336 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b442:	f000 f9c5 	bl	800b7d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b446:	f000 fd89 	bl	800bf5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b44a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b44c:	f000 fa12 	bl	800b874 <prvIsQueueEmpty>
 800b450:	4603      	mov	r3, r0
 800b452:	2b00      	cmp	r3, #0
 800b454:	f43f af6f 	beq.w	800b336 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b458:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3730      	adds	r7, #48	; 0x30
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	e000ed04 	.word	0xe000ed04

0800b468 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b08e      	sub	sp, #56	; 0x38
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b472:	2300      	movs	r3, #0
 800b474:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b47a:	2300      	movs	r3, #0
 800b47c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b480:	2b00      	cmp	r3, #0
 800b482:	d10a      	bne.n	800b49a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b488:	f383 8811 	msr	BASEPRI, r3
 800b48c:	f3bf 8f6f 	isb	sy
 800b490:	f3bf 8f4f 	dsb	sy
 800b494:	623b      	str	r3, [r7, #32]
}
 800b496:	bf00      	nop
 800b498:	e7fe      	b.n	800b498 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d00a      	beq.n	800b4b8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a6:	f383 8811 	msr	BASEPRI, r3
 800b4aa:	f3bf 8f6f 	isb	sy
 800b4ae:	f3bf 8f4f 	dsb	sy
 800b4b2:	61fb      	str	r3, [r7, #28]
}
 800b4b4:	bf00      	nop
 800b4b6:	e7fe      	b.n	800b4b6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4b8:	f001 f940 	bl	800c73c <xTaskGetSchedulerState>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d102      	bne.n	800b4c8 <xQueueSemaphoreTake+0x60>
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d101      	bne.n	800b4cc <xQueueSemaphoreTake+0x64>
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e000      	b.n	800b4ce <xQueueSemaphoreTake+0x66>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d10a      	bne.n	800b4e8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d6:	f383 8811 	msr	BASEPRI, r3
 800b4da:	f3bf 8f6f 	isb	sy
 800b4de:	f3bf 8f4f 	dsb	sy
 800b4e2:	61bb      	str	r3, [r7, #24]
}
 800b4e4:	bf00      	nop
 800b4e6:	e7fe      	b.n	800b4e6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4e8:	f002 f83c 	bl	800d564 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d024      	beq.n	800b542 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fa:	1e5a      	subs	r2, r3, #1
 800b4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4fe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d104      	bne.n	800b512 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b508:	f001 fa8e 	bl	800ca28 <pvTaskIncrementMutexHeldCount>
 800b50c:	4602      	mov	r2, r0
 800b50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b510:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00f      	beq.n	800b53a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51c:	3310      	adds	r3, #16
 800b51e:	4618      	mov	r0, r3
 800b520:	f000 ff4a 	bl	800c3b8 <xTaskRemoveFromEventList>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d007      	beq.n	800b53a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b52a:	4b54      	ldr	r3, [pc, #336]	; (800b67c <xQueueSemaphoreTake+0x214>)
 800b52c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b530:	601a      	str	r2, [r3, #0]
 800b532:	f3bf 8f4f 	dsb	sy
 800b536:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b53a:	f002 f843 	bl	800d5c4 <vPortExitCritical>
				return pdPASS;
 800b53e:	2301      	movs	r3, #1
 800b540:	e097      	b.n	800b672 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d111      	bne.n	800b56c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d00a      	beq.n	800b564 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b552:	f383 8811 	msr	BASEPRI, r3
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	617b      	str	r3, [r7, #20]
}
 800b560:	bf00      	nop
 800b562:	e7fe      	b.n	800b562 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b564:	f002 f82e 	bl	800d5c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b568:	2300      	movs	r3, #0
 800b56a:	e082      	b.n	800b672 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d106      	bne.n	800b580 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b572:	f107 030c 	add.w	r3, r7, #12
 800b576:	4618      	mov	r0, r3
 800b578:	f000 ff82 	bl	800c480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b57c:	2301      	movs	r3, #1
 800b57e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b580:	f002 f820 	bl	800d5c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b584:	f000 fcdc 	bl	800bf40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b588:	f001 ffec 	bl	800d564 <vPortEnterCritical>
 800b58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b592:	b25b      	sxtb	r3, r3
 800b594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b598:	d103      	bne.n	800b5a2 <xQueueSemaphoreTake+0x13a>
 800b59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59c:	2200      	movs	r2, #0
 800b59e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5a8:	b25b      	sxtb	r3, r3
 800b5aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5ae:	d103      	bne.n	800b5b8 <xQueueSemaphoreTake+0x150>
 800b5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5b8:	f002 f804 	bl	800d5c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b5bc:	463a      	mov	r2, r7
 800b5be:	f107 030c 	add.w	r3, r7, #12
 800b5c2:	4611      	mov	r1, r2
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f000 ff71 	bl	800c4ac <xTaskCheckForTimeOut>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d132      	bne.n	800b636 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5d2:	f000 f94f 	bl	800b874 <prvIsQueueEmpty>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d026      	beq.n	800b62a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d109      	bne.n	800b5f8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b5e4:	f001 ffbe 	bl	800d564 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f001 f8c3 	bl	800c778 <xTaskPriorityInherit>
 800b5f2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b5f4:	f001 ffe6 	bl	800d5c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5fa:	3324      	adds	r3, #36	; 0x24
 800b5fc:	683a      	ldr	r2, [r7, #0]
 800b5fe:	4611      	mov	r1, r2
 800b600:	4618      	mov	r0, r3
 800b602:	f000 fe89 	bl	800c318 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b606:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b608:	f000 f8e2 	bl	800b7d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b60c:	f000 fca6 	bl	800bf5c <xTaskResumeAll>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	f47f af68 	bne.w	800b4e8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b618:	4b18      	ldr	r3, [pc, #96]	; (800b67c <xQueueSemaphoreTake+0x214>)
 800b61a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b61e:	601a      	str	r2, [r3, #0]
 800b620:	f3bf 8f4f 	dsb	sy
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	e75e      	b.n	800b4e8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b62a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b62c:	f000 f8d0 	bl	800b7d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b630:	f000 fc94 	bl	800bf5c <xTaskResumeAll>
 800b634:	e758      	b.n	800b4e8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b636:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b638:	f000 f8ca 	bl	800b7d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b63c:	f000 fc8e 	bl	800bf5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b640:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b642:	f000 f917 	bl	800b874 <prvIsQueueEmpty>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	f43f af4d 	beq.w	800b4e8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b650:	2b00      	cmp	r3, #0
 800b652:	d00d      	beq.n	800b670 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b654:	f001 ff86 	bl	800d564 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b658:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b65a:	f000 f811 	bl	800b680 <prvGetDisinheritPriorityAfterTimeout>
 800b65e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b666:	4618      	mov	r0, r3
 800b668:	f001 f95c 	bl	800c924 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b66c:	f001 ffaa 	bl	800d5c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b670:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b672:	4618      	mov	r0, r3
 800b674:	3738      	adds	r7, #56	; 0x38
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	e000ed04 	.word	0xe000ed04

0800b680 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b680:	b480      	push	{r7}
 800b682:	b085      	sub	sp, #20
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d006      	beq.n	800b69e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b69a:	60fb      	str	r3, [r7, #12]
 800b69c:	e001      	b.n	800b6a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
	}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3714      	adds	r7, #20
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b086      	sub	sp, #24
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d10d      	bne.n	800b6ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d14d      	bne.n	800b772 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f001 f8b4 	bl	800c848 <xTaskPriorityDisinherit>
 800b6e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	609a      	str	r2, [r3, #8]
 800b6e8:	e043      	b.n	800b772 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d119      	bne.n	800b724 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6858      	ldr	r0, [r3, #4]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	68b9      	ldr	r1, [r7, #8]
 800b6fc:	f002 fa6a 	bl	800dbd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	685a      	ldr	r2, [r3, #4]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b708:	441a      	add	r2, r3
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	685a      	ldr	r2, [r3, #4]
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	429a      	cmp	r2, r3
 800b718:	d32b      	bcc.n	800b772 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	605a      	str	r2, [r3, #4]
 800b722:	e026      	b.n	800b772 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	68d8      	ldr	r0, [r3, #12]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b72c:	461a      	mov	r2, r3
 800b72e:	68b9      	ldr	r1, [r7, #8]
 800b730:	f002 fa50 	bl	800dbd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	68da      	ldr	r2, [r3, #12]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b73c:	425b      	negs	r3, r3
 800b73e:	441a      	add	r2, r3
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	68da      	ldr	r2, [r3, #12]
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d207      	bcs.n	800b760 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	689a      	ldr	r2, [r3, #8]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b758:	425b      	negs	r3, r3
 800b75a:	441a      	add	r2, r3
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2b02      	cmp	r3, #2
 800b764:	d105      	bne.n	800b772 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d002      	beq.n	800b772 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	3b01      	subs	r3, #1
 800b770:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	1c5a      	adds	r2, r3, #1
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b77a:	697b      	ldr	r3, [r7, #20]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3718      	adds	r7, #24
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b792:	2b00      	cmp	r3, #0
 800b794:	d018      	beq.n	800b7c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	68da      	ldr	r2, [r3, #12]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b79e:	441a      	add	r2, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	68da      	ldr	r2, [r3, #12]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d303      	bcc.n	800b7b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	68d9      	ldr	r1, [r3, #12]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	6838      	ldr	r0, [r7, #0]
 800b7c4:	f002 fa06 	bl	800dbd4 <memcpy>
	}
}
 800b7c8:	bf00      	nop
 800b7ca:	3708      	adds	r7, #8
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b7d8:	f001 fec4 	bl	800d564 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b7e4:	e011      	b.n	800b80a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d012      	beq.n	800b814 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	3324      	adds	r3, #36	; 0x24
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f000 fde0 	bl	800c3b8 <xTaskRemoveFromEventList>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d001      	beq.n	800b802 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b7fe:	f000 feb7 	bl	800c570 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b802:	7bfb      	ldrb	r3, [r7, #15]
 800b804:	3b01      	subs	r3, #1
 800b806:	b2db      	uxtb	r3, r3
 800b808:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b80a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	dce9      	bgt.n	800b7e6 <prvUnlockQueue+0x16>
 800b812:	e000      	b.n	800b816 <prvUnlockQueue+0x46>
					break;
 800b814:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	22ff      	movs	r2, #255	; 0xff
 800b81a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b81e:	f001 fed1 	bl	800d5c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b822:	f001 fe9f 	bl	800d564 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b82c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b82e:	e011      	b.n	800b854 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	691b      	ldr	r3, [r3, #16]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d012      	beq.n	800b85e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	3310      	adds	r3, #16
 800b83c:	4618      	mov	r0, r3
 800b83e:	f000 fdbb 	bl	800c3b8 <xTaskRemoveFromEventList>
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d001      	beq.n	800b84c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b848:	f000 fe92 	bl	800c570 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b84c:	7bbb      	ldrb	r3, [r7, #14]
 800b84e:	3b01      	subs	r3, #1
 800b850:	b2db      	uxtb	r3, r3
 800b852:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b854:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	dce9      	bgt.n	800b830 <prvUnlockQueue+0x60>
 800b85c:	e000      	b.n	800b860 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b85e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	22ff      	movs	r2, #255	; 0xff
 800b864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b868:	f001 feac 	bl	800d5c4 <vPortExitCritical>
}
 800b86c:	bf00      	nop
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b87c:	f001 fe72 	bl	800d564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b884:	2b00      	cmp	r3, #0
 800b886:	d102      	bne.n	800b88e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b888:	2301      	movs	r3, #1
 800b88a:	60fb      	str	r3, [r7, #12]
 800b88c:	e001      	b.n	800b892 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b88e:	2300      	movs	r3, #0
 800b890:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b892:	f001 fe97 	bl	800d5c4 <vPortExitCritical>

	return xReturn;
 800b896:	68fb      	ldr	r3, [r7, #12]
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3710      	adds	r7, #16
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b8a8:	f001 fe5c 	bl	800d564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d102      	bne.n	800b8be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	60fb      	str	r3, [r7, #12]
 800b8bc:	e001      	b.n	800b8c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b8c2:	f001 fe7f 	bl	800d5c4 <vPortExitCritical>

	return xReturn;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3710      	adds	r7, #16
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b085      	sub	sp, #20
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b8da:	2300      	movs	r3, #0
 800b8dc:	60fb      	str	r3, [r7, #12]
 800b8de:	e014      	b.n	800b90a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b8e0:	4a0f      	ldr	r2, [pc, #60]	; (800b920 <vQueueAddToRegistry+0x50>)
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d10b      	bne.n	800b904 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b8ec:	490c      	ldr	r1, [pc, #48]	; (800b920 <vQueueAddToRegistry+0x50>)
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	683a      	ldr	r2, [r7, #0]
 800b8f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b8f6:	4a0a      	ldr	r2, [pc, #40]	; (800b920 <vQueueAddToRegistry+0x50>)
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	00db      	lsls	r3, r3, #3
 800b8fc:	4413      	add	r3, r2
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b902:	e006      	b.n	800b912 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	3301      	adds	r3, #1
 800b908:	60fb      	str	r3, [r7, #12]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2b07      	cmp	r3, #7
 800b90e:	d9e7      	bls.n	800b8e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b910:	bf00      	nop
 800b912:	bf00      	nop
 800b914:	3714      	adds	r7, #20
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop
 800b920:	20002778 	.word	0x20002778

0800b924 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b924:	b580      	push	{r7, lr}
 800b926:	b086      	sub	sp, #24
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b934:	f001 fe16 	bl	800d564 <vPortEnterCritical>
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b93e:	b25b      	sxtb	r3, r3
 800b940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b944:	d103      	bne.n	800b94e <vQueueWaitForMessageRestricted+0x2a>
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	2200      	movs	r2, #0
 800b94a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b954:	b25b      	sxtb	r3, r3
 800b956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b95a:	d103      	bne.n	800b964 <vQueueWaitForMessageRestricted+0x40>
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	2200      	movs	r2, #0
 800b960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b964:	f001 fe2e 	bl	800d5c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d106      	bne.n	800b97e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	3324      	adds	r3, #36	; 0x24
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	68b9      	ldr	r1, [r7, #8]
 800b978:	4618      	mov	r0, r3
 800b97a:	f000 fcf1 	bl	800c360 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b97e:	6978      	ldr	r0, [r7, #20]
 800b980:	f7ff ff26 	bl	800b7d0 <prvUnlockQueue>
	}
 800b984:	bf00      	nop
 800b986:	3718      	adds	r7, #24
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b08e      	sub	sp, #56	; 0x38
 800b990:	af04      	add	r7, sp, #16
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]
 800b998:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d10a      	bne.n	800b9b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a4:	f383 8811 	msr	BASEPRI, r3
 800b9a8:	f3bf 8f6f 	isb	sy
 800b9ac:	f3bf 8f4f 	dsb	sy
 800b9b0:	623b      	str	r3, [r7, #32]
}
 800b9b2:	bf00      	nop
 800b9b4:	e7fe      	b.n	800b9b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d10a      	bne.n	800b9d2 <xTaskCreateStatic+0x46>
	__asm volatile
 800b9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c0:	f383 8811 	msr	BASEPRI, r3
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	61fb      	str	r3, [r7, #28]
}
 800b9ce:	bf00      	nop
 800b9d0:	e7fe      	b.n	800b9d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b9d2:	23cc      	movs	r3, #204	; 0xcc
 800b9d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	2bcc      	cmp	r3, #204	; 0xcc
 800b9da:	d00a      	beq.n	800b9f2 <xTaskCreateStatic+0x66>
	__asm volatile
 800b9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e0:	f383 8811 	msr	BASEPRI, r3
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	f3bf 8f4f 	dsb	sy
 800b9ec:	61bb      	str	r3, [r7, #24]
}
 800b9ee:	bf00      	nop
 800b9f0:	e7fe      	b.n	800b9f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b9f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d01e      	beq.n	800ba38 <xTaskCreateStatic+0xac>
 800b9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d01b      	beq.n	800ba38 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ba04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ba0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0c:	2202      	movs	r2, #2
 800ba0e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ba12:	2300      	movs	r3, #0
 800ba14:	9303      	str	r3, [sp, #12]
 800ba16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba18:	9302      	str	r3, [sp, #8]
 800ba1a:	f107 0314 	add.w	r3, r7, #20
 800ba1e:	9301      	str	r3, [sp, #4]
 800ba20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba22:	9300      	str	r3, [sp, #0]
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	68b9      	ldr	r1, [r7, #8]
 800ba2a:	68f8      	ldr	r0, [r7, #12]
 800ba2c:	f000 f850 	bl	800bad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba32:	f000 f8f3 	bl	800bc1c <prvAddNewTaskToReadyList>
 800ba36:	e001      	b.n	800ba3c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ba3c:	697b      	ldr	r3, [r7, #20]
	}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3728      	adds	r7, #40	; 0x28
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b08c      	sub	sp, #48	; 0x30
 800ba4a:	af04      	add	r7, sp, #16
 800ba4c:	60f8      	str	r0, [r7, #12]
 800ba4e:	60b9      	str	r1, [r7, #8]
 800ba50:	603b      	str	r3, [r7, #0]
 800ba52:	4613      	mov	r3, r2
 800ba54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ba56:	88fb      	ldrh	r3, [r7, #6]
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f001 fea4 	bl	800d7a8 <pvPortMalloc>
 800ba60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d00e      	beq.n	800ba86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ba68:	20cc      	movs	r0, #204	; 0xcc
 800ba6a:	f001 fe9d 	bl	800d7a8 <pvPortMalloc>
 800ba6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d003      	beq.n	800ba7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	697a      	ldr	r2, [r7, #20]
 800ba7a:	631a      	str	r2, [r3, #48]	; 0x30
 800ba7c:	e005      	b.n	800ba8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ba7e:	6978      	ldr	r0, [r7, #20]
 800ba80:	f001 ff5e 	bl	800d940 <vPortFree>
 800ba84:	e001      	b.n	800ba8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ba86:	2300      	movs	r3, #0
 800ba88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ba8a:	69fb      	ldr	r3, [r7, #28]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d017      	beq.n	800bac0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	2200      	movs	r2, #0
 800ba94:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ba98:	88fa      	ldrh	r2, [r7, #6]
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	9303      	str	r3, [sp, #12]
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	9302      	str	r3, [sp, #8]
 800baa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa4:	9301      	str	r3, [sp, #4]
 800baa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	68b9      	ldr	r1, [r7, #8]
 800baae:	68f8      	ldr	r0, [r7, #12]
 800bab0:	f000 f80e 	bl	800bad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bab4:	69f8      	ldr	r0, [r7, #28]
 800bab6:	f000 f8b1 	bl	800bc1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800baba:	2301      	movs	r3, #1
 800babc:	61bb      	str	r3, [r7, #24]
 800babe:	e002      	b.n	800bac6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bac4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bac6:	69bb      	ldr	r3, [r7, #24]
	}
 800bac8:	4618      	mov	r0, r3
 800baca:	3720      	adds	r7, #32
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b088      	sub	sp, #32
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
 800badc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	461a      	mov	r2, r3
 800bae8:	21a5      	movs	r1, #165	; 0xa5
 800baea:	f002 f881 	bl	800dbf0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800baee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800baf8:	3b01      	subs	r3, #1
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	4413      	add	r3, r2
 800bafe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bb00:	69bb      	ldr	r3, [r7, #24]
 800bb02:	f023 0307 	bic.w	r3, r3, #7
 800bb06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	f003 0307 	and.w	r3, r3, #7
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d00a      	beq.n	800bb28 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb16:	f383 8811 	msr	BASEPRI, r3
 800bb1a:	f3bf 8f6f 	isb	sy
 800bb1e:	f3bf 8f4f 	dsb	sy
 800bb22:	617b      	str	r3, [r7, #20]
}
 800bb24:	bf00      	nop
 800bb26:	e7fe      	b.n	800bb26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d01f      	beq.n	800bb6e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bb2e:	2300      	movs	r3, #0
 800bb30:	61fb      	str	r3, [r7, #28]
 800bb32:	e012      	b.n	800bb5a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	4413      	add	r3, r2
 800bb3a:	7819      	ldrb	r1, [r3, #0]
 800bb3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	4413      	add	r3, r2
 800bb42:	3334      	adds	r3, #52	; 0x34
 800bb44:	460a      	mov	r2, r1
 800bb46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	69fb      	ldr	r3, [r7, #28]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d006      	beq.n	800bb62 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	3301      	adds	r3, #1
 800bb58:	61fb      	str	r3, [r7, #28]
 800bb5a:	69fb      	ldr	r3, [r7, #28]
 800bb5c:	2b1f      	cmp	r3, #31
 800bb5e:	d9e9      	bls.n	800bb34 <prvInitialiseNewTask+0x64>
 800bb60:	e000      	b.n	800bb64 <prvInitialiseNewTask+0x94>
			{
				break;
 800bb62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb66:	2200      	movs	r2, #0
 800bb68:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800bb6c:	e003      	b.n	800bb76 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb70:	2200      	movs	r2, #0
 800bb72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb78:	2b37      	cmp	r3, #55	; 0x37
 800bb7a:	d901      	bls.n	800bb80 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bb7c:	2337      	movs	r3, #55	; 0x37
 800bb7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb8a:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800bb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8e:	2200      	movs	r2, #0
 800bb90:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb94:	3304      	adds	r3, #4
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7fe ffce 	bl	800ab38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9e:	3318      	adds	r3, #24
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7fe ffc9 	bl	800ab38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbaa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbce:	3364      	adds	r3, #100	; 0x64
 800bbd0:	2260      	movs	r2, #96	; 0x60
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f002 f80b 	bl	800dbf0 <memset>
 800bbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbdc:	4a0c      	ldr	r2, [pc, #48]	; (800bc10 <prvInitialiseNewTask+0x140>)
 800bbde:	669a      	str	r2, [r3, #104]	; 0x68
 800bbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe2:	4a0c      	ldr	r2, [pc, #48]	; (800bc14 <prvInitialiseNewTask+0x144>)
 800bbe4:	66da      	str	r2, [r3, #108]	; 0x6c
 800bbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe8:	4a0b      	ldr	r2, [pc, #44]	; (800bc18 <prvInitialiseNewTask+0x148>)
 800bbea:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bbec:	683a      	ldr	r2, [r7, #0]
 800bbee:	68f9      	ldr	r1, [r7, #12]
 800bbf0:	69b8      	ldr	r0, [r7, #24]
 800bbf2:	f001 fb89 	bl	800d308 <pxPortInitialiseStack>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d002      	beq.n	800bc08 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc08:	bf00      	nop
 800bc0a:	3720      	adds	r7, #32
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	0800e434 	.word	0x0800e434
 800bc14:	0800e454 	.word	0x0800e454
 800bc18:	0800e414 	.word	0x0800e414

0800bc1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bc24:	f001 fc9e 	bl	800d564 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bc28:	4b2d      	ldr	r3, [pc, #180]	; (800bce0 <prvAddNewTaskToReadyList+0xc4>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	4a2c      	ldr	r2, [pc, #176]	; (800bce0 <prvAddNewTaskToReadyList+0xc4>)
 800bc30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bc32:	4b2c      	ldr	r3, [pc, #176]	; (800bce4 <prvAddNewTaskToReadyList+0xc8>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d109      	bne.n	800bc4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bc3a:	4a2a      	ldr	r2, [pc, #168]	; (800bce4 <prvAddNewTaskToReadyList+0xc8>)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bc40:	4b27      	ldr	r3, [pc, #156]	; (800bce0 <prvAddNewTaskToReadyList+0xc4>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d110      	bne.n	800bc6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bc48:	f000 fcb6 	bl	800c5b8 <prvInitialiseTaskLists>
 800bc4c:	e00d      	b.n	800bc6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bc4e:	4b26      	ldr	r3, [pc, #152]	; (800bce8 <prvAddNewTaskToReadyList+0xcc>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d109      	bne.n	800bc6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bc56:	4b23      	ldr	r3, [pc, #140]	; (800bce4 <prvAddNewTaskToReadyList+0xc8>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d802      	bhi.n	800bc6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bc64:	4a1f      	ldr	r2, [pc, #124]	; (800bce4 <prvAddNewTaskToReadyList+0xc8>)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bc6a:	4b20      	ldr	r3, [pc, #128]	; (800bcec <prvAddNewTaskToReadyList+0xd0>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	3301      	adds	r3, #1
 800bc70:	4a1e      	ldr	r2, [pc, #120]	; (800bcec <prvAddNewTaskToReadyList+0xd0>)
 800bc72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bc74:	4b1d      	ldr	r3, [pc, #116]	; (800bcec <prvAddNewTaskToReadyList+0xd0>)
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc80:	4b1b      	ldr	r3, [pc, #108]	; (800bcf0 <prvAddNewTaskToReadyList+0xd4>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d903      	bls.n	800bc90 <prvAddNewTaskToReadyList+0x74>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc8c:	4a18      	ldr	r2, [pc, #96]	; (800bcf0 <prvAddNewTaskToReadyList+0xd4>)
 800bc8e:	6013      	str	r3, [r2, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc94:	4613      	mov	r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4413      	add	r3, r2
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	4a15      	ldr	r2, [pc, #84]	; (800bcf4 <prvAddNewTaskToReadyList+0xd8>)
 800bc9e:	441a      	add	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	3304      	adds	r3, #4
 800bca4:	4619      	mov	r1, r3
 800bca6:	4610      	mov	r0, r2
 800bca8:	f7fe ff53 	bl	800ab52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bcac:	f001 fc8a 	bl	800d5c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bcb0:	4b0d      	ldr	r3, [pc, #52]	; (800bce8 <prvAddNewTaskToReadyList+0xcc>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d00e      	beq.n	800bcd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bcb8:	4b0a      	ldr	r3, [pc, #40]	; (800bce4 <prvAddNewTaskToReadyList+0xc8>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d207      	bcs.n	800bcd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bcc6:	4b0c      	ldr	r3, [pc, #48]	; (800bcf8 <prvAddNewTaskToReadyList+0xdc>)
 800bcc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bccc:	601a      	str	r2, [r3, #0]
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcd6:	bf00      	nop
 800bcd8:	3708      	adds	r7, #8
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	20002c8c 	.word	0x20002c8c
 800bce4:	200027b8 	.word	0x200027b8
 800bce8:	20002c98 	.word	0x20002c98
 800bcec:	20002ca8 	.word	0x20002ca8
 800bcf0:	20002c94 	.word	0x20002c94
 800bcf4:	200027bc 	.word	0x200027bc
 800bcf8:	e000ed04 	.word	0xe000ed04

0800bcfc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b08a      	sub	sp, #40	; 0x28
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800bd06:	2300      	movs	r3, #0
 800bd08:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d10a      	bne.n	800bd26 <vTaskDelayUntil+0x2a>
	__asm volatile
 800bd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd14:	f383 8811 	msr	BASEPRI, r3
 800bd18:	f3bf 8f6f 	isb	sy
 800bd1c:	f3bf 8f4f 	dsb	sy
 800bd20:	617b      	str	r3, [r7, #20]
}
 800bd22:	bf00      	nop
 800bd24:	e7fe      	b.n	800bd24 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d10a      	bne.n	800bd42 <vTaskDelayUntil+0x46>
	__asm volatile
 800bd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd30:	f383 8811 	msr	BASEPRI, r3
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	f3bf 8f4f 	dsb	sy
 800bd3c:	613b      	str	r3, [r7, #16]
}
 800bd3e:	bf00      	nop
 800bd40:	e7fe      	b.n	800bd40 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800bd42:	4b2a      	ldr	r3, [pc, #168]	; (800bdec <vTaskDelayUntil+0xf0>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00a      	beq.n	800bd60 <vTaskDelayUntil+0x64>
	__asm volatile
 800bd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd4e:	f383 8811 	msr	BASEPRI, r3
 800bd52:	f3bf 8f6f 	isb	sy
 800bd56:	f3bf 8f4f 	dsb	sy
 800bd5a:	60fb      	str	r3, [r7, #12]
}
 800bd5c:	bf00      	nop
 800bd5e:	e7fe      	b.n	800bd5e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800bd60:	f000 f8ee 	bl	800bf40 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800bd64:	4b22      	ldr	r3, [pc, #136]	; (800bdf0 <vTaskDelayUntil+0xf4>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	683a      	ldr	r2, [r7, #0]
 800bd70:	4413      	add	r3, r2
 800bd72:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	6a3a      	ldr	r2, [r7, #32]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d20b      	bcs.n	800bd96 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	69fa      	ldr	r2, [r7, #28]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d211      	bcs.n	800bdac <vTaskDelayUntil+0xb0>
 800bd88:	69fa      	ldr	r2, [r7, #28]
 800bd8a:	6a3b      	ldr	r3, [r7, #32]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d90d      	bls.n	800bdac <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800bd90:	2301      	movs	r3, #1
 800bd92:	627b      	str	r3, [r7, #36]	; 0x24
 800bd94:	e00a      	b.n	800bdac <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	69fa      	ldr	r2, [r7, #28]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d303      	bcc.n	800bda8 <vTaskDelayUntil+0xac>
 800bda0:	69fa      	ldr	r2, [r7, #28]
 800bda2:	6a3b      	ldr	r3, [r7, #32]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d901      	bls.n	800bdac <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	69fa      	ldr	r2, [r7, #28]
 800bdb0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800bdb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d006      	beq.n	800bdc6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800bdb8:	69fa      	ldr	r2, [r7, #28]
 800bdba:	6a3b      	ldr	r3, [r7, #32]
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f000 fe45 	bl	800ca50 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800bdc6:	f000 f8c9 	bl	800bf5c <xTaskResumeAll>
 800bdca:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d107      	bne.n	800bde2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800bdd2:	4b08      	ldr	r3, [pc, #32]	; (800bdf4 <vTaskDelayUntil+0xf8>)
 800bdd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdd8:	601a      	str	r2, [r3, #0]
 800bdda:	f3bf 8f4f 	dsb	sy
 800bdde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bde2:	bf00      	nop
 800bde4:	3728      	adds	r7, #40	; 0x28
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	20002cb4 	.word	0x20002cb4
 800bdf0:	20002c90 	.word	0x20002c90
 800bdf4:	e000ed04 	.word	0xe000ed04

0800bdf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800be00:	2300      	movs	r3, #0
 800be02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d017      	beq.n	800be3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800be0a:	4b13      	ldr	r3, [pc, #76]	; (800be58 <vTaskDelay+0x60>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d00a      	beq.n	800be28 <vTaskDelay+0x30>
	__asm volatile
 800be12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be16:	f383 8811 	msr	BASEPRI, r3
 800be1a:	f3bf 8f6f 	isb	sy
 800be1e:	f3bf 8f4f 	dsb	sy
 800be22:	60bb      	str	r3, [r7, #8]
}
 800be24:	bf00      	nop
 800be26:	e7fe      	b.n	800be26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800be28:	f000 f88a 	bl	800bf40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800be2c:	2100      	movs	r1, #0
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 fe0e 	bl	800ca50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800be34:	f000 f892 	bl	800bf5c <xTaskResumeAll>
 800be38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d107      	bne.n	800be50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800be40:	4b06      	ldr	r3, [pc, #24]	; (800be5c <vTaskDelay+0x64>)
 800be42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be46:	601a      	str	r2, [r3, #0]
 800be48:	f3bf 8f4f 	dsb	sy
 800be4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800be50:	bf00      	nop
 800be52:	3710      	adds	r7, #16
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	20002cb4 	.word	0x20002cb4
 800be5c:	e000ed04 	.word	0xe000ed04

0800be60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b08a      	sub	sp, #40	; 0x28
 800be64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800be66:	2300      	movs	r3, #0
 800be68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800be6a:	2300      	movs	r3, #0
 800be6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800be6e:	463a      	mov	r2, r7
 800be70:	1d39      	adds	r1, r7, #4
 800be72:	f107 0308 	add.w	r3, r7, #8
 800be76:	4618      	mov	r0, r3
 800be78:	f7fe fe0a 	bl	800aa90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800be7c:	6839      	ldr	r1, [r7, #0]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	68ba      	ldr	r2, [r7, #8]
 800be82:	9202      	str	r2, [sp, #8]
 800be84:	9301      	str	r3, [sp, #4]
 800be86:	2300      	movs	r3, #0
 800be88:	9300      	str	r3, [sp, #0]
 800be8a:	2300      	movs	r3, #0
 800be8c:	460a      	mov	r2, r1
 800be8e:	4924      	ldr	r1, [pc, #144]	; (800bf20 <vTaskStartScheduler+0xc0>)
 800be90:	4824      	ldr	r0, [pc, #144]	; (800bf24 <vTaskStartScheduler+0xc4>)
 800be92:	f7ff fd7b 	bl	800b98c <xTaskCreateStatic>
 800be96:	4603      	mov	r3, r0
 800be98:	4a23      	ldr	r2, [pc, #140]	; (800bf28 <vTaskStartScheduler+0xc8>)
 800be9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800be9c:	4b22      	ldr	r3, [pc, #136]	; (800bf28 <vTaskStartScheduler+0xc8>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d002      	beq.n	800beaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bea4:	2301      	movs	r3, #1
 800bea6:	617b      	str	r3, [r7, #20]
 800bea8:	e001      	b.n	800beae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800beaa:	2300      	movs	r3, #0
 800beac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d102      	bne.n	800beba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800beb4:	f000 fe20 	bl	800caf8 <xTimerCreateTimerTask>
 800beb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d11b      	bne.n	800bef8 <vTaskStartScheduler+0x98>
	__asm volatile
 800bec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec4:	f383 8811 	msr	BASEPRI, r3
 800bec8:	f3bf 8f6f 	isb	sy
 800becc:	f3bf 8f4f 	dsb	sy
 800bed0:	613b      	str	r3, [r7, #16]
}
 800bed2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bed4:	4b15      	ldr	r3, [pc, #84]	; (800bf2c <vTaskStartScheduler+0xcc>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	3364      	adds	r3, #100	; 0x64
 800beda:	4a15      	ldr	r2, [pc, #84]	; (800bf30 <vTaskStartScheduler+0xd0>)
 800bedc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bede:	4b15      	ldr	r3, [pc, #84]	; (800bf34 <vTaskStartScheduler+0xd4>)
 800bee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bee4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bee6:	4b14      	ldr	r3, [pc, #80]	; (800bf38 <vTaskStartScheduler+0xd8>)
 800bee8:	2201      	movs	r2, #1
 800beea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800beec:	4b13      	ldr	r3, [pc, #76]	; (800bf3c <vTaskStartScheduler+0xdc>)
 800beee:	2200      	movs	r2, #0
 800bef0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bef2:	f001 fa95 	bl	800d420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bef6:	e00e      	b.n	800bf16 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800befe:	d10a      	bne.n	800bf16 <vTaskStartScheduler+0xb6>
	__asm volatile
 800bf00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf04:	f383 8811 	msr	BASEPRI, r3
 800bf08:	f3bf 8f6f 	isb	sy
 800bf0c:	f3bf 8f4f 	dsb	sy
 800bf10:	60fb      	str	r3, [r7, #12]
}
 800bf12:	bf00      	nop
 800bf14:	e7fe      	b.n	800bf14 <vTaskStartScheduler+0xb4>
}
 800bf16:	bf00      	nop
 800bf18:	3718      	adds	r7, #24
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	0800e270 	.word	0x0800e270
 800bf24:	0800c589 	.word	0x0800c589
 800bf28:	20002cb0 	.word	0x20002cb0
 800bf2c:	200027b8 	.word	0x200027b8
 800bf30:	20000044 	.word	0x20000044
 800bf34:	20002cac 	.word	0x20002cac
 800bf38:	20002c98 	.word	0x20002c98
 800bf3c:	20002c90 	.word	0x20002c90

0800bf40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bf40:	b480      	push	{r7}
 800bf42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bf44:	4b04      	ldr	r3, [pc, #16]	; (800bf58 <vTaskSuspendAll+0x18>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	4a03      	ldr	r2, [pc, #12]	; (800bf58 <vTaskSuspendAll+0x18>)
 800bf4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bf4e:	bf00      	nop
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr
 800bf58:	20002cb4 	.word	0x20002cb4

0800bf5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bf62:	2300      	movs	r3, #0
 800bf64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bf66:	2300      	movs	r3, #0
 800bf68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bf6a:	4b42      	ldr	r3, [pc, #264]	; (800c074 <xTaskResumeAll+0x118>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d10a      	bne.n	800bf88 <xTaskResumeAll+0x2c>
	__asm volatile
 800bf72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf76:	f383 8811 	msr	BASEPRI, r3
 800bf7a:	f3bf 8f6f 	isb	sy
 800bf7e:	f3bf 8f4f 	dsb	sy
 800bf82:	603b      	str	r3, [r7, #0]
}
 800bf84:	bf00      	nop
 800bf86:	e7fe      	b.n	800bf86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bf88:	f001 faec 	bl	800d564 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bf8c:	4b39      	ldr	r3, [pc, #228]	; (800c074 <xTaskResumeAll+0x118>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	3b01      	subs	r3, #1
 800bf92:	4a38      	ldr	r2, [pc, #224]	; (800c074 <xTaskResumeAll+0x118>)
 800bf94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf96:	4b37      	ldr	r3, [pc, #220]	; (800c074 <xTaskResumeAll+0x118>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d162      	bne.n	800c064 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bf9e:	4b36      	ldr	r3, [pc, #216]	; (800c078 <xTaskResumeAll+0x11c>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d05e      	beq.n	800c064 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bfa6:	e02f      	b.n	800c008 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfa8:	4b34      	ldr	r3, [pc, #208]	; (800c07c <xTaskResumeAll+0x120>)
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	68db      	ldr	r3, [r3, #12]
 800bfae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	3318      	adds	r3, #24
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7fe fe29 	bl	800ac0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	3304      	adds	r3, #4
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fe fe24 	bl	800ac0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc8:	4b2d      	ldr	r3, [pc, #180]	; (800c080 <xTaskResumeAll+0x124>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d903      	bls.n	800bfd8 <xTaskResumeAll+0x7c>
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd4:	4a2a      	ldr	r2, [pc, #168]	; (800c080 <xTaskResumeAll+0x124>)
 800bfd6:	6013      	str	r3, [r2, #0]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfdc:	4613      	mov	r3, r2
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	4413      	add	r3, r2
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	4a27      	ldr	r2, [pc, #156]	; (800c084 <xTaskResumeAll+0x128>)
 800bfe6:	441a      	add	r2, r3
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	3304      	adds	r3, #4
 800bfec:	4619      	mov	r1, r3
 800bfee:	4610      	mov	r0, r2
 800bff0:	f7fe fdaf 	bl	800ab52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bff8:	4b23      	ldr	r3, [pc, #140]	; (800c088 <xTaskResumeAll+0x12c>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bffe:	429a      	cmp	r2, r3
 800c000:	d302      	bcc.n	800c008 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c002:	4b22      	ldr	r3, [pc, #136]	; (800c08c <xTaskResumeAll+0x130>)
 800c004:	2201      	movs	r2, #1
 800c006:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c008:	4b1c      	ldr	r3, [pc, #112]	; (800c07c <xTaskResumeAll+0x120>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d1cb      	bne.n	800bfa8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d001      	beq.n	800c01a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c016:	f000 fb71 	bl	800c6fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c01a:	4b1d      	ldr	r3, [pc, #116]	; (800c090 <xTaskResumeAll+0x134>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d010      	beq.n	800c048 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c026:	f000 f859 	bl	800c0dc <xTaskIncrementTick>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d002      	beq.n	800c036 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c030:	4b16      	ldr	r3, [pc, #88]	; (800c08c <xTaskResumeAll+0x130>)
 800c032:	2201      	movs	r2, #1
 800c034:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	3b01      	subs	r3, #1
 800c03a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d1f1      	bne.n	800c026 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c042:	4b13      	ldr	r3, [pc, #76]	; (800c090 <xTaskResumeAll+0x134>)
 800c044:	2200      	movs	r2, #0
 800c046:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c048:	4b10      	ldr	r3, [pc, #64]	; (800c08c <xTaskResumeAll+0x130>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d009      	beq.n	800c064 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c050:	2301      	movs	r3, #1
 800c052:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c054:	4b0f      	ldr	r3, [pc, #60]	; (800c094 <xTaskResumeAll+0x138>)
 800c056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c05a:	601a      	str	r2, [r3, #0]
 800c05c:	f3bf 8f4f 	dsb	sy
 800c060:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c064:	f001 faae 	bl	800d5c4 <vPortExitCritical>

	return xAlreadyYielded;
 800c068:	68bb      	ldr	r3, [r7, #8]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	20002cb4 	.word	0x20002cb4
 800c078:	20002c8c 	.word	0x20002c8c
 800c07c:	20002c4c 	.word	0x20002c4c
 800c080:	20002c94 	.word	0x20002c94
 800c084:	200027bc 	.word	0x200027bc
 800c088:	200027b8 	.word	0x200027b8
 800c08c:	20002ca0 	.word	0x20002ca0
 800c090:	20002c9c 	.word	0x20002c9c
 800c094:	e000ed04 	.word	0xe000ed04

0800c098 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c098:	b480      	push	{r7}
 800c09a:	b083      	sub	sp, #12
 800c09c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c09e:	4b05      	ldr	r3, [pc, #20]	; (800c0b4 <xTaskGetTickCount+0x1c>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c0a4:	687b      	ldr	r3, [r7, #4]
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	370c      	adds	r7, #12
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr
 800c0b2:	bf00      	nop
 800c0b4:	20002c90 	.word	0x20002c90

0800c0b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0be:	f001 fb33 	bl	800d728 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c0c6:	4b04      	ldr	r3, [pc, #16]	; (800c0d8 <xTaskGetTickCountFromISR+0x20>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c0cc:	683b      	ldr	r3, [r7, #0]
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3708      	adds	r7, #8
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	bf00      	nop
 800c0d8:	20002c90 	.word	0x20002c90

0800c0dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b086      	sub	sp, #24
 800c0e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0e6:	4b4f      	ldr	r3, [pc, #316]	; (800c224 <xTaskIncrementTick+0x148>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	f040 808f 	bne.w	800c20e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c0f0:	4b4d      	ldr	r3, [pc, #308]	; (800c228 <xTaskIncrementTick+0x14c>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c0f8:	4a4b      	ldr	r2, [pc, #300]	; (800c228 <xTaskIncrementTick+0x14c>)
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d120      	bne.n	800c146 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c104:	4b49      	ldr	r3, [pc, #292]	; (800c22c <xTaskIncrementTick+0x150>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d00a      	beq.n	800c124 <xTaskIncrementTick+0x48>
	__asm volatile
 800c10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c112:	f383 8811 	msr	BASEPRI, r3
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	603b      	str	r3, [r7, #0]
}
 800c120:	bf00      	nop
 800c122:	e7fe      	b.n	800c122 <xTaskIncrementTick+0x46>
 800c124:	4b41      	ldr	r3, [pc, #260]	; (800c22c <xTaskIncrementTick+0x150>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	60fb      	str	r3, [r7, #12]
 800c12a:	4b41      	ldr	r3, [pc, #260]	; (800c230 <xTaskIncrementTick+0x154>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a3f      	ldr	r2, [pc, #252]	; (800c22c <xTaskIncrementTick+0x150>)
 800c130:	6013      	str	r3, [r2, #0]
 800c132:	4a3f      	ldr	r2, [pc, #252]	; (800c230 <xTaskIncrementTick+0x154>)
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6013      	str	r3, [r2, #0]
 800c138:	4b3e      	ldr	r3, [pc, #248]	; (800c234 <xTaskIncrementTick+0x158>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	3301      	adds	r3, #1
 800c13e:	4a3d      	ldr	r2, [pc, #244]	; (800c234 <xTaskIncrementTick+0x158>)
 800c140:	6013      	str	r3, [r2, #0]
 800c142:	f000 fadb 	bl	800c6fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c146:	4b3c      	ldr	r3, [pc, #240]	; (800c238 <xTaskIncrementTick+0x15c>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	693a      	ldr	r2, [r7, #16]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d349      	bcc.n	800c1e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c150:	4b36      	ldr	r3, [pc, #216]	; (800c22c <xTaskIncrementTick+0x150>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d104      	bne.n	800c164 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c15a:	4b37      	ldr	r3, [pc, #220]	; (800c238 <xTaskIncrementTick+0x15c>)
 800c15c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c160:	601a      	str	r2, [r3, #0]
					break;
 800c162:	e03f      	b.n	800c1e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c164:	4b31      	ldr	r3, [pc, #196]	; (800c22c <xTaskIncrementTick+0x150>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c174:	693a      	ldr	r2, [r7, #16]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d203      	bcs.n	800c184 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c17c:	4a2e      	ldr	r2, [pc, #184]	; (800c238 <xTaskIncrementTick+0x15c>)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c182:	e02f      	b.n	800c1e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	3304      	adds	r3, #4
 800c188:	4618      	mov	r0, r3
 800c18a:	f7fe fd3f 	bl	800ac0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c192:	2b00      	cmp	r3, #0
 800c194:	d004      	beq.n	800c1a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	3318      	adds	r3, #24
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7fe fd36 	bl	800ac0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1a4:	4b25      	ldr	r3, [pc, #148]	; (800c23c <xTaskIncrementTick+0x160>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d903      	bls.n	800c1b4 <xTaskIncrementTick+0xd8>
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b0:	4a22      	ldr	r2, [pc, #136]	; (800c23c <xTaskIncrementTick+0x160>)
 800c1b2:	6013      	str	r3, [r2, #0]
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b8:	4613      	mov	r3, r2
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	4413      	add	r3, r2
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	4a1f      	ldr	r2, [pc, #124]	; (800c240 <xTaskIncrementTick+0x164>)
 800c1c2:	441a      	add	r2, r3
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	3304      	adds	r3, #4
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	4610      	mov	r0, r2
 800c1cc:	f7fe fcc1 	bl	800ab52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d4:	4b1b      	ldr	r3, [pc, #108]	; (800c244 <xTaskIncrementTick+0x168>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d3b8      	bcc.n	800c150 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1e2:	e7b5      	b.n	800c150 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c1e4:	4b17      	ldr	r3, [pc, #92]	; (800c244 <xTaskIncrementTick+0x168>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ea:	4915      	ldr	r1, [pc, #84]	; (800c240 <xTaskIncrementTick+0x164>)
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4413      	add	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	440b      	add	r3, r1
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d901      	bls.n	800c200 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c200:	4b11      	ldr	r3, [pc, #68]	; (800c248 <xTaskIncrementTick+0x16c>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d007      	beq.n	800c218 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c208:	2301      	movs	r3, #1
 800c20a:	617b      	str	r3, [r7, #20]
 800c20c:	e004      	b.n	800c218 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c20e:	4b0f      	ldr	r3, [pc, #60]	; (800c24c <xTaskIncrementTick+0x170>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	3301      	adds	r3, #1
 800c214:	4a0d      	ldr	r2, [pc, #52]	; (800c24c <xTaskIncrementTick+0x170>)
 800c216:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c218:	697b      	ldr	r3, [r7, #20]
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3718      	adds	r7, #24
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	20002cb4 	.word	0x20002cb4
 800c228:	20002c90 	.word	0x20002c90
 800c22c:	20002c44 	.word	0x20002c44
 800c230:	20002c48 	.word	0x20002c48
 800c234:	20002ca4 	.word	0x20002ca4
 800c238:	20002cac 	.word	0x20002cac
 800c23c:	20002c94 	.word	0x20002c94
 800c240:	200027bc 	.word	0x200027bc
 800c244:	200027b8 	.word	0x200027b8
 800c248:	20002ca0 	.word	0x20002ca0
 800c24c:	20002c9c 	.word	0x20002c9c

0800c250 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c250:	b480      	push	{r7}
 800c252:	b085      	sub	sp, #20
 800c254:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c256:	4b2a      	ldr	r3, [pc, #168]	; (800c300 <vTaskSwitchContext+0xb0>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d003      	beq.n	800c266 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c25e:	4b29      	ldr	r3, [pc, #164]	; (800c304 <vTaskSwitchContext+0xb4>)
 800c260:	2201      	movs	r2, #1
 800c262:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c264:	e046      	b.n	800c2f4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c266:	4b27      	ldr	r3, [pc, #156]	; (800c304 <vTaskSwitchContext+0xb4>)
 800c268:	2200      	movs	r2, #0
 800c26a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c26c:	4b26      	ldr	r3, [pc, #152]	; (800c308 <vTaskSwitchContext+0xb8>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	60fb      	str	r3, [r7, #12]
 800c272:	e010      	b.n	800c296 <vTaskSwitchContext+0x46>
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d10a      	bne.n	800c290 <vTaskSwitchContext+0x40>
	__asm volatile
 800c27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27e:	f383 8811 	msr	BASEPRI, r3
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	f3bf 8f4f 	dsb	sy
 800c28a:	607b      	str	r3, [r7, #4]
}
 800c28c:	bf00      	nop
 800c28e:	e7fe      	b.n	800c28e <vTaskSwitchContext+0x3e>
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	3b01      	subs	r3, #1
 800c294:	60fb      	str	r3, [r7, #12]
 800c296:	491d      	ldr	r1, [pc, #116]	; (800c30c <vTaskSwitchContext+0xbc>)
 800c298:	68fa      	ldr	r2, [r7, #12]
 800c29a:	4613      	mov	r3, r2
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	4413      	add	r3, r2
 800c2a0:	009b      	lsls	r3, r3, #2
 800c2a2:	440b      	add	r3, r1
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d0e4      	beq.n	800c274 <vTaskSwitchContext+0x24>
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	4613      	mov	r3, r2
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	4a15      	ldr	r2, [pc, #84]	; (800c30c <vTaskSwitchContext+0xbc>)
 800c2b6:	4413      	add	r3, r2
 800c2b8:	60bb      	str	r3, [r7, #8]
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	685a      	ldr	r2, [r3, #4]
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	605a      	str	r2, [r3, #4]
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	685a      	ldr	r2, [r3, #4]
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	3308      	adds	r3, #8
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d104      	bne.n	800c2da <vTaskSwitchContext+0x8a>
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	685a      	ldr	r2, [r3, #4]
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	605a      	str	r2, [r3, #4]
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	4a0b      	ldr	r2, [pc, #44]	; (800c310 <vTaskSwitchContext+0xc0>)
 800c2e2:	6013      	str	r3, [r2, #0]
 800c2e4:	4a08      	ldr	r2, [pc, #32]	; (800c308 <vTaskSwitchContext+0xb8>)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c2ea:	4b09      	ldr	r3, [pc, #36]	; (800c310 <vTaskSwitchContext+0xc0>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	3364      	adds	r3, #100	; 0x64
 800c2f0:	4a08      	ldr	r2, [pc, #32]	; (800c314 <vTaskSwitchContext+0xc4>)
 800c2f2:	6013      	str	r3, [r2, #0]
}
 800c2f4:	bf00      	nop
 800c2f6:	3714      	adds	r7, #20
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr
 800c300:	20002cb4 	.word	0x20002cb4
 800c304:	20002ca0 	.word	0x20002ca0
 800c308:	20002c94 	.word	0x20002c94
 800c30c:	200027bc 	.word	0x200027bc
 800c310:	200027b8 	.word	0x200027b8
 800c314:	20000044 	.word	0x20000044

0800c318 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d10a      	bne.n	800c33e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32c:	f383 8811 	msr	BASEPRI, r3
 800c330:	f3bf 8f6f 	isb	sy
 800c334:	f3bf 8f4f 	dsb	sy
 800c338:	60fb      	str	r3, [r7, #12]
}
 800c33a:	bf00      	nop
 800c33c:	e7fe      	b.n	800c33c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c33e:	4b07      	ldr	r3, [pc, #28]	; (800c35c <vTaskPlaceOnEventList+0x44>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	3318      	adds	r3, #24
 800c344:	4619      	mov	r1, r3
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f7fe fc27 	bl	800ab9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c34c:	2101      	movs	r1, #1
 800c34e:	6838      	ldr	r0, [r7, #0]
 800c350:	f000 fb7e 	bl	800ca50 <prvAddCurrentTaskToDelayedList>
}
 800c354:	bf00      	nop
 800c356:	3710      	adds	r7, #16
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	200027b8 	.word	0x200027b8

0800c360 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c360:	b580      	push	{r7, lr}
 800c362:	b086      	sub	sp, #24
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d10a      	bne.n	800c388 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c376:	f383 8811 	msr	BASEPRI, r3
 800c37a:	f3bf 8f6f 	isb	sy
 800c37e:	f3bf 8f4f 	dsb	sy
 800c382:	617b      	str	r3, [r7, #20]
}
 800c384:	bf00      	nop
 800c386:	e7fe      	b.n	800c386 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c388:	4b0a      	ldr	r3, [pc, #40]	; (800c3b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	3318      	adds	r3, #24
 800c38e:	4619      	mov	r1, r3
 800c390:	68f8      	ldr	r0, [r7, #12]
 800c392:	f7fe fbde 	bl	800ab52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d002      	beq.n	800c3a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c39c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c3a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c3a2:	6879      	ldr	r1, [r7, #4]
 800c3a4:	68b8      	ldr	r0, [r7, #8]
 800c3a6:	f000 fb53 	bl	800ca50 <prvAddCurrentTaskToDelayedList>
	}
 800c3aa:	bf00      	nop
 800c3ac:	3718      	adds	r7, #24
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	200027b8 	.word	0x200027b8

0800c3b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b086      	sub	sp, #24
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	68db      	ldr	r3, [r3, #12]
 800c3c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d10a      	bne.n	800c3e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d2:	f383 8811 	msr	BASEPRI, r3
 800c3d6:	f3bf 8f6f 	isb	sy
 800c3da:	f3bf 8f4f 	dsb	sy
 800c3de:	60fb      	str	r3, [r7, #12]
}
 800c3e0:	bf00      	nop
 800c3e2:	e7fe      	b.n	800c3e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	3318      	adds	r3, #24
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7fe fc0f 	bl	800ac0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3ee:	4b1e      	ldr	r3, [pc, #120]	; (800c468 <xTaskRemoveFromEventList+0xb0>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d11d      	bne.n	800c432 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	3304      	adds	r3, #4
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7fe fc06 	bl	800ac0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c404:	4b19      	ldr	r3, [pc, #100]	; (800c46c <xTaskRemoveFromEventList+0xb4>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d903      	bls.n	800c414 <xTaskRemoveFromEventList+0x5c>
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c410:	4a16      	ldr	r2, [pc, #88]	; (800c46c <xTaskRemoveFromEventList+0xb4>)
 800c412:	6013      	str	r3, [r2, #0]
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c418:	4613      	mov	r3, r2
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	4413      	add	r3, r2
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	4a13      	ldr	r2, [pc, #76]	; (800c470 <xTaskRemoveFromEventList+0xb8>)
 800c422:	441a      	add	r2, r3
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	3304      	adds	r3, #4
 800c428:	4619      	mov	r1, r3
 800c42a:	4610      	mov	r0, r2
 800c42c:	f7fe fb91 	bl	800ab52 <vListInsertEnd>
 800c430:	e005      	b.n	800c43e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	3318      	adds	r3, #24
 800c436:	4619      	mov	r1, r3
 800c438:	480e      	ldr	r0, [pc, #56]	; (800c474 <xTaskRemoveFromEventList+0xbc>)
 800c43a:	f7fe fb8a 	bl	800ab52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c442:	4b0d      	ldr	r3, [pc, #52]	; (800c478 <xTaskRemoveFromEventList+0xc0>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c448:	429a      	cmp	r2, r3
 800c44a:	d905      	bls.n	800c458 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c44c:	2301      	movs	r3, #1
 800c44e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c450:	4b0a      	ldr	r3, [pc, #40]	; (800c47c <xTaskRemoveFromEventList+0xc4>)
 800c452:	2201      	movs	r2, #1
 800c454:	601a      	str	r2, [r3, #0]
 800c456:	e001      	b.n	800c45c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c458:	2300      	movs	r3, #0
 800c45a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c45c:	697b      	ldr	r3, [r7, #20]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3718      	adds	r7, #24
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	20002cb4 	.word	0x20002cb4
 800c46c:	20002c94 	.word	0x20002c94
 800c470:	200027bc 	.word	0x200027bc
 800c474:	20002c4c 	.word	0x20002c4c
 800c478:	200027b8 	.word	0x200027b8
 800c47c:	20002ca0 	.word	0x20002ca0

0800c480 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c488:	4b06      	ldr	r3, [pc, #24]	; (800c4a4 <vTaskInternalSetTimeOutState+0x24>)
 800c48a:	681a      	ldr	r2, [r3, #0]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c490:	4b05      	ldr	r3, [pc, #20]	; (800c4a8 <vTaskInternalSetTimeOutState+0x28>)
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	605a      	str	r2, [r3, #4]
}
 800c498:	bf00      	nop
 800c49a:	370c      	adds	r7, #12
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr
 800c4a4:	20002ca4 	.word	0x20002ca4
 800c4a8:	20002c90 	.word	0x20002c90

0800c4ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b088      	sub	sp, #32
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d10a      	bne.n	800c4d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c0:	f383 8811 	msr	BASEPRI, r3
 800c4c4:	f3bf 8f6f 	isb	sy
 800c4c8:	f3bf 8f4f 	dsb	sy
 800c4cc:	613b      	str	r3, [r7, #16]
}
 800c4ce:	bf00      	nop
 800c4d0:	e7fe      	b.n	800c4d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d10a      	bne.n	800c4ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4dc:	f383 8811 	msr	BASEPRI, r3
 800c4e0:	f3bf 8f6f 	isb	sy
 800c4e4:	f3bf 8f4f 	dsb	sy
 800c4e8:	60fb      	str	r3, [r7, #12]
}
 800c4ea:	bf00      	nop
 800c4ec:	e7fe      	b.n	800c4ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c4ee:	f001 f839 	bl	800d564 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c4f2:	4b1d      	ldr	r3, [pc, #116]	; (800c568 <xTaskCheckForTimeOut+0xbc>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	69ba      	ldr	r2, [r7, #24]
 800c4fe:	1ad3      	subs	r3, r2, r3
 800c500:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c50a:	d102      	bne.n	800c512 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c50c:	2300      	movs	r3, #0
 800c50e:	61fb      	str	r3, [r7, #28]
 800c510:	e023      	b.n	800c55a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	4b15      	ldr	r3, [pc, #84]	; (800c56c <xTaskCheckForTimeOut+0xc0>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d007      	beq.n	800c52e <xTaskCheckForTimeOut+0x82>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	69ba      	ldr	r2, [r7, #24]
 800c524:	429a      	cmp	r2, r3
 800c526:	d302      	bcc.n	800c52e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c528:	2301      	movs	r3, #1
 800c52a:	61fb      	str	r3, [r7, #28]
 800c52c:	e015      	b.n	800c55a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	697a      	ldr	r2, [r7, #20]
 800c534:	429a      	cmp	r2, r3
 800c536:	d20b      	bcs.n	800c550 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	1ad2      	subs	r2, r2, r3
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f7ff ff9b 	bl	800c480 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c54a:	2300      	movs	r3, #0
 800c54c:	61fb      	str	r3, [r7, #28]
 800c54e:	e004      	b.n	800c55a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	2200      	movs	r2, #0
 800c554:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c556:	2301      	movs	r3, #1
 800c558:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c55a:	f001 f833 	bl	800d5c4 <vPortExitCritical>

	return xReturn;
 800c55e:	69fb      	ldr	r3, [r7, #28]
}
 800c560:	4618      	mov	r0, r3
 800c562:	3720      	adds	r7, #32
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	20002c90 	.word	0x20002c90
 800c56c:	20002ca4 	.word	0x20002ca4

0800c570 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c570:	b480      	push	{r7}
 800c572:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c574:	4b03      	ldr	r3, [pc, #12]	; (800c584 <vTaskMissedYield+0x14>)
 800c576:	2201      	movs	r2, #1
 800c578:	601a      	str	r2, [r3, #0]
}
 800c57a:	bf00      	nop
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr
 800c584:	20002ca0 	.word	0x20002ca0

0800c588 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c590:	f000 f852 	bl	800c638 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c594:	4b06      	ldr	r3, [pc, #24]	; (800c5b0 <prvIdleTask+0x28>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d9f9      	bls.n	800c590 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c59c:	4b05      	ldr	r3, [pc, #20]	; (800c5b4 <prvIdleTask+0x2c>)
 800c59e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5a2:	601a      	str	r2, [r3, #0]
 800c5a4:	f3bf 8f4f 	dsb	sy
 800c5a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c5ac:	e7f0      	b.n	800c590 <prvIdleTask+0x8>
 800c5ae:	bf00      	nop
 800c5b0:	200027bc 	.word	0x200027bc
 800c5b4:	e000ed04 	.word	0xe000ed04

0800c5b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5be:	2300      	movs	r3, #0
 800c5c0:	607b      	str	r3, [r7, #4]
 800c5c2:	e00c      	b.n	800c5de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	009b      	lsls	r3, r3, #2
 800c5ca:	4413      	add	r3, r2
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	4a12      	ldr	r2, [pc, #72]	; (800c618 <prvInitialiseTaskLists+0x60>)
 800c5d0:	4413      	add	r3, r2
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fe fa90 	bl	800aaf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	3301      	adds	r3, #1
 800c5dc:	607b      	str	r3, [r7, #4]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2b37      	cmp	r3, #55	; 0x37
 800c5e2:	d9ef      	bls.n	800c5c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c5e4:	480d      	ldr	r0, [pc, #52]	; (800c61c <prvInitialiseTaskLists+0x64>)
 800c5e6:	f7fe fa87 	bl	800aaf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c5ea:	480d      	ldr	r0, [pc, #52]	; (800c620 <prvInitialiseTaskLists+0x68>)
 800c5ec:	f7fe fa84 	bl	800aaf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c5f0:	480c      	ldr	r0, [pc, #48]	; (800c624 <prvInitialiseTaskLists+0x6c>)
 800c5f2:	f7fe fa81 	bl	800aaf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c5f6:	480c      	ldr	r0, [pc, #48]	; (800c628 <prvInitialiseTaskLists+0x70>)
 800c5f8:	f7fe fa7e 	bl	800aaf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c5fc:	480b      	ldr	r0, [pc, #44]	; (800c62c <prvInitialiseTaskLists+0x74>)
 800c5fe:	f7fe fa7b 	bl	800aaf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c602:	4b0b      	ldr	r3, [pc, #44]	; (800c630 <prvInitialiseTaskLists+0x78>)
 800c604:	4a05      	ldr	r2, [pc, #20]	; (800c61c <prvInitialiseTaskLists+0x64>)
 800c606:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c608:	4b0a      	ldr	r3, [pc, #40]	; (800c634 <prvInitialiseTaskLists+0x7c>)
 800c60a:	4a05      	ldr	r2, [pc, #20]	; (800c620 <prvInitialiseTaskLists+0x68>)
 800c60c:	601a      	str	r2, [r3, #0]
}
 800c60e:	bf00      	nop
 800c610:	3708      	adds	r7, #8
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	200027bc 	.word	0x200027bc
 800c61c:	20002c1c 	.word	0x20002c1c
 800c620:	20002c30 	.word	0x20002c30
 800c624:	20002c4c 	.word	0x20002c4c
 800c628:	20002c60 	.word	0x20002c60
 800c62c:	20002c78 	.word	0x20002c78
 800c630:	20002c44 	.word	0x20002c44
 800c634:	20002c48 	.word	0x20002c48

0800c638 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c63e:	e019      	b.n	800c674 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c640:	f000 ff90 	bl	800d564 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c644:	4b10      	ldr	r3, [pc, #64]	; (800c688 <prvCheckTasksWaitingTermination+0x50>)
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	68db      	ldr	r3, [r3, #12]
 800c64a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	3304      	adds	r3, #4
 800c650:	4618      	mov	r0, r3
 800c652:	f7fe fadb 	bl	800ac0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c656:	4b0d      	ldr	r3, [pc, #52]	; (800c68c <prvCheckTasksWaitingTermination+0x54>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	3b01      	subs	r3, #1
 800c65c:	4a0b      	ldr	r2, [pc, #44]	; (800c68c <prvCheckTasksWaitingTermination+0x54>)
 800c65e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c660:	4b0b      	ldr	r3, [pc, #44]	; (800c690 <prvCheckTasksWaitingTermination+0x58>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	3b01      	subs	r3, #1
 800c666:	4a0a      	ldr	r2, [pc, #40]	; (800c690 <prvCheckTasksWaitingTermination+0x58>)
 800c668:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c66a:	f000 ffab 	bl	800d5c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 f810 	bl	800c694 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c674:	4b06      	ldr	r3, [pc, #24]	; (800c690 <prvCheckTasksWaitingTermination+0x58>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d1e1      	bne.n	800c640 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c67c:	bf00      	nop
 800c67e:	bf00      	nop
 800c680:	3708      	adds	r7, #8
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	20002c60 	.word	0x20002c60
 800c68c:	20002c8c 	.word	0x20002c8c
 800c690:	20002c74 	.word	0x20002c74

0800c694 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c694:	b580      	push	{r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	3364      	adds	r3, #100	; 0x64
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f001 fabb 	bl	800dc1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d108      	bne.n	800c6c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f001 f943 	bl	800d940 <vPortFree>
				vPortFree( pxTCB );
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f001 f940 	bl	800d940 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c6c0:	e018      	b.n	800c6f4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d103      	bne.n	800c6d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f001 f937 	bl	800d940 <vPortFree>
	}
 800c6d2:	e00f      	b.n	800c6f4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c6da:	2b02      	cmp	r3, #2
 800c6dc:	d00a      	beq.n	800c6f4 <prvDeleteTCB+0x60>
	__asm volatile
 800c6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e2:	f383 8811 	msr	BASEPRI, r3
 800c6e6:	f3bf 8f6f 	isb	sy
 800c6ea:	f3bf 8f4f 	dsb	sy
 800c6ee:	60fb      	str	r3, [r7, #12]
}
 800c6f0:	bf00      	nop
 800c6f2:	e7fe      	b.n	800c6f2 <prvDeleteTCB+0x5e>
	}
 800c6f4:	bf00      	nop
 800c6f6:	3710      	adds	r7, #16
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b083      	sub	sp, #12
 800c700:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c702:	4b0c      	ldr	r3, [pc, #48]	; (800c734 <prvResetNextTaskUnblockTime+0x38>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d104      	bne.n	800c716 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c70c:	4b0a      	ldr	r3, [pc, #40]	; (800c738 <prvResetNextTaskUnblockTime+0x3c>)
 800c70e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c712:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c714:	e008      	b.n	800c728 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c716:	4b07      	ldr	r3, [pc, #28]	; (800c734 <prvResetNextTaskUnblockTime+0x38>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	68db      	ldr	r3, [r3, #12]
 800c71e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	4a04      	ldr	r2, [pc, #16]	; (800c738 <prvResetNextTaskUnblockTime+0x3c>)
 800c726:	6013      	str	r3, [r2, #0]
}
 800c728:	bf00      	nop
 800c72a:	370c      	adds	r7, #12
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr
 800c734:	20002c44 	.word	0x20002c44
 800c738:	20002cac 	.word	0x20002cac

0800c73c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c73c:	b480      	push	{r7}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c742:	4b0b      	ldr	r3, [pc, #44]	; (800c770 <xTaskGetSchedulerState+0x34>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d102      	bne.n	800c750 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c74a:	2301      	movs	r3, #1
 800c74c:	607b      	str	r3, [r7, #4]
 800c74e:	e008      	b.n	800c762 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c750:	4b08      	ldr	r3, [pc, #32]	; (800c774 <xTaskGetSchedulerState+0x38>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d102      	bne.n	800c75e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c758:	2302      	movs	r3, #2
 800c75a:	607b      	str	r3, [r7, #4]
 800c75c:	e001      	b.n	800c762 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c75e:	2300      	movs	r3, #0
 800c760:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c762:	687b      	ldr	r3, [r7, #4]
	}
 800c764:	4618      	mov	r0, r3
 800c766:	370c      	adds	r7, #12
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr
 800c770:	20002c98 	.word	0x20002c98
 800c774:	20002cb4 	.word	0x20002cb4

0800c778 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c784:	2300      	movs	r3, #0
 800c786:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d051      	beq.n	800c832 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c792:	4b2a      	ldr	r3, [pc, #168]	; (800c83c <xTaskPriorityInherit+0xc4>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c798:	429a      	cmp	r2, r3
 800c79a:	d241      	bcs.n	800c820 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	699b      	ldr	r3, [r3, #24]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	db06      	blt.n	800c7b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7a4:	4b25      	ldr	r3, [pc, #148]	; (800c83c <xTaskPriorityInherit+0xc4>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	6959      	ldr	r1, [r3, #20]
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ba:	4613      	mov	r3, r2
 800c7bc:	009b      	lsls	r3, r3, #2
 800c7be:	4413      	add	r3, r2
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	4a1f      	ldr	r2, [pc, #124]	; (800c840 <xTaskPriorityInherit+0xc8>)
 800c7c4:	4413      	add	r3, r2
 800c7c6:	4299      	cmp	r1, r3
 800c7c8:	d122      	bne.n	800c810 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	3304      	adds	r3, #4
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7fe fa1c 	bl	800ac0c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c7d4:	4b19      	ldr	r3, [pc, #100]	; (800c83c <xTaskPriorityInherit+0xc4>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7e2:	4b18      	ldr	r3, [pc, #96]	; (800c844 <xTaskPriorityInherit+0xcc>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d903      	bls.n	800c7f2 <xTaskPriorityInherit+0x7a>
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ee:	4a15      	ldr	r2, [pc, #84]	; (800c844 <xTaskPriorityInherit+0xcc>)
 800c7f0:	6013      	str	r3, [r2, #0]
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7f6:	4613      	mov	r3, r2
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	4413      	add	r3, r2
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	4a10      	ldr	r2, [pc, #64]	; (800c840 <xTaskPriorityInherit+0xc8>)
 800c800:	441a      	add	r2, r3
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	3304      	adds	r3, #4
 800c806:	4619      	mov	r1, r3
 800c808:	4610      	mov	r0, r2
 800c80a:	f7fe f9a2 	bl	800ab52 <vListInsertEnd>
 800c80e:	e004      	b.n	800c81a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c810:	4b0a      	ldr	r3, [pc, #40]	; (800c83c <xTaskPriorityInherit+0xc4>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c81a:	2301      	movs	r3, #1
 800c81c:	60fb      	str	r3, [r7, #12]
 800c81e:	e008      	b.n	800c832 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c824:	4b05      	ldr	r3, [pc, #20]	; (800c83c <xTaskPriorityInherit+0xc4>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d201      	bcs.n	800c832 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c82e:	2301      	movs	r3, #1
 800c830:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c832:	68fb      	ldr	r3, [r7, #12]
	}
 800c834:	4618      	mov	r0, r3
 800c836:	3710      	adds	r7, #16
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	200027b8 	.word	0x200027b8
 800c840:	200027bc 	.word	0x200027bc
 800c844:	20002c94 	.word	0x20002c94

0800c848 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b086      	sub	sp, #24
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c854:	2300      	movs	r3, #0
 800c856:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d056      	beq.n	800c90c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c85e:	4b2e      	ldr	r3, [pc, #184]	; (800c918 <xTaskPriorityDisinherit+0xd0>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	693a      	ldr	r2, [r7, #16]
 800c864:	429a      	cmp	r2, r3
 800c866:	d00a      	beq.n	800c87e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c86c:	f383 8811 	msr	BASEPRI, r3
 800c870:	f3bf 8f6f 	isb	sy
 800c874:	f3bf 8f4f 	dsb	sy
 800c878:	60fb      	str	r3, [r7, #12]
}
 800c87a:	bf00      	nop
 800c87c:	e7fe      	b.n	800c87c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c882:	2b00      	cmp	r3, #0
 800c884:	d10a      	bne.n	800c89c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88a:	f383 8811 	msr	BASEPRI, r3
 800c88e:	f3bf 8f6f 	isb	sy
 800c892:	f3bf 8f4f 	dsb	sy
 800c896:	60bb      	str	r3, [r7, #8]
}
 800c898:	bf00      	nop
 800c89a:	e7fe      	b.n	800c89a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8a0:	1e5a      	subs	r2, r3, #1
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d02c      	beq.n	800c90c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d128      	bne.n	800c90c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	3304      	adds	r3, #4
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7fe f9a4 	bl	800ac0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8dc:	4b0f      	ldr	r3, [pc, #60]	; (800c91c <xTaskPriorityDisinherit+0xd4>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d903      	bls.n	800c8ec <xTaskPriorityDisinherit+0xa4>
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e8:	4a0c      	ldr	r2, [pc, #48]	; (800c91c <xTaskPriorityDisinherit+0xd4>)
 800c8ea:	6013      	str	r3, [r2, #0]
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	4413      	add	r3, r2
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	4a09      	ldr	r2, [pc, #36]	; (800c920 <xTaskPriorityDisinherit+0xd8>)
 800c8fa:	441a      	add	r2, r3
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	3304      	adds	r3, #4
 800c900:	4619      	mov	r1, r3
 800c902:	4610      	mov	r0, r2
 800c904:	f7fe f925 	bl	800ab52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c908:	2301      	movs	r3, #1
 800c90a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c90c:	697b      	ldr	r3, [r7, #20]
	}
 800c90e:	4618      	mov	r0, r3
 800c910:	3718      	adds	r7, #24
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	200027b8 	.word	0x200027b8
 800c91c:	20002c94 	.word	0x20002c94
 800c920:	200027bc 	.word	0x200027bc

0800c924 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c924:	b580      	push	{r7, lr}
 800c926:	b088      	sub	sp, #32
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c932:	2301      	movs	r3, #1
 800c934:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d06a      	beq.n	800ca12 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c940:	2b00      	cmp	r3, #0
 800c942:	d10a      	bne.n	800c95a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c948:	f383 8811 	msr	BASEPRI, r3
 800c94c:	f3bf 8f6f 	isb	sy
 800c950:	f3bf 8f4f 	dsb	sy
 800c954:	60fb      	str	r3, [r7, #12]
}
 800c956:	bf00      	nop
 800c958:	e7fe      	b.n	800c958 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c95e:	683a      	ldr	r2, [r7, #0]
 800c960:	429a      	cmp	r2, r3
 800c962:	d902      	bls.n	800c96a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	61fb      	str	r3, [r7, #28]
 800c968:	e002      	b.n	800c970 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c96a:	69bb      	ldr	r3, [r7, #24]
 800c96c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c96e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c970:	69bb      	ldr	r3, [r7, #24]
 800c972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c974:	69fa      	ldr	r2, [r7, #28]
 800c976:	429a      	cmp	r2, r3
 800c978:	d04b      	beq.n	800ca12 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c97a:	69bb      	ldr	r3, [r7, #24]
 800c97c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c97e:	697a      	ldr	r2, [r7, #20]
 800c980:	429a      	cmp	r2, r3
 800c982:	d146      	bne.n	800ca12 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c984:	4b25      	ldr	r3, [pc, #148]	; (800ca1c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	69ba      	ldr	r2, [r7, #24]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d10a      	bne.n	800c9a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c992:	f383 8811 	msr	BASEPRI, r3
 800c996:	f3bf 8f6f 	isb	sy
 800c99a:	f3bf 8f4f 	dsb	sy
 800c99e:	60bb      	str	r3, [r7, #8]
}
 800c9a0:	bf00      	nop
 800c9a2:	e7fe      	b.n	800c9a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c9a4:	69bb      	ldr	r3, [r7, #24]
 800c9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c9aa:	69bb      	ldr	r3, [r7, #24]
 800c9ac:	69fa      	ldr	r2, [r7, #28]
 800c9ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	699b      	ldr	r3, [r3, #24]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	db04      	blt.n	800c9c2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	6959      	ldr	r1, [r3, #20]
 800c9c6:	693a      	ldr	r2, [r7, #16]
 800c9c8:	4613      	mov	r3, r2
 800c9ca:	009b      	lsls	r3, r3, #2
 800c9cc:	4413      	add	r3, r2
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	4a13      	ldr	r2, [pc, #76]	; (800ca20 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c9d2:	4413      	add	r3, r2
 800c9d4:	4299      	cmp	r1, r3
 800c9d6:	d11c      	bne.n	800ca12 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	3304      	adds	r3, #4
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f7fe f915 	bl	800ac0c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c9e2:	69bb      	ldr	r3, [r7, #24]
 800c9e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9e6:	4b0f      	ldr	r3, [pc, #60]	; (800ca24 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d903      	bls.n	800c9f6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c9ee:	69bb      	ldr	r3, [r7, #24]
 800c9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f2:	4a0c      	ldr	r2, [pc, #48]	; (800ca24 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c9f4:	6013      	str	r3, [r2, #0]
 800c9f6:	69bb      	ldr	r3, [r7, #24]
 800c9f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9fa:	4613      	mov	r3, r2
 800c9fc:	009b      	lsls	r3, r3, #2
 800c9fe:	4413      	add	r3, r2
 800ca00:	009b      	lsls	r3, r3, #2
 800ca02:	4a07      	ldr	r2, [pc, #28]	; (800ca20 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ca04:	441a      	add	r2, r3
 800ca06:	69bb      	ldr	r3, [r7, #24]
 800ca08:	3304      	adds	r3, #4
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	4610      	mov	r0, r2
 800ca0e:	f7fe f8a0 	bl	800ab52 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ca12:	bf00      	nop
 800ca14:	3720      	adds	r7, #32
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	200027b8 	.word	0x200027b8
 800ca20:	200027bc 	.word	0x200027bc
 800ca24:	20002c94 	.word	0x20002c94

0800ca28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ca28:	b480      	push	{r7}
 800ca2a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ca2c:	4b07      	ldr	r3, [pc, #28]	; (800ca4c <pvTaskIncrementMutexHeldCount+0x24>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d004      	beq.n	800ca3e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ca34:	4b05      	ldr	r3, [pc, #20]	; (800ca4c <pvTaskIncrementMutexHeldCount+0x24>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ca3a:	3201      	adds	r2, #1
 800ca3c:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 800ca3e:	4b03      	ldr	r3, [pc, #12]	; (800ca4c <pvTaskIncrementMutexHeldCount+0x24>)
 800ca40:	681b      	ldr	r3, [r3, #0]
	}
 800ca42:	4618      	mov	r0, r3
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr
 800ca4c:	200027b8 	.word	0x200027b8

0800ca50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b084      	sub	sp, #16
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ca5a:	4b21      	ldr	r3, [pc, #132]	; (800cae0 <prvAddCurrentTaskToDelayedList+0x90>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca60:	4b20      	ldr	r3, [pc, #128]	; (800cae4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	3304      	adds	r3, #4
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7fe f8d0 	bl	800ac0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca72:	d10a      	bne.n	800ca8a <prvAddCurrentTaskToDelayedList+0x3a>
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d007      	beq.n	800ca8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca7a:	4b1a      	ldr	r3, [pc, #104]	; (800cae4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	3304      	adds	r3, #4
 800ca80:	4619      	mov	r1, r3
 800ca82:	4819      	ldr	r0, [pc, #100]	; (800cae8 <prvAddCurrentTaskToDelayedList+0x98>)
 800ca84:	f7fe f865 	bl	800ab52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ca88:	e026      	b.n	800cad8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ca8a:	68fa      	ldr	r2, [r7, #12]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	4413      	add	r3, r2
 800ca90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ca92:	4b14      	ldr	r3, [pc, #80]	; (800cae4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	68ba      	ldr	r2, [r7, #8]
 800ca98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ca9a:	68ba      	ldr	r2, [r7, #8]
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d209      	bcs.n	800cab6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800caa2:	4b12      	ldr	r3, [pc, #72]	; (800caec <prvAddCurrentTaskToDelayedList+0x9c>)
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	4b0f      	ldr	r3, [pc, #60]	; (800cae4 <prvAddCurrentTaskToDelayedList+0x94>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	3304      	adds	r3, #4
 800caac:	4619      	mov	r1, r3
 800caae:	4610      	mov	r0, r2
 800cab0:	f7fe f873 	bl	800ab9a <vListInsert>
}
 800cab4:	e010      	b.n	800cad8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cab6:	4b0e      	ldr	r3, [pc, #56]	; (800caf0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	4b0a      	ldr	r3, [pc, #40]	; (800cae4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	3304      	adds	r3, #4
 800cac0:	4619      	mov	r1, r3
 800cac2:	4610      	mov	r0, r2
 800cac4:	f7fe f869 	bl	800ab9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cac8:	4b0a      	ldr	r3, [pc, #40]	; (800caf4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	68ba      	ldr	r2, [r7, #8]
 800cace:	429a      	cmp	r2, r3
 800cad0:	d202      	bcs.n	800cad8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cad2:	4a08      	ldr	r2, [pc, #32]	; (800caf4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	6013      	str	r3, [r2, #0]
}
 800cad8:	bf00      	nop
 800cada:	3710      	adds	r7, #16
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	20002c90 	.word	0x20002c90
 800cae4:	200027b8 	.word	0x200027b8
 800cae8:	20002c78 	.word	0x20002c78
 800caec:	20002c48 	.word	0x20002c48
 800caf0:	20002c44 	.word	0x20002c44
 800caf4:	20002cac 	.word	0x20002cac

0800caf8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b08a      	sub	sp, #40	; 0x28
 800cafc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cafe:	2300      	movs	r3, #0
 800cb00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cb02:	f000 fba1 	bl	800d248 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cb06:	4b1c      	ldr	r3, [pc, #112]	; (800cb78 <xTimerCreateTimerTask+0x80>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d021      	beq.n	800cb52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cb12:	2300      	movs	r3, #0
 800cb14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cb16:	1d3a      	adds	r2, r7, #4
 800cb18:	f107 0108 	add.w	r1, r7, #8
 800cb1c:	f107 030c 	add.w	r3, r7, #12
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7fd ffcf 	bl	800aac4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cb26:	6879      	ldr	r1, [r7, #4]
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	68fa      	ldr	r2, [r7, #12]
 800cb2c:	9202      	str	r2, [sp, #8]
 800cb2e:	9301      	str	r3, [sp, #4]
 800cb30:	2302      	movs	r3, #2
 800cb32:	9300      	str	r3, [sp, #0]
 800cb34:	2300      	movs	r3, #0
 800cb36:	460a      	mov	r2, r1
 800cb38:	4910      	ldr	r1, [pc, #64]	; (800cb7c <xTimerCreateTimerTask+0x84>)
 800cb3a:	4811      	ldr	r0, [pc, #68]	; (800cb80 <xTimerCreateTimerTask+0x88>)
 800cb3c:	f7fe ff26 	bl	800b98c <xTaskCreateStatic>
 800cb40:	4603      	mov	r3, r0
 800cb42:	4a10      	ldr	r2, [pc, #64]	; (800cb84 <xTimerCreateTimerTask+0x8c>)
 800cb44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cb46:	4b0f      	ldr	r3, [pc, #60]	; (800cb84 <xTimerCreateTimerTask+0x8c>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d001      	beq.n	800cb52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d10a      	bne.n	800cb6e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5c:	f383 8811 	msr	BASEPRI, r3
 800cb60:	f3bf 8f6f 	isb	sy
 800cb64:	f3bf 8f4f 	dsb	sy
 800cb68:	613b      	str	r3, [r7, #16]
}
 800cb6a:	bf00      	nop
 800cb6c:	e7fe      	b.n	800cb6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cb6e:	697b      	ldr	r3, [r7, #20]
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3718      	adds	r7, #24
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}
 800cb78:	20002ce8 	.word	0x20002ce8
 800cb7c:	0800e278 	.word	0x0800e278
 800cb80:	0800cdf1 	.word	0x0800cdf1
 800cb84:	20002cec 	.word	0x20002cec

0800cb88 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b088      	sub	sp, #32
 800cb8c:	af02      	add	r7, sp, #8
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	60b9      	str	r1, [r7, #8]
 800cb92:	607a      	str	r2, [r7, #4]
 800cb94:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800cb96:	202c      	movs	r0, #44	; 0x2c
 800cb98:	f000 fe06 	bl	800d7a8 <pvPortMalloc>
 800cb9c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00d      	beq.n	800cbc0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	2200      	movs	r2, #0
 800cba8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	9301      	str	r3, [sp, #4]
 800cbb0:	6a3b      	ldr	r3, [r7, #32]
 800cbb2:	9300      	str	r3, [sp, #0]
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	68b9      	ldr	r1, [r7, #8]
 800cbba:	68f8      	ldr	r0, [r7, #12]
 800cbbc:	f000 f843 	bl	800cc46 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800cbc0:	697b      	ldr	r3, [r7, #20]
	}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3718      	adds	r7, #24
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}

0800cbca <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800cbca:	b580      	push	{r7, lr}
 800cbcc:	b08a      	sub	sp, #40	; 0x28
 800cbce:	af02      	add	r7, sp, #8
 800cbd0:	60f8      	str	r0, [r7, #12]
 800cbd2:	60b9      	str	r1, [r7, #8]
 800cbd4:	607a      	str	r2, [r7, #4]
 800cbd6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800cbd8:	232c      	movs	r3, #44	; 0x2c
 800cbda:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	2b2c      	cmp	r3, #44	; 0x2c
 800cbe0:	d00a      	beq.n	800cbf8 <xTimerCreateStatic+0x2e>
	__asm volatile
 800cbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe6:	f383 8811 	msr	BASEPRI, r3
 800cbea:	f3bf 8f6f 	isb	sy
 800cbee:	f3bf 8f4f 	dsb	sy
 800cbf2:	61bb      	str	r3, [r7, #24]
}
 800cbf4:	bf00      	nop
 800cbf6:	e7fe      	b.n	800cbf6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cbf8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800cbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d10a      	bne.n	800cc16 <xTimerCreateStatic+0x4c>
	__asm volatile
 800cc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc04:	f383 8811 	msr	BASEPRI, r3
 800cc08:	f3bf 8f6f 	isb	sy
 800cc0c:	f3bf 8f4f 	dsb	sy
 800cc10:	617b      	str	r3, [r7, #20]
}
 800cc12:	bf00      	nop
 800cc14:	e7fe      	b.n	800cc14 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800cc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc18:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800cc1a:	69fb      	ldr	r3, [r7, #28]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d00d      	beq.n	800cc3c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	2202      	movs	r2, #2
 800cc24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cc28:	69fb      	ldr	r3, [r7, #28]
 800cc2a:	9301      	str	r3, [sp, #4]
 800cc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2e:	9300      	str	r3, [sp, #0]
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	68b9      	ldr	r1, [r7, #8]
 800cc36:	68f8      	ldr	r0, [r7, #12]
 800cc38:	f000 f805 	bl	800cc46 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800cc3c:	69fb      	ldr	r3, [r7, #28]
	}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3720      	adds	r7, #32
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b086      	sub	sp, #24
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	60f8      	str	r0, [r7, #12]
 800cc4e:	60b9      	str	r1, [r7, #8]
 800cc50:	607a      	str	r2, [r7, #4]
 800cc52:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d10a      	bne.n	800cc70 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800cc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5e:	f383 8811 	msr	BASEPRI, r3
 800cc62:	f3bf 8f6f 	isb	sy
 800cc66:	f3bf 8f4f 	dsb	sy
 800cc6a:	617b      	str	r3, [r7, #20]
}
 800cc6c:	bf00      	nop
 800cc6e:	e7fe      	b.n	800cc6e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800cc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d01e      	beq.n	800ccb4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800cc76:	f000 fae7 	bl	800d248 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800cc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7c:	68fa      	ldr	r2, [r7, #12]
 800cc7e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800cc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc82:	68ba      	ldr	r2, [r7, #8]
 800cc84:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800cc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc88:	683a      	ldr	r2, [r7, #0]
 800cc8a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800cc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8e:	6a3a      	ldr	r2, [r7, #32]
 800cc90:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800cc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc94:	3304      	adds	r3, #4
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fd ff4e 	bl	800ab38 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d008      	beq.n	800ccb4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800cca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cca8:	f043 0304 	orr.w	r3, r3, #4
 800ccac:	b2da      	uxtb	r2, r3
 800ccae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ccb4:	bf00      	nop
 800ccb6:	3718      	adds	r7, #24
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}

0800ccbc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b08a      	sub	sp, #40	; 0x28
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	607a      	str	r2, [r7, #4]
 800ccc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ccca:	2300      	movs	r3, #0
 800cccc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d10a      	bne.n	800ccea <xTimerGenericCommand+0x2e>
	__asm volatile
 800ccd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd8:	f383 8811 	msr	BASEPRI, r3
 800ccdc:	f3bf 8f6f 	isb	sy
 800cce0:	f3bf 8f4f 	dsb	sy
 800cce4:	623b      	str	r3, [r7, #32]
}
 800cce6:	bf00      	nop
 800cce8:	e7fe      	b.n	800cce8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ccea:	4b1a      	ldr	r3, [pc, #104]	; (800cd54 <xTimerGenericCommand+0x98>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d02a      	beq.n	800cd48 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	2b05      	cmp	r3, #5
 800cd02:	dc18      	bgt.n	800cd36 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cd04:	f7ff fd1a 	bl	800c73c <xTaskGetSchedulerState>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b02      	cmp	r3, #2
 800cd0c:	d109      	bne.n	800cd22 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cd0e:	4b11      	ldr	r3, [pc, #68]	; (800cd54 <xTimerGenericCommand+0x98>)
 800cd10:	6818      	ldr	r0, [r3, #0]
 800cd12:	f107 0110 	add.w	r1, r7, #16
 800cd16:	2300      	movs	r3, #0
 800cd18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd1a:	f7fe f92b 	bl	800af74 <xQueueGenericSend>
 800cd1e:	6278      	str	r0, [r7, #36]	; 0x24
 800cd20:	e012      	b.n	800cd48 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cd22:	4b0c      	ldr	r3, [pc, #48]	; (800cd54 <xTimerGenericCommand+0x98>)
 800cd24:	6818      	ldr	r0, [r3, #0]
 800cd26:	f107 0110 	add.w	r1, r7, #16
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	f7fe f921 	bl	800af74 <xQueueGenericSend>
 800cd32:	6278      	str	r0, [r7, #36]	; 0x24
 800cd34:	e008      	b.n	800cd48 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cd36:	4b07      	ldr	r3, [pc, #28]	; (800cd54 <xTimerGenericCommand+0x98>)
 800cd38:	6818      	ldr	r0, [r3, #0]
 800cd3a:	f107 0110 	add.w	r1, r7, #16
 800cd3e:	2300      	movs	r3, #0
 800cd40:	683a      	ldr	r2, [r7, #0]
 800cd42:	f7fe fa15 	bl	800b170 <xQueueGenericSendFromISR>
 800cd46:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3728      	adds	r7, #40	; 0x28
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	20002ce8 	.word	0x20002ce8

0800cd58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b088      	sub	sp, #32
 800cd5c:	af02      	add	r7, sp, #8
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd62:	4b22      	ldr	r3, [pc, #136]	; (800cdec <prvProcessExpiredTimer+0x94>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	68db      	ldr	r3, [r3, #12]
 800cd6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	3304      	adds	r3, #4
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fd ff4b 	bl	800ac0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd7c:	f003 0304 	and.w	r3, r3, #4
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d022      	beq.n	800cdca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	699a      	ldr	r2, [r3, #24]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	18d1      	adds	r1, r2, r3
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	683a      	ldr	r2, [r7, #0]
 800cd90:	6978      	ldr	r0, [r7, #20]
 800cd92:	f000 f8d1 	bl	800cf38 <prvInsertTimerInActiveList>
 800cd96:	4603      	mov	r3, r0
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d01f      	beq.n	800cddc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	9300      	str	r3, [sp, #0]
 800cda0:	2300      	movs	r3, #0
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	2100      	movs	r1, #0
 800cda6:	6978      	ldr	r0, [r7, #20]
 800cda8:	f7ff ff88 	bl	800ccbc <xTimerGenericCommand>
 800cdac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d113      	bne.n	800cddc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb8:	f383 8811 	msr	BASEPRI, r3
 800cdbc:	f3bf 8f6f 	isb	sy
 800cdc0:	f3bf 8f4f 	dsb	sy
 800cdc4:	60fb      	str	r3, [r7, #12]
}
 800cdc6:	bf00      	nop
 800cdc8:	e7fe      	b.n	800cdc8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdd0:	f023 0301 	bic.w	r3, r3, #1
 800cdd4:	b2da      	uxtb	r2, r3
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	6a1b      	ldr	r3, [r3, #32]
 800cde0:	6978      	ldr	r0, [r7, #20]
 800cde2:	4798      	blx	r3
}
 800cde4:	bf00      	nop
 800cde6:	3718      	adds	r7, #24
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	20002ce0 	.word	0x20002ce0

0800cdf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cdf8:	f107 0308 	add.w	r3, r7, #8
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f000 f857 	bl	800ceb0 <prvGetNextExpireTime>
 800ce02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	4619      	mov	r1, r3
 800ce08:	68f8      	ldr	r0, [r7, #12]
 800ce0a:	f000 f803 	bl	800ce14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ce0e:	f000 f8d5 	bl	800cfbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ce12:	e7f1      	b.n	800cdf8 <prvTimerTask+0x8>

0800ce14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b084      	sub	sp, #16
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ce1e:	f7ff f88f 	bl	800bf40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ce22:	f107 0308 	add.w	r3, r7, #8
 800ce26:	4618      	mov	r0, r3
 800ce28:	f000 f866 	bl	800cef8 <prvSampleTimeNow>
 800ce2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d130      	bne.n	800ce96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d10a      	bne.n	800ce50 <prvProcessTimerOrBlockTask+0x3c>
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d806      	bhi.n	800ce50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ce42:	f7ff f88b 	bl	800bf5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ce46:	68f9      	ldr	r1, [r7, #12]
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f7ff ff85 	bl	800cd58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ce4e:	e024      	b.n	800ce9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d008      	beq.n	800ce68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ce56:	4b13      	ldr	r3, [pc, #76]	; (800cea4 <prvProcessTimerOrBlockTask+0x90>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d101      	bne.n	800ce64 <prvProcessTimerOrBlockTask+0x50>
 800ce60:	2301      	movs	r3, #1
 800ce62:	e000      	b.n	800ce66 <prvProcessTimerOrBlockTask+0x52>
 800ce64:	2300      	movs	r3, #0
 800ce66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ce68:	4b0f      	ldr	r3, [pc, #60]	; (800cea8 <prvProcessTimerOrBlockTask+0x94>)
 800ce6a:	6818      	ldr	r0, [r3, #0]
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	1ad3      	subs	r3, r2, r3
 800ce72:	683a      	ldr	r2, [r7, #0]
 800ce74:	4619      	mov	r1, r3
 800ce76:	f7fe fd55 	bl	800b924 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ce7a:	f7ff f86f 	bl	800bf5c <xTaskResumeAll>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d10a      	bne.n	800ce9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ce84:	4b09      	ldr	r3, [pc, #36]	; (800ceac <prvProcessTimerOrBlockTask+0x98>)
 800ce86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce8a:	601a      	str	r2, [r3, #0]
 800ce8c:	f3bf 8f4f 	dsb	sy
 800ce90:	f3bf 8f6f 	isb	sy
}
 800ce94:	e001      	b.n	800ce9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ce96:	f7ff f861 	bl	800bf5c <xTaskResumeAll>
}
 800ce9a:	bf00      	nop
 800ce9c:	3710      	adds	r7, #16
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	20002ce4 	.word	0x20002ce4
 800cea8:	20002ce8 	.word	0x20002ce8
 800ceac:	e000ed04 	.word	0xe000ed04

0800ceb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b085      	sub	sp, #20
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ceb8:	4b0e      	ldr	r3, [pc, #56]	; (800cef4 <prvGetNextExpireTime+0x44>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d101      	bne.n	800cec6 <prvGetNextExpireTime+0x16>
 800cec2:	2201      	movs	r2, #1
 800cec4:	e000      	b.n	800cec8 <prvGetNextExpireTime+0x18>
 800cec6:	2200      	movs	r2, #0
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d105      	bne.n	800cee0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ced4:	4b07      	ldr	r3, [pc, #28]	; (800cef4 <prvGetNextExpireTime+0x44>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	60fb      	str	r3, [r7, #12]
 800cede:	e001      	b.n	800cee4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cee0:	2300      	movs	r3, #0
 800cee2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cee4:	68fb      	ldr	r3, [r7, #12]
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3714      	adds	r7, #20
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr
 800cef2:	bf00      	nop
 800cef4:	20002ce0 	.word	0x20002ce0

0800cef8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cf00:	f7ff f8ca 	bl	800c098 <xTaskGetTickCount>
 800cf04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cf06:	4b0b      	ldr	r3, [pc, #44]	; (800cf34 <prvSampleTimeNow+0x3c>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	68fa      	ldr	r2, [r7, #12]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d205      	bcs.n	800cf1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cf10:	f000 f936 	bl	800d180 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2201      	movs	r2, #1
 800cf18:	601a      	str	r2, [r3, #0]
 800cf1a:	e002      	b.n	800cf22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cf22:	4a04      	ldr	r2, [pc, #16]	; (800cf34 <prvSampleTimeNow+0x3c>)
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cf28:	68fb      	ldr	r3, [r7, #12]
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3710      	adds	r7, #16
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	20002cf0 	.word	0x20002cf0

0800cf38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b086      	sub	sp, #24
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	60b9      	str	r1, [r7, #8]
 800cf42:	607a      	str	r2, [r7, #4]
 800cf44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cf46:	2300      	movs	r3, #0
 800cf48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	68ba      	ldr	r2, [r7, #8]
 800cf4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	68fa      	ldr	r2, [r7, #12]
 800cf54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cf56:	68ba      	ldr	r2, [r7, #8]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d812      	bhi.n	800cf84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	1ad2      	subs	r2, r2, r3
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	699b      	ldr	r3, [r3, #24]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d302      	bcc.n	800cf72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	617b      	str	r3, [r7, #20]
 800cf70:	e01b      	b.n	800cfaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cf72:	4b10      	ldr	r3, [pc, #64]	; (800cfb4 <prvInsertTimerInActiveList+0x7c>)
 800cf74:	681a      	ldr	r2, [r3, #0]
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	3304      	adds	r3, #4
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	4610      	mov	r0, r2
 800cf7e:	f7fd fe0c 	bl	800ab9a <vListInsert>
 800cf82:	e012      	b.n	800cfaa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cf84:	687a      	ldr	r2, [r7, #4]
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d206      	bcs.n	800cf9a <prvInsertTimerInActiveList+0x62>
 800cf8c:	68ba      	ldr	r2, [r7, #8]
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d302      	bcc.n	800cf9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cf94:	2301      	movs	r3, #1
 800cf96:	617b      	str	r3, [r7, #20]
 800cf98:	e007      	b.n	800cfaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf9a:	4b07      	ldr	r3, [pc, #28]	; (800cfb8 <prvInsertTimerInActiveList+0x80>)
 800cf9c:	681a      	ldr	r2, [r3, #0]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	3304      	adds	r3, #4
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	4610      	mov	r0, r2
 800cfa6:	f7fd fdf8 	bl	800ab9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cfaa:	697b      	ldr	r3, [r7, #20]
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3718      	adds	r7, #24
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	20002ce4 	.word	0x20002ce4
 800cfb8:	20002ce0 	.word	0x20002ce0

0800cfbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b08e      	sub	sp, #56	; 0x38
 800cfc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cfc2:	e0ca      	b.n	800d15a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	da18      	bge.n	800cffc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cfca:	1d3b      	adds	r3, r7, #4
 800cfcc:	3304      	adds	r3, #4
 800cfce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d10a      	bne.n	800cfec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cfd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfda:	f383 8811 	msr	BASEPRI, r3
 800cfde:	f3bf 8f6f 	isb	sy
 800cfe2:	f3bf 8f4f 	dsb	sy
 800cfe6:	61fb      	str	r3, [r7, #28]
}
 800cfe8:	bf00      	nop
 800cfea:	e7fe      	b.n	800cfea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cff2:	6850      	ldr	r0, [r2, #4]
 800cff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cff6:	6892      	ldr	r2, [r2, #8]
 800cff8:	4611      	mov	r1, r2
 800cffa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	f2c0 80aa 	blt.w	800d158 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d00a:	695b      	ldr	r3, [r3, #20]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d004      	beq.n	800d01a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d012:	3304      	adds	r3, #4
 800d014:	4618      	mov	r0, r3
 800d016:	f7fd fdf9 	bl	800ac0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d01a:	463b      	mov	r3, r7
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7ff ff6b 	bl	800cef8 <prvSampleTimeNow>
 800d022:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2b09      	cmp	r3, #9
 800d028:	f200 8097 	bhi.w	800d15a <prvProcessReceivedCommands+0x19e>
 800d02c:	a201      	add	r2, pc, #4	; (adr r2, 800d034 <prvProcessReceivedCommands+0x78>)
 800d02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d032:	bf00      	nop
 800d034:	0800d05d 	.word	0x0800d05d
 800d038:	0800d05d 	.word	0x0800d05d
 800d03c:	0800d05d 	.word	0x0800d05d
 800d040:	0800d0d1 	.word	0x0800d0d1
 800d044:	0800d0e5 	.word	0x0800d0e5
 800d048:	0800d12f 	.word	0x0800d12f
 800d04c:	0800d05d 	.word	0x0800d05d
 800d050:	0800d05d 	.word	0x0800d05d
 800d054:	0800d0d1 	.word	0x0800d0d1
 800d058:	0800d0e5 	.word	0x0800d0e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d062:	f043 0301 	orr.w	r3, r3, #1
 800d066:	b2da      	uxtb	r2, r3
 800d068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d06e:	68ba      	ldr	r2, [r7, #8]
 800d070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d072:	699b      	ldr	r3, [r3, #24]
 800d074:	18d1      	adds	r1, r2, r3
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d07a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d07c:	f7ff ff5c 	bl	800cf38 <prvInsertTimerInActiveList>
 800d080:	4603      	mov	r3, r0
 800d082:	2b00      	cmp	r3, #0
 800d084:	d069      	beq.n	800d15a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d088:	6a1b      	ldr	r3, [r3, #32]
 800d08a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d08c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d090:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d094:	f003 0304 	and.w	r3, r3, #4
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d05e      	beq.n	800d15a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d09c:	68ba      	ldr	r2, [r7, #8]
 800d09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a0:	699b      	ldr	r3, [r3, #24]
 800d0a2:	441a      	add	r2, r3
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	9300      	str	r3, [sp, #0]
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	2100      	movs	r1, #0
 800d0ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0ae:	f7ff fe05 	bl	800ccbc <xTimerGenericCommand>
 800d0b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d0b4:	6a3b      	ldr	r3, [r7, #32]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d14f      	bne.n	800d15a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0be:	f383 8811 	msr	BASEPRI, r3
 800d0c2:	f3bf 8f6f 	isb	sy
 800d0c6:	f3bf 8f4f 	dsb	sy
 800d0ca:	61bb      	str	r3, [r7, #24]
}
 800d0cc:	bf00      	nop
 800d0ce:	e7fe      	b.n	800d0ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0d6:	f023 0301 	bic.w	r3, r3, #1
 800d0da:	b2da      	uxtb	r2, r3
 800d0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d0e2:	e03a      	b.n	800d15a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0ea:	f043 0301 	orr.w	r3, r3, #1
 800d0ee:	b2da      	uxtb	r2, r3
 800d0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d0f6:	68ba      	ldr	r2, [r7, #8]
 800d0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fe:	699b      	ldr	r3, [r3, #24]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d10a      	bne.n	800d11a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d108:	f383 8811 	msr	BASEPRI, r3
 800d10c:	f3bf 8f6f 	isb	sy
 800d110:	f3bf 8f4f 	dsb	sy
 800d114:	617b      	str	r3, [r7, #20]
}
 800d116:	bf00      	nop
 800d118:	e7fe      	b.n	800d118 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11c:	699a      	ldr	r2, [r3, #24]
 800d11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d120:	18d1      	adds	r1, r2, r3
 800d122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d128:	f7ff ff06 	bl	800cf38 <prvInsertTimerInActiveList>
					break;
 800d12c:	e015      	b.n	800d15a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d130:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d134:	f003 0302 	and.w	r3, r3, #2
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d103      	bne.n	800d144 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d13c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d13e:	f000 fbff 	bl	800d940 <vPortFree>
 800d142:	e00a      	b.n	800d15a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d146:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d14a:	f023 0301 	bic.w	r3, r3, #1
 800d14e:	b2da      	uxtb	r2, r3
 800d150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d152:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d156:	e000      	b.n	800d15a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d158:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d15a:	4b08      	ldr	r3, [pc, #32]	; (800d17c <prvProcessReceivedCommands+0x1c0>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	1d39      	adds	r1, r7, #4
 800d160:	2200      	movs	r2, #0
 800d162:	4618      	mov	r0, r3
 800d164:	f7fe f8a0 	bl	800b2a8 <xQueueReceive>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	f47f af2a 	bne.w	800cfc4 <prvProcessReceivedCommands+0x8>
	}
}
 800d170:	bf00      	nop
 800d172:	bf00      	nop
 800d174:	3730      	adds	r7, #48	; 0x30
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	20002ce8 	.word	0x20002ce8

0800d180 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b088      	sub	sp, #32
 800d184:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d186:	e048      	b.n	800d21a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d188:	4b2d      	ldr	r3, [pc, #180]	; (800d240 <prvSwitchTimerLists+0xc0>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	68db      	ldr	r3, [r3, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d192:	4b2b      	ldr	r3, [pc, #172]	; (800d240 <prvSwitchTimerLists+0xc0>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	68db      	ldr	r3, [r3, #12]
 800d19a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	3304      	adds	r3, #4
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7fd fd33 	bl	800ac0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	6a1b      	ldr	r3, [r3, #32]
 800d1aa:	68f8      	ldr	r0, [r7, #12]
 800d1ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1b4:	f003 0304 	and.w	r3, r3, #4
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d02e      	beq.n	800d21a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	699b      	ldr	r3, [r3, #24]
 800d1c0:	693a      	ldr	r2, [r7, #16]
 800d1c2:	4413      	add	r3, r2
 800d1c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d1c6:	68ba      	ldr	r2, [r7, #8]
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d90e      	bls.n	800d1ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	68ba      	ldr	r2, [r7, #8]
 800d1d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	68fa      	ldr	r2, [r7, #12]
 800d1d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d1da:	4b19      	ldr	r3, [pc, #100]	; (800d240 <prvSwitchTimerLists+0xc0>)
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	3304      	adds	r3, #4
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	4610      	mov	r0, r2
 800d1e6:	f7fd fcd8 	bl	800ab9a <vListInsert>
 800d1ea:	e016      	b.n	800d21a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	9300      	str	r3, [sp, #0]
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	693a      	ldr	r2, [r7, #16]
 800d1f4:	2100      	movs	r1, #0
 800d1f6:	68f8      	ldr	r0, [r7, #12]
 800d1f8:	f7ff fd60 	bl	800ccbc <xTimerGenericCommand>
 800d1fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d10a      	bne.n	800d21a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d208:	f383 8811 	msr	BASEPRI, r3
 800d20c:	f3bf 8f6f 	isb	sy
 800d210:	f3bf 8f4f 	dsb	sy
 800d214:	603b      	str	r3, [r7, #0]
}
 800d216:	bf00      	nop
 800d218:	e7fe      	b.n	800d218 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d21a:	4b09      	ldr	r3, [pc, #36]	; (800d240 <prvSwitchTimerLists+0xc0>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d1b1      	bne.n	800d188 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d224:	4b06      	ldr	r3, [pc, #24]	; (800d240 <prvSwitchTimerLists+0xc0>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d22a:	4b06      	ldr	r3, [pc, #24]	; (800d244 <prvSwitchTimerLists+0xc4>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	4a04      	ldr	r2, [pc, #16]	; (800d240 <prvSwitchTimerLists+0xc0>)
 800d230:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d232:	4a04      	ldr	r2, [pc, #16]	; (800d244 <prvSwitchTimerLists+0xc4>)
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	6013      	str	r3, [r2, #0]
}
 800d238:	bf00      	nop
 800d23a:	3718      	adds	r7, #24
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	20002ce0 	.word	0x20002ce0
 800d244:	20002ce4 	.word	0x20002ce4

0800d248 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d24e:	f000 f989 	bl	800d564 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d252:	4b15      	ldr	r3, [pc, #84]	; (800d2a8 <prvCheckForValidListAndQueue+0x60>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d120      	bne.n	800d29c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d25a:	4814      	ldr	r0, [pc, #80]	; (800d2ac <prvCheckForValidListAndQueue+0x64>)
 800d25c:	f7fd fc4c 	bl	800aaf8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d260:	4813      	ldr	r0, [pc, #76]	; (800d2b0 <prvCheckForValidListAndQueue+0x68>)
 800d262:	f7fd fc49 	bl	800aaf8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d266:	4b13      	ldr	r3, [pc, #76]	; (800d2b4 <prvCheckForValidListAndQueue+0x6c>)
 800d268:	4a10      	ldr	r2, [pc, #64]	; (800d2ac <prvCheckForValidListAndQueue+0x64>)
 800d26a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d26c:	4b12      	ldr	r3, [pc, #72]	; (800d2b8 <prvCheckForValidListAndQueue+0x70>)
 800d26e:	4a10      	ldr	r2, [pc, #64]	; (800d2b0 <prvCheckForValidListAndQueue+0x68>)
 800d270:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d272:	2300      	movs	r3, #0
 800d274:	9300      	str	r3, [sp, #0]
 800d276:	4b11      	ldr	r3, [pc, #68]	; (800d2bc <prvCheckForValidListAndQueue+0x74>)
 800d278:	4a11      	ldr	r2, [pc, #68]	; (800d2c0 <prvCheckForValidListAndQueue+0x78>)
 800d27a:	2110      	movs	r1, #16
 800d27c:	200a      	movs	r0, #10
 800d27e:	f7fd fd57 	bl	800ad30 <xQueueGenericCreateStatic>
 800d282:	4603      	mov	r3, r0
 800d284:	4a08      	ldr	r2, [pc, #32]	; (800d2a8 <prvCheckForValidListAndQueue+0x60>)
 800d286:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d288:	4b07      	ldr	r3, [pc, #28]	; (800d2a8 <prvCheckForValidListAndQueue+0x60>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d005      	beq.n	800d29c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d290:	4b05      	ldr	r3, [pc, #20]	; (800d2a8 <prvCheckForValidListAndQueue+0x60>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	490b      	ldr	r1, [pc, #44]	; (800d2c4 <prvCheckForValidListAndQueue+0x7c>)
 800d296:	4618      	mov	r0, r3
 800d298:	f7fe fb1a 	bl	800b8d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d29c:	f000 f992 	bl	800d5c4 <vPortExitCritical>
}
 800d2a0:	bf00      	nop
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	20002ce8 	.word	0x20002ce8
 800d2ac:	20002cb8 	.word	0x20002cb8
 800d2b0:	20002ccc 	.word	0x20002ccc
 800d2b4:	20002ce0 	.word	0x20002ce0
 800d2b8:	20002ce4 	.word	0x20002ce4
 800d2bc:	20002d94 	.word	0x20002d94
 800d2c0:	20002cf4 	.word	0x20002cf4
 800d2c4:	0800e280 	.word	0x0800e280

0800d2c8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b086      	sub	sp, #24
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d10a      	bne.n	800d2f0 <pvTimerGetTimerID+0x28>
	__asm volatile
 800d2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2de:	f383 8811 	msr	BASEPRI, r3
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	60fb      	str	r3, [r7, #12]
}
 800d2ec:	bf00      	nop
 800d2ee:	e7fe      	b.n	800d2ee <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800d2f0:	f000 f938 	bl	800d564 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	69db      	ldr	r3, [r3, #28]
 800d2f8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d2fa:	f000 f963 	bl	800d5c4 <vPortExitCritical>

	return pvReturn;
 800d2fe:	693b      	ldr	r3, [r7, #16]
}
 800d300:	4618      	mov	r0, r3
 800d302:	3718      	adds	r7, #24
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d308:	b480      	push	{r7}
 800d30a:	b085      	sub	sp, #20
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	60b9      	str	r1, [r7, #8]
 800d312:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	3b04      	subs	r3, #4
 800d318:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	3b04      	subs	r3, #4
 800d326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	f023 0201 	bic.w	r2, r3, #1
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	3b04      	subs	r3, #4
 800d336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d338:	4a0c      	ldr	r2, [pc, #48]	; (800d36c <pxPortInitialiseStack+0x64>)
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	3b14      	subs	r3, #20
 800d342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d344:	687a      	ldr	r2, [r7, #4]
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	3b04      	subs	r3, #4
 800d34e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f06f 0202 	mvn.w	r2, #2
 800d356:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	3b20      	subs	r3, #32
 800d35c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d35e:	68fb      	ldr	r3, [r7, #12]
}
 800d360:	4618      	mov	r0, r3
 800d362:	3714      	adds	r7, #20
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr
 800d36c:	0800d371 	.word	0x0800d371

0800d370 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d370:	b480      	push	{r7}
 800d372:	b085      	sub	sp, #20
 800d374:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d376:	2300      	movs	r3, #0
 800d378:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d37a:	4b12      	ldr	r3, [pc, #72]	; (800d3c4 <prvTaskExitError+0x54>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d382:	d00a      	beq.n	800d39a <prvTaskExitError+0x2a>
	__asm volatile
 800d384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d388:	f383 8811 	msr	BASEPRI, r3
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	60fb      	str	r3, [r7, #12]
}
 800d396:	bf00      	nop
 800d398:	e7fe      	b.n	800d398 <prvTaskExitError+0x28>
	__asm volatile
 800d39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d39e:	f383 8811 	msr	BASEPRI, r3
 800d3a2:	f3bf 8f6f 	isb	sy
 800d3a6:	f3bf 8f4f 	dsb	sy
 800d3aa:	60bb      	str	r3, [r7, #8]
}
 800d3ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d3ae:	bf00      	nop
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d0fc      	beq.n	800d3b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d3b6:	bf00      	nop
 800d3b8:	bf00      	nop
 800d3ba:	3714      	adds	r7, #20
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr
 800d3c4:	20000040 	.word	0x20000040
	...

0800d3d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d3d0:	4b07      	ldr	r3, [pc, #28]	; (800d3f0 <pxCurrentTCBConst2>)
 800d3d2:	6819      	ldr	r1, [r3, #0]
 800d3d4:	6808      	ldr	r0, [r1, #0]
 800d3d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3da:	f380 8809 	msr	PSP, r0
 800d3de:	f3bf 8f6f 	isb	sy
 800d3e2:	f04f 0000 	mov.w	r0, #0
 800d3e6:	f380 8811 	msr	BASEPRI, r0
 800d3ea:	4770      	bx	lr
 800d3ec:	f3af 8000 	nop.w

0800d3f0 <pxCurrentTCBConst2>:
 800d3f0:	200027b8 	.word	0x200027b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d3f4:	bf00      	nop
 800d3f6:	bf00      	nop

0800d3f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d3f8:	4808      	ldr	r0, [pc, #32]	; (800d41c <prvPortStartFirstTask+0x24>)
 800d3fa:	6800      	ldr	r0, [r0, #0]
 800d3fc:	6800      	ldr	r0, [r0, #0]
 800d3fe:	f380 8808 	msr	MSP, r0
 800d402:	f04f 0000 	mov.w	r0, #0
 800d406:	f380 8814 	msr	CONTROL, r0
 800d40a:	b662      	cpsie	i
 800d40c:	b661      	cpsie	f
 800d40e:	f3bf 8f4f 	dsb	sy
 800d412:	f3bf 8f6f 	isb	sy
 800d416:	df00      	svc	0
 800d418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d41a:	bf00      	nop
 800d41c:	e000ed08 	.word	0xe000ed08

0800d420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b086      	sub	sp, #24
 800d424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d426:	4b46      	ldr	r3, [pc, #280]	; (800d540 <xPortStartScheduler+0x120>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4a46      	ldr	r2, [pc, #280]	; (800d544 <xPortStartScheduler+0x124>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d10a      	bne.n	800d446 <xPortStartScheduler+0x26>
	__asm volatile
 800d430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d434:	f383 8811 	msr	BASEPRI, r3
 800d438:	f3bf 8f6f 	isb	sy
 800d43c:	f3bf 8f4f 	dsb	sy
 800d440:	613b      	str	r3, [r7, #16]
}
 800d442:	bf00      	nop
 800d444:	e7fe      	b.n	800d444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d446:	4b3e      	ldr	r3, [pc, #248]	; (800d540 <xPortStartScheduler+0x120>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	4a3f      	ldr	r2, [pc, #252]	; (800d548 <xPortStartScheduler+0x128>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d10a      	bne.n	800d466 <xPortStartScheduler+0x46>
	__asm volatile
 800d450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d454:	f383 8811 	msr	BASEPRI, r3
 800d458:	f3bf 8f6f 	isb	sy
 800d45c:	f3bf 8f4f 	dsb	sy
 800d460:	60fb      	str	r3, [r7, #12]
}
 800d462:	bf00      	nop
 800d464:	e7fe      	b.n	800d464 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d466:	4b39      	ldr	r3, [pc, #228]	; (800d54c <xPortStartScheduler+0x12c>)
 800d468:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	22ff      	movs	r2, #255	; 0xff
 800d476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	b2db      	uxtb	r3, r3
 800d47e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d480:	78fb      	ldrb	r3, [r7, #3]
 800d482:	b2db      	uxtb	r3, r3
 800d484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d488:	b2da      	uxtb	r2, r3
 800d48a:	4b31      	ldr	r3, [pc, #196]	; (800d550 <xPortStartScheduler+0x130>)
 800d48c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d48e:	4b31      	ldr	r3, [pc, #196]	; (800d554 <xPortStartScheduler+0x134>)
 800d490:	2207      	movs	r2, #7
 800d492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d494:	e009      	b.n	800d4aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d496:	4b2f      	ldr	r3, [pc, #188]	; (800d554 <xPortStartScheduler+0x134>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	3b01      	subs	r3, #1
 800d49c:	4a2d      	ldr	r2, [pc, #180]	; (800d554 <xPortStartScheduler+0x134>)
 800d49e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d4a0:	78fb      	ldrb	r3, [r7, #3]
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	005b      	lsls	r3, r3, #1
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d4aa:	78fb      	ldrb	r3, [r7, #3]
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4b2:	2b80      	cmp	r3, #128	; 0x80
 800d4b4:	d0ef      	beq.n	800d496 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d4b6:	4b27      	ldr	r3, [pc, #156]	; (800d554 <xPortStartScheduler+0x134>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f1c3 0307 	rsb	r3, r3, #7
 800d4be:	2b04      	cmp	r3, #4
 800d4c0:	d00a      	beq.n	800d4d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c6:	f383 8811 	msr	BASEPRI, r3
 800d4ca:	f3bf 8f6f 	isb	sy
 800d4ce:	f3bf 8f4f 	dsb	sy
 800d4d2:	60bb      	str	r3, [r7, #8]
}
 800d4d4:	bf00      	nop
 800d4d6:	e7fe      	b.n	800d4d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d4d8:	4b1e      	ldr	r3, [pc, #120]	; (800d554 <xPortStartScheduler+0x134>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	021b      	lsls	r3, r3, #8
 800d4de:	4a1d      	ldr	r2, [pc, #116]	; (800d554 <xPortStartScheduler+0x134>)
 800d4e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d4e2:	4b1c      	ldr	r3, [pc, #112]	; (800d554 <xPortStartScheduler+0x134>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d4ea:	4a1a      	ldr	r2, [pc, #104]	; (800d554 <xPortStartScheduler+0x134>)
 800d4ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	b2da      	uxtb	r2, r3
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d4f6:	4b18      	ldr	r3, [pc, #96]	; (800d558 <xPortStartScheduler+0x138>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	4a17      	ldr	r2, [pc, #92]	; (800d558 <xPortStartScheduler+0x138>)
 800d4fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d502:	4b15      	ldr	r3, [pc, #84]	; (800d558 <xPortStartScheduler+0x138>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4a14      	ldr	r2, [pc, #80]	; (800d558 <xPortStartScheduler+0x138>)
 800d508:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d50c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d50e:	f000 f8dd 	bl	800d6cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d512:	4b12      	ldr	r3, [pc, #72]	; (800d55c <xPortStartScheduler+0x13c>)
 800d514:	2200      	movs	r2, #0
 800d516:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d518:	f000 f8fc 	bl	800d714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d51c:	4b10      	ldr	r3, [pc, #64]	; (800d560 <xPortStartScheduler+0x140>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a0f      	ldr	r2, [pc, #60]	; (800d560 <xPortStartScheduler+0x140>)
 800d522:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d526:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d528:	f7ff ff66 	bl	800d3f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d52c:	f7fe fe90 	bl	800c250 <vTaskSwitchContext>
	prvTaskExitError();
 800d530:	f7ff ff1e 	bl	800d370 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d534:	2300      	movs	r3, #0
}
 800d536:	4618      	mov	r0, r3
 800d538:	3718      	adds	r7, #24
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}
 800d53e:	bf00      	nop
 800d540:	e000ed00 	.word	0xe000ed00
 800d544:	410fc271 	.word	0x410fc271
 800d548:	410fc270 	.word	0x410fc270
 800d54c:	e000e400 	.word	0xe000e400
 800d550:	20002de4 	.word	0x20002de4
 800d554:	20002de8 	.word	0x20002de8
 800d558:	e000ed20 	.word	0xe000ed20
 800d55c:	20000040 	.word	0x20000040
 800d560:	e000ef34 	.word	0xe000ef34

0800d564 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d564:	b480      	push	{r7}
 800d566:	b083      	sub	sp, #12
 800d568:	af00      	add	r7, sp, #0
	__asm volatile
 800d56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d56e:	f383 8811 	msr	BASEPRI, r3
 800d572:	f3bf 8f6f 	isb	sy
 800d576:	f3bf 8f4f 	dsb	sy
 800d57a:	607b      	str	r3, [r7, #4]
}
 800d57c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d57e:	4b0f      	ldr	r3, [pc, #60]	; (800d5bc <vPortEnterCritical+0x58>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	3301      	adds	r3, #1
 800d584:	4a0d      	ldr	r2, [pc, #52]	; (800d5bc <vPortEnterCritical+0x58>)
 800d586:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d588:	4b0c      	ldr	r3, [pc, #48]	; (800d5bc <vPortEnterCritical+0x58>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d10f      	bne.n	800d5b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d590:	4b0b      	ldr	r3, [pc, #44]	; (800d5c0 <vPortEnterCritical+0x5c>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	b2db      	uxtb	r3, r3
 800d596:	2b00      	cmp	r3, #0
 800d598:	d00a      	beq.n	800d5b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d59e:	f383 8811 	msr	BASEPRI, r3
 800d5a2:	f3bf 8f6f 	isb	sy
 800d5a6:	f3bf 8f4f 	dsb	sy
 800d5aa:	603b      	str	r3, [r7, #0]
}
 800d5ac:	bf00      	nop
 800d5ae:	e7fe      	b.n	800d5ae <vPortEnterCritical+0x4a>
	}
}
 800d5b0:	bf00      	nop
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr
 800d5bc:	20000040 	.word	0x20000040
 800d5c0:	e000ed04 	.word	0xe000ed04

0800d5c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b083      	sub	sp, #12
 800d5c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d5ca:	4b12      	ldr	r3, [pc, #72]	; (800d614 <vPortExitCritical+0x50>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d10a      	bne.n	800d5e8 <vPortExitCritical+0x24>
	__asm volatile
 800d5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d6:	f383 8811 	msr	BASEPRI, r3
 800d5da:	f3bf 8f6f 	isb	sy
 800d5de:	f3bf 8f4f 	dsb	sy
 800d5e2:	607b      	str	r3, [r7, #4]
}
 800d5e4:	bf00      	nop
 800d5e6:	e7fe      	b.n	800d5e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d5e8:	4b0a      	ldr	r3, [pc, #40]	; (800d614 <vPortExitCritical+0x50>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	3b01      	subs	r3, #1
 800d5ee:	4a09      	ldr	r2, [pc, #36]	; (800d614 <vPortExitCritical+0x50>)
 800d5f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d5f2:	4b08      	ldr	r3, [pc, #32]	; (800d614 <vPortExitCritical+0x50>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d105      	bne.n	800d606 <vPortExitCritical+0x42>
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	f383 8811 	msr	BASEPRI, r3
}
 800d604:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d606:	bf00      	nop
 800d608:	370c      	adds	r7, #12
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr
 800d612:	bf00      	nop
 800d614:	20000040 	.word	0x20000040
	...

0800d620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d620:	f3ef 8009 	mrs	r0, PSP
 800d624:	f3bf 8f6f 	isb	sy
 800d628:	4b15      	ldr	r3, [pc, #84]	; (800d680 <pxCurrentTCBConst>)
 800d62a:	681a      	ldr	r2, [r3, #0]
 800d62c:	f01e 0f10 	tst.w	lr, #16
 800d630:	bf08      	it	eq
 800d632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d63a:	6010      	str	r0, [r2, #0]
 800d63c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d640:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d644:	f380 8811 	msr	BASEPRI, r0
 800d648:	f3bf 8f4f 	dsb	sy
 800d64c:	f3bf 8f6f 	isb	sy
 800d650:	f7fe fdfe 	bl	800c250 <vTaskSwitchContext>
 800d654:	f04f 0000 	mov.w	r0, #0
 800d658:	f380 8811 	msr	BASEPRI, r0
 800d65c:	bc09      	pop	{r0, r3}
 800d65e:	6819      	ldr	r1, [r3, #0]
 800d660:	6808      	ldr	r0, [r1, #0]
 800d662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d666:	f01e 0f10 	tst.w	lr, #16
 800d66a:	bf08      	it	eq
 800d66c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d670:	f380 8809 	msr	PSP, r0
 800d674:	f3bf 8f6f 	isb	sy
 800d678:	4770      	bx	lr
 800d67a:	bf00      	nop
 800d67c:	f3af 8000 	nop.w

0800d680 <pxCurrentTCBConst>:
 800d680:	200027b8 	.word	0x200027b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d684:	bf00      	nop
 800d686:	bf00      	nop

0800d688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
	__asm volatile
 800d68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d692:	f383 8811 	msr	BASEPRI, r3
 800d696:	f3bf 8f6f 	isb	sy
 800d69a:	f3bf 8f4f 	dsb	sy
 800d69e:	607b      	str	r3, [r7, #4]
}
 800d6a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d6a2:	f7fe fd1b 	bl	800c0dc <xTaskIncrementTick>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d003      	beq.n	800d6b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d6ac:	4b06      	ldr	r3, [pc, #24]	; (800d6c8 <xPortSysTickHandler+0x40>)
 800d6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6b2:	601a      	str	r2, [r3, #0]
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	f383 8811 	msr	BASEPRI, r3
}
 800d6be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d6c0:	bf00      	nop
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	e000ed04 	.word	0xe000ed04

0800d6cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d6cc:	b480      	push	{r7}
 800d6ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d6d0:	4b0b      	ldr	r3, [pc, #44]	; (800d700 <vPortSetupTimerInterrupt+0x34>)
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d6d6:	4b0b      	ldr	r3, [pc, #44]	; (800d704 <vPortSetupTimerInterrupt+0x38>)
 800d6d8:	2200      	movs	r2, #0
 800d6da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d6dc:	4b0a      	ldr	r3, [pc, #40]	; (800d708 <vPortSetupTimerInterrupt+0x3c>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a0a      	ldr	r2, [pc, #40]	; (800d70c <vPortSetupTimerInterrupt+0x40>)
 800d6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d6e6:	099b      	lsrs	r3, r3, #6
 800d6e8:	4a09      	ldr	r2, [pc, #36]	; (800d710 <vPortSetupTimerInterrupt+0x44>)
 800d6ea:	3b01      	subs	r3, #1
 800d6ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d6ee:	4b04      	ldr	r3, [pc, #16]	; (800d700 <vPortSetupTimerInterrupt+0x34>)
 800d6f0:	2207      	movs	r2, #7
 800d6f2:	601a      	str	r2, [r3, #0]
}
 800d6f4:	bf00      	nop
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fc:	4770      	bx	lr
 800d6fe:	bf00      	nop
 800d700:	e000e010 	.word	0xe000e010
 800d704:	e000e018 	.word	0xe000e018
 800d708:	20000034 	.word	0x20000034
 800d70c:	10624dd3 	.word	0x10624dd3
 800d710:	e000e014 	.word	0xe000e014

0800d714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d724 <vPortEnableVFP+0x10>
 800d718:	6801      	ldr	r1, [r0, #0]
 800d71a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d71e:	6001      	str	r1, [r0, #0]
 800d720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d722:	bf00      	nop
 800d724:	e000ed88 	.word	0xe000ed88

0800d728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d728:	b480      	push	{r7}
 800d72a:	b085      	sub	sp, #20
 800d72c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d72e:	f3ef 8305 	mrs	r3, IPSR
 800d732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2b0f      	cmp	r3, #15
 800d738:	d914      	bls.n	800d764 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d73a:	4a17      	ldr	r2, [pc, #92]	; (800d798 <vPortValidateInterruptPriority+0x70>)
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	4413      	add	r3, r2
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d744:	4b15      	ldr	r3, [pc, #84]	; (800d79c <vPortValidateInterruptPriority+0x74>)
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	7afa      	ldrb	r2, [r7, #11]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d20a      	bcs.n	800d764 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d752:	f383 8811 	msr	BASEPRI, r3
 800d756:	f3bf 8f6f 	isb	sy
 800d75a:	f3bf 8f4f 	dsb	sy
 800d75e:	607b      	str	r3, [r7, #4]
}
 800d760:	bf00      	nop
 800d762:	e7fe      	b.n	800d762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d764:	4b0e      	ldr	r3, [pc, #56]	; (800d7a0 <vPortValidateInterruptPriority+0x78>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d76c:	4b0d      	ldr	r3, [pc, #52]	; (800d7a4 <vPortValidateInterruptPriority+0x7c>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	429a      	cmp	r2, r3
 800d772:	d90a      	bls.n	800d78a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d778:	f383 8811 	msr	BASEPRI, r3
 800d77c:	f3bf 8f6f 	isb	sy
 800d780:	f3bf 8f4f 	dsb	sy
 800d784:	603b      	str	r3, [r7, #0]
}
 800d786:	bf00      	nop
 800d788:	e7fe      	b.n	800d788 <vPortValidateInterruptPriority+0x60>
	}
 800d78a:	bf00      	nop
 800d78c:	3714      	adds	r7, #20
 800d78e:	46bd      	mov	sp, r7
 800d790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d794:	4770      	bx	lr
 800d796:	bf00      	nop
 800d798:	e000e3f0 	.word	0xe000e3f0
 800d79c:	20002de4 	.word	0x20002de4
 800d7a0:	e000ed0c 	.word	0xe000ed0c
 800d7a4:	20002de8 	.word	0x20002de8

0800d7a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b08a      	sub	sp, #40	; 0x28
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d7b4:	f7fe fbc4 	bl	800bf40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d7b8:	4b5b      	ldr	r3, [pc, #364]	; (800d928 <pvPortMalloc+0x180>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d101      	bne.n	800d7c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d7c0:	f000 f920 	bl	800da04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d7c4:	4b59      	ldr	r3, [pc, #356]	; (800d92c <pvPortMalloc+0x184>)
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	4013      	ands	r3, r2
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	f040 8093 	bne.w	800d8f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d01d      	beq.n	800d814 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d7d8:	2208      	movs	r2, #8
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	4413      	add	r3, r2
 800d7de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f003 0307 	and.w	r3, r3, #7
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d014      	beq.n	800d814 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f023 0307 	bic.w	r3, r3, #7
 800d7f0:	3308      	adds	r3, #8
 800d7f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f003 0307 	and.w	r3, r3, #7
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d00a      	beq.n	800d814 <pvPortMalloc+0x6c>
	__asm volatile
 800d7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d802:	f383 8811 	msr	BASEPRI, r3
 800d806:	f3bf 8f6f 	isb	sy
 800d80a:	f3bf 8f4f 	dsb	sy
 800d80e:	617b      	str	r3, [r7, #20]
}
 800d810:	bf00      	nop
 800d812:	e7fe      	b.n	800d812 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d06e      	beq.n	800d8f8 <pvPortMalloc+0x150>
 800d81a:	4b45      	ldr	r3, [pc, #276]	; (800d930 <pvPortMalloc+0x188>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	429a      	cmp	r2, r3
 800d822:	d869      	bhi.n	800d8f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d824:	4b43      	ldr	r3, [pc, #268]	; (800d934 <pvPortMalloc+0x18c>)
 800d826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d828:	4b42      	ldr	r3, [pc, #264]	; (800d934 <pvPortMalloc+0x18c>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d82e:	e004      	b.n	800d83a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	429a      	cmp	r2, r3
 800d842:	d903      	bls.n	800d84c <pvPortMalloc+0xa4>
 800d844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d1f1      	bne.n	800d830 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d84c:	4b36      	ldr	r3, [pc, #216]	; (800d928 <pvPortMalloc+0x180>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d852:	429a      	cmp	r2, r3
 800d854:	d050      	beq.n	800d8f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d856:	6a3b      	ldr	r3, [r7, #32]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	2208      	movs	r2, #8
 800d85c:	4413      	add	r3, r2
 800d85e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	6a3b      	ldr	r3, [r7, #32]
 800d866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86a:	685a      	ldr	r2, [r3, #4]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	1ad2      	subs	r2, r2, r3
 800d870:	2308      	movs	r3, #8
 800d872:	005b      	lsls	r3, r3, #1
 800d874:	429a      	cmp	r2, r3
 800d876:	d91f      	bls.n	800d8b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	4413      	add	r3, r2
 800d87e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d880:	69bb      	ldr	r3, [r7, #24]
 800d882:	f003 0307 	and.w	r3, r3, #7
 800d886:	2b00      	cmp	r3, #0
 800d888:	d00a      	beq.n	800d8a0 <pvPortMalloc+0xf8>
	__asm volatile
 800d88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d88e:	f383 8811 	msr	BASEPRI, r3
 800d892:	f3bf 8f6f 	isb	sy
 800d896:	f3bf 8f4f 	dsb	sy
 800d89a:	613b      	str	r3, [r7, #16]
}
 800d89c:	bf00      	nop
 800d89e:	e7fe      	b.n	800d89e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a2:	685a      	ldr	r2, [r3, #4]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	1ad2      	subs	r2, r2, r3
 800d8a8:	69bb      	ldr	r3, [r7, #24]
 800d8aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ae:	687a      	ldr	r2, [r7, #4]
 800d8b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d8b2:	69b8      	ldr	r0, [r7, #24]
 800d8b4:	f000 f908 	bl	800dac8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d8b8:	4b1d      	ldr	r3, [pc, #116]	; (800d930 <pvPortMalloc+0x188>)
 800d8ba:	681a      	ldr	r2, [r3, #0]
 800d8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	1ad3      	subs	r3, r2, r3
 800d8c2:	4a1b      	ldr	r2, [pc, #108]	; (800d930 <pvPortMalloc+0x188>)
 800d8c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d8c6:	4b1a      	ldr	r3, [pc, #104]	; (800d930 <pvPortMalloc+0x188>)
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	4b1b      	ldr	r3, [pc, #108]	; (800d938 <pvPortMalloc+0x190>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d203      	bcs.n	800d8da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d8d2:	4b17      	ldr	r3, [pc, #92]	; (800d930 <pvPortMalloc+0x188>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4a18      	ldr	r2, [pc, #96]	; (800d938 <pvPortMalloc+0x190>)
 800d8d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8dc:	685a      	ldr	r2, [r3, #4]
 800d8de:	4b13      	ldr	r3, [pc, #76]	; (800d92c <pvPortMalloc+0x184>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	431a      	orrs	r2, r3
 800d8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d8ee:	4b13      	ldr	r3, [pc, #76]	; (800d93c <pvPortMalloc+0x194>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	4a11      	ldr	r2, [pc, #68]	; (800d93c <pvPortMalloc+0x194>)
 800d8f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d8f8:	f7fe fb30 	bl	800bf5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	f003 0307 	and.w	r3, r3, #7
 800d902:	2b00      	cmp	r3, #0
 800d904:	d00a      	beq.n	800d91c <pvPortMalloc+0x174>
	__asm volatile
 800d906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d90a:	f383 8811 	msr	BASEPRI, r3
 800d90e:	f3bf 8f6f 	isb	sy
 800d912:	f3bf 8f4f 	dsb	sy
 800d916:	60fb      	str	r3, [r7, #12]
}
 800d918:	bf00      	nop
 800d91a:	e7fe      	b.n	800d91a <pvPortMalloc+0x172>
	return pvReturn;
 800d91c:	69fb      	ldr	r3, [r7, #28]
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3728      	adds	r7, #40	; 0x28
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	200035f4 	.word	0x200035f4
 800d92c:	20003608 	.word	0x20003608
 800d930:	200035f8 	.word	0x200035f8
 800d934:	200035ec 	.word	0x200035ec
 800d938:	200035fc 	.word	0x200035fc
 800d93c:	20003600 	.word	0x20003600

0800d940 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b086      	sub	sp, #24
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d04d      	beq.n	800d9ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d952:	2308      	movs	r3, #8
 800d954:	425b      	negs	r3, r3
 800d956:	697a      	ldr	r2, [r7, #20]
 800d958:	4413      	add	r3, r2
 800d95a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	685a      	ldr	r2, [r3, #4]
 800d964:	4b24      	ldr	r3, [pc, #144]	; (800d9f8 <vPortFree+0xb8>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4013      	ands	r3, r2
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d10a      	bne.n	800d984 <vPortFree+0x44>
	__asm volatile
 800d96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d972:	f383 8811 	msr	BASEPRI, r3
 800d976:	f3bf 8f6f 	isb	sy
 800d97a:	f3bf 8f4f 	dsb	sy
 800d97e:	60fb      	str	r3, [r7, #12]
}
 800d980:	bf00      	nop
 800d982:	e7fe      	b.n	800d982 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d00a      	beq.n	800d9a2 <vPortFree+0x62>
	__asm volatile
 800d98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d990:	f383 8811 	msr	BASEPRI, r3
 800d994:	f3bf 8f6f 	isb	sy
 800d998:	f3bf 8f4f 	dsb	sy
 800d99c:	60bb      	str	r3, [r7, #8]
}
 800d99e:	bf00      	nop
 800d9a0:	e7fe      	b.n	800d9a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	685a      	ldr	r2, [r3, #4]
 800d9a6:	4b14      	ldr	r3, [pc, #80]	; (800d9f8 <vPortFree+0xb8>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	4013      	ands	r3, r2
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d01e      	beq.n	800d9ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d11a      	bne.n	800d9ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	685a      	ldr	r2, [r3, #4]
 800d9bc:	4b0e      	ldr	r3, [pc, #56]	; (800d9f8 <vPortFree+0xb8>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	43db      	mvns	r3, r3
 800d9c2:	401a      	ands	r2, r3
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d9c8:	f7fe faba 	bl	800bf40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	685a      	ldr	r2, [r3, #4]
 800d9d0:	4b0a      	ldr	r3, [pc, #40]	; (800d9fc <vPortFree+0xbc>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4413      	add	r3, r2
 800d9d6:	4a09      	ldr	r2, [pc, #36]	; (800d9fc <vPortFree+0xbc>)
 800d9d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d9da:	6938      	ldr	r0, [r7, #16]
 800d9dc:	f000 f874 	bl	800dac8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d9e0:	4b07      	ldr	r3, [pc, #28]	; (800da00 <vPortFree+0xc0>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	4a06      	ldr	r2, [pc, #24]	; (800da00 <vPortFree+0xc0>)
 800d9e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d9ea:	f7fe fab7 	bl	800bf5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d9ee:	bf00      	nop
 800d9f0:	3718      	adds	r7, #24
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	20003608 	.word	0x20003608
 800d9fc:	200035f8 	.word	0x200035f8
 800da00:	20003604 	.word	0x20003604

0800da04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800da04:	b480      	push	{r7}
 800da06:	b085      	sub	sp, #20
 800da08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800da0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800da0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800da10:	4b27      	ldr	r3, [pc, #156]	; (800dab0 <prvHeapInit+0xac>)
 800da12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f003 0307 	and.w	r3, r3, #7
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d00c      	beq.n	800da38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	3307      	adds	r3, #7
 800da22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f023 0307 	bic.w	r3, r3, #7
 800da2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800da2c:	68ba      	ldr	r2, [r7, #8]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	1ad3      	subs	r3, r2, r3
 800da32:	4a1f      	ldr	r2, [pc, #124]	; (800dab0 <prvHeapInit+0xac>)
 800da34:	4413      	add	r3, r2
 800da36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800da3c:	4a1d      	ldr	r2, [pc, #116]	; (800dab4 <prvHeapInit+0xb0>)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800da42:	4b1c      	ldr	r3, [pc, #112]	; (800dab4 <prvHeapInit+0xb0>)
 800da44:	2200      	movs	r2, #0
 800da46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	68ba      	ldr	r2, [r7, #8]
 800da4c:	4413      	add	r3, r2
 800da4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800da50:	2208      	movs	r2, #8
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	1a9b      	subs	r3, r3, r2
 800da56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f023 0307 	bic.w	r3, r3, #7
 800da5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	4a15      	ldr	r2, [pc, #84]	; (800dab8 <prvHeapInit+0xb4>)
 800da64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800da66:	4b14      	ldr	r3, [pc, #80]	; (800dab8 <prvHeapInit+0xb4>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	2200      	movs	r2, #0
 800da6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800da6e:	4b12      	ldr	r3, [pc, #72]	; (800dab8 <prvHeapInit+0xb4>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	2200      	movs	r2, #0
 800da74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	68fa      	ldr	r2, [r7, #12]
 800da7e:	1ad2      	subs	r2, r2, r3
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800da84:	4b0c      	ldr	r3, [pc, #48]	; (800dab8 <prvHeapInit+0xb4>)
 800da86:	681a      	ldr	r2, [r3, #0]
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	685b      	ldr	r3, [r3, #4]
 800da90:	4a0a      	ldr	r2, [pc, #40]	; (800dabc <prvHeapInit+0xb8>)
 800da92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	685b      	ldr	r3, [r3, #4]
 800da98:	4a09      	ldr	r2, [pc, #36]	; (800dac0 <prvHeapInit+0xbc>)
 800da9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800da9c:	4b09      	ldr	r3, [pc, #36]	; (800dac4 <prvHeapInit+0xc0>)
 800da9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800daa2:	601a      	str	r2, [r3, #0]
}
 800daa4:	bf00      	nop
 800daa6:	3714      	adds	r7, #20
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr
 800dab0:	20002dec 	.word	0x20002dec
 800dab4:	200035ec 	.word	0x200035ec
 800dab8:	200035f4 	.word	0x200035f4
 800dabc:	200035fc 	.word	0x200035fc
 800dac0:	200035f8 	.word	0x200035f8
 800dac4:	20003608 	.word	0x20003608

0800dac8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dac8:	b480      	push	{r7}
 800daca:	b085      	sub	sp, #20
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dad0:	4b28      	ldr	r3, [pc, #160]	; (800db74 <prvInsertBlockIntoFreeList+0xac>)
 800dad2:	60fb      	str	r3, [r7, #12]
 800dad4:	e002      	b.n	800dadc <prvInsertBlockIntoFreeList+0x14>
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	60fb      	str	r3, [r7, #12]
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d8f7      	bhi.n	800dad6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	68ba      	ldr	r2, [r7, #8]
 800daf0:	4413      	add	r3, r2
 800daf2:	687a      	ldr	r2, [r7, #4]
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d108      	bne.n	800db0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	685a      	ldr	r2, [r3, #4]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	685b      	ldr	r3, [r3, #4]
 800db00:	441a      	add	r2, r3
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	685b      	ldr	r3, [r3, #4]
 800db12:	68ba      	ldr	r2, [r7, #8]
 800db14:	441a      	add	r2, r3
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d118      	bne.n	800db50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	4b15      	ldr	r3, [pc, #84]	; (800db78 <prvInsertBlockIntoFreeList+0xb0>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	429a      	cmp	r2, r3
 800db28:	d00d      	beq.n	800db46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	685a      	ldr	r2, [r3, #4]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	685b      	ldr	r3, [r3, #4]
 800db34:	441a      	add	r2, r3
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	681a      	ldr	r2, [r3, #0]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	601a      	str	r2, [r3, #0]
 800db44:	e008      	b.n	800db58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800db46:	4b0c      	ldr	r3, [pc, #48]	; (800db78 <prvInsertBlockIntoFreeList+0xb0>)
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	601a      	str	r2, [r3, #0]
 800db4e:	e003      	b.n	800db58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681a      	ldr	r2, [r3, #0]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800db58:	68fa      	ldr	r2, [r7, #12]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d002      	beq.n	800db66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	687a      	ldr	r2, [r7, #4]
 800db64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db66:	bf00      	nop
 800db68:	3714      	adds	r7, #20
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr
 800db72:	bf00      	nop
 800db74:	200035ec 	.word	0x200035ec
 800db78:	200035f4 	.word	0x200035f4

0800db7c <__errno>:
 800db7c:	4b01      	ldr	r3, [pc, #4]	; (800db84 <__errno+0x8>)
 800db7e:	6818      	ldr	r0, [r3, #0]
 800db80:	4770      	bx	lr
 800db82:	bf00      	nop
 800db84:	20000044 	.word	0x20000044

0800db88 <__libc_init_array>:
 800db88:	b570      	push	{r4, r5, r6, lr}
 800db8a:	4d0d      	ldr	r5, [pc, #52]	; (800dbc0 <__libc_init_array+0x38>)
 800db8c:	4c0d      	ldr	r4, [pc, #52]	; (800dbc4 <__libc_init_array+0x3c>)
 800db8e:	1b64      	subs	r4, r4, r5
 800db90:	10a4      	asrs	r4, r4, #2
 800db92:	2600      	movs	r6, #0
 800db94:	42a6      	cmp	r6, r4
 800db96:	d109      	bne.n	800dbac <__libc_init_array+0x24>
 800db98:	4d0b      	ldr	r5, [pc, #44]	; (800dbc8 <__libc_init_array+0x40>)
 800db9a:	4c0c      	ldr	r4, [pc, #48]	; (800dbcc <__libc_init_array+0x44>)
 800db9c:	f000 fafa 	bl	800e194 <_init>
 800dba0:	1b64      	subs	r4, r4, r5
 800dba2:	10a4      	asrs	r4, r4, #2
 800dba4:	2600      	movs	r6, #0
 800dba6:	42a6      	cmp	r6, r4
 800dba8:	d105      	bne.n	800dbb6 <__libc_init_array+0x2e>
 800dbaa:	bd70      	pop	{r4, r5, r6, pc}
 800dbac:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbb0:	4798      	blx	r3
 800dbb2:	3601      	adds	r6, #1
 800dbb4:	e7ee      	b.n	800db94 <__libc_init_array+0xc>
 800dbb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbba:	4798      	blx	r3
 800dbbc:	3601      	adds	r6, #1
 800dbbe:	e7f2      	b.n	800dba6 <__libc_init_array+0x1e>
 800dbc0:	0800e4b0 	.word	0x0800e4b0
 800dbc4:	0800e4b0 	.word	0x0800e4b0
 800dbc8:	0800e4b0 	.word	0x0800e4b0
 800dbcc:	0800e4b4 	.word	0x0800e4b4

0800dbd0 <__retarget_lock_acquire_recursive>:
 800dbd0:	4770      	bx	lr

0800dbd2 <__retarget_lock_release_recursive>:
 800dbd2:	4770      	bx	lr

0800dbd4 <memcpy>:
 800dbd4:	440a      	add	r2, r1
 800dbd6:	4291      	cmp	r1, r2
 800dbd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800dbdc:	d100      	bne.n	800dbe0 <memcpy+0xc>
 800dbde:	4770      	bx	lr
 800dbe0:	b510      	push	{r4, lr}
 800dbe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbea:	4291      	cmp	r1, r2
 800dbec:	d1f9      	bne.n	800dbe2 <memcpy+0xe>
 800dbee:	bd10      	pop	{r4, pc}

0800dbf0 <memset>:
 800dbf0:	4402      	add	r2, r0
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d100      	bne.n	800dbfa <memset+0xa>
 800dbf8:	4770      	bx	lr
 800dbfa:	f803 1b01 	strb.w	r1, [r3], #1
 800dbfe:	e7f9      	b.n	800dbf4 <memset+0x4>

0800dc00 <cleanup_glue>:
 800dc00:	b538      	push	{r3, r4, r5, lr}
 800dc02:	460c      	mov	r4, r1
 800dc04:	6809      	ldr	r1, [r1, #0]
 800dc06:	4605      	mov	r5, r0
 800dc08:	b109      	cbz	r1, 800dc0e <cleanup_glue+0xe>
 800dc0a:	f7ff fff9 	bl	800dc00 <cleanup_glue>
 800dc0e:	4621      	mov	r1, r4
 800dc10:	4628      	mov	r0, r5
 800dc12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc16:	f000 b869 	b.w	800dcec <_free_r>
	...

0800dc1c <_reclaim_reent>:
 800dc1c:	4b2c      	ldr	r3, [pc, #176]	; (800dcd0 <_reclaim_reent+0xb4>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	4283      	cmp	r3, r0
 800dc22:	b570      	push	{r4, r5, r6, lr}
 800dc24:	4604      	mov	r4, r0
 800dc26:	d051      	beq.n	800dccc <_reclaim_reent+0xb0>
 800dc28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800dc2a:	b143      	cbz	r3, 800dc3e <_reclaim_reent+0x22>
 800dc2c:	68db      	ldr	r3, [r3, #12]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d14a      	bne.n	800dcc8 <_reclaim_reent+0xac>
 800dc32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc34:	6819      	ldr	r1, [r3, #0]
 800dc36:	b111      	cbz	r1, 800dc3e <_reclaim_reent+0x22>
 800dc38:	4620      	mov	r0, r4
 800dc3a:	f000 f857 	bl	800dcec <_free_r>
 800dc3e:	6961      	ldr	r1, [r4, #20]
 800dc40:	b111      	cbz	r1, 800dc48 <_reclaim_reent+0x2c>
 800dc42:	4620      	mov	r0, r4
 800dc44:	f000 f852 	bl	800dcec <_free_r>
 800dc48:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dc4a:	b111      	cbz	r1, 800dc52 <_reclaim_reent+0x36>
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	f000 f84d 	bl	800dcec <_free_r>
 800dc52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dc54:	b111      	cbz	r1, 800dc5c <_reclaim_reent+0x40>
 800dc56:	4620      	mov	r0, r4
 800dc58:	f000 f848 	bl	800dcec <_free_r>
 800dc5c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dc5e:	b111      	cbz	r1, 800dc66 <_reclaim_reent+0x4a>
 800dc60:	4620      	mov	r0, r4
 800dc62:	f000 f843 	bl	800dcec <_free_r>
 800dc66:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dc68:	b111      	cbz	r1, 800dc70 <_reclaim_reent+0x54>
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	f000 f83e 	bl	800dcec <_free_r>
 800dc70:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800dc72:	b111      	cbz	r1, 800dc7a <_reclaim_reent+0x5e>
 800dc74:	4620      	mov	r0, r4
 800dc76:	f000 f839 	bl	800dcec <_free_r>
 800dc7a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800dc7c:	b111      	cbz	r1, 800dc84 <_reclaim_reent+0x68>
 800dc7e:	4620      	mov	r0, r4
 800dc80:	f000 f834 	bl	800dcec <_free_r>
 800dc84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc86:	b111      	cbz	r1, 800dc8e <_reclaim_reent+0x72>
 800dc88:	4620      	mov	r0, r4
 800dc8a:	f000 f82f 	bl	800dcec <_free_r>
 800dc8e:	69a3      	ldr	r3, [r4, #24]
 800dc90:	b1e3      	cbz	r3, 800dccc <_reclaim_reent+0xb0>
 800dc92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dc94:	4620      	mov	r0, r4
 800dc96:	4798      	blx	r3
 800dc98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dc9a:	b1b9      	cbz	r1, 800dccc <_reclaim_reent+0xb0>
 800dc9c:	4620      	mov	r0, r4
 800dc9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dca2:	f7ff bfad 	b.w	800dc00 <cleanup_glue>
 800dca6:	5949      	ldr	r1, [r1, r5]
 800dca8:	b941      	cbnz	r1, 800dcbc <_reclaim_reent+0xa0>
 800dcaa:	3504      	adds	r5, #4
 800dcac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcae:	2d80      	cmp	r5, #128	; 0x80
 800dcb0:	68d9      	ldr	r1, [r3, #12]
 800dcb2:	d1f8      	bne.n	800dca6 <_reclaim_reent+0x8a>
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f000 f819 	bl	800dcec <_free_r>
 800dcba:	e7ba      	b.n	800dc32 <_reclaim_reent+0x16>
 800dcbc:	680e      	ldr	r6, [r1, #0]
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f000 f814 	bl	800dcec <_free_r>
 800dcc4:	4631      	mov	r1, r6
 800dcc6:	e7ef      	b.n	800dca8 <_reclaim_reent+0x8c>
 800dcc8:	2500      	movs	r5, #0
 800dcca:	e7ef      	b.n	800dcac <_reclaim_reent+0x90>
 800dccc:	bd70      	pop	{r4, r5, r6, pc}
 800dcce:	bf00      	nop
 800dcd0:	20000044 	.word	0x20000044

0800dcd4 <__malloc_lock>:
 800dcd4:	4801      	ldr	r0, [pc, #4]	; (800dcdc <__malloc_lock+0x8>)
 800dcd6:	f7ff bf7b 	b.w	800dbd0 <__retarget_lock_acquire_recursive>
 800dcda:	bf00      	nop
 800dcdc:	2000360c 	.word	0x2000360c

0800dce0 <__malloc_unlock>:
 800dce0:	4801      	ldr	r0, [pc, #4]	; (800dce8 <__malloc_unlock+0x8>)
 800dce2:	f7ff bf76 	b.w	800dbd2 <__retarget_lock_release_recursive>
 800dce6:	bf00      	nop
 800dce8:	2000360c 	.word	0x2000360c

0800dcec <_free_r>:
 800dcec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dcee:	2900      	cmp	r1, #0
 800dcf0:	d044      	beq.n	800dd7c <_free_r+0x90>
 800dcf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcf6:	9001      	str	r0, [sp, #4]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	f1a1 0404 	sub.w	r4, r1, #4
 800dcfe:	bfb8      	it	lt
 800dd00:	18e4      	addlt	r4, r4, r3
 800dd02:	f7ff ffe7 	bl	800dcd4 <__malloc_lock>
 800dd06:	4a1e      	ldr	r2, [pc, #120]	; (800dd80 <_free_r+0x94>)
 800dd08:	9801      	ldr	r0, [sp, #4]
 800dd0a:	6813      	ldr	r3, [r2, #0]
 800dd0c:	b933      	cbnz	r3, 800dd1c <_free_r+0x30>
 800dd0e:	6063      	str	r3, [r4, #4]
 800dd10:	6014      	str	r4, [r2, #0]
 800dd12:	b003      	add	sp, #12
 800dd14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd18:	f7ff bfe2 	b.w	800dce0 <__malloc_unlock>
 800dd1c:	42a3      	cmp	r3, r4
 800dd1e:	d908      	bls.n	800dd32 <_free_r+0x46>
 800dd20:	6825      	ldr	r5, [r4, #0]
 800dd22:	1961      	adds	r1, r4, r5
 800dd24:	428b      	cmp	r3, r1
 800dd26:	bf01      	itttt	eq
 800dd28:	6819      	ldreq	r1, [r3, #0]
 800dd2a:	685b      	ldreq	r3, [r3, #4]
 800dd2c:	1949      	addeq	r1, r1, r5
 800dd2e:	6021      	streq	r1, [r4, #0]
 800dd30:	e7ed      	b.n	800dd0e <_free_r+0x22>
 800dd32:	461a      	mov	r2, r3
 800dd34:	685b      	ldr	r3, [r3, #4]
 800dd36:	b10b      	cbz	r3, 800dd3c <_free_r+0x50>
 800dd38:	42a3      	cmp	r3, r4
 800dd3a:	d9fa      	bls.n	800dd32 <_free_r+0x46>
 800dd3c:	6811      	ldr	r1, [r2, #0]
 800dd3e:	1855      	adds	r5, r2, r1
 800dd40:	42a5      	cmp	r5, r4
 800dd42:	d10b      	bne.n	800dd5c <_free_r+0x70>
 800dd44:	6824      	ldr	r4, [r4, #0]
 800dd46:	4421      	add	r1, r4
 800dd48:	1854      	adds	r4, r2, r1
 800dd4a:	42a3      	cmp	r3, r4
 800dd4c:	6011      	str	r1, [r2, #0]
 800dd4e:	d1e0      	bne.n	800dd12 <_free_r+0x26>
 800dd50:	681c      	ldr	r4, [r3, #0]
 800dd52:	685b      	ldr	r3, [r3, #4]
 800dd54:	6053      	str	r3, [r2, #4]
 800dd56:	4421      	add	r1, r4
 800dd58:	6011      	str	r1, [r2, #0]
 800dd5a:	e7da      	b.n	800dd12 <_free_r+0x26>
 800dd5c:	d902      	bls.n	800dd64 <_free_r+0x78>
 800dd5e:	230c      	movs	r3, #12
 800dd60:	6003      	str	r3, [r0, #0]
 800dd62:	e7d6      	b.n	800dd12 <_free_r+0x26>
 800dd64:	6825      	ldr	r5, [r4, #0]
 800dd66:	1961      	adds	r1, r4, r5
 800dd68:	428b      	cmp	r3, r1
 800dd6a:	bf04      	itt	eq
 800dd6c:	6819      	ldreq	r1, [r3, #0]
 800dd6e:	685b      	ldreq	r3, [r3, #4]
 800dd70:	6063      	str	r3, [r4, #4]
 800dd72:	bf04      	itt	eq
 800dd74:	1949      	addeq	r1, r1, r5
 800dd76:	6021      	streq	r1, [r4, #0]
 800dd78:	6054      	str	r4, [r2, #4]
 800dd7a:	e7ca      	b.n	800dd12 <_free_r+0x26>
 800dd7c:	b003      	add	sp, #12
 800dd7e:	bd30      	pop	{r4, r5, pc}
 800dd80:	20003610 	.word	0x20003610
 800dd84:	00000000 	.word	0x00000000

0800dd88 <exp>:
 800dd88:	b538      	push	{r3, r4, r5, lr}
 800dd8a:	ed2d 8b02 	vpush	{d8}
 800dd8e:	ec55 4b10 	vmov	r4, r5, d0
 800dd92:	f000 f841 	bl	800de18 <__ieee754_exp>
 800dd96:	eeb0 8a40 	vmov.f32	s16, s0
 800dd9a:	eef0 8a60 	vmov.f32	s17, s1
 800dd9e:	ec45 4b10 	vmov	d0, r4, r5
 800dda2:	f000 f9eb 	bl	800e17c <finite>
 800dda6:	b168      	cbz	r0, 800ddc4 <exp+0x3c>
 800dda8:	a317      	add	r3, pc, #92	; (adr r3, 800de08 <exp+0x80>)
 800ddaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddae:	4620      	mov	r0, r4
 800ddb0:	4629      	mov	r1, r5
 800ddb2:	f7f2 fe59 	bl	8000a68 <__aeabi_dcmpgt>
 800ddb6:	b160      	cbz	r0, 800ddd2 <exp+0x4a>
 800ddb8:	f7ff fee0 	bl	800db7c <__errno>
 800ddbc:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800ddf8 <exp+0x70>
 800ddc0:	2322      	movs	r3, #34	; 0x22
 800ddc2:	6003      	str	r3, [r0, #0]
 800ddc4:	eeb0 0a48 	vmov.f32	s0, s16
 800ddc8:	eef0 0a68 	vmov.f32	s1, s17
 800ddcc:	ecbd 8b02 	vpop	{d8}
 800ddd0:	bd38      	pop	{r3, r4, r5, pc}
 800ddd2:	a30f      	add	r3, pc, #60	; (adr r3, 800de10 <exp+0x88>)
 800ddd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd8:	4620      	mov	r0, r4
 800ddda:	4629      	mov	r1, r5
 800dddc:	f7f2 fe26 	bl	8000a2c <__aeabi_dcmplt>
 800dde0:	2800      	cmp	r0, #0
 800dde2:	d0ef      	beq.n	800ddc4 <exp+0x3c>
 800dde4:	f7ff feca 	bl	800db7c <__errno>
 800dde8:	2322      	movs	r3, #34	; 0x22
 800ddea:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800de00 <exp+0x78>
 800ddee:	6003      	str	r3, [r0, #0]
 800ddf0:	e7e8      	b.n	800ddc4 <exp+0x3c>
 800ddf2:	bf00      	nop
 800ddf4:	f3af 8000 	nop.w
 800ddf8:	00000000 	.word	0x00000000
 800ddfc:	7ff00000 	.word	0x7ff00000
	...
 800de08:	fefa39ef 	.word	0xfefa39ef
 800de0c:	40862e42 	.word	0x40862e42
 800de10:	d52d3051 	.word	0xd52d3051
 800de14:	c0874910 	.word	0xc0874910

0800de18 <__ieee754_exp>:
 800de18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de1c:	ec55 4b10 	vmov	r4, r5, d0
 800de20:	49b5      	ldr	r1, [pc, #724]	; (800e0f8 <__ieee754_exp+0x2e0>)
 800de22:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800de26:	428b      	cmp	r3, r1
 800de28:	ed2d 8b04 	vpush	{d8-d9}
 800de2c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800de30:	d93d      	bls.n	800deae <__ieee754_exp+0x96>
 800de32:	49b2      	ldr	r1, [pc, #712]	; (800e0fc <__ieee754_exp+0x2e4>)
 800de34:	428b      	cmp	r3, r1
 800de36:	d918      	bls.n	800de6a <__ieee754_exp+0x52>
 800de38:	ee10 3a10 	vmov	r3, s0
 800de3c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800de40:	4313      	orrs	r3, r2
 800de42:	d009      	beq.n	800de58 <__ieee754_exp+0x40>
 800de44:	ee10 2a10 	vmov	r2, s0
 800de48:	462b      	mov	r3, r5
 800de4a:	4620      	mov	r0, r4
 800de4c:	4629      	mov	r1, r5
 800de4e:	f7f2 f9c5 	bl	80001dc <__adddf3>
 800de52:	4604      	mov	r4, r0
 800de54:	460d      	mov	r5, r1
 800de56:	e002      	b.n	800de5e <__ieee754_exp+0x46>
 800de58:	b10e      	cbz	r6, 800de5e <__ieee754_exp+0x46>
 800de5a:	2400      	movs	r4, #0
 800de5c:	2500      	movs	r5, #0
 800de5e:	ecbd 8b04 	vpop	{d8-d9}
 800de62:	ec45 4b10 	vmov	d0, r4, r5
 800de66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de6a:	a38d      	add	r3, pc, #564	; (adr r3, 800e0a0 <__ieee754_exp+0x288>)
 800de6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de70:	ee10 0a10 	vmov	r0, s0
 800de74:	4629      	mov	r1, r5
 800de76:	f7f2 fdf7 	bl	8000a68 <__aeabi_dcmpgt>
 800de7a:	4607      	mov	r7, r0
 800de7c:	b130      	cbz	r0, 800de8c <__ieee754_exp+0x74>
 800de7e:	ecbd 8b04 	vpop	{d8-d9}
 800de82:	2000      	movs	r0, #0
 800de84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de88:	f000 b96f 	b.w	800e16a <__math_oflow>
 800de8c:	a386      	add	r3, pc, #536	; (adr r3, 800e0a8 <__ieee754_exp+0x290>)
 800de8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de92:	4620      	mov	r0, r4
 800de94:	4629      	mov	r1, r5
 800de96:	f7f2 fdc9 	bl	8000a2c <__aeabi_dcmplt>
 800de9a:	2800      	cmp	r0, #0
 800de9c:	f000 808b 	beq.w	800dfb6 <__ieee754_exp+0x19e>
 800dea0:	ecbd 8b04 	vpop	{d8-d9}
 800dea4:	4638      	mov	r0, r7
 800dea6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800deaa:	f000 b955 	b.w	800e158 <__math_uflow>
 800deae:	4a94      	ldr	r2, [pc, #592]	; (800e100 <__ieee754_exp+0x2e8>)
 800deb0:	4293      	cmp	r3, r2
 800deb2:	f240 80ac 	bls.w	800e00e <__ieee754_exp+0x1f6>
 800deb6:	4a93      	ldr	r2, [pc, #588]	; (800e104 <__ieee754_exp+0x2ec>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	d87c      	bhi.n	800dfb6 <__ieee754_exp+0x19e>
 800debc:	4b92      	ldr	r3, [pc, #584]	; (800e108 <__ieee754_exp+0x2f0>)
 800debe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec6:	ee10 0a10 	vmov	r0, s0
 800deca:	4629      	mov	r1, r5
 800decc:	f7f2 f984 	bl	80001d8 <__aeabi_dsub>
 800ded0:	4b8e      	ldr	r3, [pc, #568]	; (800e10c <__ieee754_exp+0x2f4>)
 800ded2:	00f7      	lsls	r7, r6, #3
 800ded4:	443b      	add	r3, r7
 800ded6:	ed93 7b00 	vldr	d7, [r3]
 800deda:	f1c6 0a01 	rsb	sl, r6, #1
 800dede:	4680      	mov	r8, r0
 800dee0:	4689      	mov	r9, r1
 800dee2:	ebaa 0a06 	sub.w	sl, sl, r6
 800dee6:	eeb0 8a47 	vmov.f32	s16, s14
 800deea:	eef0 8a67 	vmov.f32	s17, s15
 800deee:	ec53 2b18 	vmov	r2, r3, d8
 800def2:	4640      	mov	r0, r8
 800def4:	4649      	mov	r1, r9
 800def6:	f7f2 f96f 	bl	80001d8 <__aeabi_dsub>
 800defa:	4604      	mov	r4, r0
 800defc:	460d      	mov	r5, r1
 800defe:	4622      	mov	r2, r4
 800df00:	462b      	mov	r3, r5
 800df02:	4620      	mov	r0, r4
 800df04:	4629      	mov	r1, r5
 800df06:	f7f2 fb1f 	bl	8000548 <__aeabi_dmul>
 800df0a:	a369      	add	r3, pc, #420	; (adr r3, 800e0b0 <__ieee754_exp+0x298>)
 800df0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df10:	4606      	mov	r6, r0
 800df12:	460f      	mov	r7, r1
 800df14:	f7f2 fb18 	bl	8000548 <__aeabi_dmul>
 800df18:	a367      	add	r3, pc, #412	; (adr r3, 800e0b8 <__ieee754_exp+0x2a0>)
 800df1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1e:	f7f2 f95b 	bl	80001d8 <__aeabi_dsub>
 800df22:	4632      	mov	r2, r6
 800df24:	463b      	mov	r3, r7
 800df26:	f7f2 fb0f 	bl	8000548 <__aeabi_dmul>
 800df2a:	a365      	add	r3, pc, #404	; (adr r3, 800e0c0 <__ieee754_exp+0x2a8>)
 800df2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df30:	f7f2 f954 	bl	80001dc <__adddf3>
 800df34:	4632      	mov	r2, r6
 800df36:	463b      	mov	r3, r7
 800df38:	f7f2 fb06 	bl	8000548 <__aeabi_dmul>
 800df3c:	a362      	add	r3, pc, #392	; (adr r3, 800e0c8 <__ieee754_exp+0x2b0>)
 800df3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df42:	f7f2 f949 	bl	80001d8 <__aeabi_dsub>
 800df46:	4632      	mov	r2, r6
 800df48:	463b      	mov	r3, r7
 800df4a:	f7f2 fafd 	bl	8000548 <__aeabi_dmul>
 800df4e:	a360      	add	r3, pc, #384	; (adr r3, 800e0d0 <__ieee754_exp+0x2b8>)
 800df50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df54:	f7f2 f942 	bl	80001dc <__adddf3>
 800df58:	4632      	mov	r2, r6
 800df5a:	463b      	mov	r3, r7
 800df5c:	f7f2 faf4 	bl	8000548 <__aeabi_dmul>
 800df60:	4602      	mov	r2, r0
 800df62:	460b      	mov	r3, r1
 800df64:	4620      	mov	r0, r4
 800df66:	4629      	mov	r1, r5
 800df68:	f7f2 f936 	bl	80001d8 <__aeabi_dsub>
 800df6c:	4602      	mov	r2, r0
 800df6e:	460b      	mov	r3, r1
 800df70:	4606      	mov	r6, r0
 800df72:	460f      	mov	r7, r1
 800df74:	4620      	mov	r0, r4
 800df76:	4629      	mov	r1, r5
 800df78:	f7f2 fae6 	bl	8000548 <__aeabi_dmul>
 800df7c:	ec41 0b19 	vmov	d9, r0, r1
 800df80:	f1ba 0f00 	cmp.w	sl, #0
 800df84:	d15d      	bne.n	800e042 <__ieee754_exp+0x22a>
 800df86:	2200      	movs	r2, #0
 800df88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df8c:	4630      	mov	r0, r6
 800df8e:	4639      	mov	r1, r7
 800df90:	f7f2 f922 	bl	80001d8 <__aeabi_dsub>
 800df94:	4602      	mov	r2, r0
 800df96:	460b      	mov	r3, r1
 800df98:	ec51 0b19 	vmov	r0, r1, d9
 800df9c:	f7f2 fbfe 	bl	800079c <__aeabi_ddiv>
 800dfa0:	4622      	mov	r2, r4
 800dfa2:	462b      	mov	r3, r5
 800dfa4:	f7f2 f918 	bl	80001d8 <__aeabi_dsub>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	460b      	mov	r3, r1
 800dfac:	2000      	movs	r0, #0
 800dfae:	4958      	ldr	r1, [pc, #352]	; (800e110 <__ieee754_exp+0x2f8>)
 800dfb0:	f7f2 f912 	bl	80001d8 <__aeabi_dsub>
 800dfb4:	e74d      	b.n	800de52 <__ieee754_exp+0x3a>
 800dfb6:	4857      	ldr	r0, [pc, #348]	; (800e114 <__ieee754_exp+0x2fc>)
 800dfb8:	a347      	add	r3, pc, #284	; (adr r3, 800e0d8 <__ieee754_exp+0x2c0>)
 800dfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfbe:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800dfc2:	4629      	mov	r1, r5
 800dfc4:	4620      	mov	r0, r4
 800dfc6:	f7f2 fabf 	bl	8000548 <__aeabi_dmul>
 800dfca:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dfce:	f7f2 f905 	bl	80001dc <__adddf3>
 800dfd2:	f7f2 fd53 	bl	8000a7c <__aeabi_d2iz>
 800dfd6:	4682      	mov	sl, r0
 800dfd8:	f7f2 fa4c 	bl	8000474 <__aeabi_i2d>
 800dfdc:	a340      	add	r3, pc, #256	; (adr r3, 800e0e0 <__ieee754_exp+0x2c8>)
 800dfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe2:	4606      	mov	r6, r0
 800dfe4:	460f      	mov	r7, r1
 800dfe6:	f7f2 faaf 	bl	8000548 <__aeabi_dmul>
 800dfea:	4602      	mov	r2, r0
 800dfec:	460b      	mov	r3, r1
 800dfee:	4620      	mov	r0, r4
 800dff0:	4629      	mov	r1, r5
 800dff2:	f7f2 f8f1 	bl	80001d8 <__aeabi_dsub>
 800dff6:	a33c      	add	r3, pc, #240	; (adr r3, 800e0e8 <__ieee754_exp+0x2d0>)
 800dff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffc:	4680      	mov	r8, r0
 800dffe:	4689      	mov	r9, r1
 800e000:	4630      	mov	r0, r6
 800e002:	4639      	mov	r1, r7
 800e004:	f7f2 faa0 	bl	8000548 <__aeabi_dmul>
 800e008:	ec41 0b18 	vmov	d8, r0, r1
 800e00c:	e76f      	b.n	800deee <__ieee754_exp+0xd6>
 800e00e:	4a42      	ldr	r2, [pc, #264]	; (800e118 <__ieee754_exp+0x300>)
 800e010:	4293      	cmp	r3, r2
 800e012:	d811      	bhi.n	800e038 <__ieee754_exp+0x220>
 800e014:	a336      	add	r3, pc, #216	; (adr r3, 800e0f0 <__ieee754_exp+0x2d8>)
 800e016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01a:	ee10 0a10 	vmov	r0, s0
 800e01e:	4629      	mov	r1, r5
 800e020:	f7f2 f8dc 	bl	80001dc <__adddf3>
 800e024:	4b3a      	ldr	r3, [pc, #232]	; (800e110 <__ieee754_exp+0x2f8>)
 800e026:	2200      	movs	r2, #0
 800e028:	f7f2 fd1e 	bl	8000a68 <__aeabi_dcmpgt>
 800e02c:	b138      	cbz	r0, 800e03e <__ieee754_exp+0x226>
 800e02e:	4b38      	ldr	r3, [pc, #224]	; (800e110 <__ieee754_exp+0x2f8>)
 800e030:	2200      	movs	r2, #0
 800e032:	4620      	mov	r0, r4
 800e034:	4629      	mov	r1, r5
 800e036:	e70a      	b.n	800de4e <__ieee754_exp+0x36>
 800e038:	f04f 0a00 	mov.w	sl, #0
 800e03c:	e75f      	b.n	800defe <__ieee754_exp+0xe6>
 800e03e:	4682      	mov	sl, r0
 800e040:	e75d      	b.n	800defe <__ieee754_exp+0xe6>
 800e042:	4632      	mov	r2, r6
 800e044:	463b      	mov	r3, r7
 800e046:	2000      	movs	r0, #0
 800e048:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e04c:	f7f2 f8c4 	bl	80001d8 <__aeabi_dsub>
 800e050:	4602      	mov	r2, r0
 800e052:	460b      	mov	r3, r1
 800e054:	ec51 0b19 	vmov	r0, r1, d9
 800e058:	f7f2 fba0 	bl	800079c <__aeabi_ddiv>
 800e05c:	4602      	mov	r2, r0
 800e05e:	460b      	mov	r3, r1
 800e060:	ec51 0b18 	vmov	r0, r1, d8
 800e064:	f7f2 f8b8 	bl	80001d8 <__aeabi_dsub>
 800e068:	4642      	mov	r2, r8
 800e06a:	464b      	mov	r3, r9
 800e06c:	f7f2 f8b4 	bl	80001d8 <__aeabi_dsub>
 800e070:	4602      	mov	r2, r0
 800e072:	460b      	mov	r3, r1
 800e074:	2000      	movs	r0, #0
 800e076:	4926      	ldr	r1, [pc, #152]	; (800e110 <__ieee754_exp+0x2f8>)
 800e078:	f7f2 f8ae 	bl	80001d8 <__aeabi_dsub>
 800e07c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800e080:	4592      	cmp	sl, r2
 800e082:	db02      	blt.n	800e08a <__ieee754_exp+0x272>
 800e084:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800e088:	e6e3      	b.n	800de52 <__ieee754_exp+0x3a>
 800e08a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800e08e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800e092:	2200      	movs	r2, #0
 800e094:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800e098:	f7f2 fa56 	bl	8000548 <__aeabi_dmul>
 800e09c:	e6d9      	b.n	800de52 <__ieee754_exp+0x3a>
 800e09e:	bf00      	nop
 800e0a0:	fefa39ef 	.word	0xfefa39ef
 800e0a4:	40862e42 	.word	0x40862e42
 800e0a8:	d52d3051 	.word	0xd52d3051
 800e0ac:	c0874910 	.word	0xc0874910
 800e0b0:	72bea4d0 	.word	0x72bea4d0
 800e0b4:	3e663769 	.word	0x3e663769
 800e0b8:	c5d26bf1 	.word	0xc5d26bf1
 800e0bc:	3ebbbd41 	.word	0x3ebbbd41
 800e0c0:	af25de2c 	.word	0xaf25de2c
 800e0c4:	3f11566a 	.word	0x3f11566a
 800e0c8:	16bebd93 	.word	0x16bebd93
 800e0cc:	3f66c16c 	.word	0x3f66c16c
 800e0d0:	5555553e 	.word	0x5555553e
 800e0d4:	3fc55555 	.word	0x3fc55555
 800e0d8:	652b82fe 	.word	0x652b82fe
 800e0dc:	3ff71547 	.word	0x3ff71547
 800e0e0:	fee00000 	.word	0xfee00000
 800e0e4:	3fe62e42 	.word	0x3fe62e42
 800e0e8:	35793c76 	.word	0x35793c76
 800e0ec:	3dea39ef 	.word	0x3dea39ef
 800e0f0:	8800759c 	.word	0x8800759c
 800e0f4:	7e37e43c 	.word	0x7e37e43c
 800e0f8:	40862e41 	.word	0x40862e41
 800e0fc:	7fefffff 	.word	0x7fefffff
 800e100:	3fd62e42 	.word	0x3fd62e42
 800e104:	3ff0a2b1 	.word	0x3ff0a2b1
 800e108:	0800e488 	.word	0x0800e488
 800e10c:	0800e498 	.word	0x0800e498
 800e110:	3ff00000 	.word	0x3ff00000
 800e114:	0800e478 	.word	0x0800e478
 800e118:	3defffff 	.word	0x3defffff

0800e11c <with_errno>:
 800e11c:	b570      	push	{r4, r5, r6, lr}
 800e11e:	4604      	mov	r4, r0
 800e120:	460d      	mov	r5, r1
 800e122:	4616      	mov	r6, r2
 800e124:	f7ff fd2a 	bl	800db7c <__errno>
 800e128:	4629      	mov	r1, r5
 800e12a:	6006      	str	r6, [r0, #0]
 800e12c:	4620      	mov	r0, r4
 800e12e:	bd70      	pop	{r4, r5, r6, pc}

0800e130 <xflow>:
 800e130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e132:	4614      	mov	r4, r2
 800e134:	461d      	mov	r5, r3
 800e136:	b108      	cbz	r0, 800e13c <xflow+0xc>
 800e138:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e13c:	e9cd 2300 	strd	r2, r3, [sp]
 800e140:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e144:	4620      	mov	r0, r4
 800e146:	4629      	mov	r1, r5
 800e148:	f7f2 f9fe 	bl	8000548 <__aeabi_dmul>
 800e14c:	2222      	movs	r2, #34	; 0x22
 800e14e:	b003      	add	sp, #12
 800e150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e154:	f7ff bfe2 	b.w	800e11c <with_errno>

0800e158 <__math_uflow>:
 800e158:	b508      	push	{r3, lr}
 800e15a:	2200      	movs	r2, #0
 800e15c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e160:	f7ff ffe6 	bl	800e130 <xflow>
 800e164:	ec41 0b10 	vmov	d0, r0, r1
 800e168:	bd08      	pop	{r3, pc}

0800e16a <__math_oflow>:
 800e16a:	b508      	push	{r3, lr}
 800e16c:	2200      	movs	r2, #0
 800e16e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e172:	f7ff ffdd 	bl	800e130 <xflow>
 800e176:	ec41 0b10 	vmov	d0, r0, r1
 800e17a:	bd08      	pop	{r3, pc}

0800e17c <finite>:
 800e17c:	b082      	sub	sp, #8
 800e17e:	ed8d 0b00 	vstr	d0, [sp]
 800e182:	9801      	ldr	r0, [sp, #4]
 800e184:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e188:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e18c:	0fc0      	lsrs	r0, r0, #31
 800e18e:	b002      	add	sp, #8
 800e190:	4770      	bx	lr
	...

0800e194 <_init>:
 800e194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e196:	bf00      	nop
 800e198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e19a:	bc08      	pop	{r3}
 800e19c:	469e      	mov	lr, r3
 800e19e:	4770      	bx	lr

0800e1a0 <_fini>:
 800e1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1a2:	bf00      	nop
 800e1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1a6:	bc08      	pop	{r3}
 800e1a8:	469e      	mov	lr, r3
 800e1aa:	4770      	bx	lr
