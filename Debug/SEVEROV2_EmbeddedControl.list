
SEVEROV2_EmbeddedControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e944  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  0800ead8  0800ead8  0001ead8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ecc0  0800ecc0  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ecc0  0800ecc0  0001ecc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ecc8  0800ecc8  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ecc8  0800ecc8  0001ecc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eccc  0800eccc  0001eccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800ecd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          000030a0  200000a8  200000a8  000200a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003148  20003148  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023ab9  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005293  00000000  00000000  00043b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c48  00000000  00000000  00048e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a20  00000000  00000000  0004aa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002613e  00000000  00000000  0004c490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023956  00000000  00000000  000725ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc180  00000000  00000000  00095f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001720a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000078e0  00000000  00000000  001720f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eabc 	.word	0x0800eabc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800eabc 	.word	0x0800eabc

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b974 	b.w	8000e6c <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468e      	mov	lr, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d14d      	bne.n	8000c46 <__udivmoddi4+0xaa>
 8000baa:	428a      	cmp	r2, r1
 8000bac:	4694      	mov	ip, r2
 8000bae:	d969      	bls.n	8000c84 <__udivmoddi4+0xe8>
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	b152      	cbz	r2, 8000bcc <__udivmoddi4+0x30>
 8000bb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bba:	f1c2 0120 	rsb	r1, r2, #32
 8000bbe:	fa20 f101 	lsr.w	r1, r0, r1
 8000bc2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bca:	4094      	lsls	r4, r2
 8000bcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd0:	0c21      	lsrs	r1, r4, #16
 8000bd2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bd6:	fa1f f78c 	uxth.w	r7, ip
 8000bda:	fb08 e316 	mls	r3, r8, r6, lr
 8000bde:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000be2:	fb06 f107 	mul.w	r1, r6, r7
 8000be6:	4299      	cmp	r1, r3
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x64>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bf2:	f080 811f 	bcs.w	8000e34 <__udivmoddi4+0x298>
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	f240 811c 	bls.w	8000e34 <__udivmoddi4+0x298>
 8000bfc:	3e02      	subs	r6, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a5b      	subs	r3, r3, r1
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c08:	fb08 3310 	mls	r3, r8, r0, r3
 8000c0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c10:	fb00 f707 	mul.w	r7, r0, r7
 8000c14:	42a7      	cmp	r7, r4
 8000c16:	d90a      	bls.n	8000c2e <__udivmoddi4+0x92>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c20:	f080 810a 	bcs.w	8000e38 <__udivmoddi4+0x29c>
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	f240 8107 	bls.w	8000e38 <__udivmoddi4+0x29c>
 8000c2a:	4464      	add	r4, ip
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c32:	1be4      	subs	r4, r4, r7
 8000c34:	2600      	movs	r6, #0
 8000c36:	b11d      	cbz	r5, 8000c40 <__udivmoddi4+0xa4>
 8000c38:	40d4      	lsrs	r4, r2
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c40:	4631      	mov	r1, r6
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d909      	bls.n	8000c5e <__udivmoddi4+0xc2>
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	f000 80ef 	beq.w	8000e2e <__udivmoddi4+0x292>
 8000c50:	2600      	movs	r6, #0
 8000c52:	e9c5 0100 	strd	r0, r1, [r5]
 8000c56:	4630      	mov	r0, r6
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	fab3 f683 	clz	r6, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d14a      	bne.n	8000cfc <__udivmoddi4+0x160>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d302      	bcc.n	8000c70 <__udivmoddi4+0xd4>
 8000c6a:	4282      	cmp	r2, r0
 8000c6c:	f200 80f9 	bhi.w	8000e62 <__udivmoddi4+0x2c6>
 8000c70:	1a84      	subs	r4, r0, r2
 8000c72:	eb61 0303 	sbc.w	r3, r1, r3
 8000c76:	2001      	movs	r0, #1
 8000c78:	469e      	mov	lr, r3
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d0e0      	beq.n	8000c40 <__udivmoddi4+0xa4>
 8000c7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c82:	e7dd      	b.n	8000c40 <__udivmoddi4+0xa4>
 8000c84:	b902      	cbnz	r2, 8000c88 <__udivmoddi4+0xec>
 8000c86:	deff      	udf	#255	; 0xff
 8000c88:	fab2 f282 	clz	r2, r2
 8000c8c:	2a00      	cmp	r2, #0
 8000c8e:	f040 8092 	bne.w	8000db6 <__udivmoddi4+0x21a>
 8000c92:	eba1 010c 	sub.w	r1, r1, ip
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	2601      	movs	r6, #1
 8000ca0:	0c20      	lsrs	r0, r4, #16
 8000ca2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ca6:	fb07 1113 	mls	r1, r7, r3, r1
 8000caa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cae:	fb0e f003 	mul.w	r0, lr, r3
 8000cb2:	4288      	cmp	r0, r1
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x12c>
 8000cb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cba:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x12a>
 8000cc0:	4288      	cmp	r0, r1
 8000cc2:	f200 80cb 	bhi.w	8000e5c <__udivmoddi4+0x2c0>
 8000cc6:	4643      	mov	r3, r8
 8000cc8:	1a09      	subs	r1, r1, r0
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x156>
 8000ce0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ce8:	d202      	bcs.n	8000cf0 <__udivmoddi4+0x154>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f200 80bb 	bhi.w	8000e66 <__udivmoddi4+0x2ca>
 8000cf0:	4608      	mov	r0, r1
 8000cf2:	eba4 040e 	sub.w	r4, r4, lr
 8000cf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cfa:	e79c      	b.n	8000c36 <__udivmoddi4+0x9a>
 8000cfc:	f1c6 0720 	rsb	r7, r6, #32
 8000d00:	40b3      	lsls	r3, r6
 8000d02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d12:	431c      	orrs	r4, r3
 8000d14:	40f9      	lsrs	r1, r7
 8000d16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d22:	0c20      	lsrs	r0, r4, #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fb09 1118 	mls	r1, r9, r8, r1
 8000d2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d30:	fb08 f00e 	mul.w	r0, r8, lr
 8000d34:	4288      	cmp	r0, r1
 8000d36:	fa02 f206 	lsl.w	r2, r2, r6
 8000d3a:	d90b      	bls.n	8000d54 <__udivmoddi4+0x1b8>
 8000d3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d40:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d44:	f080 8088 	bcs.w	8000e58 <__udivmoddi4+0x2bc>
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	f240 8085 	bls.w	8000e58 <__udivmoddi4+0x2bc>
 8000d4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d52:	4461      	add	r1, ip
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d68:	458e      	cmp	lr, r1
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x1e2>
 8000d6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d70:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d74:	d26c      	bcs.n	8000e50 <__udivmoddi4+0x2b4>
 8000d76:	458e      	cmp	lr, r1
 8000d78:	d96a      	bls.n	8000e50 <__udivmoddi4+0x2b4>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4461      	add	r1, ip
 8000d7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d82:	fba0 9402 	umull	r9, r4, r0, r2
 8000d86:	eba1 010e 	sub.w	r1, r1, lr
 8000d8a:	42a1      	cmp	r1, r4
 8000d8c:	46c8      	mov	r8, r9
 8000d8e:	46a6      	mov	lr, r4
 8000d90:	d356      	bcc.n	8000e40 <__udivmoddi4+0x2a4>
 8000d92:	d053      	beq.n	8000e3c <__udivmoddi4+0x2a0>
 8000d94:	b15d      	cbz	r5, 8000dae <__udivmoddi4+0x212>
 8000d96:	ebb3 0208 	subs.w	r2, r3, r8
 8000d9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000da2:	fa22 f306 	lsr.w	r3, r2, r6
 8000da6:	40f1      	lsrs	r1, r6
 8000da8:	431f      	orrs	r7, r3
 8000daa:	e9c5 7100 	strd	r7, r1, [r5]
 8000dae:	2600      	movs	r6, #0
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	f1c2 0320 	rsb	r3, r2, #32
 8000dba:	40d8      	lsrs	r0, r3
 8000dbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dc4:	4091      	lsls	r1, r2
 8000dc6:	4301      	orrs	r1, r0
 8000dc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dcc:	fa1f fe8c 	uxth.w	lr, ip
 8000dd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000dd8:	0c0b      	lsrs	r3, r1, #16
 8000dda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dde:	fb00 f60e 	mul.w	r6, r0, lr
 8000de2:	429e      	cmp	r6, r3
 8000de4:	fa04 f402 	lsl.w	r4, r4, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x260>
 8000dea:	eb1c 0303 	adds.w	r3, ip, r3
 8000dee:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000df2:	d22f      	bcs.n	8000e54 <__udivmoddi4+0x2b8>
 8000df4:	429e      	cmp	r6, r3
 8000df6:	d92d      	bls.n	8000e54 <__udivmoddi4+0x2b8>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	1b9b      	subs	r3, r3, r6
 8000dfe:	b289      	uxth	r1, r1
 8000e00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e04:	fb07 3316 	mls	r3, r7, r6, r3
 8000e08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e10:	428b      	cmp	r3, r1
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x28a>
 8000e14:	eb1c 0101 	adds.w	r1, ip, r1
 8000e18:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e1c:	d216      	bcs.n	8000e4c <__udivmoddi4+0x2b0>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d914      	bls.n	8000e4c <__udivmoddi4+0x2b0>
 8000e22:	3e02      	subs	r6, #2
 8000e24:	4461      	add	r1, ip
 8000e26:	1ac9      	subs	r1, r1, r3
 8000e28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e2c:	e738      	b.n	8000ca0 <__udivmoddi4+0x104>
 8000e2e:	462e      	mov	r6, r5
 8000e30:	4628      	mov	r0, r5
 8000e32:	e705      	b.n	8000c40 <__udivmoddi4+0xa4>
 8000e34:	4606      	mov	r6, r0
 8000e36:	e6e3      	b.n	8000c00 <__udivmoddi4+0x64>
 8000e38:	4618      	mov	r0, r3
 8000e3a:	e6f8      	b.n	8000c2e <__udivmoddi4+0x92>
 8000e3c:	454b      	cmp	r3, r9
 8000e3e:	d2a9      	bcs.n	8000d94 <__udivmoddi4+0x1f8>
 8000e40:	ebb9 0802 	subs.w	r8, r9, r2
 8000e44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e48:	3801      	subs	r0, #1
 8000e4a:	e7a3      	b.n	8000d94 <__udivmoddi4+0x1f8>
 8000e4c:	4646      	mov	r6, r8
 8000e4e:	e7ea      	b.n	8000e26 <__udivmoddi4+0x28a>
 8000e50:	4620      	mov	r0, r4
 8000e52:	e794      	b.n	8000d7e <__udivmoddi4+0x1e2>
 8000e54:	4640      	mov	r0, r8
 8000e56:	e7d1      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e58:	46d0      	mov	r8, sl
 8000e5a:	e77b      	b.n	8000d54 <__udivmoddi4+0x1b8>
 8000e5c:	3b02      	subs	r3, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	e732      	b.n	8000cc8 <__udivmoddi4+0x12c>
 8000e62:	4630      	mov	r0, r6
 8000e64:	e709      	b.n	8000c7a <__udivmoddi4+0xde>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e742      	b.n	8000cf2 <__udivmoddi4+0x156>

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <fromTickToMs>:

uint32_t fromSecToTick(float sec) {
	return (sec * configTICK_RATE_HZ);
}

float fromTickToMs(uint32_t ticks) {
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	return ((float) (ticks) * 1000.0f) / (float) configTICK_RATE_HZ;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	ee07 3a90 	vmov	s15, r3
 8000e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e82:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000ea4 <fromTickToMs+0x34>
 8000e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e8a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000ea4 <fromTickToMs+0x34>
 8000e8e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000e92:	eef0 7a66 	vmov.f32	s15, s13
}
 8000e96:	eeb0 0a67 	vmov.f32	s0, s15
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	447a0000 	.word	0x447a0000

08000ea8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000eae:	4a18      	ldr	r2, [pc, #96]	; (8000f10 <MX_CAN1_Init+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000eb4:	2210      	movs	r2, #16
 8000eb6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ec6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ece:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ed2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000efa:	f004 fd07 	bl	800590c <HAL_CAN_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000f04:	f002 fe05 	bl	8003b12 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200000c4 	.word	0x200000c4
 8000f10:	40006400 	.word	0x40006400

08000f14 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <HAL_CAN_MspInit+0xa4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d13c      	bne.n	8000fb0 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <HAL_CAN_MspInit+0xa8>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a1f      	ldr	r2, [pc, #124]	; (8000fbc <HAL_CAN_MspInit+0xa8>)
 8000f40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HAL_CAN_MspInit+0xa8>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_CAN_MspInit+0xa8>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a18      	ldr	r2, [pc, #96]	; (8000fbc <HAL_CAN_MspInit+0xa8>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <HAL_CAN_MspInit+0xa8>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f80:	2309      	movs	r3, #9
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <HAL_CAN_MspInit+0xac>)
 8000f8c:	f005 ffbc 	bl	8006f08 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2105      	movs	r1, #5
 8000f94:	2013      	movs	r0, #19
 8000f96:	f005 f8a5 	bl	80060e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f9a:	2013      	movs	r0, #19
 8000f9c:	f005 f8be 	bl	800611c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2105      	movs	r1, #5
 8000fa4:	2014      	movs	r0, #20
 8000fa6:	f005 f89d 	bl	80060e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000faa:	2014      	movs	r0, #20
 8000fac:	f005 f8b6 	bl	800611c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	; 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40006400 	.word	0x40006400
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <GetCrc16Checksumm>:
#include "checksum.h"

uint16_t GetCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 8000fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fd4:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	len = len-2;
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	3b02      	subs	r3, #2
 8000fda:	807b      	strh	r3, [r7, #2]

    while (len--) {
 8000fdc:	e025      	b.n	800102a <GetCrc16Checksumm+0x66>
        crc ^= *pcBlock++ << 8;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	607a      	str	r2, [r7, #4]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fee:	4053      	eors	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	81fb      	strh	r3, [r7, #14]

        for (i = 0; i < 8; i++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	737b      	strb	r3, [r7, #13]
 8000ff8:	e014      	b.n	8001024 <GetCrc16Checksumm+0x60>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 8000ffa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	da09      	bge.n	8001016 <GetCrc16Checksumm+0x52>
 8001002:	89fb      	ldrh	r3, [r7, #14]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	b21b      	sxth	r3, r3
 8001008:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800100c:	f083 0301 	eor.w	r3, r3, #1
 8001010:	b21b      	sxth	r3, r3
 8001012:	b29b      	uxth	r3, r3
 8001014:	e002      	b.n	800101c <GetCrc16Checksumm+0x58>
 8001016:	89fb      	ldrh	r3, [r7, #14]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	b29b      	uxth	r3, r3
 800101c:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++)
 800101e:	7b7b      	ldrb	r3, [r7, #13]
 8001020:	3301      	adds	r3, #1
 8001022:	737b      	strb	r3, [r7, #13]
 8001024:	7b7b      	ldrb	r3, [r7, #13]
 8001026:	2b07      	cmp	r3, #7
 8001028:	d9e7      	bls.n	8000ffa <GetCrc16Checksumm+0x36>
    while (len--) {
 800102a:	887b      	ldrh	r3, [r7, #2]
 800102c:	1e5a      	subs	r2, r3, #1
 800102e:	807a      	strh	r2, [r7, #2]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1d4      	bne.n	8000fde <GetCrc16Checksumm+0x1a>
    }
    return crc;
 8001034:	89fb      	ldrh	r3, [r7, #14]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <IsCrc16ChecksummCorrect>:

bool IsCrc16ChecksummCorrect(uint8_t *pcBlock, uint16_t len)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	460b      	mov	r3, r1
 800104c:	807b      	strh	r3, [r7, #2]
	uint16_t crc_calculated = GetCrc16Checksumm(pcBlock, len);
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	4619      	mov	r1, r3
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffb6 	bl	8000fc4 <GetCrc16Checksumm>
 8001058:	4603      	mov	r3, r0
 800105a:	82fb      	strh	r3, [r7, #22]

	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	3b02      	subs	r3, #2
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	4413      	add	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
	uint16_t crc_got = *crc_pointer;
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	81fb      	strh	r3, [r7, #14]

	if(crc_got == crc_calculated) {
 800106c:	89fa      	ldrh	r2, [r7, #14]
 800106e:	8afb      	ldrh	r3, [r7, #22]
 8001070:	429a      	cmp	r2, r3
 8001072:	d101      	bne.n	8001078 <IsCrc16ChecksummCorrect+0x36>
		return true;
 8001074:	2301      	movs	r3, #1
 8001076:	e000      	b.n	800107a <IsCrc16ChecksummCorrect+0x38>
	}
	else {
		return false;
 8001078:	2300      	movs	r3, #0
	}
}
 800107a:	4618      	mov	r0, r3
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <AddCrc16Checksumm>:

void AddCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	460b      	mov	r3, r1
 800108c:	807b      	strh	r3, [r7, #2]
	uint16_t crc = GetCrc16Checksumm(pcBlock, len);
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	4619      	mov	r1, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ff96 	bl	8000fc4 <GetCrc16Checksumm>
 8001098:	4603      	mov	r3, r0
 800109a:	81fb      	strh	r3, [r7, #14]
	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	3b02      	subs	r3, #2
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	60bb      	str	r3, [r7, #8]
	*crc_pointer = crc;
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	89fa      	ldrh	r2, [r7, #14]
 80010aa:	801a      	strh	r2, [r3, #0]
}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <IsChecksumm8bCorrect>:
    msg[length - 2] = (uint8_t) (crc >> 8);
    msg[length - 1] = (uint8_t) crc;
}

bool IsChecksumm8bCorrect(uint8_t *msg, uint16_t length)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
    uint8_t crcGot, crc = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	75fb      	strb	r3, [r7, #23]
    int i;

    crcGot = msg[length-1] ;
 80010c4:	887b      	ldrh	r3, [r7, #2]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	4413      	add	r3, r2
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	73fb      	strb	r3, [r7, #15]

        for(i=0; i < length - 1; i++){
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	e009      	b.n	80010ea <IsChecksumm8bCorrect+0x36>
            crc ^= msg[i];
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	4413      	add	r3, r2
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	4053      	eors	r3, r2
 80010e2:	75fb      	strb	r3, [r7, #23]
        for(i=0; i < length - 1; i++){
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	3301      	adds	r3, #1
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	dbf0      	blt.n	80010d6 <IsChecksumm8bCorrect+0x22>
        }

    if(crc == crcGot)
 80010f4:	7dfa      	ldrb	r2, [r7, #23]
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d101      	bne.n	8001100 <IsChecksumm8bCorrect+0x4c>
        return 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <IsChecksumm8bCorrect+0x4e>
    else return 0;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	371c      	adds	r7, #28
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <AddChecksumm8b>:

void AddChecksumm8b(uint8_t *msg, uint16_t length)
{
 800110e:	b480      	push	{r7}
 8001110:	b085      	sub	sp, #20
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
	int i = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]

	for(i=0; i < length - 1; i++) {
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	e009      	b.n	800113c <AddChecksumm8b+0x2e>
		crc ^= msg[i];
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	781a      	ldrb	r2, [r3, #0]
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	4053      	eors	r3, r2
 8001134:	73fb      	strb	r3, [r7, #15]
	for(i=0; i < length - 1; i++) {
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	3301      	adds	r3, #1
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	887b      	ldrh	r3, [r7, #2]
 800113e:	3b01      	subs	r3, #1
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	429a      	cmp	r2, r3
 8001144:	dbf0      	blt.n	8001128 <AddChecksumm8b+0x1a>
	}

	msg[length-1] = crc;
 8001146:	887b      	ldrh	r3, [r7, #2]
 8001148:	3b01      	subs	r3, #1
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	701a      	strb	r2, [r3, #0]
}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <IsChecksumm8bCorrectVma>:

bool IsChecksumm8bCorrectVma(uint8_t *msg, uint16_t length)
{
 800115e:	b480      	push	{r7}
 8001160:	b087      	sub	sp, #28
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	460b      	mov	r3, r1
 8001168:	807b      	strh	r3, [r7, #2]
	uint8_t crcGot, crc = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	75fb      	strb	r3, [r7, #23]
	int i;

	crcGot = msg[length-1] ;
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	3b01      	subs	r3, #1
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	73fb      	strb	r3, [r7, #15]

	for (i = 1; i < length - 1; ++i) {
 800117a:	2301      	movs	r3, #1
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	e009      	b.n	8001194 <IsChecksumm8bCorrectVma+0x36>
		crc ^= msg[i];
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	781a      	ldrb	r2, [r3, #0]
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	4053      	eors	r3, r2
 800118c:	75fb      	strb	r3, [r7, #23]
	for (i = 1; i < length - 1; ++i) {
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	3301      	adds	r3, #1
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	3b01      	subs	r3, #1
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	429a      	cmp	r2, r3
 800119c:	dbf0      	blt.n	8001180 <IsChecksumm8bCorrectVma+0x22>
	}

	if (crc == crcGot) {
 800119e:	7dfa      	ldrb	r2, [r7, #23]
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d101      	bne.n	80011aa <IsChecksumm8bCorrectVma+0x4c>
		return 1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <IsChecksumm8bCorrectVma+0x4e>
	}
	else {
		return 0;
 80011aa:	2300      	movs	r3, #0
	}
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	371c      	adds	r7, #28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <AddChecksumm8bVma>:

void AddChecksumm8bVma(uint8_t *msg, uint16_t length)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]

	for(int i = 1; i < length - 1; i++) {
 80011c8:	2301      	movs	r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	e009      	b.n	80011e2 <AddChecksumm8bVma+0x2a>
		crc ^= msg[i];
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	4413      	add	r3, r2
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	4053      	eors	r3, r2
 80011da:	73fb      	strb	r3, [r7, #15]
	for(int i = 1; i < length - 1; i++) {
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	3301      	adds	r3, #1
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	887b      	ldrh	r3, [r7, #2]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dbf0      	blt.n	80011ce <AddChecksumm8bVma+0x16>
	}

	msg[length-1] = crc;
 80011ec:	887b      	ldrh	r3, [r7, #2]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	4413      	add	r3, r2
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	701a      	strb	r2, [r3, #0]
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <PickBit>:
        array[i] = 0x00;
    }
}

bool PickBit(uint8_t input, uint8_t bit)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	460a      	mov	r2, r1
 800120e:	71fb      	strb	r3, [r7, #7]
 8001210:	4613      	mov	r3, r2
 8001212:	71bb      	strb	r3, [r7, #6]
	//return (bool) ((input << (7 - bit)) >> 7);

	switch(bit) {
 8001214:	79bb      	ldrb	r3, [r7, #6]
 8001216:	2b07      	cmp	r3, #7
 8001218:	d857      	bhi.n	80012ca <PickBit+0xc6>
 800121a:	a201      	add	r2, pc, #4	; (adr r2, 8001220 <PickBit+0x1c>)
 800121c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001220:	08001241 	.word	0x08001241
 8001224:	08001253 	.word	0x08001253
 8001228:	08001265 	.word	0x08001265
 800122c:	08001277 	.word	0x08001277
 8001230:	08001289 	.word	0x08001289
 8001234:	0800129b 	.word	0x0800129b
 8001238:	080012ad 	.word	0x080012ad
 800123c:	080012bf 	.word	0x080012bf
	case 0:
			return (bool) (input & 0b00000001);
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	bf14      	ite	ne
 800124a:	2301      	movne	r3, #1
 800124c:	2300      	moveq	r3, #0
 800124e:	b2db      	uxtb	r3, r3
 8001250:	e03c      	b.n	80012cc <PickBit+0xc8>
	case 1:
			return (bool) (input & 0b00000010);
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	bf14      	ite	ne
 800125c:	2301      	movne	r3, #1
 800125e:	2300      	moveq	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	e033      	b.n	80012cc <PickBit+0xc8>
	case 2:
			return (bool) (input & 0b00000100);
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf14      	ite	ne
 800126e:	2301      	movne	r3, #1
 8001270:	2300      	moveq	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	e02a      	b.n	80012cc <PickBit+0xc8>
	case 3:
			return (bool) (input & 0b00001000);
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	2b00      	cmp	r3, #0
 800127e:	bf14      	ite	ne
 8001280:	2301      	movne	r3, #1
 8001282:	2300      	moveq	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	e021      	b.n	80012cc <PickBit+0xc8>
	case 4:
			return (bool) (input & 0b00010000);
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	2b00      	cmp	r3, #0
 8001290:	bf14      	ite	ne
 8001292:	2301      	movne	r3, #1
 8001294:	2300      	moveq	r3, #0
 8001296:	b2db      	uxtb	r3, r3
 8001298:	e018      	b.n	80012cc <PickBit+0xc8>
	case 5:
			return (bool) (input & 0b00100000);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f003 0320 	and.w	r3, r3, #32
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	bf14      	ite	ne
 80012a4:	2301      	movne	r3, #1
 80012a6:	2300      	moveq	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	e00f      	b.n	80012cc <PickBit+0xc8>
	case 6:
			return (bool) (input & 0b01000000);
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bf14      	ite	ne
 80012b6:	2301      	movne	r3, #1
 80012b8:	2300      	moveq	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	e006      	b.n	80012cc <PickBit+0xc8>
	case 7:
			return (bool) (input & 0b10000000);
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	09db      	lsrs	r3, r3, #7
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	e000      	b.n	80012cc <PickBit+0xc8>
	}
	return false;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <variableInit>:
bool i2c1PackageTransmit = false;
bool i2c1PackageReceived = false;


void variableInit()
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 80012de:	af00      	add	r7, sp, #0
	rComputer.reset = 0;
 80012e0:	4b47      	ldr	r3, [pc, #284]	; (8001400 <variableInit+0x128>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]

	rState.cameraNum = 0;
 80012e6:	4b47      	ldr	r3, [pc, #284]	; (8001404 <variableInit+0x12c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
	rState.contourSelected = 0;
 80012ec:	4b45      	ldr	r3, [pc, #276]	; (8001404 <variableInit+0x12c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	705a      	strb	r2, [r3, #1]
	rState.flash = 0;
 80012f2:	4b44      	ldr	r3, [pc, #272]	; (8001404 <variableInit+0x12c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	709a      	strb	r2, [r3, #2]
	rState.operationMode = 0;
 80012f8:	4b42      	ldr	r3, [pc, #264]	; (8001404 <variableInit+0x12c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	70da      	strb	r2, [r3, #3]
	rState.pcCounter = 0;
 80012fe:	4b41      	ldr	r3, [pc, #260]	; (8001404 <variableInit+0x12c>)
 8001300:	2200      	movs	r2, #0
 8001302:	711a      	strb	r2, [r3, #4]
	rState.lag_error = 0;
 8001304:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <variableInit+0x12c>)
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	609a      	str	r2, [r3, #8]

	rSensors.yaw = 0;
 800130c:	4b3e      	ldr	r3, [pc, #248]	; (8001408 <variableInit+0x130>)
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
	rSensors.raw_yaw = 0;
 8001314:	4b3c      	ldr	r3, [pc, #240]	; (8001408 <variableInit+0x130>)
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
	rSensors.roll =  0;
 800131c:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <variableInit+0x130>)
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
	rSensors.pitch =  0;
 8001324:	4b38      	ldr	r3, [pc, #224]	; (8001408 <variableInit+0x130>)
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	605a      	str	r2, [r3, #4]

	rSensors.old_yaw = 0;
 800132c:	4b36      	ldr	r3, [pc, #216]	; (8001408 <variableInit+0x130>)
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
	rSensors.spins = 0;
 8001334:	4b34      	ldr	r3, [pc, #208]	; (8001408 <variableInit+0x130>)
 8001336:	2200      	movs	r2, #0
 8001338:	831a      	strh	r2, [r3, #24]

	rSensors.pressure = 0;
 800133a:	4b33      	ldr	r3, [pc, #204]	; (8001408 <variableInit+0x130>)
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	655a      	str	r2, [r3, #84]	; 0x54
	rSensors.pressure_null = 0;
 8001342:	4b31      	ldr	r3, [pc, #196]	; (8001408 <variableInit+0x130>)
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	659a      	str	r2, [r3, #88]	; 0x58

	rSensors.rollSpeed = 0;
 800134a:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <variableInit+0x130>)
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
	rSensors.pitchSpeed = 0;
 8001352:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <variableInit+0x130>)
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	621a      	str	r2, [r3, #32]
	rSensors.yawSpeed = 0;
 800135a:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <variableInit+0x130>)
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24

	rSensors.accelX = 0;
 8001362:	4b29      	ldr	r3, [pc, #164]	; (8001408 <variableInit+0x130>)
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	629a      	str	r2, [r3, #40]	; 0x28
	rSensors.accelY = 0;
 800136a:	4b27      	ldr	r3, [pc, #156]	; (8001408 <variableInit+0x130>)
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	62da      	str	r2, [r3, #44]	; 0x2c
	rSensors.accelZ = 0;
 8001372:	4b25      	ldr	r3, [pc, #148]	; (8001408 <variableInit+0x130>)
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	631a      	str	r2, [r3, #48]	; 0x30

	rSensors.magX = 0;
 800137a:	4b23      	ldr	r3, [pc, #140]	; (8001408 <variableInit+0x130>)
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	635a      	str	r2, [r3, #52]	; 0x34
	rSensors.magY = 0;
 8001382:	4b21      	ldr	r3, [pc, #132]	; (8001408 <variableInit+0x130>)
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	639a      	str	r2, [r3, #56]	; 0x38
	rSensors.magZ = 0;
 800138a:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <variableInit+0x130>)
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	63da      	str	r2, [r3, #60]	; 0x3c

	rSensors.quatA = 0;
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <variableInit+0x130>)
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	641a      	str	r2, [r3, #64]	; 0x40
	rSensors.quatB = 0;
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <variableInit+0x130>)
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	645a      	str	r2, [r3, #68]	; 0x44
	rSensors.quatC = 0;
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <variableInit+0x130>)
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	649a      	str	r2, [r3, #72]	; 0x48
	rSensors.quatD = 0;
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <variableInit+0x130>)
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	64da      	str	r2, [r3, #76]	; 0x4c

    rDevice[DEV1].address = 0x03;
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <variableInit+0x134>)
 80013b4:	2203      	movs	r2, #3
 80013b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    rDevice[DEV2].address = 0x05;
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <variableInit+0x134>)
 80013bc:	2205      	movs	r2, #5
 80013be:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    rDevice[GRAB].address = 0x02;
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <variableInit+0x134>)
 80013c4:	2202      	movs	r2, #2
 80013c6:	729a      	strb	r2, [r3, #10]
    rDevice[GRAB_ROTATION].address = 0x06;
 80013c8:	4b10      	ldr	r3, [pc, #64]	; (800140c <variableInit+0x134>)
 80013ca:	2206      	movs	r2, #6
 80013cc:	751a      	strb	r2, [r3, #20]
    rDevice[TILT].address = 0x01;
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <variableInit+0x134>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	779a      	strb	r2, [r3, #30]

	rSensors.resetIMU = true;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <variableInit+0x130>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	thrustersInit();
 80013dc:	f003 fb74 	bl	8004ac8 <thrustersInit>

	// Flash reading
	struct flashConfiguration_s config;
	flashReadSettings(&config);
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 fa2e 	bl	8002844 <flashReadSettings>
	flashReadStructure(&config);
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 fbf8 	bl	8002be0 <flashReadStructure>

	// Thrusters initialization
	if(rState.flash) {
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <variableInit+0x12c>)
 80013f2:	789b      	ldrb	r3, [r3, #2]
 80013f4:	2b00      	cmp	r3, #0
		return;
	}
}
 80013f6:	f507 770c 	add.w	r7, r7, #560	; 0x230
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20001d38 	.word	0x20001d38
 8001404:	20001c04 	.word	0x20001c04
 8001408:	20001cd0 	.word	0x20001cd0
 800140c:	20001d54 	.word	0x20001d54

08001410 <uartBusesInit>:

void uartBusesInit()
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
	// Shore UART configuration
	uartBus[SHORE_UART].huart = &huart3; // Link to huart will be set before receiving
 8001416:	4b75      	ldr	r3, [pc, #468]	; (80015ec <uartBusesInit+0x1dc>)
 8001418:	4a75      	ldr	r2, [pc, #468]	; (80015f0 <uartBusesInit+0x1e0>)
 800141a:	631a      	str	r2, [r3, #48]	; 0x30
	uartBus[SHORE_UART].rxBuffer = ShoreRequestBuffer;
 800141c:	4b73      	ldr	r3, [pc, #460]	; (80015ec <uartBusesInit+0x1dc>)
 800141e:	4a75      	ldr	r2, [pc, #468]	; (80015f4 <uartBusesInit+0x1e4>)
 8001420:	601a      	str	r2, [r3, #0]
	uartBus[SHORE_UART].txBuffer = ShoreResponseBuffer;
 8001422:	4b72      	ldr	r3, [pc, #456]	; (80015ec <uartBusesInit+0x1dc>)
 8001424:	4a74      	ldr	r2, [pc, #464]	; (80015f8 <uartBusesInit+0x1e8>)
 8001426:	605a      	str	r2, [r3, #4]
	uartBus[SHORE_UART].rxLength = 0; // Length of the received message will be determined when first byte will be received
 8001428:	4b70      	ldr	r3, [pc, #448]	; (80015ec <uartBusesInit+0x1dc>)
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	uartBus[SHORE_UART].txLength = 0; // Length of the transmitted message will be determined before transmit
 8001430:	4b6e      	ldr	r3, [pc, #440]	; (80015ec <uartBusesInit+0x1dc>)
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	uartBus[SHORE_UART].brokenRxTolerance = 20;
 8001438:	4b6c      	ldr	r3, [pc, #432]	; (80015ec <uartBusesInit+0x1dc>)
 800143a:	2214      	movs	r2, #20
 800143c:	771a      	strb	r2, [r3, #28]
	uartBus[SHORE_UART].timeoutRxTolerance = 500;
 800143e:	4b6b      	ldr	r3, [pc, #428]	; (80015ec <uartBusesInit+0x1dc>)
 8001440:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001444:	621a      	str	r2, [r3, #32]
	uartBus[SHORE_UART].receiveTimeout = 200;
 8001446:	4b69      	ldr	r3, [pc, #420]	; (80015ec <uartBusesInit+0x1dc>)
 8001448:	22c8      	movs	r2, #200	; 0xc8
 800144a:	629a      	str	r2, [r3, #40]	; 0x28
	uartBus[SHORE_UART].transmitTimeout = 200;
 800144c:	4b67      	ldr	r3, [pc, #412]	; (80015ec <uartBusesInit+0x1dc>)
 800144e:	22c8      	movs	r2, #200	; 0xc8
 8001450:	62da      	str	r2, [r3, #44]	; 0x2c
	uartBus[SHORE_UART].txrxType = TXRX_IT;
 8001452:	4b66      	ldr	r3, [pc, #408]	; (80015ec <uartBusesInit+0x1dc>)
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	// Thrusters UART configuration
	uartBus[THRUSTERS_UART].huart = &huart1;
 800145a:	4b64      	ldr	r3, [pc, #400]	; (80015ec <uartBusesInit+0x1dc>)
 800145c:	4a67      	ldr	r2, [pc, #412]	; (80015fc <uartBusesInit+0x1ec>)
 800145e:	669a      	str	r2, [r3, #104]	; 0x68
	uartBus[THRUSTERS_UART].rxBuffer = 0; // Receive bugger will be set before receive
 8001460:	4b62      	ldr	r3, [pc, #392]	; (80015ec <uartBusesInit+0x1dc>)
 8001462:	2200      	movs	r2, #0
 8001464:	639a      	str	r2, [r3, #56]	; 0x38
	uartBus[THRUSTERS_UART].txBuffer = 0; // Transmit bugger will be set before transmit
 8001466:	4b61      	ldr	r3, [pc, #388]	; (80015ec <uartBusesInit+0x1dc>)
 8001468:	2200      	movs	r2, #0
 800146a:	63da      	str	r2, [r3, #60]	; 0x3c
	uartBus[THRUSTERS_UART].rxLength = 0; // Receive length will be set before transmit
 800146c:	4b5f      	ldr	r3, [pc, #380]	; (80015ec <uartBusesInit+0x1dc>)
 800146e:	2200      	movs	r2, #0
 8001470:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	uartBus[THRUSTERS_UART].txLength = 0; // Transmit length will be set before transmit
 8001474:	4b5d      	ldr	r3, [pc, #372]	; (80015ec <uartBusesInit+0x1dc>)
 8001476:	2200      	movs	r2, #0
 8001478:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	uartBus[THRUSTERS_UART].brokenRxTolerance = 0; // There is no special event on this bus
 800147c:	4b5b      	ldr	r3, [pc, #364]	; (80015ec <uartBusesInit+0x1dc>)
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	uartBus[THRUSTERS_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001484:	4b59      	ldr	r3, [pc, #356]	; (80015ec <uartBusesInit+0x1dc>)
 8001486:	2200      	movs	r2, #0
 8001488:	659a      	str	r2, [r3, #88]	; 0x58
	uartBus[THRUSTERS_UART].receiveTimeout = 100;
 800148a:	4b58      	ldr	r3, [pc, #352]	; (80015ec <uartBusesInit+0x1dc>)
 800148c:	2264      	movs	r2, #100	; 0x64
 800148e:	661a      	str	r2, [r3, #96]	; 0x60
	uartBus[THRUSTERS_UART].transmitTimeout = 100;
 8001490:	4b56      	ldr	r3, [pc, #344]	; (80015ec <uartBusesInit+0x1dc>)
 8001492:	2264      	movs	r2, #100	; 0x64
 8001494:	665a      	str	r2, [r3, #100]	; 0x64
	uartBus[THRUSTERS_UART].txrxType = TXRX_DMA;
 8001496:	4b55      	ldr	r3, [pc, #340]	; (80015ec <uartBusesInit+0x1dc>)
 8001498:	2201      	movs	r2, #1
 800149a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	// Devices UART configuration
	uartBus[DEVICES_UART].huart = &huart1;
 800149e:	4b53      	ldr	r3, [pc, #332]	; (80015ec <uartBusesInit+0x1dc>)
 80014a0:	4a56      	ldr	r2, [pc, #344]	; (80015fc <uartBusesInit+0x1ec>)
 80014a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	uartBus[DEVICES_UART].rxBuffer = 0; // Receive bugger will be set before receive
 80014a6:	4b51      	ldr	r3, [pc, #324]	; (80015ec <uartBusesInit+0x1dc>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	671a      	str	r2, [r3, #112]	; 0x70
	uartBus[DEVICES_UART].txBuffer = 0; // Transmit bugger will be set before transmit
 80014ac:	4b4f      	ldr	r3, [pc, #316]	; (80015ec <uartBusesInit+0x1dc>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	675a      	str	r2, [r3, #116]	; 0x74
	uartBus[DEVICES_UART].rxLength = DEVICES_REQUEST_LENGTH;
 80014b2:	4b4e      	ldr	r3, [pc, #312]	; (80015ec <uartBusesInit+0x1dc>)
 80014b4:	2207      	movs	r2, #7
 80014b6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	uartBus[DEVICES_UART].txLength = DEVICES_RESPONSE_LENGTH;
 80014ba:	4b4c      	ldr	r3, [pc, #304]	; (80015ec <uartBusesInit+0x1dc>)
 80014bc:	220a      	movs	r2, #10
 80014be:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	uartBus[DEVICES_UART].brokenRxTolerance = 0; // There is no special event on this bus
 80014c2:	4b4a      	ldr	r3, [pc, #296]	; (80015ec <uartBusesInit+0x1dc>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	uartBus[DEVICES_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 80014ca:	4b48      	ldr	r3, [pc, #288]	; (80015ec <uartBusesInit+0x1dc>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	uartBus[DEVICES_UART].receiveTimeout = 100;
 80014d2:	4b46      	ldr	r3, [pc, #280]	; (80015ec <uartBusesInit+0x1dc>)
 80014d4:	2264      	movs	r2, #100	; 0x64
 80014d6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	uartBus[DEVICES_UART].transmitTimeout = 100;
 80014da:	4b44      	ldr	r3, [pc, #272]	; (80015ec <uartBusesInit+0x1dc>)
 80014dc:	2264      	movs	r2, #100	; 0x64
 80014de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	uartBus[DEVICES_UART].txrxType = TXRX_DMA;
 80014e2:	4b42      	ldr	r3, [pc, #264]	; (80015ec <uartBusesInit+0x1dc>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

	// IMU UART configuration
	uartBus[IMU_UART].huart = &huart2;
 80014ea:	4b40      	ldr	r3, [pc, #256]	; (80015ec <uartBusesInit+0x1dc>)
 80014ec:	4a44      	ldr	r2, [pc, #272]	; (8001600 <uartBusesInit+0x1f0>)
 80014ee:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
 80014f2:	4b3e      	ldr	r3, [pc, #248]	; (80015ec <uartBusesInit+0x1dc>)
 80014f4:	4a43      	ldr	r2, [pc, #268]	; (8001604 <uartBusesInit+0x1f4>)
 80014f6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	uartBus[IMU_UART].txBuffer = 0; // Buffer will be set before transmit
 80014fa:	4b3c      	ldr	r3, [pc, #240]	; (80015ec <uartBusesInit+0x1dc>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uartBus[IMU_UART].rxLength = 0; // Receive length will be set before transmit
 8001502:	4b3a      	ldr	r3, [pc, #232]	; (80015ec <uartBusesInit+0x1dc>)
 8001504:	2200      	movs	r2, #0
 8001506:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	uartBus[IMU_UART].txLength = 0; // Transmit length will be set before transmit
 800150a:	4b38      	ldr	r3, [pc, #224]	; (80015ec <uartBusesInit+0x1dc>)
 800150c:	2200      	movs	r2, #0
 800150e:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	uartBus[IMU_UART].brokenRxTolerance = 0; // There is no special event on this bus
 8001512:	4b36      	ldr	r3, [pc, #216]	; (80015ec <uartBusesInit+0x1dc>)
 8001514:	2200      	movs	r2, #0
 8001516:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	uartBus[IMU_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 800151a:	4b34      	ldr	r3, [pc, #208]	; (80015ec <uartBusesInit+0x1dc>)
 800151c:	2200      	movs	r2, #0
 800151e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	uartBus[IMU_UART].receiveTimeout = 100;
 8001522:	4b32      	ldr	r3, [pc, #200]	; (80015ec <uartBusesInit+0x1dc>)
 8001524:	2264      	movs	r2, #100	; 0x64
 8001526:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	uartBus[IMU_UART].transmitTimeout = 100;
 800152a:	4b30      	ldr	r3, [pc, #192]	; (80015ec <uartBusesInit+0x1dc>)
 800152c:	2264      	movs	r2, #100	; 0x64
 800152e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	uartBus[IMU_UART].txrxType = TXRX_IT;
 8001532:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <uartBusesInit+0x1dc>)
 8001534:	2200      	movs	r2, #0
 8001536:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

	for(uint8_t i=0; i<UART_NUMBER; i++) {
 800153a:	2300      	movs	r3, #0
 800153c:	71fb      	strb	r3, [r7, #7]
 800153e:	e04a      	b.n	80015d6 <uartBusesInit+0x1c6>
		uartBus[i].packageReceived = false;
 8001540:	79fa      	ldrb	r2, [r7, #7]
 8001542:	492a      	ldr	r1, [pc, #168]	; (80015ec <uartBusesInit+0x1dc>)
 8001544:	4613      	mov	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	1a9b      	subs	r3, r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	3308      	adds	r3, #8
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
		uartBus[i].packageTransmitted = false;
 8001554:	79fa      	ldrb	r2, [r7, #7]
 8001556:	4925      	ldr	r1, [pc, #148]	; (80015ec <uartBusesInit+0x1dc>)
 8001558:	4613      	mov	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	1a9b      	subs	r3, r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	440b      	add	r3, r1
 8001562:	3309      	adds	r3, #9
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
		uartBus[i].successRxCounter = 0;
 8001568:	79fa      	ldrb	r2, [r7, #7]
 800156a:	4920      	ldr	r1, [pc, #128]	; (80015ec <uartBusesInit+0x1dc>)
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	1a9b      	subs	r3, r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	440b      	add	r3, r1
 8001576:	330a      	adds	r3, #10
 8001578:	2200      	movs	r2, #0
 800157a:	801a      	strh	r2, [r3, #0]
		uartBus[i].brokenRxCounter = 0;
 800157c:	79fa      	ldrb	r2, [r7, #7]
 800157e:	491b      	ldr	r1, [pc, #108]	; (80015ec <uartBusesInit+0x1dc>)
 8001580:	4613      	mov	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	1a9b      	subs	r3, r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	440b      	add	r3, r1
 800158a:	330c      	adds	r3, #12
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
		uartBus[i].outdatedRxCounter = 0;
 8001590:	79fa      	ldrb	r2, [r7, #7]
 8001592:	4916      	ldr	r1, [pc, #88]	; (80015ec <uartBusesInit+0x1dc>)
 8001594:	4613      	mov	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	440b      	add	r3, r1
 800159e:	3310      	adds	r3, #16
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
		uartBus[i].timeoutCounter = 0;
 80015a4:	79fa      	ldrb	r2, [r7, #7]
 80015a6:	4911      	ldr	r1, [pc, #68]	; (80015ec <uartBusesInit+0x1dc>)
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	440b      	add	r3, r1
 80015b2:	3314      	adds	r3, #20
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
		uartBus[i].lastMessage = 0;
 80015ba:	79fa      	ldrb	r2, [r7, #7]
 80015bc:	490b      	ldr	r1, [pc, #44]	; (80015ec <uartBusesInit+0x1dc>)
 80015be:	4613      	mov	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	1a9b      	subs	r3, r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	440b      	add	r3, r1
 80015c8:	3318      	adds	r3, #24
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	3301      	adds	r3, #1
 80015d4:	71fb      	strb	r3, [r7, #7]
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d9b1      	bls.n	8001540 <uartBusesInit+0x130>
	}
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	200000ec 	.word	0x200000ec
 80015f0:	2000244c 	.word	0x2000244c
 80015f4:	20002154 	.word	0x20002154
 80015f8:	200021a8 	.word	0x200021a8
 80015fc:	200023c4 	.word	0x200023c4
 8001600:	20002408 	.word	0x20002408
 8001604:	2000220c 	.word	0x2000220c

08001608 <transmitPackage>:

bool transmitPackage(struct uartBus_s *bus, bool isrMode)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	70fb      	strb	r3, [r7, #3]
    bus->packageTransmitted = false;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	725a      	strb	r2, [r3, #9]

    HAL_UART_AbortTransmit_IT(bus->huart);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4618      	mov	r0, r3
 8001620:	f008 fd00 	bl	800a024 <HAL_UART_AbortTransmit_IT>
    switch(bus->txrxType) {
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00d      	beq.n	800164a <transmitPackage+0x42>
 800162e:	2b01      	cmp	r3, #1
 8001630:	d117      	bne.n	8001662 <transmitPackage+0x5a>
        case TXRX_DMA:
            HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6859      	ldr	r1, [r3, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001640:	b29b      	uxth	r3, r3
 8001642:	461a      	mov	r2, r3
 8001644:	f008 fc40 	bl	8009ec8 <HAL_UART_Transmit_DMA>
            break;
 8001648:	e00d      	b.n	8001666 <transmitPackage+0x5e>
        case TXRX_IT:
        	HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6859      	ldr	r1, [r3, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001658:	b29b      	uxth	r3, r3
 800165a:	461a      	mov	r2, r3
 800165c:	f008 fbbf 	bl	8009dde <HAL_UART_Transmit_IT>
            break;
 8001660:	e001      	b.n	8001666 <transmitPackage+0x5e>
        default:
            return false;
 8001662:	2300      	movs	r3, #0
 8001664:	e036      	b.n	80016d4 <transmitPackage+0xcc>
    }

    bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 8001666:	f00b fa7b 	bl	800cb60 <xTaskGetTickCount>
 800166a:	4603      	mov	r3, r0
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fbff 	bl	8000e70 <fromTickToMs>
 8001672:	eef0 7a40 	vmov.f32	s15, s0
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	edc3 7a05 	vstr	s15, [r3, #20]
    while (!bus->packageTransmitted && !isrMode) {
 800167c:	e01c      	b.n	80016b8 <transmitPackage+0xb0>
    	if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 800167e:	f00b fa6f 	bl	800cb60 <xTaskGetTickCount>
 8001682:	4603      	mov	r3, r0
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fbf3 	bl	8000e70 <fromTickToMs>
 800168a:	eeb0 7a40 	vmov.f32	s14, s0
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	edd3 7a05 	vldr	s15, [r3, #20]
 8001694:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ac:	dd01      	ble.n	80016b2 <transmitPackage+0xaa>
    		return false;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e010      	b.n	80016d4 <transmitPackage+0xcc>
    	}
    	osDelay(DELAY_UART_TIMEOUT);
 80016b2:	2032      	movs	r0, #50	; 0x32
 80016b4:	f009 ffc9 	bl	800b64a <osDelay>
    while (!bus->packageTransmitted && !isrMode) {
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7a5b      	ldrb	r3, [r3, #9]
 80016bc:	f083 0301 	eor.w	r3, r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <transmitPackage+0xca>
 80016c6:	78fb      	ldrb	r3, [r7, #3]
 80016c8:	f083 0301 	eor.w	r3, r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1d5      	bne.n	800167e <transmitPackage+0x76>
    }
    return true;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <transmitAndReceive>:
	}
	return true;
}

bool transmitAndReceive(struct uartBus_s *bus, bool isrMode)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	70fb      	strb	r3, [r7, #3]
	bus->packageReceived = false;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	721a      	strb	r2, [r3, #8]
	bus->packageTransmitted = false;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	725a      	strb	r2, [r3, #9]

	HAL_UART_AbortReceive_IT(bus->huart);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	4618      	mov	r0, r3
 80016fa:	f008 fd07 	bl	800a10c <HAL_UART_AbortReceive_IT>
	HAL_UART_AbortTransmit_IT(bus->huart);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4618      	mov	r0, r3
 8001704:	f008 fc8e 	bl	800a024 <HAL_UART_AbortTransmit_IT>
	switch(bus->txrxType) {
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800170e:	2b00      	cmp	r3, #0
 8001710:	d018      	beq.n	8001744 <transmitAndReceive+0x68>
 8001712:	2b01      	cmp	r3, #1
 8001714:	d12d      	bne.n	8001772 <transmitAndReceive+0x96>
		case TXRX_DMA:
			HAL_UART_Receive_DMA(bus->huart, bus->rxBuffer, bus->rxLength);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6819      	ldr	r1, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001724:	b29b      	uxth	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	f008 fc4c 	bl	8009fc4 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6859      	ldr	r1, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800173a:	b29b      	uxth	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	f008 fbc3 	bl	8009ec8 <HAL_UART_Transmit_DMA>
			break;
 8001742:	e018      	b.n	8001776 <transmitAndReceive+0x9a>
		case TXRX_IT:
			HAL_UART_Receive_IT(bus->huart, bus->rxBuffer, bus->rxLength);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6819      	ldr	r1, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001752:	b29b      	uxth	r3, r3
 8001754:	461a      	mov	r2, r3
 8001756:	f008 fb87 	bl	8009e68 <HAL_UART_Receive_IT>
			HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6859      	ldr	r1, [r3, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001768:	b29b      	uxth	r3, r3
 800176a:	461a      	mov	r2, r3
 800176c:	f008 fb37 	bl	8009dde <HAL_UART_Transmit_IT>
			break;
 8001770:	e001      	b.n	8001776 <transmitAndReceive+0x9a>
		default:
			return false;
 8001772:	2300      	movs	r3, #0
 8001774:	e03d      	b.n	80017f2 <transmitAndReceive+0x116>
	}

	bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 8001776:	f00b f9f3 	bl	800cb60 <xTaskGetTickCount>
 800177a:	4603      	mov	r3, r0
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fb77 	bl	8000e70 <fromTickToMs>
 8001782:	eef0 7a40 	vmov.f32	s15, s0
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	edc3 7a05 	vstr	s15, [r3, #20]
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 800178c:	e01c      	b.n	80017c8 <transmitAndReceive+0xec>
		if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 800178e:	f00b f9e7 	bl	800cb60 <xTaskGetTickCount>
 8001792:	4603      	mov	r3, r0
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fb6b 	bl	8000e70 <fromTickToMs>
 800179a:	eeb0 7a40 	vmov.f32	s14, s0
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80017a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	ee07 3a90 	vmov	s15, r3
 80017b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017bc:	dd01      	ble.n	80017c2 <transmitAndReceive+0xe6>
			return false;
 80017be:	2300      	movs	r3, #0
 80017c0:	e017      	b.n	80017f2 <transmitAndReceive+0x116>
		}
		osDelay(DELAY_UART_TIMEOUT);
 80017c2:	2032      	movs	r0, #50	; 0x32
 80017c4:	f009 ff41 	bl	800b64a <osDelay>
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7a5b      	ldrb	r3, [r3, #9]
 80017cc:	f083 0301 	eor.w	r3, r3, #1
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00c      	beq.n	80017f0 <transmitAndReceive+0x114>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	7a1b      	ldrb	r3, [r3, #8]
 80017da:	f083 0301 	eor.w	r3, r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <transmitAndReceive+0x114>
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	f083 0301 	eor.w	r3, r3, #1
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1ce      	bne.n	800178e <transmitAndReceive+0xb2>
	}
	return true;
 80017f0:	2301      	movs	r3, #1
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <HAL_UART_TxCpltCallback+0x6c>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	429a      	cmp	r2, r3
 800180c:	d103      	bne.n	8001816 <HAL_UART_TxCpltCallback+0x1a>
		uartBus[SHORE_UART].packageTransmitted = true;
 800180e:	4b16      	ldr	r3, [pc, #88]	; (8001868 <HAL_UART_TxCpltCallback+0x6c>)
 8001810:	2201      	movs	r2, #1
 8001812:	725a      	strb	r2, [r3, #9]
		return;
 8001814:	e022      	b.n	800185c <HAL_UART_TxCpltCallback+0x60>
	}

	struct uartBus_s *bus = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]
 800181e:	e01a      	b.n	8001856 <HAL_UART_TxCpltCallback+0x5a>
		if(uartBus[i].huart == huart) {
 8001820:	7bfa      	ldrb	r2, [r7, #15]
 8001822:	4911      	ldr	r1, [pc, #68]	; (8001868 <HAL_UART_TxCpltCallback+0x6c>)
 8001824:	4613      	mov	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	1a9b      	subs	r3, r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	440b      	add	r3, r1
 800182e:	3330      	adds	r3, #48	; 0x30
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	429a      	cmp	r2, r3
 8001836:	d10b      	bne.n	8001850 <HAL_UART_TxCpltCallback+0x54>
			bus = &uartBus[i];
 8001838:	7bfa      	ldrb	r2, [r7, #15]
 800183a:	4613      	mov	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	1a9b      	subs	r3, r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4a09      	ldr	r2, [pc, #36]	; (8001868 <HAL_UART_TxCpltCallback+0x6c>)
 8001844:	4413      	add	r3, r2
 8001846:	60bb      	str	r3, [r7, #8]
			bus->packageTransmitted = true;
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2201      	movs	r2, #1
 800184c:	725a      	strb	r2, [r3, #9]
			break;
 800184e:	e005      	b.n	800185c <HAL_UART_TxCpltCallback+0x60>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	3301      	adds	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d9e1      	bls.n	8001820 <HAL_UART_TxCpltCallback+0x24>
		}
	}
}
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	200000ec 	.word	0x200000ec

0800186c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 8001874:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <HAL_UART_RxCpltCallback+0x7c>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	429a      	cmp	r2, r3
 800187c:	d102      	bne.n	8001884 <HAL_UART_RxCpltCallback+0x18>
		ShoreReceive();
 800187e:	f000 f8db 	bl	8001a38 <ShoreReceive>
		return;
 8001882:	e02d      	b.n	80018e0 <HAL_UART_RxCpltCallback+0x74>
	}

	struct uartBus_s *bus = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001888:	2300      	movs	r3, #0
 800188a:	73fb      	strb	r3, [r7, #15]
 800188c:	e025      	b.n	80018da <HAL_UART_RxCpltCallback+0x6e>
		if(uartBus[i].huart == huart) {
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	4915      	ldr	r1, [pc, #84]	; (80018e8 <HAL_UART_RxCpltCallback+0x7c>)
 8001892:	4613      	mov	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	1a9b      	subs	r3, r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	3330      	adds	r3, #48	; 0x30
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d116      	bne.n	80018d4 <HAL_UART_RxCpltCallback+0x68>
			bus = &uartBus[i];
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	4613      	mov	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4a0d      	ldr	r2, [pc, #52]	; (80018e8 <HAL_UART_RxCpltCallback+0x7c>)
 80018b2:	4413      	add	r3, r2
 80018b4:	60bb      	str	r3, [r7, #8]
			bus->packageReceived = true;
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	2201      	movs	r2, #1
 80018ba:	721a      	strb	r2, [r3, #8]
			bus->lastMessage = fromTickToMs(xTaskGetTickCount());
 80018bc:	f00b f950 	bl	800cb60 <xTaskGetTickCount>
 80018c0:	4603      	mov	r3, r0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fad4 	bl	8000e70 <fromTickToMs>
 80018c8:	eef0 7a40 	vmov.f32	s15, s0
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	edc3 7a06 	vstr	s15, [r3, #24]
			break;
 80018d2:	e005      	b.n	80018e0 <HAL_UART_RxCpltCallback+0x74>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	3301      	adds	r3, #1
 80018d8:	73fb      	strb	r3, [r7, #15]
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d9d6      	bls.n	800188e <HAL_UART_RxCpltCallback+0x22>
		}
	}
}
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200000ec 	.word	0x200000ec

080018ec <receiveI2cPackageDMA>:

bool receiveI2cPackageDMA (uint8_t I2C, uint16_t addr, uint8_t *buf, uint8_t length)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	603a      	str	r2, [r7, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
 80018fa:	460b      	mov	r3, r1
 80018fc:	80bb      	strh	r3, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	71bb      	strb	r3, [r7, #6]
	float timeBegin = fromTickToMs(xTaskGetTickCount());
 8001902:	f00b f92d 	bl	800cb60 <xTaskGetTickCount>
 8001906:	4603      	mov	r3, r0
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fab1 	bl	8000e70 <fromTickToMs>
 800190e:	ed87 0a03 	vstr	s0, [r7, #12]
	i2c1PackageReceived = false;
 8001912:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <receiveI2cPackageDMA+0x98>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
	switch(I2C) {
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d12c      	bne.n	8001978 <receiveI2cPackageDMA+0x8c>
	case DEV_I2C:
		HAL_I2C_Master_Receive_IT(&hi2c1, addr>>1, buf, length);
 800191e:	88bb      	ldrh	r3, [r7, #4]
 8001920:	085b      	lsrs	r3, r3, #1
 8001922:	b299      	uxth	r1, r3
 8001924:	79bb      	ldrb	r3, [r7, #6]
 8001926:	b29b      	uxth	r3, r3
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	4817      	ldr	r0, [pc, #92]	; (8001988 <receiveI2cPackageDMA+0x9c>)
 800192c:	f005 fe00 	bl	8007530 <HAL_I2C_Master_Receive_IT>
		while (!i2c1PackageReceived) {
 8001930:	e01a      	b.n	8001968 <receiveI2cPackageDMA+0x7c>
			if(fromTickToMs(xTaskGetTickCount()) - timeBegin > WAITING_SENSORS) {
 8001932:	f00b f915 	bl	800cb60 <xTaskGetTickCount>
 8001936:	4603      	mov	r3, r0
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fa99 	bl	8000e70 <fromTickToMs>
 800193e:	eeb0 7a40 	vmov.f32	s14, s0
 8001942:	edd7 7a03 	vldr	s15, [r7, #12]
 8001946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800194a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800194e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001956:	dd04      	ble.n	8001962 <receiveI2cPackageDMA+0x76>
				//HAL_I2C_Master_Abort_IT(&hi2c2, addr>>1);
				HAL_I2C_Init(&hi2c1);
 8001958:	480b      	ldr	r0, [pc, #44]	; (8001988 <receiveI2cPackageDMA+0x9c>)
 800195a:	f005 fca5 	bl	80072a8 <HAL_I2C_Init>
				return false;
 800195e:	2300      	movs	r3, #0
 8001960:	e00b      	b.n	800197a <receiveI2cPackageDMA+0x8e>
			}
			osDelay(DELAY_SENSOR_TASK);
 8001962:	200a      	movs	r0, #10
 8001964:	f009 fe71 	bl	800b64a <osDelay>
		while (!i2c1PackageReceived) {
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <receiveI2cPackageDMA+0x98>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	f083 0301 	eor.w	r3, r3, #1
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1dd      	bne.n	8001932 <receiveI2cPackageDMA+0x46>
		}
		break;
 8001976:	bf00      	nop
	}
	return true;
 8001978:	2301      	movs	r3, #1
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000197 	.word	0x20000197
 8001988:	200022e0 	.word	0x200022e0

0800198c <HAL_I2C_MasterRxCpltCallback>:
	}
}


void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1) {
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d102      	bne.n	80019a2 <HAL_I2C_MasterRxCpltCallback+0x16>
		i2c1PackageReceived = true;
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_I2C_MasterRxCpltCallback+0x28>)
 800199e:	2201      	movs	r2, #1
 80019a0:	701a      	strb	r2, [r3, #0]
	}
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	200022e0 	.word	0x200022e0
 80019b4:	20000197 	.word	0x20000197

080019b8 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1) {
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a06      	ldr	r2, [pc, #24]	; (80019dc <HAL_I2C_MasterTxCpltCallback+0x24>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d102      	bne.n	80019ce <HAL_I2C_MasterTxCpltCallback+0x16>
		i2c1PackageTransmit = true;
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_I2C_MasterTxCpltCallback+0x28>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	701a      	strb	r2, [r3, #0]
	}
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	200022e0 	.word	0x200022e0
 80019e0:	20000196 	.word	0x20000196

080019e4 <SensorsResponseUpdate>:


void SensorsResponseUpdate(uint8_t *buf, uint8_t Sensor_id)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
	switch(Sensor_id) {
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d11a      	bne.n	8001a2c <SensorsResponseUpdate+0x48>
	case DEV_I2C:
		if(IsChecksumm8bCorrect(buf, PRESSURE_SENSOR_SIZE)) {
 80019f6:	210a      	movs	r1, #10
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff fb5b 	bl	80010b4 <IsChecksumm8bCorrect>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d012      	beq.n	8001a2a <SensorsResponseUpdate+0x46>
			struct pressureResponse_s res;
			memcpy((void*)&res, (void*)buf, DEVICES_RESPONSE_LENGTH);
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	6810      	ldr	r0, [r2, #0]
 8001a0c:	6851      	ldr	r1, [r2, #4]
 8001a0e:	c303      	stmia	r3!, {r0, r1}
 8001a10:	8912      	ldrh	r2, [r2, #8]
 8001a12:	801a      	strh	r2, [r3, #0]
			if(res.code == 0xAA) {
 8001a14:	7b3b      	ldrb	r3, [r7, #12]
 8001a16:	2baa      	cmp	r3, #170	; 0xaa
 8001a18:	d107      	bne.n	8001a2a <SensorsResponseUpdate+0x46>
				rSensors.pressure = res.value;//(9.124*res.value - 3.177) - rSensors.pressure_null;
 8001a1a:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <SensorsResponseUpdate+0x50>)
 8001a20:	6553      	str	r3, [r2, #84]	; 0x54
				rSensors.velocity_pressure = res.v_value;
 8001a22:	f8d7 3011 	ldr.w	r3, [r7, #17]
 8001a26:	4a03      	ldr	r2, [pc, #12]	; (8001a34 <SensorsResponseUpdate+0x50>)
 8001a28:	65d3      	str	r3, [r2, #92]	; 0x5c
			}
		}
		break;
 8001a2a:	bf00      	nop
	}
}
 8001a2c:	bf00      	nop
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20001cd0 	.word	0x20001cd0

08001a38 <ShoreReceive>:

void ShoreReceive()
{
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af02      	add	r7, sp, #8
	static portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8001a3e:	4b39      	ldr	r3, [pc, #228]	; (8001b24 <ShoreReceive+0xec>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
	if(counterRx == 0) {
 8001a44:	4b38      	ldr	r3, [pc, #224]	; (8001b28 <ShoreReceive+0xf0>)
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d142      	bne.n	8001ad2 <ShoreReceive+0x9a>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	71fb      	strb	r3, [r7, #7]
 8001a50:	e03b      	b.n	8001aca <ShoreReceive+0x92>
			if(uartBus[SHORE_UART].rxBuffer[0] == ShoreCodes[i]) {
 8001a52:	4b36      	ldr	r3, [pc, #216]	; (8001b2c <ShoreReceive+0xf4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	781a      	ldrb	r2, [r3, #0]
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	4935      	ldr	r1, [pc, #212]	; (8001b30 <ShoreReceive+0xf8>)
 8001a5c:	5ccb      	ldrb	r3, [r1, r3]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d125      	bne.n	8001aae <ShoreReceive+0x76>
				counterRx = 1;
 8001a62:	4b31      	ldr	r3, [pc, #196]	; (8001b28 <ShoreReceive+0xf0>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	801a      	strh	r2, [r3, #0]
				uartBus[SHORE_UART].rxLength = ShoreLength[i]-1;
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	4a32      	ldr	r2, [pc, #200]	; (8001b34 <ShoreReceive+0xfc>)
 8001a6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	3b01      	subs	r3, #1
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <ShoreReceive+0xf4>)
 8001a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer+1, uartBus[SHORE_UART].rxLength);
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <ShoreReceive+0xf4>)
 8001a7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001a80:	4b2a      	ldr	r3, [pc, #168]	; (8001b2c <ShoreReceive+0xf4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	3301      	adds	r3, #1
 8001a86:	4a29      	ldr	r2, [pc, #164]	; (8001b2c <ShoreReceive+0xf4>)
 8001a88:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8001a8c:	b292      	uxth	r2, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f008 f9ea 	bl	8009e68 <HAL_UART_Receive_IT>
				xTimerStartFromISR(UARTTimer, &xHigherPriorityTaskWoken);
 8001a94:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <ShoreReceive+0x100>)
 8001a96:	681c      	ldr	r4, [r3, #0]
 8001a98:	f00b f872 	bl	800cb80 <xTaskGetTickCountFromISR>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <ShoreReceive+0xec>)
 8001aa4:	2106      	movs	r1, #6
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f00b fea0 	bl	800d7ec <xTimerGenericCommand>
				break;
 8001aac:	e026      	b.n	8001afc <ShoreReceive+0xc4>
			}

			if(i == SHORE_REQUEST_MODES_NUMBER-1) {
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d107      	bne.n	8001ac4 <ShoreReceive+0x8c>
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <ShoreReceive+0xf4>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	4a1c      	ldr	r2, [pc, #112]	; (8001b2c <ShoreReceive+0xf4>)
 8001aba:	6811      	ldr	r1, [r2, #0]
 8001abc:	2201      	movs	r2, #1
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f008 f9d2 	bl	8009e68 <HAL_UART_Receive_IT>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d9c0      	bls.n	8001a52 <ShoreReceive+0x1a>
 8001ad0:	e014      	b.n	8001afc <ShoreReceive+0xc4>
			}
		}
	}
	else if(counterRx == 1) {
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <ShoreReceive+0xf0>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d110      	bne.n	8001afc <ShoreReceive+0xc4>
		uartBus[SHORE_UART].packageReceived = true;
 8001ada:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <ShoreReceive+0xf4>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	721a      	strb	r2, [r3, #8]
		uartBus[SHORE_UART].lastMessage = fromTickToMs(xTaskGetTickCount());
 8001ae0:	f00b f83e 	bl	800cb60 <xTaskGetTickCount>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f9c2 	bl	8000e70 <fromTickToMs>
 8001aec:	eef0 7a40 	vmov.f32	s15, s0
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <ShoreReceive+0xf4>)
 8001af2:	edc3 7a06 	vstr	s15, [r3, #24]
		counterRx = 2;
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <ShoreReceive+0xf0>)
 8001af8:	2202      	movs	r2, #2
 8001afa:	801a      	strh	r2, [r3, #0]
	}

	if (xHigherPriorityTaskWoken == pdTRUE) {
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <ShoreReceive+0xec>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d10a      	bne.n	8001b1a <ShoreReceive+0xe2>
		xHigherPriorityTaskWoken = pdFALSE;
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <ShoreReceive+0xec>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
		taskYIELD();
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <ShoreReceive+0x104>)
 8001b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	f3bf 8f4f 	dsb	sy
 8001b16:	f3bf 8f6f 	isb	sy
	}
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd90      	pop	{r4, r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000198 	.word	0x20000198
 8001b28:	20000194 	.word	0x20000194
 8001b2c:	200000ec 	.word	0x200000ec
 8001b30:	0800ec6c 	.word	0x0800ec6c
 8001b34:	0800ec64 	.word	0x0800ec64
 8001b38:	2000019c 	.word	0x2000019c
 8001b3c:	e000ed04 	.word	0xe000ed04

08001b40 <DevicesRequestUpdate>:

void DevicesRequestUpdate(uint8_t *buf, uint8_t dev)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	70fb      	strb	r3, [r7, #3]
	struct devicesRequest_s req;

    req.AA1 = 0xAA;
 8001b4c:	23aa      	movs	r3, #170	; 0xaa
 8001b4e:	723b      	strb	r3, [r7, #8]
    req.AA2 = 0xAA;
 8001b50:	23aa      	movs	r3, #170	; 0xaa
 8001b52:	727b      	strb	r3, [r7, #9]
    req.address = rDevice[dev].address;
 8001b54:	78fa      	ldrb	r2, [r7, #3]
 8001b56:	491e      	ldr	r1, [pc, #120]	; (8001bd0 <DevicesRequestUpdate+0x90>)
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	440b      	add	r3, r1
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	72bb      	strb	r3, [r7, #10]
    req.setting = rDevice[dev].settings;
 8001b66:	78fa      	ldrb	r2, [r7, #3]
 8001b68:	4919      	ldr	r1, [pc, #100]	; (8001bd0 <DevicesRequestUpdate+0x90>)
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	440b      	add	r3, r1
 8001b74:	3301      	adds	r3, #1
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	72fb      	strb	r3, [r7, #11]
    req.velocity1 = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	733b      	strb	r3, [r7, #12]
    req.velocity2 = rDevice[dev].force;
 8001b7e:	78fa      	ldrb	r2, [r7, #3]
 8001b80:	4913      	ldr	r1, [pc, #76]	; (8001bd0 <DevicesRequestUpdate+0x90>)
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	440b      	add	r3, r1
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b92:	737b      	strb	r3, [r7, #13]

    if(dev == GRAB) {
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d107      	bne.n	8001baa <DevicesRequestUpdate+0x6a>
    	req.velocity1 = rDevice[GRAB_ROTATION].force;
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <DevicesRequestUpdate+0x90>)
 8001b9c:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001ba0:	733b      	strb	r3, [r7, #12]
    	req.velocity2 = rDevice[GRAB].force;
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <DevicesRequestUpdate+0x90>)
 8001ba4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001ba8:	737b      	strb	r3, [r7, #13]
//    		rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_NULL;
//    	}
//    }


    memcpy((void*)buf, (void*)&req, DEVICES_REQUEST_LENGTH);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	461a      	mov	r2, r3
 8001bae:	f107 0308 	add.w	r3, r7, #8
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	6010      	str	r0, [r2, #0]
 8001bb6:	8899      	ldrh	r1, [r3, #4]
 8001bb8:	799b      	ldrb	r3, [r3, #6]
 8001bba:	8091      	strh	r1, [r2, #4]
 8001bbc:	7193      	strb	r3, [r2, #6]
    AddChecksumm8b(buf, DEVICES_REQUEST_LENGTH);
 8001bbe:	2107      	movs	r1, #7
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff faa4 	bl	800110e <AddChecksumm8b>
}
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20001d54 	.word	0x20001d54

08001bd4 <DevicesResponseUpdate>:

void DevicesResponseUpdate(uint8_t *buf, uint8_t dev)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	70fb      	strb	r3, [r7, #3]
    if(IsChecksumm8bCorrect(buf, DEVICES_RESPONSE_LENGTH)) {
 8001be0:	210a      	movs	r1, #10
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff fa66 	bl	80010b4 <IsChecksumm8bCorrect>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d04a      	beq.n	8001c84 <DevicesResponseUpdate+0xb0>
    	struct devicesResponse_s res;
    	memcpy((void*)&res, (void*)buf, DEVICES_RESPONSE_LENGTH);
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	f107 030c 	add.w	r3, r7, #12
 8001bf4:	6810      	ldr	r0, [r2, #0]
 8001bf6:	6851      	ldr	r1, [r2, #4]
 8001bf8:	c303      	stmia	r3!, {r0, r1}
 8001bfa:	8912      	ldrh	r2, [r2, #8]
 8001bfc:	801a      	strh	r2, [r3, #0]

        rDevice[dev].current = res.current1;
 8001bfe:	78fa      	ldrb	r2, [r7, #3]
 8001c00:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8001c04:	b298      	uxth	r0, r3
 8001c06:	4924      	ldr	r1, [pc, #144]	; (8001c98 <DevicesResponseUpdate+0xc4>)
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	440b      	add	r3, r1
 8001c12:	3304      	adds	r3, #4
 8001c14:	4602      	mov	r2, r0
 8001c16:	801a      	strh	r2, [r3, #0]
        rDevice[dev].velocity1 = res.velocity1;
 8001c18:	78fa      	ldrb	r2, [r7, #3]
 8001c1a:	7cf8      	ldrb	r0, [r7, #19]
 8001c1c:	491e      	ldr	r1, [pc, #120]	; (8001c98 <DevicesResponseUpdate+0xc4>)
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	440b      	add	r3, r1
 8001c28:	3307      	adds	r3, #7
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	701a      	strb	r2, [r3, #0]
        rDevice[dev].velocity2 = res.velocity2;
 8001c2e:	78fa      	ldrb	r2, [r7, #3]
 8001c30:	7d38      	ldrb	r0, [r7, #20]
 8001c32:	4919      	ldr	r1, [pc, #100]	; (8001c98 <DevicesResponseUpdate+0xc4>)
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	440b      	add	r3, r1
 8001c3e:	3308      	adds	r3, #8
 8001c40:	4602      	mov	r2, r0
 8001c42:	701a      	strb	r2, [r3, #0]

        if(rDevice[DEV2].velocity1 == 0x00 && dev == DEV2) {
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <DevicesResponseUpdate+0xc4>)
 8001c46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d106      	bne.n	8001c5c <DevicesResponseUpdate+0x88>
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	2b05      	cmp	r3, #5
 8001c52:	d103      	bne.n	8001c5c <DevicesResponseUpdate+0x88>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_FORWARD_SAT;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <DevicesResponseUpdate+0xc8>)
 8001c56:	2203      	movs	r2, #3
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	e00a      	b.n	8001c72 <DevicesResponseUpdate+0x9e>
        }
        else if(rDevice[DEV2].velocity2 == 0x00 && dev == DEV2) {
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <DevicesResponseUpdate+0xc4>)
 8001c5e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d105      	bne.n	8001c72 <DevicesResponseUpdate+0x9e>
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	2b05      	cmp	r3, #5
 8001c6a:	d102      	bne.n	8001c72 <DevicesResponseUpdate+0x9e>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_BACKWARD_SAT;
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <DevicesResponseUpdate+0xc8>)
 8001c6e:	2204      	movs	r2, #4
 8001c70:	701a      	strb	r2, [r3, #0]
        }
        // TODO make errors work pls
        //writeBit(&(robot->device[dev].errors), res.errors, AGAR);

        ++uartBus[DEVICES_UART].successRxCounter;
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <DevicesResponseUpdate+0xcc>)
 8001c74:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001c78:	3301      	adds	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <DevicesResponseUpdate+0xcc>)
 8001c7e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
    }
    else {
    	++uartBus[DEVICES_UART].brokenRxCounter;
    }
}
 8001c82:	e004      	b.n	8001c8e <DevicesResponseUpdate+0xba>
    	++uartBus[DEVICES_UART].brokenRxCounter;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <DevicesResponseUpdate+0xcc>)
 8001c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c88:	3301      	adds	r3, #1
 8001c8a:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <DevicesResponseUpdate+0xcc>)
 8001c8c:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20001d54 	.word	0x20001d54
 8001c9c:	20001d90 	.word	0x20001d90
 8001ca0:	200000ec 	.word	0x200000ec

08001ca4 <ShoreRequest>:

void ShoreRequest(uint8_t *requestBuf)
{
 8001ca4:	b5b0      	push	{r4, r5, r7, lr}
 8001ca6:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001cb0:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8001cb4:	6018      	str	r0, [r3, #0]
    if (IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_LENGTH)) {
 8001cb6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001cba:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8001cbe:	211e      	movs	r1, #30
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	f7ff f9be 	bl	8001042 <IsCrc16ChecksummCorrect>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 8174 	beq.w	8001fb6 <ShoreRequest+0x312>
    	struct shoreRequest_s req;
    	memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_LENGTH);
 8001cce:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001cd2:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f507 740d 	add.w	r4, r7, #564	; 0x234
 8001cdc:	461d      	mov	r5, r3
 8001cde:	6828      	ldr	r0, [r5, #0]
 8001ce0:	6869      	ldr	r1, [r5, #4]
 8001ce2:	68aa      	ldr	r2, [r5, #8]
 8001ce4:	68eb      	ldr	r3, [r5, #12]
 8001ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce8:	6928      	ldr	r0, [r5, #16]
 8001cea:	6969      	ldr	r1, [r5, #20]
 8001cec:	69aa      	ldr	r2, [r5, #24]
 8001cee:	c407      	stmia	r4!, {r0, r1, r2}
 8001cf0:	8bab      	ldrh	r3, [r5, #28]
 8001cf2:	8023      	strh	r3, [r4, #0]

    	uint8_t tempCameraNum = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257

        rJoySpeed.march = req.march;
 8001cfa:	f9b7 3236 	ldrsh.w	r3, [r7, #566]	; 0x236
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d06:	4bb1      	ldr	r3, [pc, #708]	; (8001fcc <ShoreRequest+0x328>)
 8001d08:	edc3 7a00 	vstr	s15, [r3]
        rJoySpeed.lag = req.lag;
 8001d0c:	f9b7 3238 	ldrsh.w	r3, [r7, #568]	; 0x238
 8001d10:	ee07 3a90 	vmov	s15, r3
 8001d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d18:	4bac      	ldr	r3, [pc, #688]	; (8001fcc <ShoreRequest+0x328>)
 8001d1a:	edc3 7a01 	vstr	s15, [r3, #4]
        rJoySpeed.depth = req.depth;
 8001d1e:	f9b7 323a 	ldrsh.w	r3, [r7, #570]	; 0x23a
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d2a:	4ba8      	ldr	r3, [pc, #672]	; (8001fcc <ShoreRequest+0x328>)
 8001d2c:	edc3 7a02 	vstr	s15, [r3, #8]
        rJoySpeed.roll = req.roll;
 8001d30:	f9b7 323c 	ldrsh.w	r3, [r7, #572]	; 0x23c
 8001d34:	ee07 3a90 	vmov	s15, r3
 8001d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3c:	4ba3      	ldr	r3, [pc, #652]	; (8001fcc <ShoreRequest+0x328>)
 8001d3e:	edc3 7a03 	vstr	s15, [r3, #12]
        rJoySpeed.pitch = req.pitch;
 8001d42:	f9b7 323e 	ldrsh.w	r3, [r7, #574]	; 0x23e
 8001d46:	ee07 3a90 	vmov	s15, r3
 8001d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d4e:	4b9f      	ldr	r3, [pc, #636]	; (8001fcc <ShoreRequest+0x328>)
 8001d50:	edc3 7a04 	vstr	s15, [r3, #16]
        rJoySpeed.yaw = req.yaw;
 8001d54:	f9b7 3240 	ldrsh.w	r3, [r7, #576]	; 0x240
 8001d58:	ee07 3a90 	vmov	s15, r3
 8001d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d60:	4b9a      	ldr	r3, [pc, #616]	; (8001fcc <ShoreRequest+0x328>)
 8001d62:	edc3 7a05 	vstr	s15, [r3, #20]

        rDevice[GRAB].force = req.grab;
 8001d66:	f997 2243 	ldrsb.w	r2, [r7, #579]	; 0x243
 8001d6a:	4b99      	ldr	r3, [pc, #612]	; (8001fd0 <ShoreRequest+0x32c>)
 8001d6c:	731a      	strb	r2, [r3, #12]
        if (rDevice[GRAB].force < -127) {
 8001d6e:	4b98      	ldr	r3, [pc, #608]	; (8001fd0 <ShoreRequest+0x32c>)
 8001d70:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001d74:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001d78:	d102      	bne.n	8001d80 <ShoreRequest+0xdc>
            rDevice[GRAB].force = -127;
 8001d7a:	4b95      	ldr	r3, [pc, #596]	; (8001fd0 <ShoreRequest+0x32c>)
 8001d7c:	2281      	movs	r2, #129	; 0x81
 8001d7e:	731a      	strb	r2, [r3, #12]
        }
        rDevice[TILT].force = req.tilt;
 8001d80:	f997 2244 	ldrsb.w	r2, [r7, #580]	; 0x244
 8001d84:	4b92      	ldr	r3, [pc, #584]	; (8001fd0 <ShoreRequest+0x32c>)
 8001d86:	f883 2020 	strb.w	r2, [r3, #32]
        if (rDevice[TILT].force < -127) {
 8001d8a:	4b91      	ldr	r3, [pc, #580]	; (8001fd0 <ShoreRequest+0x32c>)
 8001d8c:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8001d90:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001d94:	d103      	bne.n	8001d9e <ShoreRequest+0xfa>
        	rDevice[TILT].force = -127;
 8001d96:	4b8e      	ldr	r3, [pc, #568]	; (8001fd0 <ShoreRequest+0x32c>)
 8001d98:	2281      	movs	r2, #129	; 0x81
 8001d9a:	f883 2020 	strb.w	r2, [r3, #32]
        }
        rDevice[GRAB_ROTATION].force  = req.grab_rotate;
 8001d9e:	f997 2245 	ldrsb.w	r2, [r7, #581]	; 0x245
 8001da2:	4b8b      	ldr	r3, [pc, #556]	; (8001fd0 <ShoreRequest+0x32c>)
 8001da4:	759a      	strb	r2, [r3, #22]
        if (rDevice[GRAB_ROTATION].force < -127) {
 8001da6:	4b8a      	ldr	r3, [pc, #552]	; (8001fd0 <ShoreRequest+0x32c>)
 8001da8:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001dac:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001db0:	d102      	bne.n	8001db8 <ShoreRequest+0x114>
            rDevice[GRAB_ROTATION].force = -127;
 8001db2:	4b87      	ldr	r3, [pc, #540]	; (8001fd0 <ShoreRequest+0x32c>)
 8001db4:	2281      	movs	r2, #129	; 0x81
 8001db6:	759a      	strb	r2, [r3, #22]
        }

        rDevice[DEV1].force = req.dev1;
 8001db8:	f997 2246 	ldrsb.w	r2, [r7, #582]	; 0x246
 8001dbc:	4b84      	ldr	r3, [pc, #528]	; (8001fd0 <ShoreRequest+0x32c>)
 8001dbe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        rDevice[DEV2].force = req.dev2;
 8001dc2:	f997 2247 	ldrsb.w	r2, [r7, #583]	; 0x247
 8001dc6:	4b82      	ldr	r3, [pc, #520]	; (8001fd0 <ShoreRequest+0x32c>)
 8001dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        rState.lag_error = (float) req.lag_error;
 8001dcc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001dd0:	ee07 3a90 	vmov	s15, r3
 8001dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd8:	4b7e      	ldr	r3, [pc, #504]	; (8001fd4 <ShoreRequest+0x330>)
 8001dda:	edc3 7a02 	vstr	s15, [r3, #8]

        rSensors.resetIMU = PickBit(req.stabilize_flags, SHORE_STABILIZE_IMU_BIT);
 8001dde:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001de2:	2106      	movs	r1, #6
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fa0d 	bl	8001204 <PickBit>
 8001dea:	4603      	mov	r3, r0
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b7a      	ldr	r3, [pc, #488]	; (8001fd8 <ShoreRequest+0x334>)
 8001df0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(PickBit(req.stabilize_flags, SHORE_STABILIZE_SAVE_BIT)) {
 8001df4:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001df8:	2107      	movs	r1, #7
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fa02 	bl	8001204 <PickBit>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d009      	beq.n	8001e1a <ShoreRequest+0x176>
        	struct flashConfiguration_s config;
        	flashFillStructure(&config);
 8001e06:	f107 0308 	add.w	r3, r7, #8
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 fd7c 	bl	8002908 <flashFillStructure>
        	flashWriteSettings(&config);
 8001e10:	f107 0308 	add.w	r3, r7, #8
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 fd39 	bl	800288c <flashWriteSettings>
        }

        tempCameraNum = req.cameras;
 8001e1a:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
 8001e1e:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257

        uint8_t old_reset = rComputer.reset;
 8001e22:	4b6e      	ldr	r3, [pc, #440]	; (8001fdc <ShoreRequest+0x338>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256
        if(old_reset != req.pc_reset) {
 8001e2a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8001e2e:	f897 2256 	ldrb.w	r2, [r7, #598]	; 0x256
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d002      	beq.n	8001e3c <ShoreRequest+0x198>
            if(req.pc_reset == PC_ON_CODE) {
 8001e36:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8001e3a:	2baa      	cmp	r3, #170	; 0xaa
            else if(req.pc_reset == PC_OFF_CODE) {
           // 	HAL_GPIO_WritePin(PC_CONTROL1_GPIO_Port, PC_CONTROL1_Pin, GPIO_PIN_SET); // RESET
           //	HAL_GPIO_WritePin(PC_CONTROL2_GPIO_Port, PC_CONTROL2_Pin, GPIO_PIN_SET); // ONOFF
            }
        }
        rComputer.reset = req.pc_reset;
 8001e3c:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 8001e40:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <ShoreRequest+0x338>)
 8001e42:	701a      	strb	r2, [r3, #0]

        bool wasEnabled = rStabConstants[STAB_YAW].enable;
 8001e44:	4b66      	ldr	r3, [pc, #408]	; (8001fe0 <ShoreRequest+0x33c>)
 8001e46:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001e4a:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_YAW].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_YAW_BIT);
 8001e4e:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001e52:	2103      	movs	r1, #3
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff f9d5 	bl	8001204 <PickBit>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b60      	ldr	r3, [pc, #384]	; (8001fe0 <ShoreRequest+0x33c>)
 8001e60:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
        if(wasEnabled == false && rStabConstants[STAB_YAW].enable == true) {
 8001e64:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001e68:	f083 0301 	eor.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d007      	beq.n	8001e82 <ShoreRequest+0x1de>
 8001e72:	4b5b      	ldr	r3, [pc, #364]	; (8001fe0 <ShoreRequest+0x33c>)
 8001e74:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <ShoreRequest+0x1de>
        	stabilizationStart(STAB_YAW);
 8001e7c:	2003      	movs	r0, #3
 8001e7e:	f002 f945 	bl	800410c <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_ROLL].enable;
 8001e82:	4b57      	ldr	r3, [pc, #348]	; (8001fe0 <ShoreRequest+0x33c>)
 8001e84:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001e88:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_ROLL].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_ROLL_BIT);
 8001e8c:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001e90:	2101      	movs	r1, #1
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff f9b6 	bl	8001204 <PickBit>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4b50      	ldr	r3, [pc, #320]	; (8001fe0 <ShoreRequest+0x33c>)
 8001e9e:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
        if(wasEnabled == false && rStabConstants[STAB_ROLL].enable == true) {
 8001ea2:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001ea6:	f083 0301 	eor.w	r3, r3, #1
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <ShoreRequest+0x21c>
 8001eb0:	4b4b      	ldr	r3, [pc, #300]	; (8001fe0 <ShoreRequest+0x33c>)
 8001eb2:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <ShoreRequest+0x21c>
        	stabilizationStart(STAB_ROLL);
 8001eba:	2004      	movs	r0, #4
 8001ebc:	f002 f926 	bl	800410c <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_PITCH].enable;
 8001ec0:	4b47      	ldr	r3, [pc, #284]	; (8001fe0 <ShoreRequest+0x33c>)
 8001ec2:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8001ec6:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_PITCH].enable = true; //PickBit(req.stabilize_flags, SHORE_STABILIZE_PITCH_BIT);
 8001eca:	4b45      	ldr	r3, [pc, #276]	; (8001fe0 <ShoreRequest+0x33c>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
        if(wasEnabled == false && rStabConstants[STAB_PITCH].enable == true) {
 8001ed2:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001ed6:	f083 0301 	eor.w	r3, r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d007      	beq.n	8001ef0 <ShoreRequest+0x24c>
 8001ee0:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <ShoreRequest+0x33c>)
 8001ee2:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <ShoreRequest+0x24c>
        	stabilizationStart(STAB_PITCH);
 8001eea:	2005      	movs	r0, #5
 8001eec:	f002 f90e 	bl	800410c <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_DEPTH].enable;
 8001ef0:	4b3b      	ldr	r3, [pc, #236]	; (8001fe0 <ShoreRequest+0x33c>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_DEPTH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_DEPTH_BIT);
 8001ef8:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff f980 	bl	8001204 <PickBit>
 8001f04:	4603      	mov	r3, r0
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b35      	ldr	r3, [pc, #212]	; (8001fe0 <ShoreRequest+0x33c>)
 8001f0a:	701a      	strb	r2, [r3, #0]
        if(wasEnabled == false && rStabConstants[STAB_DEPTH].enable == true) {
 8001f0c:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001f10:	f083 0301 	eor.w	r3, r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d006      	beq.n	8001f28 <ShoreRequest+0x284>
 8001f1a:	4b31      	ldr	r3, [pc, #196]	; (8001fe0 <ShoreRequest+0x33c>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <ShoreRequest+0x284>
        	stabilizationStart(STAB_DEPTH);
 8001f22:	2000      	movs	r0, #0
 8001f24:	f002 f8f2 	bl	800410c <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_LAG].enable;
 8001f28:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <ShoreRequest+0x33c>)
 8001f2a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001f2e:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_LAG].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_LAG_BIT);
 8001f32:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001f36:	2104      	movs	r1, #4
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff f963 	bl	8001204 <PickBit>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <ShoreRequest+0x33c>)
 8001f44:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        if(wasEnabled == false && rStabConstants[STAB_LAG].enable == true) {
 8001f48:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001f4c:	f083 0301 	eor.w	r3, r3, #1
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d007      	beq.n	8001f66 <ShoreRequest+0x2c2>
 8001f56:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <ShoreRequest+0x33c>)
 8001f58:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <ShoreRequest+0x2c2>
        	stabilizationStart(STAB_LAG);
 8001f60:	2002      	movs	r0, #2
 8001f62:	f002 f8d3 	bl	800410c <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_MARCH].enable;
 8001f66:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <ShoreRequest+0x33c>)
 8001f68:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001f6c:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_MARCH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_MARCH_BIT);
 8001f70:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001f74:	2105      	movs	r1, #5
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff f944 	bl	8001204 <PickBit>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	461a      	mov	r2, r3
 8001f80:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <ShoreRequest+0x33c>)
 8001f82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        if(wasEnabled == false && rStabConstants[STAB_MARCH].enable == true) {
 8001f86:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001f8a:	f083 0301 	eor.w	r3, r3, #1
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d007      	beq.n	8001fa4 <ShoreRequest+0x300>
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <ShoreRequest+0x33c>)
 8001f96:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <ShoreRequest+0x300>
        	stabilizationStart(STAB_MARCH);
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f002 f8b4 	bl	800410c <stabilizationStart>
//        		break;
//        	}
//        }

        // TODO tuuuupoooo
        formThrustVectors();
 8001fa4:	f002 ff38 	bl	8004e18 <formThrustVectors>

        ++uartBus[SHORE_UART].successRxCounter;
 8001fa8:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <ShoreRequest+0x340>)
 8001faa:	895b      	ldrh	r3, [r3, #10]
 8001fac:	3301      	adds	r3, #1
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <ShoreRequest+0x340>)
 8001fb2:	815a      	strh	r2, [r3, #10]

        	brokenRxTolerance = 0;
        }
        */
    }
}
 8001fb4:	e004      	b.n	8001fc0 <ShoreRequest+0x31c>
    	++uartBus[SHORE_UART].brokenRxCounter;
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <ShoreRequest+0x340>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <ShoreRequest+0x340>)
 8001fbe:	60d3      	str	r3, [r2, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20001d3c 	.word	0x20001d3c
 8001fd0:	20001d54 	.word	0x20001d54
 8001fd4:	20001c04 	.word	0x20001c04
 8001fd8:	20001cd0 	.word	0x20001cd0
 8001fdc:	20001d38 	.word	0x20001d38
 8001fe0:	20001d94 	.word	0x20001d94
 8001fe4:	200000ec 	.word	0x200000ec

08001fe8 <ShoreConfigRequest>:

void ShoreConfigRequest(uint8_t *requestBuf)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b098      	sub	sp, #96	; 0x60
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, REQUEST_CONFIG_LENGTH)) {
 8001ff0:	2154      	movs	r1, #84	; 0x54
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff f825 	bl	8001042 <IsCrc16ChecksummCorrect>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8158 	beq.w	80022b0 <ShoreConfigRequest+0x2c8>
		struct shoreConfigRequest_s req;
		memcpy((void*)&req, (void*)requestBuf, REQUEST_CONFIG_LENGTH);
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	f107 0308 	add.w	r3, r7, #8
 8002006:	4611      	mov	r1, r2
 8002008:	2254      	movs	r2, #84	; 0x54
 800200a:	4618      	mov	r0, r3
 800200c:	f00c fb38 	bl	800e680 <memcpy>

		rJoySpeed.march = req.march;
 8002010:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002014:	ee07 3a90 	vmov	s15, r3
 8002018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800201c:	4ba9      	ldr	r3, [pc, #676]	; (80022c4 <ShoreConfigRequest+0x2dc>)
 800201e:	edc3 7a00 	vstr	s15, [r3]
		rJoySpeed.lag = req.lag;
 8002022:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800202e:	4ba5      	ldr	r3, [pc, #660]	; (80022c4 <ShoreConfigRequest+0x2dc>)
 8002030:	edc3 7a01 	vstr	s15, [r3, #4]
		rJoySpeed.depth = req.depth;
 8002034:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002038:	ee07 3a90 	vmov	s15, r3
 800203c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002040:	4ba0      	ldr	r3, [pc, #640]	; (80022c4 <ShoreConfigRequest+0x2dc>)
 8002042:	edc3 7a02 	vstr	s15, [r3, #8]
		rJoySpeed.roll = req.roll;
 8002046:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800204a:	ee07 3a90 	vmov	s15, r3
 800204e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002052:	4b9c      	ldr	r3, [pc, #624]	; (80022c4 <ShoreConfigRequest+0x2dc>)
 8002054:	edc3 7a03 	vstr	s15, [r3, #12]
		rJoySpeed.pitch = req.pitch;
 8002058:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800205c:	ee07 3a90 	vmov	s15, r3
 8002060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002064:	4b97      	ldr	r3, [pc, #604]	; (80022c4 <ShoreConfigRequest+0x2dc>)
 8002066:	edc3 7a04 	vstr	s15, [r3, #16]
		rJoySpeed.yaw = req.yaw;
 800206a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002076:	4b93      	ldr	r3, [pc, #588]	; (80022c4 <ShoreConfigRequest+0x2dc>)
 8002078:	edc3 7a05 	vstr	s15, [r3, #20]

		rStabConstants[req.contour].pJoyUnitCast = req.pJoyUnitCast;
 800207c:	7a7b      	ldrb	r3, [r7, #9]
 800207e:	4618      	mov	r0, r3
 8002080:	f8d7 2016 	ldr.w	r2, [r7, #22]
 8002084:	4613      	mov	r3, r2
 8002086:	461a      	mov	r2, r3
 8002088:	498f      	ldr	r1, [pc, #572]	; (80022c8 <ShoreConfigRequest+0x2e0>)
 800208a:	4603      	mov	r3, r0
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4403      	add	r3, r0
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	440b      	add	r3, r1
 8002094:	3304      	adds	r3, #4
 8002096:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pSpeedDyn = req.pSpeedDyn;
 8002098:	7a7b      	ldrb	r3, [r7, #9]
 800209a:	4618      	mov	r0, r3
 800209c:	f8d7 201a 	ldr.w	r2, [r7, #26]
 80020a0:	4613      	mov	r3, r2
 80020a2:	461a      	mov	r2, r3
 80020a4:	4988      	ldr	r1, [pc, #544]	; (80022c8 <ShoreConfigRequest+0x2e0>)
 80020a6:	4603      	mov	r3, r0
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4403      	add	r3, r0
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	440b      	add	r3, r1
 80020b0:	3308      	adds	r3, #8
 80020b2:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pErrGain = req.pErrGain;
 80020b4:	7a7b      	ldrb	r3, [r7, #9]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f8d7 201e 	ldr.w	r2, [r7, #30]
 80020bc:	4613      	mov	r3, r2
 80020be:	461a      	mov	r2, r3
 80020c0:	4981      	ldr	r1, [pc, #516]	; (80022c8 <ShoreConfigRequest+0x2e0>)
 80020c2:	4603      	mov	r3, r0
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4403      	add	r3, r0
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	440b      	add	r3, r1
 80020cc:	330c      	adds	r3, #12
 80020ce:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].aFilter[POS_FILTER].T = req.posFilterT;
 80020d0:	7a7b      	ldrb	r3, [r7, #9]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f8d7 2022 	ldr.w	r2, [r7, #34]	; 0x22
 80020d8:	4613      	mov	r3, r2
 80020da:	461a      	mov	r2, r3
 80020dc:	497a      	ldr	r1, [pc, #488]	; (80022c8 <ShoreConfigRequest+0x2e0>)
 80020de:	4603      	mov	r3, r0
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4403      	add	r3, r0
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	440b      	add	r3, r1
 80020e8:	3310      	adds	r3, #16
 80020ea:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[POS_FILTER].K = req.posFilterK;
 80020ec:	7a7b      	ldrb	r3, [r7, #9]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f8d7 2026 	ldr.w	r2, [r7, #38]	; 0x26
 80020f4:	4613      	mov	r3, r2
 80020f6:	461a      	mov	r2, r3
 80020f8:	4973      	ldr	r1, [pc, #460]	; (80022c8 <ShoreConfigRequest+0x2e0>)
 80020fa:	4603      	mov	r3, r0
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4403      	add	r3, r0
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	440b      	add	r3, r1
 8002104:	3314      	adds	r3, #20
 8002106:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].T = req.speedFilterT;
 8002108:	7a7b      	ldrb	r3, [r7, #9]
 800210a:	4618      	mov	r0, r3
 800210c:	f8d7 202a 	ldr.w	r2, [r7, #42]	; 0x2a
 8002110:	4613      	mov	r3, r2
 8002112:	461a      	mov	r2, r3
 8002114:	496c      	ldr	r1, [pc, #432]	; (80022c8 <ShoreConfigRequest+0x2e0>)
 8002116:	4603      	mov	r3, r0
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4403      	add	r3, r0
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	3318      	adds	r3, #24
 8002122:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].K = req.speedFilterK;
 8002124:	7a7b      	ldrb	r3, [r7, #9]
 8002126:	4618      	mov	r0, r3
 8002128:	f8d7 202e 	ldr.w	r2, [r7, #46]	; 0x2e
 800212c:	4613      	mov	r3, r2
 800212e:	461a      	mov	r2, r3
 8002130:	4965      	ldr	r1, [pc, #404]	; (80022c8 <ShoreConfigRequest+0x2e0>)
 8002132:	4603      	mov	r3, r0
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4403      	add	r3, r0
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	440b      	add	r3, r1
 800213c:	331c      	adds	r3, #28
 800213e:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].pid.pGain = req.pid_pGain;
 8002140:	7a7b      	ldrb	r3, [r7, #9]
 8002142:	4618      	mov	r0, r3
 8002144:	f8d7 2032 	ldr.w	r2, [r7, #50]	; 0x32
 8002148:	4613      	mov	r3, r2
 800214a:	461a      	mov	r2, r3
 800214c:	495e      	ldr	r1, [pc, #376]	; (80022c8 <ShoreConfigRequest+0x2e0>)
 800214e:	4603      	mov	r3, r0
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4403      	add	r3, r0
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	3328      	adds	r3, #40	; 0x28
 800215a:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iGain = req.pid_iGain;
 800215c:	7a7b      	ldrb	r3, [r7, #9]
 800215e:	4618      	mov	r0, r3
 8002160:	f8d7 2036 	ldr.w	r2, [r7, #54]	; 0x36
 8002164:	4613      	mov	r3, r2
 8002166:	461a      	mov	r2, r3
 8002168:	4957      	ldr	r1, [pc, #348]	; (80022c8 <ShoreConfigRequest+0x2e0>)
 800216a:	4603      	mov	r3, r0
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	4403      	add	r3, r0
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	440b      	add	r3, r1
 8002174:	332c      	adds	r3, #44	; 0x2c
 8002176:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iMax = req.pid_iMax;
 8002178:	7a7b      	ldrb	r3, [r7, #9]
 800217a:	4618      	mov	r0, r3
 800217c:	f8d7 203a 	ldr.w	r2, [r7, #58]	; 0x3a
 8002180:	4613      	mov	r3, r2
 8002182:	461a      	mov	r2, r3
 8002184:	4950      	ldr	r1, [pc, #320]	; (80022c8 <ShoreConfigRequest+0x2e0>)
 8002186:	4603      	mov	r3, r0
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4403      	add	r3, r0
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	440b      	add	r3, r1
 8002190:	3330      	adds	r3, #48	; 0x30
 8002192:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iMin = req.pid_iMin;
 8002194:	7a7b      	ldrb	r3, [r7, #9]
 8002196:	4618      	mov	r0, r3
 8002198:	f8d7 203e 	ldr.w	r2, [r7, #62]	; 0x3e
 800219c:	4613      	mov	r3, r2
 800219e:	461a      	mov	r2, r3
 80021a0:	4949      	ldr	r1, [pc, #292]	; (80022c8 <ShoreConfigRequest+0x2e0>)
 80021a2:	4603      	mov	r3, r0
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4403      	add	r3, r0
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	440b      	add	r3, r1
 80021ac:	3334      	adds	r3, #52	; 0x34
 80021ae:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].pThrustersMin = req.pThrustersMin;
 80021b0:	7a7b      	ldrb	r3, [r7, #9]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f8d7 2042 	ldr.w	r2, [r7, #66]	; 0x42
 80021b8:	4613      	mov	r3, r2
 80021ba:	461a      	mov	r2, r3
 80021bc:	4942      	ldr	r1, [pc, #264]	; (80022c8 <ShoreConfigRequest+0x2e0>)
 80021be:	4603      	mov	r3, r0
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4403      	add	r3, r0
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	440b      	add	r3, r1
 80021c8:	3338      	adds	r3, #56	; 0x38
 80021ca:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pThrustersMax = req.pThrustersMax;
 80021cc:	7a7b      	ldrb	r3, [r7, #9]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f8d7 2046 	ldr.w	r2, [r7, #70]	; 0x46
 80021d4:	4613      	mov	r3, r2
 80021d6:	461a      	mov	r2, r3
 80021d8:	493b      	ldr	r1, [pc, #236]	; (80022c8 <ShoreConfigRequest+0x2e0>)
 80021da:	4603      	mov	r3, r0
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4403      	add	r3, r0
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	440b      	add	r3, r1
 80021e4:	333c      	adds	r3, #60	; 0x3c
 80021e6:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].T = req.thrustersFilterT;
 80021e8:	7a7b      	ldrb	r3, [r7, #9]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f8d7 204a 	ldr.w	r2, [r7, #74]	; 0x4a
 80021f0:	4613      	mov	r3, r2
 80021f2:	461a      	mov	r2, r3
 80021f4:	4934      	ldr	r1, [pc, #208]	; (80022c8 <ShoreConfigRequest+0x2e0>)
 80021f6:	4603      	mov	r3, r0
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4403      	add	r3, r0
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	440b      	add	r3, r1
 8002200:	3320      	adds	r3, #32
 8002202:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].K = req.thrustersFilterK;
 8002204:	7a7b      	ldrb	r3, [r7, #9]
 8002206:	4618      	mov	r0, r3
 8002208:	f8d7 204e 	ldr.w	r2, [r7, #78]	; 0x4e
 800220c:	4613      	mov	r3, r2
 800220e:	461a      	mov	r2, r3
 8002210:	492d      	ldr	r1, [pc, #180]	; (80022c8 <ShoreConfigRequest+0x2e0>)
 8002212:	4603      	mov	r3, r0
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4403      	add	r3, r0
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	440b      	add	r3, r1
 800221c:	3324      	adds	r3, #36	; 0x24
 800221e:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].sOutSummatorMax = req.sOutSummatorMax;
 8002220:	7a7b      	ldrb	r3, [r7, #9]
 8002222:	4618      	mov	r0, r3
 8002224:	f8d7 2052 	ldr.w	r2, [r7, #82]	; 0x52
 8002228:	4613      	mov	r3, r2
 800222a:	461a      	mov	r2, r3
 800222c:	4926      	ldr	r1, [pc, #152]	; (80022c8 <ShoreConfigRequest+0x2e0>)
 800222e:	4603      	mov	r3, r0
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4403      	add	r3, r0
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	440b      	add	r3, r1
 8002238:	3340      	adds	r3, #64	; 0x40
 800223a:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].sOutSummatorMin = req.sOutSummatorMin;
 800223c:	7a7b      	ldrb	r3, [r7, #9]
 800223e:	4618      	mov	r0, r3
 8002240:	f8d7 2056 	ldr.w	r2, [r7, #86]	; 0x56
 8002244:	4613      	mov	r3, r2
 8002246:	461a      	mov	r2, r3
 8002248:	491f      	ldr	r1, [pc, #124]	; (80022c8 <ShoreConfigRequest+0x2e0>)
 800224a:	4603      	mov	r3, r0
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4403      	add	r3, r0
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	440b      	add	r3, r1
 8002254:	3344      	adds	r3, #68	; 0x44
 8002256:	601a      	str	r2, [r3, #0]

		if(rState.contourSelected != req.contour) {
 8002258:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <ShoreConfigRequest+0x2e4>)
 800225a:	785a      	ldrb	r2, [r3, #1]
 800225c:	7a7b      	ldrb	r3, [r7, #9]
 800225e:	429a      	cmp	r2, r3
 8002260:	d01d      	beq.n	800229e <ShoreConfigRequest+0x2b6>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002262:	2300      	movs	r3, #0
 8002264:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002268:	e00e      	b.n	8002288 <ShoreConfigRequest+0x2a0>
				rStabConstants[i].enable = false;
 800226a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800226e:	4916      	ldr	r1, [pc, #88]	; (80022c8 <ShoreConfigRequest+0x2e0>)
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4413      	add	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	440b      	add	r3, r1
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800227e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002282:	3301      	adds	r3, #1
 8002284:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002288:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800228c:	2b05      	cmp	r3, #5
 800228e:	d9ec      	bls.n	800226a <ShoreConfigRequest+0x282>
			}
			rState.contourSelected = req.contour;
 8002290:	7a7a      	ldrb	r2, [r7, #9]
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <ShoreConfigRequest+0x2e4>)
 8002294:	705a      	strb	r2, [r3, #1]
			stabilizationStart(req.contour);
 8002296:	7a7b      	ldrb	r3, [r7, #9]
 8002298:	4618      	mov	r0, r3
 800229a:	f001 ff37 	bl	800410c <stabilizationStart>
		}

		// TODO tuuuupooo
		formThrustVectors();
 800229e:	f002 fdbb 	bl	8004e18 <formThrustVectors>

		++uartBus[SHORE_UART].successRxCounter;;
 80022a2:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <ShoreConfigRequest+0x2e8>)
 80022a4:	895b      	ldrh	r3, [r3, #10]
 80022a6:	3301      	adds	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <ShoreConfigRequest+0x2e8>)
 80022ac:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 80022ae:	e004      	b.n	80022ba <ShoreConfigRequest+0x2d2>
		++uartBus[SHORE_UART].brokenRxCounter;
 80022b0:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <ShoreConfigRequest+0x2e8>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	3301      	adds	r3, #1
 80022b6:	4a06      	ldr	r2, [pc, #24]	; (80022d0 <ShoreConfigRequest+0x2e8>)
 80022b8:	60d3      	str	r3, [r2, #12]
}
 80022ba:	bf00      	nop
 80022bc:	3760      	adds	r7, #96	; 0x60
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20001d3c 	.word	0x20001d3c
 80022c8:	20001d94 	.word	0x20001d94
 80022cc:	20001c04 	.word	0x20001c04
 80022d0:	200000ec 	.word	0x200000ec

080022d4 <ShoreDirectRequest>:

void ShoreDirectRequest(uint8_t *requestBuf)
{
 80022d4:	b5b0      	push	{r4, r5, r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_DIRECT_LENGTH)) {
 80022dc:	2111      	movs	r1, #17
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7fe feaf 	bl	8001042 <IsCrc16ChecksummCorrect>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 809b 	beq.w	8002422 <ShoreDirectRequest+0x14e>
		struct shoreRequestDirect_s req;
		memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_DIRECT_LENGTH);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f107 040c 	add.w	r4, r7, #12
 80022f2:	461d      	mov	r5, r3
 80022f4:	6828      	ldr	r0, [r5, #0]
 80022f6:	6869      	ldr	r1, [r5, #4]
 80022f8:	68aa      	ldr	r2, [r5, #8]
 80022fa:	68eb      	ldr	r3, [r5, #12]
 80022fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022fe:	7c2b      	ldrb	r3, [r5, #16]
 8002300:	7023      	strb	r3, [r4, #0]

		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002302:	2300      	movs	r3, #0
 8002304:	77fb      	strb	r3, [r7, #31]
 8002306:	e00b      	b.n	8002320 <ShoreDirectRequest+0x4c>
			rStabConstants[i].enable = false;
 8002308:	7ffa      	ldrb	r2, [r7, #31]
 800230a:	494a      	ldr	r1, [pc, #296]	; (8002434 <ShoreDirectRequest+0x160>)
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	440b      	add	r3, r1
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800231a:	7ffb      	ldrb	r3, [r7, #31]
 800231c:	3301      	adds	r3, #1
 800231e:	77fb      	strb	r3, [r7, #31]
 8002320:	7ffb      	ldrb	r3, [r7, #31]
 8002322:	2b05      	cmp	r3, #5
 8002324:	d9f0      	bls.n	8002308 <ShoreDirectRequest+0x34>
		}

		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8002326:	2300      	movs	r3, #0
 8002328:	77bb      	strb	r3, [r7, #30]
 800232a:	e070      	b.n	800240e <ShoreDirectRequest+0x13a>
			if(i != req.number) {
 800232c:	7b7b      	ldrb	r3, [r7, #13]
 800232e:	7fba      	ldrb	r2, [r7, #30]
 8002330:	429a      	cmp	r2, r3
 8002332:	d00a      	beq.n	800234a <ShoreDirectRequest+0x76>
				rThrusters[i].desiredSpeed = 0;
 8002334:	7fba      	ldrb	r2, [r7, #30]
 8002336:	4940      	ldr	r1, [pc, #256]	; (8002438 <ShoreDirectRequest+0x164>)
 8002338:	4613      	mov	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	440b      	add	r3, r1
 8002342:	3302      	adds	r3, #2
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
 8002348:	e05e      	b.n	8002408 <ShoreDirectRequest+0x134>
			}
			else {
				rThrusters[req.number].desiredSpeed = req.velocity;
 800234a:	7b7b      	ldrb	r3, [r7, #13]
 800234c:	4619      	mov	r1, r3
 800234e:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8002352:	4a39      	ldr	r2, [pc, #228]	; (8002438 <ShoreDirectRequest+0x164>)
 8002354:	460b      	mov	r3, r1
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	440b      	add	r3, r1
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	3302      	adds	r3, #2
 8002360:	4602      	mov	r2, r0
 8002362:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].address = req.id;
 8002364:	7b7b      	ldrb	r3, [r7, #13]
 8002366:	4619      	mov	r1, r3
 8002368:	7bb8      	ldrb	r0, [r7, #14]
 800236a:	4a33      	ldr	r2, [pc, #204]	; (8002438 <ShoreDirectRequest+0x164>)
 800236c:	460b      	mov	r3, r1
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	440b      	add	r3, r1
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4413      	add	r3, r2
 8002376:	4602      	mov	r2, r0
 8002378:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].kForward = req.kForward;
 800237a:	7b7b      	ldrb	r3, [r7, #13]
 800237c:	4618      	mov	r0, r3
 800237e:	f8d7 2011 	ldr.w	r2, [r7, #17]
 8002382:	4613      	mov	r3, r2
 8002384:	461a      	mov	r2, r3
 8002386:	492c      	ldr	r1, [pc, #176]	; (8002438 <ShoreDirectRequest+0x164>)
 8002388:	4603      	mov	r3, r0
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4403      	add	r3, r0
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	440b      	add	r3, r1
 8002392:	330c      	adds	r3, #12
 8002394:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].kBackward = req.kBackward;
 8002396:	7b7b      	ldrb	r3, [r7, #13]
 8002398:	4618      	mov	r0, r3
 800239a:	f8d7 2015 	ldr.w	r2, [r7, #21]
 800239e:	4613      	mov	r3, r2
 80023a0:	461a      	mov	r2, r3
 80023a2:	4925      	ldr	r1, [pc, #148]	; (8002438 <ShoreDirectRequest+0x164>)
 80023a4:	4603      	mov	r3, r0
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4403      	add	r3, r0
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	440b      	add	r3, r1
 80023ae:	3310      	adds	r3, #16
 80023b0:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].sForward = req.sForward;
 80023b2:	7b7b      	ldrb	r3, [r7, #13]
 80023b4:	4619      	mov	r1, r3
 80023b6:	f997 0019 	ldrsb.w	r0, [r7, #25]
 80023ba:	4a1f      	ldr	r2, [pc, #124]	; (8002438 <ShoreDirectRequest+0x164>)
 80023bc:	460b      	mov	r3, r1
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	440b      	add	r3, r1
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	3314      	adds	r3, #20
 80023c8:	4602      	mov	r2, r0
 80023ca:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].sBackward = req.sBackward;
 80023cc:	7b7b      	ldrb	r3, [r7, #13]
 80023ce:	4619      	mov	r1, r3
 80023d0:	f997 001a 	ldrsb.w	r0, [r7, #26]
 80023d4:	4a18      	ldr	r2, [pc, #96]	; (8002438 <ShoreDirectRequest+0x164>)
 80023d6:	460b      	mov	r3, r1
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	440b      	add	r3, r1
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4413      	add	r3, r2
 80023e0:	3315      	adds	r3, #21
 80023e2:	4602      	mov	r2, r0
 80023e4:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].inverse = req.reverse;
 80023e6:	7c3b      	ldrb	r3, [r7, #16]
 80023e8:	7b7a      	ldrb	r2, [r7, #13]
 80023ea:	4611      	mov	r1, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	bf14      	ite	ne
 80023f0:	2301      	movne	r3, #1
 80023f2:	2300      	moveq	r3, #0
 80023f4:	b2d8      	uxtb	r0, r3
 80023f6:	4a10      	ldr	r2, [pc, #64]	; (8002438 <ShoreDirectRequest+0x164>)
 80023f8:	460b      	mov	r3, r1
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	440b      	add	r3, r1
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4413      	add	r3, r2
 8002402:	3316      	adds	r3, #22
 8002404:	4602      	mov	r2, r0
 8002406:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8002408:	7fbb      	ldrb	r3, [r7, #30]
 800240a:	3301      	adds	r3, #1
 800240c:	77bb      	strb	r3, [r7, #30]
 800240e:	7fbb      	ldrb	r3, [r7, #30]
 8002410:	2b07      	cmp	r3, #7
 8002412:	d98b      	bls.n	800232c <ShoreDirectRequest+0x58>
			}
		}

		++uartBus[SHORE_UART].successRxCounter;;
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <ShoreDirectRequest+0x168>)
 8002416:	895b      	ldrh	r3, [r3, #10]
 8002418:	3301      	adds	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	4b07      	ldr	r3, [pc, #28]	; (800243c <ShoreDirectRequest+0x168>)
 800241e:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 8002420:	e004      	b.n	800242c <ShoreDirectRequest+0x158>
		++uartBus[SHORE_UART].brokenRxCounter;
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <ShoreDirectRequest+0x168>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	3301      	adds	r3, #1
 8002428:	4a04      	ldr	r2, [pc, #16]	; (800243c <ShoreDirectRequest+0x168>)
 800242a:	60d3      	str	r3, [r2, #12]
}
 800242c:	bf00      	nop
 800242e:	3720      	adds	r7, #32
 8002430:	46bd      	mov	sp, r7
 8002432:	bdb0      	pop	{r4, r5, r7, pc}
 8002434:	20001d94 	.word	0x20001d94
 8002438:	20001c10 	.word	0x20001c10
 800243c:	200000ec 	.word	0x200000ec

08002440 <ShoreResponse>:

void ShoreResponse(uint8_t *responseBuf)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b094      	sub	sp, #80	; 0x50
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	struct shoreResponse_s res;

    res.roll = rSensors.roll;
 8002448:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <ShoreResponse+0x78>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60bb      	str	r3, [r7, #8]
    res.pitch = rSensors.pitch;
 800244e:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <ShoreResponse+0x78>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	60fb      	str	r3, [r7, #12]
    res.yaw =  rSensors.yaw;//*rStabState[STAB_YAW].posSignal;//rSensors.yaw;
 8002454:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <ShoreResponse+0x78>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	613b      	str	r3, [r7, #16]
    res.rollSpeed = rSensors.rollSpeed;
 800245a:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <ShoreResponse+0x78>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	617b      	str	r3, [r7, #20]
    res.pitchSpeed = rSensors.pitchSpeed;
 8002460:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <ShoreResponse+0x78>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	61bb      	str	r3, [r7, #24]
    res.yawSpeed = rSensors.yawSpeed;
 8002466:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <ShoreResponse+0x78>)
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	61fb      	str	r3, [r7, #28]

    res.pressure = rSensors.pressure;
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <ShoreResponse+0x78>)
 800246e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002470:	623b      	str	r3, [r7, #32]

    res.vma_errors = 0x55;         //!!!!!TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 8002472:	2300      	movs	r3, #0
 8002474:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8002478:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800247c:	2300      	movs	r3, #0
 800247e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    // TODO do this properly pls
    res.dev_errors = 0;//robot->device.errors;
 8002482:	2300      	movs	r3, #0
 8002484:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8002488:	2300      	movs	r3, #0
 800248a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    res.pc_errors = rComputer.errors;
 800248e:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <ShoreResponse+0x7c>)
 8002490:	785b      	ldrb	r3, [r3, #1]
 8002492:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

    memcpy((void*)responseBuf, (void*)&res, SHORE_RESPONSE_LENGTH);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4618      	mov	r0, r3
 800249a:	f107 0308 	add.w	r3, r7, #8
 800249e:	2246      	movs	r2, #70	; 0x46
 80024a0:	4619      	mov	r1, r3
 80024a2:	f00c f8ed 	bl	800e680 <memcpy>
    AddCrc16Checksumm(responseBuf, SHORE_RESPONSE_LENGTH);
 80024a6:	2146      	movs	r1, #70	; 0x46
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7fe fdea 	bl	8001082 <AddCrc16Checksumm>
}
 80024ae:	bf00      	nop
 80024b0:	3750      	adds	r7, #80	; 0x50
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20001cd0 	.word	0x20001cd0
 80024bc:	20001d38 	.word	0x20001d38

080024c0 <ShoreConfigResponse>:

void ShoreConfigResponse(uint8_t *responseBuf)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b09c      	sub	sp, #112	; 0x70
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
	struct shoreConfigResponse_s res;

	res.code = REQUEST_CONFIG_CODE;
 80024c8:	2355      	movs	r3, #85	; 0x55
 80024ca:	733b      	strb	r3, [r7, #12]

	res.roll = rSensors.roll;
 80024cc:	4b74      	ldr	r3, [pc, #464]	; (80026a0 <ShoreConfigResponse+0x1e0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8c7 300d 	str.w	r3, [r7, #13]
	res.pitch = rSensors.pitch;
 80024d4:	4b72      	ldr	r3, [pc, #456]	; (80026a0 <ShoreConfigResponse+0x1e0>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f8c7 3011 	str.w	r3, [r7, #17]
	res.yaw = rSensors.yaw;
 80024dc:	4b70      	ldr	r3, [pc, #448]	; (80026a0 <ShoreConfigResponse+0x1e0>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f8c7 3015 	str.w	r3, [r7, #21]
	res.raw_yaw = rSensors.raw_yaw;
 80024e4:	4b6e      	ldr	r3, [pc, #440]	; (80026a0 <ShoreConfigResponse+0x1e0>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f8c7 3019 	str.w	r3, [r7, #25]

	res.rollSpeed = rSensors.rollSpeed;
 80024ec:	4b6c      	ldr	r3, [pc, #432]	; (80026a0 <ShoreConfigResponse+0x1e0>)
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	f8c7 301d 	str.w	r3, [r7, #29]
	res.pitchSpeed = rSensors.pitchSpeed;
 80024f4:	4b6a      	ldr	r3, [pc, #424]	; (80026a0 <ShoreConfigResponse+0x1e0>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
	res.yawSpeed = rSensors.yawSpeed;
 80024fc:	4b68      	ldr	r3, [pc, #416]	; (80026a0 <ShoreConfigResponse+0x1e0>)
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25

	res.pressure = rSensors.pressure;
 8002504:	4b66      	ldr	r3, [pc, #408]	; (80026a0 <ShoreConfigResponse+0x1e0>)
 8002506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002508:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
	res.in_pressure = 0;
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	f8c7 302d 	str.w	r3, [r7, #45]	; 0x2d

	res.inputSignal = *rStabState[rState.contourSelected].inputSignal;
 8002514:	4b63      	ldr	r3, [pc, #396]	; (80026a4 <ShoreConfigResponse+0x1e4>)
 8002516:	785b      	ldrb	r3, [r3, #1]
 8002518:	4619      	mov	r1, r3
 800251a:	4a63      	ldr	r2, [pc, #396]	; (80026a8 <ShoreConfigResponse+0x1e8>)
 800251c:	2358      	movs	r3, #88	; 0x58
 800251e:	fb01 f303 	mul.w	r3, r1, r3
 8002522:	4413      	add	r3, r2
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f8c7 3031 	str.w	r3, [r7, #49]	; 0x31
	res.speedSignal = *rStabState[rState.contourSelected].speedSignal;
 800252c:	4b5d      	ldr	r3, [pc, #372]	; (80026a4 <ShoreConfigResponse+0x1e4>)
 800252e:	785b      	ldrb	r3, [r3, #1]
 8002530:	4619      	mov	r1, r3
 8002532:	4a5d      	ldr	r2, [pc, #372]	; (80026a8 <ShoreConfigResponse+0x1e8>)
 8002534:	2358      	movs	r3, #88	; 0x58
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	3304      	adds	r3, #4
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f8c7 3035 	str.w	r3, [r7, #53]	; 0x35
	res.posSignal = *rStabState[rState.contourSelected].posSignal;
 8002546:	4b57      	ldr	r3, [pc, #348]	; (80026a4 <ShoreConfigResponse+0x1e4>)
 8002548:	785b      	ldrb	r3, [r3, #1]
 800254a:	4619      	mov	r1, r3
 800254c:	4a56      	ldr	r2, [pc, #344]	; (80026a8 <ShoreConfigResponse+0x1e8>)
 800254e:	2358      	movs	r3, #88	; 0x58
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	3308      	adds	r3, #8
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f8c7 3039 	str.w	r3, [r7, #57]	; 0x39

	res.joyUnitCasted = rStabState[rState.contourSelected].joyUnitCasted;
 8002560:	4b50      	ldr	r3, [pc, #320]	; (80026a4 <ShoreConfigResponse+0x1e4>)
 8002562:	785b      	ldrb	r3, [r3, #1]
 8002564:	4619      	mov	r1, r3
 8002566:	4a50      	ldr	r2, [pc, #320]	; (80026a8 <ShoreConfigResponse+0x1e8>)
 8002568:	2358      	movs	r3, #88	; 0x58
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4413      	add	r3, r2
 8002570:	331c      	adds	r3, #28
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f8c7 303d 	str.w	r3, [r7, #61]	; 0x3d
	res.joy_iValue = rStabState[rState.contourSelected].joy_iValue;
 8002578:	4b4a      	ldr	r3, [pc, #296]	; (80026a4 <ShoreConfigResponse+0x1e4>)
 800257a:	785b      	ldrb	r3, [r3, #1]
 800257c:	4619      	mov	r1, r3
 800257e:	4a4a      	ldr	r2, [pc, #296]	; (80026a8 <ShoreConfigResponse+0x1e8>)
 8002580:	2358      	movs	r3, #88	; 0x58
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	4413      	add	r3, r2
 8002588:	3320      	adds	r3, #32
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8c7 3041 	str.w	r3, [r7, #65]	; 0x41
	res.posError = rStabState[rState.contourSelected].posError;
 8002590:	4b44      	ldr	r3, [pc, #272]	; (80026a4 <ShoreConfigResponse+0x1e4>)
 8002592:	785b      	ldrb	r3, [r3, #1]
 8002594:	4619      	mov	r1, r3
 8002596:	4a44      	ldr	r2, [pc, #272]	; (80026a8 <ShoreConfigResponse+0x1e8>)
 8002598:	2358      	movs	r3, #88	; 0x58
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	4413      	add	r3, r2
 80025a0:	3324      	adds	r3, #36	; 0x24
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f8c7 3045 	str.w	r3, [r7, #69]	; 0x45
	res.speedError = rStabState[rState.contourSelected].speedError;
 80025a8:	4b3e      	ldr	r3, [pc, #248]	; (80026a4 <ShoreConfigResponse+0x1e4>)
 80025aa:	785b      	ldrb	r3, [r3, #1]
 80025ac:	4619      	mov	r1, r3
 80025ae:	4a3e      	ldr	r2, [pc, #248]	; (80026a8 <ShoreConfigResponse+0x1e8>)
 80025b0:	2358      	movs	r3, #88	; 0x58
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	3328      	adds	r3, #40	; 0x28
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f8c7 3049 	str.w	r3, [r7, #73]	; 0x49
	res.dynSummator = rStabState[rState.contourSelected].dynSummator;
 80025c0:	4b38      	ldr	r3, [pc, #224]	; (80026a4 <ShoreConfigResponse+0x1e4>)
 80025c2:	785b      	ldrb	r3, [r3, #1]
 80025c4:	4619      	mov	r1, r3
 80025c6:	4a38      	ldr	r2, [pc, #224]	; (80026a8 <ShoreConfigResponse+0x1e8>)
 80025c8:	2358      	movs	r3, #88	; 0x58
 80025ca:	fb01 f303 	mul.w	r3, r1, r3
 80025ce:	4413      	add	r3, r2
 80025d0:	332c      	adds	r3, #44	; 0x2c
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8c7 304d 	str.w	r3, [r7, #77]	; 0x4d
	res.pidValue = rStabState[rState.contourSelected].pidValue;
 80025d8:	4b32      	ldr	r3, [pc, #200]	; (80026a4 <ShoreConfigResponse+0x1e4>)
 80025da:	785b      	ldrb	r3, [r3, #1]
 80025dc:	4619      	mov	r1, r3
 80025de:	4a32      	ldr	r2, [pc, #200]	; (80026a8 <ShoreConfigResponse+0x1e8>)
 80025e0:	2358      	movs	r3, #88	; 0x58
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	3330      	adds	r3, #48	; 0x30
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8c7 3051 	str.w	r3, [r7, #81]	; 0x51
	res.posErrorAmp = rStabState[rState.contourSelected].posErrorAmp;
 80025f0:	4b2c      	ldr	r3, [pc, #176]	; (80026a4 <ShoreConfigResponse+0x1e4>)
 80025f2:	785b      	ldrb	r3, [r3, #1]
 80025f4:	4619      	mov	r1, r3
 80025f6:	4a2c      	ldr	r2, [pc, #176]	; (80026a8 <ShoreConfigResponse+0x1e8>)
 80025f8:	2358      	movs	r3, #88	; 0x58
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	4413      	add	r3, r2
 8002600:	3338      	adds	r3, #56	; 0x38
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8c7 3055 	str.w	r3, [r7, #85]	; 0x55
	res.speedFiltered = rStabState[rState.contourSelected].speedFiltered;
 8002608:	4b26      	ldr	r3, [pc, #152]	; (80026a4 <ShoreConfigResponse+0x1e4>)
 800260a:	785b      	ldrb	r3, [r3, #1]
 800260c:	4619      	mov	r1, r3
 800260e:	4a26      	ldr	r2, [pc, #152]	; (80026a8 <ShoreConfigResponse+0x1e8>)
 8002610:	2358      	movs	r3, #88	; 0x58
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	333c      	adds	r3, #60	; 0x3c
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8c7 3059 	str.w	r3, [r7, #89]	; 0x59
	res.posFiltered = rStabState[rState.contourSelected].posFiltered;
 8002620:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <ShoreConfigResponse+0x1e4>)
 8002622:	785b      	ldrb	r3, [r3, #1]
 8002624:	4619      	mov	r1, r3
 8002626:	4a20      	ldr	r2, [pc, #128]	; (80026a8 <ShoreConfigResponse+0x1e8>)
 8002628:	2358      	movs	r3, #88	; 0x58
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	4413      	add	r3, r2
 8002630:	3340      	adds	r3, #64	; 0x40
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f8c7 305d 	str.w	r3, [r7, #93]	; 0x5d

	res.pid_iValue = rStabState[rState.contourSelected].pid_iValue;
 8002638:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <ShoreConfigResponse+0x1e4>)
 800263a:	785b      	ldrb	r3, [r3, #1]
 800263c:	4619      	mov	r1, r3
 800263e:	4a1a      	ldr	r2, [pc, #104]	; (80026a8 <ShoreConfigResponse+0x1e8>)
 8002640:	2358      	movs	r3, #88	; 0x58
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3334      	adds	r3, #52	; 0x34
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f8c7 3061 	str.w	r3, [r7, #97]	; 0x61

	res.thrustersFiltered = rStabState[rState.contourSelected].thrustersFiltered;
 8002650:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <ShoreConfigResponse+0x1e4>)
 8002652:	785b      	ldrb	r3, [r3, #1]
 8002654:	4619      	mov	r1, r3
 8002656:	4a14      	ldr	r2, [pc, #80]	; (80026a8 <ShoreConfigResponse+0x1e8>)
 8002658:	2358      	movs	r3, #88	; 0x58
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	334c      	adds	r3, #76	; 0x4c
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8c7 3065 	str.w	r3, [r7, #101]	; 0x65
	res.outputSignal = rStabState[rState.contourSelected].outputSignal;
 8002668:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <ShoreConfigResponse+0x1e4>)
 800266a:	785b      	ldrb	r3, [r3, #1]
 800266c:	4619      	mov	r1, r3
 800266e:	4a0e      	ldr	r2, [pc, #56]	; (80026a8 <ShoreConfigResponse+0x1e8>)
 8002670:	2358      	movs	r3, #88	; 0x58
 8002672:	fb01 f303 	mul.w	r3, r1, r3
 8002676:	4413      	add	r3, r2
 8002678:	3350      	adds	r3, #80	; 0x50
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f8c7 3069 	str.w	r3, [r7, #105]	; 0x69

	memcpy((void*)responseBuf, (void*)&res, SHORE_CONFIG_RESPONSE_LENGTH);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4618      	mov	r0, r3
 8002684:	f107 030c 	add.w	r3, r7, #12
 8002688:	2263      	movs	r2, #99	; 0x63
 800268a:	4619      	mov	r1, r3
 800268c:	f00b fff8 	bl	800e680 <memcpy>

	AddCrc16Checksumm(responseBuf, SHORE_CONFIG_RESPONSE_LENGTH);
 8002690:	2163      	movs	r1, #99	; 0x63
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe fcf5 	bl	8001082 <AddCrc16Checksumm>
}
 8002698:	bf00      	nop
 800269a:	3770      	adds	r7, #112	; 0x70
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20001cd0 	.word	0x20001cd0
 80026a4:	20001c04 	.word	0x20001c04
 80026a8:	20001f44 	.word	0x20001f44

080026ac <ShoreDirectResponse>:

void ShoreDirectResponse(uint8_t *responseBuf)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	struct shoreResponseDirect_s res;

	res.number = 0xFF;
 80026b4:	23ff      	movs	r3, #255	; 0xff
 80026b6:	723b      	strb	r3, [r7, #8]
	res.connection = 0xAA;
 80026b8:	23aa      	movs	r3, #170	; 0xaa
 80026ba:	727b      	strb	r3, [r7, #9]
	res.current = 0xBB;
 80026bc:	23bb      	movs	r3, #187	; 0xbb
 80026be:	817b      	strh	r3, [r7, #10]

    memcpy((void*)responseBuf, (void*)&res, SHORE_DIRECT_RESPONSE_LENGTH);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	461a      	mov	r2, r3
 80026c4:	f107 0308 	add.w	r3, r7, #8
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	6010      	str	r0, [r2, #0]
 80026cc:	889b      	ldrh	r3, [r3, #4]
 80026ce:	8093      	strh	r3, [r2, #4]

    AddCrc16Checksumm(responseBuf, SHORE_DIRECT_RESPONSE_LENGTH);
 80026d0:	2106      	movs	r1, #6
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fe fcd5 	bl	8001082 <AddCrc16Checksumm>
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <ImuReceive>:
		crc ^= (crc & 0x00ff) << 5; }
	return crc;
}

void ImuReceive(uint8_t *ReceiveBuf)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
	 // Check sync byte
	 if ((ReceiveBuf[0] != 0xFA)&&(ReceiveBuf[1] != 0x01)&&(ReceiveBuf[2] != 0x29)&&(ReceiveBuf[3] != 0x01))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2bfa      	cmp	r3, #250	; 0xfa
 80026ee:	d00e      	beq.n	800270e <ImuReceive+0x2e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3301      	adds	r3, #1
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d009      	beq.n	800270e <ImuReceive+0x2e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3302      	adds	r3, #2
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b29      	cmp	r3, #41	; 0x29
 8002702:	d004      	beq.n	800270e <ImuReceive+0x2e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3303      	adds	r3, #3
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d13c      	bne.n	8002788 <ImuReceive+0xa8>
//            ++uartBus[IMU_UART].brokenRxCounter;
//            return;
//        }
//    }

  	  memcpy(&rSensors.yaw, ReceiveBuf + 12, sizeof(rSensors.yaw));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	330c      	adds	r3, #12
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <ImuReceive+0xb0>)
 8002718:	609a      	str	r2, [r3, #8]
  	  memcpy(&rSensors.pitch, ReceiveBuf + 16, sizeof(rSensors.pitch));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3310      	adds	r3, #16
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <ImuReceive+0xb0>)
 8002724:	605a      	str	r2, [r3, #4]
  	  memcpy(&rSensors.roll, ReceiveBuf + 20, sizeof(rSensors.roll));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3314      	adds	r3, #20
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	461a      	mov	r2, r3
 800272e:	4b18      	ldr	r3, [pc, #96]	; (8002790 <ImuReceive+0xb0>)
 8002730:	601a      	str	r2, [r3, #0]

  	  memcpy(&rSensors.accelX, ReceiveBuf + 36, sizeof(rSensors.accelX));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3324      	adds	r3, #36	; 0x24
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	4b15      	ldr	r3, [pc, #84]	; (8002790 <ImuReceive+0xb0>)
 800273c:	629a      	str	r2, [r3, #40]	; 0x28
  	  memcpy(&rSensors.accelY, ReceiveBuf + 40, sizeof(rSensors.accelY));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3328      	adds	r3, #40	; 0x28
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	4b12      	ldr	r3, [pc, #72]	; (8002790 <ImuReceive+0xb0>)
 8002748:	62da      	str	r2, [r3, #44]	; 0x2c
  	  memcpy(&rSensors.accelZ, ReceiveBuf + 44, sizeof(rSensors.accelZ));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	332c      	adds	r3, #44	; 0x2c
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <ImuReceive+0xb0>)
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
  	  memcpy(&rSensors.crc, ReceiveBuf + 48, sizeof(rSensors.crc));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3330      	adds	r3, #48	; 0x30
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	b29a      	uxth	r2, r3
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <ImuReceive+0xb0>)
 8002760:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52


//	float diffTime = fromTickToMs(xTaskGetTickCount() - rSensors.LastTick) / 1000.0f;
    rSensors.LastTick = xTaskGetTickCount();
 8002764:	f00a f9fc 	bl	800cb60 <xTaskGetTickCount>
 8002768:	ee07 0a90 	vmov	s15, r0
 800276c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002770:	4b07      	ldr	r3, [pc, #28]	; (8002790 <ImuReceive+0xb0>)
 8002772:	edc3 7a05 	vstr	s15, [r3, #20]


    ++uartBus[IMU_UART].successRxCounter;
 8002776:	4b07      	ldr	r3, [pc, #28]	; (8002794 <ImuReceive+0xb4>)
 8002778:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800277c:	3301      	adds	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	4b04      	ldr	r3, [pc, #16]	; (8002794 <ImuReceive+0xb4>)
 8002782:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8002786:	e000      	b.n	800278a <ImuReceive+0xaa>
		 return;
 8002788:	bf00      	nop
}
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20001cd0 	.word	0x20001cd0
 8002794:	200000ec 	.word	0x200000ec

08002798 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]
 80027a2:	4b27      	ldr	r3, [pc, #156]	; (8002840 <MX_DMA_Init+0xa8>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a26      	ldr	r2, [pc, #152]	; (8002840 <MX_DMA_Init+0xa8>)
 80027a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b24      	ldr	r3, [pc, #144]	; (8002840 <MX_DMA_Init+0xa8>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b6:	607b      	str	r3, [r7, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	603b      	str	r3, [r7, #0]
 80027be:	4b20      	ldr	r3, [pc, #128]	; (8002840 <MX_DMA_Init+0xa8>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	4a1f      	ldr	r2, [pc, #124]	; (8002840 <MX_DMA_Init+0xa8>)
 80027c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027c8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ca:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <MX_DMA_Init+0xa8>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2105      	movs	r1, #5
 80027da:	200c      	movs	r0, #12
 80027dc:	f003 fc82 	bl	80060e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80027e0:	200c      	movs	r0, #12
 80027e2:	f003 fc9b 	bl	800611c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80027e6:	2200      	movs	r2, #0
 80027e8:	2105      	movs	r1, #5
 80027ea:	200e      	movs	r0, #14
 80027ec:	f003 fc7a 	bl	80060e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80027f0:	200e      	movs	r0, #14
 80027f2:	f003 fc93 	bl	800611c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2105      	movs	r1, #5
 80027fa:	2010      	movs	r0, #16
 80027fc:	f003 fc72 	bl	80060e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002800:	2010      	movs	r0, #16
 8002802:	f003 fc8b 	bl	800611c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	2105      	movs	r1, #5
 800280a:	2011      	movs	r0, #17
 800280c:	f003 fc6a 	bl	80060e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002810:	2011      	movs	r0, #17
 8002812:	f003 fc83 	bl	800611c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	2105      	movs	r1, #5
 800281a:	203a      	movs	r0, #58	; 0x3a
 800281c:	f003 fc62 	bl	80060e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002820:	203a      	movs	r0, #58	; 0x3a
 8002822:	f003 fc7b 	bl	800611c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002826:	2200      	movs	r2, #0
 8002828:	2105      	movs	r1, #5
 800282a:	2046      	movs	r0, #70	; 0x46
 800282c:	f003 fc5a 	bl	80060e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002830:	2046      	movs	r0, #70	; 0x46
 8002832:	f003 fc73 	bl	800611c <HAL_NVIC_EnableIRQ>

}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800

08002844 <flashReadSettings>:
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
	HAL_FLASH_Lock();
}

void flashReadSettings(struct flashConfiguration_s *config)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
	uint32_t *source_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 800284c:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <flashReadSettings+0x44>)
 800284e:	617b      	str	r3, [r7, #20]
	uint32_t *dest_addr = (void *)config;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	613b      	str	r3, [r7, #16]

	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 8002854:	2300      	movs	r3, #0
 8002856:	81fb      	strh	r3, [r7, #14]
 8002858:	e00c      	b.n	8002874 <flashReadSettings+0x30>
		*dest_addr = *(__IO uint32_t*)source_addr;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	601a      	str	r2, [r3, #0]
		source_addr++;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	3304      	adds	r3, #4
 8002866:	617b      	str	r3, [r7, #20]
		dest_addr++;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	3304      	adds	r3, #4
 800286c:	613b      	str	r3, [r7, #16]
	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 800286e:	89fb      	ldrh	r3, [r7, #14]
 8002870:	3301      	adds	r3, #1
 8002872:	81fb      	strh	r3, [r7, #14]
 8002874:	89fb      	ldrh	r3, [r7, #14]
 8002876:	2b89      	cmp	r3, #137	; 0x89
 8002878:	d9ef      	bls.n	800285a <flashReadSettings+0x16>
	}
}
 800287a:	bf00      	nop
 800287c:	bf00      	nop
 800287e:	371c      	adds	r7, #28
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	0803f800 	.word	0x0803f800

0800288c <flashWriteSettings>:

void flashWriteSettings(struct flashConfiguration_s *config)
{
 800288c:	b5b0      	push	{r4, r5, r7, lr}
 800288e:	b08c      	sub	sp, #48	; 0x30
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	// Write settings
	HAL_FLASH_Unlock();
 8002894:	f004 f8b4 	bl	8006a00 <HAL_FLASH_Unlock>

	// erase page
	FLASH_EraseInitTypeDef erase_conf;
	erase_conf.TypeErase = FLASH_TYPEERASE_SECTORS; // erase 1 page
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]
	erase_conf.Sector = (uint32_t)(CONFIG_PAGE_ADDR);
 800289c:	4b19      	ldr	r3, [pc, #100]	; (8002904 <flashWriteSettings+0x78>)
 800289e:	61bb      	str	r3, [r7, #24]
	erase_conf.NbSectors = 1;
 80028a0:	2301      	movs	r3, #1
 80028a2:	61fb      	str	r3, [r7, #28]

	uint32_t page_error;
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
 80028a4:	f107 020c 	add.w	r2, r7, #12
 80028a8:	f107 0310 	add.w	r3, r7, #16
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f004 fa08 	bl	8006cc4 <HAL_FLASHEx_Erase>

	// write page
	uint32_t *source_addr = (void *)config;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t *dest_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <flashWriteSettings+0x78>)
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 80028bc:	2300      	movs	r3, #0
 80028be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80028c2:	e015      	b.n	80028f0 <flashWriteSettings+0x64>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)dest_addr, *source_addr);
 80028c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2200      	movs	r2, #0
 80028cc:	461c      	mov	r4, r3
 80028ce:	4615      	mov	r5, r2
 80028d0:	4622      	mov	r2, r4
 80028d2:	462b      	mov	r3, r5
 80028d4:	2002      	movs	r0, #2
 80028d6:	f004 f83f 	bl	8006958 <HAL_FLASH_Program>
		source_addr++;
 80028da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028dc:	3304      	adds	r3, #4
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
		dest_addr++;
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	3304      	adds	r3, #4
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 80028e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028ea:	3301      	adds	r3, #1
 80028ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80028f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028f4:	2b89      	cmp	r3, #137	; 0x89
 80028f6:	d9e5      	bls.n	80028c4 <flashWriteSettings+0x38>
	}

	HAL_FLASH_Lock();
 80028f8:	f004 f8a4 	bl	8006a44 <HAL_FLASH_Lock>
}
 80028fc:	bf00      	nop
 80028fe:	3730      	adds	r7, #48	; 0x30
 8002900:	46bd      	mov	sp, r7
 8002902:	bdb0      	pop	{r4, r5, r7, pc}
 8002904:	0803f800 	.word	0x0803f800

08002908 <flashFillStructure>:

void flashFillStructure(struct flashConfiguration_s *config)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	config->writeFlag = 0xAA;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	22aa      	movs	r2, #170	; 0xaa
 8002914:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002916:	2300      	movs	r3, #0
 8002918:	73fb      	strb	r3, [r7, #15]
 800291a:	e154      	b.n	8002bc6 <flashFillStructure+0x2be>
		config->stabConstants[i].pJoyUnitCast = rStabConstants[i].pJoyUnitCast;
 800291c:	7bf9      	ldrb	r1, [r7, #15]
 800291e:	7bfa      	ldrb	r2, [r7, #15]
 8002920:	48ae      	ldr	r0, [pc, #696]	; (8002bdc <flashFillStructure+0x2d4>)
 8002922:	460b      	mov	r3, r1
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	440b      	add	r3, r1
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4403      	add	r3, r0
 800292c:	3304      	adds	r3, #4
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	3301      	adds	r3, #1
 800293e:	4602      	mov	r2, r0
 8002940:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pSpeedDyn = rStabConstants[i].pSpeedDyn;
 8002942:	7bf9      	ldrb	r1, [r7, #15]
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	48a5      	ldr	r0, [pc, #660]	; (8002bdc <flashFillStructure+0x2d4>)
 8002948:	460b      	mov	r3, r1
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4403      	add	r3, r0
 8002952:	3308      	adds	r3, #8
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3305      	adds	r3, #5
 8002964:	4602      	mov	r2, r0
 8002966:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pErrGain = rStabConstants[i].pErrGain;
 8002968:	7bf9      	ldrb	r1, [r7, #15]
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	489b      	ldr	r0, [pc, #620]	; (8002bdc <flashFillStructure+0x2d4>)
 800296e:	460b      	mov	r3, r1
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4403      	add	r3, r0
 8002978:	330c      	adds	r3, #12
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	3308      	adds	r3, #8
 800298a:	3301      	adds	r3, #1
 800298c:	4602      	mov	r2, r0
 800298e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T1 = rStabConstants[i].aFilter[POS_FILTER].T;
 8002990:	7bf9      	ldrb	r1, [r7, #15]
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	4891      	ldr	r0, [pc, #580]	; (8002bdc <flashFillStructure+0x2d4>)
 8002996:	460b      	mov	r3, r1
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	440b      	add	r3, r1
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4403      	add	r3, r0
 80029a0:	3310      	adds	r3, #16
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	3308      	adds	r3, #8
 80029b2:	3305      	adds	r3, #5
 80029b4:	4602      	mov	r2, r0
 80029b6:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T2 = rStabConstants[i].aFilter[SPEED_FILTER].T;
 80029b8:	7bf9      	ldrb	r1, [r7, #15]
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	4887      	ldr	r0, [pc, #540]	; (8002bdc <flashFillStructure+0x2d4>)
 80029be:	460b      	mov	r3, r1
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	440b      	add	r3, r1
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4403      	add	r3, r0
 80029c8:	3318      	adds	r3, #24
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	3310      	adds	r3, #16
 80029da:	3301      	adds	r3, #1
 80029dc:	4602      	mov	r2, r0
 80029de:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K1 = rStabConstants[i].aFilter[POS_FILTER].K;
 80029e0:	7bf9      	ldrb	r1, [r7, #15]
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	487d      	ldr	r0, [pc, #500]	; (8002bdc <flashFillStructure+0x2d4>)
 80029e6:	460b      	mov	r3, r1
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	440b      	add	r3, r1
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4403      	add	r3, r0
 80029f0:	3314      	adds	r3, #20
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	3310      	adds	r3, #16
 8002a02:	3305      	adds	r3, #5
 8002a04:	4602      	mov	r2, r0
 8002a06:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K2 = rStabConstants[i].aFilter[SPEED_FILTER].K;
 8002a08:	7bf9      	ldrb	r1, [r7, #15]
 8002a0a:	7bfa      	ldrb	r2, [r7, #15]
 8002a0c:	4873      	ldr	r0, [pc, #460]	; (8002bdc <flashFillStructure+0x2d4>)
 8002a0e:	460b      	mov	r3, r1
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	440b      	add	r3, r1
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4403      	add	r3, r0
 8002a18:	331c      	adds	r3, #28
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	3318      	adds	r3, #24
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_pGain = rStabConstants[i].pid.pGain;
 8002a30:	7bf9      	ldrb	r1, [r7, #15]
 8002a32:	7bfa      	ldrb	r2, [r7, #15]
 8002a34:	4869      	ldr	r0, [pc, #420]	; (8002bdc <flashFillStructure+0x2d4>)
 8002a36:	460b      	mov	r3, r1
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	440b      	add	r3, r1
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4403      	add	r3, r0
 8002a40:	3328      	adds	r3, #40	; 0x28
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	3318      	adds	r3, #24
 8002a52:	3305      	adds	r3, #5
 8002a54:	4602      	mov	r2, r0
 8002a56:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iGain = rStabConstants[i].pid.iGain;
 8002a58:	7bf9      	ldrb	r1, [r7, #15]
 8002a5a:	7bfa      	ldrb	r2, [r7, #15]
 8002a5c:	485f      	ldr	r0, [pc, #380]	; (8002bdc <flashFillStructure+0x2d4>)
 8002a5e:	460b      	mov	r3, r1
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4403      	add	r3, r0
 8002a68:	332c      	adds	r3, #44	; 0x2c
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	3320      	adds	r3, #32
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMax = rStabConstants[i].pid.iMax;
 8002a80:	7bf9      	ldrb	r1, [r7, #15]
 8002a82:	7bfa      	ldrb	r2, [r7, #15]
 8002a84:	4855      	ldr	r0, [pc, #340]	; (8002bdc <flashFillStructure+0x2d4>)
 8002a86:	460b      	mov	r3, r1
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	440b      	add	r3, r1
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4403      	add	r3, r0
 8002a90:	3330      	adds	r3, #48	; 0x30
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	3320      	adds	r3, #32
 8002aa2:	3305      	adds	r3, #5
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMin = rStabConstants[i].pid.iMin;
 8002aa8:	7bf9      	ldrb	r1, [r7, #15]
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	484b      	ldr	r0, [pc, #300]	; (8002bdc <flashFillStructure+0x2d4>)
 8002aae:	460b      	mov	r3, r1
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	440b      	add	r3, r1
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4403      	add	r3, r0
 8002ab8:	3334      	adds	r3, #52	; 0x34
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	3328      	adds	r3, #40	; 0x28
 8002aca:	3301      	adds	r3, #1
 8002acc:	4602      	mov	r2, r0
 8002ace:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMin = rStabConstants[i].pThrustersMin;
 8002ad0:	7bf9      	ldrb	r1, [r7, #15]
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	4841      	ldr	r0, [pc, #260]	; (8002bdc <flashFillStructure+0x2d4>)
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	440b      	add	r3, r1
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4403      	add	r3, r0
 8002ae0:	3338      	adds	r3, #56	; 0x38
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	3328      	adds	r3, #40	; 0x28
 8002af2:	3305      	adds	r3, #5
 8002af4:	4602      	mov	r2, r0
 8002af6:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMax = rStabConstants[i].pThrustersMax;
 8002af8:	7bf9      	ldrb	r1, [r7, #15]
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	4837      	ldr	r0, [pc, #220]	; (8002bdc <flashFillStructure+0x2d4>)
 8002afe:	460b      	mov	r3, r1
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4403      	add	r3, r0
 8002b08:	333c      	adds	r3, #60	; 0x3c
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	3330      	adds	r3, #48	; 0x30
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_T = rStabConstants[i].aFilter[THRUSTERS_FILTER].T;
 8002b20:	7bf9      	ldrb	r1, [r7, #15]
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	482d      	ldr	r0, [pc, #180]	; (8002bdc <flashFillStructure+0x2d4>)
 8002b26:	460b      	mov	r3, r1
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	440b      	add	r3, r1
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4403      	add	r3, r0
 8002b30:	3320      	adds	r3, #32
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	3330      	adds	r3, #48	; 0x30
 8002b42:	3305      	adds	r3, #5
 8002b44:	4602      	mov	r2, r0
 8002b46:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_K = rStabConstants[i].aFilter[THRUSTERS_FILTER].K;
 8002b48:	7bf9      	ldrb	r1, [r7, #15]
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	4823      	ldr	r0, [pc, #140]	; (8002bdc <flashFillStructure+0x2d4>)
 8002b4e:	460b      	mov	r3, r1
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	440b      	add	r3, r1
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4403      	add	r3, r0
 8002b58:	3324      	adds	r3, #36	; 0x24
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	3338      	adds	r3, #56	; 0x38
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMax = rStabConstants[i].sOutSummatorMax;
 8002b70:	7bf9      	ldrb	r1, [r7, #15]
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	4819      	ldr	r0, [pc, #100]	; (8002bdc <flashFillStructure+0x2d4>)
 8002b76:	460b      	mov	r3, r1
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	440b      	add	r3, r1
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4403      	add	r3, r0
 8002b80:	3340      	adds	r3, #64	; 0x40
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	3338      	adds	r3, #56	; 0x38
 8002b92:	3305      	adds	r3, #5
 8002b94:	4602      	mov	r2, r0
 8002b96:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMin = rStabConstants[i].sOutSummatorMin;
 8002b98:	7bf9      	ldrb	r1, [r7, #15]
 8002b9a:	7bfa      	ldrb	r2, [r7, #15]
 8002b9c:	480f      	ldr	r0, [pc, #60]	; (8002bdc <flashFillStructure+0x2d4>)
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4403      	add	r3, r0
 8002ba8:	3344      	adds	r3, #68	; 0x44
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	3340      	adds	r3, #64	; 0x40
 8002bba:	3301      	adds	r3, #1
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	2b05      	cmp	r3, #5
 8002bca:	f67f aea7 	bls.w	800291c <flashFillStructure+0x14>
//		config->thrusters[i].kBackward = rThrusters[i].kBackward;
//		config->thrusters[i].sForward = rThrusters[i].sForward;
//		config->thrusters[i].sBackward = rThrusters[i].sBackward;
//		config->thrusters[i].inverse = rThrusters[i].inverse;
//	}
}
 8002bce:	bf00      	nop
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	20001d94 	.word	0x20001d94

08002be0 <flashReadStructure>:

void flashReadStructure(struct flashConfiguration_s *config)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002be8:	2300      	movs	r3, #0
 8002bea:	73fb      	strb	r3, [r7, #15]
 8002bec:	e165      	b.n	8002eba <flashReadStructure+0x2da>
		rStabConstants[i].pJoyUnitCast = config->stabConstants[i].pJoyUnitCast;
 8002bee:	7bfa      	ldrb	r2, [r7, #15]
 8002bf0:	7bf9      	ldrb	r1, [r7, #15]
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4403      	add	r3, r0
 8002bfe:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002c02:	4613      	mov	r3, r2
 8002c04:	461a      	mov	r2, r3
 8002c06:	48b7      	ldr	r0, [pc, #732]	; (8002ee4 <flashReadStructure+0x304>)
 8002c08:	460b      	mov	r3, r1
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4403      	add	r3, r0
 8002c12:	3304      	adds	r3, #4
 8002c14:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pSpeedDyn = config->stabConstants[i].pSpeedDyn;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	7bf9      	ldrb	r1, [r7, #15]
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4403      	add	r3, r0
 8002c26:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	48ad      	ldr	r0, [pc, #692]	; (8002ee4 <flashReadStructure+0x304>)
 8002c30:	460b      	mov	r3, r1
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	440b      	add	r3, r1
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4403      	add	r3, r0
 8002c3a:	3308      	adds	r3, #8
 8002c3c:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pErrGain = config->stabConstants[i].pErrGain;
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
 8002c40:	7bf9      	ldrb	r1, [r7, #15]
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4403      	add	r3, r0
 8002c4e:	3308      	adds	r3, #8
 8002c50:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002c54:	4613      	mov	r3, r2
 8002c56:	461a      	mov	r2, r3
 8002c58:	48a2      	ldr	r0, [pc, #648]	; (8002ee4 <flashReadStructure+0x304>)
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	440b      	add	r3, r1
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4403      	add	r3, r0
 8002c64:	330c      	adds	r3, #12
 8002c66:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[POS_FILTER].T = config->stabConstants[i].aFilter_T1;
 8002c68:	7bfa      	ldrb	r2, [r7, #15]
 8002c6a:	7bf9      	ldrb	r1, [r7, #15]
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4403      	add	r3, r0
 8002c78:	3308      	adds	r3, #8
 8002c7a:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	461a      	mov	r2, r3
 8002c82:	4898      	ldr	r0, [pc, #608]	; (8002ee4 <flashReadStructure+0x304>)
 8002c84:	460b      	mov	r3, r1
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	440b      	add	r3, r1
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4403      	add	r3, r0
 8002c8e:	3310      	adds	r3, #16
 8002c90:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].T = config->stabConstants[i].aFilter_T2;
 8002c92:	7bfa      	ldrb	r2, [r7, #15]
 8002c94:	7bf9      	ldrb	r1, [r7, #15]
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4403      	add	r3, r0
 8002ca2:	3310      	adds	r3, #16
 8002ca4:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	461a      	mov	r2, r3
 8002cac:	488d      	ldr	r0, [pc, #564]	; (8002ee4 <flashReadStructure+0x304>)
 8002cae:	460b      	mov	r3, r1
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	440b      	add	r3, r1
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4403      	add	r3, r0
 8002cb8:	3318      	adds	r3, #24
 8002cba:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[POS_FILTER].K = config->stabConstants[i].aFilter_K1;
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	7bf9      	ldrb	r1, [r7, #15]
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4403      	add	r3, r0
 8002ccc:	3310      	adds	r3, #16
 8002cce:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4883      	ldr	r0, [pc, #524]	; (8002ee4 <flashReadStructure+0x304>)
 8002cd8:	460b      	mov	r3, r1
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	440b      	add	r3, r1
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4403      	add	r3, r0
 8002ce2:	3314      	adds	r3, #20
 8002ce4:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].K = config->stabConstants[i].aFilter_K2;
 8002ce6:	7bfa      	ldrb	r2, [r7, #15]
 8002ce8:	7bf9      	ldrb	r1, [r7, #15]
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4403      	add	r3, r0
 8002cf6:	3318      	adds	r3, #24
 8002cf8:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4878      	ldr	r0, [pc, #480]	; (8002ee4 <flashReadStructure+0x304>)
 8002d02:	460b      	mov	r3, r1
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	440b      	add	r3, r1
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4403      	add	r3, r0
 8002d0c:	331c      	adds	r3, #28
 8002d0e:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.pGain = config->stabConstants[i].pid_pGain;
 8002d10:	7bfa      	ldrb	r2, [r7, #15]
 8002d12:	7bf9      	ldrb	r1, [r7, #15]
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4403      	add	r3, r0
 8002d20:	3318      	adds	r3, #24
 8002d22:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002d26:	4613      	mov	r3, r2
 8002d28:	461a      	mov	r2, r3
 8002d2a:	486e      	ldr	r0, [pc, #440]	; (8002ee4 <flashReadStructure+0x304>)
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4403      	add	r3, r0
 8002d36:	3328      	adds	r3, #40	; 0x28
 8002d38:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.iGain = config->stabConstants[i].pid_iGain;
 8002d3a:	7bfa      	ldrb	r2, [r7, #15]
 8002d3c:	7bf9      	ldrb	r1, [r7, #15]
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4403      	add	r3, r0
 8002d4a:	3320      	adds	r3, #32
 8002d4c:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002d50:	4613      	mov	r3, r2
 8002d52:	461a      	mov	r2, r3
 8002d54:	4863      	ldr	r0, [pc, #396]	; (8002ee4 <flashReadStructure+0x304>)
 8002d56:	460b      	mov	r3, r1
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	440b      	add	r3, r1
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4403      	add	r3, r0
 8002d60:	332c      	adds	r3, #44	; 0x2c
 8002d62:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.iMax = config->stabConstants[i].pid_iMax;
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	7bf9      	ldrb	r1, [r7, #15]
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4403      	add	r3, r0
 8002d74:	3320      	adds	r3, #32
 8002d76:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4859      	ldr	r0, [pc, #356]	; (8002ee4 <flashReadStructure+0x304>)
 8002d80:	460b      	mov	r3, r1
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	440b      	add	r3, r1
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4403      	add	r3, r0
 8002d8a:	3330      	adds	r3, #48	; 0x30
 8002d8c:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.iMin = config->stabConstants[i].pid_iMin;
 8002d8e:	7bfa      	ldrb	r2, [r7, #15]
 8002d90:	7bf9      	ldrb	r1, [r7, #15]
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4403      	add	r3, r0
 8002d9e:	3328      	adds	r3, #40	; 0x28
 8002da0:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002da4:	4613      	mov	r3, r2
 8002da6:	461a      	mov	r2, r3
 8002da8:	484e      	ldr	r0, [pc, #312]	; (8002ee4 <flashReadStructure+0x304>)
 8002daa:	460b      	mov	r3, r1
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	440b      	add	r3, r1
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4403      	add	r3, r0
 8002db4:	3334      	adds	r3, #52	; 0x34
 8002db6:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pThrustersMin = config->stabConstants[i].pThrustersMin;
 8002db8:	7bfa      	ldrb	r2, [r7, #15]
 8002dba:	7bf9      	ldrb	r1, [r7, #15]
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4403      	add	r3, r0
 8002dc8:	3328      	adds	r3, #40	; 0x28
 8002dca:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4844      	ldr	r0, [pc, #272]	; (8002ee4 <flashReadStructure+0x304>)
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	440b      	add	r3, r1
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4403      	add	r3, r0
 8002dde:	3338      	adds	r3, #56	; 0x38
 8002de0:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pThrustersMax = config->stabConstants[i].pThrustersMax;
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	7bf9      	ldrb	r1, [r7, #15]
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4403      	add	r3, r0
 8002df2:	3330      	adds	r3, #48	; 0x30
 8002df4:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4839      	ldr	r0, [pc, #228]	; (8002ee4 <flashReadStructure+0x304>)
 8002dfe:	460b      	mov	r3, r1
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	440b      	add	r3, r1
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4403      	add	r3, r0
 8002e08:	333c      	adds	r3, #60	; 0x3c
 8002e0a:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].T = config->stabConstants[i].aFilter_thrusters_T;
 8002e0c:	7bfa      	ldrb	r2, [r7, #15]
 8002e0e:	7bf9      	ldrb	r1, [r7, #15]
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4403      	add	r3, r0
 8002e1c:	3330      	adds	r3, #48	; 0x30
 8002e1e:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002e22:	4613      	mov	r3, r2
 8002e24:	461a      	mov	r2, r3
 8002e26:	482f      	ldr	r0, [pc, #188]	; (8002ee4 <flashReadStructure+0x304>)
 8002e28:	460b      	mov	r3, r1
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	440b      	add	r3, r1
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4403      	add	r3, r0
 8002e32:	3320      	adds	r3, #32
 8002e34:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].K = config->stabConstants[i].aFilter_thrusters_K;
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	7bf9      	ldrb	r1, [r7, #15]
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4403      	add	r3, r0
 8002e46:	3338      	adds	r3, #56	; 0x38
 8002e48:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	461a      	mov	r2, r3
 8002e50:	4824      	ldr	r0, [pc, #144]	; (8002ee4 <flashReadStructure+0x304>)
 8002e52:	460b      	mov	r3, r1
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	440b      	add	r3, r1
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4403      	add	r3, r0
 8002e5c:	3324      	adds	r3, #36	; 0x24
 8002e5e:	601a      	str	r2, [r3, #0]
		rStabConstants[i].sOutSummatorMax = config->stabConstants[i].sOutSummatorMax;
 8002e60:	7bfa      	ldrb	r2, [r7, #15]
 8002e62:	7bf9      	ldrb	r1, [r7, #15]
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4403      	add	r3, r0
 8002e70:	3338      	adds	r3, #56	; 0x38
 8002e72:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002e76:	4613      	mov	r3, r2
 8002e78:	461a      	mov	r2, r3
 8002e7a:	481a      	ldr	r0, [pc, #104]	; (8002ee4 <flashReadStructure+0x304>)
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	440b      	add	r3, r1
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4403      	add	r3, r0
 8002e86:	3340      	adds	r3, #64	; 0x40
 8002e88:	601a      	str	r2, [r3, #0]
		rStabConstants[i].sOutSummatorMin = config->stabConstants[i].sOutSummatorMin;
 8002e8a:	7bfa      	ldrb	r2, [r7, #15]
 8002e8c:	7bf9      	ldrb	r1, [r7, #15]
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4403      	add	r3, r0
 8002e9a:	3340      	adds	r3, #64	; 0x40
 8002e9c:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	480f      	ldr	r0, [pc, #60]	; (8002ee4 <flashReadStructure+0x304>)
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	440b      	add	r3, r1
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4403      	add	r3, r0
 8002eb0:	3344      	adds	r3, #68	; 0x44
 8002eb2:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	73fb      	strb	r3, [r7, #15]
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	2b05      	cmp	r3, #5
 8002ebe:	f67f ae96 	bls.w	8002bee <flashReadStructure+0xe>
//		rThrusters[i].sForward = config->thrusters[i].sForward;
//		rThrusters[i].sBackward = config->thrusters[i].sBackward;
//		rThrusters[i].inverse = config->thrusters[i].inverse;
//	}

	if(config->writeFlag == 0xAA) {
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2baa      	cmp	r3, #170	; 0xaa
 8002ec8:	d103      	bne.n	8002ed2 <flashReadStructure+0x2f2>
		rState.flash = true;
 8002eca:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <flashReadStructure+0x308>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	709a      	strb	r2, [r3, #2]
	}
	else {
		rState.flash = false;
	}
}
 8002ed0:	e002      	b.n	8002ed8 <flashReadStructure+0x2f8>
		rState.flash = false;
 8002ed2:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <flashReadStructure+0x308>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	709a      	strb	r2, [r3, #2]
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	20001d94 	.word	0x20001d94
 8002ee8:	20001c04 	.word	0x20001c04

08002eec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4a07      	ldr	r2, [pc, #28]	; (8002f18 <vApplicationGetIdleTaskMemory+0x2c>)
 8002efc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	4a06      	ldr	r2, [pc, #24]	; (8002f1c <vApplicationGetIdleTaskMemory+0x30>)
 8002f02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2280      	movs	r2, #128	; 0x80
 8002f08:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002f0a:	bf00      	nop
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	2000153c 	.word	0x2000153c
 8002f1c:	200015a0 	.word	0x200015a0

08002f20 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4a07      	ldr	r2, [pc, #28]	; (8002f4c <vApplicationGetTimerTaskMemory+0x2c>)
 8002f30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	4a06      	ldr	r2, [pc, #24]	; (8002f50 <vApplicationGetTimerTaskMemory+0x30>)
 8002f36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f3e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	200017a0 	.word	0x200017a0
 8002f50:	20001804 	.word	0x20001804

08002f54 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002f54:	b5b0      	push	{r4, r5, r7, lr}
 8002f56:	b0c2      	sub	sp, #264	; 0x108
 8002f58:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
    uartBusesInit();
 8002f5a:	f7fe fa59 	bl	8001410 <uartBusesInit>
    variableInit();
 8002f5e:	f7fe f9bb 	bl	80012d8 <variableInit>
    stabilizationInit();
 8002f62:	f000 fddb 	bl	8003b1c <stabilizationInit>


    HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8002f66:	4b84      	ldr	r3, [pc, #528]	; (8003178 <MX_FREERTOS_Init+0x224>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	4a83      	ldr	r2, [pc, #524]	; (8003178 <MX_FREERTOS_Init+0x224>)
 8002f6c:	6811      	ldr	r1, [r2, #0]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	4618      	mov	r0, r3
 8002f72:	f006 ff79 	bl	8009e68 <HAL_UART_Receive_IT>


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of mutData */
  osMutexStaticDef(mutData, &mutDataControlBlock);
 8002f76:	2300      	movs	r3, #0
 8002f78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002f7c:	4b7f      	ldr	r3, [pc, #508]	; (800317c <MX_FREERTOS_Init+0x228>)
 8002f7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  mutDataHandle = osMutexCreate(osMutex(mutData));
 8002f82:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002f86:	4618      	mov	r0, r3
 8002f88:	f008 fba8 	bl	800b6dc <osMutexCreate>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	4a7c      	ldr	r2, [pc, #496]	; (8003180 <MX_FREERTOS_Init+0x22c>)
 8002f90:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of tUartTimer */
  osTimerDef(tUartTimer, func_tUartTimer);
 8002f92:	4b7c      	ldr	r3, [pc, #496]	; (8003184 <MX_FREERTOS_Init+0x230>)
 8002f94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  tUartTimerHandle = osTimerCreate(osTimer(tUartTimer), osTimerOnce, NULL);
 8002f9e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f008 fb64 	bl	800b674 <osTimerCreate>
 8002fac:	4603      	mov	r3, r0
 8002fae:	4a76      	ldr	r2, [pc, #472]	; (8003188 <MX_FREERTOS_Init+0x234>)
 8002fb0:	6013      	str	r3, [r2, #0]

  /* definition and creation of tSilence */
  osTimerDef(tSilence, tSilence_func);
 8002fb2:	4b76      	ldr	r3, [pc, #472]	; (800318c <MX_FREERTOS_Init+0x238>)
 8002fb4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  tSilenceHandle = osTimerCreate(osTimer(tSilence), osTimerOnce, NULL);
 8002fbe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f008 fb54 	bl	800b674 <osTimerCreate>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4a70      	ldr	r2, [pc, #448]	; (8003190 <MX_FREERTOS_Init+0x23c>)
 8002fd0:	6013      	str	r3, [r2, #0]

  /* definition and creation of tTechCommTImer */
  osTimerDef(tTechCommTImer, tTechCommTImer_callback);
 8002fd2:	4b70      	ldr	r3, [pc, #448]	; (8003194 <MX_FREERTOS_Init+0x240>)
 8002fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  tTechCommTImerHandle = osTimerCreate(osTimer(tTechCommTImer), osTimerOnce, NULL);
 8002fde:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f008 fb44 	bl	800b674 <osTimerCreate>
 8002fec:	4603      	mov	r3, r0
 8002fee:	4a6a      	ldr	r2, [pc, #424]	; (8003198 <MX_FREERTOS_Init+0x244>)
 8002ff0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  SilenceTimer = xTimerCreate("silence", DELAY_SILENCE/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) tSilence_func);
 8002ff2:	4b66      	ldr	r3, [pc, #408]	; (800318c <MX_FREERTOS_Init+0x238>)
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ffe:	4867      	ldr	r0, [pc, #412]	; (800319c <MX_FREERTOS_Init+0x248>)
 8003000:	f00a fb5a 	bl	800d6b8 <xTimerCreate>
 8003004:	4603      	mov	r3, r0
 8003006:	4a66      	ldr	r2, [pc, #408]	; (80031a0 <MX_FREERTOS_Init+0x24c>)
 8003008:	6013      	str	r3, [r2, #0]
  UARTTimer = xTimerCreate("timer", DELAY_TIMER_TASK/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) func_tUartTimer);
 800300a:	4b5e      	ldr	r3, [pc, #376]	; (8003184 <MX_FREERTOS_Init+0x230>)
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	2300      	movs	r3, #0
 8003010:	2200      	movs	r2, #0
 8003012:	211e      	movs	r1, #30
 8003014:	4863      	ldr	r0, [pc, #396]	; (80031a4 <MX_FREERTOS_Init+0x250>)
 8003016:	f00a fb4f 	bl	800d6b8 <xTimerCreate>
 800301a:	4603      	mov	r3, r0
 800301c:	4a62      	ldr	r2, [pc, #392]	; (80031a8 <MX_FREERTOS_Init+0x254>)
 800301e:	6013      	str	r3, [r2, #0]

  xTimerStart(SilenceTimer, 10);
 8003020:	4b5f      	ldr	r3, [pc, #380]	; (80031a0 <MX_FREERTOS_Init+0x24c>)
 8003022:	681c      	ldr	r4, [r3, #0]
 8003024:	f009 fd9c 	bl	800cb60 <xTaskGetTickCount>
 8003028:	4602      	mov	r2, r0
 800302a:	230a      	movs	r3, #10
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	2300      	movs	r3, #0
 8003030:	2101      	movs	r1, #1
 8003032:	4620      	mov	r0, r4
 8003034:	f00a fbda 	bl	800d7ec <xTimerGenericCommand>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 8003038:	4b5c      	ldr	r3, [pc, #368]	; (80031ac <MX_FREERTOS_Init+0x258>)
 800303a:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 800303e:	461d      	mov	r5, r3
 8003040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003044:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003048:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800304c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f008 faad 	bl	800b5b2 <osThreadCreate>
 8003058:	4603      	mov	r3, r0
 800305a:	4a55      	ldr	r2, [pc, #340]	; (80031b0 <MX_FREERTOS_Init+0x25c>)
 800305c:	6013      	str	r3, [r2, #0]

  /* definition and creation of tLedBlinkingTask */
  osThreadStaticDef(tLedBlinkingTask, func_tLedBlinkingTask, osPriorityLow, 0, 128, tLedBlinkingTaskBuffer, &tLedBlinkingTaskControlBlock);
 800305e:	4b55      	ldr	r3, [pc, #340]	; (80031b4 <MX_FREERTOS_Init+0x260>)
 8003060:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8003064:	461d      	mov	r5, r3
 8003066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800306a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800306e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tLedBlinkingTaskHandle = osThreadCreate(osThread(tLedBlinkingTask), NULL);
 8003072:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f008 fa9a 	bl	800b5b2 <osThreadCreate>
 800307e:	4603      	mov	r3, r0
 8003080:	4a4d      	ldr	r2, [pc, #308]	; (80031b8 <MX_FREERTOS_Init+0x264>)
 8003082:	6013      	str	r3, [r2, #0]

  /* definition and creation of tVmaCommTask */
  osThreadStaticDef(tVmaCommTask, func_tVmaCommTask, osPriorityNormal, 0, 128, tVmaCommTaskBuffer, &tVmaCommTaskControlBlock);
 8003084:	4b4d      	ldr	r3, [pc, #308]	; (80031bc <MX_FREERTOS_Init+0x268>)
 8003086:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800308a:	461d      	mov	r5, r3
 800308c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800308e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003090:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003094:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tVmaCommTaskHandle = osThreadCreate(osThread(tVmaCommTask), NULL);
 8003098:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800309c:	2100      	movs	r1, #0
 800309e:	4618      	mov	r0, r3
 80030a0:	f008 fa87 	bl	800b5b2 <osThreadCreate>
 80030a4:	4603      	mov	r3, r0
 80030a6:	4a46      	ldr	r2, [pc, #280]	; (80031c0 <MX_FREERTOS_Init+0x26c>)
 80030a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of tImuCommTask */
  osThreadStaticDef(tImuCommTask, func_tImuCommTask, osPriorityBelowNormal, 0, 128, tImuCommTaskBuffer, &tImuCommTaskControlBlock);
 80030aa:	4b46      	ldr	r3, [pc, #280]	; (80031c4 <MX_FREERTOS_Init+0x270>)
 80030ac:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80030b0:	461d      	mov	r5, r3
 80030b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tImuCommTaskHandle = osThreadCreate(osThread(tImuCommTask), NULL);
 80030be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f008 fa74 	bl	800b5b2 <osThreadCreate>
 80030ca:	4603      	mov	r3, r0
 80030cc:	4a3e      	ldr	r2, [pc, #248]	; (80031c8 <MX_FREERTOS_Init+0x274>)
 80030ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of tStabilizationTask */
  osThreadStaticDef(tStabilizationTask, func_tStabilizationTask, osPriorityBelowNormal, 0, 128, tStabilizationTaskBuffer, &tStabilizationTaskControlBlock);
 80030d0:	4b3e      	ldr	r3, [pc, #248]	; (80031cc <MX_FREERTOS_Init+0x278>)
 80030d2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80030d6:	461d      	mov	r5, r3
 80030d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tStabilizationTaskHandle = osThreadCreate(osThread(tStabilizationTask), NULL);
 80030e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030e8:	2100      	movs	r1, #0
 80030ea:	4618      	mov	r0, r3
 80030ec:	f008 fa61 	bl	800b5b2 <osThreadCreate>
 80030f0:	4603      	mov	r3, r0
 80030f2:	4a37      	ldr	r2, [pc, #220]	; (80031d0 <MX_FREERTOS_Init+0x27c>)
 80030f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of tDevCommTask */
  osThreadStaticDef(tDevCommTask, func_tDevCommTask, osPriorityBelowNormal, 0, 128, tDevCommTaskBuffer, &tDevCommTaskControlBlock);
 80030f6:	4b37      	ldr	r3, [pc, #220]	; (80031d4 <MX_FREERTOS_Init+0x280>)
 80030f8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80030fc:	461d      	mov	r5, r3
 80030fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003100:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003102:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003106:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tDevCommTaskHandle = osThreadCreate(osThread(tDevCommTask), NULL);
 800310a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800310e:	2100      	movs	r1, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f008 fa4e 	bl	800b5b2 <osThreadCreate>
 8003116:	4603      	mov	r3, r0
 8003118:	4a2f      	ldr	r2, [pc, #188]	; (80031d8 <MX_FREERTOS_Init+0x284>)
 800311a:	6013      	str	r3, [r2, #0]

  /* definition and creation of tSensCommTask */
  osThreadStaticDef(tSensCommTask, func_tSensCommTask, osPriorityBelowNormal, 0, 128, tSensCommTaskBuffer, &tSensCommTaskControlBlock);
 800311c:	4b2f      	ldr	r3, [pc, #188]	; (80031dc <MX_FREERTOS_Init+0x288>)
 800311e:	f107 041c 	add.w	r4, r7, #28
 8003122:	461d      	mov	r5, r3
 8003124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003128:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800312c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tSensCommTaskHandle = osThreadCreate(osThread(tSensCommTask), NULL);
 8003130:	f107 031c 	add.w	r3, r7, #28
 8003134:	2100      	movs	r1, #0
 8003136:	4618      	mov	r0, r3
 8003138:	f008 fa3b 	bl	800b5b2 <osThreadCreate>
 800313c:	4603      	mov	r3, r0
 800313e:	4a28      	ldr	r2, [pc, #160]	; (80031e0 <MX_FREERTOS_Init+0x28c>)
 8003140:	6013      	str	r3, [r2, #0]

  /* definition and creation of tPcCommTask */
  osThreadStaticDef(tPcCommTask, func_tPcCommTask, osPriorityBelowNormal, 0, 128, tPcCommTaskBuffer, &tPcCommTaskControlBlock);
 8003142:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003146:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800314a:	4a26      	ldr	r2, [pc, #152]	; (80031e4 <MX_FREERTOS_Init+0x290>)
 800314c:	461c      	mov	r4, r3
 800314e:	4615      	mov	r5, r2
 8003150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003154:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003158:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tPcCommTaskHandle = osThreadCreate(osThread(tPcCommTask), NULL);
 800315c:	463b      	mov	r3, r7
 800315e:	2100      	movs	r1, #0
 8003160:	4618      	mov	r0, r3
 8003162:	f008 fa26 	bl	800b5b2 <osThreadCreate>
 8003166:	4603      	mov	r3, r0
 8003168:	4a1f      	ldr	r2, [pc, #124]	; (80031e8 <MX_FREERTOS_Init+0x294>)
 800316a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800316c:	bf00      	nop
 800316e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003172:	46bd      	mov	sp, r7
 8003174:	bdb0      	pop	{r4, r5, r7, pc}
 8003176:	bf00      	nop
 8003178:	200000ec 	.word	0x200000ec
 800317c:	200014f4 	.word	0x200014f4
 8003180:	200014f0 	.word	0x200014f0
 8003184:	080035fd 	.word	0x080035fd
 8003188:	200014e4 	.word	0x200014e4
 800318c:	08003709 	.word	0x08003709
 8003190:	200014e8 	.word	0x200014e8
 8003194:	080037dd 	.word	0x080037dd
 8003198:	200014ec 	.word	0x200014ec
 800319c:	0800eb58 	.word	0x0800eb58
 80031a0:	200001a0 	.word	0x200001a0
 80031a4:	0800eb60 	.word	0x0800eb60
 80031a8:	2000019c 	.word	0x2000019c
 80031ac:	0800eb68 	.word	0x0800eb68
 80031b0:	200001a4 	.word	0x200001a4
 80031b4:	0800eb84 	.word	0x0800eb84
 80031b8:	2000040c 	.word	0x2000040c
 80031bc:	0800eba0 	.word	0x0800eba0
 80031c0:	20000674 	.word	0x20000674
 80031c4:	0800ebbc 	.word	0x0800ebbc
 80031c8:	200008dc 	.word	0x200008dc
 80031cc:	0800ebd8 	.word	0x0800ebd8
 80031d0:	20000b44 	.word	0x20000b44
 80031d4:	0800ebf4 	.word	0x0800ebf4
 80031d8:	20000dac 	.word	0x20000dac
 80031dc:	0800ec10 	.word	0x0800ec10
 80031e0:	20001014 	.word	0x20001014
 80031e4:	0800ec2c 	.word	0x0800ec2c
 80031e8:	2000127c 	.word	0x2000127c

080031ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80031f4:	2001      	movs	r0, #1
 80031f6:	f008 fa28 	bl	800b64a <osDelay>
 80031fa:	e7fb      	b.n	80031f4 <StartDefaultTask+0x8>

080031fc <func_tLedBlinkingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_func_tLedBlinkingTask */
void func_tLedBlinkingTask(void const * argument)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tLedBlinkingTask */
    uint32_t sysTime = osKernelSysTick();
 8003204:	f008 f9c5 	bl	800b592 <osKernelSysTick>
 8003208:	4603      	mov	r3, r0
 800320a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
        HAL_GPIO_TogglePin(GPIOB, led1_Pin);
 800320c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003210:	4811      	ldr	r0, [pc, #68]	; (8003258 <func_tLedBlinkingTask+0x5c>)
 8003212:	f004 f82e 	bl	8007272 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 8003216:	f107 030c 	add.w	r3, r7, #12
 800321a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800321e:	4618      	mov	r0, r3
 8003220:	f008 fa74 	bl	800b70c <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led2_Pin);
 8003224:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003228:	480b      	ldr	r0, [pc, #44]	; (8003258 <func_tLedBlinkingTask+0x5c>)
 800322a:	f004 f822 	bl	8007272 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 800322e:	f107 030c 	add.w	r3, r7, #12
 8003232:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003236:	4618      	mov	r0, r3
 8003238:	f008 fa68 	bl	800b70c <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led3_Pin);
 800323c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003240:	4805      	ldr	r0, [pc, #20]	; (8003258 <func_tLedBlinkingTask+0x5c>)
 8003242:	f004 f816 	bl	8007272 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 8003246:	f107 030c 	add.w	r3, r7, #12
 800324a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800324e:	4618      	mov	r0, r3
 8003250:	f008 fa5c 	bl	800b70c <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led1_Pin);
 8003254:	e7da      	b.n	800320c <func_tLedBlinkingTask+0x10>
 8003256:	bf00      	nop
 8003258:	40020400 	.word	0x40020400

0800325c <func_tVmaCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tVmaCommTask */
void func_tVmaCommTask(void const * argument)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tVmaCommTask */
	uint32_t sysTime = osKernelSysTick();
 8003264:	f008 f995 	bl	800b592 <osKernelSysTick>
 8003268:	4603      	mov	r3, r0
 800326a:	60bb      	str	r3, [r7, #8]
	uint8_t transaction = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8003270:	4b2b      	ldr	r3, [pc, #172]	; (8003320 <func_tVmaCommTask+0xc4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2114      	movs	r1, #20
 8003276:	4618      	mov	r0, r3
 8003278:	f008 ff08 	bl	800c08c <xQueueSemaphoreTake>
 800327c:	4603      	mov	r3, r0
 800327e:	2b01      	cmp	r3, #1
 8003280:	d10b      	bne.n	800329a <func_tVmaCommTask+0x3e>
			fillThrustersRequest(ThrustersRequestBuffer, transaction);
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	4619      	mov	r1, r3
 8003286:	4827      	ldr	r0, [pc, #156]	; (8003324 <func_tVmaCommTask+0xc8>)
 8003288:	f001 fd10 	bl	8004cac <fillThrustersRequest>
			xSemaphoreGive(mutDataHandle);
 800328c:	4b24      	ldr	r3, [pc, #144]	; (8003320 <func_tVmaCommTask+0xc4>)
 800328e:	6818      	ldr	r0, [r3, #0]
 8003290:	2300      	movs	r3, #0
 8003292:	2200      	movs	r2, #0
 8003294:	2100      	movs	r1, #0
 8003296:	f008 fc7f 	bl	800bb98 <xQueueGenericSend>
		}

		uartBus[THRUSTERS_UART].txBuffer = ThrustersRequestBuffer;
 800329a:	4b23      	ldr	r3, [pc, #140]	; (8003328 <func_tVmaCommTask+0xcc>)
 800329c:	4a21      	ldr	r2, [pc, #132]	; (8003324 <func_tVmaCommTask+0xc8>)
 800329e:	63da      	str	r2, [r3, #60]	; 0x3c
		uartBus[THRUSTERS_UART].txLength = THRUSTERS_REQUEST_LENGTH;
 80032a0:	4b21      	ldr	r3, [pc, #132]	; (8003328 <func_tVmaCommTask+0xcc>)
 80032a2:	2205      	movs	r2, #5
 80032a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

		uartBus[THRUSTERS_UART].rxBuffer = ThrustersResponseBuffer[transaction];
 80032a8:	7bfa      	ldrb	r2, [r7, #15]
 80032aa:	4613      	mov	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	4a1e      	ldr	r2, [pc, #120]	; (800332c <func_tVmaCommTask+0xd0>)
 80032b2:	4413      	add	r3, r2
 80032b4:	4a1c      	ldr	r2, [pc, #112]	; (8003328 <func_tVmaCommTask+0xcc>)
 80032b6:	6393      	str	r3, [r2, #56]	; 0x38
		uartBus[THRUSTERS_UART].rxLength = THRUSTERS_RESPONSE_LENGTH;
 80032b8:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <func_tVmaCommTask+0xcc>)
 80032ba:	2209      	movs	r2, #9
 80032bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		transmitAndReceive(&uartBus[THRUSTERS_UART], false);
 80032c0:	2100      	movs	r1, #0
 80032c2:	481b      	ldr	r0, [pc, #108]	; (8003330 <func_tVmaCommTask+0xd4>)
 80032c4:	f7fe fa0a 	bl	80016dc <transmitAndReceive>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 80032c8:	4b15      	ldr	r3, [pc, #84]	; (8003320 <func_tVmaCommTask+0xc4>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2114      	movs	r1, #20
 80032ce:	4618      	mov	r0, r3
 80032d0:	f008 fedc 	bl	800c08c <xQueueSemaphoreTake>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d111      	bne.n	80032fe <func_tVmaCommTask+0xa2>
			fillThrustersResponse(ThrustersResponseBuffer[transaction], transaction);
 80032da:	7bfa      	ldrb	r2, [r7, #15]
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	4a12      	ldr	r2, [pc, #72]	; (800332c <func_tVmaCommTask+0xd0>)
 80032e4:	4413      	add	r3, r2
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	4611      	mov	r1, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f001 fd58 	bl	8004da0 <fillThrustersResponse>
			xSemaphoreGive(mutDataHandle);
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <func_tVmaCommTask+0xc4>)
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	2300      	movs	r3, #0
 80032f6:	2200      	movs	r2, #0
 80032f8:	2100      	movs	r1, #0
 80032fa:	f008 fc4d 	bl	800bb98 <xQueueGenericSend>
		}

		transaction = (transaction + 1) % THRUSTERS_NUMBER;
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	3301      	adds	r3, #1
 8003302:	425a      	negs	r2, r3
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	f002 0207 	and.w	r2, r2, #7
 800330c:	bf58      	it	pl
 800330e:	4253      	negpl	r3, r2
 8003310:	73fb      	strb	r3, [r7, #15]
		osDelayUntil(&sysTime, DELAY_THRUSTERS_TASK);
 8003312:	f107 0308 	add.w	r3, r7, #8
 8003316:	2114      	movs	r1, #20
 8003318:	4618      	mov	r0, r3
 800331a:	f008 f9f7 	bl	800b70c <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 800331e:	e7a7      	b.n	8003270 <func_tVmaCommTask+0x14>
 8003320:	200014f0 	.word	0x200014f0
 8003324:	20002240 	.word	0x20002240
 8003328:	200000ec 	.word	0x200000ec
 800332c:	20002248 	.word	0x20002248
 8003330:	20000124 	.word	0x20000124

08003334 <func_tImuCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tImuCommTask */
void func_tImuCommTask(void const * argument)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tImuCommTask */
  uint32_t sysTime = osKernelSysTick();
 800333c:	f008 f929 	bl	800b592 <osKernelSysTick>
 8003340:	4603      	mov	r3, r0
 8003342:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  	if(rSensors.resetIMU) {
 8003344:	4b2d      	ldr	r3, [pc, #180]	; (80033fc <func_tImuCommTask+0xc8>)
 8003346:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800334a:	2b00      	cmp	r3, #0
 800334c:	d020      	beq.n	8003390 <func_tImuCommTask+0x5c>
			uartBus[IMU_UART].txBuffer = ImuResetRequestBuffer;
 800334e:	4b2c      	ldr	r3, [pc, #176]	; (8003400 <func_tImuCommTask+0xcc>)
 8003350:	4a2c      	ldr	r2, [pc, #176]	; (8003404 <func_tImuCommTask+0xd0>)
 8003352:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH_AC;
 8003356:	4b2a      	ldr	r3, [pc, #168]	; (8003400 <func_tImuCommTask+0xcc>)
 8003358:	2214      	movs	r2, #20
 800335a:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 800335e:	2100      	movs	r1, #0
 8003360:	4829      	ldr	r0, [pc, #164]	; (8003408 <func_tImuCommTask+0xd4>)
 8003362:	f7fe f951 	bl	8001608 <transmitPackage>

			uartBus[IMU_UART].txBuffer = ImuRequestBuffer;
 8003366:	4b26      	ldr	r3, [pc, #152]	; (8003400 <func_tImuCommTask+0xcc>)
 8003368:	4a28      	ldr	r2, [pc, #160]	; (800340c <func_tImuCommTask+0xd8>)
 800336a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH;
 800336e:	4b24      	ldr	r3, [pc, #144]	; (8003400 <func_tImuCommTask+0xcc>)
 8003370:	221f      	movs	r2, #31
 8003372:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 8003376:	2100      	movs	r1, #0
 8003378:	4823      	ldr	r0, [pc, #140]	; (8003408 <func_tImuCommTask+0xd4>)
 800337a:	f7fe f945 	bl	8001608 <transmitPackage>

//			uartBus[IMU_UART].txBuffer = ImuRequestBuffer;
//			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH;
//	  		transmitPackage(&uartBus[IMU_UART], false);

	  		rSensors.pressure_null = rSensors.pressure;
 800337e:	4b1f      	ldr	r3, [pc, #124]	; (80033fc <func_tImuCommTask+0xc8>)
 8003380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003382:	4a1e      	ldr	r2, [pc, #120]	; (80033fc <func_tImuCommTask+0xc8>)
 8003384:	6593      	str	r3, [r2, #88]	; 0x58
	  		rSensors.resetIMU = false;
 8003386:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <func_tImuCommTask+0xc8>)
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800338e:	e02d      	b.n	80033ec <func_tImuCommTask+0xb8>
	  	}
	  	else {
//	  		uartBus[IMU_UART].txBuffer = ImuRequestBuffer;
//	  		uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH;

	  		uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
 8003390:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <func_tImuCommTask+0xcc>)
 8003392:	4a1f      	ldr	r2, [pc, #124]	; (8003410 <func_tImuCommTask+0xdc>)
 8003394:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  		uartBus[IMU_UART].rxLength = IMU_RESPONSE_LENGTH;
 8003398:	4b19      	ldr	r3, [pc, #100]	; (8003400 <func_tImuCommTask+0xcc>)
 800339a:	2232      	movs	r2, #50	; 0x32
 800339c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

	  		HAL_UART_Receive_IT(uartBus[IMU_UART].huart, uartBus[IMU_UART].rxBuffer, uartBus[IMU_UART].rxLength);
 80033a0:	4b17      	ldr	r3, [pc, #92]	; (8003400 <func_tImuCommTask+0xcc>)
 80033a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80033a6:	4a16      	ldr	r2, [pc, #88]	; (8003400 <func_tImuCommTask+0xcc>)
 80033a8:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 80033ac:	4a14      	ldr	r2, [pc, #80]	; (8003400 <func_tImuCommTask+0xcc>)
 80033ae:	f892 20cc 	ldrb.w	r2, [r2, #204]	; 0xcc
 80033b2:	b292      	uxth	r2, r2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f006 fd57 	bl	8009e68 <HAL_UART_Receive_IT>
	  		//HAL_UART_Transmit_IT(uartBus[IMU_UART].huart, uartBus[IMU_UART].txBuffer, uartBus[IMU_UART].txLength);
	  		osDelayUntil(&sysTime, DELAY_IMU_TASK);
 80033ba:	f107 030c 	add.w	r3, r7, #12
 80033be:	210a      	movs	r1, #10
 80033c0:	4618      	mov	r0, r3
 80033c2:	f008 f9a3 	bl	800b70c <osDelayUntil>

	  		//if(transmitAndReceive(&uartBus[IMU_UART], false)) {
	  			if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_IMU_TASK) == pdTRUE) {
 80033c6:	4b13      	ldr	r3, [pc, #76]	; (8003414 <func_tImuCommTask+0xe0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	210a      	movs	r1, #10
 80033cc:	4618      	mov	r0, r3
 80033ce:	f008 fe5d 	bl	800c08c <xQueueSemaphoreTake>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d109      	bne.n	80033ec <func_tImuCommTask+0xb8>
	  				ImuReceive(ImuResponseBuffer);
 80033d8:	480d      	ldr	r0, [pc, #52]	; (8003410 <func_tImuCommTask+0xdc>)
 80033da:	f7ff f981 	bl	80026e0 <ImuReceive>
	  				xSemaphoreGive(mutDataHandle);
 80033de:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <func_tImuCommTask+0xe0>)
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	2300      	movs	r3, #0
 80033e4:	2200      	movs	r2, #0
 80033e6:	2100      	movs	r1, #0
 80033e8:	f008 fbd6 	bl	800bb98 <xQueueGenericSend>
	  			}
	  		//}

	  	}

	  	osDelayUntil(&sysTime, DELAY_IMU_TASK);
 80033ec:	f107 030c 	add.w	r3, r7, #12
 80033f0:	210a      	movs	r1, #10
 80033f2:	4618      	mov	r0, r3
 80033f4:	f008 f98a 	bl	800b70c <osDelayUntil>
	  	if(rSensors.resetIMU) {
 80033f8:	e7a4      	b.n	8003344 <func_tImuCommTask+0x10>
 80033fa:	bf00      	nop
 80033fc:	20001cd0 	.word	0x20001cd0
 8003400:	200000ec 	.word	0x200000ec
 8003404:	20000020 	.word	0x20000020
 8003408:	20000194 	.word	0x20000194
 800340c:	20000000 	.word	0x20000000
 8003410:	2000220c 	.word	0x2000220c
 8003414:	200014f0 	.word	0x200014f0

08003418 <func_tStabilizationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tStabilizationTask */
void func_tStabilizationTask(void const * argument)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tStabilizationTask */
	uint32_t sysTime = osKernelSysTick();
 8003420:	f008 f8b7 	bl	800b592 <osKernelSysTick>
 8003424:	4603      	mov	r3, r0
 8003426:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 8003428:	4b16      	ldr	r3, [pc, #88]	; (8003484 <func_tStabilizationTask+0x6c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	210a      	movs	r1, #10
 800342e:	4618      	mov	r0, r3
 8003430:	f008 fe2c 	bl	800c08c <xQueueSemaphoreTake>
 8003434:	4603      	mov	r3, r0
 8003436:	2b01      	cmp	r3, #1
 8003438:	d11d      	bne.n	8003476 <func_tStabilizationTask+0x5e>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800343a:	2300      	movs	r3, #0
 800343c:	73fb      	strb	r3, [r7, #15]
 800343e:	e010      	b.n	8003462 <func_tStabilizationTask+0x4a>
				if (rStabConstants[i].enable) {
 8003440:	7bfa      	ldrb	r2, [r7, #15]
 8003442:	4911      	ldr	r1, [pc, #68]	; (8003488 <func_tStabilizationTask+0x70>)
 8003444:	4613      	mov	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4413      	add	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	440b      	add	r3, r1
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <func_tStabilizationTask+0x44>
					stabilizationUpdate(i);
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	4618      	mov	r0, r3
 8003458:	f000 ff46 	bl	80042e8 <stabilizationUpdate>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	3301      	adds	r3, #1
 8003460:	73fb      	strb	r3, [r7, #15]
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	2b05      	cmp	r3, #5
 8003466:	d9eb      	bls.n	8003440 <func_tStabilizationTask+0x28>
				}
			}
			//formThrustVectors();
			xSemaphoreGive(mutDataHandle);
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <func_tStabilizationTask+0x6c>)
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	2300      	movs	r3, #0
 800346e:	2200      	movs	r2, #0
 8003470:	2100      	movs	r1, #0
 8003472:	f008 fb91 	bl	800bb98 <xQueueGenericSend>
		}

		osDelayUntil(&sysTime, DELAY_STABILIZATION_TASK);
 8003476:	f107 0308 	add.w	r3, r7, #8
 800347a:	210a      	movs	r1, #10
 800347c:	4618      	mov	r0, r3
 800347e:	f008 f945 	bl	800b70c <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 8003482:	e7d1      	b.n	8003428 <func_tStabilizationTask+0x10>
 8003484:	200014f0 	.word	0x200014f0
 8003488:	20001d94 	.word	0x20001d94

0800348c <func_tDevCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tDevCommTask */
void func_tDevCommTask(void const * argument)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tDevCommTask */
    uint32_t sysTime = osKernelSysTick();
 8003494:	f008 f87d 	bl	800b592 <osKernelSysTick>
 8003498:	4603      	mov	r3, r0
 800349a:	60bb      	str	r3, [r7, #8]
    uint8_t transaction = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 80034a0:	4b2e      	ldr	r3, [pc, #184]	; (800355c <func_tDevCommTask+0xd0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	210a      	movs	r1, #10
 80034a6:	4618      	mov	r0, r3
 80034a8:	f008 fdf0 	bl	800c08c <xQueueSemaphoreTake>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d10b      	bne.n	80034ca <func_tDevCommTask+0x3e>
            DevicesRequestUpdate(DevicesRequestBuffer, transaction);
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	4619      	mov	r1, r3
 80034b6:	482a      	ldr	r0, [pc, #168]	; (8003560 <func_tDevCommTask+0xd4>)
 80034b8:	f7fe fb42 	bl	8001b40 <DevicesRequestUpdate>
            xSemaphoreGive(mutDataHandle);
 80034bc:	4b27      	ldr	r3, [pc, #156]	; (800355c <func_tDevCommTask+0xd0>)
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	2300      	movs	r3, #0
 80034c2:	2200      	movs	r2, #0
 80034c4:	2100      	movs	r1, #0
 80034c6:	f008 fb67 	bl	800bb98 <xQueueGenericSend>
        }

		uartBus[DEVICES_UART].txBuffer = DevicesRequestBuffer;
 80034ca:	4b26      	ldr	r3, [pc, #152]	; (8003564 <func_tDevCommTask+0xd8>)
 80034cc:	4a24      	ldr	r2, [pc, #144]	; (8003560 <func_tDevCommTask+0xd4>)
 80034ce:	675a      	str	r2, [r3, #116]	; 0x74
		uartBus[DEVICES_UART].txLength = DEVICES_REQUEST_LENGTH;
 80034d0:	4b24      	ldr	r3, [pc, #144]	; (8003564 <func_tDevCommTask+0xd8>)
 80034d2:	2207      	movs	r2, #7
 80034d4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

		uartBus[DEVICES_UART].rxBuffer = DevicesResponseBuffer[transaction];
 80034d8:	7bfa      	ldrb	r2, [r7, #15]
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	4a21      	ldr	r2, [pc, #132]	; (8003568 <func_tDevCommTask+0xdc>)
 80034e4:	4413      	add	r3, r2
 80034e6:	4a1f      	ldr	r2, [pc, #124]	; (8003564 <func_tDevCommTask+0xd8>)
 80034e8:	6713      	str	r3, [r2, #112]	; 0x70
		uartBus[DEVICES_UART].rxLength = DEVICES_RESPONSE_LENGTH;
 80034ea:	4b1e      	ldr	r3, [pc, #120]	; (8003564 <func_tDevCommTask+0xd8>)
 80034ec:	220a      	movs	r2, #10
 80034ee:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

		transmitAndReceive(&uartBus[DEVICES_UART], false);
 80034f2:	2100      	movs	r1, #0
 80034f4:	481d      	ldr	r0, [pc, #116]	; (800356c <func_tDevCommTask+0xe0>)
 80034f6:	f7fe f8f1 	bl	80016dc <transmitAndReceive>

        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 80034fa:	4b18      	ldr	r3, [pc, #96]	; (800355c <func_tDevCommTask+0xd0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	210a      	movs	r1, #10
 8003500:	4618      	mov	r0, r3
 8003502:	f008 fdc3 	bl	800c08c <xQueueSemaphoreTake>
 8003506:	4603      	mov	r3, r0
 8003508:	2b01      	cmp	r3, #1
 800350a:	d112      	bne.n	8003532 <func_tDevCommTask+0xa6>
            DevicesResponseUpdate(DevicesResponseBuffer[transaction], transaction);
 800350c:	7bfa      	ldrb	r2, [r7, #15]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4a14      	ldr	r2, [pc, #80]	; (8003568 <func_tDevCommTask+0xdc>)
 8003518:	4413      	add	r3, r2
 800351a:	7bfa      	ldrb	r2, [r7, #15]
 800351c:	4611      	mov	r1, r2
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe fb58 	bl	8001bd4 <DevicesResponseUpdate>
            xSemaphoreGive(mutDataHandle);
 8003524:	4b0d      	ldr	r3, [pc, #52]	; (800355c <func_tDevCommTask+0xd0>)
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	2300      	movs	r3, #0
 800352a:	2200      	movs	r2, #0
 800352c:	2100      	movs	r1, #0
 800352e:	f008 fb33 	bl	800bb98 <xQueueGenericSend>
        }

        transaction = (transaction + 1) % DEVICES_NUMBER;
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <func_tDevCommTask+0xe4>)
 8003538:	fb83 3102 	smull	r3, r1, r3, r2
 800353c:	17d3      	asrs	r3, r2, #31
 800353e:	1ac9      	subs	r1, r1, r3
 8003540:	460b      	mov	r3, r1
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	440b      	add	r3, r1
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	1ad1      	subs	r1, r2, r3
 800354a:	460b      	mov	r3, r1
 800354c:	73fb      	strb	r3, [r7, #15]
        osDelayUntil(&sysTime, DELAY_DEVICES_TASK);
 800354e:	f107 0308 	add.w	r3, r7, #8
 8003552:	210a      	movs	r1, #10
 8003554:	4618      	mov	r0, r3
 8003556:	f008 f8d9 	bl	800b70c <osDelayUntil>
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 800355a:	e7a1      	b.n	80034a0 <func_tDevCommTask+0x14>
 800355c:	200014f0 	.word	0x200014f0
 8003560:	20002290 	.word	0x20002290
 8003564:	200000ec 	.word	0x200000ec
 8003568:	20002298 	.word	0x20002298
 800356c:	2000015c 	.word	0x2000015c
 8003570:	2aaaaaab 	.word	0x2aaaaaab

08003574 <func_tSensCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tSensCommTask */
void func_tSensCommTask(void const * argument)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tSensCommTask */
	uint32_t sysTime = osKernelSysTick();
 800357c:	f008 f809 	bl	800b592 <osKernelSysTick>
 8003580:	4603      	mov	r3, r0
 8003582:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  receiveI2cPackageDMA(DEV_I2C, SENSORS_PRESSURE_ADDR, PressureResponseBuffer, PRESSURE_SENSOR_SIZE);
 8003584:	230a      	movs	r3, #10
 8003586:	4a13      	ldr	r2, [pc, #76]	; (80035d4 <func_tSensCommTask+0x60>)
 8003588:	210f      	movs	r1, #15
 800358a:	2000      	movs	r0, #0
 800358c:	f7fe f9ae 	bl	80018ec <receiveI2cPackageDMA>
	  osDelayUntil(&sysTime, DELAY_SENSOR_TASK);
 8003590:	f107 030c 	add.w	r3, r7, #12
 8003594:	210a      	movs	r1, #10
 8003596:	4618      	mov	r0, r3
 8003598:	f008 f8b8 	bl	800b70c <osDelayUntil>
	  if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_SENSOR_TASK) == pdTRUE) {
 800359c:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <func_tSensCommTask+0x64>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	210a      	movs	r1, #10
 80035a2:	4618      	mov	r0, r3
 80035a4:	f008 fd72 	bl	800c08c <xQueueSemaphoreTake>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d10a      	bne.n	80035c4 <func_tSensCommTask+0x50>
	  	  SensorsResponseUpdate(PressureResponseBuffer, DEV_I2C);
 80035ae:	2100      	movs	r1, #0
 80035b0:	4808      	ldr	r0, [pc, #32]	; (80035d4 <func_tSensCommTask+0x60>)
 80035b2:	f7fe fa17 	bl	80019e4 <SensorsResponseUpdate>
	  	  xSemaphoreGive(mutDataHandle);
 80035b6:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <func_tSensCommTask+0x64>)
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	2300      	movs	r3, #0
 80035bc:	2200      	movs	r2, #0
 80035be:	2100      	movs	r1, #0
 80035c0:	f008 faea 	bl	800bb98 <xQueueGenericSend>
	  }
	  osDelayUntil(&sysTime, DELAY_SENSOR_TASK);
 80035c4:	f107 030c 	add.w	r3, r7, #12
 80035c8:	210a      	movs	r1, #10
 80035ca:	4618      	mov	r0, r3
 80035cc:	f008 f89e 	bl	800b70c <osDelayUntil>
	  receiveI2cPackageDMA(DEV_I2C, SENSORS_PRESSURE_ADDR, PressureResponseBuffer, PRESSURE_SENSOR_SIZE);
 80035d0:	e7d8      	b.n	8003584 <func_tSensCommTask+0x10>
 80035d2:	bf00      	nop
 80035d4:	200022d4 	.word	0x200022d4
 80035d8:	200014f0 	.word	0x200014f0

080035dc <func_tPcCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tPcCommTask */
void func_tPcCommTask(void const * argument)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tPcCommTask */
	uint32_t sysTime = osKernelSysTick();
 80035e4:	f007 ffd5 	bl	800b592 <osKernelSysTick>
 80035e8:	4603      	mov	r3, r0
 80035ea:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  osDelayUntil(&sysTime, DELAY_PC_TASK);
 80035ec:	f107 030c 	add.w	r3, r7, #12
 80035f0:	210a      	movs	r1, #10
 80035f2:	4618      	mov	r0, r3
 80035f4:	f008 f88a 	bl	800b70c <osDelayUntil>
 80035f8:	e7f8      	b.n	80035ec <func_tPcCommTask+0x10>
	...

080035fc <func_tUartTimer>:
  /* USER CODE END func_tPcCommTask */
}

/* func_tUartTimer function */
void func_tUartTimer(void const * argument)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tUartTimer */
	if (uartBus[SHORE_UART].packageReceived) {
 8003604:	4b3d      	ldr	r3, [pc, #244]	; (80036fc <func_tUartTimer+0x100>)
 8003606:	7a1b      	ldrb	r3, [r3, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d05a      	beq.n	80036c2 <func_tUartTimer+0xc6>
		bool package = true;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 8003610:	4b3b      	ldr	r3, [pc, #236]	; (8003700 <func_tUartTimer+0x104>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2105      	movs	r1, #5
 8003616:	4618      	mov	r0, r3
 8003618:	f008 fd38 	bl	800c08c <xQueueSemaphoreTake>
 800361c:	4603      	mov	r3, r0
 800361e:	2b01      	cmp	r3, #1
 8003620:	d140      	bne.n	80036a4 <func_tUartTimer+0xa8>
			switch(uartBus[SHORE_UART].rxBuffer[0]) {
 8003622:	4b36      	ldr	r3, [pc, #216]	; (80036fc <func_tUartTimer+0x100>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2baa      	cmp	r3, #170	; 0xaa
 800362a:	d023      	beq.n	8003674 <func_tUartTimer+0x78>
 800362c:	2baa      	cmp	r3, #170	; 0xaa
 800362e:	dc30      	bgt.n	8003692 <func_tUartTimer+0x96>
 8003630:	2b55      	cmp	r3, #85	; 0x55
 8003632:	d010      	beq.n	8003656 <func_tUartTimer+0x5a>
 8003634:	2ba5      	cmp	r3, #165	; 0xa5
 8003636:	d12c      	bne.n	8003692 <func_tUartTimer+0x96>
				case SHORE_REQUEST_CODE:
					ShoreRequest(uartBus[SHORE_UART].rxBuffer);
 8003638:	4b30      	ldr	r3, [pc, #192]	; (80036fc <func_tUartTimer+0x100>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f7fe fb31 	bl	8001ca4 <ShoreRequest>
					ShoreResponse(uartBus[SHORE_UART].txBuffer);
 8003642:	4b2e      	ldr	r3, [pc, #184]	; (80036fc <func_tUartTimer+0x100>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe fefa 	bl	8002440 <ShoreResponse>
					uartBus[SHORE_UART].txLength = SHORE_RESPONSE_LENGTH;
 800364c:	4b2b      	ldr	r3, [pc, #172]	; (80036fc <func_tUartTimer+0x100>)
 800364e:	2246      	movs	r2, #70	; 0x46
 8003650:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003654:	e01f      	b.n	8003696 <func_tUartTimer+0x9a>
				case REQUEST_CONFIG_CODE:
					ShoreConfigRequest(uartBus[SHORE_UART].rxBuffer);
 8003656:	4b29      	ldr	r3, [pc, #164]	; (80036fc <func_tUartTimer+0x100>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fe fcc4 	bl	8001fe8 <ShoreConfigRequest>
					ShoreConfigResponse(uartBus[SHORE_UART].txBuffer);
 8003660:	4b26      	ldr	r3, [pc, #152]	; (80036fc <func_tUartTimer+0x100>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4618      	mov	r0, r3
 8003666:	f7fe ff2b 	bl	80024c0 <ShoreConfigResponse>
					uartBus[SHORE_UART].txLength = SHORE_CONFIG_RESPONSE_LENGTH;
 800366a:	4b24      	ldr	r3, [pc, #144]	; (80036fc <func_tUartTimer+0x100>)
 800366c:	2263      	movs	r2, #99	; 0x63
 800366e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003672:	e010      	b.n	8003696 <func_tUartTimer+0x9a>
				case DIRECT_REQUEST_CODE:
					ShoreDirectRequest(uartBus[SHORE_UART].rxBuffer);
 8003674:	4b21      	ldr	r3, [pc, #132]	; (80036fc <func_tUartTimer+0x100>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f7fe fe2b 	bl	80022d4 <ShoreDirectRequest>
					ShoreDirectResponse(uartBus[SHORE_UART].txBuffer);
 800367e:	4b1f      	ldr	r3, [pc, #124]	; (80036fc <func_tUartTimer+0x100>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff f812 	bl	80026ac <ShoreDirectResponse>
					uartBus[SHORE_UART].txLength = SHORE_DIRECT_RESPONSE_LENGTH;
 8003688:	4b1c      	ldr	r3, [pc, #112]	; (80036fc <func_tUartTimer+0x100>)
 800368a:	2206      	movs	r2, #6
 800368c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003690:	e001      	b.n	8003696 <func_tUartTimer+0x9a>
				default:
					package = false;
 8003692:	2300      	movs	r3, #0
 8003694:	73fb      	strb	r3, [r7, #15]
			}
			xSemaphoreGive(mutDataHandle);
 8003696:	4b1a      	ldr	r3, [pc, #104]	; (8003700 <func_tUartTimer+0x104>)
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	2300      	movs	r3, #0
 800369c:	2200      	movs	r2, #0
 800369e:	2100      	movs	r1, #0
 80036a0:	f008 fa7a 	bl	800bb98 <xQueueGenericSend>
		}
		if(package) {
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d010      	beq.n	80036cc <func_tUartTimer+0xd0>
			HAL_UART_Transmit_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].txBuffer, uartBus[SHORE_UART].txLength);
 80036aa:	4b14      	ldr	r3, [pc, #80]	; (80036fc <func_tUartTimer+0x100>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	4a13      	ldr	r2, [pc, #76]	; (80036fc <func_tUartTimer+0x100>)
 80036b0:	6851      	ldr	r1, [r2, #4]
 80036b2:	4a12      	ldr	r2, [pc, #72]	; (80036fc <func_tUartTimer+0x100>)
 80036b4:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80036b8:	b292      	uxth	r2, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f006 fb8f 	bl	8009dde <HAL_UART_Transmit_IT>
 80036c0:	e004      	b.n	80036cc <func_tUartTimer+0xd0>
		}
	}
	else {
		++uartBus[SHORE_UART].outdatedRxCounter;
 80036c2:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <func_tUartTimer+0x100>)
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	3301      	adds	r3, #1
 80036c8:	4a0c      	ldr	r2, [pc, #48]	; (80036fc <func_tUartTimer+0x100>)
 80036ca:	6113      	str	r3, [r2, #16]
	}
	counterRx = 0;
 80036cc:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <func_tUartTimer+0x108>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	801a      	strh	r2, [r3, #0]
	uartBus[SHORE_UART].packageReceived = false;
 80036d2:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <func_tUartTimer+0x100>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	721a      	strb	r2, [r3, #8]
	HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 80036d8:	4b08      	ldr	r3, [pc, #32]	; (80036fc <func_tUartTimer+0x100>)
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	4618      	mov	r0, r3
 80036de:	f006 fd15 	bl	800a10c <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <func_tUartTimer+0x100>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	4a05      	ldr	r2, [pc, #20]	; (80036fc <func_tUartTimer+0x100>)
 80036e8:	6811      	ldr	r1, [r2, #0]
 80036ea:	2201      	movs	r2, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f006 fbbb 	bl	8009e68 <HAL_UART_Receive_IT>
  /* USER CODE END func_tUartTimer */
}
 80036f2:	bf00      	nop
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	200000ec 	.word	0x200000ec
 8003700:	200014f0 	.word	0x200014f0
 8003704:	20000194 	.word	0x20000194

08003708 <tSilence_func>:

/* tSilence_func function */
void tSilence_func(void const * argument)
{
 8003708:	b590      	push	{r4, r7, lr}
 800370a:	b087      	sub	sp, #28
 800370c:	af02      	add	r7, sp, #8
 800370e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tSilence_func */
	if(fromTickToMs(xTaskGetTickCount()) - uartBus[SHORE_UART].lastMessage > UART_SWITCH_DELAY && counterRx == 0) {
 8003710:	f009 fa26 	bl	800cb60 <xTaskGetTickCount>
 8003714:	4603      	mov	r3, r0
 8003716:	4618      	mov	r0, r3
 8003718:	f7fd fbaa 	bl	8000e70 <fromTickToMs>
 800371c:	eeb0 7a40 	vmov.f32	s14, s0
 8003720:	4b28      	ldr	r3, [pc, #160]	; (80037c4 <tSilence_func+0xbc>)
 8003722:	edd3 7a06 	vldr	s15, [r3, #24]
 8003726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800372a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80037c8 <tSilence_func+0xc0>
 800372e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003736:	dd34      	ble.n	80037a2 <tSilence_func+0x9a>
 8003738:	4b24      	ldr	r3, [pc, #144]	; (80037cc <tSilence_func+0xc4>)
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d130      	bne.n	80037a2 <tSilence_func+0x9a>
//			uartBus[SHORE_UART].huart = &huart5;
//		}
//		else if(uartBus[SHORE_UART].huart == &huart5) {
//			uartBus[SHORE_UART].huart = &huart1;
//		}
		HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 8003740:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <tSilence_func+0xbc>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	4618      	mov	r0, r3
 8003746:	f006 fce1 	bl	800a10c <HAL_UART_AbortReceive_IT>
		HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 800374a:	4b1e      	ldr	r3, [pc, #120]	; (80037c4 <tSilence_func+0xbc>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	4a1d      	ldr	r2, [pc, #116]	; (80037c4 <tSilence_func+0xbc>)
 8003750:	6811      	ldr	r1, [r2, #0]
 8003752:	2201      	movs	r2, #1
 8003754:	4618      	mov	r0, r3
 8003756:	f006 fb87 	bl	8009e68 <HAL_UART_Receive_IT>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 800375a:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <tSilence_func+0xc8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2105      	movs	r1, #5
 8003760:	4618      	mov	r0, r3
 8003762:	f008 fc93 	bl	800c08c <xQueueSemaphoreTake>
 8003766:	4603      	mov	r3, r0
 8003768:	2b01      	cmp	r3, #1
 800376a:	d11a      	bne.n	80037a2 <tSilence_func+0x9a>
			resetThrusters();
 800376c:	f001 fa5c 	bl	8004c28 <resetThrusters>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003770:	2300      	movs	r3, #0
 8003772:	73fb      	strb	r3, [r7, #15]
 8003774:	e00b      	b.n	800378e <tSilence_func+0x86>
				rStabConstants[i].enable = false;
 8003776:	7bfa      	ldrb	r2, [r7, #15]
 8003778:	4916      	ldr	r1, [pc, #88]	; (80037d4 <tSilence_func+0xcc>)
 800377a:	4613      	mov	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	4413      	add	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	440b      	add	r3, r1
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	3301      	adds	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
 800378e:	7bfb      	ldrb	r3, [r7, #15]
 8003790:	2b05      	cmp	r3, #5
 8003792:	d9f0      	bls.n	8003776 <tSilence_func+0x6e>
			}
			xSemaphoreGive(mutDataHandle);
 8003794:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <tSilence_func+0xc8>)
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	2300      	movs	r3, #0
 800379a:	2200      	movs	r2, #0
 800379c:	2100      	movs	r1, #0
 800379e:	f008 f9fb 	bl	800bb98 <xQueueGenericSend>
//			break;
//			}
		}
//	}
	//HAL_GPIO_WritePin(GPIOE, RES_PC_2_Pin, GPIO_PIN_SET); // ONOFF
	xTimerStart(SilenceTimer, 50);
 80037a2:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <tSilence_func+0xd0>)
 80037a4:	681c      	ldr	r4, [r3, #0]
 80037a6:	f009 f9db 	bl	800cb60 <xTaskGetTickCount>
 80037aa:	4602      	mov	r2, r0
 80037ac:	2332      	movs	r3, #50	; 0x32
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	2300      	movs	r3, #0
 80037b2:	2101      	movs	r1, #1
 80037b4:	4620      	mov	r0, r4
 80037b6:	f00a f819 	bl	800d7ec <xTimerGenericCommand>
  /* USER CODE END tSilence_func */
}
 80037ba:	bf00      	nop
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd90      	pop	{r4, r7, pc}
 80037c2:	bf00      	nop
 80037c4:	200000ec 	.word	0x200000ec
 80037c8:	447a0000 	.word	0x447a0000
 80037cc:	20000194 	.word	0x20000194
 80037d0:	200014f0 	.word	0x200014f0
 80037d4:	20001d94 	.word	0x20001d94
 80037d8:	200001a0 	.word	0x200001a0

080037dc <tTechCommTImer_callback>:

/* tTechCommTImer_callback function */
void tTechCommTImer_callback(void const * argument)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tTechCommTImer_callback */

  /* USER CODE END tTechCommTImer_callback */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f6:	f107 030c 	add.w	r3, r7, #12
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	605a      	str	r2, [r3, #4]
 8003800:	609a      	str	r2, [r3, #8]
 8003802:	60da      	str	r2, [r3, #12]
 8003804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	4b20      	ldr	r3, [pc, #128]	; (800388c <MX_GPIO_Init+0x9c>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	4a1f      	ldr	r2, [pc, #124]	; (800388c <MX_GPIO_Init+0x9c>)
 8003810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003814:	6313      	str	r3, [r2, #48]	; 0x30
 8003816:	4b1d      	ldr	r3, [pc, #116]	; (800388c <MX_GPIO_Init+0x9c>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381e:	60bb      	str	r3, [r7, #8]
 8003820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	4b19      	ldr	r3, [pc, #100]	; (800388c <MX_GPIO_Init+0x9c>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	4a18      	ldr	r2, [pc, #96]	; (800388c <MX_GPIO_Init+0x9c>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6313      	str	r3, [r2, #48]	; 0x30
 8003832:	4b16      	ldr	r3, [pc, #88]	; (800388c <MX_GPIO_Init+0x9c>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	607b      	str	r3, [r7, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	4b12      	ldr	r3, [pc, #72]	; (800388c <MX_GPIO_Init+0x9c>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	4a11      	ldr	r2, [pc, #68]	; (800388c <MX_GPIO_Init+0x9c>)
 8003848:	f043 0302 	orr.w	r3, r3, #2
 800384c:	6313      	str	r3, [r2, #48]	; 0x30
 800384e:	4b0f      	ldr	r3, [pc, #60]	; (800388c <MX_GPIO_Init+0x9c>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	603b      	str	r3, [r7, #0]
 8003858:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led1_Pin|led2_Pin|led3_Pin, GPIO_PIN_RESET);
 800385a:	2200      	movs	r2, #0
 800385c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8003860:	480b      	ldr	r0, [pc, #44]	; (8003890 <MX_GPIO_Init+0xa0>)
 8003862:	f003 fced 	bl	8007240 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin;
 8003866:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800386a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800386c:	2301      	movs	r3, #1
 800386e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003874:	2300      	movs	r3, #0
 8003876:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003878:	f107 030c 	add.w	r3, r7, #12
 800387c:	4619      	mov	r1, r3
 800387e:	4804      	ldr	r0, [pc, #16]	; (8003890 <MX_GPIO_Init+0xa0>)
 8003880:	f003 fb42 	bl	8006f08 <HAL_GPIO_Init>

}
 8003884:	bf00      	nop
 8003886:	3720      	adds	r7, #32
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40023800 	.word	0x40023800
 8003890:	40020400 	.word	0x40020400

08003894 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003898:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <MX_I2C1_Init+0x50>)
 800389a:	4a13      	ldr	r2, [pc, #76]	; (80038e8 <MX_I2C1_Init+0x54>)
 800389c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800389e:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <MX_I2C1_Init+0x50>)
 80038a0:	4a12      	ldr	r2, [pc, #72]	; (80038ec <MX_I2C1_Init+0x58>)
 80038a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80038a4:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <MX_I2C1_Init+0x50>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <MX_I2C1_Init+0x50>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038b0:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <MX_I2C1_Init+0x50>)
 80038b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80038b8:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <MX_I2C1_Init+0x50>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <MX_I2C1_Init+0x50>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038c4:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <MX_I2C1_Init+0x50>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038ca:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <MX_I2C1_Init+0x50>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80038d0:	4804      	ldr	r0, [pc, #16]	; (80038e4 <MX_I2C1_Init+0x50>)
 80038d2:	f003 fce9 	bl	80072a8 <HAL_I2C_Init>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80038dc:	f000 f919 	bl	8003b12 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80038e0:	bf00      	nop
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	200022e0 	.word	0x200022e0
 80038e8:	40005400 	.word	0x40005400
 80038ec:	000186a0 	.word	0x000186a0

080038f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	; 0x28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f8:	f107 0314 	add.w	r3, r7, #20
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	60da      	str	r2, [r3, #12]
 8003906:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a1d      	ldr	r2, [pc, #116]	; (8003984 <HAL_I2C_MspInit+0x94>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d133      	bne.n	800397a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	4b1c      	ldr	r3, [pc, #112]	; (8003988 <HAL_I2C_MspInit+0x98>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	4a1b      	ldr	r2, [pc, #108]	; (8003988 <HAL_I2C_MspInit+0x98>)
 800391c:	f043 0302 	orr.w	r3, r3, #2
 8003920:	6313      	str	r3, [r2, #48]	; 0x30
 8003922:	4b19      	ldr	r3, [pc, #100]	; (8003988 <HAL_I2C_MspInit+0x98>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800392e:	23c0      	movs	r3, #192	; 0xc0
 8003930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003932:	2312      	movs	r3, #18
 8003934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800393a:	2303      	movs	r3, #3
 800393c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800393e:	2304      	movs	r3, #4
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003942:	f107 0314 	add.w	r3, r7, #20
 8003946:	4619      	mov	r1, r3
 8003948:	4810      	ldr	r0, [pc, #64]	; (800398c <HAL_I2C_MspInit+0x9c>)
 800394a:	f003 fadd 	bl	8006f08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	4b0d      	ldr	r3, [pc, #52]	; (8003988 <HAL_I2C_MspInit+0x98>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	4a0c      	ldr	r2, [pc, #48]	; (8003988 <HAL_I2C_MspInit+0x98>)
 8003958:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800395c:	6413      	str	r3, [r2, #64]	; 0x40
 800395e:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <HAL_I2C_MspInit+0x98>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800396a:	2200      	movs	r2, #0
 800396c:	2105      	movs	r1, #5
 800396e:	201f      	movs	r0, #31
 8003970:	f002 fbb8 	bl	80060e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003974:	201f      	movs	r0, #31
 8003976:	f002 fbd1 	bl	800611c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800397a:	bf00      	nop
 800397c:	3728      	adds	r7, #40	; 0x28
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40005400 	.word	0x40005400
 8003988:	40023800 	.word	0x40023800
 800398c:	40020400 	.word	0x40020400

08003990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003994:	f001 ff54 	bl	8005840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003998:	f000 f844 	bl	8003a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800399c:	f7ff ff28 	bl	80037f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80039a0:	f7fe fefa 	bl	8002798 <MX_DMA_Init>
  MX_CAN1_Init();
 80039a4:	f7fd fa80 	bl	8000ea8 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80039a8:	f001 fc9e 	bl	80052e8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80039ac:	f001 fcf0 	bl	8005390 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80039b0:	f7ff ff70 	bl	8003894 <MX_I2C1_Init>
  MX_TIM7_Init();
 80039b4:	f001 fc42 	bl	800523c <MX_TIM7_Init>
  MX_USART2_UART_Init();
 80039b8:	f001 fcc0 	bl	800533c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	HAL_GPIO_WritePin(GPIOB, led1_Pin, GPIO_PIN_SET);
 80039bc:	2201      	movs	r2, #1
 80039be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039c2:	4817      	ldr	r0, [pc, #92]	; (8003a20 <main+0x90>)
 80039c4:	f003 fc3c 	bl	8007240 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, led2_Pin, GPIO_PIN_SET);
 80039c8:	2201      	movs	r2, #1
 80039ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039ce:	4814      	ldr	r0, [pc, #80]	; (8003a20 <main+0x90>)
 80039d0:	f003 fc36 	bl	8007240 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, led3_Pin, GPIO_PIN_SET);
 80039d4:	2201      	movs	r2, #1
 80039d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039da:	4811      	ldr	r0, [pc, #68]	; (8003a20 <main+0x90>)
 80039dc:	f003 fc30 	bl	8007240 <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 80039e0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80039e4:	f001 ff6e 	bl	80058c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, led1_Pin, GPIO_PIN_RESET);
 80039e8:	2200      	movs	r2, #0
 80039ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039ee:	480c      	ldr	r0, [pc, #48]	; (8003a20 <main+0x90>)
 80039f0:	f003 fc26 	bl	8007240 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, led2_Pin, GPIO_PIN_RESET);
 80039f4:	2200      	movs	r2, #0
 80039f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039fa:	4809      	ldr	r0, [pc, #36]	; (8003a20 <main+0x90>)
 80039fc:	f003 fc20 	bl	8007240 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, led3_Pin, GPIO_PIN_RESET);
 8003a00:	2200      	movs	r2, #0
 8003a02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a06:	4806      	ldr	r0, [pc, #24]	; (8003a20 <main+0x90>)
 8003a08:	f003 fc1a 	bl	8007240 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8003a0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a10:	f001 ff58 	bl	80058c4 <HAL_Delay>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003a14:	f7ff fa9e 	bl	8002f54 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003a18:	f007 fdb4 	bl	800b584 <osKernelStart>
	//uint8_t buf[31]="$VNWRG,75,2,10,01,0129*XX\r\n";
	//uint8_t recbuf[10] ={0};
//	HAL_UART_Receive_IT(&huart2,recbuf, sizeof(buf));
//	HAL_UART_Transmit_IT(&huart2,buf,sizeof(buf));

  while (1)
 8003a1c:	e7fe      	b.n	8003a1c <main+0x8c>
 8003a1e:	bf00      	nop
 8003a20:	40020400 	.word	0x40020400

08003a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b094      	sub	sp, #80	; 0x50
 8003a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a2a:	f107 0320 	add.w	r3, r7, #32
 8003a2e:	2230      	movs	r2, #48	; 0x30
 8003a30:	2100      	movs	r1, #0
 8003a32:	4618      	mov	r0, r3
 8003a34:	f00a fe32 	bl	800e69c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a38:	f107 030c 	add.w	r3, r7, #12
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	605a      	str	r2, [r3, #4]
 8003a42:	609a      	str	r2, [r3, #8]
 8003a44:	60da      	str	r2, [r3, #12]
 8003a46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60bb      	str	r3, [r7, #8]
 8003a4c:	4b27      	ldr	r3, [pc, #156]	; (8003aec <SystemClock_Config+0xc8>)
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	4a26      	ldr	r2, [pc, #152]	; (8003aec <SystemClock_Config+0xc8>)
 8003a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a56:	6413      	str	r3, [r2, #64]	; 0x40
 8003a58:	4b24      	ldr	r3, [pc, #144]	; (8003aec <SystemClock_Config+0xc8>)
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a64:	2300      	movs	r3, #0
 8003a66:	607b      	str	r3, [r7, #4]
 8003a68:	4b21      	ldr	r3, [pc, #132]	; (8003af0 <SystemClock_Config+0xcc>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a20      	ldr	r2, [pc, #128]	; (8003af0 <SystemClock_Config+0xcc>)
 8003a6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	4b1e      	ldr	r3, [pc, #120]	; (8003af0 <SystemClock_Config+0xcc>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a7c:	607b      	str	r3, [r7, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a80:	2302      	movs	r3, #2
 8003a82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a84:	2301      	movs	r3, #1
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a88:	2310      	movs	r3, #16
 8003a8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a90:	2300      	movs	r3, #0
 8003a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003a94:	2308      	movs	r3, #8
 8003a96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003a98:	2348      	movs	r3, #72	; 0x48
 8003a9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003aa4:	f107 0320 	add.w	r3, r7, #32
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f005 f9a1 	bl	8008df0 <HAL_RCC_OscConfig>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003ab4:	f000 f82d 	bl	8003b12 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ab8:	230f      	movs	r3, #15
 8003aba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003abc:	2302      	movs	r3, #2
 8003abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ac8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003ace:	f107 030c 	add.w	r3, r7, #12
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f005 fc03 	bl	80092e0 <HAL_RCC_ClockConfig>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003ae0:	f000 f817 	bl	8003b12 <Error_Handler>
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	3750      	adds	r7, #80	; 0x50
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40023800 	.word	0x40023800
 8003af0:	40007000 	.word	0x40007000

08003af4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b04:	d101      	bne.n	8003b0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003b06:	f001 febd 	bl	8005884 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b12:	b480      	push	{r7}
 8003b14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b16:	b672      	cpsid	i
}
 8003b18:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b1a:	e7fe      	b.n	8003b1a <Error_Handler+0x8>

08003b1c <stabilizationInit>:
#include "FreeRTOSTick.h"
#include "math.h"
#include "robot.h"

void stabilizationInit()
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003b22:	2300      	movs	r3, #0
 8003b24:	71fb      	strb	r3, [r7, #7]
 8003b26:	e16d      	b.n	8003e04 <stabilizationInit+0x2e8>
		rStabConstants[i].enable = false;
 8003b28:	79fa      	ldrb	r2, [r7, #7]
 8003b2a:	49c1      	ldr	r1, [pc, #772]	; (8003e30 <stabilizationInit+0x314>)
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4413      	add	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	440b      	add	r3, r1
 8003b36:	2200      	movs	r2, #0
 8003b38:	701a      	strb	r2, [r3, #0]

		rStabState[i].speedIntegral = 0;
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	4abd      	ldr	r2, [pc, #756]	; (8003e34 <stabilizationInit+0x318>)
 8003b3e:	2158      	movs	r1, #88	; 0x58
 8003b40:	fb01 f303 	mul.w	r3, r1, r3
 8003b44:	4413      	add	r3, r2
 8003b46:	330c      	adds	r3, #12
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]
		rStabState[i].posDerivative = 0;
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	4ab8      	ldr	r2, [pc, #736]	; (8003e34 <stabilizationInit+0x318>)
 8003b52:	2158      	movs	r1, #88	; 0x58
 8003b54:	fb01 f303 	mul.w	r3, r1, r3
 8003b58:	4413      	add	r3, r2
 8003b5a:	3310      	adds	r3, #16
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeed = 0;
 8003b62:	79fb      	ldrb	r3, [r7, #7]
 8003b64:	4ab3      	ldr	r2, [pc, #716]	; (8003e34 <stabilizationInit+0x318>)
 8003b66:	2158      	movs	r1, #88	; 0x58
 8003b68:	fb01 f303 	mul.w	r3, r1, r3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3314      	adds	r3, #20
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPos = 0;
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	4aae      	ldr	r2, [pc, #696]	; (8003e34 <stabilizationInit+0x318>)
 8003b7a:	2158      	movs	r1, #88	; 0x58
 8003b7c:	fb01 f303 	mul.w	r3, r1, r3
 8003b80:	4413      	add	r3, r2
 8003b82:	3318      	adds	r3, #24
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]

		rStabState[i].joyUnitCasted = 0;
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	4aa9      	ldr	r2, [pc, #676]	; (8003e34 <stabilizationInit+0x318>)
 8003b8e:	2158      	movs	r1, #88	; 0x58
 8003b90:	fb01 f303 	mul.w	r3, r1, r3
 8003b94:	4413      	add	r3, r2
 8003b96:	331c      	adds	r3, #28
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
		rStabState[i].joy_iValue = 0;
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	4aa4      	ldr	r2, [pc, #656]	; (8003e34 <stabilizationInit+0x318>)
 8003ba2:	2158      	movs	r1, #88	; 0x58
 8003ba4:	fb01 f303 	mul.w	r3, r1, r3
 8003ba8:	4413      	add	r3, r2
 8003baa:	3320      	adds	r3, #32
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]
		rStabState[i].posError = 0;
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	4a9f      	ldr	r2, [pc, #636]	; (8003e34 <stabilizationInit+0x318>)
 8003bb6:	2158      	movs	r1, #88	; 0x58
 8003bb8:	fb01 f303 	mul.w	r3, r1, r3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3324      	adds	r3, #36	; 0x24
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
		rStabState[i].speedError = 0;
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	4a9a      	ldr	r2, [pc, #616]	; (8003e34 <stabilizationInit+0x318>)
 8003bca:	2158      	movs	r1, #88	; 0x58
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3328      	adds	r3, #40	; 0x28
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
		rStabState[i].dynSummator = 0;
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	4a95      	ldr	r2, [pc, #596]	; (8003e34 <stabilizationInit+0x318>)
 8003bde:	2158      	movs	r1, #88	; 0x58
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	4413      	add	r3, r2
 8003be6:	332c      	adds	r3, #44	; 0x2c
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
		rStabState[i].pidValue = 0;
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	4a90      	ldr	r2, [pc, #576]	; (8003e34 <stabilizationInit+0x318>)
 8003bf2:	2158      	movs	r1, #88	; 0x58
 8003bf4:	fb01 f303 	mul.w	r3, r1, r3
 8003bf8:	4413      	add	r3, r2
 8003bfa:	3330      	adds	r3, #48	; 0x30
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
		rStabState[i].pid_iValue = 0;
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	4a8b      	ldr	r2, [pc, #556]	; (8003e34 <stabilizationInit+0x318>)
 8003c06:	2158      	movs	r1, #88	; 0x58
 8003c08:	fb01 f303 	mul.w	r3, r1, r3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3334      	adds	r3, #52	; 0x34
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
		rStabState[i].posErrorAmp = 0;
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	4a86      	ldr	r2, [pc, #536]	; (8003e34 <stabilizationInit+0x318>)
 8003c1a:	2158      	movs	r1, #88	; 0x58
 8003c1c:	fb01 f303 	mul.w	r3, r1, r3
 8003c20:	4413      	add	r3, r2
 8003c22:	3338      	adds	r3, #56	; 0x38
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
		rStabState[i].speedFiltered = 0;
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	4a81      	ldr	r2, [pc, #516]	; (8003e34 <stabilizationInit+0x318>)
 8003c2e:	2158      	movs	r1, #88	; 0x58
 8003c30:	fb01 f303 	mul.w	r3, r1, r3
 8003c34:	4413      	add	r3, r2
 8003c36:	333c      	adds	r3, #60	; 0x3c
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
		rStabState[i].posFiltered = 0;
 8003c3e:	79fb      	ldrb	r3, [r7, #7]
 8003c40:	4a7c      	ldr	r2, [pc, #496]	; (8003e34 <stabilizationInit+0x318>)
 8003c42:	2158      	movs	r1, #88	; 0x58
 8003c44:	fb01 f303 	mul.w	r3, r1, r3
 8003c48:	4413      	add	r3, r2
 8003c4a:	3340      	adds	r3, #64	; 0x40
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPosFiltered = 0;
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	4a77      	ldr	r2, [pc, #476]	; (8003e34 <stabilizationInit+0x318>)
 8003c56:	2158      	movs	r1, #88	; 0x58
 8003c58:	fb01 f303 	mul.w	r3, r1, r3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	3344      	adds	r3, #68	; 0x44
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeedError = 0;
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	4a72      	ldr	r2, [pc, #456]	; (8003e34 <stabilizationInit+0x318>)
 8003c6a:	2158      	movs	r1, #88	; 0x58
 8003c6c:	fb01 f303 	mul.w	r3, r1, r3
 8003c70:	4413      	add	r3, r2
 8003c72:	3348      	adds	r3, #72	; 0x48
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
		rStabState[i].thrustersFiltered = 0;
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	4a6d      	ldr	r2, [pc, #436]	; (8003e34 <stabilizationInit+0x318>)
 8003c7e:	2158      	movs	r1, #88	; 0x58
 8003c80:	fb01 f303 	mul.w	r3, r1, r3
 8003c84:	4413      	add	r3, r2
 8003c86:	334c      	adds	r3, #76	; 0x4c
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
		rStabState[i].outputSignal = 0;
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	4a68      	ldr	r2, [pc, #416]	; (8003e34 <stabilizationInit+0x318>)
 8003c92:	2158      	movs	r1, #88	; 0x58
 8003c94:	fb01 f303 	mul.w	r3, r1, r3
 8003c98:	4413      	add	r3, r2
 8003c9a:	3350      	adds	r3, #80	; 0x50
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]

		rStabState[i].LastTick = 0;
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	4a63      	ldr	r2, [pc, #396]	; (8003e34 <stabilizationInit+0x318>)
 8003ca6:	2158      	movs	r1, #88	; 0x58
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	4413      	add	r3, r2
 8003cae:	3354      	adds	r3, #84	; 0x54
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]

		if(!rState.flash) {
 8003cb6:	4b60      	ldr	r3, [pc, #384]	; (8003e38 <stabilizationInit+0x31c>)
 8003cb8:	789b      	ldrb	r3, [r3, #2]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f040 809f 	bne.w	8003dfe <stabilizationInit+0x2e2>
			rStabConstants[i].pJoyUnitCast = 1;
 8003cc0:	79fa      	ldrb	r2, [r7, #7]
 8003cc2:	495b      	ldr	r1, [pc, #364]	; (8003e30 <stabilizationInit+0x314>)
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4413      	add	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	440b      	add	r3, r1
 8003cce:	3304      	adds	r3, #4
 8003cd0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003cd4:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pSpeedDyn = 1;
 8003cd6:	79fa      	ldrb	r2, [r7, #7]
 8003cd8:	4955      	ldr	r1, [pc, #340]	; (8003e30 <stabilizationInit+0x314>)
 8003cda:	4613      	mov	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4413      	add	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	440b      	add	r3, r1
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003cea:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pErrGain = 1;
 8003cec:	79fa      	ldrb	r2, [r7, #7]
 8003cee:	4950      	ldr	r1, [pc, #320]	; (8003e30 <stabilizationInit+0x314>)
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	440b      	add	r3, r1
 8003cfa:	330c      	adds	r3, #12
 8003cfc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003d00:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].T = 0;
 8003d02:	79fa      	ldrb	r2, [r7, #7]
 8003d04:	494a      	ldr	r1, [pc, #296]	; (8003e30 <stabilizationInit+0x314>)
 8003d06:	4613      	mov	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	440b      	add	r3, r1
 8003d10:	3318      	adds	r3, #24
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].K = 1;
 8003d18:	79fa      	ldrb	r2, [r7, #7]
 8003d1a:	4945      	ldr	r1, [pc, #276]	; (8003e30 <stabilizationInit+0x314>)
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4413      	add	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	440b      	add	r3, r1
 8003d26:	331c      	adds	r3, #28
 8003d28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003d2c:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].T = 0;
 8003d2e:	79fa      	ldrb	r2, [r7, #7]
 8003d30:	493f      	ldr	r1, [pc, #252]	; (8003e30 <stabilizationInit+0x314>)
 8003d32:	4613      	mov	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	4413      	add	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	440b      	add	r3, r1
 8003d3c:	3310      	adds	r3, #16
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].K = 1;
 8003d44:	79fa      	ldrb	r2, [r7, #7]
 8003d46:	493a      	ldr	r1, [pc, #232]	; (8003e30 <stabilizationInit+0x314>)
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	440b      	add	r3, r1
 8003d52:	3314      	adds	r3, #20
 8003d54:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003d58:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.pGain = 1;
 8003d5a:	79fa      	ldrb	r2, [r7, #7]
 8003d5c:	4934      	ldr	r1, [pc, #208]	; (8003e30 <stabilizationInit+0x314>)
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4413      	add	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	440b      	add	r3, r1
 8003d68:	3328      	adds	r3, #40	; 0x28
 8003d6a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003d6e:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iGain = 1;
 8003d70:	79fa      	ldrb	r2, [r7, #7]
 8003d72:	492f      	ldr	r1, [pc, #188]	; (8003e30 <stabilizationInit+0x314>)
 8003d74:	4613      	mov	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4413      	add	r3, r2
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	440b      	add	r3, r1
 8003d7e:	332c      	adds	r3, #44	; 0x2c
 8003d80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003d84:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMax = -1000;
 8003d86:	79fa      	ldrb	r2, [r7, #7]
 8003d88:	4929      	ldr	r1, [pc, #164]	; (8003e30 <stabilizationInit+0x314>)
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4413      	add	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	440b      	add	r3, r1
 8003d94:	3330      	adds	r3, #48	; 0x30
 8003d96:	4a29      	ldr	r2, [pc, #164]	; (8003e3c <stabilizationInit+0x320>)
 8003d98:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMin = 1000;
 8003d9a:	79fa      	ldrb	r2, [r7, #7]
 8003d9c:	4924      	ldr	r1, [pc, #144]	; (8003e30 <stabilizationInit+0x314>)
 8003d9e:	4613      	mov	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4413      	add	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	440b      	add	r3, r1
 8003da8:	3334      	adds	r3, #52	; 0x34
 8003daa:	4a25      	ldr	r2, [pc, #148]	; (8003e40 <stabilizationInit+0x324>)
 8003dac:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMax = 5000;
 8003dae:	79fa      	ldrb	r2, [r7, #7]
 8003db0:	491f      	ldr	r1, [pc, #124]	; (8003e30 <stabilizationInit+0x314>)
 8003db2:	4613      	mov	r3, r2
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	4413      	add	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	440b      	add	r3, r1
 8003dbc:	333c      	adds	r3, #60	; 0x3c
 8003dbe:	4a21      	ldr	r2, [pc, #132]	; (8003e44 <stabilizationInit+0x328>)
 8003dc0:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMin = -5000;
 8003dc2:	79fa      	ldrb	r2, [r7, #7]
 8003dc4:	491a      	ldr	r1, [pc, #104]	; (8003e30 <stabilizationInit+0x314>)
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	4413      	add	r3, r2
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	440b      	add	r3, r1
 8003dd0:	3338      	adds	r3, #56	; 0x38
 8003dd2:	4a1d      	ldr	r2, [pc, #116]	; (8003e48 <stabilizationInit+0x32c>)
 8003dd4:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMax = 32000;
 8003dd6:	79fa      	ldrb	r2, [r7, #7]
 8003dd8:	4915      	ldr	r1, [pc, #84]	; (8003e30 <stabilizationInit+0x314>)
 8003dda:	4613      	mov	r3, r2
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	4413      	add	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	440b      	add	r3, r1
 8003de4:	3340      	adds	r3, #64	; 0x40
 8003de6:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <stabilizationInit+0x330>)
 8003de8:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMin = -32000;
 8003dea:	79fa      	ldrb	r2, [r7, #7]
 8003dec:	4910      	ldr	r1, [pc, #64]	; (8003e30 <stabilizationInit+0x314>)
 8003dee:	4613      	mov	r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4413      	add	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	440b      	add	r3, r1
 8003df8:	3344      	adds	r3, #68	; 0x44
 8003dfa:	4a15      	ldr	r2, [pc, #84]	; (8003e50 <stabilizationInit+0x334>)
 8003dfc:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	3301      	adds	r3, #1
 8003e02:	71fb      	strb	r3, [r7, #7]
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	2b05      	cmp	r3, #5
 8003e08:	f67f ae8e 	bls.w	8003b28 <stabilizationInit+0xc>




	/////////////////////////////////////////////////////////////
    rStabState[STAB_ROLL].inputSignal = &rJoySpeed.roll;
 8003e0c:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <stabilizationInit+0x318>)
 8003e0e:	4a11      	ldr	r2, [pc, #68]	; (8003e54 <stabilizationInit+0x338>)
 8003e10:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    rStabState[STAB_ROLL].speedSignal = &rSensors.rollSpeed;
 8003e14:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <stabilizationInit+0x318>)
 8003e16:	4a10      	ldr	r2, [pc, #64]	; (8003e58 <stabilizationInit+0x33c>)
 8003e18:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    rStabState[STAB_ROLL].posSignal = &rSensors.roll;
 8003e1c:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <stabilizationInit+0x318>)
 8003e1e:	4a0f      	ldr	r2, [pc, #60]	; (8003e5c <stabilizationInit+0x340>)
 8003e20:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    rStabConstants[STAB_ROLL].joyIntegration = false;
 8003e24:	4b02      	ldr	r3, [pc, #8]	; (8003e30 <stabilizationInit+0x314>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
 8003e2c:	e018      	b.n	8003e60 <stabilizationInit+0x344>
 8003e2e:	bf00      	nop
 8003e30:	20001d94 	.word	0x20001d94
 8003e34:	20001f44 	.word	0x20001f44
 8003e38:	20001c04 	.word	0x20001c04
 8003e3c:	c47a0000 	.word	0xc47a0000
 8003e40:	447a0000 	.word	0x447a0000
 8003e44:	459c4000 	.word	0x459c4000
 8003e48:	c59c4000 	.word	0xc59c4000
 8003e4c:	46fa0000 	.word	0x46fa0000
 8003e50:	c6fa0000 	.word	0xc6fa0000
 8003e54:	20001d48 	.word	0x20001d48
 8003e58:	20001cec 	.word	0x20001cec
 8003e5c:	20001cd0 	.word	0x20001cd0
    /////////////////////////////////////////////////////////////
    rStabState[STAB_PITCH].inputSignal = &rJoySpeed.pitch;
 8003e60:	4b86      	ldr	r3, [pc, #536]	; (800407c <stabilizationInit+0x560>)
 8003e62:	4a87      	ldr	r2, [pc, #540]	; (8004080 <stabilizationInit+0x564>)
 8003e64:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    rStabState[STAB_PITCH].speedSignal = &rSensors.pitchSpeed;
 8003e68:	4b84      	ldr	r3, [pc, #528]	; (800407c <stabilizationInit+0x560>)
 8003e6a:	4a86      	ldr	r2, [pc, #536]	; (8004084 <stabilizationInit+0x568>)
 8003e6c:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    rStabState[STAB_PITCH].posSignal = &rSensors.pitch;
 8003e70:	4b82      	ldr	r3, [pc, #520]	; (800407c <stabilizationInit+0x560>)
 8003e72:	4a85      	ldr	r2, [pc, #532]	; (8004088 <stabilizationInit+0x56c>)
 8003e74:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    rStabConstants[STAB_PITCH].joyIntegration = true;
 8003e78:	4b84      	ldr	r3, [pc, #528]	; (800408c <stabilizationInit+0x570>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    /////////////////////////////////////////////////////////////
    rStabState[STAB_YAW].inputSignal = &rJoySpeed.yaw;
 8003e80:	4b7e      	ldr	r3, [pc, #504]	; (800407c <stabilizationInit+0x560>)
 8003e82:	4a83      	ldr	r2, [pc, #524]	; (8004090 <stabilizationInit+0x574>)
 8003e84:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    rStabState[STAB_YAW].speedSignal = &rSensors.yawSpeed;
 8003e88:	4b7c      	ldr	r3, [pc, #496]	; (800407c <stabilizationInit+0x560>)
 8003e8a:	4a82      	ldr	r2, [pc, #520]	; (8004094 <stabilizationInit+0x578>)
 8003e8c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    rStabState[STAB_YAW].posSignal = &rSensors.yaw;//&rStabState[STAB_YAW].speedIntegral;
 8003e90:	4b7a      	ldr	r3, [pc, #488]	; (800407c <stabilizationInit+0x560>)
 8003e92:	4a81      	ldr	r2, [pc, #516]	; (8004098 <stabilizationInit+0x57c>)
 8003e94:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    rStabConstants[STAB_YAW].joyIntegration = true;
 8003e98:	4b7c      	ldr	r3, [pc, #496]	; (800408c <stabilizationInit+0x570>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
    /////////////////////////////////////////////////////////////
    rStabState[STAB_DEPTH].inputSignal = &rJoySpeed.depth;
 8003ea0:	4b76      	ldr	r3, [pc, #472]	; (800407c <stabilizationInit+0x560>)
 8003ea2:	4a7e      	ldr	r2, [pc, #504]	; (800409c <stabilizationInit+0x580>)
 8003ea4:	601a      	str	r2, [r3, #0]
    rStabState[STAB_DEPTH].speedSignal = &rSensors.velocity_pressure;//&rStabState[STAB_DEPTH].posDerivative;
 8003ea6:	4b75      	ldr	r3, [pc, #468]	; (800407c <stabilizationInit+0x560>)
 8003ea8:	4a7d      	ldr	r2, [pc, #500]	; (80040a0 <stabilizationInit+0x584>)
 8003eaa:	605a      	str	r2, [r3, #4]
    rStabState[STAB_DEPTH].posSignal = &rSensors.pressure;
 8003eac:	4b73      	ldr	r3, [pc, #460]	; (800407c <stabilizationInit+0x560>)
 8003eae:	4a7d      	ldr	r2, [pc, #500]	; (80040a4 <stabilizationInit+0x588>)
 8003eb0:	609a      	str	r2, [r3, #8]
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 8003eb2:	4b76      	ldr	r3, [pc, #472]	; (800408c <stabilizationInit+0x570>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	705a      	strb	r2, [r3, #1]
    /////////////////////////////////////////////////////////////
    rStabState[STAB_LAG].inputSignal = &rJoySpeed.lag;
 8003eb8:	4b70      	ldr	r3, [pc, #448]	; (800407c <stabilizationInit+0x560>)
 8003eba:	4a7b      	ldr	r2, [pc, #492]	; (80040a8 <stabilizationInit+0x58c>)
 8003ebc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    rStabState[STAB_LAG].speedSignal = &rStabState[STAB_LAG].posDerivative;
 8003ec0:	4b6e      	ldr	r3, [pc, #440]	; (800407c <stabilizationInit+0x560>)
 8003ec2:	4a7a      	ldr	r2, [pc, #488]	; (80040ac <stabilizationInit+0x590>)
 8003ec4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    rStabState[STAB_LAG].posSignal = &rState.lag_error;
 8003ec8:	4b6c      	ldr	r3, [pc, #432]	; (800407c <stabilizationInit+0x560>)
 8003eca:	4a79      	ldr	r2, [pc, #484]	; (80040b0 <stabilizationInit+0x594>)
 8003ecc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    rStabConstants[STAB_LAG].joyIntegration = false;
 8003ed0:	4b6e      	ldr	r3, [pc, #440]	; (800408c <stabilizationInit+0x570>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    /////////////////////////////////////////////////////////////
    rStabState[STAB_MARCH].inputSignal = &rJoySpeed.march;
 8003ed8:	4b68      	ldr	r3, [pc, #416]	; (800407c <stabilizationInit+0x560>)
 8003eda:	4a76      	ldr	r2, [pc, #472]	; (80040b4 <stabilizationInit+0x598>)
 8003edc:	659a      	str	r2, [r3, #88]	; 0x58
    rStabState[STAB_MARCH].speedSignal = &rStabState[STAB_MARCH].posDerivative;
 8003ede:	4b67      	ldr	r3, [pc, #412]	; (800407c <stabilizationInit+0x560>)
 8003ee0:	4a75      	ldr	r2, [pc, #468]	; (80040b8 <stabilizationInit+0x59c>)
 8003ee2:	65da      	str	r2, [r3, #92]	; 0x5c
    rStabState[STAB_MARCH].posSignal = &rJoySpeed.march;
 8003ee4:	4b65      	ldr	r3, [pc, #404]	; (800407c <stabilizationInit+0x560>)
 8003ee6:	4a73      	ldr	r2, [pc, #460]	; (80040b4 <stabilizationInit+0x598>)
 8003ee8:	661a      	str	r2, [r3, #96]	; 0x60
    rStabConstants[STAB_MARCH].joyIntegration = false;
 8003eea:	4b68      	ldr	r3, [pc, #416]	; (800408c <stabilizationInit+0x570>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49


    //upload coef
	//rStabConstants[STAB_YAW].enable = true;

	rStabConstants[STAB_YAW].pJoyUnitCast = 1;
 8003ef2:	4b66      	ldr	r3, [pc, #408]	; (800408c <stabilizationInit+0x570>)
 8003ef4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003ef8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	rStabConstants[STAB_YAW].pSpeedDyn = 0;
 8003efc:	4b63      	ldr	r3, [pc, #396]	; (800408c <stabilizationInit+0x570>)
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	rStabConstants[STAB_YAW].pErrGain = 70;
 8003f06:	4b61      	ldr	r3, [pc, #388]	; (800408c <stabilizationInit+0x570>)
 8003f08:	4a6c      	ldr	r2, [pc, #432]	; (80040bc <stabilizationInit+0x5a0>)
 8003f0a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].T = 0;
 8003f0e:	4b5f      	ldr	r3, [pc, #380]	; (800408c <stabilizationInit+0x570>)
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].K = 120;
 8003f18:	4b5c      	ldr	r3, [pc, #368]	; (800408c <stabilizationInit+0x570>)
 8003f1a:	4a69      	ldr	r2, [pc, #420]	; (80040c0 <stabilizationInit+0x5a4>)
 8003f1c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].T = 0;
 8003f20:	4b5a      	ldr	r3, [pc, #360]	; (800408c <stabilizationInit+0x570>)
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].K = 1;
 8003f2a:	4b58      	ldr	r3, [pc, #352]	; (800408c <stabilizationInit+0x570>)
 8003f2c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003f30:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	rStabConstants[STAB_YAW].pid.pGain = 25;
 8003f34:	4b55      	ldr	r3, [pc, #340]	; (800408c <stabilizationInit+0x570>)
 8003f36:	4a63      	ldr	r2, [pc, #396]	; (80040c4 <stabilizationInit+0x5a8>)
 8003f38:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	rStabConstants[STAB_YAW].pid.iGain = 0;
 8003f3c:	4b53      	ldr	r3, [pc, #332]	; (800408c <stabilizationInit+0x570>)
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	rStabConstants[STAB_YAW].pid.iMax = 3000;
 8003f46:	4b51      	ldr	r3, [pc, #324]	; (800408c <stabilizationInit+0x570>)
 8003f48:	4a5f      	ldr	r2, [pc, #380]	; (80040c8 <stabilizationInit+0x5ac>)
 8003f4a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	rStabConstants[STAB_YAW].pid.iMin = -3000;
 8003f4e:	4b4f      	ldr	r3, [pc, #316]	; (800408c <stabilizationInit+0x570>)
 8003f50:	4a5e      	ldr	r2, [pc, #376]	; (80040cc <stabilizationInit+0x5b0>)
 8003f52:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	rStabConstants[STAB_YAW].pThrustersMax = 20000;
 8003f56:	4b4d      	ldr	r3, [pc, #308]	; (800408c <stabilizationInit+0x570>)
 8003f58:	4a5d      	ldr	r2, [pc, #372]	; (80040d0 <stabilizationInit+0x5b4>)
 8003f5a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	rStabConstants[STAB_YAW].pThrustersMin = -20000;
 8003f5e:	4b4b      	ldr	r3, [pc, #300]	; (800408c <stabilizationInit+0x570>)
 8003f60:	4a5c      	ldr	r2, [pc, #368]	; (80040d4 <stabilizationInit+0x5b8>)
 8003f62:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	rStabConstants[STAB_YAW].sOutSummatorMax = 32000;
 8003f66:	4b49      	ldr	r3, [pc, #292]	; (800408c <stabilizationInit+0x570>)
 8003f68:	4a5b      	ldr	r2, [pc, #364]	; (80040d8 <stabilizationInit+0x5bc>)
 8003f6a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	rStabConstants[STAB_YAW].sOutSummatorMin = -32000;
 8003f6e:	4b47      	ldr	r3, [pc, #284]	; (800408c <stabilizationInit+0x570>)
 8003f70:	4a5a      	ldr	r2, [pc, #360]	; (80040dc <stabilizationInit+0x5c0>)
 8003f72:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    rStabConstants[STAB_YAW].joyIntegration = false;
 8003f76:	4b45      	ldr	r3, [pc, #276]	; (800408c <stabilizationInit+0x570>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9

	//rStabConstants[STAB_DEPTH].enable = true;

	rStabConstants[STAB_DEPTH].pJoyUnitCast = -1;
 8003f7e:	4b43      	ldr	r3, [pc, #268]	; (800408c <stabilizationInit+0x570>)
 8003f80:	4a57      	ldr	r2, [pc, #348]	; (80040e0 <stabilizationInit+0x5c4>)
 8003f82:	605a      	str	r2, [r3, #4]
	rStabConstants[STAB_DEPTH].pSpeedDyn = 1;
 8003f84:	4b41      	ldr	r3, [pc, #260]	; (800408c <stabilizationInit+0x570>)
 8003f86:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003f8a:	609a      	str	r2, [r3, #8]
	rStabConstants[STAB_DEPTH].pErrGain = 1;
 8003f8c:	4b3f      	ldr	r3, [pc, #252]	; (800408c <stabilizationInit+0x570>)
 8003f8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003f92:	60da      	str	r2, [r3, #12]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].T = 80;
 8003f94:	4b3d      	ldr	r3, [pc, #244]	; (800408c <stabilizationInit+0x570>)
 8003f96:	4a53      	ldr	r2, [pc, #332]	; (80040e4 <stabilizationInit+0x5c8>)
 8003f98:	619a      	str	r2, [r3, #24]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].K = -15;
 8003f9a:	4b3c      	ldr	r3, [pc, #240]	; (800408c <stabilizationInit+0x570>)
 8003f9c:	4a52      	ldr	r2, [pc, #328]	; (80040e8 <stabilizationInit+0x5cc>)
 8003f9e:	61da      	str	r2, [r3, #28]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].T = 0;
 8003fa0:	4b3a      	ldr	r3, [pc, #232]	; (800408c <stabilizationInit+0x570>)
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	611a      	str	r2, [r3, #16]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].K = -1;
 8003fa8:	4b38      	ldr	r3, [pc, #224]	; (800408c <stabilizationInit+0x570>)
 8003faa:	4a4d      	ldr	r2, [pc, #308]	; (80040e0 <stabilizationInit+0x5c4>)
 8003fac:	615a      	str	r2, [r3, #20]
	rStabConstants[STAB_DEPTH].pid.pGain = 30;
 8003fae:	4b37      	ldr	r3, [pc, #220]	; (800408c <stabilizationInit+0x570>)
 8003fb0:	4a4e      	ldr	r2, [pc, #312]	; (80040ec <stabilizationInit+0x5d0>)
 8003fb2:	629a      	str	r2, [r3, #40]	; 0x28
	rStabConstants[STAB_DEPTH].pid.iGain = 5;
 8003fb4:	4b35      	ldr	r3, [pc, #212]	; (800408c <stabilizationInit+0x570>)
 8003fb6:	4a4e      	ldr	r2, [pc, #312]	; (80040f0 <stabilizationInit+0x5d4>)
 8003fb8:	62da      	str	r2, [r3, #44]	; 0x2c
	rStabConstants[STAB_DEPTH].pid.iMax = 40;
 8003fba:	4b34      	ldr	r3, [pc, #208]	; (800408c <stabilizationInit+0x570>)
 8003fbc:	4a4d      	ldr	r2, [pc, #308]	; (80040f4 <stabilizationInit+0x5d8>)
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
	rStabConstants[STAB_DEPTH].pid.iMin = -40;
 8003fc0:	4b32      	ldr	r3, [pc, #200]	; (800408c <stabilizationInit+0x570>)
 8003fc2:	4a4d      	ldr	r2, [pc, #308]	; (80040f8 <stabilizationInit+0x5dc>)
 8003fc4:	635a      	str	r2, [r3, #52]	; 0x34
	rStabConstants[STAB_DEPTH].pThrustersMax = 32000;
 8003fc6:	4b31      	ldr	r3, [pc, #196]	; (800408c <stabilizationInit+0x570>)
 8003fc8:	4a43      	ldr	r2, [pc, #268]	; (80040d8 <stabilizationInit+0x5bc>)
 8003fca:	63da      	str	r2, [r3, #60]	; 0x3c
	rStabConstants[STAB_DEPTH].pThrustersMin = -32000;
 8003fcc:	4b2f      	ldr	r3, [pc, #188]	; (800408c <stabilizationInit+0x570>)
 8003fce:	4a43      	ldr	r2, [pc, #268]	; (80040dc <stabilizationInit+0x5c0>)
 8003fd0:	639a      	str	r2, [r3, #56]	; 0x38
	rStabConstants[STAB_DEPTH].sOutSummatorMax = 32000;
 8003fd2:	4b2e      	ldr	r3, [pc, #184]	; (800408c <stabilizationInit+0x570>)
 8003fd4:	4a40      	ldr	r2, [pc, #256]	; (80040d8 <stabilizationInit+0x5bc>)
 8003fd6:	641a      	str	r2, [r3, #64]	; 0x40
	rStabConstants[STAB_DEPTH].sOutSummatorMin = -32000;
 8003fd8:	4b2c      	ldr	r3, [pc, #176]	; (800408c <stabilizationInit+0x570>)
 8003fda:	4a40      	ldr	r2, [pc, #256]	; (80040dc <stabilizationInit+0x5c0>)
 8003fdc:	645a      	str	r2, [r3, #68]	; 0x44
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 8003fde:	4b2b      	ldr	r3, [pc, #172]	; (800408c <stabilizationInit+0x570>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	705a      	strb	r2, [r3, #1]

	rStabConstants[STAB_PITCH].pJoyUnitCast = -1;
 8003fe4:	4b29      	ldr	r3, [pc, #164]	; (800408c <stabilizationInit+0x570>)
 8003fe6:	4a3e      	ldr	r2, [pc, #248]	; (80040e0 <stabilizationInit+0x5c4>)
 8003fe8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	rStabConstants[STAB_PITCH].pSpeedDyn = 0;
 8003fec:	4b27      	ldr	r3, [pc, #156]	; (800408c <stabilizationInit+0x570>)
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	rStabConstants[STAB_PITCH].pErrGain = 1;
 8003ff6:	4b25      	ldr	r3, [pc, #148]	; (800408c <stabilizationInit+0x570>)
 8003ff8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003ffc:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	rStabConstants[STAB_PITCH].aFilter[SPEED_FILTER].T = 0;
 8004000:	4b22      	ldr	r3, [pc, #136]	; (800408c <stabilizationInit+0x570>)
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rStabConstants[STAB_PITCH].aFilter[SPEED_FILTER].K = 1;
 800400a:	4b20      	ldr	r3, [pc, #128]	; (800408c <stabilizationInit+0x570>)
 800400c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004010:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	rStabConstants[STAB_PITCH].aFilter[POS_FILTER].T = 0;
 8004014:	4b1d      	ldr	r3, [pc, #116]	; (800408c <stabilizationInit+0x570>)
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	rStabConstants[STAB_PITCH].aFilter[POS_FILTER].K = -100;
 800401e:	4b1b      	ldr	r3, [pc, #108]	; (800408c <stabilizationInit+0x570>)
 8004020:	4a36      	ldr	r2, [pc, #216]	; (80040fc <stabilizationInit+0x5e0>)
 8004022:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
	rStabConstants[STAB_PITCH].pid.pGain = 25;
 8004026:	4b19      	ldr	r3, [pc, #100]	; (800408c <stabilizationInit+0x570>)
 8004028:	4a26      	ldr	r2, [pc, #152]	; (80040c4 <stabilizationInit+0x5a8>)
 800402a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	rStabConstants[STAB_PITCH].pid.iGain = 60;
 800402e:	4b17      	ldr	r3, [pc, #92]	; (800408c <stabilizationInit+0x570>)
 8004030:	4a33      	ldr	r2, [pc, #204]	; (8004100 <stabilizationInit+0x5e4>)
 8004032:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	rStabConstants[STAB_PITCH].pid.iMax = 50;
 8004036:	4b15      	ldr	r3, [pc, #84]	; (800408c <stabilizationInit+0x570>)
 8004038:	4a32      	ldr	r2, [pc, #200]	; (8004104 <stabilizationInit+0x5e8>)
 800403a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	rStabConstants[STAB_PITCH].pid.iMin = -50;
 800403e:	4b13      	ldr	r3, [pc, #76]	; (800408c <stabilizationInit+0x570>)
 8004040:	4a31      	ldr	r2, [pc, #196]	; (8004108 <stabilizationInit+0x5ec>)
 8004042:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	rStabConstants[STAB_PITCH].pThrustersMax = 32000;
 8004046:	4b11      	ldr	r3, [pc, #68]	; (800408c <stabilizationInit+0x570>)
 8004048:	4a23      	ldr	r2, [pc, #140]	; (80040d8 <stabilizationInit+0x5bc>)
 800404a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	rStabConstants[STAB_PITCH].pThrustersMin = -32000;
 800404e:	4b0f      	ldr	r3, [pc, #60]	; (800408c <stabilizationInit+0x570>)
 8004050:	4a22      	ldr	r2, [pc, #136]	; (80040dc <stabilizationInit+0x5c0>)
 8004052:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	rStabConstants[STAB_PITCH].sOutSummatorMax = 32000;
 8004056:	4b0d      	ldr	r3, [pc, #52]	; (800408c <stabilizationInit+0x570>)
 8004058:	4a1f      	ldr	r2, [pc, #124]	; (80040d8 <stabilizationInit+0x5bc>)
 800405a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	rStabConstants[STAB_PITCH].sOutSummatorMin = -32000;
 800405e:	4b0b      	ldr	r3, [pc, #44]	; (800408c <stabilizationInit+0x570>)
 8004060:	4a1e      	ldr	r2, [pc, #120]	; (80040dc <stabilizationInit+0x5c0>)
 8004062:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    rStabConstants[STAB_PITCH].joyIntegration = false;
 8004066:	4b09      	ldr	r3, [pc, #36]	; (800408c <stabilizationInit+0x570>)
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169


}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	20001f44 	.word	0x20001f44
 8004080:	20001d4c 	.word	0x20001d4c
 8004084:	20001cf0 	.word	0x20001cf0
 8004088:	20001cd4 	.word	0x20001cd4
 800408c:	20001d94 	.word	0x20001d94
 8004090:	20001d50 	.word	0x20001d50
 8004094:	20001cf4 	.word	0x20001cf4
 8004098:	20001cd8 	.word	0x20001cd8
 800409c:	20001d44 	.word	0x20001d44
 80040a0:	20001d2c 	.word	0x20001d2c
 80040a4:	20001d24 	.word	0x20001d24
 80040a8:	20001d40 	.word	0x20001d40
 80040ac:	20002004 	.word	0x20002004
 80040b0:	20001c0c 	.word	0x20001c0c
 80040b4:	20001d3c 	.word	0x20001d3c
 80040b8:	20001fac 	.word	0x20001fac
 80040bc:	428c0000 	.word	0x428c0000
 80040c0:	42f00000 	.word	0x42f00000
 80040c4:	41c80000 	.word	0x41c80000
 80040c8:	453b8000 	.word	0x453b8000
 80040cc:	c53b8000 	.word	0xc53b8000
 80040d0:	469c4000 	.word	0x469c4000
 80040d4:	c69c4000 	.word	0xc69c4000
 80040d8:	46fa0000 	.word	0x46fa0000
 80040dc:	c6fa0000 	.word	0xc6fa0000
 80040e0:	bf800000 	.word	0xbf800000
 80040e4:	42a00000 	.word	0x42a00000
 80040e8:	c1700000 	.word	0xc1700000
 80040ec:	41f00000 	.word	0x41f00000
 80040f0:	40a00000 	.word	0x40a00000
 80040f4:	42200000 	.word	0x42200000
 80040f8:	c2200000 	.word	0xc2200000
 80040fc:	c2c80000 	.word	0xc2c80000
 8004100:	42700000 	.word	0x42700000
 8004104:	42480000 	.word	0x42480000
 8004108:	c2480000 	.word	0xc2480000

0800410c <stabilizationStart>:

void stabilizationStart(uint8_t contour)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	71fb      	strb	r3, [r7, #7]
	rStabConstants[contour].enable = true;
 8004116:	79fa      	ldrb	r2, [r7, #7]
 8004118:	4970      	ldr	r1, [pc, #448]	; (80042dc <stabilizationStart+0x1d0>)
 800411a:	4613      	mov	r3, r2
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	4413      	add	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	440b      	add	r3, r1
 8004124:	2201      	movs	r2, #1
 8004126:	701a      	strb	r2, [r3, #0]

	rStabState[contour].oldSpeed = *rStabState[contour].speedSignal;
 8004128:	79fb      	ldrb	r3, [r7, #7]
 800412a:	4a6d      	ldr	r2, [pc, #436]	; (80042e0 <stabilizationStart+0x1d4>)
 800412c:	2158      	movs	r1, #88	; 0x58
 800412e:	fb01 f303 	mul.w	r3, r1, r3
 8004132:	4413      	add	r3, r2
 8004134:	3304      	adds	r3, #4
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	6812      	ldr	r2, [r2, #0]
 800413c:	4968      	ldr	r1, [pc, #416]	; (80042e0 <stabilizationStart+0x1d4>)
 800413e:	2058      	movs	r0, #88	; 0x58
 8004140:	fb00 f303 	mul.w	r3, r0, r3
 8004144:	440b      	add	r3, r1
 8004146:	3314      	adds	r3, #20
 8004148:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPos = *rStabState[contour].posSignal;
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	4a64      	ldr	r2, [pc, #400]	; (80042e0 <stabilizationStart+0x1d4>)
 800414e:	2158      	movs	r1, #88	; 0x58
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	4413      	add	r3, r2
 8004156:	3308      	adds	r3, #8
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	4960      	ldr	r1, [pc, #384]	; (80042e0 <stabilizationStart+0x1d4>)
 8004160:	2058      	movs	r0, #88	; 0x58
 8004162:	fb00 f303 	mul.w	r3, r0, r3
 8004166:	440b      	add	r3, r1
 8004168:	3318      	adds	r3, #24
 800416a:	601a      	str	r2, [r3, #0]
	rStabState[contour].posDerivative = 0;
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	4a5c      	ldr	r2, [pc, #368]	; (80042e0 <stabilizationStart+0x1d4>)
 8004170:	2158      	movs	r1, #88	; 0x58
 8004172:	fb01 f303 	mul.w	r3, r1, r3
 8004176:	4413      	add	r3, r2
 8004178:	3310      	adds	r3, #16
 800417a:	f04f 0200 	mov.w	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
	//rStabState[contour].speedIntegral = 0;
if(contour==STAB_YAW)
 8004180:	79fb      	ldrb	r3, [r7, #7]
 8004182:	2b03      	cmp	r3, #3
 8004184:	d103      	bne.n	800418e <stabilizationStart+0x82>
{
	rSensors.yaw =0;
 8004186:	4b57      	ldr	r3, [pc, #348]	; (80042e4 <stabilizationStart+0x1d8>)
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	609a      	str	r2, [r3, #8]
}
	rStabState[contour].joyUnitCasted = 0;
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	4a53      	ldr	r2, [pc, #332]	; (80042e0 <stabilizationStart+0x1d4>)
 8004192:	2158      	movs	r1, #88	; 0x58
 8004194:	fb01 f303 	mul.w	r3, r1, r3
 8004198:	4413      	add	r3, r2
 800419a:	331c      	adds	r3, #28
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
	rStabState[contour].joy_iValue = *rStabState[contour].posSignal;
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	4a4e      	ldr	r2, [pc, #312]	; (80042e0 <stabilizationStart+0x1d4>)
 80041a6:	2158      	movs	r1, #88	; 0x58
 80041a8:	fb01 f303 	mul.w	r3, r1, r3
 80041ac:	4413      	add	r3, r2
 80041ae:	3308      	adds	r3, #8
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	494a      	ldr	r1, [pc, #296]	; (80042e0 <stabilizationStart+0x1d4>)
 80041b8:	2058      	movs	r0, #88	; 0x58
 80041ba:	fb00 f303 	mul.w	r3, r0, r3
 80041be:	440b      	add	r3, r1
 80041c0:	3320      	adds	r3, #32
 80041c2:	601a      	str	r2, [r3, #0]
	rStabState[contour].posError = 0;
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	4a46      	ldr	r2, [pc, #280]	; (80042e0 <stabilizationStart+0x1d4>)
 80041c8:	2158      	movs	r1, #88	; 0x58
 80041ca:	fb01 f303 	mul.w	r3, r1, r3
 80041ce:	4413      	add	r3, r2
 80041d0:	3324      	adds	r3, #36	; 0x24
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedError = 0;
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	4a41      	ldr	r2, [pc, #260]	; (80042e0 <stabilizationStart+0x1d4>)
 80041dc:	2158      	movs	r1, #88	; 0x58
 80041de:	fb01 f303 	mul.w	r3, r1, r3
 80041e2:	4413      	add	r3, r2
 80041e4:	3328      	adds	r3, #40	; 0x28
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
	rStabState[contour].dynSummator = 0;
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	4a3c      	ldr	r2, [pc, #240]	; (80042e0 <stabilizationStart+0x1d4>)
 80041f0:	2158      	movs	r1, #88	; 0x58
 80041f2:	fb01 f303 	mul.w	r3, r1, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	332c      	adds	r3, #44	; 0x2c
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
	rStabState[contour].pidValue = 0;
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	4a37      	ldr	r2, [pc, #220]	; (80042e0 <stabilizationStart+0x1d4>)
 8004204:	2158      	movs	r1, #88	; 0x58
 8004206:	fb01 f303 	mul.w	r3, r1, r3
 800420a:	4413      	add	r3, r2
 800420c:	3330      	adds	r3, #48	; 0x30
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
	rStabState[contour].pid_iValue = 0;
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	4a32      	ldr	r2, [pc, #200]	; (80042e0 <stabilizationStart+0x1d4>)
 8004218:	2158      	movs	r1, #88	; 0x58
 800421a:	fb01 f303 	mul.w	r3, r1, r3
 800421e:	4413      	add	r3, r2
 8004220:	3334      	adds	r3, #52	; 0x34
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
	rStabState[contour].posErrorAmp = 0;
 8004228:	79fb      	ldrb	r3, [r7, #7]
 800422a:	4a2d      	ldr	r2, [pc, #180]	; (80042e0 <stabilizationStart+0x1d4>)
 800422c:	2158      	movs	r1, #88	; 0x58
 800422e:	fb01 f303 	mul.w	r3, r1, r3
 8004232:	4413      	add	r3, r2
 8004234:	3338      	adds	r3, #56	; 0x38
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedFiltered = 0;
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	4a28      	ldr	r2, [pc, #160]	; (80042e0 <stabilizationStart+0x1d4>)
 8004240:	2158      	movs	r1, #88	; 0x58
 8004242:	fb01 f303 	mul.w	r3, r1, r3
 8004246:	4413      	add	r3, r2
 8004248:	333c      	adds	r3, #60	; 0x3c
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
	rStabState[contour].posFiltered = 0;
 8004250:	79fb      	ldrb	r3, [r7, #7]
 8004252:	4a23      	ldr	r2, [pc, #140]	; (80042e0 <stabilizationStart+0x1d4>)
 8004254:	2158      	movs	r1, #88	; 0x58
 8004256:	fb01 f303 	mul.w	r3, r1, r3
 800425a:	4413      	add	r3, r2
 800425c:	3340      	adds	r3, #64	; 0x40
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPosFiltered = 0;
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	4a1e      	ldr	r2, [pc, #120]	; (80042e0 <stabilizationStart+0x1d4>)
 8004268:	2158      	movs	r1, #88	; 0x58
 800426a:	fb01 f303 	mul.w	r3, r1, r3
 800426e:	4413      	add	r3, r2
 8004270:	3344      	adds	r3, #68	; 0x44
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldSpeedError = 0;
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	4a19      	ldr	r2, [pc, #100]	; (80042e0 <stabilizationStart+0x1d4>)
 800427c:	2158      	movs	r1, #88	; 0x58
 800427e:	fb01 f303 	mul.w	r3, r1, r3
 8004282:	4413      	add	r3, r2
 8004284:	3348      	adds	r3, #72	; 0x48
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
	rStabState[contour].thrustersFiltered = 0;
 800428c:	79fb      	ldrb	r3, [r7, #7]
 800428e:	4a14      	ldr	r2, [pc, #80]	; (80042e0 <stabilizationStart+0x1d4>)
 8004290:	2158      	movs	r1, #88	; 0x58
 8004292:	fb01 f303 	mul.w	r3, r1, r3
 8004296:	4413      	add	r3, r2
 8004298:	334c      	adds	r3, #76	; 0x4c
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
	rStabState[contour].outputSignal = 0;
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	4a0f      	ldr	r2, [pc, #60]	; (80042e0 <stabilizationStart+0x1d4>)
 80042a4:	2158      	movs	r1, #88	; 0x58
 80042a6:	fb01 f303 	mul.w	r3, r1, r3
 80042aa:	4413      	add	r3, r2
 80042ac:	3350      	adds	r3, #80	; 0x50
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
	rStabState[contour].LastTick = xTaskGetTickCount();
 80042b4:	f008 fc54 	bl	800cb60 <xTaskGetTickCount>
 80042b8:	ee07 0a90 	vmov	s15, r0
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c2:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <stabilizationStart+0x1d4>)
 80042c4:	2158      	movs	r1, #88	; 0x58
 80042c6:	fb01 f303 	mul.w	r3, r1, r3
 80042ca:	4413      	add	r3, r2
 80042cc:	3354      	adds	r3, #84	; 0x54
 80042ce:	edc3 7a00 	vstr	s15, [r3]
}
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20001d94 	.word	0x20001d94
 80042e0:	20001f44 	.word	0x20001f44
 80042e4:	20001cd0 	.word	0x20001cd0

080042e8 <stabilizationUpdate>:

void stabilizationUpdate(uint8_t contour)
{
 80042e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042ec:	b086      	sub	sp, #24
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	4603      	mov	r3, r0
 80042f2:	71fb      	strb	r3, [r7, #7]
	struct robotStabilizationConstants_s *constants = &rStabConstants[contour];
 80042f4:	79fa      	ldrb	r2, [r7, #7]
 80042f6:	4613      	mov	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	4413      	add	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	4aa6      	ldr	r2, [pc, #664]	; (8004598 <stabilizationUpdate+0x2b0>)
 8004300:	4413      	add	r3, r2
 8004302:	617b      	str	r3, [r7, #20]
	struct robotStabilizationState_s *state = &rStabState[contour];
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	2258      	movs	r2, #88	; 0x58
 8004308:	fb02 f303 	mul.w	r3, r2, r3
 800430c:	4aa3      	ldr	r2, [pc, #652]	; (800459c <stabilizationUpdate+0x2b4>)
 800430e:	4413      	add	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
	float diffTime = fromTickToMs(xTaskGetTickCount() - state->LastTick) / 1000.0f;
 8004312:	f008 fc25 	bl	800cb60 <xTaskGetTickCount>
 8004316:	ee07 0a90 	vmov	s15, r0
 800431a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800432c:	ee17 0a90 	vmov	r0, s15
 8004330:	f7fc fd9e 	bl	8000e70 <fromTickToMs>
 8004334:	eeb0 7a40 	vmov.f32	s14, s0
 8004338:	eddf 6a99 	vldr	s13, [pc, #612]	; 80045a0 <stabilizationUpdate+0x2b8>
 800433c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004340:	edc7 7a03 	vstr	s15, [r7, #12]
	state->LastTick = xTaskGetTickCount();
 8004344:	f008 fc0c 	bl	800cb60 <xTaskGetTickCount>
 8004348:	ee07 0a90 	vmov	s15, r0
 800434c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	// Speed feedback filtering
	struct AperiodicFilter *filter = &constants->aFilter[SPEED_FILTER];
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	3318      	adds	r3, #24
 800435a:	60bb      	str	r3, [r7, #8]

	if(filter->T != 0) {
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	edd3 7a00 	vldr	s15, [r3]
 8004362:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800436a:	d02b      	beq.n	80043c4 <stabilizationUpdate+0xdc>
		//state->speedFiltered = state->speedFiltered*exp(-diffTime/filter->T/1e5) + state->oldSpeed*filter->K*80*(1-exp(-diffTime/filter->T/1e5));
		state->speedFiltered = state->oldSpeed + diffTime * (1/filter->T*100) * (*state->speedSignal * filter->K*70 - state->oldSpeed);
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	ed93 7a05 	vldr	s14, [r3, #20]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	edd3 6a00 	vldr	s13, [r3]
 8004378:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800437c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004380:	eddf 6a8b 	vldr	s13, [pc, #556]	; 80045b0 <stabilizationUpdate+0x2c8>
 8004384:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004388:	edd7 7a03 	vldr	s15, [r7, #12]
 800438c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	ed93 6a00 	vldr	s12, [r3]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	edd3 7a01 	vldr	s15, [r3, #4]
 800439e:	ee66 7a27 	vmul.f32	s15, s12, s15
 80043a2:	ed9f 6a80 	vldr	s12, [pc, #512]	; 80045a4 <stabilizationUpdate+0x2bc>
 80043a6:	ee27 6a86 	vmul.f32	s12, s15, s12
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80043b0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80043b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 80043c2:	e023      	b.n	800440c <stabilizationUpdate+0x124>
	}
	else {
		if(contour==STAB_PITCH)
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	2b05      	cmp	r3, #5
 80043c8:	d110      	bne.n	80043ec <stabilizationUpdate+0x104>
		{
			state->speedFiltered = *state->speedSignal*filter->K*250;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	ed93 7a00 	vldr	s14, [r3]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80043d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043dc:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80045a8 <stabilizationUpdate+0x2c0>
 80043e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 80043ea:	e00f      	b.n	800440c <stabilizationUpdate+0x124>
		}
		else
		state->speedFiltered = *state->speedSignal*filter->K*10;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	ed93 7a00 	vldr	s14, [r3]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80043fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	//state->oldSpeed = *state->speedSignal;
	state->oldSpeed = state->speedFiltered;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	615a      	str	r2, [r3, #20]

	// Position feedback filtering
	filter = &constants->aFilter[POS_FILTER];
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	3310      	adds	r3, #16
 8004418:	60bb      	str	r3, [r7, #8]
	if(filter->T != 0) {
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	edd3 7a00 	vldr	s15, [r3]
 8004420:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004428:	d061      	beq.n	80044ee <stabilizationUpdate+0x206>
		state->posFiltered = state->posFiltered*exp(-diffTime/filter->T) + state->oldPos*filter->K*(1-exp(-diffTime/filter->T));
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	4618      	mov	r0, r3
 8004430:	f7fc f832 	bl	8000498 <__aeabi_f2d>
 8004434:	4604      	mov	r4, r0
 8004436:	460d      	mov	r5, r1
 8004438:	edd7 7a03 	vldr	s15, [r7, #12]
 800443c:	eeb1 7a67 	vneg.f32	s14, s15
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	edd3 7a00 	vldr	s15, [r3]
 8004446:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800444a:	ee16 0a90 	vmov	r0, s13
 800444e:	f7fc f823 	bl	8000498 <__aeabi_f2d>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	ec43 2b10 	vmov	d0, r2, r3
 800445a:	f00a f929 	bl	800e6b0 <exp>
 800445e:	ec53 2b10 	vmov	r2, r3, d0
 8004462:	4620      	mov	r0, r4
 8004464:	4629      	mov	r1, r5
 8004466:	f7fc f86f 	bl	8000548 <__aeabi_dmul>
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4690      	mov	r8, r2
 8004470:	4699      	mov	r9, r3
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	ed93 7a06 	vldr	s14, [r3, #24]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	edd3 7a01 	vldr	s15, [r3, #4]
 800447e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004482:	ee17 0a90 	vmov	r0, s15
 8004486:	f7fc f807 	bl	8000498 <__aeabi_f2d>
 800448a:	4604      	mov	r4, r0
 800448c:	460d      	mov	r5, r1
 800448e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004492:	eeb1 7a67 	vneg.f32	s14, s15
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	edd3 7a00 	vldr	s15, [r3]
 800449c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80044a0:	ee16 0a90 	vmov	r0, s13
 80044a4:	f7fb fff8 	bl	8000498 <__aeabi_f2d>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	ec43 2b10 	vmov	d0, r2, r3
 80044b0:	f00a f8fe 	bl	800e6b0 <exp>
 80044b4:	ec53 2b10 	vmov	r2, r3, d0
 80044b8:	f04f 0000 	mov.w	r0, #0
 80044bc:	493b      	ldr	r1, [pc, #236]	; (80045ac <stabilizationUpdate+0x2c4>)
 80044be:	f7fb fe8b 	bl	80001d8 <__aeabi_dsub>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4620      	mov	r0, r4
 80044c8:	4629      	mov	r1, r5
 80044ca:	f7fc f83d 	bl	8000548 <__aeabi_dmul>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4640      	mov	r0, r8
 80044d4:	4649      	mov	r1, r9
 80044d6:	f7fb fe81 	bl	80001dc <__adddf3>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4610      	mov	r0, r2
 80044e0:	4619      	mov	r1, r3
 80044e2:	f7fc faf3 	bl	8000acc <__aeabi_d2f>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	641a      	str	r2, [r3, #64]	; 0x40
 80044ec:	e00b      	b.n	8004506 <stabilizationUpdate+0x21e>
	}
	else {
		state->posFiltered = *state->posSignal*filter->K;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	ed93 7a00 	vldr	s14, [r3]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80044fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	}
	state->oldPos = *state->posSignal;
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	619a      	str	r2, [r3, #24]

	// Speed integration calculation
	state->speedIntegral += (*state->speedSignal * diffTime);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	ed93 7a03 	vldr	s14, [r3, #12]
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	edd3 6a00 	vldr	s13, [r3]
 800451e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	edc3 7a03 	vstr	s15, [r3, #12]

    // Position derivative calculation
    state->posDerivative = (state->posFiltered - state->oldPosFiltered) / diffTime;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800453c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004540:	ed97 7a03 	vldr	s14, [r7, #12]
 8004544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	edc3 7a04 	vstr	s15, [r3, #16]
    state->oldPosFiltered = state->posFiltered;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	645a      	str	r2, [r3, #68]	; 0x44

	// Input signal unit cast
	state->joyUnitCasted = constants->pJoyUnitCast * *state->inputSignal;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	ed93 7a01 	vldr	s14, [r3, #4]
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	edd3 7a00 	vldr	s15, [r3]
 8004564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	edc3 7a07 	vstr	s15, [r3, #28]

    // Casted input signal integration
	if(constants->joyIntegration) {
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	785b      	ldrb	r3, [r3, #1]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d01e      	beq.n	80045b4 <stabilizationUpdate+0x2cc>
		state->joy_iValue += state->joyUnitCasted * diffTime;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	ed93 7a08 	vldr	s14, [r3, #32]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	edd3 6a07 	vldr	s13, [r3, #28]
 8004582:	edd7 7a03 	vldr	s15, [r7, #12]
 8004586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800458a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	edc3 7a08 	vstr	s15, [r3, #32]
 8004594:	e012      	b.n	80045bc <stabilizationUpdate+0x2d4>
 8004596:	bf00      	nop
 8004598:	20001d94 	.word	0x20001d94
 800459c:	20001f44 	.word	0x20001f44
 80045a0:	447a0000 	.word	0x447a0000
 80045a4:	428c0000 	.word	0x428c0000
 80045a8:	437a0000 	.word	0x437a0000
 80045ac:	3ff00000 	.word	0x3ff00000
 80045b0:	42c80000 	.word	0x42c80000
	}
	else {
		state->joy_iValue = state->joyUnitCasted;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	621a      	str	r2, [r3, #32]
	}

    // Position feedback summator
    state->posError = state->joy_iValue - state->posFiltered;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	ed93 7a08 	vldr	s14, [r3, #32]
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80045c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Feedback amplifiers
    state->posErrorAmp = state->posError * constants->pErrGain;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	edd3 7a03 	vldr	s15, [r3, #12]
 80045de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    // PI integration
    state->pid_iValue += (state->posErrorAmp * diffTime) * constants->pid.iGain;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80045f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80045f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // PI integration saturation
    if(state->pid_iValue > constants->pid.iMax*100) {
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800461c:	ed5f 6a1c 	vldr	s13, [pc, #-112]	; 80045b0 <stabilizationUpdate+0x2c8>
 8004620:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004624:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462c:	dd0a      	ble.n	8004644 <stabilizationUpdate+0x35c>
    	state->pid_iValue = constants->pid.iMax*100;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004634:	ed1f 7a22 	vldr	s14, [pc, #-136]	; 80045b0 <stabilizationUpdate+0x2c8>
 8004638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8004642:	e018      	b.n	8004676 <stabilizationUpdate+0x38e>
    }
    else if(state->pid_iValue < constants->pid.iMin*100) {
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004650:	ed5f 6a29 	vldr	s13, [pc, #-164]	; 80045b0 <stabilizationUpdate+0x2c8>
 8004654:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004658:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800465c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004660:	d509      	bpl.n	8004676 <stabilizationUpdate+0x38e>
    	state->pid_iValue = constants->pid.iMin*100;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004668:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 80045b0 <stabilizationUpdate+0x2c8>
 800466c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    }

    // PI summator
    state->pidValue =  state->pid_iValue + (state->posErrorAmp * constants->pid.pGain);
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004688:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800468c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    // Dynamic summator
    state->dynSummator = state->pidValue + *state->inputSignal * constants->pSpeedDyn;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	edd3 6a00 	vldr	s13, [r3]
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80046aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    // Speed feedback
    state->speedError = state->dynSummator - state->speedFiltered;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80046c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    // Out filtering
    filter = &constants->aFilter[THRUSTERS_FILTER];
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	3320      	adds	r3, #32
 80046d2:	60bb      	str	r3, [r7, #8]
    if(filter->T != 0) {
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	edd3 7a00 	vldr	s15, [r3]
 80046da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e2:	d061      	beq.n	80047a8 <stabilizationUpdate+0x4c0>
    	state->thrustersFiltered = state->thrustersFiltered*exp(-diffTime/filter->T) + state->oldSpeedError*filter->K*(1-exp(-diffTime/filter->T));
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fb fed5 	bl	8000498 <__aeabi_f2d>
 80046ee:	4604      	mov	r4, r0
 80046f0:	460d      	mov	r5, r1
 80046f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80046f6:	eeb1 7a67 	vneg.f32	s14, s15
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	edd3 7a00 	vldr	s15, [r3]
 8004700:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004704:	ee16 0a90 	vmov	r0, s13
 8004708:	f7fb fec6 	bl	8000498 <__aeabi_f2d>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	ec43 2b10 	vmov	d0, r2, r3
 8004714:	f009 ffcc 	bl	800e6b0 <exp>
 8004718:	ec53 2b10 	vmov	r2, r3, d0
 800471c:	4620      	mov	r0, r4
 800471e:	4629      	mov	r1, r5
 8004720:	f7fb ff12 	bl	8000548 <__aeabi_dmul>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4690      	mov	r8, r2
 800472a:	4699      	mov	r9, r3
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	edd3 7a01 	vldr	s15, [r3, #4]
 8004738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473c:	ee17 0a90 	vmov	r0, s15
 8004740:	f7fb feaa 	bl	8000498 <__aeabi_f2d>
 8004744:	4604      	mov	r4, r0
 8004746:	460d      	mov	r5, r1
 8004748:	edd7 7a03 	vldr	s15, [r7, #12]
 800474c:	eeb1 7a67 	vneg.f32	s14, s15
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	edd3 7a00 	vldr	s15, [r3]
 8004756:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800475a:	ee16 0a90 	vmov	r0, s13
 800475e:	f7fb fe9b 	bl	8000498 <__aeabi_f2d>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	ec43 2b10 	vmov	d0, r2, r3
 800476a:	f009 ffa1 	bl	800e6b0 <exp>
 800476e:	ec53 2b10 	vmov	r2, r3, d0
 8004772:	f04f 0000 	mov.w	r0, #0
 8004776:	492a      	ldr	r1, [pc, #168]	; (8004820 <stabilizationUpdate+0x538>)
 8004778:	f7fb fd2e 	bl	80001d8 <__aeabi_dsub>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4620      	mov	r0, r4
 8004782:	4629      	mov	r1, r5
 8004784:	f7fb fee0 	bl	8000548 <__aeabi_dmul>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4640      	mov	r0, r8
 800478e:	4649      	mov	r1, r9
 8004790:	f7fb fd24 	bl	80001dc <__adddf3>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4610      	mov	r0, r2
 800479a:	4619      	mov	r1, r3
 800479c:	f7fc f996 	bl	8000acc <__aeabi_d2f>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80047a6:	e00a      	b.n	80047be <stabilizationUpdate+0x4d6>
    }
    else {
    	state->thrustersFiltered = state->speedError*filter->K;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80047b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    }
    state->oldSpeedError = state->speedError;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	649a      	str	r2, [r3, #72]	; 0x48

    if(state->thrustersFiltered > constants->pThrustersMax) {
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80047d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047da:	dd04      	ble.n	80047e6 <stabilizationUpdate+0x4fe>
    	state->thrustersFiltered = constants->pThrustersMax;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80047e4:	e00e      	b.n	8004804 <stabilizationUpdate+0x51c>
    }
    else if(state->thrustersFiltered < constants->pThrustersMin) {
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80047f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fa:	d503      	bpl.n	8004804 <stabilizationUpdate+0x51c>
    	state->thrustersFiltered = constants->pThrustersMin;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    state->outputSignal = -1*state->speedError;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800480a:	eef1 7a67 	vneg.f32	s15, s15
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 8004814:	bf00      	nop
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800481e:	bf00      	nop
 8004820:	3ff00000 	.word	0x3ff00000

08004824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800482a:	2300      	movs	r3, #0
 800482c:	607b      	str	r3, [r7, #4]
 800482e:	4b12      	ldr	r3, [pc, #72]	; (8004878 <HAL_MspInit+0x54>)
 8004830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004832:	4a11      	ldr	r2, [pc, #68]	; (8004878 <HAL_MspInit+0x54>)
 8004834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004838:	6453      	str	r3, [r2, #68]	; 0x44
 800483a:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <HAL_MspInit+0x54>)
 800483c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004842:	607b      	str	r3, [r7, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004846:	2300      	movs	r3, #0
 8004848:	603b      	str	r3, [r7, #0]
 800484a:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <HAL_MspInit+0x54>)
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	4a0a      	ldr	r2, [pc, #40]	; (8004878 <HAL_MspInit+0x54>)
 8004850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004854:	6413      	str	r3, [r2, #64]	; 0x40
 8004856:	4b08      	ldr	r3, [pc, #32]	; (8004878 <HAL_MspInit+0x54>)
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004862:	2200      	movs	r2, #0
 8004864:	210f      	movs	r1, #15
 8004866:	f06f 0001 	mvn.w	r0, #1
 800486a:	f001 fc3b 	bl	80060e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800486e:	bf00      	nop
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40023800 	.word	0x40023800

0800487c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08e      	sub	sp, #56	; 0x38
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	4b34      	ldr	r3, [pc, #208]	; (8004964 <HAL_InitTick+0xe8>)
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	4a33      	ldr	r2, [pc, #204]	; (8004964 <HAL_InitTick+0xe8>)
 8004896:	f043 0301 	orr.w	r3, r3, #1
 800489a:	6413      	str	r3, [r2, #64]	; 0x40
 800489c:	4b31      	ldr	r3, [pc, #196]	; (8004964 <HAL_InitTick+0xe8>)
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80048a8:	f107 0210 	add.w	r2, r7, #16
 80048ac:	f107 0314 	add.w	r3, r7, #20
 80048b0:	4611      	mov	r1, r2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f004 fef4 	bl	80096a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d103      	bne.n	80048ca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80048c2:	f004 fec5 	bl	8009650 <HAL_RCC_GetPCLK1Freq>
 80048c6:	6378      	str	r0, [r7, #52]	; 0x34
 80048c8:	e004      	b.n	80048d4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80048ca:	f004 fec1 	bl	8009650 <HAL_RCC_GetPCLK1Freq>
 80048ce:	4603      	mov	r3, r0
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80048d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d6:	4a24      	ldr	r2, [pc, #144]	; (8004968 <HAL_InitTick+0xec>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	0c9b      	lsrs	r3, r3, #18
 80048de:	3b01      	subs	r3, #1
 80048e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80048e2:	4b22      	ldr	r3, [pc, #136]	; (800496c <HAL_InitTick+0xf0>)
 80048e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80048e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80048ea:	4b20      	ldr	r3, [pc, #128]	; (800496c <HAL_InitTick+0xf0>)
 80048ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80048f0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80048f2:	4a1e      	ldr	r2, [pc, #120]	; (800496c <HAL_InitTick+0xf0>)
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80048f8:	4b1c      	ldr	r3, [pc, #112]	; (800496c <HAL_InitTick+0xf0>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048fe:	4b1b      	ldr	r3, [pc, #108]	; (800496c <HAL_InitTick+0xf0>)
 8004900:	2200      	movs	r2, #0
 8004902:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004904:	4b19      	ldr	r3, [pc, #100]	; (800496c <HAL_InitTick+0xf0>)
 8004906:	2200      	movs	r2, #0
 8004908:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800490a:	4818      	ldr	r0, [pc, #96]	; (800496c <HAL_InitTick+0xf0>)
 800490c:	f004 fefa 	bl	8009704 <HAL_TIM_Base_Init>
 8004910:	4603      	mov	r3, r0
 8004912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004916:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800491a:	2b00      	cmp	r3, #0
 800491c:	d11b      	bne.n	8004956 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800491e:	4813      	ldr	r0, [pc, #76]	; (800496c <HAL_InitTick+0xf0>)
 8004920:	f004 ff40 	bl	80097a4 <HAL_TIM_Base_Start_IT>
 8004924:	4603      	mov	r3, r0
 8004926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800492a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800492e:	2b00      	cmp	r3, #0
 8004930:	d111      	bne.n	8004956 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004932:	201c      	movs	r0, #28
 8004934:	f001 fbf2 	bl	800611c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b0f      	cmp	r3, #15
 800493c:	d808      	bhi.n	8004950 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800493e:	2200      	movs	r2, #0
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	201c      	movs	r0, #28
 8004944:	f001 fbce 	bl	80060e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004948:	4a09      	ldr	r2, [pc, #36]	; (8004970 <HAL_InitTick+0xf4>)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	e002      	b.n	8004956 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004956:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800495a:	4618      	mov	r0, r3
 800495c:	3738      	adds	r7, #56	; 0x38
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40023800 	.word	0x40023800
 8004968:	431bde83 	.word	0x431bde83
 800496c:	20002334 	.word	0x20002334
 8004970:	20000038 	.word	0x20000038

08004974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004978:	e7fe      	b.n	8004978 <NMI_Handler+0x4>

0800497a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800497a:	b480      	push	{r7}
 800497c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800497e:	e7fe      	b.n	800497e <HardFault_Handler+0x4>

08004980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004984:	e7fe      	b.n	8004984 <MemManage_Handler+0x4>

08004986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004986:	b480      	push	{r7}
 8004988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800498a:	e7fe      	b.n	800498a <BusFault_Handler+0x4>

0800498c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004990:	e7fe      	b.n	8004990 <UsageFault_Handler+0x4>

08004992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004992:	b480      	push	{r7}
 8004994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004996:	bf00      	nop
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80049a4:	4802      	ldr	r0, [pc, #8]	; (80049b0 <DMA1_Stream1_IRQHandler+0x10>)
 80049a6:	f001 fd5f 	bl	8006468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80049aa:	bf00      	nop
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20002610 	.word	0x20002610

080049b4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80049b8:	4802      	ldr	r0, [pc, #8]	; (80049c4 <DMA1_Stream3_IRQHandler+0x10>)
 80049ba:	f001 fd55 	bl	8006468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80049be:	bf00      	nop
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20002670 	.word	0x20002670

080049c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80049cc:	4802      	ldr	r0, [pc, #8]	; (80049d8 <DMA1_Stream5_IRQHandler+0x10>)
 80049ce:	f001 fd4b 	bl	8006468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80049d2:	bf00      	nop
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20002550 	.word	0x20002550

080049dc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80049e0:	4802      	ldr	r0, [pc, #8]	; (80049ec <DMA1_Stream6_IRQHandler+0x10>)
 80049e2:	f001 fd41 	bl	8006468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80049e6:	bf00      	nop
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	200025b0 	.word	0x200025b0

080049f0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80049f4:	4802      	ldr	r0, [pc, #8]	; (8004a00 <CAN1_TX_IRQHandler+0x10>)
 80049f6:	f001 f884 	bl	8005b02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80049fa:	bf00      	nop
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	200000c4 	.word	0x200000c4

08004a04 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004a08:	4802      	ldr	r0, [pc, #8]	; (8004a14 <CAN1_RX0_IRQHandler+0x10>)
 8004a0a:	f001 f87a 	bl	8005b02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004a0e:	bf00      	nop
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	200000c4 	.word	0x200000c4

08004a18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a1c:	4802      	ldr	r0, [pc, #8]	; (8004a28 <TIM2_IRQHandler+0x10>)
 8004a1e:	f004 ff31 	bl	8009884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a22:	bf00      	nop
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20002334 	.word	0x20002334

08004a2c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004a30:	4802      	ldr	r0, [pc, #8]	; (8004a3c <I2C1_EV_IRQHandler+0x10>)
 8004a32:	f002 fe2b 	bl	800768c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004a36:	bf00      	nop
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	200022e0 	.word	0x200022e0

08004a40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004a44:	4802      	ldr	r0, [pc, #8]	; (8004a50 <USART1_IRQHandler+0x10>)
 8004a46:	f005 fc13 	bl	800a270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004a4a:	bf00      	nop
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	200023c4 	.word	0x200023c4

08004a54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004a58:	4802      	ldr	r0, [pc, #8]	; (8004a64 <USART2_IRQHandler+0x10>)
 8004a5a:	f005 fc09 	bl	800a270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a5e:	bf00      	nop
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20002408 	.word	0x20002408

08004a68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004a6c:	4802      	ldr	r0, [pc, #8]	; (8004a78 <USART3_IRQHandler+0x10>)
 8004a6e:	f005 fbff 	bl	800a270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004a72:	bf00      	nop
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	2000244c 	.word	0x2000244c

08004a7c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004a80:	4802      	ldr	r0, [pc, #8]	; (8004a8c <DMA2_Stream2_IRQHandler+0x10>)
 8004a82:	f001 fcf1 	bl	8006468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20002490 	.word	0x20002490

08004a90 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004a94:	4802      	ldr	r0, [pc, #8]	; (8004aa0 <DMA2_Stream7_IRQHandler+0x10>)
 8004a96:	f001 fce7 	bl	8006468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004a9a:	bf00      	nop
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	200024f0 	.word	0x200024f0

08004aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004aa8:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <SystemInit+0x20>)
 8004aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aae:	4a05      	ldr	r2, [pc, #20]	; (8004ac4 <SystemInit+0x20>)
 8004ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ab8:	bf00      	nop
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	e000ed00 	.word	0xe000ed00

08004ac8 <thrustersInit>:
void addPitchToSumm(float *velocity);

uint8_t resizeFloatToUint8(float input);

void thrustersInit()
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
	rThrusters[Lag1st].address = 1;
 8004ace:	4b52      	ldr	r3, [pc, #328]	; (8004c18 <thrustersInit+0x150>)
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rThrusters[Lag2nd].address = 7;
 8004ad6:	4b50      	ldr	r3, [pc, #320]	; (8004c18 <thrustersInit+0x150>)
 8004ad8:	2207      	movs	r2, #7
 8004ada:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

	rThrusters[MarshLEFT].address = 3;
 8004ade:	4b4e      	ldr	r3, [pc, #312]	; (8004c18 <thrustersInit+0x150>)
 8004ae0:	2203      	movs	r2, #3
 8004ae2:	701a      	strb	r2, [r3, #0]
	rThrusters[MarshRIGHT].address = 2;
 8004ae4:	4b4c      	ldr	r3, [pc, #304]	; (8004c18 <thrustersInit+0x150>)
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	761a      	strb	r2, [r3, #24]

	rThrusters[MarshDown].address = 5;//xer
 8004aea:	4b4b      	ldr	r3, [pc, #300]	; (8004c18 <thrustersInit+0x150>)
 8004aec:	2205      	movs	r2, #5
 8004aee:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

	rThrusters[VertBACK].address 	= 6;
 8004af2:	4b49      	ldr	r3, [pc, #292]	; (8004c18 <thrustersInit+0x150>)
 8004af4:	2206      	movs	r2, #6
 8004af6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

	rThrusters[VertLEFT].address 	= 8;
 8004afa:	4b47      	ldr	r3, [pc, #284]	; (8004c18 <thrustersInit+0x150>)
 8004afc:	2208      	movs	r2, #8
 8004afe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	rThrusters[VertRIGHT].address 	= 4;
 8004b02:	4b45      	ldr	r3, [pc, #276]	; (8004c18 <thrustersInit+0x150>)
 8004b04:	2204      	movs	r2, #4
 8004b06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48


	rThrusters[Lag1st].inverse = true;
 8004b0a:	4b43      	ldr	r3, [pc, #268]	; (8004c18 <thrustersInit+0x150>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rThrusters[Lag2nd].inverse = true;
 8004b12:	4b41      	ldr	r3, [pc, #260]	; (8004c18 <thrustersInit+0x150>)
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	rThrusters[MarshLEFT].inverse = true;
 8004b1a:	4b3f      	ldr	r3, [pc, #252]	; (8004c18 <thrustersInit+0x150>)
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	759a      	strb	r2, [r3, #22]
	rThrusters[MarshRIGHT].inverse = true;
 8004b20:	4b3d      	ldr	r3, [pc, #244]	; (8004c18 <thrustersInit+0x150>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	rThrusters[MarshDown].inverse = true;
 8004b28:	4b3b      	ldr	r3, [pc, #236]	; (8004c18 <thrustersInit+0x150>)
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe

	rThrusters[VertBACK].inverse 	= false;
 8004b30:	4b39      	ldr	r3, [pc, #228]	; (8004c18 <thrustersInit+0x150>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	rThrusters[VertLEFT].inverse 	= false;
 8004b38:	4b37      	ldr	r3, [pc, #220]	; (8004c18 <thrustersInit+0x150>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rThrusters[VertRIGHT].inverse 	= true;
 8004b40:	4b35      	ldr	r3, [pc, #212]	; (8004c18 <thrustersInit+0x150>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

	for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8004b48:	2300      	movs	r3, #0
 8004b4a:	71fb      	strb	r3, [r7, #7]
 8004b4c:	e034      	b.n	8004bb8 <thrustersInit+0xf0>
		rThrusters[i].desiredSpeed = 0;
 8004b4e:	79fa      	ldrb	r2, [r7, #7]
 8004b50:	4931      	ldr	r1, [pc, #196]	; (8004c18 <thrustersInit+0x150>)
 8004b52:	4613      	mov	r3, r2
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	4413      	add	r3, r2
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	440b      	add	r3, r1
 8004b5c:	3302      	adds	r3, #2
 8004b5e:	2200      	movs	r2, #0
 8004b60:	701a      	strb	r2, [r3, #0]
		rThrusters[i].kForward = 0.4;
 8004b62:	79fa      	ldrb	r2, [r7, #7]
 8004b64:	492c      	ldr	r1, [pc, #176]	; (8004c18 <thrustersInit+0x150>)
 8004b66:	4613      	mov	r3, r2
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	4413      	add	r3, r2
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	440b      	add	r3, r1
 8004b70:	330c      	adds	r3, #12
 8004b72:	4a2a      	ldr	r2, [pc, #168]	; (8004c1c <thrustersInit+0x154>)
 8004b74:	601a      	str	r2, [r3, #0]
		rThrusters[i].kBackward = 0.4;
 8004b76:	79fa      	ldrb	r2, [r7, #7]
 8004b78:	4927      	ldr	r1, [pc, #156]	; (8004c18 <thrustersInit+0x150>)
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	4413      	add	r3, r2
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	440b      	add	r3, r1
 8004b84:	3310      	adds	r3, #16
 8004b86:	4a25      	ldr	r2, [pc, #148]	; (8004c1c <thrustersInit+0x154>)
 8004b88:	601a      	str	r2, [r3, #0]
		rThrusters[i].sForward = 127;
 8004b8a:	79fa      	ldrb	r2, [r7, #7]
 8004b8c:	4922      	ldr	r1, [pc, #136]	; (8004c18 <thrustersInit+0x150>)
 8004b8e:	4613      	mov	r3, r2
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	4413      	add	r3, r2
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	440b      	add	r3, r1
 8004b98:	3314      	adds	r3, #20
 8004b9a:	227f      	movs	r2, #127	; 0x7f
 8004b9c:	701a      	strb	r2, [r3, #0]
		rThrusters[i].sBackward = 127;
 8004b9e:	79fa      	ldrb	r2, [r7, #7]
 8004ba0:	491d      	ldr	r1, [pc, #116]	; (8004c18 <thrustersInit+0x150>)
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	4413      	add	r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	440b      	add	r3, r1
 8004bac:	3315      	adds	r3, #21
 8004bae:	227f      	movs	r2, #127	; 0x7f
 8004bb0:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	71fb      	strb	r3, [r7, #7]
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
 8004bba:	2b07      	cmp	r3, #7
 8004bbc:	d9c7      	bls.n	8004b4e <thrustersInit+0x86>
	}

	rThrusters[VertBACK].kForward = 0.4;
 8004bbe:	4b16      	ldr	r3, [pc, #88]	; (8004c18 <thrustersInit+0x150>)
 8004bc0:	4a16      	ldr	r2, [pc, #88]	; (8004c1c <thrustersInit+0x154>)
 8004bc2:	66da      	str	r2, [r3, #108]	; 0x6c
	rThrusters[VertBACK].kBackward = 0.4;
 8004bc4:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <thrustersInit+0x150>)
 8004bc6:	4a15      	ldr	r2, [pc, #84]	; (8004c1c <thrustersInit+0x154>)
 8004bc8:	671a      	str	r2, [r3, #112]	; 0x70
	rThrusters[VertLEFT].kForward = 0.7;
 8004bca:	4b13      	ldr	r3, [pc, #76]	; (8004c18 <thrustersInit+0x150>)
 8004bcc:	4a14      	ldr	r2, [pc, #80]	; (8004c20 <thrustersInit+0x158>)
 8004bce:	63da      	str	r2, [r3, #60]	; 0x3c
	rThrusters[VertLEFT].kBackward = 0.7;
 8004bd0:	4b11      	ldr	r3, [pc, #68]	; (8004c18 <thrustersInit+0x150>)
 8004bd2:	4a13      	ldr	r2, [pc, #76]	; (8004c20 <thrustersInit+0x158>)
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40
	rThrusters[VertRIGHT].kForward = 0.7;
 8004bd6:	4b10      	ldr	r3, [pc, #64]	; (8004c18 <thrustersInit+0x150>)
 8004bd8:	4a11      	ldr	r2, [pc, #68]	; (8004c20 <thrustersInit+0x158>)
 8004bda:	655a      	str	r2, [r3, #84]	; 0x54
	rThrusters[VertRIGHT].kBackward = 0.7;
 8004bdc:	4b0e      	ldr	r3, [pc, #56]	; (8004c18 <thrustersInit+0x150>)
 8004bde:	4a10      	ldr	r2, [pc, #64]	; (8004c20 <thrustersInit+0x158>)
 8004be0:	659a      	str	r2, [r3, #88]	; 0x58

	rThrusters[MarshLEFT].kForward = 0.9;
 8004be2:	4b0d      	ldr	r3, [pc, #52]	; (8004c18 <thrustersInit+0x150>)
 8004be4:	4a0f      	ldr	r2, [pc, #60]	; (8004c24 <thrustersInit+0x15c>)
 8004be6:	60da      	str	r2, [r3, #12]
	rThrusters[MarshLEFT].kBackward = 0.9;
 8004be8:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <thrustersInit+0x150>)
 8004bea:	4a0e      	ldr	r2, [pc, #56]	; (8004c24 <thrustersInit+0x15c>)
 8004bec:	611a      	str	r2, [r3, #16]
	rThrusters[MarshRIGHT].kForward = 0.9;
 8004bee:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <thrustersInit+0x150>)
 8004bf0:	4a0c      	ldr	r2, [pc, #48]	; (8004c24 <thrustersInit+0x15c>)
 8004bf2:	625a      	str	r2, [r3, #36]	; 0x24
	rThrusters[MarshRIGHT].kBackward = 0.9;
 8004bf4:	4b08      	ldr	r3, [pc, #32]	; (8004c18 <thrustersInit+0x150>)
 8004bf6:	4a0b      	ldr	r2, [pc, #44]	; (8004c24 <thrustersInit+0x15c>)
 8004bf8:	629a      	str	r2, [r3, #40]	; 0x28

	rThrusters[MarshDown].kForward = 0.7;
 8004bfa:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <thrustersInit+0x150>)
 8004bfc:	4a08      	ldr	r2, [pc, #32]	; (8004c20 <thrustersInit+0x158>)
 8004bfe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	rThrusters[MarshDown].kBackward = 0.7;
 8004c02:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <thrustersInit+0x150>)
 8004c04:	4a06      	ldr	r2, [pc, #24]	; (8004c20 <thrustersInit+0x158>)
 8004c06:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20001c10 	.word	0x20001c10
 8004c1c:	3ecccccd 	.word	0x3ecccccd
 8004c20:	3f333333 	.word	0x3f333333
 8004c24:	3f666666 	.word	0x3f666666

08004c28 <resetThrusters>:

void resetThrusters()
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
	rJoySpeed.depth = 0;
 8004c2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ca4 <resetThrusters+0x7c>)
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	609a      	str	r2, [r3, #8]
	rJoySpeed.lag = 0;
 8004c34:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <resetThrusters+0x7c>)
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	605a      	str	r2, [r3, #4]
	rJoySpeed.march = 0;
 8004c3c:	4b19      	ldr	r3, [pc, #100]	; (8004ca4 <resetThrusters+0x7c>)
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
	rJoySpeed.pitch = 0;
 8004c44:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <resetThrusters+0x7c>)
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	611a      	str	r2, [r3, #16]
	rJoySpeed.roll = 0;
 8004c4c:	4b15      	ldr	r3, [pc, #84]	; (8004ca4 <resetThrusters+0x7c>)
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	60da      	str	r2, [r3, #12]
	rJoySpeed.yaw = 0;
 8004c54:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <resetThrusters+0x7c>)
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	615a      	str	r2, [r3, #20]

	rThrusters[Lag1st].desiredSpeed = 0;
 8004c5c:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <resetThrusters+0x80>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rThrusters[Lag2nd].desiredSpeed = 0;
 8004c64:	4b10      	ldr	r3, [pc, #64]	; (8004ca8 <resetThrusters+0x80>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	rThrusters[MarshLEFT].desiredSpeed = 0;
 8004c6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ca8 <resetThrusters+0x80>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	709a      	strb	r2, [r3, #2]
	rThrusters[MarshRIGHT].desiredSpeed = 0;
 8004c72:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <resetThrusters+0x80>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	769a      	strb	r2, [r3, #26]
	rThrusters[VertBACK].desiredSpeed = 0;
 8004c78:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <resetThrusters+0x80>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	rThrusters[VertLEFT].desiredSpeed = 0;
 8004c80:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <resetThrusters+0x80>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rThrusters[VertRIGHT].desiredSpeed = 0;
 8004c88:	4b07      	ldr	r3, [pc, #28]	; (8004ca8 <resetThrusters+0x80>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	rThrusters[MarshDown].desiredSpeed = 0;
 8004c90:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <resetThrusters+0x80>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
}
 8004c98:	bf00      	nop
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	20001d3c 	.word	0x20001d3c
 8004ca8:	20001c10 	.word	0x20001c10

08004cac <fillThrustersRequest>:

void fillThrustersRequest(uint8_t *buf, uint8_t thruster)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	70fb      	strb	r3, [r7, #3]
    struct thrustersRequest_s res;

    res.AA = 0xAA;
 8004cb8:	23aa      	movs	r3, #170	; 0xaa
 8004cba:	723b      	strb	r3, [r7, #8]
    res.type = 0x01;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	727b      	strb	r3, [r7, #9]
    res.address = rThrusters[thruster].address;
 8004cc0:	78fa      	ldrb	r2, [r7, #3]
 8004cc2:	4936      	ldr	r1, [pc, #216]	; (8004d9c <fillThrustersRequest+0xf0>)
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	4413      	add	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	440b      	add	r3, r1
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	72bb      	strb	r3, [r7, #10]
    int16_t velocity = rThrusters[thruster].desiredSpeed;
 8004cd2:	78fa      	ldrb	r2, [r7, #3]
 8004cd4:	4931      	ldr	r1, [pc, #196]	; (8004d9c <fillThrustersRequest+0xf0>)
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	4413      	add	r3, r2
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	440b      	add	r3, r1
 8004ce0:	3302      	adds	r3, #2
 8004ce2:	f993 3000 	ldrsb.w	r3, [r3]
 8004ce6:	81fb      	strh	r3, [r7, #14]

    // Inverting
    if(rThrusters[thruster].inverse) {
 8004ce8:	78fa      	ldrb	r2, [r7, #3]
 8004cea:	492c      	ldr	r1, [pc, #176]	; (8004d9c <fillThrustersRequest+0xf0>)
 8004cec:	4613      	mov	r3, r2
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	4413      	add	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	440b      	add	r3, r1
 8004cf6:	3316      	adds	r3, #22
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <fillThrustersRequest+0x5a>
    	velocity *= -1;
 8004cfe:	89fb      	ldrh	r3, [r7, #14]
 8004d00:	425b      	negs	r3, r3
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	81fb      	strh	r3, [r7, #14]
    }

    // Multiplier constants
    if(velocity > 0) {
 8004d06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	dd17      	ble.n	8004d3e <fillThrustersRequest+0x92>
    	velocity = (int16_t) ( (float) (velocity) * rThrusters[thruster].kForward);
 8004d0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d1a:	78fa      	ldrb	r2, [r7, #3]
 8004d1c:	491f      	ldr	r1, [pc, #124]	; (8004d9c <fillThrustersRequest+0xf0>)
 8004d1e:	4613      	mov	r3, r2
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	4413      	add	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	440b      	add	r3, r1
 8004d28:	330c      	adds	r3, #12
 8004d2a:	edd3 7a00 	vldr	s15, [r3]
 8004d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d36:	ee17 3a90 	vmov	r3, s15
 8004d3a:	81fb      	strh	r3, [r7, #14]
 8004d3c:	e01a      	b.n	8004d74 <fillThrustersRequest+0xc8>
    }
    else if(velocity < 0) {
 8004d3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	da16      	bge.n	8004d74 <fillThrustersRequest+0xc8>
    	velocity = (int16_t) ((float) (velocity) * rThrusters[thruster].kBackward);
 8004d46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d52:	78fa      	ldrb	r2, [r7, #3]
 8004d54:	4911      	ldr	r1, [pc, #68]	; (8004d9c <fillThrustersRequest+0xf0>)
 8004d56:	4613      	mov	r3, r2
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	4413      	add	r3, r2
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	440b      	add	r3, r1
 8004d60:	3310      	adds	r3, #16
 8004d62:	edd3 7a00 	vldr	s15, [r3]
 8004d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d6e:	ee17 3a90 	vmov	r3, s15
 8004d72:	81fb      	strh	r3, [r7, #14]
//    	velocity = rThrusters[thruster].sForward;
//    }
//    else if(velocity < -rThrusters[thruster].sBackward) {
//    	velocity = -rThrusters[thruster].sBackward;
//    }
    res.velocity = velocity;
 8004d74:	89fb      	ldrh	r3, [r7, #14]
 8004d76:	b25b      	sxtb	r3, r3
 8004d78:	72fb      	strb	r3, [r7, #11]

    memcpy((void*)buf, (void*)&res, THRUSTERS_REQUEST_LENGTH);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	f107 0308 	add.w	r3, r7, #8
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	6010      	str	r0, [r2, #0]
 8004d86:	791b      	ldrb	r3, [r3, #4]
 8004d88:	7113      	strb	r3, [r2, #4]
    AddChecksumm8bVma(buf, THRUSTERS_REQUEST_LENGTH);
 8004d8a:	2105      	movs	r1, #5
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7fc fa13 	bl	80011b8 <AddChecksumm8bVma>
}
 8004d92:	bf00      	nop
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20001c10 	.word	0x20001c10

08004da0 <fillThrustersResponse>:

void fillThrustersResponse(uint8_t *buf, uint8_t thruster)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	460b      	mov	r3, r1
 8004daa:	70fb      	strb	r3, [r7, #3]
	//TODO errors parsing! and what is all this new stuff means
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 8004dac:	2109      	movs	r1, #9
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fc f9d5 	bl	800115e <IsChecksumm8bCorrectVma>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d01f      	beq.n	8004dfa <fillThrustersResponse+0x5a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d01b      	beq.n	8004dfa <fillThrustersResponse+0x5a>
    	struct thrustersResponse_s res;
    	memcpy((void*)&res, (void*)buf, THRUSTERS_RESPONSE_LENGTH);
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	f107 030c 	add.w	r3, r7, #12
 8004dc8:	6810      	ldr	r0, [r2, #0]
 8004dca:	6851      	ldr	r1, [r2, #4]
 8004dcc:	c303      	stmia	r3!, {r0, r1}
 8004dce:	7a12      	ldrb	r2, [r2, #8]
 8004dd0:	701a      	strb	r2, [r3, #0]

        rThrusters[thruster].current = res.current;
 8004dd2:	78fa      	ldrb	r2, [r7, #3]
 8004dd4:	8a38      	ldrh	r0, [r7, #16]
 8004dd6:	490e      	ldr	r1, [pc, #56]	; (8004e10 <fillThrustersResponse+0x70>)
 8004dd8:	4613      	mov	r3, r2
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	4413      	add	r3, r2
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	440b      	add	r3, r1
 8004de2:	3304      	adds	r3, #4
 8004de4:	4602      	mov	r2, r0
 8004de6:	801a      	strh	r2, [r3, #0]

        ++uartBus[THRUSTERS_UART].successRxCounter;
 8004de8:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <fillThrustersResponse+0x74>)
 8004dea:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8004dee:	3301      	adds	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <fillThrustersResponse+0x74>)
 8004df4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 8004df8:	e005      	b.n	8004e06 <fillThrustersResponse+0x66>
    }
    else {
    	++uartBus[THRUSTERS_UART].brokenRxCounter;
 8004dfa:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <fillThrustersResponse+0x74>)
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfe:	3301      	adds	r3, #1
 8004e00:	4a04      	ldr	r2, [pc, #16]	; (8004e14 <fillThrustersResponse+0x74>)
 8004e02:	6453      	str	r3, [r2, #68]	; 0x44
    }
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20001c10 	.word	0x20001c10
 8004e14:	200000ec 	.word	0x200000ec

08004e18 <formThrustVectors>:

void formThrustVectors()
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08a      	sub	sp, #40	; 0x28
 8004e1c:	af00      	add	r7, sp, #0
	float velocity[THRUSTERS_NUMBER];
	for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e24:	e00d      	b.n	8004e42 <formThrustVectors+0x2a>
		velocity[i] = 0;
 8004e26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	3328      	adds	r3, #40	; 0x28
 8004e2e:	443b      	add	r3, r7
 8004e30:	3b24      	subs	r3, #36	; 0x24
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8004e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e46:	2b07      	cmp	r3, #7
 8004e48:	d9ed      	bls.n	8004e26 <formThrustVectors+0xe>
	}
	// March thrusters1
	addMarchToSumm(velocity);
 8004e4a:	1d3b      	adds	r3, r7, #4
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 f841 	bl	8004ed4 <addMarchToSumm>
	// Lag Thrusters
	addYawToSumm(velocity);
 8004e52:	1d3b      	adds	r3, r7, #4
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 f8ed 	bl	8005034 <addYawToSumm>
	addLagToSumm(velocity);
 8004e5a:	1d3b      	adds	r3, r7, #4
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 f87b 	bl	8004f58 <addLagToSumm>
	// Two vertical thrusters
	addDepthToSumm(velocity);
 8004e62:	1d3b      	adds	r3, r7, #4
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 f8af 	bl	8004fc8 <addDepthToSumm>
	addRollToSumm(velocity);
 8004e6a:	1d3b      	adds	r3, r7, #4
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 f919 	bl	80050a4 <addRollToSumm>
	// One vertical corrective thruster
	addPitchToSumm(velocity);
 8004e72:	1d3b      	adds	r3, r7, #4
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 f943 	bl	8005100 <addPitchToSumm>

	for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i) {
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004e80:	e01d      	b.n	8004ebe <formThrustVectors+0xa6>
		rThrusters[i].desiredSpeed = resizeFloatToUint8(velocity[i]);
 8004e82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	3328      	adds	r3, #40	; 0x28
 8004e8a:	443b      	add	r3, r7
 8004e8c:	3b24      	subs	r3, #36	; 0x24
 8004e8e:	edd3 7a00 	vldr	s15, [r3]
 8004e92:	eeb0 0a67 	vmov.f32	s0, s15
 8004e96:	f000 f9a5 	bl	80051e4 <resizeFloatToUint8>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004ea0:	b258      	sxtb	r0, r3
 8004ea2:	490b      	ldr	r1, [pc, #44]	; (8004ed0 <formThrustVectors+0xb8>)
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	4413      	add	r3, r2
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	440b      	add	r3, r1
 8004eae:	3302      	adds	r3, #2
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i) {
 8004eb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004eb8:	3301      	adds	r3, #1
 8004eba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004ebe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ec2:	2b07      	cmp	r3, #7
 8004ec4:	d9dd      	bls.n	8004e82 <formThrustVectors+0x6a>
	}
}
 8004ec6:	bf00      	nop
 8004ec8:	bf00      	nop
 8004eca:	3728      	adds	r7, #40	; 0x28
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	20001c10 	.word	0x20001c10

08004ed4 <addMarchToSumm>:

void addMarchToSumm(float *velocity)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
	float value = 0;
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_MARCH].enable) {
 8004ee2:	4b1a      	ldr	r3, [pc, #104]	; (8004f4c <addMarchToSumm+0x78>)
 8004ee4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d004      	beq.n	8004ef6 <addMarchToSumm+0x22>
		value = rStabState[STAB_MARCH].outputSignal;
 8004eec:	4b18      	ldr	r3, [pc, #96]	; (8004f50 <addMarchToSumm+0x7c>)
 8004eee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	e002      	b.n	8004efc <addMarchToSumm+0x28>
	}
	else {
		value = rJoySpeed.march;
 8004ef6:	4b17      	ldr	r3, [pc, #92]	; (8004f54 <addMarchToSumm+0x80>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]
	}
	// March contour summ
	velocity[MarshLEFT] += value;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	ed93 7a00 	vldr	s14, [r3]
 8004f02:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	edc3 7a00 	vstr	s15, [r3]
	velocity[MarshRIGHT] += value;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3304      	adds	r3, #4
 8004f14:	ed93 7a00 	vldr	s14, [r3]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f24:	edc3 7a00 	vstr	s15, [r3]
	velocity[MarshDown] += value;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	331c      	adds	r3, #28
 8004f2c:	ed93 7a00 	vldr	s14, [r3]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	331c      	adds	r3, #28
 8004f34:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f3c:	edc3 7a00 	vstr	s15, [r3]
//		}
//		else if(velocity[i] < rStabConstants[STAB_MARCH].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_MARCH].sOutSummatorMin;
//		}
//	}
}
 8004f40:	bf00      	nop
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	20001d94 	.word	0x20001d94
 8004f50:	20001f44 	.word	0x20001f44
 8004f54:	20001d3c 	.word	0x20001d3c

08004f58 <addLagToSumm>:

void addLagToSumm(float *velocity)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
	float value = 0;
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_LAG].enable) {
 8004f66:	4b15      	ldr	r3, [pc, #84]	; (8004fbc <addLagToSumm+0x64>)
 8004f68:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d004      	beq.n	8004f7a <addLagToSumm+0x22>
		value = rStabState[STAB_LAG].outputSignal;
 8004f70:	4b13      	ldr	r3, [pc, #76]	; (8004fc0 <addLagToSumm+0x68>)
 8004f72:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	e002      	b.n	8004f80 <addLagToSumm+0x28>
	}
	else {
		value = rJoySpeed.lag;
 8004f7a:	4b12      	ldr	r3, [pc, #72]	; (8004fc4 <addLagToSumm+0x6c>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	60fb      	str	r3, [r7, #12]
	}
	// Lag contour summ
	velocity[Lag1st] += value;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3314      	adds	r3, #20
 8004f84:	ed93 7a00 	vldr	s14, [r3]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3314      	adds	r3, #20
 8004f8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f94:	edc3 7a00 	vstr	s15, [r3]
	velocity[Lag2nd] += value;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3318      	adds	r3, #24
 8004f9c:	ed93 7a00 	vldr	s14, [r3]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3318      	adds	r3, #24
 8004fa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fac:	edc3 7a00 	vstr	s15, [r3]
//		}
//		else if(velocity[i] < rStabConstants[STAB_LAG].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_LAG].sOutSummatorMin;
//		}
//	}
}
 8004fb0:	bf00      	nop
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	20001d94 	.word	0x20001d94
 8004fc0:	20001f44 	.word	0x20001f44
 8004fc4:	20001d3c 	.word	0x20001d3c

08004fc8 <addDepthToSumm>:

void addDepthToSumm(float *velocity)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
	float value = 0;
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_DEPTH].enable) {
 8004fd6:	4b14      	ldr	r3, [pc, #80]	; (8005028 <addDepthToSumm+0x60>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <addDepthToSumm+0x1e>
		value = rStabState[STAB_DEPTH].outputSignal;
 8004fde:	4b13      	ldr	r3, [pc, #76]	; (800502c <addDepthToSumm+0x64>)
 8004fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	e002      	b.n	8004fec <addDepthToSumm+0x24>
	}
	else {
		value = rJoySpeed.depth;
 8004fe6:	4b12      	ldr	r3, [pc, #72]	; (8005030 <addDepthToSumm+0x68>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	60fb      	str	r3, [r7, #12]
	}
	// Depth contour summ
	//velocity[VertBACK] -= value;
	velocity[VertLEFT] -= value;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3308      	adds	r3, #8
 8004ff0:	ed93 7a00 	vldr	s14, [r3]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3308      	adds	r3, #8
 8004ff8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005000:	edc3 7a00 	vstr	s15, [r3]
	velocity[VertRIGHT] -= value;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	330c      	adds	r3, #12
 8005008:	ed93 7a00 	vldr	s14, [r3]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	330c      	adds	r3, #12
 8005010:	edd7 7a03 	vldr	s15, [r7, #12]
 8005014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005018:	edc3 7a00 	vstr	s15, [r3]
//		}
//		else if(velocity[i] < rStabConstants[STAB_DEPTH].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_DEPTH].sOutSummatorMin;
//		}
//	}
}
 800501c:	bf00      	nop
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	20001d94 	.word	0x20001d94
 800502c:	20001f44 	.word	0x20001f44
 8005030:	20001d3c 	.word	0x20001d3c

08005034 <addYawToSumm>:

void addYawToSumm(float *velocity)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
	float value = 0;
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_YAW].enable) {
 8005042:	4b15      	ldr	r3, [pc, #84]	; (8005098 <addYawToSumm+0x64>)
 8005044:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8005048:	2b00      	cmp	r3, #0
 800504a:	d004      	beq.n	8005056 <addYawToSumm+0x22>
		value = rStabState[STAB_YAW].outputSignal;
 800504c:	4b13      	ldr	r3, [pc, #76]	; (800509c <addYawToSumm+0x68>)
 800504e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	e002      	b.n	800505c <addYawToSumm+0x28>
	}
	else {
		value = rJoySpeed.yaw;
 8005056:	4b12      	ldr	r3, [pc, #72]	; (80050a0 <addYawToSumm+0x6c>)
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	60fb      	str	r3, [r7, #12]
	}
	// Yaw contour summ
//	velocity[MarshLEFT] += value;
//	velocity[MarshRIGHT] -= value;
	velocity[Lag1st] += value;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3314      	adds	r3, #20
 8005060:	ed93 7a00 	vldr	s14, [r3]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3314      	adds	r3, #20
 8005068:	edd7 7a03 	vldr	s15, [r7, #12]
 800506c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005070:	edc3 7a00 	vstr	s15, [r3]
	velocity[Lag2nd] -= value;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3318      	adds	r3, #24
 8005078:	ed93 7a00 	vldr	s14, [r3]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3318      	adds	r3, #24
 8005080:	edd7 7a03 	vldr	s15, [r7, #12]
 8005084:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005088:	edc3 7a00 	vstr	s15, [r3]
//		}
//		else if(velocity[i] < rStabConstants[STAB_YAW].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_YAW].sOutSummatorMin;
//		}
//	}
}
 800508c:	bf00      	nop
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	20001d94 	.word	0x20001d94
 800509c:	20001f44 	.word	0x20001f44
 80050a0:	20001d3c 	.word	0x20001d3c

080050a4 <addRollToSumm>:

void addRollToSumm(float *velocity)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	float value = 0;
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_ROLL].enable) {
 80050b2:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <addRollToSumm+0x4c>)
 80050b4:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d004      	beq.n	80050c6 <addRollToSumm+0x22>
		value = rStabState[STAB_ROLL].outputSignal;
 80050bc:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <addRollToSumm+0x50>)
 80050be:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	e002      	b.n	80050cc <addRollToSumm+0x28>
	}
	else {
		value = rJoySpeed.roll;
 80050c6:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <addRollToSumm+0x54>)
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	60fb      	str	r3, [r7, #12]
	}
	// Yaw contour summ
	velocity[VertBACK] += value;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3310      	adds	r3, #16
 80050d0:	ed93 7a00 	vldr	s14, [r3]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3310      	adds	r3, #16
 80050d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80050dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050e0:	edc3 7a00 	vstr	s15, [r3]
//		}
//		else if(velocity[i] < rStabConstants[STAB_ROLL].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_ROLL].sOutSummatorMin;
//		}
//	}
}
 80050e4:	bf00      	nop
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	20001d94 	.word	0x20001d94
 80050f4:	20001f44 	.word	0x20001f44
 80050f8:	20001d3c 	.word	0x20001d3c
 80050fc:	00000000 	.word	0x00000000

08005100 <addPitchToSumm>:

void addPitchToSumm(float *velocity)
{
 8005100:	b5b0      	push	{r4, r5, r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	float value = 0;
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_PITCH].enable) {
 800510e:	4b32      	ldr	r3, [pc, #200]	; (80051d8 <addPitchToSumm+0xd8>)
 8005110:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8005114:	2b00      	cmp	r3, #0
 8005116:	d004      	beq.n	8005122 <addPitchToSumm+0x22>
		value = rStabState[STAB_PITCH].outputSignal;
 8005118:	4b30      	ldr	r3, [pc, #192]	; (80051dc <addPitchToSumm+0xdc>)
 800511a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	e002      	b.n	8005128 <addPitchToSumm+0x28>
	}
	else {
		value = rJoySpeed.pitch;
 8005122:	4b2f      	ldr	r3, [pc, #188]	; (80051e0 <addPitchToSumm+0xe0>)
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	60fb      	str	r3, [r7, #12]
	}
	velocity[VertBACK] += value;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3310      	adds	r3, #16
 800512c:	ed93 7a00 	vldr	s14, [r3]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3310      	adds	r3, #16
 8005134:	edd7 7a03 	vldr	s15, [r7, #12]
 8005138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800513c:	edc3 7a00 	vstr	s15, [r3]

	velocity[VertLEFT] -= 0.4*value;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3308      	adds	r3, #8
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f7fb f9a6 	bl	8000498 <__aeabi_f2d>
 800514c:	4604      	mov	r4, r0
 800514e:	460d      	mov	r5, r1
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f7fb f9a1 	bl	8000498 <__aeabi_f2d>
 8005156:	a31e      	add	r3, pc, #120	; (adr r3, 80051d0 <addPitchToSumm+0xd0>)
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f7fb f9f4 	bl	8000548 <__aeabi_dmul>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4620      	mov	r0, r4
 8005166:	4629      	mov	r1, r5
 8005168:	f7fb f836 	bl	80001d8 <__aeabi_dsub>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4610      	mov	r0, r2
 8005172:	4619      	mov	r1, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f103 0408 	add.w	r4, r3, #8
 800517a:	f7fb fca7 	bl	8000acc <__aeabi_d2f>
 800517e:	4603      	mov	r3, r0
 8005180:	6023      	str	r3, [r4, #0]
	velocity[VertRIGHT] -= 0.4*value;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	330c      	adds	r3, #12
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f7fb f985 	bl	8000498 <__aeabi_f2d>
 800518e:	4604      	mov	r4, r0
 8005190:	460d      	mov	r5, r1
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f7fb f980 	bl	8000498 <__aeabi_f2d>
 8005198:	a30d      	add	r3, pc, #52	; (adr r3, 80051d0 <addPitchToSumm+0xd0>)
 800519a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519e:	f7fb f9d3 	bl	8000548 <__aeabi_dmul>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4620      	mov	r0, r4
 80051a8:	4629      	mov	r1, r5
 80051aa:	f7fb f815 	bl	80001d8 <__aeabi_dsub>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4610      	mov	r0, r2
 80051b4:	4619      	mov	r1, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f103 040c 	add.w	r4, r3, #12
 80051bc:	f7fb fc86 	bl	8000acc <__aeabi_d2f>
 80051c0:	4603      	mov	r3, r0
 80051c2:	6023      	str	r3, [r4, #0]
//		}
//		else if(velocity[i] < rStabConstants[STAB_PITCH].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_PITCH].sOutSummatorMin;
//		}
//	}
}
 80051c4:	bf00      	nop
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bdb0      	pop	{r4, r5, r7, pc}
 80051cc:	f3af 8000 	nop.w
 80051d0:	9999999a 	.word	0x9999999a
 80051d4:	3fd99999 	.word	0x3fd99999
 80051d8:	20001d94 	.word	0x20001d94
 80051dc:	20001f44 	.word	0x20001f44
 80051e0:	20001d3c 	.word	0x20001d3c

080051e4 <resizeFloatToUint8>:

uint8_t resizeFloatToUint8(float input)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	ed87 0a01 	vstr	s0, [r7, #4]
	int32_t cast = (int32_t) input;
 80051ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80051f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051f6:	ee17 3a90 	vmov	r3, s15
 80051fa:	60fb      	str	r3, [r7, #12]
	cast = cast / 0xFF;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4a0e      	ldr	r2, [pc, #56]	; (8005238 <resizeFloatToUint8+0x54>)
 8005200:	fb82 1203 	smull	r1, r2, r2, r3
 8005204:	441a      	add	r2, r3
 8005206:	11d2      	asrs	r2, r2, #7
 8005208:	17db      	asrs	r3, r3, #31
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	60fb      	str	r3, [r7, #12]
	if (cast > 127) {
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b7f      	cmp	r3, #127	; 0x7f
 8005212:	dd02      	ble.n	800521a <resizeFloatToUint8+0x36>
		cast = 127;
 8005214:	237f      	movs	r3, #127	; 0x7f
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	e006      	b.n	8005228 <resizeFloatToUint8+0x44>
	}
	else if(cast < -127) {
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8005220:	da02      	bge.n	8005228 <resizeFloatToUint8+0x44>
		cast = -127;
 8005222:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8005226:	60fb      	str	r3, [r7, #12]
	}
	return (int8_t) cast;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	b2db      	uxtb	r3, r3
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	80808081 	.word	0x80808081

0800523c <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005242:	463b      	mov	r3, r7
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800524a:	4b14      	ldr	r3, [pc, #80]	; (800529c <MX_TIM7_Init+0x60>)
 800524c:	4a14      	ldr	r2, [pc, #80]	; (80052a0 <MX_TIM7_Init+0x64>)
 800524e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8005250:	4b12      	ldr	r3, [pc, #72]	; (800529c <MX_TIM7_Init+0x60>)
 8005252:	2200      	movs	r2, #0
 8005254:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005256:	4b11      	ldr	r3, [pc, #68]	; (800529c <MX_TIM7_Init+0x60>)
 8005258:	2200      	movs	r2, #0
 800525a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 800525c:	4b0f      	ldr	r3, [pc, #60]	; (800529c <MX_TIM7_Init+0x60>)
 800525e:	2200      	movs	r2, #0
 8005260:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005262:	4b0e      	ldr	r3, [pc, #56]	; (800529c <MX_TIM7_Init+0x60>)
 8005264:	2200      	movs	r2, #0
 8005266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005268:	480c      	ldr	r0, [pc, #48]	; (800529c <MX_TIM7_Init+0x60>)
 800526a:	f004 fa4b 	bl	8009704 <HAL_TIM_Base_Init>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8005274:	f7fe fc4d 	bl	8003b12 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005278:	2300      	movs	r3, #0
 800527a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800527c:	2300      	movs	r3, #0
 800527e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005280:	463b      	mov	r3, r7
 8005282:	4619      	mov	r1, r3
 8005284:	4805      	ldr	r0, [pc, #20]	; (800529c <MX_TIM7_Init+0x60>)
 8005286:	f004 fccd 	bl	8009c24 <HAL_TIMEx_MasterConfigSynchronization>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8005290:	f7fe fc3f 	bl	8003b12 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005294:	bf00      	nop
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	2000237c 	.word	0x2000237c
 80052a0:	40001400 	.word	0x40001400

080052a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a0b      	ldr	r2, [pc, #44]	; (80052e0 <HAL_TIM_Base_MspInit+0x3c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d10d      	bne.n	80052d2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <HAL_TIM_Base_MspInit+0x40>)
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	4a09      	ldr	r2, [pc, #36]	; (80052e4 <HAL_TIM_Base_MspInit+0x40>)
 80052c0:	f043 0320 	orr.w	r3, r3, #32
 80052c4:	6413      	str	r3, [r2, #64]	; 0x40
 80052c6:	4b07      	ldr	r3, [pc, #28]	; (80052e4 <HAL_TIM_Base_MspInit+0x40>)
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80052d2:	bf00      	nop
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40001400 	.word	0x40001400
 80052e4:	40023800 	.word	0x40023800

080052e8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80052ec:	4b11      	ldr	r3, [pc, #68]	; (8005334 <MX_USART1_UART_Init+0x4c>)
 80052ee:	4a12      	ldr	r2, [pc, #72]	; (8005338 <MX_USART1_UART_Init+0x50>)
 80052f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80052f2:	4b10      	ldr	r3, [pc, #64]	; (8005334 <MX_USART1_UART_Init+0x4c>)
 80052f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80052f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80052fa:	4b0e      	ldr	r3, [pc, #56]	; (8005334 <MX_USART1_UART_Init+0x4c>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005300:	4b0c      	ldr	r3, [pc, #48]	; (8005334 <MX_USART1_UART_Init+0x4c>)
 8005302:	2200      	movs	r2, #0
 8005304:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005306:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <MX_USART1_UART_Init+0x4c>)
 8005308:	2200      	movs	r2, #0
 800530a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800530c:	4b09      	ldr	r3, [pc, #36]	; (8005334 <MX_USART1_UART_Init+0x4c>)
 800530e:	220c      	movs	r2, #12
 8005310:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005312:	4b08      	ldr	r3, [pc, #32]	; (8005334 <MX_USART1_UART_Init+0x4c>)
 8005314:	2200      	movs	r2, #0
 8005316:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005318:	4b06      	ldr	r3, [pc, #24]	; (8005334 <MX_USART1_UART_Init+0x4c>)
 800531a:	2200      	movs	r2, #0
 800531c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800531e:	4805      	ldr	r0, [pc, #20]	; (8005334 <MX_USART1_UART_Init+0x4c>)
 8005320:	f004 fd10 	bl	8009d44 <HAL_UART_Init>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800532a:	f7fe fbf2 	bl	8003b12 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800532e:	bf00      	nop
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	200023c4 	.word	0x200023c4
 8005338:	40011000 	.word	0x40011000

0800533c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005340:	4b11      	ldr	r3, [pc, #68]	; (8005388 <MX_USART2_UART_Init+0x4c>)
 8005342:	4a12      	ldr	r2, [pc, #72]	; (800538c <MX_USART2_UART_Init+0x50>)
 8005344:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005346:	4b10      	ldr	r3, [pc, #64]	; (8005388 <MX_USART2_UART_Init+0x4c>)
 8005348:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800534c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800534e:	4b0e      	ldr	r3, [pc, #56]	; (8005388 <MX_USART2_UART_Init+0x4c>)
 8005350:	2200      	movs	r2, #0
 8005352:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005354:	4b0c      	ldr	r3, [pc, #48]	; (8005388 <MX_USART2_UART_Init+0x4c>)
 8005356:	2200      	movs	r2, #0
 8005358:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800535a:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <MX_USART2_UART_Init+0x4c>)
 800535c:	2200      	movs	r2, #0
 800535e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005360:	4b09      	ldr	r3, [pc, #36]	; (8005388 <MX_USART2_UART_Init+0x4c>)
 8005362:	220c      	movs	r2, #12
 8005364:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005366:	4b08      	ldr	r3, [pc, #32]	; (8005388 <MX_USART2_UART_Init+0x4c>)
 8005368:	2200      	movs	r2, #0
 800536a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800536c:	4b06      	ldr	r3, [pc, #24]	; (8005388 <MX_USART2_UART_Init+0x4c>)
 800536e:	2200      	movs	r2, #0
 8005370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005372:	4805      	ldr	r0, [pc, #20]	; (8005388 <MX_USART2_UART_Init+0x4c>)
 8005374:	f004 fce6 	bl	8009d44 <HAL_UART_Init>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800537e:	f7fe fbc8 	bl	8003b12 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005382:	bf00      	nop
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20002408 	.word	0x20002408
 800538c:	40004400 	.word	0x40004400

08005390 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005394:	4b11      	ldr	r3, [pc, #68]	; (80053dc <MX_USART3_UART_Init+0x4c>)
 8005396:	4a12      	ldr	r2, [pc, #72]	; (80053e0 <MX_USART3_UART_Init+0x50>)
 8005398:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 800539a:	4b10      	ldr	r3, [pc, #64]	; (80053dc <MX_USART3_UART_Init+0x4c>)
 800539c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80053a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80053a2:	4b0e      	ldr	r3, [pc, #56]	; (80053dc <MX_USART3_UART_Init+0x4c>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80053a8:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <MX_USART3_UART_Init+0x4c>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80053ae:	4b0b      	ldr	r3, [pc, #44]	; (80053dc <MX_USART3_UART_Init+0x4c>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80053b4:	4b09      	ldr	r3, [pc, #36]	; (80053dc <MX_USART3_UART_Init+0x4c>)
 80053b6:	220c      	movs	r2, #12
 80053b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053ba:	4b08      	ldr	r3, [pc, #32]	; (80053dc <MX_USART3_UART_Init+0x4c>)
 80053bc:	2200      	movs	r2, #0
 80053be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80053c0:	4b06      	ldr	r3, [pc, #24]	; (80053dc <MX_USART3_UART_Init+0x4c>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80053c6:	4805      	ldr	r0, [pc, #20]	; (80053dc <MX_USART3_UART_Init+0x4c>)
 80053c8:	f004 fcbc 	bl	8009d44 <HAL_UART_Init>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80053d2:	f7fe fb9e 	bl	8003b12 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80053d6:	bf00      	nop
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	2000244c 	.word	0x2000244c
 80053e0:	40004800 	.word	0x40004800

080053e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08e      	sub	sp, #56	; 0x38
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	605a      	str	r2, [r3, #4]
 80053f6:	609a      	str	r2, [r3, #8]
 80053f8:	60da      	str	r2, [r3, #12]
 80053fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a98      	ldr	r2, [pc, #608]	; (8005664 <HAL_UART_MspInit+0x280>)
 8005402:	4293      	cmp	r3, r2
 8005404:	f040 8094 	bne.w	8005530 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005408:	2300      	movs	r3, #0
 800540a:	623b      	str	r3, [r7, #32]
 800540c:	4b96      	ldr	r3, [pc, #600]	; (8005668 <HAL_UART_MspInit+0x284>)
 800540e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005410:	4a95      	ldr	r2, [pc, #596]	; (8005668 <HAL_UART_MspInit+0x284>)
 8005412:	f043 0310 	orr.w	r3, r3, #16
 8005416:	6453      	str	r3, [r2, #68]	; 0x44
 8005418:	4b93      	ldr	r3, [pc, #588]	; (8005668 <HAL_UART_MspInit+0x284>)
 800541a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541c:	f003 0310 	and.w	r3, r3, #16
 8005420:	623b      	str	r3, [r7, #32]
 8005422:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005424:	2300      	movs	r3, #0
 8005426:	61fb      	str	r3, [r7, #28]
 8005428:	4b8f      	ldr	r3, [pc, #572]	; (8005668 <HAL_UART_MspInit+0x284>)
 800542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542c:	4a8e      	ldr	r2, [pc, #568]	; (8005668 <HAL_UART_MspInit+0x284>)
 800542e:	f043 0301 	orr.w	r3, r3, #1
 8005432:	6313      	str	r3, [r2, #48]	; 0x30
 8005434:	4b8c      	ldr	r3, [pc, #560]	; (8005668 <HAL_UART_MspInit+0x284>)
 8005436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	61fb      	str	r3, [r7, #28]
 800543e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005440:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005446:	2302      	movs	r3, #2
 8005448:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800544a:	2300      	movs	r3, #0
 800544c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800544e:	2303      	movs	r3, #3
 8005450:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005452:	2307      	movs	r3, #7
 8005454:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800545a:	4619      	mov	r1, r3
 800545c:	4883      	ldr	r0, [pc, #524]	; (800566c <HAL_UART_MspInit+0x288>)
 800545e:	f001 fd53 	bl	8006f08 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8005462:	4b83      	ldr	r3, [pc, #524]	; (8005670 <HAL_UART_MspInit+0x28c>)
 8005464:	4a83      	ldr	r2, [pc, #524]	; (8005674 <HAL_UART_MspInit+0x290>)
 8005466:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005468:	4b81      	ldr	r3, [pc, #516]	; (8005670 <HAL_UART_MspInit+0x28c>)
 800546a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800546e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005470:	4b7f      	ldr	r3, [pc, #508]	; (8005670 <HAL_UART_MspInit+0x28c>)
 8005472:	2200      	movs	r2, #0
 8005474:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005476:	4b7e      	ldr	r3, [pc, #504]	; (8005670 <HAL_UART_MspInit+0x28c>)
 8005478:	2200      	movs	r2, #0
 800547a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800547c:	4b7c      	ldr	r3, [pc, #496]	; (8005670 <HAL_UART_MspInit+0x28c>)
 800547e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005482:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005484:	4b7a      	ldr	r3, [pc, #488]	; (8005670 <HAL_UART_MspInit+0x28c>)
 8005486:	2200      	movs	r2, #0
 8005488:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800548a:	4b79      	ldr	r3, [pc, #484]	; (8005670 <HAL_UART_MspInit+0x28c>)
 800548c:	2200      	movs	r2, #0
 800548e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005490:	4b77      	ldr	r3, [pc, #476]	; (8005670 <HAL_UART_MspInit+0x28c>)
 8005492:	2200      	movs	r2, #0
 8005494:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005496:	4b76      	ldr	r3, [pc, #472]	; (8005670 <HAL_UART_MspInit+0x28c>)
 8005498:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800549c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800549e:	4b74      	ldr	r3, [pc, #464]	; (8005670 <HAL_UART_MspInit+0x28c>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80054a4:	4872      	ldr	r0, [pc, #456]	; (8005670 <HAL_UART_MspInit+0x28c>)
 80054a6:	f000 fe47 	bl	8006138 <HAL_DMA_Init>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80054b0:	f7fe fb2f 	bl	8003b12 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a6e      	ldr	r2, [pc, #440]	; (8005670 <HAL_UART_MspInit+0x28c>)
 80054b8:	639a      	str	r2, [r3, #56]	; 0x38
 80054ba:	4a6d      	ldr	r2, [pc, #436]	; (8005670 <HAL_UART_MspInit+0x28c>)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80054c0:	4b6d      	ldr	r3, [pc, #436]	; (8005678 <HAL_UART_MspInit+0x294>)
 80054c2:	4a6e      	ldr	r2, [pc, #440]	; (800567c <HAL_UART_MspInit+0x298>)
 80054c4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80054c6:	4b6c      	ldr	r3, [pc, #432]	; (8005678 <HAL_UART_MspInit+0x294>)
 80054c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80054cc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80054ce:	4b6a      	ldr	r3, [pc, #424]	; (8005678 <HAL_UART_MspInit+0x294>)
 80054d0:	2240      	movs	r2, #64	; 0x40
 80054d2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054d4:	4b68      	ldr	r3, [pc, #416]	; (8005678 <HAL_UART_MspInit+0x294>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80054da:	4b67      	ldr	r3, [pc, #412]	; (8005678 <HAL_UART_MspInit+0x294>)
 80054dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054e0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054e2:	4b65      	ldr	r3, [pc, #404]	; (8005678 <HAL_UART_MspInit+0x294>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054e8:	4b63      	ldr	r3, [pc, #396]	; (8005678 <HAL_UART_MspInit+0x294>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80054ee:	4b62      	ldr	r3, [pc, #392]	; (8005678 <HAL_UART_MspInit+0x294>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80054f4:	4b60      	ldr	r3, [pc, #384]	; (8005678 <HAL_UART_MspInit+0x294>)
 80054f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054fa:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054fc:	4b5e      	ldr	r3, [pc, #376]	; (8005678 <HAL_UART_MspInit+0x294>)
 80054fe:	2200      	movs	r2, #0
 8005500:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005502:	485d      	ldr	r0, [pc, #372]	; (8005678 <HAL_UART_MspInit+0x294>)
 8005504:	f000 fe18 	bl	8006138 <HAL_DMA_Init>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800550e:	f7fe fb00 	bl	8003b12 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a58      	ldr	r2, [pc, #352]	; (8005678 <HAL_UART_MspInit+0x294>)
 8005516:	635a      	str	r2, [r3, #52]	; 0x34
 8005518:	4a57      	ldr	r2, [pc, #348]	; (8005678 <HAL_UART_MspInit+0x294>)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800551e:	2200      	movs	r2, #0
 8005520:	2105      	movs	r1, #5
 8005522:	2025      	movs	r0, #37	; 0x25
 8005524:	f000 fdde 	bl	80060e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005528:	2025      	movs	r0, #37	; 0x25
 800552a:	f000 fdf7 	bl	800611c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800552e:	e14a      	b.n	80057c6 <HAL_UART_MspInit+0x3e2>
  else if(uartHandle->Instance==USART2)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a52      	ldr	r2, [pc, #328]	; (8005680 <HAL_UART_MspInit+0x29c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	f040 80ac 	bne.w	8005694 <HAL_UART_MspInit+0x2b0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800553c:	2300      	movs	r3, #0
 800553e:	61bb      	str	r3, [r7, #24]
 8005540:	4b49      	ldr	r3, [pc, #292]	; (8005668 <HAL_UART_MspInit+0x284>)
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	4a48      	ldr	r2, [pc, #288]	; (8005668 <HAL_UART_MspInit+0x284>)
 8005546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800554a:	6413      	str	r3, [r2, #64]	; 0x40
 800554c:	4b46      	ldr	r3, [pc, #280]	; (8005668 <HAL_UART_MspInit+0x284>)
 800554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005554:	61bb      	str	r3, [r7, #24]
 8005556:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	4b42      	ldr	r3, [pc, #264]	; (8005668 <HAL_UART_MspInit+0x284>)
 800555e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005560:	4a41      	ldr	r2, [pc, #260]	; (8005668 <HAL_UART_MspInit+0x284>)
 8005562:	f043 0301 	orr.w	r3, r3, #1
 8005566:	6313      	str	r3, [r2, #48]	; 0x30
 8005568:	4b3f      	ldr	r3, [pc, #252]	; (8005668 <HAL_UART_MspInit+0x284>)
 800556a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	617b      	str	r3, [r7, #20]
 8005572:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005574:	230c      	movs	r3, #12
 8005576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005578:	2302      	movs	r3, #2
 800557a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557c:	2300      	movs	r3, #0
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005580:	2303      	movs	r3, #3
 8005582:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005584:	2307      	movs	r3, #7
 8005586:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800558c:	4619      	mov	r1, r3
 800558e:	4837      	ldr	r0, [pc, #220]	; (800566c <HAL_UART_MspInit+0x288>)
 8005590:	f001 fcba 	bl	8006f08 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005594:	4b3b      	ldr	r3, [pc, #236]	; (8005684 <HAL_UART_MspInit+0x2a0>)
 8005596:	4a3c      	ldr	r2, [pc, #240]	; (8005688 <HAL_UART_MspInit+0x2a4>)
 8005598:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800559a:	4b3a      	ldr	r3, [pc, #232]	; (8005684 <HAL_UART_MspInit+0x2a0>)
 800559c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80055a0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055a2:	4b38      	ldr	r3, [pc, #224]	; (8005684 <HAL_UART_MspInit+0x2a0>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055a8:	4b36      	ldr	r3, [pc, #216]	; (8005684 <HAL_UART_MspInit+0x2a0>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055ae:	4b35      	ldr	r3, [pc, #212]	; (8005684 <HAL_UART_MspInit+0x2a0>)
 80055b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055b6:	4b33      	ldr	r3, [pc, #204]	; (8005684 <HAL_UART_MspInit+0x2a0>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055bc:	4b31      	ldr	r3, [pc, #196]	; (8005684 <HAL_UART_MspInit+0x2a0>)
 80055be:	2200      	movs	r2, #0
 80055c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80055c2:	4b30      	ldr	r3, [pc, #192]	; (8005684 <HAL_UART_MspInit+0x2a0>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80055c8:	4b2e      	ldr	r3, [pc, #184]	; (8005684 <HAL_UART_MspInit+0x2a0>)
 80055ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055ce:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055d0:	4b2c      	ldr	r3, [pc, #176]	; (8005684 <HAL_UART_MspInit+0x2a0>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80055d6:	482b      	ldr	r0, [pc, #172]	; (8005684 <HAL_UART_MspInit+0x2a0>)
 80055d8:	f000 fdae 	bl	8006138 <HAL_DMA_Init>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <HAL_UART_MspInit+0x202>
      Error_Handler();
 80055e2:	f7fe fa96 	bl	8003b12 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a26      	ldr	r2, [pc, #152]	; (8005684 <HAL_UART_MspInit+0x2a0>)
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38
 80055ec:	4a25      	ldr	r2, [pc, #148]	; (8005684 <HAL_UART_MspInit+0x2a0>)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80055f2:	4b26      	ldr	r3, [pc, #152]	; (800568c <HAL_UART_MspInit+0x2a8>)
 80055f4:	4a26      	ldr	r2, [pc, #152]	; (8005690 <HAL_UART_MspInit+0x2ac>)
 80055f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80055f8:	4b24      	ldr	r3, [pc, #144]	; (800568c <HAL_UART_MspInit+0x2a8>)
 80055fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80055fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005600:	4b22      	ldr	r3, [pc, #136]	; (800568c <HAL_UART_MspInit+0x2a8>)
 8005602:	2240      	movs	r2, #64	; 0x40
 8005604:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005606:	4b21      	ldr	r3, [pc, #132]	; (800568c <HAL_UART_MspInit+0x2a8>)
 8005608:	2200      	movs	r2, #0
 800560a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800560c:	4b1f      	ldr	r3, [pc, #124]	; (800568c <HAL_UART_MspInit+0x2a8>)
 800560e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005612:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005614:	4b1d      	ldr	r3, [pc, #116]	; (800568c <HAL_UART_MspInit+0x2a8>)
 8005616:	2200      	movs	r2, #0
 8005618:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800561a:	4b1c      	ldr	r3, [pc, #112]	; (800568c <HAL_UART_MspInit+0x2a8>)
 800561c:	2200      	movs	r2, #0
 800561e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005620:	4b1a      	ldr	r3, [pc, #104]	; (800568c <HAL_UART_MspInit+0x2a8>)
 8005622:	2200      	movs	r2, #0
 8005624:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005626:	4b19      	ldr	r3, [pc, #100]	; (800568c <HAL_UART_MspInit+0x2a8>)
 8005628:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800562c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800562e:	4b17      	ldr	r3, [pc, #92]	; (800568c <HAL_UART_MspInit+0x2a8>)
 8005630:	2200      	movs	r2, #0
 8005632:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005634:	4815      	ldr	r0, [pc, #84]	; (800568c <HAL_UART_MspInit+0x2a8>)
 8005636:	f000 fd7f 	bl	8006138 <HAL_DMA_Init>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <HAL_UART_MspInit+0x260>
      Error_Handler();
 8005640:	f7fe fa67 	bl	8003b12 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a11      	ldr	r2, [pc, #68]	; (800568c <HAL_UART_MspInit+0x2a8>)
 8005648:	635a      	str	r2, [r3, #52]	; 0x34
 800564a:	4a10      	ldr	r2, [pc, #64]	; (800568c <HAL_UART_MspInit+0x2a8>)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005650:	2200      	movs	r2, #0
 8005652:	2105      	movs	r1, #5
 8005654:	2026      	movs	r0, #38	; 0x26
 8005656:	f000 fd45 	bl	80060e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800565a:	2026      	movs	r0, #38	; 0x26
 800565c:	f000 fd5e 	bl	800611c <HAL_NVIC_EnableIRQ>
}
 8005660:	e0b1      	b.n	80057c6 <HAL_UART_MspInit+0x3e2>
 8005662:	bf00      	nop
 8005664:	40011000 	.word	0x40011000
 8005668:	40023800 	.word	0x40023800
 800566c:	40020000 	.word	0x40020000
 8005670:	20002490 	.word	0x20002490
 8005674:	40026440 	.word	0x40026440
 8005678:	200024f0 	.word	0x200024f0
 800567c:	400264b8 	.word	0x400264b8
 8005680:	40004400 	.word	0x40004400
 8005684:	20002550 	.word	0x20002550
 8005688:	40026088 	.word	0x40026088
 800568c:	200025b0 	.word	0x200025b0
 8005690:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a4d      	ldr	r2, [pc, #308]	; (80057d0 <HAL_UART_MspInit+0x3ec>)
 800569a:	4293      	cmp	r3, r2
 800569c:	f040 8093 	bne.w	80057c6 <HAL_UART_MspInit+0x3e2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80056a0:	2300      	movs	r3, #0
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	4b4b      	ldr	r3, [pc, #300]	; (80057d4 <HAL_UART_MspInit+0x3f0>)
 80056a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a8:	4a4a      	ldr	r2, [pc, #296]	; (80057d4 <HAL_UART_MspInit+0x3f0>)
 80056aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056ae:	6413      	str	r3, [r2, #64]	; 0x40
 80056b0:	4b48      	ldr	r3, [pc, #288]	; (80057d4 <HAL_UART_MspInit+0x3f0>)
 80056b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056bc:	2300      	movs	r3, #0
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	4b44      	ldr	r3, [pc, #272]	; (80057d4 <HAL_UART_MspInit+0x3f0>)
 80056c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c4:	4a43      	ldr	r2, [pc, #268]	; (80057d4 <HAL_UART_MspInit+0x3f0>)
 80056c6:	f043 0302 	orr.w	r3, r3, #2
 80056ca:	6313      	str	r3, [r2, #48]	; 0x30
 80056cc:	4b41      	ldr	r3, [pc, #260]	; (80057d4 <HAL_UART_MspInit+0x3f0>)
 80056ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80056d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056de:	2302      	movs	r3, #2
 80056e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056e6:	2303      	movs	r3, #3
 80056e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80056ea:	2307      	movs	r3, #7
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056f2:	4619      	mov	r1, r3
 80056f4:	4838      	ldr	r0, [pc, #224]	; (80057d8 <HAL_UART_MspInit+0x3f4>)
 80056f6:	f001 fc07 	bl	8006f08 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80056fa:	4b38      	ldr	r3, [pc, #224]	; (80057dc <HAL_UART_MspInit+0x3f8>)
 80056fc:	4a38      	ldr	r2, [pc, #224]	; (80057e0 <HAL_UART_MspInit+0x3fc>)
 80056fe:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005700:	4b36      	ldr	r3, [pc, #216]	; (80057dc <HAL_UART_MspInit+0x3f8>)
 8005702:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005706:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005708:	4b34      	ldr	r3, [pc, #208]	; (80057dc <HAL_UART_MspInit+0x3f8>)
 800570a:	2200      	movs	r2, #0
 800570c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800570e:	4b33      	ldr	r3, [pc, #204]	; (80057dc <HAL_UART_MspInit+0x3f8>)
 8005710:	2200      	movs	r2, #0
 8005712:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005714:	4b31      	ldr	r3, [pc, #196]	; (80057dc <HAL_UART_MspInit+0x3f8>)
 8005716:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800571a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800571c:	4b2f      	ldr	r3, [pc, #188]	; (80057dc <HAL_UART_MspInit+0x3f8>)
 800571e:	2200      	movs	r2, #0
 8005720:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005722:	4b2e      	ldr	r3, [pc, #184]	; (80057dc <HAL_UART_MspInit+0x3f8>)
 8005724:	2200      	movs	r2, #0
 8005726:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005728:	4b2c      	ldr	r3, [pc, #176]	; (80057dc <HAL_UART_MspInit+0x3f8>)
 800572a:	2200      	movs	r2, #0
 800572c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800572e:	4b2b      	ldr	r3, [pc, #172]	; (80057dc <HAL_UART_MspInit+0x3f8>)
 8005730:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005734:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005736:	4b29      	ldr	r3, [pc, #164]	; (80057dc <HAL_UART_MspInit+0x3f8>)
 8005738:	2200      	movs	r2, #0
 800573a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800573c:	4827      	ldr	r0, [pc, #156]	; (80057dc <HAL_UART_MspInit+0x3f8>)
 800573e:	f000 fcfb 	bl	8006138 <HAL_DMA_Init>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <HAL_UART_MspInit+0x368>
      Error_Handler();
 8005748:	f7fe f9e3 	bl	8003b12 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a23      	ldr	r2, [pc, #140]	; (80057dc <HAL_UART_MspInit+0x3f8>)
 8005750:	639a      	str	r2, [r3, #56]	; 0x38
 8005752:	4a22      	ldr	r2, [pc, #136]	; (80057dc <HAL_UART_MspInit+0x3f8>)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8005758:	4b22      	ldr	r3, [pc, #136]	; (80057e4 <HAL_UART_MspInit+0x400>)
 800575a:	4a23      	ldr	r2, [pc, #140]	; (80057e8 <HAL_UART_MspInit+0x404>)
 800575c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800575e:	4b21      	ldr	r3, [pc, #132]	; (80057e4 <HAL_UART_MspInit+0x400>)
 8005760:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005764:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005766:	4b1f      	ldr	r3, [pc, #124]	; (80057e4 <HAL_UART_MspInit+0x400>)
 8005768:	2240      	movs	r2, #64	; 0x40
 800576a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800576c:	4b1d      	ldr	r3, [pc, #116]	; (80057e4 <HAL_UART_MspInit+0x400>)
 800576e:	2200      	movs	r2, #0
 8005770:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005772:	4b1c      	ldr	r3, [pc, #112]	; (80057e4 <HAL_UART_MspInit+0x400>)
 8005774:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005778:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800577a:	4b1a      	ldr	r3, [pc, #104]	; (80057e4 <HAL_UART_MspInit+0x400>)
 800577c:	2200      	movs	r2, #0
 800577e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005780:	4b18      	ldr	r3, [pc, #96]	; (80057e4 <HAL_UART_MspInit+0x400>)
 8005782:	2200      	movs	r2, #0
 8005784:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005786:	4b17      	ldr	r3, [pc, #92]	; (80057e4 <HAL_UART_MspInit+0x400>)
 8005788:	2200      	movs	r2, #0
 800578a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800578c:	4b15      	ldr	r3, [pc, #84]	; (80057e4 <HAL_UART_MspInit+0x400>)
 800578e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005792:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005794:	4b13      	ldr	r3, [pc, #76]	; (80057e4 <HAL_UART_MspInit+0x400>)
 8005796:	2200      	movs	r2, #0
 8005798:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800579a:	4812      	ldr	r0, [pc, #72]	; (80057e4 <HAL_UART_MspInit+0x400>)
 800579c:	f000 fccc 	bl	8006138 <HAL_DMA_Init>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <HAL_UART_MspInit+0x3c6>
      Error_Handler();
 80057a6:	f7fe f9b4 	bl	8003b12 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a0d      	ldr	r2, [pc, #52]	; (80057e4 <HAL_UART_MspInit+0x400>)
 80057ae:	635a      	str	r2, [r3, #52]	; 0x34
 80057b0:	4a0c      	ldr	r2, [pc, #48]	; (80057e4 <HAL_UART_MspInit+0x400>)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80057b6:	2200      	movs	r2, #0
 80057b8:	2105      	movs	r1, #5
 80057ba:	2027      	movs	r0, #39	; 0x27
 80057bc:	f000 fc92 	bl	80060e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80057c0:	2027      	movs	r0, #39	; 0x27
 80057c2:	f000 fcab 	bl	800611c <HAL_NVIC_EnableIRQ>
}
 80057c6:	bf00      	nop
 80057c8:	3738      	adds	r7, #56	; 0x38
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	40004800 	.word	0x40004800
 80057d4:	40023800 	.word	0x40023800
 80057d8:	40020400 	.word	0x40020400
 80057dc:	20002610 	.word	0x20002610
 80057e0:	40026028 	.word	0x40026028
 80057e4:	20002670 	.word	0x20002670
 80057e8:	40026058 	.word	0x40026058

080057ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80057ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005824 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80057f0:	480d      	ldr	r0, [pc, #52]	; (8005828 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80057f2:	490e      	ldr	r1, [pc, #56]	; (800582c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80057f4:	4a0e      	ldr	r2, [pc, #56]	; (8005830 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80057f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80057f8:	e002      	b.n	8005800 <LoopCopyDataInit>

080057fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80057fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057fe:	3304      	adds	r3, #4

08005800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005804:	d3f9      	bcc.n	80057fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005806:	4a0b      	ldr	r2, [pc, #44]	; (8005834 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005808:	4c0b      	ldr	r4, [pc, #44]	; (8005838 <LoopFillZerobss+0x26>)
  movs r3, #0
 800580a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800580c:	e001      	b.n	8005812 <LoopFillZerobss>

0800580e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800580e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005810:	3204      	adds	r2, #4

08005812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005814:	d3fb      	bcc.n	800580e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005816:	f7ff f945 	bl	8004aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800581a:	f008 ff0d 	bl	800e638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800581e:	f7fe f8b7 	bl	8003990 <main>
  bx  lr    
 8005822:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005824:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800582c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8005830:	0800ecd0 	.word	0x0800ecd0
  ldr r2, =_sbss
 8005834:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8005838:	20003148 	.word	0x20003148

0800583c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800583c:	e7fe      	b.n	800583c <ADC_IRQHandler>
	...

08005840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005844:	4b0e      	ldr	r3, [pc, #56]	; (8005880 <HAL_Init+0x40>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a0d      	ldr	r2, [pc, #52]	; (8005880 <HAL_Init+0x40>)
 800584a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800584e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005850:	4b0b      	ldr	r3, [pc, #44]	; (8005880 <HAL_Init+0x40>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a0a      	ldr	r2, [pc, #40]	; (8005880 <HAL_Init+0x40>)
 8005856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800585a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800585c:	4b08      	ldr	r3, [pc, #32]	; (8005880 <HAL_Init+0x40>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a07      	ldr	r2, [pc, #28]	; (8005880 <HAL_Init+0x40>)
 8005862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005868:	2003      	movs	r0, #3
 800586a:	f000 fc30 	bl	80060ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800586e:	200f      	movs	r0, #15
 8005870:	f7ff f804 	bl	800487c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005874:	f7fe ffd6 	bl	8004824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40023c00 	.word	0x40023c00

08005884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005888:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <HAL_IncTick+0x20>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	461a      	mov	r2, r3
 800588e:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <HAL_IncTick+0x24>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4413      	add	r3, r2
 8005894:	4a04      	ldr	r2, [pc, #16]	; (80058a8 <HAL_IncTick+0x24>)
 8005896:	6013      	str	r3, [r2, #0]
}
 8005898:	bf00      	nop
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	2000003c 	.word	0x2000003c
 80058a8:	200026d0 	.word	0x200026d0

080058ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
  return uwTick;
 80058b0:	4b03      	ldr	r3, [pc, #12]	; (80058c0 <HAL_GetTick+0x14>)
 80058b2:	681b      	ldr	r3, [r3, #0]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	200026d0 	.word	0x200026d0

080058c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058cc:	f7ff ffee 	bl	80058ac <HAL_GetTick>
 80058d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058dc:	d005      	beq.n	80058ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058de:	4b0a      	ldr	r3, [pc, #40]	; (8005908 <HAL_Delay+0x44>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	461a      	mov	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80058ea:	bf00      	nop
 80058ec:	f7ff ffde 	bl	80058ac <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d8f7      	bhi.n	80058ec <HAL_Delay+0x28>
  {
  }
}
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	2000003c 	.word	0x2000003c

0800590c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e0ed      	b.n	8005afa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d102      	bne.n	8005930 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7fb faf2 	bl	8000f14 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0201 	orr.w	r2, r2, #1
 800593e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005940:	f7ff ffb4 	bl	80058ac <HAL_GetTick>
 8005944:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005946:	e012      	b.n	800596e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005948:	f7ff ffb0 	bl	80058ac <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b0a      	cmp	r3, #10
 8005954:	d90b      	bls.n	800596e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2205      	movs	r2, #5
 8005966:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e0c5      	b.n	8005afa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0e5      	beq.n	8005948 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0202 	bic.w	r2, r2, #2
 800598a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800598c:	f7ff ff8e 	bl	80058ac <HAL_GetTick>
 8005990:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005992:	e012      	b.n	80059ba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005994:	f7ff ff8a 	bl	80058ac <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b0a      	cmp	r3, #10
 80059a0:	d90b      	bls.n	80059ba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2205      	movs	r2, #5
 80059b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e09f      	b.n	8005afa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e5      	bne.n	8005994 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	7e1b      	ldrb	r3, [r3, #24]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d108      	bne.n	80059e2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	e007      	b.n	80059f2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	7e5b      	ldrb	r3, [r3, #25]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d108      	bne.n	8005a0c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	e007      	b.n	8005a1c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	7e9b      	ldrb	r3, [r3, #26]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d108      	bne.n	8005a36 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0220 	orr.w	r2, r2, #32
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	e007      	b.n	8005a46 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0220 	bic.w	r2, r2, #32
 8005a44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	7edb      	ldrb	r3, [r3, #27]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d108      	bne.n	8005a60 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0210 	bic.w	r2, r2, #16
 8005a5c:	601a      	str	r2, [r3, #0]
 8005a5e:	e007      	b.n	8005a70 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0210 	orr.w	r2, r2, #16
 8005a6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	7f1b      	ldrb	r3, [r3, #28]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d108      	bne.n	8005a8a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0208 	orr.w	r2, r2, #8
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	e007      	b.n	8005a9a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0208 	bic.w	r2, r2, #8
 8005a98:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	7f5b      	ldrb	r3, [r3, #29]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d108      	bne.n	8005ab4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f042 0204 	orr.w	r2, r2, #4
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	e007      	b.n	8005ac4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0204 	bic.w	r2, r2, #4
 8005ac2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	ea42 0103 	orr.w	r1, r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	1e5a      	subs	r2, r3, #1
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b08a      	sub	sp, #40	; 0x28
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d07c      	beq.n	8005c42 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d023      	beq.n	8005b9a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2201      	movs	r2, #1
 8005b58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f983 	bl	8005e70 <HAL_CAN_TxMailbox0CompleteCallback>
 8005b6a:	e016      	b.n	8005b9a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d004      	beq.n	8005b80 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7e:	e00c      	b.n	8005b9a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d004      	beq.n	8005b94 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
 8005b92:	e002      	b.n	8005b9a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f989 	bl	8005eac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d024      	beq.n	8005bee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f963 	bl	8005e84 <HAL_CAN_TxMailbox1CompleteCallback>
 8005bbe:	e016      	b.n	8005bee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d004      	beq.n	8005bd4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd2:	e00c      	b.n	8005bee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d004      	beq.n	8005be8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
 8005be6:	e002      	b.n	8005bee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f969 	bl	8005ec0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d024      	beq.n	8005c42 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005c00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f943 	bl	8005e98 <HAL_CAN_TxMailbox2CompleteCallback>
 8005c12:	e016      	b.n	8005c42 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d004      	beq.n	8005c28 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
 8005c26:	e00c      	b.n	8005c42 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d004      	beq.n	8005c3c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3a:	e002      	b.n	8005c42 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f949 	bl	8005ed4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	f003 0308 	and.w	r3, r3, #8
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00c      	beq.n	8005c66 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f003 0310 	and.w	r3, r3, #16
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d007      	beq.n	8005c66 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2210      	movs	r2, #16
 8005c64:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00b      	beq.n	8005c88 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f003 0308 	and.w	r3, r3, #8
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d006      	beq.n	8005c88 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2208      	movs	r2, #8
 8005c80:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f93a 	bl	8005efc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d009      	beq.n	8005ca6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f003 0303 	and.w	r3, r3, #3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f921 	bl	8005ee8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00c      	beq.n	8005cca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f003 0310 	and.w	r3, r3, #16
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d007      	beq.n	8005cca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cc0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2210      	movs	r2, #16
 8005cc8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00b      	beq.n	8005cec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f003 0308 	and.w	r3, r3, #8
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d006      	beq.n	8005cec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2208      	movs	r2, #8
 8005ce4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f91c 	bl	8005f24 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	f003 0310 	and.w	r3, r3, #16
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d009      	beq.n	8005d0a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	f003 0303 	and.w	r3, r3, #3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f903 	bl	8005f10 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00b      	beq.n	8005d2c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	f003 0310 	and.w	r3, r3, #16
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d006      	beq.n	8005d2c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2210      	movs	r2, #16
 8005d24:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f906 	bl	8005f38 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00b      	beq.n	8005d4e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d006      	beq.n	8005d4e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2208      	movs	r2, #8
 8005d46:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f8ff 	bl	8005f4c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d07b      	beq.n	8005e50 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	f003 0304 	and.w	r3, r3, #4
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d072      	beq.n	8005e48 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d008      	beq.n	8005d7e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	f043 0301 	orr.w	r3, r3, #1
 8005d7c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d008      	beq.n	8005d9a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	f043 0302 	orr.w	r3, r3, #2
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d008      	beq.n	8005db6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	f043 0304 	orr.w	r3, r3, #4
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d043      	beq.n	8005e48 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d03e      	beq.n	8005e48 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dd0:	2b60      	cmp	r3, #96	; 0x60
 8005dd2:	d02b      	beq.n	8005e2c <HAL_CAN_IRQHandler+0x32a>
 8005dd4:	2b60      	cmp	r3, #96	; 0x60
 8005dd6:	d82e      	bhi.n	8005e36 <HAL_CAN_IRQHandler+0x334>
 8005dd8:	2b50      	cmp	r3, #80	; 0x50
 8005dda:	d022      	beq.n	8005e22 <HAL_CAN_IRQHandler+0x320>
 8005ddc:	2b50      	cmp	r3, #80	; 0x50
 8005dde:	d82a      	bhi.n	8005e36 <HAL_CAN_IRQHandler+0x334>
 8005de0:	2b40      	cmp	r3, #64	; 0x40
 8005de2:	d019      	beq.n	8005e18 <HAL_CAN_IRQHandler+0x316>
 8005de4:	2b40      	cmp	r3, #64	; 0x40
 8005de6:	d826      	bhi.n	8005e36 <HAL_CAN_IRQHandler+0x334>
 8005de8:	2b30      	cmp	r3, #48	; 0x30
 8005dea:	d010      	beq.n	8005e0e <HAL_CAN_IRQHandler+0x30c>
 8005dec:	2b30      	cmp	r3, #48	; 0x30
 8005dee:	d822      	bhi.n	8005e36 <HAL_CAN_IRQHandler+0x334>
 8005df0:	2b10      	cmp	r3, #16
 8005df2:	d002      	beq.n	8005dfa <HAL_CAN_IRQHandler+0x2f8>
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	d005      	beq.n	8005e04 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005df8:	e01d      	b.n	8005e36 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	f043 0308 	orr.w	r3, r3, #8
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005e02:	e019      	b.n	8005e38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	f043 0310 	orr.w	r3, r3, #16
 8005e0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005e0c:	e014      	b.n	8005e38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	f043 0320 	orr.w	r3, r3, #32
 8005e14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005e16:	e00f      	b.n	8005e38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005e20:	e00a      	b.n	8005e38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005e2a:	e005      	b.n	8005e38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005e34:	e000      	b.n	8005e38 <HAL_CAN_IRQHandler+0x336>
            break;
 8005e36:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	699a      	ldr	r2, [r3, #24]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005e46:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2204      	movs	r2, #4
 8005e4e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d008      	beq.n	8005e68 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f87c 	bl	8005f60 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005e68:	bf00      	nop
 8005e6a:	3728      	adds	r7, #40	; 0x28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f84:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f90:	4013      	ands	r3, r2
 8005f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fa6:	4a04      	ldr	r2, [pc, #16]	; (8005fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	60d3      	str	r3, [r2, #12]
}
 8005fac:	bf00      	nop
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	e000ed00 	.word	0xe000ed00

08005fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fc0:	4b04      	ldr	r3, [pc, #16]	; (8005fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	0a1b      	lsrs	r3, r3, #8
 8005fc6:	f003 0307 	and.w	r3, r3, #7
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	e000ed00 	.word	0xe000ed00

08005fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	db0b      	blt.n	8006002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fea:	79fb      	ldrb	r3, [r7, #7]
 8005fec:	f003 021f 	and.w	r2, r3, #31
 8005ff0:	4907      	ldr	r1, [pc, #28]	; (8006010 <__NVIC_EnableIRQ+0x38>)
 8005ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8005ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	e000e100 	.word	0xe000e100

08006014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	4603      	mov	r3, r0
 800601c:	6039      	str	r1, [r7, #0]
 800601e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006024:	2b00      	cmp	r3, #0
 8006026:	db0a      	blt.n	800603e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	b2da      	uxtb	r2, r3
 800602c:	490c      	ldr	r1, [pc, #48]	; (8006060 <__NVIC_SetPriority+0x4c>)
 800602e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006032:	0112      	lsls	r2, r2, #4
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	440b      	add	r3, r1
 8006038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800603c:	e00a      	b.n	8006054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	b2da      	uxtb	r2, r3
 8006042:	4908      	ldr	r1, [pc, #32]	; (8006064 <__NVIC_SetPriority+0x50>)
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	3b04      	subs	r3, #4
 800604c:	0112      	lsls	r2, r2, #4
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	440b      	add	r3, r1
 8006052:	761a      	strb	r2, [r3, #24]
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	e000e100 	.word	0xe000e100
 8006064:	e000ed00 	.word	0xe000ed00

08006068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006068:	b480      	push	{r7}
 800606a:	b089      	sub	sp, #36	; 0x24
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	f1c3 0307 	rsb	r3, r3, #7
 8006082:	2b04      	cmp	r3, #4
 8006084:	bf28      	it	cs
 8006086:	2304      	movcs	r3, #4
 8006088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	3304      	adds	r3, #4
 800608e:	2b06      	cmp	r3, #6
 8006090:	d902      	bls.n	8006098 <NVIC_EncodePriority+0x30>
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	3b03      	subs	r3, #3
 8006096:	e000      	b.n	800609a <NVIC_EncodePriority+0x32>
 8006098:	2300      	movs	r3, #0
 800609a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800609c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	fa02 f303 	lsl.w	r3, r2, r3
 80060a6:	43da      	mvns	r2, r3
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	401a      	ands	r2, r3
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ba:	43d9      	mvns	r1, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060c0:	4313      	orrs	r3, r2
         );
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3724      	adds	r7, #36	; 0x24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b082      	sub	sp, #8
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff ff4c 	bl	8005f74 <__NVIC_SetPriorityGrouping>
}
 80060dc:	bf00      	nop
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	4603      	mov	r3, r0
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
 80060f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060f6:	f7ff ff61 	bl	8005fbc <__NVIC_GetPriorityGrouping>
 80060fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	68b9      	ldr	r1, [r7, #8]
 8006100:	6978      	ldr	r0, [r7, #20]
 8006102:	f7ff ffb1 	bl	8006068 <NVIC_EncodePriority>
 8006106:	4602      	mov	r2, r0
 8006108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800610c:	4611      	mov	r1, r2
 800610e:	4618      	mov	r0, r3
 8006110:	f7ff ff80 	bl	8006014 <__NVIC_SetPriority>
}
 8006114:	bf00      	nop
 8006116:	3718      	adds	r7, #24
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	4603      	mov	r3, r0
 8006124:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff ff54 	bl	8005fd8 <__NVIC_EnableIRQ>
}
 8006130:	bf00      	nop
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006144:	f7ff fbb2 	bl	80058ac <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e099      	b.n	8006288 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0201 	bic.w	r2, r2, #1
 8006172:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006174:	e00f      	b.n	8006196 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006176:	f7ff fb99 	bl	80058ac <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b05      	cmp	r3, #5
 8006182:	d908      	bls.n	8006196 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2220      	movs	r2, #32
 8006188:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2203      	movs	r2, #3
 800618e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e078      	b.n	8006288 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e8      	bne.n	8006176 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	4b38      	ldr	r3, [pc, #224]	; (8006290 <HAL_DMA_Init+0x158>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d107      	bne.n	8006200 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f8:	4313      	orrs	r3, r2
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f023 0307 	bic.w	r3, r3, #7
 8006216:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	2b04      	cmp	r3, #4
 8006228:	d117      	bne.n	800625a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00e      	beq.n	800625a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fb0f 	bl	8006860 <DMA_CheckFifoParam>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d008      	beq.n	800625a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2240      	movs	r2, #64	; 0x40
 800624c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006256:	2301      	movs	r3, #1
 8006258:	e016      	b.n	8006288 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fac6 	bl	80067f4 <DMA_CalcBaseAndBitshift>
 8006268:	4603      	mov	r3, r0
 800626a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006270:	223f      	movs	r2, #63	; 0x3f
 8006272:	409a      	lsls	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	f010803f 	.word	0xf010803f

08006294 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d101      	bne.n	80062ba <HAL_DMA_Start_IT+0x26>
 80062b6:	2302      	movs	r3, #2
 80062b8:	e040      	b.n	800633c <HAL_DMA_Start_IT+0xa8>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d12f      	bne.n	800632e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2202      	movs	r2, #2
 80062d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 fa58 	bl	8006798 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ec:	223f      	movs	r2, #63	; 0x3f
 80062ee:	409a      	lsls	r2, r3
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0216 	orr.w	r2, r2, #22
 8006302:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	2b00      	cmp	r3, #0
 800630a:	d007      	beq.n	800631c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0208 	orr.w	r2, r2, #8
 800631a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0201 	orr.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	e005      	b.n	800633a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006336:	2302      	movs	r3, #2
 8006338:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800633a:	7dfb      	ldrb	r3, [r7, #23]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006350:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006352:	f7ff faab 	bl	80058ac <HAL_GetTick>
 8006356:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b02      	cmp	r3, #2
 8006362:	d008      	beq.n	8006376 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2280      	movs	r2, #128	; 0x80
 8006368:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e052      	b.n	800641c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0216 	bic.w	r2, r2, #22
 8006384:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695a      	ldr	r2, [r3, #20]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006394:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	2b00      	cmp	r3, #0
 800639c:	d103      	bne.n	80063a6 <HAL_DMA_Abort+0x62>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d007      	beq.n	80063b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 0208 	bic.w	r2, r2, #8
 80063b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0201 	bic.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063c6:	e013      	b.n	80063f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063c8:	f7ff fa70 	bl	80058ac <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b05      	cmp	r3, #5
 80063d4:	d90c      	bls.n	80063f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2203      	movs	r2, #3
 80063e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e015      	b.n	800641c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e4      	bne.n	80063c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006402:	223f      	movs	r2, #63	; 0x3f
 8006404:	409a      	lsls	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d004      	beq.n	8006442 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2280      	movs	r2, #128	; 0x80
 800643c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e00c      	b.n	800645c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2205      	movs	r2, #5
 8006446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0201 	bic.w	r2, r2, #1
 8006458:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006474:	4b8e      	ldr	r3, [pc, #568]	; (80066b0 <HAL_DMA_IRQHandler+0x248>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a8e      	ldr	r2, [pc, #568]	; (80066b4 <HAL_DMA_IRQHandler+0x24c>)
 800647a:	fba2 2303 	umull	r2, r3, r2, r3
 800647e:	0a9b      	lsrs	r3, r3, #10
 8006480:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006486:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006492:	2208      	movs	r2, #8
 8006494:	409a      	lsls	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	4013      	ands	r3, r2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d01a      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0304 	and.w	r3, r3, #4
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d013      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 0204 	bic.w	r2, r2, #4
 80064ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c0:	2208      	movs	r2, #8
 80064c2:	409a      	lsls	r2, r3
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064cc:	f043 0201 	orr.w	r2, r3, #1
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d8:	2201      	movs	r2, #1
 80064da:	409a      	lsls	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4013      	ands	r3, r2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d012      	beq.n	800650a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00b      	beq.n	800650a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f6:	2201      	movs	r2, #1
 80064f8:	409a      	lsls	r2, r3
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006502:	f043 0202 	orr.w	r2, r3, #2
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650e:	2204      	movs	r2, #4
 8006510:	409a      	lsls	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4013      	ands	r3, r2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d012      	beq.n	8006540 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00b      	beq.n	8006540 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800652c:	2204      	movs	r2, #4
 800652e:	409a      	lsls	r2, r3
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006538:	f043 0204 	orr.w	r2, r3, #4
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006544:	2210      	movs	r2, #16
 8006546:	409a      	lsls	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4013      	ands	r3, r2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d043      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d03c      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006562:	2210      	movs	r2, #16
 8006564:	409a      	lsls	r2, r3
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d018      	beq.n	80065aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d108      	bne.n	8006598 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	2b00      	cmp	r3, #0
 800658c:	d024      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	4798      	blx	r3
 8006596:	e01f      	b.n	80065d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800659c:	2b00      	cmp	r3, #0
 800659e:	d01b      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	4798      	blx	r3
 80065a8:	e016      	b.n	80065d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d107      	bne.n	80065c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 0208 	bic.w	r2, r2, #8
 80065c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065dc:	2220      	movs	r2, #32
 80065de:	409a      	lsls	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4013      	ands	r3, r2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 808f 	beq.w	8006708 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0310 	and.w	r3, r3, #16
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 8087 	beq.w	8006708 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fe:	2220      	movs	r2, #32
 8006600:	409a      	lsls	r2, r3
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b05      	cmp	r3, #5
 8006610:	d136      	bne.n	8006680 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0216 	bic.w	r2, r2, #22
 8006620:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	695a      	ldr	r2, [r3, #20]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006630:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	2b00      	cmp	r3, #0
 8006638:	d103      	bne.n	8006642 <HAL_DMA_IRQHandler+0x1da>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800663e:	2b00      	cmp	r3, #0
 8006640:	d007      	beq.n	8006652 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0208 	bic.w	r2, r2, #8
 8006650:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006656:	223f      	movs	r2, #63	; 0x3f
 8006658:	409a      	lsls	r2, r3
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006672:	2b00      	cmp	r3, #0
 8006674:	d07e      	beq.n	8006774 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	4798      	blx	r3
        }
        return;
 800667e:	e079      	b.n	8006774 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d01d      	beq.n	80066ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10d      	bne.n	80066b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d031      	beq.n	8006708 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	4798      	blx	r3
 80066ac:	e02c      	b.n	8006708 <HAL_DMA_IRQHandler+0x2a0>
 80066ae:	bf00      	nop
 80066b0:	20000034 	.word	0x20000034
 80066b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d023      	beq.n	8006708 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	4798      	blx	r3
 80066c8:	e01e      	b.n	8006708 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10f      	bne.n	80066f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0210 	bic.w	r2, r2, #16
 80066e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670c:	2b00      	cmp	r3, #0
 800670e:	d032      	beq.n	8006776 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d022      	beq.n	8006762 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2205      	movs	r2, #5
 8006720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 0201 	bic.w	r2, r2, #1
 8006732:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	3301      	adds	r3, #1
 8006738:	60bb      	str	r3, [r7, #8]
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	429a      	cmp	r2, r3
 800673e:	d307      	bcc.n	8006750 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1f2      	bne.n	8006734 <HAL_DMA_IRQHandler+0x2cc>
 800674e:	e000      	b.n	8006752 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006750:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006766:	2b00      	cmp	r3, #0
 8006768:	d005      	beq.n	8006776 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	4798      	blx	r3
 8006772:	e000      	b.n	8006776 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006774:	bf00      	nop
    }
  }
}
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800678a:	b2db      	uxtb	r3, r3
}
 800678c:	4618      	mov	r0, r3
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80067b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	2b40      	cmp	r3, #64	; 0x40
 80067c4:	d108      	bne.n	80067d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80067d6:	e007      	b.n	80067e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	60da      	str	r2, [r3, #12]
}
 80067e8:	bf00      	nop
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	b2db      	uxtb	r3, r3
 8006802:	3b10      	subs	r3, #16
 8006804:	4a14      	ldr	r2, [pc, #80]	; (8006858 <DMA_CalcBaseAndBitshift+0x64>)
 8006806:	fba2 2303 	umull	r2, r3, r2, r3
 800680a:	091b      	lsrs	r3, r3, #4
 800680c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800680e:	4a13      	ldr	r2, [pc, #76]	; (800685c <DMA_CalcBaseAndBitshift+0x68>)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4413      	add	r3, r2
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	461a      	mov	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2b03      	cmp	r3, #3
 8006820:	d909      	bls.n	8006836 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800682a:	f023 0303 	bic.w	r3, r3, #3
 800682e:	1d1a      	adds	r2, r3, #4
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	659a      	str	r2, [r3, #88]	; 0x58
 8006834:	e007      	b.n	8006846 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800683e:	f023 0303 	bic.w	r3, r3, #3
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	aaaaaaab 	.word	0xaaaaaaab
 800685c:	0800ec88 	.word	0x0800ec88

08006860 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006868:	2300      	movs	r3, #0
 800686a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006870:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d11f      	bne.n	80068ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2b03      	cmp	r3, #3
 800687e:	d856      	bhi.n	800692e <DMA_CheckFifoParam+0xce>
 8006880:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <DMA_CheckFifoParam+0x28>)
 8006882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006886:	bf00      	nop
 8006888:	08006899 	.word	0x08006899
 800688c:	080068ab 	.word	0x080068ab
 8006890:	08006899 	.word	0x08006899
 8006894:	0800692f 	.word	0x0800692f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d046      	beq.n	8006932 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068a8:	e043      	b.n	8006932 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068b2:	d140      	bne.n	8006936 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068b8:	e03d      	b.n	8006936 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068c2:	d121      	bne.n	8006908 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d837      	bhi.n	800693a <DMA_CheckFifoParam+0xda>
 80068ca:	a201      	add	r2, pc, #4	; (adr r2, 80068d0 <DMA_CheckFifoParam+0x70>)
 80068cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d0:	080068e1 	.word	0x080068e1
 80068d4:	080068e7 	.word	0x080068e7
 80068d8:	080068e1 	.word	0x080068e1
 80068dc:	080068f9 	.word	0x080068f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	73fb      	strb	r3, [r7, #15]
      break;
 80068e4:	e030      	b.n	8006948 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d025      	beq.n	800693e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068f6:	e022      	b.n	800693e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006900:	d11f      	bne.n	8006942 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006906:	e01c      	b.n	8006942 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b02      	cmp	r3, #2
 800690c:	d903      	bls.n	8006916 <DMA_CheckFifoParam+0xb6>
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2b03      	cmp	r3, #3
 8006912:	d003      	beq.n	800691c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006914:	e018      	b.n	8006948 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	73fb      	strb	r3, [r7, #15]
      break;
 800691a:	e015      	b.n	8006948 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006920:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00e      	beq.n	8006946 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	73fb      	strb	r3, [r7, #15]
      break;
 800692c:	e00b      	b.n	8006946 <DMA_CheckFifoParam+0xe6>
      break;
 800692e:	bf00      	nop
 8006930:	e00a      	b.n	8006948 <DMA_CheckFifoParam+0xe8>
      break;
 8006932:	bf00      	nop
 8006934:	e008      	b.n	8006948 <DMA_CheckFifoParam+0xe8>
      break;
 8006936:	bf00      	nop
 8006938:	e006      	b.n	8006948 <DMA_CheckFifoParam+0xe8>
      break;
 800693a:	bf00      	nop
 800693c:	e004      	b.n	8006948 <DMA_CheckFifoParam+0xe8>
      break;
 800693e:	bf00      	nop
 8006940:	e002      	b.n	8006948 <DMA_CheckFifoParam+0xe8>
      break;   
 8006942:	bf00      	nop
 8006944:	e000      	b.n	8006948 <DMA_CheckFifoParam+0xe8>
      break;
 8006946:	bf00      	nop
    }
  } 
  
  return status; 
 8006948:	7bfb      	ldrb	r3, [r7, #15]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop

08006958 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800696a:	4b23      	ldr	r3, [pc, #140]	; (80069f8 <HAL_FLASH_Program+0xa0>)
 800696c:	7e1b      	ldrb	r3, [r3, #24]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d101      	bne.n	8006976 <HAL_FLASH_Program+0x1e>
 8006972:	2302      	movs	r3, #2
 8006974:	e03b      	b.n	80069ee <HAL_FLASH_Program+0x96>
 8006976:	4b20      	ldr	r3, [pc, #128]	; (80069f8 <HAL_FLASH_Program+0xa0>)
 8006978:	2201      	movs	r2, #1
 800697a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800697c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006980:	f000 f870 	bl	8006a64 <FLASH_WaitForLastOperation>
 8006984:	4603      	mov	r3, r0
 8006986:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006988:	7dfb      	ldrb	r3, [r7, #23]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d12b      	bne.n	80069e6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d105      	bne.n	80069a0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006994:	783b      	ldrb	r3, [r7, #0]
 8006996:	4619      	mov	r1, r3
 8006998:	68b8      	ldr	r0, [r7, #8]
 800699a:	f000 f91b 	bl	8006bd4 <FLASH_Program_Byte>
 800699e:	e016      	b.n	80069ce <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d105      	bne.n	80069b2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80069a6:	883b      	ldrh	r3, [r7, #0]
 80069a8:	4619      	mov	r1, r3
 80069aa:	68b8      	ldr	r0, [r7, #8]
 80069ac:	f000 f8ee 	bl	8006b8c <FLASH_Program_HalfWord>
 80069b0:	e00d      	b.n	80069ce <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d105      	bne.n	80069c4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	4619      	mov	r1, r3
 80069bc:	68b8      	ldr	r0, [r7, #8]
 80069be:	f000 f8c3 	bl	8006b48 <FLASH_Program_Word>
 80069c2:	e004      	b.n	80069ce <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80069c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069c8:	68b8      	ldr	r0, [r7, #8]
 80069ca:	f000 f88b 	bl	8006ae4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80069ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 80069d2:	f000 f847 	bl	8006a64 <FLASH_WaitForLastOperation>
 80069d6:	4603      	mov	r3, r0
 80069d8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80069da:	4b08      	ldr	r3, [pc, #32]	; (80069fc <HAL_FLASH_Program+0xa4>)
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	4a07      	ldr	r2, [pc, #28]	; (80069fc <HAL_FLASH_Program+0xa4>)
 80069e0:	f023 0301 	bic.w	r3, r3, #1
 80069e4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80069e6:	4b04      	ldr	r3, [pc, #16]	; (80069f8 <HAL_FLASH_Program+0xa0>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	761a      	strb	r2, [r3, #24]
  
  return status;
 80069ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	200026d4 	.word	0x200026d4
 80069fc:	40023c00 	.word	0x40023c00

08006a00 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006a06:	2300      	movs	r3, #0
 8006a08:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <HAL_FLASH_Unlock+0x38>)
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	da0b      	bge.n	8006a2a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006a12:	4b09      	ldr	r3, [pc, #36]	; (8006a38 <HAL_FLASH_Unlock+0x38>)
 8006a14:	4a09      	ldr	r2, [pc, #36]	; (8006a3c <HAL_FLASH_Unlock+0x3c>)
 8006a16:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006a18:	4b07      	ldr	r3, [pc, #28]	; (8006a38 <HAL_FLASH_Unlock+0x38>)
 8006a1a:	4a09      	ldr	r2, [pc, #36]	; (8006a40 <HAL_FLASH_Unlock+0x40>)
 8006a1c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006a1e:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <HAL_FLASH_Unlock+0x38>)
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	da01      	bge.n	8006a2a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	40023c00 	.word	0x40023c00
 8006a3c:	45670123 	.word	0x45670123
 8006a40:	cdef89ab 	.word	0xcdef89ab

08006a44 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006a44:	b480      	push	{r7}
 8006a46:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006a48:	4b05      	ldr	r3, [pc, #20]	; (8006a60 <HAL_FLASH_Lock+0x1c>)
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	4a04      	ldr	r2, [pc, #16]	; (8006a60 <HAL_FLASH_Lock+0x1c>)
 8006a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a52:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	40023c00 	.word	0x40023c00

08006a64 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006a70:	4b1a      	ldr	r3, [pc, #104]	; (8006adc <FLASH_WaitForLastOperation+0x78>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8006a76:	f7fe ff19 	bl	80058ac <HAL_GetTick>
 8006a7a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006a7c:	e010      	b.n	8006aa0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a84:	d00c      	beq.n	8006aa0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d007      	beq.n	8006a9c <FLASH_WaitForLastOperation+0x38>
 8006a8c:	f7fe ff0e 	bl	80058ac <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d201      	bcs.n	8006aa0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e019      	b.n	8006ad4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006aa0:	4b0f      	ldr	r3, [pc, #60]	; (8006ae0 <FLASH_WaitForLastOperation+0x7c>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e8      	bne.n	8006a7e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006aac:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <FLASH_WaitForLastOperation+0x7c>)
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006ab8:	4b09      	ldr	r3, [pc, #36]	; (8006ae0 <FLASH_WaitForLastOperation+0x7c>)
 8006aba:	2201      	movs	r2, #1
 8006abc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006abe:	4b08      	ldr	r3, [pc, #32]	; (8006ae0 <FLASH_WaitForLastOperation+0x7c>)
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006aca:	f000 f8a5 	bl	8006c18 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e000      	b.n	8006ad4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
  
}  
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	200026d4 	.word	0x200026d4
 8006ae0:	40023c00 	.word	0x40023c00

08006ae4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006af0:	4b14      	ldr	r3, [pc, #80]	; (8006b44 <FLASH_Program_DoubleWord+0x60>)
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	4a13      	ldr	r2, [pc, #76]	; (8006b44 <FLASH_Program_DoubleWord+0x60>)
 8006af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006afa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006afc:	4b11      	ldr	r3, [pc, #68]	; (8006b44 <FLASH_Program_DoubleWord+0x60>)
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	4a10      	ldr	r2, [pc, #64]	; (8006b44 <FLASH_Program_DoubleWord+0x60>)
 8006b02:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006b06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006b08:	4b0e      	ldr	r3, [pc, #56]	; (8006b44 <FLASH_Program_DoubleWord+0x60>)
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	4a0d      	ldr	r2, [pc, #52]	; (8006b44 <FLASH_Program_DoubleWord+0x60>)
 8006b0e:	f043 0301 	orr.w	r3, r3, #1
 8006b12:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8006b1a:	f3bf 8f6f 	isb	sy
}
 8006b1e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006b20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b24:	f04f 0200 	mov.w	r2, #0
 8006b28:	f04f 0300 	mov.w	r3, #0
 8006b2c:	000a      	movs	r2, r1
 8006b2e:	2300      	movs	r3, #0
 8006b30:	68f9      	ldr	r1, [r7, #12]
 8006b32:	3104      	adds	r1, #4
 8006b34:	4613      	mov	r3, r2
 8006b36:	600b      	str	r3, [r1, #0]
}
 8006b38:	bf00      	nop
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	40023c00 	.word	0x40023c00

08006b48 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006b52:	4b0d      	ldr	r3, [pc, #52]	; (8006b88 <FLASH_Program_Word+0x40>)
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	4a0c      	ldr	r2, [pc, #48]	; (8006b88 <FLASH_Program_Word+0x40>)
 8006b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b5c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006b5e:	4b0a      	ldr	r3, [pc, #40]	; (8006b88 <FLASH_Program_Word+0x40>)
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	4a09      	ldr	r2, [pc, #36]	; (8006b88 <FLASH_Program_Word+0x40>)
 8006b64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b68:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006b6a:	4b07      	ldr	r3, [pc, #28]	; (8006b88 <FLASH_Program_Word+0x40>)
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	4a06      	ldr	r2, [pc, #24]	; (8006b88 <FLASH_Program_Word+0x40>)
 8006b70:	f043 0301 	orr.w	r3, r3, #1
 8006b74:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	601a      	str	r2, [r3, #0]
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	40023c00 	.word	0x40023c00

08006b8c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006b98:	4b0d      	ldr	r3, [pc, #52]	; (8006bd0 <FLASH_Program_HalfWord+0x44>)
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	4a0c      	ldr	r2, [pc, #48]	; (8006bd0 <FLASH_Program_HalfWord+0x44>)
 8006b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ba2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006ba4:	4b0a      	ldr	r3, [pc, #40]	; (8006bd0 <FLASH_Program_HalfWord+0x44>)
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	4a09      	ldr	r2, [pc, #36]	; (8006bd0 <FLASH_Program_HalfWord+0x44>)
 8006baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006bb0:	4b07      	ldr	r3, [pc, #28]	; (8006bd0 <FLASH_Program_HalfWord+0x44>)
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	4a06      	ldr	r2, [pc, #24]	; (8006bd0 <FLASH_Program_HalfWord+0x44>)
 8006bb6:	f043 0301 	orr.w	r3, r3, #1
 8006bba:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	887a      	ldrh	r2, [r7, #2]
 8006bc0:	801a      	strh	r2, [r3, #0]
}
 8006bc2:	bf00      	nop
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40023c00 	.word	0x40023c00

08006bd4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006be0:	4b0c      	ldr	r3, [pc, #48]	; (8006c14 <FLASH_Program_Byte+0x40>)
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	4a0b      	ldr	r2, [pc, #44]	; (8006c14 <FLASH_Program_Byte+0x40>)
 8006be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006bec:	4b09      	ldr	r3, [pc, #36]	; (8006c14 <FLASH_Program_Byte+0x40>)
 8006bee:	4a09      	ldr	r2, [pc, #36]	; (8006c14 <FLASH_Program_Byte+0x40>)
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006bf4:	4b07      	ldr	r3, [pc, #28]	; (8006c14 <FLASH_Program_Byte+0x40>)
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	4a06      	ldr	r2, [pc, #24]	; (8006c14 <FLASH_Program_Byte+0x40>)
 8006bfa:	f043 0301 	orr.w	r3, r3, #1
 8006bfe:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	78fa      	ldrb	r2, [r7, #3]
 8006c04:	701a      	strb	r2, [r3, #0]
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	40023c00 	.word	0x40023c00

08006c18 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006c18:	b480      	push	{r7}
 8006c1a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006c1c:	4b27      	ldr	r3, [pc, #156]	; (8006cbc <FLASH_SetErrorCode+0xa4>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f003 0310 	and.w	r3, r3, #16
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d008      	beq.n	8006c3a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006c28:	4b25      	ldr	r3, [pc, #148]	; (8006cc0 <FLASH_SetErrorCode+0xa8>)
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	f043 0310 	orr.w	r3, r3, #16
 8006c30:	4a23      	ldr	r2, [pc, #140]	; (8006cc0 <FLASH_SetErrorCode+0xa8>)
 8006c32:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006c34:	4b21      	ldr	r3, [pc, #132]	; (8006cbc <FLASH_SetErrorCode+0xa4>)
 8006c36:	2210      	movs	r2, #16
 8006c38:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006c3a:	4b20      	ldr	r3, [pc, #128]	; (8006cbc <FLASH_SetErrorCode+0xa4>)
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	f003 0320 	and.w	r3, r3, #32
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d008      	beq.n	8006c58 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006c46:	4b1e      	ldr	r3, [pc, #120]	; (8006cc0 <FLASH_SetErrorCode+0xa8>)
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	f043 0308 	orr.w	r3, r3, #8
 8006c4e:	4a1c      	ldr	r2, [pc, #112]	; (8006cc0 <FLASH_SetErrorCode+0xa8>)
 8006c50:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006c52:	4b1a      	ldr	r3, [pc, #104]	; (8006cbc <FLASH_SetErrorCode+0xa4>)
 8006c54:	2220      	movs	r2, #32
 8006c56:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006c58:	4b18      	ldr	r3, [pc, #96]	; (8006cbc <FLASH_SetErrorCode+0xa4>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d008      	beq.n	8006c76 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006c64:	4b16      	ldr	r3, [pc, #88]	; (8006cc0 <FLASH_SetErrorCode+0xa8>)
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	f043 0304 	orr.w	r3, r3, #4
 8006c6c:	4a14      	ldr	r2, [pc, #80]	; (8006cc0 <FLASH_SetErrorCode+0xa8>)
 8006c6e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006c70:	4b12      	ldr	r3, [pc, #72]	; (8006cbc <FLASH_SetErrorCode+0xa4>)
 8006c72:	2240      	movs	r2, #64	; 0x40
 8006c74:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006c76:	4b11      	ldr	r3, [pc, #68]	; (8006cbc <FLASH_SetErrorCode+0xa4>)
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d008      	beq.n	8006c94 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006c82:	4b0f      	ldr	r3, [pc, #60]	; (8006cc0 <FLASH_SetErrorCode+0xa8>)
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	f043 0302 	orr.w	r3, r3, #2
 8006c8a:	4a0d      	ldr	r2, [pc, #52]	; (8006cc0 <FLASH_SetErrorCode+0xa8>)
 8006c8c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006c8e:	4b0b      	ldr	r3, [pc, #44]	; (8006cbc <FLASH_SetErrorCode+0xa4>)
 8006c90:	2280      	movs	r2, #128	; 0x80
 8006c92:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006c94:	4b09      	ldr	r3, [pc, #36]	; (8006cbc <FLASH_SetErrorCode+0xa4>)
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d008      	beq.n	8006cb2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006ca0:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <FLASH_SetErrorCode+0xa8>)
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	f043 0320 	orr.w	r3, r3, #32
 8006ca8:	4a05      	ldr	r2, [pc, #20]	; (8006cc0 <FLASH_SetErrorCode+0xa8>)
 8006caa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006cac:	4b03      	ldr	r3, [pc, #12]	; (8006cbc <FLASH_SetErrorCode+0xa4>)
 8006cae:	2202      	movs	r2, #2
 8006cb0:	60da      	str	r2, [r3, #12]
  }
}
 8006cb2:	bf00      	nop
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	40023c00 	.word	0x40023c00
 8006cc0:	200026d4 	.word	0x200026d4

08006cc4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006cd6:	4b31      	ldr	r3, [pc, #196]	; (8006d9c <HAL_FLASHEx_Erase+0xd8>)
 8006cd8:	7e1b      	ldrb	r3, [r3, #24]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d101      	bne.n	8006ce2 <HAL_FLASHEx_Erase+0x1e>
 8006cde:	2302      	movs	r3, #2
 8006ce0:	e058      	b.n	8006d94 <HAL_FLASHEx_Erase+0xd0>
 8006ce2:	4b2e      	ldr	r3, [pc, #184]	; (8006d9c <HAL_FLASHEx_Erase+0xd8>)
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006ce8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006cec:	f7ff feba 	bl	8006a64 <FLASH_WaitForLastOperation>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d148      	bne.n	8006d8c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d00:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d115      	bne.n	8006d36 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	4619      	mov	r1, r3
 8006d16:	4610      	mov	r0, r2
 8006d18:	f000 f844 	bl	8006da4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006d1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006d20:	f7ff fea0 	bl	8006a64 <FLASH_WaitForLastOperation>
 8006d24:	4603      	mov	r3, r0
 8006d26:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006d28:	4b1d      	ldr	r3, [pc, #116]	; (8006da0 <HAL_FLASHEx_Erase+0xdc>)
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	4a1c      	ldr	r2, [pc, #112]	; (8006da0 <HAL_FLASHEx_Erase+0xdc>)
 8006d2e:	f023 0304 	bic.w	r3, r3, #4
 8006d32:	6113      	str	r3, [r2, #16]
 8006d34:	e028      	b.n	8006d88 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	60bb      	str	r3, [r7, #8]
 8006d3c:	e01c      	b.n	8006d78 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	4619      	mov	r1, r3
 8006d46:	68b8      	ldr	r0, [r7, #8]
 8006d48:	f000 f850 	bl	8006dec <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006d4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006d50:	f7ff fe88 	bl	8006a64 <FLASH_WaitForLastOperation>
 8006d54:	4603      	mov	r3, r0
 8006d56:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006d58:	4b11      	ldr	r3, [pc, #68]	; (8006da0 <HAL_FLASHEx_Erase+0xdc>)
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	4a10      	ldr	r2, [pc, #64]	; (8006da0 <HAL_FLASHEx_Erase+0xdc>)
 8006d5e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8006d62:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	601a      	str	r2, [r3, #0]
          break;
 8006d70:	e00a      	b.n	8006d88 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	3301      	adds	r3, #1
 8006d76:	60bb      	str	r3, [r7, #8]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	4413      	add	r3, r2
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d3da      	bcc.n	8006d3e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006d88:	f000 f878 	bl	8006e7c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006d8c:	4b03      	ldr	r3, [pc, #12]	; (8006d9c <HAL_FLASHEx_Erase+0xd8>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	761a      	strb	r2, [r3, #24]

  return status;
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	200026d4 	.word	0x200026d4
 8006da0:	40023c00 	.word	0x40023c00

08006da4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	4603      	mov	r3, r0
 8006dac:	6039      	str	r1, [r7, #0]
 8006dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006db0:	4b0d      	ldr	r3, [pc, #52]	; (8006de8 <FLASH_MassErase+0x44>)
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	4a0c      	ldr	r2, [pc, #48]	; (8006de8 <FLASH_MassErase+0x44>)
 8006db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8006dbc:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <FLASH_MassErase+0x44>)
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	4a09      	ldr	r2, [pc, #36]	; (8006de8 <FLASH_MassErase+0x44>)
 8006dc2:	f043 0304 	orr.w	r3, r3, #4
 8006dc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8006dc8:	4b07      	ldr	r3, [pc, #28]	; (8006de8 <FLASH_MassErase+0x44>)
 8006dca:	691a      	ldr	r2, [r3, #16]
 8006dcc:	79fb      	ldrb	r3, [r7, #7]
 8006dce:	021b      	lsls	r3, r3, #8
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	4a05      	ldr	r2, [pc, #20]	; (8006de8 <FLASH_MassErase+0x44>)
 8006dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dd8:	6113      	str	r3, [r2, #16]
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	40023c00 	.word	0x40023c00

08006dec <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	460b      	mov	r3, r1
 8006df6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006dfc:	78fb      	ldrb	r3, [r7, #3]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d102      	bne.n	8006e08 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	e010      	b.n	8006e2a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006e08:	78fb      	ldrb	r3, [r7, #3]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d103      	bne.n	8006e16 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006e0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	e009      	b.n	8006e2a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006e16:	78fb      	ldrb	r3, [r7, #3]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d103      	bne.n	8006e24 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e20:	60fb      	str	r3, [r7, #12]
 8006e22:	e002      	b.n	8006e2a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006e24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006e28:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006e2a:	4b13      	ldr	r3, [pc, #76]	; (8006e78 <FLASH_Erase_Sector+0x8c>)
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	4a12      	ldr	r2, [pc, #72]	; (8006e78 <FLASH_Erase_Sector+0x8c>)
 8006e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006e36:	4b10      	ldr	r3, [pc, #64]	; (8006e78 <FLASH_Erase_Sector+0x8c>)
 8006e38:	691a      	ldr	r2, [r3, #16]
 8006e3a:	490f      	ldr	r1, [pc, #60]	; (8006e78 <FLASH_Erase_Sector+0x8c>)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006e42:	4b0d      	ldr	r3, [pc, #52]	; (8006e78 <FLASH_Erase_Sector+0x8c>)
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	4a0c      	ldr	r2, [pc, #48]	; (8006e78 <FLASH_Erase_Sector+0x8c>)
 8006e48:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006e4c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006e4e:	4b0a      	ldr	r3, [pc, #40]	; (8006e78 <FLASH_Erase_Sector+0x8c>)
 8006e50:	691a      	ldr	r2, [r3, #16]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	00db      	lsls	r3, r3, #3
 8006e56:	4313      	orrs	r3, r2
 8006e58:	4a07      	ldr	r2, [pc, #28]	; (8006e78 <FLASH_Erase_Sector+0x8c>)
 8006e5a:	f043 0302 	orr.w	r3, r3, #2
 8006e5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006e60:	4b05      	ldr	r3, [pc, #20]	; (8006e78 <FLASH_Erase_Sector+0x8c>)
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	4a04      	ldr	r2, [pc, #16]	; (8006e78 <FLASH_Erase_Sector+0x8c>)
 8006e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e6a:	6113      	str	r3, [r2, #16]
}
 8006e6c:	bf00      	nop
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr
 8006e78:	40023c00 	.word	0x40023c00

08006e7c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006e80:	4b20      	ldr	r3, [pc, #128]	; (8006f04 <FLASH_FlushCaches+0x88>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d017      	beq.n	8006ebc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006e8c:	4b1d      	ldr	r3, [pc, #116]	; (8006f04 <FLASH_FlushCaches+0x88>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a1c      	ldr	r2, [pc, #112]	; (8006f04 <FLASH_FlushCaches+0x88>)
 8006e92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e96:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006e98:	4b1a      	ldr	r3, [pc, #104]	; (8006f04 <FLASH_FlushCaches+0x88>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a19      	ldr	r2, [pc, #100]	; (8006f04 <FLASH_FlushCaches+0x88>)
 8006e9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	4b17      	ldr	r3, [pc, #92]	; (8006f04 <FLASH_FlushCaches+0x88>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a16      	ldr	r2, [pc, #88]	; (8006f04 <FLASH_FlushCaches+0x88>)
 8006eaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006eae:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006eb0:	4b14      	ldr	r3, [pc, #80]	; (8006f04 <FLASH_FlushCaches+0x88>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a13      	ldr	r2, [pc, #76]	; (8006f04 <FLASH_FlushCaches+0x88>)
 8006eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006eba:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006ebc:	4b11      	ldr	r3, [pc, #68]	; (8006f04 <FLASH_FlushCaches+0x88>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d017      	beq.n	8006ef8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006ec8:	4b0e      	ldr	r3, [pc, #56]	; (8006f04 <FLASH_FlushCaches+0x88>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a0d      	ldr	r2, [pc, #52]	; (8006f04 <FLASH_FlushCaches+0x88>)
 8006ece:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ed2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006ed4:	4b0b      	ldr	r3, [pc, #44]	; (8006f04 <FLASH_FlushCaches+0x88>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a0a      	ldr	r2, [pc, #40]	; (8006f04 <FLASH_FlushCaches+0x88>)
 8006eda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ede:	6013      	str	r3, [r2, #0]
 8006ee0:	4b08      	ldr	r3, [pc, #32]	; (8006f04 <FLASH_FlushCaches+0x88>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a07      	ldr	r2, [pc, #28]	; (8006f04 <FLASH_FlushCaches+0x88>)
 8006ee6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eea:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006eec:	4b05      	ldr	r3, [pc, #20]	; (8006f04 <FLASH_FlushCaches+0x88>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a04      	ldr	r2, [pc, #16]	; (8006f04 <FLASH_FlushCaches+0x88>)
 8006ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ef6:	6013      	str	r3, [r2, #0]
  }
}
 8006ef8:	bf00      	nop
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	40023c00 	.word	0x40023c00

08006f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b089      	sub	sp, #36	; 0x24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f1e:	2300      	movs	r3, #0
 8006f20:	61fb      	str	r3, [r7, #28]
 8006f22:	e16b      	b.n	80071fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006f24:	2201      	movs	r2, #1
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	4013      	ands	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	f040 815a 	bne.w	80071f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f003 0303 	and.w	r3, r3, #3
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d005      	beq.n	8006f5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d130      	bne.n	8006fbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	005b      	lsls	r3, r3, #1
 8006f64:	2203      	movs	r2, #3
 8006f66:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6a:	43db      	mvns	r3, r3
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	4013      	ands	r3, r2
 8006f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	68da      	ldr	r2, [r3, #12]
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f90:	2201      	movs	r2, #1
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	fa02 f303 	lsl.w	r3, r2, r3
 8006f98:	43db      	mvns	r3, r3
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	091b      	lsrs	r3, r3, #4
 8006fa6:	f003 0201 	and.w	r2, r3, #1
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb0:	69ba      	ldr	r2, [r7, #24]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f003 0303 	and.w	r3, r3, #3
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d017      	beq.n	8006ff8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	005b      	lsls	r3, r3, #1
 8006fd2:	2203      	movs	r2, #3
 8006fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd8:	43db      	mvns	r3, r3
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	4013      	ands	r3, r2
 8006fde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	005b      	lsls	r3, r3, #1
 8006fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fec:	69ba      	ldr	r2, [r7, #24]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f003 0303 	and.w	r3, r3, #3
 8007000:	2b02      	cmp	r3, #2
 8007002:	d123      	bne.n	800704c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	08da      	lsrs	r2, r3, #3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	3208      	adds	r2, #8
 800700c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007010:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	f003 0307 	and.w	r3, r3, #7
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	220f      	movs	r2, #15
 800701c:	fa02 f303 	lsl.w	r3, r2, r3
 8007020:	43db      	mvns	r3, r3
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	4013      	ands	r3, r2
 8007026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	691a      	ldr	r2, [r3, #16]
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	f003 0307 	and.w	r3, r3, #7
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	fa02 f303 	lsl.w	r3, r2, r3
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	4313      	orrs	r3, r2
 800703c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	08da      	lsrs	r2, r3, #3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	3208      	adds	r2, #8
 8007046:	69b9      	ldr	r1, [r7, #24]
 8007048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	2203      	movs	r2, #3
 8007058:	fa02 f303 	lsl.w	r3, r2, r3
 800705c:	43db      	mvns	r3, r3
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	4013      	ands	r3, r2
 8007062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f003 0203 	and.w	r2, r3, #3
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	fa02 f303 	lsl.w	r3, r2, r3
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	4313      	orrs	r3, r2
 8007078:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 80b4 	beq.w	80071f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	4b60      	ldr	r3, [pc, #384]	; (8007214 <HAL_GPIO_Init+0x30c>)
 8007094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007096:	4a5f      	ldr	r2, [pc, #380]	; (8007214 <HAL_GPIO_Init+0x30c>)
 8007098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800709c:	6453      	str	r3, [r2, #68]	; 0x44
 800709e:	4b5d      	ldr	r3, [pc, #372]	; (8007214 <HAL_GPIO_Init+0x30c>)
 80070a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80070aa:	4a5b      	ldr	r2, [pc, #364]	; (8007218 <HAL_GPIO_Init+0x310>)
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	089b      	lsrs	r3, r3, #2
 80070b0:	3302      	adds	r3, #2
 80070b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	f003 0303 	and.w	r3, r3, #3
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	220f      	movs	r2, #15
 80070c2:	fa02 f303 	lsl.w	r3, r2, r3
 80070c6:	43db      	mvns	r3, r3
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	4013      	ands	r3, r2
 80070cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a52      	ldr	r2, [pc, #328]	; (800721c <HAL_GPIO_Init+0x314>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d02b      	beq.n	800712e <HAL_GPIO_Init+0x226>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a51      	ldr	r2, [pc, #324]	; (8007220 <HAL_GPIO_Init+0x318>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d025      	beq.n	800712a <HAL_GPIO_Init+0x222>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a50      	ldr	r2, [pc, #320]	; (8007224 <HAL_GPIO_Init+0x31c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d01f      	beq.n	8007126 <HAL_GPIO_Init+0x21e>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a4f      	ldr	r2, [pc, #316]	; (8007228 <HAL_GPIO_Init+0x320>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d019      	beq.n	8007122 <HAL_GPIO_Init+0x21a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a4e      	ldr	r2, [pc, #312]	; (800722c <HAL_GPIO_Init+0x324>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d013      	beq.n	800711e <HAL_GPIO_Init+0x216>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a4d      	ldr	r2, [pc, #308]	; (8007230 <HAL_GPIO_Init+0x328>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d00d      	beq.n	800711a <HAL_GPIO_Init+0x212>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a4c      	ldr	r2, [pc, #304]	; (8007234 <HAL_GPIO_Init+0x32c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d007      	beq.n	8007116 <HAL_GPIO_Init+0x20e>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a4b      	ldr	r2, [pc, #300]	; (8007238 <HAL_GPIO_Init+0x330>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d101      	bne.n	8007112 <HAL_GPIO_Init+0x20a>
 800710e:	2307      	movs	r3, #7
 8007110:	e00e      	b.n	8007130 <HAL_GPIO_Init+0x228>
 8007112:	2308      	movs	r3, #8
 8007114:	e00c      	b.n	8007130 <HAL_GPIO_Init+0x228>
 8007116:	2306      	movs	r3, #6
 8007118:	e00a      	b.n	8007130 <HAL_GPIO_Init+0x228>
 800711a:	2305      	movs	r3, #5
 800711c:	e008      	b.n	8007130 <HAL_GPIO_Init+0x228>
 800711e:	2304      	movs	r3, #4
 8007120:	e006      	b.n	8007130 <HAL_GPIO_Init+0x228>
 8007122:	2303      	movs	r3, #3
 8007124:	e004      	b.n	8007130 <HAL_GPIO_Init+0x228>
 8007126:	2302      	movs	r3, #2
 8007128:	e002      	b.n	8007130 <HAL_GPIO_Init+0x228>
 800712a:	2301      	movs	r3, #1
 800712c:	e000      	b.n	8007130 <HAL_GPIO_Init+0x228>
 800712e:	2300      	movs	r3, #0
 8007130:	69fa      	ldr	r2, [r7, #28]
 8007132:	f002 0203 	and.w	r2, r2, #3
 8007136:	0092      	lsls	r2, r2, #2
 8007138:	4093      	lsls	r3, r2
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	4313      	orrs	r3, r2
 800713e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007140:	4935      	ldr	r1, [pc, #212]	; (8007218 <HAL_GPIO_Init+0x310>)
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	089b      	lsrs	r3, r3, #2
 8007146:	3302      	adds	r3, #2
 8007148:	69ba      	ldr	r2, [r7, #24]
 800714a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800714e:	4b3b      	ldr	r3, [pc, #236]	; (800723c <HAL_GPIO_Init+0x334>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	43db      	mvns	r3, r3
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	4013      	ands	r3, r2
 800715c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	4313      	orrs	r3, r2
 8007170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007172:	4a32      	ldr	r2, [pc, #200]	; (800723c <HAL_GPIO_Init+0x334>)
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007178:	4b30      	ldr	r3, [pc, #192]	; (800723c <HAL_GPIO_Init+0x334>)
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	43db      	mvns	r3, r3
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	4013      	ands	r3, r2
 8007186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d003      	beq.n	800719c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	4313      	orrs	r3, r2
 800719a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800719c:	4a27      	ldr	r2, [pc, #156]	; (800723c <HAL_GPIO_Init+0x334>)
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80071a2:	4b26      	ldr	r3, [pc, #152]	; (800723c <HAL_GPIO_Init+0x334>)
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	43db      	mvns	r3, r3
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	4013      	ands	r3, r2
 80071b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80071c6:	4a1d      	ldr	r2, [pc, #116]	; (800723c <HAL_GPIO_Init+0x334>)
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80071cc:	4b1b      	ldr	r3, [pc, #108]	; (800723c <HAL_GPIO_Init+0x334>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	43db      	mvns	r3, r3
 80071d6:	69ba      	ldr	r2, [r7, #24]
 80071d8:	4013      	ands	r3, r2
 80071da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80071f0:	4a12      	ldr	r2, [pc, #72]	; (800723c <HAL_GPIO_Init+0x334>)
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	3301      	adds	r3, #1
 80071fa:	61fb      	str	r3, [r7, #28]
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	2b0f      	cmp	r3, #15
 8007200:	f67f ae90 	bls.w	8006f24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop
 8007208:	3724      	adds	r7, #36	; 0x24
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	40023800 	.word	0x40023800
 8007218:	40013800 	.word	0x40013800
 800721c:	40020000 	.word	0x40020000
 8007220:	40020400 	.word	0x40020400
 8007224:	40020800 	.word	0x40020800
 8007228:	40020c00 	.word	0x40020c00
 800722c:	40021000 	.word	0x40021000
 8007230:	40021400 	.word	0x40021400
 8007234:	40021800 	.word	0x40021800
 8007238:	40021c00 	.word	0x40021c00
 800723c:	40013c00 	.word	0x40013c00

08007240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	807b      	strh	r3, [r7, #2]
 800724c:	4613      	mov	r3, r2
 800724e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007250:	787b      	ldrb	r3, [r7, #1]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007256:	887a      	ldrh	r2, [r7, #2]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800725c:	e003      	b.n	8007266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800725e:	887b      	ldrh	r3, [r7, #2]
 8007260:	041a      	lsls	r2, r3, #16
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	619a      	str	r2, [r3, #24]
}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007272:	b480      	push	{r7}
 8007274:	b085      	sub	sp, #20
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	460b      	mov	r3, r1
 800727c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007284:	887a      	ldrh	r2, [r7, #2]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	4013      	ands	r3, r2
 800728a:	041a      	lsls	r2, r3, #16
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	43d9      	mvns	r1, r3
 8007290:	887b      	ldrh	r3, [r7, #2]
 8007292:	400b      	ands	r3, r1
 8007294:	431a      	orrs	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	619a      	str	r2, [r3, #24]
}
 800729a:	bf00      	nop
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
	...

080072a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e12b      	b.n	8007512 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d106      	bne.n	80072d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7fc fb0e 	bl	80038f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2224      	movs	r2, #36	; 0x24
 80072d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 0201 	bic.w	r2, r2, #1
 80072ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800730a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800730c:	f002 f9a0 	bl	8009650 <HAL_RCC_GetPCLK1Freq>
 8007310:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	4a81      	ldr	r2, [pc, #516]	; (800751c <HAL_I2C_Init+0x274>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d807      	bhi.n	800732c <HAL_I2C_Init+0x84>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4a80      	ldr	r2, [pc, #512]	; (8007520 <HAL_I2C_Init+0x278>)
 8007320:	4293      	cmp	r3, r2
 8007322:	bf94      	ite	ls
 8007324:	2301      	movls	r3, #1
 8007326:	2300      	movhi	r3, #0
 8007328:	b2db      	uxtb	r3, r3
 800732a:	e006      	b.n	800733a <HAL_I2C_Init+0x92>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4a7d      	ldr	r2, [pc, #500]	; (8007524 <HAL_I2C_Init+0x27c>)
 8007330:	4293      	cmp	r3, r2
 8007332:	bf94      	ite	ls
 8007334:	2301      	movls	r3, #1
 8007336:	2300      	movhi	r3, #0
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e0e7      	b.n	8007512 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4a78      	ldr	r2, [pc, #480]	; (8007528 <HAL_I2C_Init+0x280>)
 8007346:	fba2 2303 	umull	r2, r3, r2, r3
 800734a:	0c9b      	lsrs	r3, r3, #18
 800734c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	430a      	orrs	r2, r1
 8007360:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	4a6a      	ldr	r2, [pc, #424]	; (800751c <HAL_I2C_Init+0x274>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d802      	bhi.n	800737c <HAL_I2C_Init+0xd4>
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	3301      	adds	r3, #1
 800737a:	e009      	b.n	8007390 <HAL_I2C_Init+0xe8>
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007382:	fb02 f303 	mul.w	r3, r2, r3
 8007386:	4a69      	ldr	r2, [pc, #420]	; (800752c <HAL_I2C_Init+0x284>)
 8007388:	fba2 2303 	umull	r2, r3, r2, r3
 800738c:	099b      	lsrs	r3, r3, #6
 800738e:	3301      	adds	r3, #1
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	6812      	ldr	r2, [r2, #0]
 8007394:	430b      	orrs	r3, r1
 8007396:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80073a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	495c      	ldr	r1, [pc, #368]	; (800751c <HAL_I2C_Init+0x274>)
 80073ac:	428b      	cmp	r3, r1
 80073ae:	d819      	bhi.n	80073e4 <HAL_I2C_Init+0x13c>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	1e59      	subs	r1, r3, #1
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80073be:	1c59      	adds	r1, r3, #1
 80073c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80073c4:	400b      	ands	r3, r1
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <HAL_I2C_Init+0x138>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	1e59      	subs	r1, r3, #1
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80073d8:	3301      	adds	r3, #1
 80073da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073de:	e051      	b.n	8007484 <HAL_I2C_Init+0x1dc>
 80073e0:	2304      	movs	r3, #4
 80073e2:	e04f      	b.n	8007484 <HAL_I2C_Init+0x1dc>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d111      	bne.n	8007410 <HAL_I2C_Init+0x168>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	1e58      	subs	r0, r3, #1
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6859      	ldr	r1, [r3, #4]
 80073f4:	460b      	mov	r3, r1
 80073f6:	005b      	lsls	r3, r3, #1
 80073f8:	440b      	add	r3, r1
 80073fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80073fe:	3301      	adds	r3, #1
 8007400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007404:	2b00      	cmp	r3, #0
 8007406:	bf0c      	ite	eq
 8007408:	2301      	moveq	r3, #1
 800740a:	2300      	movne	r3, #0
 800740c:	b2db      	uxtb	r3, r3
 800740e:	e012      	b.n	8007436 <HAL_I2C_Init+0x18e>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	1e58      	subs	r0, r3, #1
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6859      	ldr	r1, [r3, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	440b      	add	r3, r1
 800741e:	0099      	lsls	r1, r3, #2
 8007420:	440b      	add	r3, r1
 8007422:	fbb0 f3f3 	udiv	r3, r0, r3
 8007426:	3301      	adds	r3, #1
 8007428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800742c:	2b00      	cmp	r3, #0
 800742e:	bf0c      	ite	eq
 8007430:	2301      	moveq	r3, #1
 8007432:	2300      	movne	r3, #0
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <HAL_I2C_Init+0x196>
 800743a:	2301      	movs	r3, #1
 800743c:	e022      	b.n	8007484 <HAL_I2C_Init+0x1dc>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10e      	bne.n	8007464 <HAL_I2C_Init+0x1bc>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	1e58      	subs	r0, r3, #1
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6859      	ldr	r1, [r3, #4]
 800744e:	460b      	mov	r3, r1
 8007450:	005b      	lsls	r3, r3, #1
 8007452:	440b      	add	r3, r1
 8007454:	fbb0 f3f3 	udiv	r3, r0, r3
 8007458:	3301      	adds	r3, #1
 800745a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800745e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007462:	e00f      	b.n	8007484 <HAL_I2C_Init+0x1dc>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	1e58      	subs	r0, r3, #1
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6859      	ldr	r1, [r3, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	440b      	add	r3, r1
 8007472:	0099      	lsls	r1, r3, #2
 8007474:	440b      	add	r3, r1
 8007476:	fbb0 f3f3 	udiv	r3, r0, r3
 800747a:	3301      	adds	r3, #1
 800747c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007480:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007484:	6879      	ldr	r1, [r7, #4]
 8007486:	6809      	ldr	r1, [r1, #0]
 8007488:	4313      	orrs	r3, r2
 800748a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	69da      	ldr	r2, [r3, #28]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	430a      	orrs	r2, r1
 80074a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80074b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	6911      	ldr	r1, [r2, #16]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	68d2      	ldr	r2, [r2, #12]
 80074be:	4311      	orrs	r1, r2
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	6812      	ldr	r2, [r2, #0]
 80074c4:	430b      	orrs	r3, r1
 80074c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	695a      	ldr	r2, [r3, #20]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	431a      	orrs	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	430a      	orrs	r2, r1
 80074e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f042 0201 	orr.w	r2, r2, #1
 80074f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2220      	movs	r2, #32
 80074fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	000186a0 	.word	0x000186a0
 8007520:	001e847f 	.word	0x001e847f
 8007524:	003d08ff 	.word	0x003d08ff
 8007528:	431bde83 	.word	0x431bde83
 800752c:	10624dd3 	.word	0x10624dd3

08007530 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8007530:	b480      	push	{r7}
 8007532:	b087      	sub	sp, #28
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	607a      	str	r2, [r7, #4]
 800753a:	461a      	mov	r2, r3
 800753c:	460b      	mov	r3, r1
 800753e:	817b      	strh	r3, [r7, #10]
 8007540:	4613      	mov	r3, r2
 8007542:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007544:	2300      	movs	r3, #0
 8007546:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b20      	cmp	r3, #32
 8007552:	f040 808d 	bne.w	8007670 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007556:	4b4a      	ldr	r3, [pc, #296]	; (8007680 <HAL_I2C_Master_Receive_IT+0x150>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	08db      	lsrs	r3, r3, #3
 800755c:	4a49      	ldr	r2, [pc, #292]	; (8007684 <HAL_I2C_Master_Receive_IT+0x154>)
 800755e:	fba2 2303 	umull	r2, r3, r2, r3
 8007562:	0a1a      	lsrs	r2, r3, #8
 8007564:	4613      	mov	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	009a      	lsls	r2, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	3b01      	subs	r3, #1
 8007574:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d116      	bne.n	80075aa <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2220      	movs	r2, #32
 8007586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	f043 0220 	orr.w	r2, r3, #32
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e063      	b.n	8007672 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d0db      	beq.n	8007570 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d101      	bne.n	80075c6 <HAL_I2C_Master_Receive_IT+0x96>
 80075c2:	2302      	movs	r3, #2
 80075c4:	e055      	b.n	8007672 <HAL_I2C_Master_Receive_IT+0x142>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d007      	beq.n	80075ec <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f042 0201 	orr.w	r2, r2, #1
 80075ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2222      	movs	r2, #34	; 0x22
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2210      	movs	r2, #16
 8007608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	893a      	ldrh	r2, [r7, #8]
 800761c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007622:	b29a      	uxth	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4a17      	ldr	r2, [pc, #92]	; (8007688 <HAL_I2C_Master_Receive_IT+0x158>)
 800762c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800762e:	897a      	ldrh	r2, [r7, #10]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800764a:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800765a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800766a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	e000      	b.n	8007672 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8007670:	2302      	movs	r3, #2
  }
}
 8007672:	4618      	mov	r0, r3
 8007674:	371c      	adds	r7, #28
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	20000034 	.word	0x20000034
 8007684:	14f8b589 	.word	0x14f8b589
 8007688:	ffff0000 	.word	0xffff0000

0800768c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b088      	sub	sp, #32
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076b4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
 80076b8:	2b10      	cmp	r3, #16
 80076ba:	d003      	beq.n	80076c4 <HAL_I2C_EV_IRQHandler+0x38>
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
 80076be:	2b40      	cmp	r3, #64	; 0x40
 80076c0:	f040 80c1 	bne.w	8007846 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10d      	bne.n	80076fa <HAL_I2C_EV_IRQHandler+0x6e>
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80076e4:	d003      	beq.n	80076ee <HAL_I2C_EV_IRQHandler+0x62>
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80076ec:	d101      	bne.n	80076f2 <HAL_I2C_EV_IRQHandler+0x66>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e000      	b.n	80076f4 <HAL_I2C_EV_IRQHandler+0x68>
 80076f2:	2300      	movs	r3, #0
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	f000 8132 	beq.w	800795e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00c      	beq.n	800771e <HAL_I2C_EV_IRQHandler+0x92>
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	0a5b      	lsrs	r3, r3, #9
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	d006      	beq.n	800771e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f001 fb51 	bl	8008db8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fcc8 	bl	80080ac <I2C_Master_SB>
 800771c:	e092      	b.n	8007844 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	08db      	lsrs	r3, r3, #3
 8007722:	f003 0301 	and.w	r3, r3, #1
 8007726:	2b00      	cmp	r3, #0
 8007728:	d009      	beq.n	800773e <HAL_I2C_EV_IRQHandler+0xb2>
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	0a5b      	lsrs	r3, r3, #9
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fd3e 	bl	80081b8 <I2C_Master_ADD10>
 800773c:	e082      	b.n	8007844 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	085b      	lsrs	r3, r3, #1
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	2b00      	cmp	r3, #0
 8007748:	d009      	beq.n	800775e <HAL_I2C_EV_IRQHandler+0xd2>
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	0a5b      	lsrs	r3, r3, #9
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	2b00      	cmp	r3, #0
 8007754:	d003      	beq.n	800775e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fd58 	bl	800820c <I2C_Master_ADDR>
 800775c:	e072      	b.n	8007844 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	089b      	lsrs	r3, r3, #2
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	2b00      	cmp	r3, #0
 8007768:	d03b      	beq.n	80077e2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007778:	f000 80f3 	beq.w	8007962 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	09db      	lsrs	r3, r3, #7
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00f      	beq.n	80077a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	0a9b      	lsrs	r3, r3, #10
 800778c:	f003 0301 	and.w	r3, r3, #1
 8007790:	2b00      	cmp	r3, #0
 8007792:	d009      	beq.n	80077a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	089b      	lsrs	r3, r3, #2
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	2b00      	cmp	r3, #0
 800779e:	d103      	bne.n	80077a8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f938 	bl	8007a16 <I2C_MasterTransmit_TXE>
 80077a6:	e04d      	b.n	8007844 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	089b      	lsrs	r3, r3, #2
 80077ac:	f003 0301 	and.w	r3, r3, #1
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 80d6 	beq.w	8007962 <HAL_I2C_EV_IRQHandler+0x2d6>
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	0a5b      	lsrs	r3, r3, #9
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f000 80cf 	beq.w	8007962 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	2b21      	cmp	r3, #33	; 0x21
 80077c8:	d103      	bne.n	80077d2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f9bf 	bl	8007b4e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077d0:	e0c7      	b.n	8007962 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80077d2:	7bfb      	ldrb	r3, [r7, #15]
 80077d4:	2b40      	cmp	r3, #64	; 0x40
 80077d6:	f040 80c4 	bne.w	8007962 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fa2d 	bl	8007c3a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077e0:	e0bf      	b.n	8007962 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077f0:	f000 80b7 	beq.w	8007962 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	099b      	lsrs	r3, r3, #6
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00f      	beq.n	8007820 <HAL_I2C_EV_IRQHandler+0x194>
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	0a9b      	lsrs	r3, r3, #10
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	2b00      	cmp	r3, #0
 800780a:	d009      	beq.n	8007820 <HAL_I2C_EV_IRQHandler+0x194>
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	089b      	lsrs	r3, r3, #2
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	2b00      	cmp	r3, #0
 8007816:	d103      	bne.n	8007820 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 faa2 	bl	8007d62 <I2C_MasterReceive_RXNE>
 800781e:	e011      	b.n	8007844 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	089b      	lsrs	r3, r3, #2
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 809a 	beq.w	8007962 <HAL_I2C_EV_IRQHandler+0x2d6>
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	0a5b      	lsrs	r3, r3, #9
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	2b00      	cmp	r3, #0
 8007838:	f000 8093 	beq.w	8007962 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fb4b 	bl	8007ed8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007842:	e08e      	b.n	8007962 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007844:	e08d      	b.n	8007962 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	2b00      	cmp	r3, #0
 800784c:	d004      	beq.n	8007858 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	61fb      	str	r3, [r7, #28]
 8007856:	e007      	b.n	8007868 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	085b      	lsrs	r3, r3, #1
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	d012      	beq.n	800789a <HAL_I2C_EV_IRQHandler+0x20e>
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	0a5b      	lsrs	r3, r3, #9
 8007878:	f003 0301 	and.w	r3, r3, #1
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00c      	beq.n	800789a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007890:	69b9      	ldr	r1, [r7, #24]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 ff09 	bl	80086aa <I2C_Slave_ADDR>
 8007898:	e066      	b.n	8007968 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	091b      	lsrs	r3, r3, #4
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d009      	beq.n	80078ba <HAL_I2C_EV_IRQHandler+0x22e>
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	0a5b      	lsrs	r3, r3, #9
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 ff44 	bl	8008740 <I2C_Slave_STOPF>
 80078b8:	e056      	b.n	8007968 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	2b21      	cmp	r3, #33	; 0x21
 80078be:	d002      	beq.n	80078c6 <HAL_I2C_EV_IRQHandler+0x23a>
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	2b29      	cmp	r3, #41	; 0x29
 80078c4:	d125      	bne.n	8007912 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	09db      	lsrs	r3, r3, #7
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00f      	beq.n	80078f2 <HAL_I2C_EV_IRQHandler+0x266>
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	0a9b      	lsrs	r3, r3, #10
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d009      	beq.n	80078f2 <HAL_I2C_EV_IRQHandler+0x266>
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	089b      	lsrs	r3, r3, #2
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d103      	bne.n	80078f2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fe1f 	bl	800852e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078f0:	e039      	b.n	8007966 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	089b      	lsrs	r3, r3, #2
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d033      	beq.n	8007966 <HAL_I2C_EV_IRQHandler+0x2da>
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	0a5b      	lsrs	r3, r3, #9
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b00      	cmp	r3, #0
 8007908:	d02d      	beq.n	8007966 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fe4c 	bl	80085a8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007910:	e029      	b.n	8007966 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	099b      	lsrs	r3, r3, #6
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00f      	beq.n	800793e <HAL_I2C_EV_IRQHandler+0x2b2>
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	0a9b      	lsrs	r3, r3, #10
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d009      	beq.n	800793e <HAL_I2C_EV_IRQHandler+0x2b2>
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	089b      	lsrs	r3, r3, #2
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b00      	cmp	r3, #0
 8007934:	d103      	bne.n	800793e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fe57 	bl	80085ea <I2C_SlaveReceive_RXNE>
 800793c:	e014      	b.n	8007968 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	089b      	lsrs	r3, r3, #2
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00e      	beq.n	8007968 <HAL_I2C_EV_IRQHandler+0x2dc>
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	0a5b      	lsrs	r3, r3, #9
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b00      	cmp	r3, #0
 8007954:	d008      	beq.n	8007968 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fe85 	bl	8008666 <I2C_SlaveReceive_BTF>
 800795c:	e004      	b.n	8007968 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800795e:	bf00      	nop
 8007960:	e002      	b.n	8007968 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007962:	bf00      	nop
 8007964:	e000      	b.n	8007968 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007966:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007968:	3720      	adds	r7, #32
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800796e:	b480      	push	{r7}
 8007970:	b083      	sub	sp, #12
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007982:	b480      	push	{r7}
 8007984:	b083      	sub	sp, #12
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800798a:	bf00      	nop
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007996:	b480      	push	{r7}
 8007998:	b083      	sub	sp, #12
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	460b      	mov	r3, r1
 80079a0:	70fb      	strb	r3, [r7, #3]
 80079a2:	4613      	mov	r3, r2
 80079a4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b083      	sub	sp, #12
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80079ba:	bf00      	nop
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80079ce:	bf00      	nop
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80079e2:	bf00      	nop
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007a0a:	bf00      	nop
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b084      	sub	sp, #16
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a24:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a2c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a32:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d150      	bne.n	8007ade <I2C_MasterTransmit_TXE+0xc8>
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
 8007a3e:	2b21      	cmp	r3, #33	; 0x21
 8007a40:	d14d      	bne.n	8007ade <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b08      	cmp	r3, #8
 8007a46:	d01d      	beq.n	8007a84 <I2C_MasterTransmit_TXE+0x6e>
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	2b20      	cmp	r3, #32
 8007a4c:	d01a      	beq.n	8007a84 <I2C_MasterTransmit_TXE+0x6e>
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a54:	d016      	beq.n	8007a84 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a64:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2211      	movs	r2, #17
 8007a6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2220      	movs	r2, #32
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7f9 ff9b 	bl	80019b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007a82:	e060      	b.n	8007b46 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a92:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aa2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b40      	cmp	r3, #64	; 0x40
 8007abc:	d107      	bne.n	8007ace <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7ff ff7d 	bl	80079c6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007acc:	e03b      	b.n	8007b46 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7f9 ff6e 	bl	80019b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007adc:	e033      	b.n	8007b46 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007ade:	7bfb      	ldrb	r3, [r7, #15]
 8007ae0:	2b21      	cmp	r3, #33	; 0x21
 8007ae2:	d005      	beq.n	8007af0 <I2C_MasterTransmit_TXE+0xda>
 8007ae4:	7bbb      	ldrb	r3, [r7, #14]
 8007ae6:	2b40      	cmp	r3, #64	; 0x40
 8007ae8:	d12d      	bne.n	8007b46 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
 8007aec:	2b22      	cmp	r3, #34	; 0x22
 8007aee:	d12a      	bne.n	8007b46 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d108      	bne.n	8007b0c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b08:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007b0a:	e01c      	b.n	8007b46 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	2b40      	cmp	r3, #64	; 0x40
 8007b16:	d103      	bne.n	8007b20 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f88e 	bl	8007c3a <I2C_MemoryTransmit_TXE_BTF>
}
 8007b1e:	e012      	b.n	8007b46 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b24:	781a      	ldrb	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b30:	1c5a      	adds	r2, r3, #1
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007b44:	e7ff      	b.n	8007b46 <I2C_MasterTransmit_TXE+0x130>
 8007b46:	bf00      	nop
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b084      	sub	sp, #16
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b21      	cmp	r3, #33	; 0x21
 8007b66:	d164      	bne.n	8007c32 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d012      	beq.n	8007b98 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b76:	781a      	ldrb	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b82:	1c5a      	adds	r2, r3, #1
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007b96:	e04c      	b.n	8007c32 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2b08      	cmp	r3, #8
 8007b9c:	d01d      	beq.n	8007bda <I2C_MasterTransmit_BTF+0x8c>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2b20      	cmp	r3, #32
 8007ba2:	d01a      	beq.n	8007bda <I2C_MasterTransmit_BTF+0x8c>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007baa:	d016      	beq.n	8007bda <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685a      	ldr	r2, [r3, #4]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007bba:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2211      	movs	r2, #17
 8007bc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2220      	movs	r2, #32
 8007bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7f9 fef0 	bl	80019b8 <HAL_I2C_MasterTxCpltCallback>
}
 8007bd8:	e02b      	b.n	8007c32 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007be8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bf8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2220      	movs	r2, #32
 8007c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b40      	cmp	r3, #64	; 0x40
 8007c12:	d107      	bne.n	8007c24 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff fed2 	bl	80079c6 <HAL_I2C_MemTxCpltCallback>
}
 8007c22:	e006      	b.n	8007c32 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7f9 fec3 	bl	80019b8 <HAL_I2C_MasterTxCpltCallback>
}
 8007c32:	bf00      	nop
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c48:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d11d      	bne.n	8007c8e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d10b      	bne.n	8007c72 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c6a:	1c9a      	adds	r2, r3, #2
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007c70:	e073      	b.n	8007d5a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	121b      	asrs	r3, r3, #8
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c86:	1c5a      	adds	r2, r3, #1
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007c8c:	e065      	b.n	8007d5a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d10b      	bne.n	8007cae <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c9a:	b2da      	uxtb	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca6:	1c5a      	adds	r2, r3, #1
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007cac:	e055      	b.n	8007d5a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d151      	bne.n	8007d5a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
 8007cb8:	2b22      	cmp	r3, #34	; 0x22
 8007cba:	d10d      	bne.n	8007cd8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cca:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007cd6:	e040      	b.n	8007d5a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d015      	beq.n	8007d0e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
 8007ce4:	2b21      	cmp	r3, #33	; 0x21
 8007ce6:	d112      	bne.n	8007d0e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cec:	781a      	ldrb	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf8:	1c5a      	adds	r2, r3, #1
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	3b01      	subs	r3, #1
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007d0c:	e025      	b.n	8007d5a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d120      	bne.n	8007d5a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007d18:	7bfb      	ldrb	r3, [r7, #15]
 8007d1a:	2b21      	cmp	r3, #33	; 0x21
 8007d1c:	d11d      	bne.n	8007d5a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d2c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d3c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2220      	movs	r2, #32
 8007d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff fe36 	bl	80079c6 <HAL_I2C_MemTxCpltCallback>
}
 8007d5a:	bf00      	nop
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b22      	cmp	r3, #34	; 0x22
 8007d74:	f040 80ac 	bne.w	8007ed0 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d921      	bls.n	8007dca <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	691a      	ldr	r2, [r3, #16]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d90:	b2d2      	uxtb	r2, r2
 8007d92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d98:	1c5a      	adds	r2, r3, #1
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	3b01      	subs	r3, #1
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	f040 808c 	bne.w	8007ed0 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dc6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007dc8:	e082      	b.n	8007ed0 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d075      	beq.n	8007ebe <I2C_MasterReceive_RXNE+0x15c>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d002      	beq.n	8007dde <I2C_MasterReceive_RXNE+0x7c>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d16f      	bne.n	8007ebe <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 ffb8 	bl	8008d54 <I2C_WaitOnSTOPRequestThroughIT>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d142      	bne.n	8007e70 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007df8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e08:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	691a      	ldr	r2, [r3, #16]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	b2d2      	uxtb	r2, r2
 8007e16:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2220      	movs	r2, #32
 8007e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	2b40      	cmp	r3, #64	; 0x40
 8007e42:	d10a      	bne.n	8007e5a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7ff fdc1 	bl	80079da <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007e58:	e03a      	b.n	8007ed0 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2212      	movs	r2, #18
 8007e66:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7f9 fd8f 	bl	800198c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007e6e:	e02f      	b.n	8007ed0 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e7e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	691a      	ldr	r2, [r3, #16]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	b2d2      	uxtb	r2, r2
 8007e8c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e92:	1c5a      	adds	r2, r3, #1
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7ff fd99 	bl	80079ee <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007ebc:	e008      	b.n	8007ed0 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ecc:	605a      	str	r2, [r3, #4]
}
 8007ece:	e7ff      	b.n	8007ed0 <I2C_MasterReceive_RXNE+0x16e>
 8007ed0:	bf00      	nop
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	2b04      	cmp	r3, #4
 8007eee:	d11b      	bne.n	8007f28 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007efe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	691a      	ldr	r2, [r3, #16]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0a:	b2d2      	uxtb	r2, r2
 8007f0c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007f26:	e0bd      	b.n	80080a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	d129      	bne.n	8007f86 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f40:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2b04      	cmp	r3, #4
 8007f46:	d00a      	beq.n	8007f5e <I2C_MasterReceive_BTF+0x86>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d007      	beq.n	8007f5e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f5c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	691a      	ldr	r2, [r3, #16]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f68:	b2d2      	uxtb	r2, r2
 8007f6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f70:	1c5a      	adds	r2, r3, #1
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007f84:	e08e      	b.n	80080a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d176      	bne.n	800807e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d002      	beq.n	8007f9c <I2C_MasterReceive_BTF+0xc4>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2b10      	cmp	r3, #16
 8007f9a:	d108      	bne.n	8007fae <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007faa:	601a      	str	r2, [r3, #0]
 8007fac:	e019      	b.n	8007fe2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2b04      	cmp	r3, #4
 8007fb2:	d002      	beq.n	8007fba <I2C_MasterReceive_BTF+0xe2>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d108      	bne.n	8007fcc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	e00a      	b.n	8007fe2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2b10      	cmp	r3, #16
 8007fd0:	d007      	beq.n	8007fe2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fe0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	691a      	ldr	r2, [r3, #16]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fec:	b2d2      	uxtb	r2, r2
 8007fee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff4:	1c5a      	adds	r2, r3, #1
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	3b01      	subs	r3, #1
 8008002:	b29a      	uxth	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	691a      	ldr	r2, [r3, #16]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008012:	b2d2      	uxtb	r2, r2
 8008014:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801a:	1c5a      	adds	r2, r3, #1
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008024:	b29b      	uxth	r3, r3
 8008026:	3b01      	subs	r3, #1
 8008028:	b29a      	uxth	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685a      	ldr	r2, [r3, #4]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800803c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2220      	movs	r2, #32
 8008042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b40      	cmp	r3, #64	; 0x40
 8008050:	d10a      	bne.n	8008068 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7ff fcba 	bl	80079da <HAL_I2C_MemRxCpltCallback>
}
 8008066:	e01d      	b.n	80080a4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2212      	movs	r2, #18
 8008074:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7f9 fc88 	bl	800198c <HAL_I2C_MasterRxCpltCallback>
}
 800807c:	e012      	b.n	80080a4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	691a      	ldr	r2, [r3, #16]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	b2d2      	uxtb	r2, r2
 800808a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	1c5a      	adds	r2, r3, #1
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800809a:	b29b      	uxth	r3, r3
 800809c:	3b01      	subs	r3, #1
 800809e:	b29a      	uxth	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80080a4:	bf00      	nop
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b40      	cmp	r3, #64	; 0x40
 80080be:	d117      	bne.n	80080f0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d109      	bne.n	80080dc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	461a      	mov	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80080d8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80080da:	e067      	b.n	80081ac <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	f043 0301 	orr.w	r3, r3, #1
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	611a      	str	r2, [r3, #16]
}
 80080ee:	e05d      	b.n	80081ac <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080f8:	d133      	bne.n	8008162 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b21      	cmp	r3, #33	; 0x21
 8008104:	d109      	bne.n	800811a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810a:	b2db      	uxtb	r3, r3
 800810c:	461a      	mov	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008116:	611a      	str	r2, [r3, #16]
 8008118:	e008      	b.n	800812c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800811e:	b2db      	uxtb	r3, r3
 8008120:	f043 0301 	orr.w	r3, r3, #1
 8008124:	b2da      	uxtb	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008130:	2b00      	cmp	r3, #0
 8008132:	d004      	beq.n	800813e <I2C_Master_SB+0x92>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800813a:	2b00      	cmp	r3, #0
 800813c:	d108      	bne.n	8008150 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008142:	2b00      	cmp	r3, #0
 8008144:	d032      	beq.n	80081ac <I2C_Master_SB+0x100>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814c:	2b00      	cmp	r3, #0
 800814e:	d02d      	beq.n	80081ac <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800815e:	605a      	str	r2, [r3, #4]
}
 8008160:	e024      	b.n	80081ac <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10e      	bne.n	8008188 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800816e:	b29b      	uxth	r3, r3
 8008170:	11db      	asrs	r3, r3, #7
 8008172:	b2db      	uxtb	r3, r3
 8008174:	f003 0306 	and.w	r3, r3, #6
 8008178:	b2db      	uxtb	r3, r3
 800817a:	f063 030f 	orn	r3, r3, #15
 800817e:	b2da      	uxtb	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	611a      	str	r2, [r3, #16]
}
 8008186:	e011      	b.n	80081ac <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800818c:	2b01      	cmp	r3, #1
 800818e:	d10d      	bne.n	80081ac <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008194:	b29b      	uxth	r3, r3
 8008196:	11db      	asrs	r3, r3, #7
 8008198:	b2db      	uxtb	r3, r3
 800819a:	f003 0306 	and.w	r3, r3, #6
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	f063 030e 	orn	r3, r3, #14
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	611a      	str	r2, [r3, #16]
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d004      	beq.n	80081de <I2C_Master_ADD10+0x26>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d108      	bne.n	80081f0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00c      	beq.n	8008200 <I2C_Master_ADD10+0x48>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d007      	beq.n	8008200 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081fe:	605a      	str	r2, [r3, #4]
  }
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800820c:	b480      	push	{r7}
 800820e:	b091      	sub	sp, #68	; 0x44
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800821a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008222:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008228:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b22      	cmp	r3, #34	; 0x22
 8008234:	f040 8169 	bne.w	800850a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10f      	bne.n	8008260 <I2C_Master_ADDR+0x54>
 8008240:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008244:	2b40      	cmp	r3, #64	; 0x40
 8008246:	d10b      	bne.n	8008260 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008248:	2300      	movs	r3, #0
 800824a:	633b      	str	r3, [r7, #48]	; 0x30
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	633b      	str	r3, [r7, #48]	; 0x30
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	633b      	str	r3, [r7, #48]	; 0x30
 800825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825e:	e160      	b.n	8008522 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008264:	2b00      	cmp	r3, #0
 8008266:	d11d      	bne.n	80082a4 <I2C_Master_ADDR+0x98>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008270:	d118      	bne.n	80082a4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008272:	2300      	movs	r3, #0
 8008274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	695b      	ldr	r3, [r3, #20]
 800827c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008286:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008296:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800829c:	1c5a      	adds	r2, r3, #1
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	651a      	str	r2, [r3, #80]	; 0x50
 80082a2:	e13e      	b.n	8008522 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d113      	bne.n	80082d6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082ae:	2300      	movs	r3, #0
 80082b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	695b      	ldr	r3, [r3, #20]
 80082b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80082c2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	e115      	b.n	8008502 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082da:	b29b      	uxth	r3, r3
 80082dc:	2b01      	cmp	r3, #1
 80082de:	f040 808a 	bne.w	80083f6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80082e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80082e8:	d137      	bne.n	800835a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082f8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008308:	d113      	bne.n	8008332 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008318:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800831a:	2300      	movs	r3, #0
 800831c:	627b      	str	r3, [r7, #36]	; 0x24
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	695b      	ldr	r3, [r3, #20]
 8008324:	627b      	str	r3, [r7, #36]	; 0x24
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	627b      	str	r3, [r7, #36]	; 0x24
 800832e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008330:	e0e7      	b.n	8008502 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008332:	2300      	movs	r3, #0
 8008334:	623b      	str	r3, [r7, #32]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	695b      	ldr	r3, [r3, #20]
 800833c:	623b      	str	r3, [r7, #32]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	623b      	str	r3, [r7, #32]
 8008346:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008356:	601a      	str	r2, [r3, #0]
 8008358:	e0d3      	b.n	8008502 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835c:	2b08      	cmp	r3, #8
 800835e:	d02e      	beq.n	80083be <I2C_Master_ADDR+0x1b2>
 8008360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008362:	2b20      	cmp	r3, #32
 8008364:	d02b      	beq.n	80083be <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008368:	2b12      	cmp	r3, #18
 800836a:	d102      	bne.n	8008372 <I2C_Master_ADDR+0x166>
 800836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836e:	2b01      	cmp	r3, #1
 8008370:	d125      	bne.n	80083be <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008374:	2b04      	cmp	r3, #4
 8008376:	d00e      	beq.n	8008396 <I2C_Master_ADDR+0x18a>
 8008378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837a:	2b02      	cmp	r3, #2
 800837c:	d00b      	beq.n	8008396 <I2C_Master_ADDR+0x18a>
 800837e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008380:	2b10      	cmp	r3, #16
 8008382:	d008      	beq.n	8008396 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	e007      	b.n	80083a6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083a6:	2300      	movs	r3, #0
 80083a8:	61fb      	str	r3, [r7, #28]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	61fb      	str	r3, [r7, #28]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	61fb      	str	r3, [r7, #28]
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	e0a1      	b.n	8008502 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083cc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083ce:	2300      	movs	r3, #0
 80083d0:	61bb      	str	r3, [r7, #24]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	61bb      	str	r3, [r7, #24]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	61bb      	str	r3, [r7, #24]
 80083e2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	e085      	b.n	8008502 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d14d      	bne.n	800849c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008402:	2b04      	cmp	r3, #4
 8008404:	d016      	beq.n	8008434 <I2C_Master_ADDR+0x228>
 8008406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008408:	2b02      	cmp	r3, #2
 800840a:	d013      	beq.n	8008434 <I2C_Master_ADDR+0x228>
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	2b10      	cmp	r3, #16
 8008410:	d010      	beq.n	8008434 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008420:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	e007      	b.n	8008444 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008442:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800844e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008452:	d117      	bne.n	8008484 <I2C_Master_ADDR+0x278>
 8008454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008456:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800845a:	d00b      	beq.n	8008474 <I2C_Master_ADDR+0x268>
 800845c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845e:	2b01      	cmp	r3, #1
 8008460:	d008      	beq.n	8008474 <I2C_Master_ADDR+0x268>
 8008462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008464:	2b08      	cmp	r3, #8
 8008466:	d005      	beq.n	8008474 <I2C_Master_ADDR+0x268>
 8008468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846a:	2b10      	cmp	r3, #16
 800846c:	d002      	beq.n	8008474 <I2C_Master_ADDR+0x268>
 800846e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008470:	2b20      	cmp	r3, #32
 8008472:	d107      	bne.n	8008484 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008482:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008484:	2300      	movs	r3, #0
 8008486:	617b      	str	r3, [r7, #20]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	617b      	str	r3, [r7, #20]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	617b      	str	r3, [r7, #20]
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	e032      	b.n	8008502 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084aa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084ba:	d117      	bne.n	80084ec <I2C_Master_ADDR+0x2e0>
 80084bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80084c2:	d00b      	beq.n	80084dc <I2C_Master_ADDR+0x2d0>
 80084c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d008      	beq.n	80084dc <I2C_Master_ADDR+0x2d0>
 80084ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084cc:	2b08      	cmp	r3, #8
 80084ce:	d005      	beq.n	80084dc <I2C_Master_ADDR+0x2d0>
 80084d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d2:	2b10      	cmp	r3, #16
 80084d4:	d002      	beq.n	80084dc <I2C_Master_ADDR+0x2d0>
 80084d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d8:	2b20      	cmp	r3, #32
 80084da:	d107      	bne.n	80084ec <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	685a      	ldr	r2, [r3, #4]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80084ea:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084ec:	2300      	movs	r3, #0
 80084ee:	613b      	str	r3, [r7, #16]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	695b      	ldr	r3, [r3, #20]
 80084f6:	613b      	str	r3, [r7, #16]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	613b      	str	r3, [r7, #16]
 8008500:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008508:	e00b      	b.n	8008522 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800850a:	2300      	movs	r3, #0
 800850c:	60fb      	str	r3, [r7, #12]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	60fb      	str	r3, [r7, #12]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	60fb      	str	r3, [r7, #12]
 800851e:	68fb      	ldr	r3, [r7, #12]
}
 8008520:	e7ff      	b.n	8008522 <I2C_Master_ADDR+0x316>
 8008522:	bf00      	nop
 8008524:	3744      	adds	r7, #68	; 0x44
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b084      	sub	sp, #16
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800853c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008542:	b29b      	uxth	r3, r3
 8008544:	2b00      	cmp	r3, #0
 8008546:	d02b      	beq.n	80085a0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854c:	781a      	ldrb	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008562:	b29b      	uxth	r3, r3
 8008564:	3b01      	subs	r3, #1
 8008566:	b29a      	uxth	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008570:	b29b      	uxth	r3, r3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d114      	bne.n	80085a0 <I2C_SlaveTransmit_TXE+0x72>
 8008576:	7bfb      	ldrb	r3, [r7, #15]
 8008578:	2b29      	cmp	r3, #41	; 0x29
 800857a:	d111      	bne.n	80085a0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800858a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2221      	movs	r2, #33	; 0x21
 8008590:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2228      	movs	r2, #40	; 0x28
 8008596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7ff f9e7 	bl	800796e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80085a0:	bf00      	nop
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d011      	beq.n	80085de <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085be:	781a      	ldrb	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ca:	1c5a      	adds	r2, r3, #1
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	3b01      	subs	r3, #1
 80085d8:	b29a      	uxth	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80085de:	bf00      	nop
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b084      	sub	sp, #16
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085f8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085fe:	b29b      	uxth	r3, r3
 8008600:	2b00      	cmp	r3, #0
 8008602:	d02c      	beq.n	800865e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	691a      	ldr	r2, [r3, #16]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860e:	b2d2      	uxtb	r2, r2
 8008610:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008616:	1c5a      	adds	r2, r3, #1
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008620:	b29b      	uxth	r3, r3
 8008622:	3b01      	subs	r3, #1
 8008624:	b29a      	uxth	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800862e:	b29b      	uxth	r3, r3
 8008630:	2b00      	cmp	r3, #0
 8008632:	d114      	bne.n	800865e <I2C_SlaveReceive_RXNE+0x74>
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	2b2a      	cmp	r3, #42	; 0x2a
 8008638:	d111      	bne.n	800865e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008648:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2222      	movs	r2, #34	; 0x22
 800864e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2228      	movs	r2, #40	; 0x28
 8008654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7ff f992 	bl	8007982 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800865e:	bf00      	nop
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008666:	b480      	push	{r7}
 8008668:	b083      	sub	sp, #12
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008672:	b29b      	uxth	r3, r3
 8008674:	2b00      	cmp	r3, #0
 8008676:	d012      	beq.n	800869e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	691a      	ldr	r2, [r3, #16]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008682:	b2d2      	uxtb	r2, r2
 8008684:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868a:	1c5a      	adds	r2, r3, #1
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008694:	b29b      	uxth	r3, r3
 8008696:	3b01      	subs	r3, #1
 8008698:	b29a      	uxth	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800869e:	bf00      	nop
 80086a0:	370c      	adds	r7, #12
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b084      	sub	sp, #16
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
 80086b2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80086b4:	2300      	movs	r3, #0
 80086b6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80086c4:	2b28      	cmp	r3, #40	; 0x28
 80086c6:	d127      	bne.n	8008718 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	685a      	ldr	r2, [r3, #4]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086d6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	089b      	lsrs	r3, r3, #2
 80086dc:	f003 0301 	and.w	r3, r3, #1
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d101      	bne.n	80086e8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80086e4:	2301      	movs	r3, #1
 80086e6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	09db      	lsrs	r3, r3, #7
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d103      	bne.n	80086fc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	81bb      	strh	r3, [r7, #12]
 80086fa:	e002      	b.n	8008702 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800870a:	89ba      	ldrh	r2, [r7, #12]
 800870c:	7bfb      	ldrb	r3, [r7, #15]
 800870e:	4619      	mov	r1, r3
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f7ff f940 	bl	8007996 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008716:	e00e      	b.n	8008736 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008718:	2300      	movs	r3, #0
 800871a:	60bb      	str	r3, [r7, #8]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	60bb      	str	r3, [r7, #8]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	60bb      	str	r3, [r7, #8]
 800872c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008736:	bf00      	nop
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
	...

08008740 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800874e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685a      	ldr	r2, [r3, #4]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800875e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008760:	2300      	movs	r3, #0
 8008762:	60bb      	str	r3, [r7, #8]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	60bb      	str	r3, [r7, #8]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f042 0201 	orr.w	r2, r2, #1
 800877a:	601a      	str	r2, [r3, #0]
 800877c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800878c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800879c:	d172      	bne.n	8008884 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	2b22      	cmp	r3, #34	; 0x22
 80087a2:	d002      	beq.n	80087aa <I2C_Slave_STOPF+0x6a>
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
 80087a6:	2b2a      	cmp	r3, #42	; 0x2a
 80087a8:	d135      	bne.n	8008816 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087bc:	b29b      	uxth	r3, r3
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d005      	beq.n	80087ce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c6:	f043 0204 	orr.w	r2, r3, #4
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fd ffca 	bl	800677c <HAL_DMA_GetState>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d049      	beq.n	8008882 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f2:	4a69      	ldr	r2, [pc, #420]	; (8008998 <I2C_Slave_STOPF+0x258>)
 80087f4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fd fe12 	bl	8006424 <HAL_DMA_Abort_IT>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d03d      	beq.n	8008882 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008810:	4610      	mov	r0, r2
 8008812:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008814:	e035      	b.n	8008882 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	b29a      	uxth	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008828:	b29b      	uxth	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d005      	beq.n	800883a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008832:	f043 0204 	orr.w	r2, r3, #4
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008848:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884e:	4618      	mov	r0, r3
 8008850:	f7fd ff94 	bl	800677c <HAL_DMA_GetState>
 8008854:	4603      	mov	r3, r0
 8008856:	2b01      	cmp	r3, #1
 8008858:	d014      	beq.n	8008884 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800885e:	4a4e      	ldr	r2, [pc, #312]	; (8008998 <I2C_Slave_STOPF+0x258>)
 8008860:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008866:	4618      	mov	r0, r3
 8008868:	f7fd fddc 	bl	8006424 <HAL_DMA_Abort_IT>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d008      	beq.n	8008884 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800887c:	4610      	mov	r0, r2
 800887e:	4798      	blx	r3
 8008880:	e000      	b.n	8008884 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008882:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008888:	b29b      	uxth	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d03e      	beq.n	800890c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	f003 0304 	and.w	r3, r3, #4
 8008898:	2b04      	cmp	r3, #4
 800889a:	d112      	bne.n	80088c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	691a      	ldr	r2, [r3, #16]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a6:	b2d2      	uxtb	r2, r2
 80088a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	1c5a      	adds	r2, r3, #1
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	3b01      	subs	r3, #1
 80088bc:	b29a      	uxth	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	695b      	ldr	r3, [r3, #20]
 80088c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088cc:	2b40      	cmp	r3, #64	; 0x40
 80088ce:	d112      	bne.n	80088f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	691a      	ldr	r2, [r3, #16]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088da:	b2d2      	uxtb	r2, r2
 80088dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	1c5a      	adds	r2, r3, #1
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	3b01      	subs	r3, #1
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d005      	beq.n	800890c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008904:	f043 0204 	orr.w	r2, r3, #4
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008910:	2b00      	cmp	r3, #0
 8008912:	d003      	beq.n	800891c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f843 	bl	80089a0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800891a:	e039      	b.n	8008990 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800891c:	7bfb      	ldrb	r3, [r7, #15]
 800891e:	2b2a      	cmp	r3, #42	; 0x2a
 8008920:	d109      	bne.n	8008936 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2228      	movs	r2, #40	; 0x28
 800892c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f7ff f826 	bl	8007982 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800893c:	b2db      	uxtb	r3, r3
 800893e:	2b28      	cmp	r3, #40	; 0x28
 8008940:	d111      	bne.n	8008966 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a15      	ldr	r2, [pc, #84]	; (800899c <I2C_Slave_STOPF+0x25c>)
 8008946:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2220      	movs	r2, #32
 8008952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7ff f827 	bl	80079b2 <HAL_I2C_ListenCpltCallback>
}
 8008964:	e014      	b.n	8008990 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896a:	2b22      	cmp	r3, #34	; 0x22
 800896c:	d002      	beq.n	8008974 <I2C_Slave_STOPF+0x234>
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	2b22      	cmp	r3, #34	; 0x22
 8008972:	d10d      	bne.n	8008990 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2220      	movs	r2, #32
 800897e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7fe fff9 	bl	8007982 <HAL_I2C_SlaveRxCpltCallback>
}
 8008990:	bf00      	nop
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	08008c05 	.word	0x08008c05
 800899c:	ffff0000 	.word	0xffff0000

080089a0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	2b10      	cmp	r3, #16
 80089bc:	d002      	beq.n	80089c4 <I2C_ITError+0x24>
 80089be:	7bbb      	ldrb	r3, [r7, #14]
 80089c0:	2b40      	cmp	r3, #64	; 0x40
 80089c2:	d10a      	bne.n	80089da <I2C_ITError+0x3a>
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	2b22      	cmp	r3, #34	; 0x22
 80089c8:	d107      	bne.n	80089da <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089d8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80089da:	7bfb      	ldrb	r3, [r7, #15]
 80089dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80089e0:	2b28      	cmp	r3, #40	; 0x28
 80089e2:	d107      	bne.n	80089f4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2228      	movs	r2, #40	; 0x28
 80089ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80089f2:	e015      	b.n	8008a20 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a02:	d00a      	beq.n	8008a1a <I2C_ITError+0x7a>
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	2b60      	cmp	r3, #96	; 0x60
 8008a08:	d007      	beq.n	8008a1a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2220      	movs	r2, #32
 8008a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a2e:	d162      	bne.n	8008af6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	685a      	ldr	r2, [r3, #4]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a3e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d020      	beq.n	8008a90 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a52:	4a6a      	ldr	r2, [pc, #424]	; (8008bfc <I2C_ITError+0x25c>)
 8008a54:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fd fce2 	bl	8006424 <HAL_DMA_Abort_IT>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f000 8089 	beq.w	8008b7a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f022 0201 	bic.w	r2, r2, #1
 8008a76:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2220      	movs	r2, #32
 8008a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008a8a:	4610      	mov	r0, r2
 8008a8c:	4798      	blx	r3
 8008a8e:	e074      	b.n	8008b7a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a94:	4a59      	ldr	r2, [pc, #356]	; (8008bfc <I2C_ITError+0x25c>)
 8008a96:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fd fcc1 	bl	8006424 <HAL_DMA_Abort_IT>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d068      	beq.n	8008b7a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab2:	2b40      	cmp	r3, #64	; 0x40
 8008ab4:	d10b      	bne.n	8008ace <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	691a      	ldr	r2, [r3, #16]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac0:	b2d2      	uxtb	r2, r2
 8008ac2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac8:	1c5a      	adds	r2, r3, #1
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f022 0201 	bic.w	r2, r2, #1
 8008adc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2220      	movs	r2, #32
 8008ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008af0:	4610      	mov	r0, r2
 8008af2:	4798      	blx	r3
 8008af4:	e041      	b.n	8008b7a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	2b60      	cmp	r3, #96	; 0x60
 8008b00:	d125      	bne.n	8008b4e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2220      	movs	r2, #32
 8008b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1a:	2b40      	cmp	r3, #64	; 0x40
 8008b1c:	d10b      	bne.n	8008b36 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	691a      	ldr	r2, [r3, #16]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b28:	b2d2      	uxtb	r2, r2
 8008b2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b30:	1c5a      	adds	r2, r3, #1
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f022 0201 	bic.w	r2, r2, #1
 8008b44:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7fe ff5b 	bl	8007a02 <HAL_I2C_AbortCpltCallback>
 8008b4c:	e015      	b.n	8008b7a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	695b      	ldr	r3, [r3, #20]
 8008b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b58:	2b40      	cmp	r3, #64	; 0x40
 8008b5a:	d10b      	bne.n	8008b74 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	691a      	ldr	r2, [r3, #16]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b66:	b2d2      	uxtb	r2, r2
 8008b68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6e:	1c5a      	adds	r2, r3, #1
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f7fe ff3a 	bl	80079ee <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10e      	bne.n	8008ba8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d109      	bne.n	8008ba8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d104      	bne.n	8008ba8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d007      	beq.n	8008bb8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	685a      	ldr	r2, [r3, #4]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008bb6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bbe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc4:	f003 0304 	and.w	r3, r3, #4
 8008bc8:	2b04      	cmp	r3, #4
 8008bca:	d113      	bne.n	8008bf4 <I2C_ITError+0x254>
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
 8008bce:	2b28      	cmp	r3, #40	; 0x28
 8008bd0:	d110      	bne.n	8008bf4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a0a      	ldr	r2, [pc, #40]	; (8008c00 <I2C_ITError+0x260>)
 8008bd6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2220      	movs	r2, #32
 8008be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f7fe fedf 	bl	80079b2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008bf4:	bf00      	nop
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	08008c05 	.word	0x08008c05
 8008c00:	ffff0000 	.word	0xffff0000

08008c04 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c14:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c1c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008c1e:	4b4b      	ldr	r3, [pc, #300]	; (8008d4c <I2C_DMAAbort+0x148>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	08db      	lsrs	r3, r3, #3
 8008c24:	4a4a      	ldr	r2, [pc, #296]	; (8008d50 <I2C_DMAAbort+0x14c>)
 8008c26:	fba2 2303 	umull	r2, r3, r2, r3
 8008c2a:	0a1a      	lsrs	r2, r3, #8
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	00da      	lsls	r2, r3, #3
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d106      	bne.n	8008c4c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c42:	f043 0220 	orr.w	r2, r3, #32
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008c4a:	e00a      	b.n	8008c62 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c60:	d0ea      	beq.n	8008c38 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c6e:	2200      	movs	r2, #0
 8008c70:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7e:	2200      	movs	r2, #0
 8008c80:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c90:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	2200      	movs	r2, #0
 8008c96:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d003      	beq.n	8008ca8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d003      	beq.n	8008cb8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f022 0201 	bic.w	r2, r2, #1
 8008cc6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	2b60      	cmp	r3, #96	; 0x60
 8008cd2:	d10e      	bne.n	8008cf2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	2220      	movs	r2, #32
 8008cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008cea:	6978      	ldr	r0, [r7, #20]
 8008cec:	f7fe fe89 	bl	8007a02 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008cf0:	e027      	b.n	8008d42 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008cf2:	7cfb      	ldrb	r3, [r7, #19]
 8008cf4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008cf8:	2b28      	cmp	r3, #40	; 0x28
 8008cfa:	d117      	bne.n	8008d2c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f042 0201 	orr.w	r2, r2, #1
 8008d0a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d1a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	2228      	movs	r2, #40	; 0x28
 8008d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008d2a:	e007      	b.n	8008d3c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	2220      	movs	r2, #32
 8008d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008d3c:	6978      	ldr	r0, [r7, #20]
 8008d3e:	f7fe fe56 	bl	80079ee <HAL_I2C_ErrorCallback>
}
 8008d42:	bf00      	nop
 8008d44:	3718      	adds	r7, #24
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20000034 	.word	0x20000034
 8008d50:	14f8b589 	.word	0x14f8b589

08008d54 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008d60:	4b13      	ldr	r3, [pc, #76]	; (8008db0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	08db      	lsrs	r3, r3, #3
 8008d66:	4a13      	ldr	r2, [pc, #76]	; (8008db4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008d68:	fba2 2303 	umull	r2, r3, r2, r3
 8008d6c:	0a1a      	lsrs	r2, r3, #8
 8008d6e:	4613      	mov	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4413      	add	r3, r2
 8008d74:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d107      	bne.n	8008d92 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d86:	f043 0220 	orr.w	r2, r3, #32
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e008      	b.n	8008da4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008da0:	d0e9      	beq.n	8008d76 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3714      	adds	r7, #20
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr
 8008db0:	20000034 	.word	0x20000034
 8008db4:	14f8b589 	.word	0x14f8b589

08008db8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008dc8:	d103      	bne.n	8008dd2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008dd0:	e007      	b.n	8008de2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008dda:	d102      	bne.n	8008de2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2208      	movs	r2, #8
 8008de0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008de2:	bf00      	nop
 8008de4:	370c      	adds	r7, #12
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
	...

08008df0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b086      	sub	sp, #24
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d101      	bne.n	8008e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e267      	b.n	80092d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d075      	beq.n	8008efa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008e0e:	4b88      	ldr	r3, [pc, #544]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	f003 030c 	and.w	r3, r3, #12
 8008e16:	2b04      	cmp	r3, #4
 8008e18:	d00c      	beq.n	8008e34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e1a:	4b85      	ldr	r3, [pc, #532]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008e22:	2b08      	cmp	r3, #8
 8008e24:	d112      	bne.n	8008e4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e26:	4b82      	ldr	r3, [pc, #520]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e32:	d10b      	bne.n	8008e4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e34:	4b7e      	ldr	r3, [pc, #504]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d05b      	beq.n	8008ef8 <HAL_RCC_OscConfig+0x108>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d157      	bne.n	8008ef8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e242      	b.n	80092d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e54:	d106      	bne.n	8008e64 <HAL_RCC_OscConfig+0x74>
 8008e56:	4b76      	ldr	r3, [pc, #472]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a75      	ldr	r2, [pc, #468]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e60:	6013      	str	r3, [r2, #0]
 8008e62:	e01d      	b.n	8008ea0 <HAL_RCC_OscConfig+0xb0>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e6c:	d10c      	bne.n	8008e88 <HAL_RCC_OscConfig+0x98>
 8008e6e:	4b70      	ldr	r3, [pc, #448]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a6f      	ldr	r2, [pc, #444]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e78:	6013      	str	r3, [r2, #0]
 8008e7a:	4b6d      	ldr	r3, [pc, #436]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a6c      	ldr	r2, [pc, #432]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e84:	6013      	str	r3, [r2, #0]
 8008e86:	e00b      	b.n	8008ea0 <HAL_RCC_OscConfig+0xb0>
 8008e88:	4b69      	ldr	r3, [pc, #420]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a68      	ldr	r2, [pc, #416]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e92:	6013      	str	r3, [r2, #0]
 8008e94:	4b66      	ldr	r3, [pc, #408]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a65      	ldr	r2, [pc, #404]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d013      	beq.n	8008ed0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ea8:	f7fc fd00 	bl	80058ac <HAL_GetTick>
 8008eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008eae:	e008      	b.n	8008ec2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008eb0:	f7fc fcfc 	bl	80058ac <HAL_GetTick>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	2b64      	cmp	r3, #100	; 0x64
 8008ebc:	d901      	bls.n	8008ec2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e207      	b.n	80092d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ec2:	4b5b      	ldr	r3, [pc, #364]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d0f0      	beq.n	8008eb0 <HAL_RCC_OscConfig+0xc0>
 8008ece:	e014      	b.n	8008efa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ed0:	f7fc fcec 	bl	80058ac <HAL_GetTick>
 8008ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ed6:	e008      	b.n	8008eea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ed8:	f7fc fce8 	bl	80058ac <HAL_GetTick>
 8008edc:	4602      	mov	r2, r0
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	2b64      	cmp	r3, #100	; 0x64
 8008ee4:	d901      	bls.n	8008eea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e1f3      	b.n	80092d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008eea:	4b51      	ldr	r3, [pc, #324]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1f0      	bne.n	8008ed8 <HAL_RCC_OscConfig+0xe8>
 8008ef6:	e000      	b.n	8008efa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 0302 	and.w	r3, r3, #2
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d063      	beq.n	8008fce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008f06:	4b4a      	ldr	r3, [pc, #296]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f003 030c 	and.w	r3, r3, #12
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00b      	beq.n	8008f2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f12:	4b47      	ldr	r3, [pc, #284]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008f1a:	2b08      	cmp	r3, #8
 8008f1c:	d11c      	bne.n	8008f58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f1e:	4b44      	ldr	r3, [pc, #272]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d116      	bne.n	8008f58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f2a:	4b41      	ldr	r3, [pc, #260]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0302 	and.w	r3, r3, #2
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d005      	beq.n	8008f42 <HAL_RCC_OscConfig+0x152>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d001      	beq.n	8008f42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e1c7      	b.n	80092d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f42:	4b3b      	ldr	r3, [pc, #236]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	00db      	lsls	r3, r3, #3
 8008f50:	4937      	ldr	r1, [pc, #220]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008f52:	4313      	orrs	r3, r2
 8008f54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f56:	e03a      	b.n	8008fce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d020      	beq.n	8008fa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f60:	4b34      	ldr	r3, [pc, #208]	; (8009034 <HAL_RCC_OscConfig+0x244>)
 8008f62:	2201      	movs	r2, #1
 8008f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f66:	f7fc fca1 	bl	80058ac <HAL_GetTick>
 8008f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f6c:	e008      	b.n	8008f80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f6e:	f7fc fc9d 	bl	80058ac <HAL_GetTick>
 8008f72:	4602      	mov	r2, r0
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	1ad3      	subs	r3, r2, r3
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d901      	bls.n	8008f80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	e1a8      	b.n	80092d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f80:	4b2b      	ldr	r3, [pc, #172]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 0302 	and.w	r3, r3, #2
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d0f0      	beq.n	8008f6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f8c:	4b28      	ldr	r3, [pc, #160]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	00db      	lsls	r3, r3, #3
 8008f9a:	4925      	ldr	r1, [pc, #148]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	600b      	str	r3, [r1, #0]
 8008fa0:	e015      	b.n	8008fce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008fa2:	4b24      	ldr	r3, [pc, #144]	; (8009034 <HAL_RCC_OscConfig+0x244>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fa8:	f7fc fc80 	bl	80058ac <HAL_GetTick>
 8008fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008fae:	e008      	b.n	8008fc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fb0:	f7fc fc7c 	bl	80058ac <HAL_GetTick>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d901      	bls.n	8008fc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	e187      	b.n	80092d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008fc2:	4b1b      	ldr	r3, [pc, #108]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 0302 	and.w	r3, r3, #2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1f0      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 0308 	and.w	r3, r3, #8
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d036      	beq.n	8009048 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d016      	beq.n	8009010 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008fe2:	4b15      	ldr	r3, [pc, #84]	; (8009038 <HAL_RCC_OscConfig+0x248>)
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fe8:	f7fc fc60 	bl	80058ac <HAL_GetTick>
 8008fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008fee:	e008      	b.n	8009002 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ff0:	f7fc fc5c 	bl	80058ac <HAL_GetTick>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d901      	bls.n	8009002 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008ffe:	2303      	movs	r3, #3
 8009000:	e167      	b.n	80092d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009002:	4b0b      	ldr	r3, [pc, #44]	; (8009030 <HAL_RCC_OscConfig+0x240>)
 8009004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009006:	f003 0302 	and.w	r3, r3, #2
 800900a:	2b00      	cmp	r3, #0
 800900c:	d0f0      	beq.n	8008ff0 <HAL_RCC_OscConfig+0x200>
 800900e:	e01b      	b.n	8009048 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009010:	4b09      	ldr	r3, [pc, #36]	; (8009038 <HAL_RCC_OscConfig+0x248>)
 8009012:	2200      	movs	r2, #0
 8009014:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009016:	f7fc fc49 	bl	80058ac <HAL_GetTick>
 800901a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800901c:	e00e      	b.n	800903c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800901e:	f7fc fc45 	bl	80058ac <HAL_GetTick>
 8009022:	4602      	mov	r2, r0
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	2b02      	cmp	r3, #2
 800902a:	d907      	bls.n	800903c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800902c:	2303      	movs	r3, #3
 800902e:	e150      	b.n	80092d2 <HAL_RCC_OscConfig+0x4e2>
 8009030:	40023800 	.word	0x40023800
 8009034:	42470000 	.word	0x42470000
 8009038:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800903c:	4b88      	ldr	r3, [pc, #544]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 800903e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009040:	f003 0302 	and.w	r3, r3, #2
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1ea      	bne.n	800901e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0304 	and.w	r3, r3, #4
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 8097 	beq.w	8009184 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009056:	2300      	movs	r3, #0
 8009058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800905a:	4b81      	ldr	r3, [pc, #516]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 800905c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009062:	2b00      	cmp	r3, #0
 8009064:	d10f      	bne.n	8009086 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009066:	2300      	movs	r3, #0
 8009068:	60bb      	str	r3, [r7, #8]
 800906a:	4b7d      	ldr	r3, [pc, #500]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 800906c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906e:	4a7c      	ldr	r2, [pc, #496]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 8009070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009074:	6413      	str	r3, [r2, #64]	; 0x40
 8009076:	4b7a      	ldr	r3, [pc, #488]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 8009078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800907e:	60bb      	str	r3, [r7, #8]
 8009080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009082:	2301      	movs	r3, #1
 8009084:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009086:	4b77      	ldr	r3, [pc, #476]	; (8009264 <HAL_RCC_OscConfig+0x474>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800908e:	2b00      	cmp	r3, #0
 8009090:	d118      	bne.n	80090c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009092:	4b74      	ldr	r3, [pc, #464]	; (8009264 <HAL_RCC_OscConfig+0x474>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a73      	ldr	r2, [pc, #460]	; (8009264 <HAL_RCC_OscConfig+0x474>)
 8009098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800909c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800909e:	f7fc fc05 	bl	80058ac <HAL_GetTick>
 80090a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090a4:	e008      	b.n	80090b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090a6:	f7fc fc01 	bl	80058ac <HAL_GetTick>
 80090aa:	4602      	mov	r2, r0
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d901      	bls.n	80090b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e10c      	b.n	80092d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090b8:	4b6a      	ldr	r3, [pc, #424]	; (8009264 <HAL_RCC_OscConfig+0x474>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d0f0      	beq.n	80090a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d106      	bne.n	80090da <HAL_RCC_OscConfig+0x2ea>
 80090cc:	4b64      	ldr	r3, [pc, #400]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 80090ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090d0:	4a63      	ldr	r2, [pc, #396]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 80090d2:	f043 0301 	orr.w	r3, r3, #1
 80090d6:	6713      	str	r3, [r2, #112]	; 0x70
 80090d8:	e01c      	b.n	8009114 <HAL_RCC_OscConfig+0x324>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	2b05      	cmp	r3, #5
 80090e0:	d10c      	bne.n	80090fc <HAL_RCC_OscConfig+0x30c>
 80090e2:	4b5f      	ldr	r3, [pc, #380]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 80090e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e6:	4a5e      	ldr	r2, [pc, #376]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 80090e8:	f043 0304 	orr.w	r3, r3, #4
 80090ec:	6713      	str	r3, [r2, #112]	; 0x70
 80090ee:	4b5c      	ldr	r3, [pc, #368]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 80090f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f2:	4a5b      	ldr	r2, [pc, #364]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 80090f4:	f043 0301 	orr.w	r3, r3, #1
 80090f8:	6713      	str	r3, [r2, #112]	; 0x70
 80090fa:	e00b      	b.n	8009114 <HAL_RCC_OscConfig+0x324>
 80090fc:	4b58      	ldr	r3, [pc, #352]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 80090fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009100:	4a57      	ldr	r2, [pc, #348]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 8009102:	f023 0301 	bic.w	r3, r3, #1
 8009106:	6713      	str	r3, [r2, #112]	; 0x70
 8009108:	4b55      	ldr	r3, [pc, #340]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 800910a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800910c:	4a54      	ldr	r2, [pc, #336]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 800910e:	f023 0304 	bic.w	r3, r3, #4
 8009112:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d015      	beq.n	8009148 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800911c:	f7fc fbc6 	bl	80058ac <HAL_GetTick>
 8009120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009122:	e00a      	b.n	800913a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009124:	f7fc fbc2 	bl	80058ac <HAL_GetTick>
 8009128:	4602      	mov	r2, r0
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009132:	4293      	cmp	r3, r2
 8009134:	d901      	bls.n	800913a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e0cb      	b.n	80092d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800913a:	4b49      	ldr	r3, [pc, #292]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 800913c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800913e:	f003 0302 	and.w	r3, r3, #2
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0ee      	beq.n	8009124 <HAL_RCC_OscConfig+0x334>
 8009146:	e014      	b.n	8009172 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009148:	f7fc fbb0 	bl	80058ac <HAL_GetTick>
 800914c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800914e:	e00a      	b.n	8009166 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009150:	f7fc fbac 	bl	80058ac <HAL_GetTick>
 8009154:	4602      	mov	r2, r0
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	f241 3288 	movw	r2, #5000	; 0x1388
 800915e:	4293      	cmp	r3, r2
 8009160:	d901      	bls.n	8009166 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e0b5      	b.n	80092d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009166:	4b3e      	ldr	r3, [pc, #248]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 8009168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800916a:	f003 0302 	and.w	r3, r3, #2
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1ee      	bne.n	8009150 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009172:	7dfb      	ldrb	r3, [r7, #23]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d105      	bne.n	8009184 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009178:	4b39      	ldr	r3, [pc, #228]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 800917a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917c:	4a38      	ldr	r2, [pc, #224]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 800917e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009182:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	2b00      	cmp	r3, #0
 800918a:	f000 80a1 	beq.w	80092d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800918e:	4b34      	ldr	r3, [pc, #208]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	f003 030c 	and.w	r3, r3, #12
 8009196:	2b08      	cmp	r3, #8
 8009198:	d05c      	beq.n	8009254 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	699b      	ldr	r3, [r3, #24]
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d141      	bne.n	8009226 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091a2:	4b31      	ldr	r3, [pc, #196]	; (8009268 <HAL_RCC_OscConfig+0x478>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091a8:	f7fc fb80 	bl	80058ac <HAL_GetTick>
 80091ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091ae:	e008      	b.n	80091c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091b0:	f7fc fb7c 	bl	80058ac <HAL_GetTick>
 80091b4:	4602      	mov	r2, r0
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d901      	bls.n	80091c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80091be:	2303      	movs	r3, #3
 80091c0:	e087      	b.n	80092d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091c2:	4b27      	ldr	r3, [pc, #156]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1f0      	bne.n	80091b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	69da      	ldr	r2, [r3, #28]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	431a      	orrs	r2, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	019b      	lsls	r3, r3, #6
 80091de:	431a      	orrs	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e4:	085b      	lsrs	r3, r3, #1
 80091e6:	3b01      	subs	r3, #1
 80091e8:	041b      	lsls	r3, r3, #16
 80091ea:	431a      	orrs	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f0:	061b      	lsls	r3, r3, #24
 80091f2:	491b      	ldr	r1, [pc, #108]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 80091f4:	4313      	orrs	r3, r2
 80091f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80091f8:	4b1b      	ldr	r3, [pc, #108]	; (8009268 <HAL_RCC_OscConfig+0x478>)
 80091fa:	2201      	movs	r2, #1
 80091fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091fe:	f7fc fb55 	bl	80058ac <HAL_GetTick>
 8009202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009204:	e008      	b.n	8009218 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009206:	f7fc fb51 	bl	80058ac <HAL_GetTick>
 800920a:	4602      	mov	r2, r0
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	1ad3      	subs	r3, r2, r3
 8009210:	2b02      	cmp	r3, #2
 8009212:	d901      	bls.n	8009218 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009214:	2303      	movs	r3, #3
 8009216:	e05c      	b.n	80092d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009218:	4b11      	ldr	r3, [pc, #68]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009220:	2b00      	cmp	r3, #0
 8009222:	d0f0      	beq.n	8009206 <HAL_RCC_OscConfig+0x416>
 8009224:	e054      	b.n	80092d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009226:	4b10      	ldr	r3, [pc, #64]	; (8009268 <HAL_RCC_OscConfig+0x478>)
 8009228:	2200      	movs	r2, #0
 800922a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800922c:	f7fc fb3e 	bl	80058ac <HAL_GetTick>
 8009230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009232:	e008      	b.n	8009246 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009234:	f7fc fb3a 	bl	80058ac <HAL_GetTick>
 8009238:	4602      	mov	r2, r0
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	2b02      	cmp	r3, #2
 8009240:	d901      	bls.n	8009246 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e045      	b.n	80092d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009246:	4b06      	ldr	r3, [pc, #24]	; (8009260 <HAL_RCC_OscConfig+0x470>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1f0      	bne.n	8009234 <HAL_RCC_OscConfig+0x444>
 8009252:	e03d      	b.n	80092d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	699b      	ldr	r3, [r3, #24]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d107      	bne.n	800926c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	e038      	b.n	80092d2 <HAL_RCC_OscConfig+0x4e2>
 8009260:	40023800 	.word	0x40023800
 8009264:	40007000 	.word	0x40007000
 8009268:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800926c:	4b1b      	ldr	r3, [pc, #108]	; (80092dc <HAL_RCC_OscConfig+0x4ec>)
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	699b      	ldr	r3, [r3, #24]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d028      	beq.n	80092cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009284:	429a      	cmp	r2, r3
 8009286:	d121      	bne.n	80092cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009292:	429a      	cmp	r2, r3
 8009294:	d11a      	bne.n	80092cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800929c:	4013      	ands	r3, r2
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80092a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d111      	bne.n	80092cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b2:	085b      	lsrs	r3, r3, #1
 80092b4:	3b01      	subs	r3, #1
 80092b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d107      	bne.n	80092cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d001      	beq.n	80092d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e000      	b.n	80092d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3718      	adds	r7, #24
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	40023800 	.word	0x40023800

080092e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d101      	bne.n	80092f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e0cc      	b.n	800948e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80092f4:	4b68      	ldr	r3, [pc, #416]	; (8009498 <HAL_RCC_ClockConfig+0x1b8>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 0307 	and.w	r3, r3, #7
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d90c      	bls.n	800931c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009302:	4b65      	ldr	r3, [pc, #404]	; (8009498 <HAL_RCC_ClockConfig+0x1b8>)
 8009304:	683a      	ldr	r2, [r7, #0]
 8009306:	b2d2      	uxtb	r2, r2
 8009308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800930a:	4b63      	ldr	r3, [pc, #396]	; (8009498 <HAL_RCC_ClockConfig+0x1b8>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0307 	and.w	r3, r3, #7
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	429a      	cmp	r2, r3
 8009316:	d001      	beq.n	800931c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	e0b8      	b.n	800948e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 0302 	and.w	r3, r3, #2
 8009324:	2b00      	cmp	r3, #0
 8009326:	d020      	beq.n	800936a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0304 	and.w	r3, r3, #4
 8009330:	2b00      	cmp	r3, #0
 8009332:	d005      	beq.n	8009340 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009334:	4b59      	ldr	r3, [pc, #356]	; (800949c <HAL_RCC_ClockConfig+0x1bc>)
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	4a58      	ldr	r2, [pc, #352]	; (800949c <HAL_RCC_ClockConfig+0x1bc>)
 800933a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800933e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 0308 	and.w	r3, r3, #8
 8009348:	2b00      	cmp	r3, #0
 800934a:	d005      	beq.n	8009358 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800934c:	4b53      	ldr	r3, [pc, #332]	; (800949c <HAL_RCC_ClockConfig+0x1bc>)
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	4a52      	ldr	r2, [pc, #328]	; (800949c <HAL_RCC_ClockConfig+0x1bc>)
 8009352:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009356:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009358:	4b50      	ldr	r3, [pc, #320]	; (800949c <HAL_RCC_ClockConfig+0x1bc>)
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	494d      	ldr	r1, [pc, #308]	; (800949c <HAL_RCC_ClockConfig+0x1bc>)
 8009366:	4313      	orrs	r3, r2
 8009368:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f003 0301 	and.w	r3, r3, #1
 8009372:	2b00      	cmp	r3, #0
 8009374:	d044      	beq.n	8009400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	2b01      	cmp	r3, #1
 800937c:	d107      	bne.n	800938e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800937e:	4b47      	ldr	r3, [pc, #284]	; (800949c <HAL_RCC_ClockConfig+0x1bc>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d119      	bne.n	80093be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	e07f      	b.n	800948e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	2b02      	cmp	r3, #2
 8009394:	d003      	beq.n	800939e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800939a:	2b03      	cmp	r3, #3
 800939c:	d107      	bne.n	80093ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800939e:	4b3f      	ldr	r3, [pc, #252]	; (800949c <HAL_RCC_ClockConfig+0x1bc>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d109      	bne.n	80093be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e06f      	b.n	800948e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093ae:	4b3b      	ldr	r3, [pc, #236]	; (800949c <HAL_RCC_ClockConfig+0x1bc>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0302 	and.w	r3, r3, #2
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d101      	bne.n	80093be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e067      	b.n	800948e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80093be:	4b37      	ldr	r3, [pc, #220]	; (800949c <HAL_RCC_ClockConfig+0x1bc>)
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	f023 0203 	bic.w	r2, r3, #3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	4934      	ldr	r1, [pc, #208]	; (800949c <HAL_RCC_ClockConfig+0x1bc>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80093d0:	f7fc fa6c 	bl	80058ac <HAL_GetTick>
 80093d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093d6:	e00a      	b.n	80093ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093d8:	f7fc fa68 	bl	80058ac <HAL_GetTick>
 80093dc:	4602      	mov	r2, r0
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d901      	bls.n	80093ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80093ea:	2303      	movs	r3, #3
 80093ec:	e04f      	b.n	800948e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093ee:	4b2b      	ldr	r3, [pc, #172]	; (800949c <HAL_RCC_ClockConfig+0x1bc>)
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	f003 020c 	and.w	r2, r3, #12
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d1eb      	bne.n	80093d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009400:	4b25      	ldr	r3, [pc, #148]	; (8009498 <HAL_RCC_ClockConfig+0x1b8>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 0307 	and.w	r3, r3, #7
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	429a      	cmp	r2, r3
 800940c:	d20c      	bcs.n	8009428 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800940e:	4b22      	ldr	r3, [pc, #136]	; (8009498 <HAL_RCC_ClockConfig+0x1b8>)
 8009410:	683a      	ldr	r2, [r7, #0]
 8009412:	b2d2      	uxtb	r2, r2
 8009414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009416:	4b20      	ldr	r3, [pc, #128]	; (8009498 <HAL_RCC_ClockConfig+0x1b8>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 0307 	and.w	r3, r3, #7
 800941e:	683a      	ldr	r2, [r7, #0]
 8009420:	429a      	cmp	r2, r3
 8009422:	d001      	beq.n	8009428 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	e032      	b.n	800948e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 0304 	and.w	r3, r3, #4
 8009430:	2b00      	cmp	r3, #0
 8009432:	d008      	beq.n	8009446 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009434:	4b19      	ldr	r3, [pc, #100]	; (800949c <HAL_RCC_ClockConfig+0x1bc>)
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	4916      	ldr	r1, [pc, #88]	; (800949c <HAL_RCC_ClockConfig+0x1bc>)
 8009442:	4313      	orrs	r3, r2
 8009444:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f003 0308 	and.w	r3, r3, #8
 800944e:	2b00      	cmp	r3, #0
 8009450:	d009      	beq.n	8009466 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009452:	4b12      	ldr	r3, [pc, #72]	; (800949c <HAL_RCC_ClockConfig+0x1bc>)
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	00db      	lsls	r3, r3, #3
 8009460:	490e      	ldr	r1, [pc, #56]	; (800949c <HAL_RCC_ClockConfig+0x1bc>)
 8009462:	4313      	orrs	r3, r2
 8009464:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009466:	f000 f821 	bl	80094ac <HAL_RCC_GetSysClockFreq>
 800946a:	4602      	mov	r2, r0
 800946c:	4b0b      	ldr	r3, [pc, #44]	; (800949c <HAL_RCC_ClockConfig+0x1bc>)
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	091b      	lsrs	r3, r3, #4
 8009472:	f003 030f 	and.w	r3, r3, #15
 8009476:	490a      	ldr	r1, [pc, #40]	; (80094a0 <HAL_RCC_ClockConfig+0x1c0>)
 8009478:	5ccb      	ldrb	r3, [r1, r3]
 800947a:	fa22 f303 	lsr.w	r3, r2, r3
 800947e:	4a09      	ldr	r2, [pc, #36]	; (80094a4 <HAL_RCC_ClockConfig+0x1c4>)
 8009480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009482:	4b09      	ldr	r3, [pc, #36]	; (80094a8 <HAL_RCC_ClockConfig+0x1c8>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4618      	mov	r0, r3
 8009488:	f7fb f9f8 	bl	800487c <HAL_InitTick>

  return HAL_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	40023c00 	.word	0x40023c00
 800949c:	40023800 	.word	0x40023800
 80094a0:	0800ec70 	.word	0x0800ec70
 80094a4:	20000034 	.word	0x20000034
 80094a8:	20000038 	.word	0x20000038

080094ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094b0:	b090      	sub	sp, #64	; 0x40
 80094b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80094b4:	2300      	movs	r3, #0
 80094b6:	637b      	str	r3, [r7, #52]	; 0x34
 80094b8:	2300      	movs	r3, #0
 80094ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094bc:	2300      	movs	r3, #0
 80094be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80094c0:	2300      	movs	r3, #0
 80094c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80094c4:	4b59      	ldr	r3, [pc, #356]	; (800962c <HAL_RCC_GetSysClockFreq+0x180>)
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f003 030c 	and.w	r3, r3, #12
 80094cc:	2b08      	cmp	r3, #8
 80094ce:	d00d      	beq.n	80094ec <HAL_RCC_GetSysClockFreq+0x40>
 80094d0:	2b08      	cmp	r3, #8
 80094d2:	f200 80a1 	bhi.w	8009618 <HAL_RCC_GetSysClockFreq+0x16c>
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d002      	beq.n	80094e0 <HAL_RCC_GetSysClockFreq+0x34>
 80094da:	2b04      	cmp	r3, #4
 80094dc:	d003      	beq.n	80094e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80094de:	e09b      	b.n	8009618 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80094e0:	4b53      	ldr	r3, [pc, #332]	; (8009630 <HAL_RCC_GetSysClockFreq+0x184>)
 80094e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80094e4:	e09b      	b.n	800961e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80094e6:	4b53      	ldr	r3, [pc, #332]	; (8009634 <HAL_RCC_GetSysClockFreq+0x188>)
 80094e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80094ea:	e098      	b.n	800961e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80094ec:	4b4f      	ldr	r3, [pc, #316]	; (800962c <HAL_RCC_GetSysClockFreq+0x180>)
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80094f6:	4b4d      	ldr	r3, [pc, #308]	; (800962c <HAL_RCC_GetSysClockFreq+0x180>)
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d028      	beq.n	8009554 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009502:	4b4a      	ldr	r3, [pc, #296]	; (800962c <HAL_RCC_GetSysClockFreq+0x180>)
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	099b      	lsrs	r3, r3, #6
 8009508:	2200      	movs	r2, #0
 800950a:	623b      	str	r3, [r7, #32]
 800950c:	627a      	str	r2, [r7, #36]	; 0x24
 800950e:	6a3b      	ldr	r3, [r7, #32]
 8009510:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009514:	2100      	movs	r1, #0
 8009516:	4b47      	ldr	r3, [pc, #284]	; (8009634 <HAL_RCC_GetSysClockFreq+0x188>)
 8009518:	fb03 f201 	mul.w	r2, r3, r1
 800951c:	2300      	movs	r3, #0
 800951e:	fb00 f303 	mul.w	r3, r0, r3
 8009522:	4413      	add	r3, r2
 8009524:	4a43      	ldr	r2, [pc, #268]	; (8009634 <HAL_RCC_GetSysClockFreq+0x188>)
 8009526:	fba0 1202 	umull	r1, r2, r0, r2
 800952a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800952c:	460a      	mov	r2, r1
 800952e:	62ba      	str	r2, [r7, #40]	; 0x28
 8009530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009532:	4413      	add	r3, r2
 8009534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009538:	2200      	movs	r2, #0
 800953a:	61bb      	str	r3, [r7, #24]
 800953c:	61fa      	str	r2, [r7, #28]
 800953e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009542:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009546:	f7f7 fb11 	bl	8000b6c <__aeabi_uldivmod>
 800954a:	4602      	mov	r2, r0
 800954c:	460b      	mov	r3, r1
 800954e:	4613      	mov	r3, r2
 8009550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009552:	e053      	b.n	80095fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009554:	4b35      	ldr	r3, [pc, #212]	; (800962c <HAL_RCC_GetSysClockFreq+0x180>)
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	099b      	lsrs	r3, r3, #6
 800955a:	2200      	movs	r2, #0
 800955c:	613b      	str	r3, [r7, #16]
 800955e:	617a      	str	r2, [r7, #20]
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009566:	f04f 0b00 	mov.w	fp, #0
 800956a:	4652      	mov	r2, sl
 800956c:	465b      	mov	r3, fp
 800956e:	f04f 0000 	mov.w	r0, #0
 8009572:	f04f 0100 	mov.w	r1, #0
 8009576:	0159      	lsls	r1, r3, #5
 8009578:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800957c:	0150      	lsls	r0, r2, #5
 800957e:	4602      	mov	r2, r0
 8009580:	460b      	mov	r3, r1
 8009582:	ebb2 080a 	subs.w	r8, r2, sl
 8009586:	eb63 090b 	sbc.w	r9, r3, fp
 800958a:	f04f 0200 	mov.w	r2, #0
 800958e:	f04f 0300 	mov.w	r3, #0
 8009592:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009596:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800959a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800959e:	ebb2 0408 	subs.w	r4, r2, r8
 80095a2:	eb63 0509 	sbc.w	r5, r3, r9
 80095a6:	f04f 0200 	mov.w	r2, #0
 80095aa:	f04f 0300 	mov.w	r3, #0
 80095ae:	00eb      	lsls	r3, r5, #3
 80095b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80095b4:	00e2      	lsls	r2, r4, #3
 80095b6:	4614      	mov	r4, r2
 80095b8:	461d      	mov	r5, r3
 80095ba:	eb14 030a 	adds.w	r3, r4, sl
 80095be:	603b      	str	r3, [r7, #0]
 80095c0:	eb45 030b 	adc.w	r3, r5, fp
 80095c4:	607b      	str	r3, [r7, #4]
 80095c6:	f04f 0200 	mov.w	r2, #0
 80095ca:	f04f 0300 	mov.w	r3, #0
 80095ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80095d2:	4629      	mov	r1, r5
 80095d4:	028b      	lsls	r3, r1, #10
 80095d6:	4621      	mov	r1, r4
 80095d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80095dc:	4621      	mov	r1, r4
 80095de:	028a      	lsls	r2, r1, #10
 80095e0:	4610      	mov	r0, r2
 80095e2:	4619      	mov	r1, r3
 80095e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e6:	2200      	movs	r2, #0
 80095e8:	60bb      	str	r3, [r7, #8]
 80095ea:	60fa      	str	r2, [r7, #12]
 80095ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095f0:	f7f7 fabc 	bl	8000b6c <__aeabi_uldivmod>
 80095f4:	4602      	mov	r2, r0
 80095f6:	460b      	mov	r3, r1
 80095f8:	4613      	mov	r3, r2
 80095fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80095fc:	4b0b      	ldr	r3, [pc, #44]	; (800962c <HAL_RCC_GetSysClockFreq+0x180>)
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	0c1b      	lsrs	r3, r3, #16
 8009602:	f003 0303 	and.w	r3, r3, #3
 8009606:	3301      	adds	r3, #1
 8009608:	005b      	lsls	r3, r3, #1
 800960a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800960c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800960e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009610:	fbb2 f3f3 	udiv	r3, r2, r3
 8009614:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009616:	e002      	b.n	800961e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009618:	4b05      	ldr	r3, [pc, #20]	; (8009630 <HAL_RCC_GetSysClockFreq+0x184>)
 800961a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800961c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800961e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009620:	4618      	mov	r0, r3
 8009622:	3740      	adds	r7, #64	; 0x40
 8009624:	46bd      	mov	sp, r7
 8009626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800962a:	bf00      	nop
 800962c:	40023800 	.word	0x40023800
 8009630:	00f42400 	.word	0x00f42400
 8009634:	016e3600 	.word	0x016e3600

08009638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009638:	b480      	push	{r7}
 800963a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800963c:	4b03      	ldr	r3, [pc, #12]	; (800964c <HAL_RCC_GetHCLKFreq+0x14>)
 800963e:	681b      	ldr	r3, [r3, #0]
}
 8009640:	4618      	mov	r0, r3
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	20000034 	.word	0x20000034

08009650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009654:	f7ff fff0 	bl	8009638 <HAL_RCC_GetHCLKFreq>
 8009658:	4602      	mov	r2, r0
 800965a:	4b05      	ldr	r3, [pc, #20]	; (8009670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	0a9b      	lsrs	r3, r3, #10
 8009660:	f003 0307 	and.w	r3, r3, #7
 8009664:	4903      	ldr	r1, [pc, #12]	; (8009674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009666:	5ccb      	ldrb	r3, [r1, r3]
 8009668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800966c:	4618      	mov	r0, r3
 800966e:	bd80      	pop	{r7, pc}
 8009670:	40023800 	.word	0x40023800
 8009674:	0800ec80 	.word	0x0800ec80

08009678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800967c:	f7ff ffdc 	bl	8009638 <HAL_RCC_GetHCLKFreq>
 8009680:	4602      	mov	r2, r0
 8009682:	4b05      	ldr	r3, [pc, #20]	; (8009698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	0b5b      	lsrs	r3, r3, #13
 8009688:	f003 0307 	and.w	r3, r3, #7
 800968c:	4903      	ldr	r1, [pc, #12]	; (800969c <HAL_RCC_GetPCLK2Freq+0x24>)
 800968e:	5ccb      	ldrb	r3, [r1, r3]
 8009690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009694:	4618      	mov	r0, r3
 8009696:	bd80      	pop	{r7, pc}
 8009698:	40023800 	.word	0x40023800
 800969c:	0800ec80 	.word	0x0800ec80

080096a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	220f      	movs	r2, #15
 80096ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80096b0:	4b12      	ldr	r3, [pc, #72]	; (80096fc <HAL_RCC_GetClockConfig+0x5c>)
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f003 0203 	and.w	r2, r3, #3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80096bc:	4b0f      	ldr	r3, [pc, #60]	; (80096fc <HAL_RCC_GetClockConfig+0x5c>)
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80096c8:	4b0c      	ldr	r3, [pc, #48]	; (80096fc <HAL_RCC_GetClockConfig+0x5c>)
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80096d4:	4b09      	ldr	r3, [pc, #36]	; (80096fc <HAL_RCC_GetClockConfig+0x5c>)
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	08db      	lsrs	r3, r3, #3
 80096da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80096e2:	4b07      	ldr	r3, [pc, #28]	; (8009700 <HAL_RCC_GetClockConfig+0x60>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f003 0207 	and.w	r2, r3, #7
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	601a      	str	r2, [r3, #0]
}
 80096ee:	bf00      	nop
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	40023800 	.word	0x40023800
 8009700:	40023c00 	.word	0x40023c00

08009704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d101      	bne.n	8009716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e041      	b.n	800979a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800971c:	b2db      	uxtb	r3, r3
 800971e:	2b00      	cmp	r3, #0
 8009720:	d106      	bne.n	8009730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f7fb fdba 	bl	80052a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2202      	movs	r2, #2
 8009734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	3304      	adds	r3, #4
 8009740:	4619      	mov	r1, r3
 8009742:	4610      	mov	r0, r2
 8009744:	f000 f9ce 	bl	8009ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
	...

080097a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d001      	beq.n	80097bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e04e      	b.n	800985a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2202      	movs	r2, #2
 80097c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68da      	ldr	r2, [r3, #12]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f042 0201 	orr.w	r2, r2, #1
 80097d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a23      	ldr	r2, [pc, #140]	; (8009868 <HAL_TIM_Base_Start_IT+0xc4>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d022      	beq.n	8009824 <HAL_TIM_Base_Start_IT+0x80>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097e6:	d01d      	beq.n	8009824 <HAL_TIM_Base_Start_IT+0x80>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a1f      	ldr	r2, [pc, #124]	; (800986c <HAL_TIM_Base_Start_IT+0xc8>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d018      	beq.n	8009824 <HAL_TIM_Base_Start_IT+0x80>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a1e      	ldr	r2, [pc, #120]	; (8009870 <HAL_TIM_Base_Start_IT+0xcc>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d013      	beq.n	8009824 <HAL_TIM_Base_Start_IT+0x80>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a1c      	ldr	r2, [pc, #112]	; (8009874 <HAL_TIM_Base_Start_IT+0xd0>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d00e      	beq.n	8009824 <HAL_TIM_Base_Start_IT+0x80>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a1b      	ldr	r2, [pc, #108]	; (8009878 <HAL_TIM_Base_Start_IT+0xd4>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d009      	beq.n	8009824 <HAL_TIM_Base_Start_IT+0x80>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a19      	ldr	r2, [pc, #100]	; (800987c <HAL_TIM_Base_Start_IT+0xd8>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d004      	beq.n	8009824 <HAL_TIM_Base_Start_IT+0x80>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a18      	ldr	r2, [pc, #96]	; (8009880 <HAL_TIM_Base_Start_IT+0xdc>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d111      	bne.n	8009848 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	f003 0307 	and.w	r3, r3, #7
 800982e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2b06      	cmp	r3, #6
 8009834:	d010      	beq.n	8009858 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f042 0201 	orr.w	r2, r2, #1
 8009844:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009846:	e007      	b.n	8009858 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f042 0201 	orr.w	r2, r2, #1
 8009856:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3714      	adds	r7, #20
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	40010000 	.word	0x40010000
 800986c:	40000400 	.word	0x40000400
 8009870:	40000800 	.word	0x40000800
 8009874:	40000c00 	.word	0x40000c00
 8009878:	40010400 	.word	0x40010400
 800987c:	40014000 	.word	0x40014000
 8009880:	40001800 	.word	0x40001800

08009884 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	f003 0302 	and.w	r3, r3, #2
 8009896:	2b02      	cmp	r3, #2
 8009898:	d122      	bne.n	80098e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	f003 0302 	and.w	r3, r3, #2
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d11b      	bne.n	80098e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f06f 0202 	mvn.w	r2, #2
 80098b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	699b      	ldr	r3, [r3, #24]
 80098be:	f003 0303 	and.w	r3, r3, #3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d003      	beq.n	80098ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f8ee 	bl	8009aa8 <HAL_TIM_IC_CaptureCallback>
 80098cc:	e005      	b.n	80098da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f8e0 	bl	8009a94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 f8f1 	bl	8009abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	f003 0304 	and.w	r3, r3, #4
 80098ea:	2b04      	cmp	r3, #4
 80098ec:	d122      	bne.n	8009934 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	f003 0304 	and.w	r3, r3, #4
 80098f8:	2b04      	cmp	r3, #4
 80098fa:	d11b      	bne.n	8009934 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f06f 0204 	mvn.w	r2, #4
 8009904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2202      	movs	r2, #2
 800990a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	699b      	ldr	r3, [r3, #24]
 8009912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009916:	2b00      	cmp	r3, #0
 8009918:	d003      	beq.n	8009922 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f8c4 	bl	8009aa8 <HAL_TIM_IC_CaptureCallback>
 8009920:	e005      	b.n	800992e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 f8b6 	bl	8009a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 f8c7 	bl	8009abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	f003 0308 	and.w	r3, r3, #8
 800993e:	2b08      	cmp	r3, #8
 8009940:	d122      	bne.n	8009988 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	f003 0308 	and.w	r3, r3, #8
 800994c:	2b08      	cmp	r3, #8
 800994e:	d11b      	bne.n	8009988 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f06f 0208 	mvn.w	r2, #8
 8009958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2204      	movs	r2, #4
 800995e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	69db      	ldr	r3, [r3, #28]
 8009966:	f003 0303 	and.w	r3, r3, #3
 800996a:	2b00      	cmp	r3, #0
 800996c:	d003      	beq.n	8009976 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f89a 	bl	8009aa8 <HAL_TIM_IC_CaptureCallback>
 8009974:	e005      	b.n	8009982 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 f88c 	bl	8009a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 f89d 	bl	8009abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	f003 0310 	and.w	r3, r3, #16
 8009992:	2b10      	cmp	r3, #16
 8009994:	d122      	bne.n	80099dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	f003 0310 	and.w	r3, r3, #16
 80099a0:	2b10      	cmp	r3, #16
 80099a2:	d11b      	bne.n	80099dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f06f 0210 	mvn.w	r2, #16
 80099ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2208      	movs	r2, #8
 80099b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	69db      	ldr	r3, [r3, #28]
 80099ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d003      	beq.n	80099ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f870 	bl	8009aa8 <HAL_TIM_IC_CaptureCallback>
 80099c8:	e005      	b.n	80099d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 f862 	bl	8009a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f873 	bl	8009abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	f003 0301 	and.w	r3, r3, #1
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d10e      	bne.n	8009a08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	f003 0301 	and.w	r3, r3, #1
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d107      	bne.n	8009a08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f06f 0201 	mvn.w	r2, #1
 8009a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7fa f876 	bl	8003af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a12:	2b80      	cmp	r3, #128	; 0x80
 8009a14:	d10e      	bne.n	8009a34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a20:	2b80      	cmp	r3, #128	; 0x80
 8009a22:	d107      	bne.n	8009a34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f97e 	bl	8009d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a3e:	2b40      	cmp	r3, #64	; 0x40
 8009a40:	d10e      	bne.n	8009a60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a4c:	2b40      	cmp	r3, #64	; 0x40
 8009a4e:	d107      	bne.n	8009a60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f838 	bl	8009ad0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	f003 0320 	and.w	r3, r3, #32
 8009a6a:	2b20      	cmp	r3, #32
 8009a6c:	d10e      	bne.n	8009a8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	f003 0320 	and.w	r3, r3, #32
 8009a78:	2b20      	cmp	r3, #32
 8009a7a:	d107      	bne.n	8009a8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f06f 0220 	mvn.w	r2, #32
 8009a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f948 	bl	8009d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a8c:	bf00      	nop
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a9c:	bf00      	nop
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ac4:	bf00      	nop
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ad8:	bf00      	nop
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b085      	sub	sp, #20
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a40      	ldr	r2, [pc, #256]	; (8009bf8 <TIM_Base_SetConfig+0x114>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d013      	beq.n	8009b24 <TIM_Base_SetConfig+0x40>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b02:	d00f      	beq.n	8009b24 <TIM_Base_SetConfig+0x40>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a3d      	ldr	r2, [pc, #244]	; (8009bfc <TIM_Base_SetConfig+0x118>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d00b      	beq.n	8009b24 <TIM_Base_SetConfig+0x40>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a3c      	ldr	r2, [pc, #240]	; (8009c00 <TIM_Base_SetConfig+0x11c>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d007      	beq.n	8009b24 <TIM_Base_SetConfig+0x40>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a3b      	ldr	r2, [pc, #236]	; (8009c04 <TIM_Base_SetConfig+0x120>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d003      	beq.n	8009b24 <TIM_Base_SetConfig+0x40>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4a3a      	ldr	r2, [pc, #232]	; (8009c08 <TIM_Base_SetConfig+0x124>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d108      	bne.n	8009b36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4a2f      	ldr	r2, [pc, #188]	; (8009bf8 <TIM_Base_SetConfig+0x114>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d02b      	beq.n	8009b96 <TIM_Base_SetConfig+0xb2>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b44:	d027      	beq.n	8009b96 <TIM_Base_SetConfig+0xb2>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a2c      	ldr	r2, [pc, #176]	; (8009bfc <TIM_Base_SetConfig+0x118>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d023      	beq.n	8009b96 <TIM_Base_SetConfig+0xb2>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a2b      	ldr	r2, [pc, #172]	; (8009c00 <TIM_Base_SetConfig+0x11c>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d01f      	beq.n	8009b96 <TIM_Base_SetConfig+0xb2>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a2a      	ldr	r2, [pc, #168]	; (8009c04 <TIM_Base_SetConfig+0x120>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d01b      	beq.n	8009b96 <TIM_Base_SetConfig+0xb2>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a29      	ldr	r2, [pc, #164]	; (8009c08 <TIM_Base_SetConfig+0x124>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d017      	beq.n	8009b96 <TIM_Base_SetConfig+0xb2>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a28      	ldr	r2, [pc, #160]	; (8009c0c <TIM_Base_SetConfig+0x128>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d013      	beq.n	8009b96 <TIM_Base_SetConfig+0xb2>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a27      	ldr	r2, [pc, #156]	; (8009c10 <TIM_Base_SetConfig+0x12c>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d00f      	beq.n	8009b96 <TIM_Base_SetConfig+0xb2>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a26      	ldr	r2, [pc, #152]	; (8009c14 <TIM_Base_SetConfig+0x130>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d00b      	beq.n	8009b96 <TIM_Base_SetConfig+0xb2>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	4a25      	ldr	r2, [pc, #148]	; (8009c18 <TIM_Base_SetConfig+0x134>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d007      	beq.n	8009b96 <TIM_Base_SetConfig+0xb2>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4a24      	ldr	r2, [pc, #144]	; (8009c1c <TIM_Base_SetConfig+0x138>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d003      	beq.n	8009b96 <TIM_Base_SetConfig+0xb2>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4a23      	ldr	r2, [pc, #140]	; (8009c20 <TIM_Base_SetConfig+0x13c>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d108      	bne.n	8009ba8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	695b      	ldr	r3, [r3, #20]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	689a      	ldr	r2, [r3, #8]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	4a0a      	ldr	r2, [pc, #40]	; (8009bf8 <TIM_Base_SetConfig+0x114>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d003      	beq.n	8009bdc <TIM_Base_SetConfig+0xf8>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a0c      	ldr	r2, [pc, #48]	; (8009c08 <TIM_Base_SetConfig+0x124>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d103      	bne.n	8009be4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	691a      	ldr	r2, [r3, #16]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	615a      	str	r2, [r3, #20]
}
 8009bea:	bf00      	nop
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	40010000 	.word	0x40010000
 8009bfc:	40000400 	.word	0x40000400
 8009c00:	40000800 	.word	0x40000800
 8009c04:	40000c00 	.word	0x40000c00
 8009c08:	40010400 	.word	0x40010400
 8009c0c:	40014000 	.word	0x40014000
 8009c10:	40014400 	.word	0x40014400
 8009c14:	40014800 	.word	0x40014800
 8009c18:	40001800 	.word	0x40001800
 8009c1c:	40001c00 	.word	0x40001c00
 8009c20:	40002000 	.word	0x40002000

08009c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d101      	bne.n	8009c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c38:	2302      	movs	r3, #2
 8009c3a:	e05a      	b.n	8009cf2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2202      	movs	r2, #2
 8009c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a21      	ldr	r2, [pc, #132]	; (8009d00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d022      	beq.n	8009cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c88:	d01d      	beq.n	8009cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a1d      	ldr	r2, [pc, #116]	; (8009d04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d018      	beq.n	8009cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a1b      	ldr	r2, [pc, #108]	; (8009d08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d013      	beq.n	8009cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a1a      	ldr	r2, [pc, #104]	; (8009d0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d00e      	beq.n	8009cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a18      	ldr	r2, [pc, #96]	; (8009d10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d009      	beq.n	8009cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a17      	ldr	r2, [pc, #92]	; (8009d14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d004      	beq.n	8009cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a15      	ldr	r2, [pc, #84]	; (8009d18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d10c      	bne.n	8009ce0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ccc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3714      	adds	r7, #20
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	40010000 	.word	0x40010000
 8009d04:	40000400 	.word	0x40000400
 8009d08:	40000800 	.word	0x40000800
 8009d0c:	40000c00 	.word	0x40000c00
 8009d10:	40010400 	.word	0x40010400
 8009d14:	40014000 	.word	0x40014000
 8009d18:	40001800 	.word	0x40001800

08009d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d24:	bf00      	nop
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e03f      	b.n	8009dd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d106      	bne.n	8009d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7fb fb3a 	bl	80053e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2224      	movs	r2, #36	; 0x24
 8009d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	68da      	ldr	r2, [r3, #12]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f001 f95d 	bl	800b048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	691a      	ldr	r2, [r3, #16]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	695a      	ldr	r2, [r3, #20]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009dac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68da      	ldr	r2, [r3, #12]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009dbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2220      	movs	r2, #32
 8009dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2220      	movs	r2, #32
 8009dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009dde:	b480      	push	{r7}
 8009de0:	b085      	sub	sp, #20
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	60f8      	str	r0, [r7, #12]
 8009de6:	60b9      	str	r1, [r7, #8]
 8009de8:	4613      	mov	r3, r2
 8009dea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	2b20      	cmp	r3, #32
 8009df6:	d130      	bne.n	8009e5a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d002      	beq.n	8009e04 <HAL_UART_Transmit_IT+0x26>
 8009dfe:	88fb      	ldrh	r3, [r7, #6]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e029      	b.n	8009e5c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d101      	bne.n	8009e16 <HAL_UART_Transmit_IT+0x38>
 8009e12:	2302      	movs	r3, #2
 8009e14:	e022      	b.n	8009e5c <HAL_UART_Transmit_IT+0x7e>
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	88fa      	ldrh	r2, [r7, #6]
 8009e28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	88fa      	ldrh	r2, [r7, #6]
 8009e2e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2200      	movs	r2, #0
 8009e34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2221      	movs	r2, #33	; 0x21
 8009e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	68da      	ldr	r2, [r3, #12]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009e54:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009e56:	2300      	movs	r3, #0
 8009e58:	e000      	b.n	8009e5c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009e5a:	2302      	movs	r3, #2
  }
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3714      	adds	r7, #20
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	4613      	mov	r3, r2
 8009e74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b20      	cmp	r3, #32
 8009e80:	d11d      	bne.n	8009ebe <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d002      	beq.n	8009e8e <HAL_UART_Receive_IT+0x26>
 8009e88:	88fb      	ldrh	r3, [r7, #6]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d101      	bne.n	8009e92 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e016      	b.n	8009ec0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d101      	bne.n	8009ea0 <HAL_UART_Receive_IT+0x38>
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	e00f      	b.n	8009ec0 <HAL_UART_Receive_IT+0x58>
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009eae:	88fb      	ldrh	r3, [r7, #6]
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	68b9      	ldr	r1, [r7, #8]
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f000 fdfa 	bl	800aaae <UART_Start_Receive_IT>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	e000      	b.n	8009ec0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009ebe:	2302      	movs	r3, #2
  }
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3710      	adds	r7, #16
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b08c      	sub	sp, #48	; 0x30
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b20      	cmp	r3, #32
 8009ee0:	d165      	bne.n	8009fae <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d002      	beq.n	8009eee <HAL_UART_Transmit_DMA+0x26>
 8009ee8:	88fb      	ldrh	r3, [r7, #6]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e05e      	b.n	8009fb0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d101      	bne.n	8009f00 <HAL_UART_Transmit_DMA+0x38>
 8009efc:	2302      	movs	r3, #2
 8009efe:	e057      	b.n	8009fb0 <HAL_UART_Transmit_DMA+0xe8>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	88fa      	ldrh	r2, [r7, #6]
 8009f12:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	88fa      	ldrh	r2, [r7, #6]
 8009f18:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2221      	movs	r2, #33	; 0x21
 8009f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f2c:	4a22      	ldr	r2, [pc, #136]	; (8009fb8 <HAL_UART_Transmit_DMA+0xf0>)
 8009f2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f34:	4a21      	ldr	r2, [pc, #132]	; (8009fbc <HAL_UART_Transmit_DMA+0xf4>)
 8009f36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f3c:	4a20      	ldr	r2, [pc, #128]	; (8009fc0 <HAL_UART_Transmit_DMA+0xf8>)
 8009f3e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f44:	2200      	movs	r2, #0
 8009f46:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009f48:	f107 0308 	add.w	r3, r7, #8
 8009f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f54:	6819      	ldr	r1, [r3, #0]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	3304      	adds	r3, #4
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	88fb      	ldrh	r3, [r7, #6]
 8009f60:	f7fc f998 	bl	8006294 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f6c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3314      	adds	r3, #20
 8009f7c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	e853 3f00 	ldrex	r3, [r3]
 8009f84:	617b      	str	r3, [r7, #20]
   return(result);
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	3314      	adds	r3, #20
 8009f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f96:	627a      	str	r2, [r7, #36]	; 0x24
 8009f98:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9a:	6a39      	ldr	r1, [r7, #32]
 8009f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f9e:	e841 2300 	strex	r3, r2, [r1]
 8009fa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1e5      	bne.n	8009f76 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	e000      	b.n	8009fb0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009fae:	2302      	movs	r3, #2
  }
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3730      	adds	r7, #48	; 0x30
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	0800a809 	.word	0x0800a809
 8009fbc:	0800a8a3 	.word	0x0800a8a3
 8009fc0:	0800aa1b 	.word	0x0800aa1b

08009fc4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	2b20      	cmp	r3, #32
 8009fdc:	d11d      	bne.n	800a01a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d002      	beq.n	8009fea <HAL_UART_Receive_DMA+0x26>
 8009fe4:	88fb      	ldrh	r3, [r7, #6]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d101      	bne.n	8009fee <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	e016      	b.n	800a01c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d101      	bne.n	8009ffc <HAL_UART_Receive_DMA+0x38>
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	e00f      	b.n	800a01c <HAL_UART_Receive_DMA+0x58>
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2200      	movs	r2, #0
 800a008:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a00a:	88fb      	ldrh	r3, [r7, #6]
 800a00c:	461a      	mov	r2, r3
 800a00e:	68b9      	ldr	r1, [r7, #8]
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f000 fd8b 	bl	800ab2c <UART_Start_Receive_DMA>
 800a016:	4603      	mov	r3, r0
 800a018:	e000      	b.n	800a01c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a01a:	2302      	movs	r3, #2
  }
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b08e      	sub	sp, #56	; 0x38
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	330c      	adds	r3, #12
 800a032:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	e853 3f00 	ldrex	r3, [r3]
 800a03a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a042:	637b      	str	r3, [r7, #52]	; 0x34
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	330c      	adds	r3, #12
 800a04a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a04c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a04e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a054:	e841 2300 	strex	r3, r2, [r1]
 800a058:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1e5      	bne.n	800a02c <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	695b      	ldr	r3, [r3, #20]
 800a066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a06a:	2b80      	cmp	r3, #128	; 0x80
 800a06c:	d13c      	bne.n	800a0e8 <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	3314      	adds	r3, #20
 800a074:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	e853 3f00 	ldrex	r3, [r3]
 800a07c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a084:	633b      	str	r3, [r7, #48]	; 0x30
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	3314      	adds	r3, #20
 800a08c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a08e:	61ba      	str	r2, [r7, #24]
 800a090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a092:	6979      	ldr	r1, [r7, #20]
 800a094:	69ba      	ldr	r2, [r7, #24]
 800a096:	e841 2300 	strex	r3, r2, [r1]
 800a09a:	613b      	str	r3, [r7, #16]
   return(result);
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1e5      	bne.n	800a06e <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d013      	beq.n	800a0d2 <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ae:	4a16      	ldr	r2, [pc, #88]	; (800a108 <HAL_UART_AbortTransmit_IT+0xe4>)
 800a0b0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fc f9b4 	bl	8006424 <HAL_DMA_Abort_IT>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d01c      	beq.n	800a0fc <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a0cc:	4610      	mov	r0, r2
 800a0ce:	4798      	blx	r3
 800a0d0:	e014      	b.n	800a0fc <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2220      	movs	r2, #32
 800a0dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 fb71 	bl	800a7c8 <HAL_UART_AbortTransmitCpltCallback>
 800a0e6:	e009      	b.n	800a0fc <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2220      	movs	r2, #32
 800a0f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 fb66 	bl	800a7c8 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3738      	adds	r7, #56	; 0x38
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	0800ada7 	.word	0x0800ada7

0800a10c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b09a      	sub	sp, #104	; 0x68
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	330c      	adds	r3, #12
 800a11a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a11e:	e853 3f00 	ldrex	r3, [r3]
 800a122:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a126:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a12a:	667b      	str	r3, [r7, #100]	; 0x64
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	330c      	adds	r3, #12
 800a132:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a134:	657a      	str	r2, [r7, #84]	; 0x54
 800a136:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a138:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a13a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a13c:	e841 2300 	strex	r3, r2, [r1]
 800a140:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a144:	2b00      	cmp	r3, #0
 800a146:	d1e5      	bne.n	800a114 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	3314      	adds	r3, #20
 800a14e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a152:	e853 3f00 	ldrex	r3, [r3]
 800a156:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15a:	f023 0301 	bic.w	r3, r3, #1
 800a15e:	663b      	str	r3, [r7, #96]	; 0x60
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	3314      	adds	r3, #20
 800a166:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a168:	643a      	str	r2, [r7, #64]	; 0x40
 800a16a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a16e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a170:	e841 2300 	strex	r3, r2, [r1]
 800a174:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d1e5      	bne.n	800a148 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a180:	2b01      	cmp	r3, #1
 800a182:	d119      	bne.n	800a1b8 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	330c      	adds	r3, #12
 800a18a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18c:	6a3b      	ldr	r3, [r7, #32]
 800a18e:	e853 3f00 	ldrex	r3, [r3]
 800a192:	61fb      	str	r3, [r7, #28]
   return(result);
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	f023 0310 	bic.w	r3, r3, #16
 800a19a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	330c      	adds	r3, #12
 800a1a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a1a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1ac:	e841 2300 	strex	r3, r2, [r1]
 800a1b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1e5      	bne.n	800a184 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	695b      	ldr	r3, [r3, #20]
 800a1be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1c2:	2b40      	cmp	r3, #64	; 0x40
 800a1c4:	d13f      	bne.n	800a246 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	3314      	adds	r3, #20
 800a1cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	e853 3f00 	ldrex	r3, [r3]
 800a1d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1dc:	65bb      	str	r3, [r7, #88]	; 0x58
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	3314      	adds	r3, #20
 800a1e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a1e6:	61ba      	str	r2, [r7, #24]
 800a1e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ea:	6979      	ldr	r1, [r7, #20]
 800a1ec:	69ba      	ldr	r2, [r7, #24]
 800a1ee:	e841 2300 	strex	r3, r2, [r1]
 800a1f2:	613b      	str	r3, [r7, #16]
   return(result);
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1e5      	bne.n	800a1c6 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d013      	beq.n	800a22a <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a206:	4a19      	ldr	r2, [pc, #100]	; (800a26c <HAL_UART_AbortReceive_IT+0x160>)
 800a208:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a20e:	4618      	mov	r0, r3
 800a210:	f7fc f908 	bl	8006424 <HAL_DMA_Abort_IT>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d022      	beq.n	800a260 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a21e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a224:	4610      	mov	r0, r2
 800a226:	4798      	blx	r3
 800a228:	e01a      	b.n	800a260 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2220      	movs	r2, #32
 800a234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 facc 	bl	800a7dc <HAL_UART_AbortReceiveCpltCallback>
 800a244:	e00c      	b.n	800a260 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2220      	movs	r2, #32
 800a250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fabe 	bl	800a7dc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	3768      	adds	r7, #104	; 0x68
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	0800add1 	.word	0x0800add1

0800a270 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b0ba      	sub	sp, #232	; 0xe8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	695b      	ldr	r3, [r3, #20]
 800a292:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a296:	2300      	movs	r3, #0
 800a298:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a29c:	2300      	movs	r3, #0
 800a29e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a2a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2a6:	f003 030f 	and.w	r3, r3, #15
 800a2aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a2ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10f      	bne.n	800a2d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a2b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2ba:	f003 0320 	and.w	r3, r3, #32
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d009      	beq.n	800a2d6 <HAL_UART_IRQHandler+0x66>
 800a2c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2c6:	f003 0320 	and.w	r3, r3, #32
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d003      	beq.n	800a2d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 fdfe 	bl	800aed0 <UART_Receive_IT>
      return;
 800a2d4:	e256      	b.n	800a784 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a2d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f000 80de 	beq.w	800a49c <HAL_UART_IRQHandler+0x22c>
 800a2e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2e4:	f003 0301 	and.w	r3, r3, #1
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d106      	bne.n	800a2fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a2ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f000 80d1 	beq.w	800a49c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a2fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2fe:	f003 0301 	and.w	r3, r3, #1
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00b      	beq.n	800a31e <HAL_UART_IRQHandler+0xae>
 800a306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a30a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d005      	beq.n	800a31e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a316:	f043 0201 	orr.w	r2, r3, #1
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a31e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a322:	f003 0304 	and.w	r3, r3, #4
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00b      	beq.n	800a342 <HAL_UART_IRQHandler+0xd2>
 800a32a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a32e:	f003 0301 	and.w	r3, r3, #1
 800a332:	2b00      	cmp	r3, #0
 800a334:	d005      	beq.n	800a342 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33a:	f043 0202 	orr.w	r2, r3, #2
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a346:	f003 0302 	and.w	r3, r3, #2
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00b      	beq.n	800a366 <HAL_UART_IRQHandler+0xf6>
 800a34e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a352:	f003 0301 	and.w	r3, r3, #1
 800a356:	2b00      	cmp	r3, #0
 800a358:	d005      	beq.n	800a366 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35e:	f043 0204 	orr.w	r2, r3, #4
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a36a:	f003 0308 	and.w	r3, r3, #8
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d011      	beq.n	800a396 <HAL_UART_IRQHandler+0x126>
 800a372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a376:	f003 0320 	and.w	r3, r3, #32
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d105      	bne.n	800a38a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a37e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a382:	f003 0301 	and.w	r3, r3, #1
 800a386:	2b00      	cmp	r3, #0
 800a388:	d005      	beq.n	800a396 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	f043 0208 	orr.w	r2, r3, #8
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f000 81ed 	beq.w	800a77a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a3a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3a4:	f003 0320 	and.w	r3, r3, #32
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d008      	beq.n	800a3be <HAL_UART_IRQHandler+0x14e>
 800a3ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3b0:	f003 0320 	and.w	r3, r3, #32
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d002      	beq.n	800a3be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 fd89 	bl	800aed0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	695b      	ldr	r3, [r3, #20]
 800a3c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3c8:	2b40      	cmp	r3, #64	; 0x40
 800a3ca:	bf0c      	ite	eq
 800a3cc:	2301      	moveq	r3, #1
 800a3ce:	2300      	movne	r3, #0
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3da:	f003 0308 	and.w	r3, r3, #8
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d103      	bne.n	800a3ea <HAL_UART_IRQHandler+0x17a>
 800a3e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d04f      	beq.n	800a48a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fc64 	bl	800acb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	695b      	ldr	r3, [r3, #20]
 800a3f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3fa:	2b40      	cmp	r3, #64	; 0x40
 800a3fc:	d141      	bne.n	800a482 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3314      	adds	r3, #20
 800a404:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a408:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a40c:	e853 3f00 	ldrex	r3, [r3]
 800a410:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a414:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a41c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	3314      	adds	r3, #20
 800a426:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a42a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a42e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a432:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a436:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a43a:	e841 2300 	strex	r3, r2, [r1]
 800a43e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a442:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1d9      	bne.n	800a3fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d013      	beq.n	800a47a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a456:	4a7d      	ldr	r2, [pc, #500]	; (800a64c <HAL_UART_IRQHandler+0x3dc>)
 800a458:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fb ffe0 	bl	8006424 <HAL_DMA_Abort_IT>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d016      	beq.n	800a498 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a46e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a474:	4610      	mov	r0, r2
 800a476:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a478:	e00e      	b.n	800a498 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f99a 	bl	800a7b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a480:	e00a      	b.n	800a498 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f996 	bl	800a7b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a488:	e006      	b.n	800a498 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f992 	bl	800a7b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a496:	e170      	b.n	800a77a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a498:	bf00      	nop
    return;
 800a49a:	e16e      	b.n	800a77a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	f040 814a 	bne.w	800a73a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a4a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4aa:	f003 0310 	and.w	r3, r3, #16
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f000 8143 	beq.w	800a73a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a4b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4b8:	f003 0310 	and.w	r3, r3, #16
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	f000 813c 	beq.w	800a73a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	60bb      	str	r3, [r7, #8]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	60bb      	str	r3, [r7, #8]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	60bb      	str	r3, [r7, #8]
 800a4d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	695b      	ldr	r3, [r3, #20]
 800a4de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4e2:	2b40      	cmp	r3, #64	; 0x40
 800a4e4:	f040 80b4 	bne.w	800a650 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a4f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f000 8140 	beq.w	800a77e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a502:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a506:	429a      	cmp	r2, r3
 800a508:	f080 8139 	bcs.w	800a77e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a512:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a518:	69db      	ldr	r3, [r3, #28]
 800a51a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a51e:	f000 8088 	beq.w	800a632 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	330c      	adds	r3, #12
 800a528:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a530:	e853 3f00 	ldrex	r3, [r3]
 800a534:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a538:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a53c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a540:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	330c      	adds	r3, #12
 800a54a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a54e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a552:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a556:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a55a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a55e:	e841 2300 	strex	r3, r2, [r1]
 800a562:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a566:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d1d9      	bne.n	800a522 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	3314      	adds	r3, #20
 800a574:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a578:	e853 3f00 	ldrex	r3, [r3]
 800a57c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a57e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a580:	f023 0301 	bic.w	r3, r3, #1
 800a584:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	3314      	adds	r3, #20
 800a58e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a592:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a596:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a598:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a59a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a59e:	e841 2300 	strex	r3, r2, [r1]
 800a5a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a5a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d1e1      	bne.n	800a56e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	3314      	adds	r3, #20
 800a5b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5b4:	e853 3f00 	ldrex	r3, [r3]
 800a5b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a5ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	3314      	adds	r3, #20
 800a5ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a5ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a5d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a5d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a5d6:	e841 2300 	strex	r3, r2, [r1]
 800a5da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a5dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d1e3      	bne.n	800a5aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	330c      	adds	r3, #12
 800a5f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5fa:	e853 3f00 	ldrex	r3, [r3]
 800a5fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a602:	f023 0310 	bic.w	r3, r3, #16
 800a606:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	330c      	adds	r3, #12
 800a610:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a614:	65ba      	str	r2, [r7, #88]	; 0x58
 800a616:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a618:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a61a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a61c:	e841 2300 	strex	r3, r2, [r1]
 800a620:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1e3      	bne.n	800a5f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7fb fe89 	bl	8006344 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	b29b      	uxth	r3, r3
 800a640:	4619      	mov	r1, r3
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 f8d4 	bl	800a7f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a648:	e099      	b.n	800a77e <HAL_UART_IRQHandler+0x50e>
 800a64a:	bf00      	nop
 800a64c:	0800ad7f 	.word	0x0800ad7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a658:	b29b      	uxth	r3, r3
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a664:	b29b      	uxth	r3, r3
 800a666:	2b00      	cmp	r3, #0
 800a668:	f000 808b 	beq.w	800a782 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a66c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a670:	2b00      	cmp	r3, #0
 800a672:	f000 8086 	beq.w	800a782 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	330c      	adds	r3, #12
 800a67c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a680:	e853 3f00 	ldrex	r3, [r3]
 800a684:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a688:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a68c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	330c      	adds	r3, #12
 800a696:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a69a:	647a      	str	r2, [r7, #68]	; 0x44
 800a69c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a6a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6a2:	e841 2300 	strex	r3, r2, [r1]
 800a6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a6a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1e3      	bne.n	800a676 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	3314      	adds	r3, #20
 800a6b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b8:	e853 3f00 	ldrex	r3, [r3]
 800a6bc:	623b      	str	r3, [r7, #32]
   return(result);
 800a6be:	6a3b      	ldr	r3, [r7, #32]
 800a6c0:	f023 0301 	bic.w	r3, r3, #1
 800a6c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3314      	adds	r3, #20
 800a6ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a6d2:	633a      	str	r2, [r7, #48]	; 0x30
 800a6d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6da:	e841 2300 	strex	r3, r2, [r1]
 800a6de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1e3      	bne.n	800a6ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2220      	movs	r2, #32
 800a6ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	330c      	adds	r3, #12
 800a6fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	e853 3f00 	ldrex	r3, [r3]
 800a702:	60fb      	str	r3, [r7, #12]
   return(result);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f023 0310 	bic.w	r3, r3, #16
 800a70a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	330c      	adds	r3, #12
 800a714:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a718:	61fa      	str	r2, [r7, #28]
 800a71a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71c:	69b9      	ldr	r1, [r7, #24]
 800a71e:	69fa      	ldr	r2, [r7, #28]
 800a720:	e841 2300 	strex	r3, r2, [r1]
 800a724:	617b      	str	r3, [r7, #20]
   return(result);
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1e3      	bne.n	800a6f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a72c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a730:	4619      	mov	r1, r3
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 f85c 	bl	800a7f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a738:	e023      	b.n	800a782 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a73a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a73e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a742:	2b00      	cmp	r3, #0
 800a744:	d009      	beq.n	800a75a <HAL_UART_IRQHandler+0x4ea>
 800a746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a74a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d003      	beq.n	800a75a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 fb54 	bl	800ae00 <UART_Transmit_IT>
    return;
 800a758:	e014      	b.n	800a784 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a75a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a75e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00e      	beq.n	800a784 <HAL_UART_IRQHandler+0x514>
 800a766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a76a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d008      	beq.n	800a784 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 fb94 	bl	800aea0 <UART_EndTransmit_IT>
    return;
 800a778:	e004      	b.n	800a784 <HAL_UART_IRQHandler+0x514>
    return;
 800a77a:	bf00      	nop
 800a77c:	e002      	b.n	800a784 <HAL_UART_IRQHandler+0x514>
      return;
 800a77e:	bf00      	nop
 800a780:	e000      	b.n	800a784 <HAL_UART_IRQHandler+0x514>
      return;
 800a782:	bf00      	nop
  }
}
 800a784:	37e8      	adds	r7, #232	; 0xe8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop

0800a78c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a794:	bf00      	nop
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a7a8:	bf00      	nop
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a7bc:	bf00      	nop
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a7fc:	bf00      	nop
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b090      	sub	sp, #64	; 0x40
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a814:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a820:	2b00      	cmp	r3, #0
 800a822:	d137      	bne.n	800a894 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a826:	2200      	movs	r2, #0
 800a828:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a82a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	3314      	adds	r3, #20
 800a830:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a834:	e853 3f00 	ldrex	r3, [r3]
 800a838:	623b      	str	r3, [r7, #32]
   return(result);
 800a83a:	6a3b      	ldr	r3, [r7, #32]
 800a83c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a840:	63bb      	str	r3, [r7, #56]	; 0x38
 800a842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	3314      	adds	r3, #20
 800a848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a84a:	633a      	str	r2, [r7, #48]	; 0x30
 800a84c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a852:	e841 2300 	strex	r3, r2, [r1]
 800a856:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1e5      	bne.n	800a82a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a85e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	330c      	adds	r3, #12
 800a864:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	e853 3f00 	ldrex	r3, [r3]
 800a86c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a874:	637b      	str	r3, [r7, #52]	; 0x34
 800a876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	330c      	adds	r3, #12
 800a87c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a87e:	61fa      	str	r2, [r7, #28]
 800a880:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a882:	69b9      	ldr	r1, [r7, #24]
 800a884:	69fa      	ldr	r2, [r7, #28]
 800a886:	e841 2300 	strex	r3, r2, [r1]
 800a88a:	617b      	str	r3, [r7, #20]
   return(result);
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d1e5      	bne.n	800a85e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a892:	e002      	b.n	800a89a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a894:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a896:	f7f6 ffb1 	bl	80017fc <HAL_UART_TxCpltCallback>
}
 800a89a:	bf00      	nop
 800a89c:	3740      	adds	r7, #64	; 0x40
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b084      	sub	sp, #16
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a8b0:	68f8      	ldr	r0, [r7, #12]
 800a8b2:	f7ff ff6b 	bl	800a78c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8b6:	bf00      	nop
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b09c      	sub	sp, #112	; 0x70
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d172      	bne.n	800a9c0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a8da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8dc:	2200      	movs	r2, #0
 800a8de:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	330c      	adds	r3, #12
 800a8e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8ea:	e853 3f00 	ldrex	r3, [r3]
 800a8ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a8f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	330c      	adds	r3, #12
 800a8fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a900:	65ba      	str	r2, [r7, #88]	; 0x58
 800a902:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a904:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a906:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a908:	e841 2300 	strex	r3, r2, [r1]
 800a90c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a90e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a910:	2b00      	cmp	r3, #0
 800a912:	d1e5      	bne.n	800a8e0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	3314      	adds	r3, #20
 800a91a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91e:	e853 3f00 	ldrex	r3, [r3]
 800a922:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a926:	f023 0301 	bic.w	r3, r3, #1
 800a92a:	667b      	str	r3, [r7, #100]	; 0x64
 800a92c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	3314      	adds	r3, #20
 800a932:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a934:	647a      	str	r2, [r7, #68]	; 0x44
 800a936:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a938:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a93a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a93c:	e841 2300 	strex	r3, r2, [r1]
 800a940:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a944:	2b00      	cmp	r3, #0
 800a946:	d1e5      	bne.n	800a914 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	3314      	adds	r3, #20
 800a94e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a952:	e853 3f00 	ldrex	r3, [r3]
 800a956:	623b      	str	r3, [r7, #32]
   return(result);
 800a958:	6a3b      	ldr	r3, [r7, #32]
 800a95a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a95e:	663b      	str	r3, [r7, #96]	; 0x60
 800a960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	3314      	adds	r3, #20
 800a966:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a968:	633a      	str	r2, [r7, #48]	; 0x30
 800a96a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a96e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a970:	e841 2300 	strex	r3, r2, [r1]
 800a974:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d1e5      	bne.n	800a948 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a97c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a97e:	2220      	movs	r2, #32
 800a980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d119      	bne.n	800a9c0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a98c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	330c      	adds	r3, #12
 800a992:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	e853 3f00 	ldrex	r3, [r3]
 800a99a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f023 0310 	bic.w	r3, r3, #16
 800a9a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	330c      	adds	r3, #12
 800a9aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9ac:	61fa      	str	r2, [r7, #28]
 800a9ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b0:	69b9      	ldr	r1, [r7, #24]
 800a9b2:	69fa      	ldr	r2, [r7, #28]
 800a9b4:	e841 2300 	strex	r3, r2, [r1]
 800a9b8:	617b      	str	r3, [r7, #20]
   return(result);
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d1e5      	bne.n	800a98c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d106      	bne.n	800a9d6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a9d0:	f7ff ff0e 	bl	800a7f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a9d4:	e002      	b.n	800a9dc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a9d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a9d8:	f7f6 ff48 	bl	800186c <HAL_UART_RxCpltCallback>
}
 800a9dc:	bf00      	nop
 800a9de:	3770      	adds	r7, #112	; 0x70
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d108      	bne.n	800aa0c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a9fe:	085b      	lsrs	r3, r3, #1
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	4619      	mov	r1, r3
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	f7ff fef3 	bl	800a7f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa0a:	e002      	b.n	800aa12 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f7ff fec7 	bl	800a7a0 <HAL_UART_RxHalfCpltCallback>
}
 800aa12:	bf00      	nop
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b084      	sub	sp, #16
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800aa22:	2300      	movs	r3, #0
 800aa24:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa2a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	695b      	ldr	r3, [r3, #20]
 800aa32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa36:	2b80      	cmp	r3, #128	; 0x80
 800aa38:	bf0c      	ite	eq
 800aa3a:	2301      	moveq	r3, #1
 800aa3c:	2300      	movne	r3, #0
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	2b21      	cmp	r3, #33	; 0x21
 800aa4c:	d108      	bne.n	800aa60 <UART_DMAError+0x46>
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d005      	beq.n	800aa60 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	2200      	movs	r2, #0
 800aa58:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800aa5a:	68b8      	ldr	r0, [r7, #8]
 800aa5c:	f000 f904 	bl	800ac68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	695b      	ldr	r3, [r3, #20]
 800aa66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa6a:	2b40      	cmp	r3, #64	; 0x40
 800aa6c:	bf0c      	ite	eq
 800aa6e:	2301      	moveq	r3, #1
 800aa70:	2300      	movne	r3, #0
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	2b22      	cmp	r3, #34	; 0x22
 800aa80:	d108      	bne.n	800aa94 <UART_DMAError+0x7a>
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d005      	beq.n	800aa94 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800aa8e:	68b8      	ldr	r0, [r7, #8]
 800aa90:	f000 f912 	bl	800acb8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa98:	f043 0210 	orr.w	r2, r3, #16
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aaa0:	68b8      	ldr	r0, [r7, #8]
 800aaa2:	f7ff fe87 	bl	800a7b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aaa6:	bf00      	nop
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aaae:	b480      	push	{r7}
 800aab0:	b085      	sub	sp, #20
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	60f8      	str	r0, [r7, #12]
 800aab6:	60b9      	str	r1, [r7, #8]
 800aab8:	4613      	mov	r3, r2
 800aaba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	68ba      	ldr	r2, [r7, #8]
 800aac0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	88fa      	ldrh	r2, [r7, #6]
 800aac6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	88fa      	ldrh	r2, [r7, #6]
 800aacc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2200      	movs	r2, #0
 800aad2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2222      	movs	r2, #34	; 0x22
 800aad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d007      	beq.n	800aafc <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	68da      	ldr	r2, [r3, #12]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aafa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	695a      	ldr	r2, [r3, #20]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f042 0201 	orr.w	r2, r2, #1
 800ab0a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	68da      	ldr	r2, [r3, #12]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f042 0220 	orr.w	r2, r2, #32
 800ab1a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
	...

0800ab2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b098      	sub	sp, #96	; 0x60
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	4613      	mov	r3, r2
 800ab38:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	88fa      	ldrh	r2, [r7, #6]
 800ab44:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2222      	movs	r2, #34	; 0x22
 800ab50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab58:	4a40      	ldr	r2, [pc, #256]	; (800ac5c <UART_Start_Receive_DMA+0x130>)
 800ab5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab60:	4a3f      	ldr	r2, [pc, #252]	; (800ac60 <UART_Start_Receive_DMA+0x134>)
 800ab62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab68:	4a3e      	ldr	r2, [pc, #248]	; (800ac64 <UART_Start_Receive_DMA+0x138>)
 800ab6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab70:	2200      	movs	r2, #0
 800ab72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ab74:	f107 0308 	add.w	r3, r7, #8
 800ab78:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	3304      	adds	r3, #4
 800ab84:	4619      	mov	r1, r3
 800ab86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	88fb      	ldrh	r3, [r7, #6]
 800ab8c:	f7fb fb82 	bl	8006294 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ab90:	2300      	movs	r3, #0
 800ab92:	613b      	str	r3, [r7, #16]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	613b      	str	r3, [r7, #16]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	613b      	str	r3, [r7, #16]
 800aba4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d019      	beq.n	800abea <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	330c      	adds	r3, #12
 800abbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abc0:	e853 3f00 	ldrex	r3, [r3]
 800abc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800abc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abcc:	65bb      	str	r3, [r7, #88]	; 0x58
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	330c      	adds	r3, #12
 800abd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800abd6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800abd8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abda:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800abdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800abde:	e841 2300 	strex	r3, r2, [r1]
 800abe2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800abe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1e5      	bne.n	800abb6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	3314      	adds	r3, #20
 800abf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf4:	e853 3f00 	ldrex	r3, [r3]
 800abf8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800abfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfc:	f043 0301 	orr.w	r3, r3, #1
 800ac00:	657b      	str	r3, [r7, #84]	; 0x54
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	3314      	adds	r3, #20
 800ac08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac0a:	63ba      	str	r2, [r7, #56]	; 0x38
 800ac0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ac10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac12:	e841 2300 	strex	r3, r2, [r1]
 800ac16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1e5      	bne.n	800abea <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	3314      	adds	r3, #20
 800ac24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	e853 3f00 	ldrex	r3, [r3]
 800ac2c:	617b      	str	r3, [r7, #20]
   return(result);
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac34:	653b      	str	r3, [r7, #80]	; 0x50
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	3314      	adds	r3, #20
 800ac3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac3e:	627a      	str	r2, [r7, #36]	; 0x24
 800ac40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac42:	6a39      	ldr	r1, [r7, #32]
 800ac44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac46:	e841 2300 	strex	r3, r2, [r1]
 800ac4a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d1e5      	bne.n	800ac1e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800ac52:	2300      	movs	r3, #0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3760      	adds	r7, #96	; 0x60
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	0800a8bf 	.word	0x0800a8bf
 800ac60:	0800a9e5 	.word	0x0800a9e5
 800ac64:	0800aa1b 	.word	0x0800aa1b

0800ac68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b089      	sub	sp, #36	; 0x24
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	330c      	adds	r3, #12
 800ac76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	e853 3f00 	ldrex	r3, [r3]
 800ac7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ac86:	61fb      	str	r3, [r7, #28]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	330c      	adds	r3, #12
 800ac8e:	69fa      	ldr	r2, [r7, #28]
 800ac90:	61ba      	str	r2, [r7, #24]
 800ac92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac94:	6979      	ldr	r1, [r7, #20]
 800ac96:	69ba      	ldr	r2, [r7, #24]
 800ac98:	e841 2300 	strex	r3, r2, [r1]
 800ac9c:	613b      	str	r3, [r7, #16]
   return(result);
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1e5      	bne.n	800ac70 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2220      	movs	r2, #32
 800aca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800acac:	bf00      	nop
 800acae:	3724      	adds	r7, #36	; 0x24
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800acb8:	b480      	push	{r7}
 800acba:	b095      	sub	sp, #84	; 0x54
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	330c      	adds	r3, #12
 800acc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acca:	e853 3f00 	ldrex	r3, [r3]
 800acce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800acd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800acd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	330c      	adds	r3, #12
 800acde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ace0:	643a      	str	r2, [r7, #64]	; 0x40
 800ace2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ace6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ace8:	e841 2300 	strex	r3, r2, [r1]
 800acec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800acee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1e5      	bne.n	800acc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	3314      	adds	r3, #20
 800acfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfc:	6a3b      	ldr	r3, [r7, #32]
 800acfe:	e853 3f00 	ldrex	r3, [r3]
 800ad02:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	f023 0301 	bic.w	r3, r3, #1
 800ad0a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	3314      	adds	r3, #20
 800ad12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad14:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad1c:	e841 2300 	strex	r3, r2, [r1]
 800ad20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d1e5      	bne.n	800acf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d119      	bne.n	800ad64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	330c      	adds	r3, #12
 800ad36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	e853 3f00 	ldrex	r3, [r3]
 800ad3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	f023 0310 	bic.w	r3, r3, #16
 800ad46:	647b      	str	r3, [r7, #68]	; 0x44
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	330c      	adds	r3, #12
 800ad4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad50:	61ba      	str	r2, [r7, #24]
 800ad52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad54:	6979      	ldr	r1, [r7, #20]
 800ad56:	69ba      	ldr	r2, [r7, #24]
 800ad58:	e841 2300 	strex	r3, r2, [r1]
 800ad5c:	613b      	str	r3, [r7, #16]
   return(result);
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d1e5      	bne.n	800ad30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2220      	movs	r2, #32
 800ad68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ad72:	bf00      	nop
 800ad74:	3754      	adds	r7, #84	; 0x54
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b084      	sub	sp, #16
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f7ff fd0b 	bl	800a7b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad9e:	bf00      	nop
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b084      	sub	sp, #16
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb2:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2220      	movs	r2, #32
 800adbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f7ff fd00 	bl	800a7c8 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adc8:	bf00      	nop
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800addc:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2200      	movs	r2, #0
 800ade2:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2220      	movs	r2, #32
 800ade8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2200      	movs	r2, #0
 800adf0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	f7ff fcf2 	bl	800a7dc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adf8:	bf00      	nop
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	2b21      	cmp	r3, #33	; 0x21
 800ae12:	d13e      	bne.n	800ae92 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae1c:	d114      	bne.n	800ae48 <UART_Transmit_IT+0x48>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	691b      	ldr	r3, [r3, #16]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d110      	bne.n	800ae48 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	881b      	ldrh	r3, [r3, #0]
 800ae30:	461a      	mov	r2, r3
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae3a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a1b      	ldr	r3, [r3, #32]
 800ae40:	1c9a      	adds	r2, r3, #2
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	621a      	str	r2, [r3, #32]
 800ae46:	e008      	b.n	800ae5a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6a1b      	ldr	r3, [r3, #32]
 800ae4c:	1c59      	adds	r1, r3, #1
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	6211      	str	r1, [r2, #32]
 800ae52:	781a      	ldrb	r2, [r3, #0]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	3b01      	subs	r3, #1
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	4619      	mov	r1, r3
 800ae68:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d10f      	bne.n	800ae8e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68da      	ldr	r2, [r3, #12]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	68da      	ldr	r2, [r3, #12]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	e000      	b.n	800ae94 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ae92:	2302      	movs	r3, #2
  }
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3714      	adds	r7, #20
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	68da      	ldr	r2, [r3, #12]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aeb6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2220      	movs	r2, #32
 800aebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f7f6 fc9b 	bl	80017fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aec6:	2300      	movs	r3, #0
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3708      	adds	r7, #8
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b08c      	sub	sp, #48	; 0x30
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	2b22      	cmp	r3, #34	; 0x22
 800aee2:	f040 80ab 	bne.w	800b03c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeee:	d117      	bne.n	800af20 <UART_Receive_IT+0x50>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	691b      	ldr	r3, [r3, #16]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d113      	bne.n	800af20 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800aef8:	2300      	movs	r3, #0
 800aefa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af00:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	b29b      	uxth	r3, r3
 800af0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af0e:	b29a      	uxth	r2, r3
 800af10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af18:	1c9a      	adds	r2, r3, #2
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	629a      	str	r2, [r3, #40]	; 0x28
 800af1e:	e026      	b.n	800af6e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800af26:	2300      	movs	r3, #0
 800af28:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af32:	d007      	beq.n	800af44 <UART_Receive_IT+0x74>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d10a      	bne.n	800af52 <UART_Receive_IT+0x82>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d106      	bne.n	800af52 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	b2da      	uxtb	r2, r3
 800af4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4e:	701a      	strb	r2, [r3, #0]
 800af50:	e008      	b.n	800af64 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af5e:	b2da      	uxtb	r2, r3
 800af60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af62:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af68:	1c5a      	adds	r2, r3, #1
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af72:	b29b      	uxth	r3, r3
 800af74:	3b01      	subs	r3, #1
 800af76:	b29b      	uxth	r3, r3
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	4619      	mov	r1, r3
 800af7c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d15a      	bne.n	800b038 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	68da      	ldr	r2, [r3, #12]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f022 0220 	bic.w	r2, r2, #32
 800af90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68da      	ldr	r2, [r3, #12]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800afa0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	695a      	ldr	r2, [r3, #20]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f022 0201 	bic.w	r2, r2, #1
 800afb0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2220      	movs	r2, #32
 800afb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d135      	bne.n	800b02e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	330c      	adds	r3, #12
 800afce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	e853 3f00 	ldrex	r3, [r3]
 800afd6:	613b      	str	r3, [r7, #16]
   return(result);
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	f023 0310 	bic.w	r3, r3, #16
 800afde:	627b      	str	r3, [r7, #36]	; 0x24
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	330c      	adds	r3, #12
 800afe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afe8:	623a      	str	r2, [r7, #32]
 800afea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afec:	69f9      	ldr	r1, [r7, #28]
 800afee:	6a3a      	ldr	r2, [r7, #32]
 800aff0:	e841 2300 	strex	r3, r2, [r1]
 800aff4:	61bb      	str	r3, [r7, #24]
   return(result);
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1e5      	bne.n	800afc8 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f003 0310 	and.w	r3, r3, #16
 800b006:	2b10      	cmp	r3, #16
 800b008:	d10a      	bne.n	800b020 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b00a:	2300      	movs	r3, #0
 800b00c:	60fb      	str	r3, [r7, #12]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	60fb      	str	r3, [r7, #12]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	60fb      	str	r3, [r7, #12]
 800b01e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b024:	4619      	mov	r1, r3
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7ff fbe2 	bl	800a7f0 <HAL_UARTEx_RxEventCallback>
 800b02c:	e002      	b.n	800b034 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f7f6 fc1c 	bl	800186c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b034:	2300      	movs	r3, #0
 800b036:	e002      	b.n	800b03e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b038:	2300      	movs	r3, #0
 800b03a:	e000      	b.n	800b03e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b03c:	2302      	movs	r3, #2
  }
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3730      	adds	r7, #48	; 0x30
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
	...

0800b048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b04c:	b0c0      	sub	sp, #256	; 0x100
 800b04e:	af00      	add	r7, sp, #0
 800b050:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	691b      	ldr	r3, [r3, #16]
 800b05c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b064:	68d9      	ldr	r1, [r3, #12]
 800b066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	ea40 0301 	orr.w	r3, r0, r1
 800b070:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b076:	689a      	ldr	r2, [r3, #8]
 800b078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	431a      	orrs	r2, r3
 800b080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b084:	695b      	ldr	r3, [r3, #20]
 800b086:	431a      	orrs	r2, r3
 800b088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b08c:	69db      	ldr	r3, [r3, #28]
 800b08e:	4313      	orrs	r3, r2
 800b090:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b0a0:	f021 010c 	bic.w	r1, r1, #12
 800b0a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b0ae:	430b      	orrs	r3, r1
 800b0b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b0b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	695b      	ldr	r3, [r3, #20]
 800b0ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b0be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0c2:	6999      	ldr	r1, [r3, #24]
 800b0c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	ea40 0301 	orr.w	r3, r0, r1
 800b0ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b0d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	4b8f      	ldr	r3, [pc, #572]	; (800b314 <UART_SetConfig+0x2cc>)
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d005      	beq.n	800b0e8 <UART_SetConfig+0xa0>
 800b0dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	4b8d      	ldr	r3, [pc, #564]	; (800b318 <UART_SetConfig+0x2d0>)
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d104      	bne.n	800b0f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b0e8:	f7fe fac6 	bl	8009678 <HAL_RCC_GetPCLK2Freq>
 800b0ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b0f0:	e003      	b.n	800b0fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b0f2:	f7fe faad 	bl	8009650 <HAL_RCC_GetPCLK1Freq>
 800b0f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0fe:	69db      	ldr	r3, [r3, #28]
 800b100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b104:	f040 810c 	bne.w	800b320 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b10c:	2200      	movs	r2, #0
 800b10e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b112:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b116:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b11a:	4622      	mov	r2, r4
 800b11c:	462b      	mov	r3, r5
 800b11e:	1891      	adds	r1, r2, r2
 800b120:	65b9      	str	r1, [r7, #88]	; 0x58
 800b122:	415b      	adcs	r3, r3
 800b124:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b126:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b12a:	4621      	mov	r1, r4
 800b12c:	eb12 0801 	adds.w	r8, r2, r1
 800b130:	4629      	mov	r1, r5
 800b132:	eb43 0901 	adc.w	r9, r3, r1
 800b136:	f04f 0200 	mov.w	r2, #0
 800b13a:	f04f 0300 	mov.w	r3, #0
 800b13e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b142:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b146:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b14a:	4690      	mov	r8, r2
 800b14c:	4699      	mov	r9, r3
 800b14e:	4623      	mov	r3, r4
 800b150:	eb18 0303 	adds.w	r3, r8, r3
 800b154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b158:	462b      	mov	r3, r5
 800b15a:	eb49 0303 	adc.w	r3, r9, r3
 800b15e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b16e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b172:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b176:	460b      	mov	r3, r1
 800b178:	18db      	adds	r3, r3, r3
 800b17a:	653b      	str	r3, [r7, #80]	; 0x50
 800b17c:	4613      	mov	r3, r2
 800b17e:	eb42 0303 	adc.w	r3, r2, r3
 800b182:	657b      	str	r3, [r7, #84]	; 0x54
 800b184:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b188:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b18c:	f7f5 fcee 	bl	8000b6c <__aeabi_uldivmod>
 800b190:	4602      	mov	r2, r0
 800b192:	460b      	mov	r3, r1
 800b194:	4b61      	ldr	r3, [pc, #388]	; (800b31c <UART_SetConfig+0x2d4>)
 800b196:	fba3 2302 	umull	r2, r3, r3, r2
 800b19a:	095b      	lsrs	r3, r3, #5
 800b19c:	011c      	lsls	r4, r3, #4
 800b19e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b1a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b1ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b1b0:	4642      	mov	r2, r8
 800b1b2:	464b      	mov	r3, r9
 800b1b4:	1891      	adds	r1, r2, r2
 800b1b6:	64b9      	str	r1, [r7, #72]	; 0x48
 800b1b8:	415b      	adcs	r3, r3
 800b1ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b1c0:	4641      	mov	r1, r8
 800b1c2:	eb12 0a01 	adds.w	sl, r2, r1
 800b1c6:	4649      	mov	r1, r9
 800b1c8:	eb43 0b01 	adc.w	fp, r3, r1
 800b1cc:	f04f 0200 	mov.w	r2, #0
 800b1d0:	f04f 0300 	mov.w	r3, #0
 800b1d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b1d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b1dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b1e0:	4692      	mov	sl, r2
 800b1e2:	469b      	mov	fp, r3
 800b1e4:	4643      	mov	r3, r8
 800b1e6:	eb1a 0303 	adds.w	r3, sl, r3
 800b1ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b1ee:	464b      	mov	r3, r9
 800b1f0:	eb4b 0303 	adc.w	r3, fp, r3
 800b1f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b1f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b204:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b208:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b20c:	460b      	mov	r3, r1
 800b20e:	18db      	adds	r3, r3, r3
 800b210:	643b      	str	r3, [r7, #64]	; 0x40
 800b212:	4613      	mov	r3, r2
 800b214:	eb42 0303 	adc.w	r3, r2, r3
 800b218:	647b      	str	r3, [r7, #68]	; 0x44
 800b21a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b21e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b222:	f7f5 fca3 	bl	8000b6c <__aeabi_uldivmod>
 800b226:	4602      	mov	r2, r0
 800b228:	460b      	mov	r3, r1
 800b22a:	4611      	mov	r1, r2
 800b22c:	4b3b      	ldr	r3, [pc, #236]	; (800b31c <UART_SetConfig+0x2d4>)
 800b22e:	fba3 2301 	umull	r2, r3, r3, r1
 800b232:	095b      	lsrs	r3, r3, #5
 800b234:	2264      	movs	r2, #100	; 0x64
 800b236:	fb02 f303 	mul.w	r3, r2, r3
 800b23a:	1acb      	subs	r3, r1, r3
 800b23c:	00db      	lsls	r3, r3, #3
 800b23e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b242:	4b36      	ldr	r3, [pc, #216]	; (800b31c <UART_SetConfig+0x2d4>)
 800b244:	fba3 2302 	umull	r2, r3, r3, r2
 800b248:	095b      	lsrs	r3, r3, #5
 800b24a:	005b      	lsls	r3, r3, #1
 800b24c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b250:	441c      	add	r4, r3
 800b252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b256:	2200      	movs	r2, #0
 800b258:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b25c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b260:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b264:	4642      	mov	r2, r8
 800b266:	464b      	mov	r3, r9
 800b268:	1891      	adds	r1, r2, r2
 800b26a:	63b9      	str	r1, [r7, #56]	; 0x38
 800b26c:	415b      	adcs	r3, r3
 800b26e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b270:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b274:	4641      	mov	r1, r8
 800b276:	1851      	adds	r1, r2, r1
 800b278:	6339      	str	r1, [r7, #48]	; 0x30
 800b27a:	4649      	mov	r1, r9
 800b27c:	414b      	adcs	r3, r1
 800b27e:	637b      	str	r3, [r7, #52]	; 0x34
 800b280:	f04f 0200 	mov.w	r2, #0
 800b284:	f04f 0300 	mov.w	r3, #0
 800b288:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b28c:	4659      	mov	r1, fp
 800b28e:	00cb      	lsls	r3, r1, #3
 800b290:	4651      	mov	r1, sl
 800b292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b296:	4651      	mov	r1, sl
 800b298:	00ca      	lsls	r2, r1, #3
 800b29a:	4610      	mov	r0, r2
 800b29c:	4619      	mov	r1, r3
 800b29e:	4603      	mov	r3, r0
 800b2a0:	4642      	mov	r2, r8
 800b2a2:	189b      	adds	r3, r3, r2
 800b2a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b2a8:	464b      	mov	r3, r9
 800b2aa:	460a      	mov	r2, r1
 800b2ac:	eb42 0303 	adc.w	r3, r2, r3
 800b2b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b2b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b2c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b2c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	18db      	adds	r3, r3, r3
 800b2cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	eb42 0303 	adc.w	r3, r2, r3
 800b2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b2da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b2de:	f7f5 fc45 	bl	8000b6c <__aeabi_uldivmod>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	4b0d      	ldr	r3, [pc, #52]	; (800b31c <UART_SetConfig+0x2d4>)
 800b2e8:	fba3 1302 	umull	r1, r3, r3, r2
 800b2ec:	095b      	lsrs	r3, r3, #5
 800b2ee:	2164      	movs	r1, #100	; 0x64
 800b2f0:	fb01 f303 	mul.w	r3, r1, r3
 800b2f4:	1ad3      	subs	r3, r2, r3
 800b2f6:	00db      	lsls	r3, r3, #3
 800b2f8:	3332      	adds	r3, #50	; 0x32
 800b2fa:	4a08      	ldr	r2, [pc, #32]	; (800b31c <UART_SetConfig+0x2d4>)
 800b2fc:	fba2 2303 	umull	r2, r3, r2, r3
 800b300:	095b      	lsrs	r3, r3, #5
 800b302:	f003 0207 	and.w	r2, r3, #7
 800b306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4422      	add	r2, r4
 800b30e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b310:	e105      	b.n	800b51e <UART_SetConfig+0x4d6>
 800b312:	bf00      	nop
 800b314:	40011000 	.word	0x40011000
 800b318:	40011400 	.word	0x40011400
 800b31c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b324:	2200      	movs	r2, #0
 800b326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b32a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b32e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b332:	4642      	mov	r2, r8
 800b334:	464b      	mov	r3, r9
 800b336:	1891      	adds	r1, r2, r2
 800b338:	6239      	str	r1, [r7, #32]
 800b33a:	415b      	adcs	r3, r3
 800b33c:	627b      	str	r3, [r7, #36]	; 0x24
 800b33e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b342:	4641      	mov	r1, r8
 800b344:	1854      	adds	r4, r2, r1
 800b346:	4649      	mov	r1, r9
 800b348:	eb43 0501 	adc.w	r5, r3, r1
 800b34c:	f04f 0200 	mov.w	r2, #0
 800b350:	f04f 0300 	mov.w	r3, #0
 800b354:	00eb      	lsls	r3, r5, #3
 800b356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b35a:	00e2      	lsls	r2, r4, #3
 800b35c:	4614      	mov	r4, r2
 800b35e:	461d      	mov	r5, r3
 800b360:	4643      	mov	r3, r8
 800b362:	18e3      	adds	r3, r4, r3
 800b364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b368:	464b      	mov	r3, r9
 800b36a:	eb45 0303 	adc.w	r3, r5, r3
 800b36e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b37e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b382:	f04f 0200 	mov.w	r2, #0
 800b386:	f04f 0300 	mov.w	r3, #0
 800b38a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b38e:	4629      	mov	r1, r5
 800b390:	008b      	lsls	r3, r1, #2
 800b392:	4621      	mov	r1, r4
 800b394:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b398:	4621      	mov	r1, r4
 800b39a:	008a      	lsls	r2, r1, #2
 800b39c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b3a0:	f7f5 fbe4 	bl	8000b6c <__aeabi_uldivmod>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	4b60      	ldr	r3, [pc, #384]	; (800b52c <UART_SetConfig+0x4e4>)
 800b3aa:	fba3 2302 	umull	r2, r3, r3, r2
 800b3ae:	095b      	lsrs	r3, r3, #5
 800b3b0:	011c      	lsls	r4, r3, #4
 800b3b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b3bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b3c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b3c4:	4642      	mov	r2, r8
 800b3c6:	464b      	mov	r3, r9
 800b3c8:	1891      	adds	r1, r2, r2
 800b3ca:	61b9      	str	r1, [r7, #24]
 800b3cc:	415b      	adcs	r3, r3
 800b3ce:	61fb      	str	r3, [r7, #28]
 800b3d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b3d4:	4641      	mov	r1, r8
 800b3d6:	1851      	adds	r1, r2, r1
 800b3d8:	6139      	str	r1, [r7, #16]
 800b3da:	4649      	mov	r1, r9
 800b3dc:	414b      	adcs	r3, r1
 800b3de:	617b      	str	r3, [r7, #20]
 800b3e0:	f04f 0200 	mov.w	r2, #0
 800b3e4:	f04f 0300 	mov.w	r3, #0
 800b3e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b3ec:	4659      	mov	r1, fp
 800b3ee:	00cb      	lsls	r3, r1, #3
 800b3f0:	4651      	mov	r1, sl
 800b3f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3f6:	4651      	mov	r1, sl
 800b3f8:	00ca      	lsls	r2, r1, #3
 800b3fa:	4610      	mov	r0, r2
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	4603      	mov	r3, r0
 800b400:	4642      	mov	r2, r8
 800b402:	189b      	adds	r3, r3, r2
 800b404:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b408:	464b      	mov	r3, r9
 800b40a:	460a      	mov	r2, r1
 800b40c:	eb42 0303 	adc.w	r3, r2, r3
 800b410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b41e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b420:	f04f 0200 	mov.w	r2, #0
 800b424:	f04f 0300 	mov.w	r3, #0
 800b428:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b42c:	4649      	mov	r1, r9
 800b42e:	008b      	lsls	r3, r1, #2
 800b430:	4641      	mov	r1, r8
 800b432:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b436:	4641      	mov	r1, r8
 800b438:	008a      	lsls	r2, r1, #2
 800b43a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b43e:	f7f5 fb95 	bl	8000b6c <__aeabi_uldivmod>
 800b442:	4602      	mov	r2, r0
 800b444:	460b      	mov	r3, r1
 800b446:	4b39      	ldr	r3, [pc, #228]	; (800b52c <UART_SetConfig+0x4e4>)
 800b448:	fba3 1302 	umull	r1, r3, r3, r2
 800b44c:	095b      	lsrs	r3, r3, #5
 800b44e:	2164      	movs	r1, #100	; 0x64
 800b450:	fb01 f303 	mul.w	r3, r1, r3
 800b454:	1ad3      	subs	r3, r2, r3
 800b456:	011b      	lsls	r3, r3, #4
 800b458:	3332      	adds	r3, #50	; 0x32
 800b45a:	4a34      	ldr	r2, [pc, #208]	; (800b52c <UART_SetConfig+0x4e4>)
 800b45c:	fba2 2303 	umull	r2, r3, r2, r3
 800b460:	095b      	lsrs	r3, r3, #5
 800b462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b466:	441c      	add	r4, r3
 800b468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b46c:	2200      	movs	r2, #0
 800b46e:	673b      	str	r3, [r7, #112]	; 0x70
 800b470:	677a      	str	r2, [r7, #116]	; 0x74
 800b472:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b476:	4642      	mov	r2, r8
 800b478:	464b      	mov	r3, r9
 800b47a:	1891      	adds	r1, r2, r2
 800b47c:	60b9      	str	r1, [r7, #8]
 800b47e:	415b      	adcs	r3, r3
 800b480:	60fb      	str	r3, [r7, #12]
 800b482:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b486:	4641      	mov	r1, r8
 800b488:	1851      	adds	r1, r2, r1
 800b48a:	6039      	str	r1, [r7, #0]
 800b48c:	4649      	mov	r1, r9
 800b48e:	414b      	adcs	r3, r1
 800b490:	607b      	str	r3, [r7, #4]
 800b492:	f04f 0200 	mov.w	r2, #0
 800b496:	f04f 0300 	mov.w	r3, #0
 800b49a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b49e:	4659      	mov	r1, fp
 800b4a0:	00cb      	lsls	r3, r1, #3
 800b4a2:	4651      	mov	r1, sl
 800b4a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b4a8:	4651      	mov	r1, sl
 800b4aa:	00ca      	lsls	r2, r1, #3
 800b4ac:	4610      	mov	r0, r2
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	4642      	mov	r2, r8
 800b4b4:	189b      	adds	r3, r3, r2
 800b4b6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4b8:	464b      	mov	r3, r9
 800b4ba:	460a      	mov	r2, r1
 800b4bc:	eb42 0303 	adc.w	r3, r2, r3
 800b4c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b4c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	663b      	str	r3, [r7, #96]	; 0x60
 800b4cc:	667a      	str	r2, [r7, #100]	; 0x64
 800b4ce:	f04f 0200 	mov.w	r2, #0
 800b4d2:	f04f 0300 	mov.w	r3, #0
 800b4d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b4da:	4649      	mov	r1, r9
 800b4dc:	008b      	lsls	r3, r1, #2
 800b4de:	4641      	mov	r1, r8
 800b4e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b4e4:	4641      	mov	r1, r8
 800b4e6:	008a      	lsls	r2, r1, #2
 800b4e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b4ec:	f7f5 fb3e 	bl	8000b6c <__aeabi_uldivmod>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	4b0d      	ldr	r3, [pc, #52]	; (800b52c <UART_SetConfig+0x4e4>)
 800b4f6:	fba3 1302 	umull	r1, r3, r3, r2
 800b4fa:	095b      	lsrs	r3, r3, #5
 800b4fc:	2164      	movs	r1, #100	; 0x64
 800b4fe:	fb01 f303 	mul.w	r3, r1, r3
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	011b      	lsls	r3, r3, #4
 800b506:	3332      	adds	r3, #50	; 0x32
 800b508:	4a08      	ldr	r2, [pc, #32]	; (800b52c <UART_SetConfig+0x4e4>)
 800b50a:	fba2 2303 	umull	r2, r3, r2, r3
 800b50e:	095b      	lsrs	r3, r3, #5
 800b510:	f003 020f 	and.w	r2, r3, #15
 800b514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4422      	add	r2, r4
 800b51c:	609a      	str	r2, [r3, #8]
}
 800b51e:	bf00      	nop
 800b520:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b524:	46bd      	mov	sp, r7
 800b526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b52a:	bf00      	nop
 800b52c:	51eb851f 	.word	0x51eb851f

0800b530 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b530:	b480      	push	{r7}
 800b532:	b085      	sub	sp, #20
 800b534:	af00      	add	r7, sp, #0
 800b536:	4603      	mov	r3, r0
 800b538:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b53a:	2300      	movs	r3, #0
 800b53c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b53e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b542:	2b84      	cmp	r3, #132	; 0x84
 800b544:	d005      	beq.n	800b552 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b546:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	4413      	add	r3, r2
 800b54e:	3303      	adds	r3, #3
 800b550:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b552:	68fb      	ldr	r3, [r7, #12]
}
 800b554:	4618      	mov	r0, r3
 800b556:	3714      	adds	r7, #20
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b560:	b480      	push	{r7}
 800b562:	b083      	sub	sp, #12
 800b564:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b566:	f3ef 8305 	mrs	r3, IPSR
 800b56a:	607b      	str	r3, [r7, #4]
  return(result);
 800b56c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b56e:	2b00      	cmp	r3, #0
 800b570:	bf14      	ite	ne
 800b572:	2301      	movne	r3, #1
 800b574:	2300      	moveq	r3, #0
 800b576:	b2db      	uxtb	r3, r3
}
 800b578:	4618      	mov	r0, r3
 800b57a:	370c      	adds	r7, #12
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr

0800b584 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b588:	f001 f9da 	bl	800c940 <vTaskStartScheduler>
  
  return osOK;
 800b58c:	2300      	movs	r3, #0
}
 800b58e:	4618      	mov	r0, r3
 800b590:	bd80      	pop	{r7, pc}

0800b592 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800b596:	f7ff ffe3 	bl	800b560 <inHandlerMode>
 800b59a:	4603      	mov	r3, r0
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d003      	beq.n	800b5a8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b5a0:	f001 faee 	bl	800cb80 <xTaskGetTickCountFromISR>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	e002      	b.n	800b5ae <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b5a8:	f001 fada 	bl	800cb60 <xTaskGetTickCount>
 800b5ac:	4603      	mov	r3, r0
  }
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b5b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5b4:	b089      	sub	sp, #36	; 0x24
 800b5b6:	af04      	add	r7, sp, #16
 800b5b8:	6078      	str	r0, [r7, #4]
 800b5ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	695b      	ldr	r3, [r3, #20]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d020      	beq.n	800b606 <osThreadCreate+0x54>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	699b      	ldr	r3, [r3, #24]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d01c      	beq.n	800b606 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	685c      	ldr	r4, [r3, #4]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681d      	ldr	r5, [r3, #0]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	691e      	ldr	r6, [r3, #16]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7ff ffa6 	bl	800b530 <makeFreeRtosPriority>
 800b5e4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	695b      	ldr	r3, [r3, #20]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5ee:	9202      	str	r2, [sp, #8]
 800b5f0:	9301      	str	r3, [sp, #4]
 800b5f2:	9100      	str	r1, [sp, #0]
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	4632      	mov	r2, r6
 800b5f8:	4629      	mov	r1, r5
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f000 ffd8 	bl	800c5b0 <xTaskCreateStatic>
 800b600:	4603      	mov	r3, r0
 800b602:	60fb      	str	r3, [r7, #12]
 800b604:	e01c      	b.n	800b640 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	685c      	ldr	r4, [r3, #4]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b612:	b29e      	uxth	r6, r3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7ff ff88 	bl	800b530 <makeFreeRtosPriority>
 800b620:	4602      	mov	r2, r0
 800b622:	f107 030c 	add.w	r3, r7, #12
 800b626:	9301      	str	r3, [sp, #4]
 800b628:	9200      	str	r2, [sp, #0]
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	4632      	mov	r2, r6
 800b62e:	4629      	mov	r1, r5
 800b630:	4620      	mov	r0, r4
 800b632:	f001 f81a 	bl	800c66a <xTaskCreate>
 800b636:	4603      	mov	r3, r0
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d001      	beq.n	800b640 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b63c:	2300      	movs	r3, #0
 800b63e:	e000      	b.n	800b642 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b640:	68fb      	ldr	r3, [r7, #12]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b64a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b084      	sub	sp, #16
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d001      	beq.n	800b660 <osDelay+0x16>
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	e000      	b.n	800b662 <osDelay+0x18>
 800b660:	2301      	movs	r3, #1
 800b662:	4618      	mov	r0, r3
 800b664:	f001 f938 	bl	800c8d8 <vTaskDelay>
  
  return osOK;
 800b668:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
	...

0800b674 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af02      	add	r7, sp, #8
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	460b      	mov	r3, r1
 800b67e:	607a      	str	r2, [r7, #4]
 800b680:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d013      	beq.n	800b6b2 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800b68a:	7afb      	ldrb	r3, [r7, #11]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d101      	bne.n	800b694 <osTimerCreate+0x20>
 800b690:	2101      	movs	r1, #1
 800b692:	e000      	b.n	800b696 <osTimerCreate+0x22>
 800b694:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800b69a:	68fa      	ldr	r2, [r7, #12]
 800b69c:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800b69e:	9201      	str	r2, [sp, #4]
 800b6a0:	9300      	str	r3, [sp, #0]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	460a      	mov	r2, r1
 800b6a6:	2101      	movs	r1, #1
 800b6a8:	480b      	ldr	r0, [pc, #44]	; (800b6d8 <osTimerCreate+0x64>)
 800b6aa:	f002 f826 	bl	800d6fa <xTimerCreateStatic>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	e00e      	b.n	800b6d0 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800b6b2:	7afb      	ldrb	r3, [r7, #11]
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d101      	bne.n	800b6bc <osTimerCreate+0x48>
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	e000      	b.n	800b6be <osTimerCreate+0x4a>
 800b6bc:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2101      	movs	r1, #1
 800b6c8:	4803      	ldr	r0, [pc, #12]	; (800b6d8 <osTimerCreate+0x64>)
 800b6ca:	f001 fff5 	bl	800d6b8 <xTimerCreate>
 800b6ce:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3710      	adds	r7, #16
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	0800ec48 	.word	0x0800ec48

0800b6dc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d007      	beq.n	800b6fc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	2001      	movs	r0, #1
 800b6f4:	f000 fa35 	bl	800bb62 <xQueueCreateMutexStatic>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	e003      	b.n	800b704 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b6fc:	2001      	movs	r0, #1
 800b6fe:	f000 fa18 	bl	800bb32 <xQueueCreateMutex>
 800b702:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b704:	4618      	mov	r0, r3
 800b706:	3708      	adds	r7, #8
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 800b716:	2381      	movs	r3, #129	; 0x81
#endif
}
 800b718:	4618      	mov	r0, r3
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f103 0208 	add.w	r2, r3, #8
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b73c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f103 0208 	add.w	r2, r3, #8
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f103 0208 	add.w	r2, r3, #8
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2200      	movs	r2, #0
 800b756:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b758:	bf00      	nop
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b772:	bf00      	nop
 800b774:	370c      	adds	r7, #12
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr

0800b77e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b77e:	b480      	push	{r7}
 800b780:	b085      	sub	sp, #20
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
 800b786:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	689a      	ldr	r2, [r3, #8]
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	683a      	ldr	r2, [r7, #0]
 800b7a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	683a      	ldr	r2, [r7, #0]
 800b7a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	1c5a      	adds	r2, r3, #1
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	601a      	str	r2, [r3, #0]
}
 800b7ba:	bf00      	nop
 800b7bc:	3714      	adds	r7, #20
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr

0800b7c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b7c6:	b480      	push	{r7}
 800b7c8:	b085      	sub	sp, #20
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
 800b7ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7dc:	d103      	bne.n	800b7e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	691b      	ldr	r3, [r3, #16]
 800b7e2:	60fb      	str	r3, [r7, #12]
 800b7e4:	e00c      	b.n	800b800 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	3308      	adds	r3, #8
 800b7ea:	60fb      	str	r3, [r7, #12]
 800b7ec:	e002      	b.n	800b7f4 <vListInsert+0x2e>
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	60fb      	str	r3, [r7, #12]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	68ba      	ldr	r2, [r7, #8]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d2f6      	bcs.n	800b7ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	685a      	ldr	r2, [r3, #4]
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	683a      	ldr	r2, [r7, #0]
 800b80e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	68fa      	ldr	r2, [r7, #12]
 800b814:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	683a      	ldr	r2, [r7, #0]
 800b81a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	1c5a      	adds	r2, r3, #1
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	601a      	str	r2, [r3, #0]
}
 800b82c:	bf00      	nop
 800b82e:	3714      	adds	r7, #20
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	691b      	ldr	r3, [r3, #16]
 800b844:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	6892      	ldr	r2, [r2, #8]
 800b84e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	6852      	ldr	r2, [r2, #4]
 800b858:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	429a      	cmp	r2, r3
 800b862:	d103      	bne.n	800b86c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	689a      	ldr	r2, [r3, #8]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	1e5a      	subs	r2, r3, #1
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
}
 800b880:	4618      	mov	r0, r3
 800b882:	3714      	adds	r7, #20
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b084      	sub	sp, #16
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d10a      	bne.n	800b8b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a4:	f383 8811 	msr	BASEPRI, r3
 800b8a8:	f3bf 8f6f 	isb	sy
 800b8ac:	f3bf 8f4f 	dsb	sy
 800b8b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b8b2:	bf00      	nop
 800b8b4:	e7fe      	b.n	800b8b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b8b6:	f002 fbad 	bl	800e014 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8c2:	68f9      	ldr	r1, [r7, #12]
 800b8c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b8c6:	fb01 f303 	mul.w	r3, r1, r3
 800b8ca:	441a      	add	r2, r3
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	68f9      	ldr	r1, [r7, #12]
 800b8ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b8ec:	fb01 f303 	mul.w	r3, r1, r3
 800b8f0:	441a      	add	r2, r3
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	22ff      	movs	r2, #255	; 0xff
 800b8fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	22ff      	movs	r2, #255	; 0xff
 800b902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d114      	bne.n	800b936 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	691b      	ldr	r3, [r3, #16]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d01a      	beq.n	800b94a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	3310      	adds	r3, #16
 800b918:	4618      	mov	r0, r3
 800b91a:	f001 faa7 	bl	800ce6c <xTaskRemoveFromEventList>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d012      	beq.n	800b94a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b924:	4b0c      	ldr	r3, [pc, #48]	; (800b958 <xQueueGenericReset+0xcc>)
 800b926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b92a:	601a      	str	r2, [r3, #0]
 800b92c:	f3bf 8f4f 	dsb	sy
 800b930:	f3bf 8f6f 	isb	sy
 800b934:	e009      	b.n	800b94a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	3310      	adds	r3, #16
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7ff fef2 	bl	800b724 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	3324      	adds	r3, #36	; 0x24
 800b944:	4618      	mov	r0, r3
 800b946:	f7ff feed 	bl	800b724 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b94a:	f002 fb93 	bl	800e074 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b94e:	2301      	movs	r3, #1
}
 800b950:	4618      	mov	r0, r3
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}
 800b958:	e000ed04 	.word	0xe000ed04

0800b95c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b08e      	sub	sp, #56	; 0x38
 800b960:	af02      	add	r7, sp, #8
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	607a      	str	r2, [r7, #4]
 800b968:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d10a      	bne.n	800b986 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b974:	f383 8811 	msr	BASEPRI, r3
 800b978:	f3bf 8f6f 	isb	sy
 800b97c:	f3bf 8f4f 	dsb	sy
 800b980:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b982:	bf00      	nop
 800b984:	e7fe      	b.n	800b984 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d10a      	bne.n	800b9a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b99e:	bf00      	nop
 800b9a0:	e7fe      	b.n	800b9a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d002      	beq.n	800b9ae <xQueueGenericCreateStatic+0x52>
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d001      	beq.n	800b9b2 <xQueueGenericCreateStatic+0x56>
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e000      	b.n	800b9b4 <xQueueGenericCreateStatic+0x58>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d10a      	bne.n	800b9ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9bc:	f383 8811 	msr	BASEPRI, r3
 800b9c0:	f3bf 8f6f 	isb	sy
 800b9c4:	f3bf 8f4f 	dsb	sy
 800b9c8:	623b      	str	r3, [r7, #32]
}
 800b9ca:	bf00      	nop
 800b9cc:	e7fe      	b.n	800b9cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d102      	bne.n	800b9da <xQueueGenericCreateStatic+0x7e>
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d101      	bne.n	800b9de <xQueueGenericCreateStatic+0x82>
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e000      	b.n	800b9e0 <xQueueGenericCreateStatic+0x84>
 800b9de:	2300      	movs	r3, #0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d10a      	bne.n	800b9fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e8:	f383 8811 	msr	BASEPRI, r3
 800b9ec:	f3bf 8f6f 	isb	sy
 800b9f0:	f3bf 8f4f 	dsb	sy
 800b9f4:	61fb      	str	r3, [r7, #28]
}
 800b9f6:	bf00      	nop
 800b9f8:	e7fe      	b.n	800b9f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b9fa:	2348      	movs	r3, #72	; 0x48
 800b9fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	2b48      	cmp	r3, #72	; 0x48
 800ba02:	d00a      	beq.n	800ba1a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ba04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba08:	f383 8811 	msr	BASEPRI, r3
 800ba0c:	f3bf 8f6f 	isb	sy
 800ba10:	f3bf 8f4f 	dsb	sy
 800ba14:	61bb      	str	r3, [r7, #24]
}
 800ba16:	bf00      	nop
 800ba18:	e7fe      	b.n	800ba18 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ba1a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ba20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00d      	beq.n	800ba42 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ba26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ba32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba34:	9300      	str	r3, [sp, #0]
 800ba36:	4613      	mov	r3, r2
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	68b9      	ldr	r1, [r7, #8]
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f000 f83f 	bl	800bac0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3730      	adds	r7, #48	; 0x30
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b08a      	sub	sp, #40	; 0x28
 800ba50:	af02      	add	r7, sp, #8
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	4613      	mov	r3, r2
 800ba58:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10a      	bne.n	800ba76 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	613b      	str	r3, [r7, #16]
}
 800ba72:	bf00      	nop
 800ba74:	e7fe      	b.n	800ba74 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	fb02 f303 	mul.w	r3, r2, r3
 800ba7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ba80:	69fb      	ldr	r3, [r7, #28]
 800ba82:	3348      	adds	r3, #72	; 0x48
 800ba84:	4618      	mov	r0, r3
 800ba86:	f002 fbe7 	bl	800e258 <pvPortMalloc>
 800ba8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d011      	beq.n	800bab6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	3348      	adds	r3, #72	; 0x48
 800ba9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ba9c:	69bb      	ldr	r3, [r7, #24]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800baa4:	79fa      	ldrb	r2, [r7, #7]
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	4613      	mov	r3, r2
 800baac:	697a      	ldr	r2, [r7, #20]
 800baae:	68b9      	ldr	r1, [r7, #8]
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	f000 f805 	bl	800bac0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bab6:	69bb      	ldr	r3, [r7, #24]
	}
 800bab8:	4618      	mov	r0, r3
 800baba:	3720      	adds	r7, #32
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	607a      	str	r2, [r7, #4]
 800bacc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d103      	bne.n	800badc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bad4:	69bb      	ldr	r3, [r7, #24]
 800bad6:	69ba      	ldr	r2, [r7, #24]
 800bad8:	601a      	str	r2, [r3, #0]
 800bada:	e002      	b.n	800bae2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800badc:	69bb      	ldr	r3, [r7, #24]
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bae2:	69bb      	ldr	r3, [r7, #24]
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bae8:	69bb      	ldr	r3, [r7, #24]
 800baea:	68ba      	ldr	r2, [r7, #8]
 800baec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800baee:	2101      	movs	r1, #1
 800baf0:	69b8      	ldr	r0, [r7, #24]
 800baf2:	f7ff fecb 	bl	800b88c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800baf6:	bf00      	nop
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b082      	sub	sp, #8
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00e      	beq.n	800bb2a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2200      	movs	r2, #0
 800bb16:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bb1e:	2300      	movs	r3, #0
 800bb20:	2200      	movs	r2, #0
 800bb22:	2100      	movs	r1, #0
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 f837 	bl	800bb98 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bb2a:	bf00      	nop
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b086      	sub	sp, #24
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	4603      	mov	r3, r0
 800bb3a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	617b      	str	r3, [r7, #20]
 800bb40:	2300      	movs	r3, #0
 800bb42:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bb44:	79fb      	ldrb	r3, [r7, #7]
 800bb46:	461a      	mov	r2, r3
 800bb48:	6939      	ldr	r1, [r7, #16]
 800bb4a:	6978      	ldr	r0, [r7, #20]
 800bb4c:	f7ff ff7e 	bl	800ba4c <xQueueGenericCreate>
 800bb50:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bb52:	68f8      	ldr	r0, [r7, #12]
 800bb54:	f7ff ffd3 	bl	800bafe <prvInitialiseMutex>

		return xNewQueue;
 800bb58:	68fb      	ldr	r3, [r7, #12]
	}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3718      	adds	r7, #24
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b088      	sub	sp, #32
 800bb66:	af02      	add	r7, sp, #8
 800bb68:	4603      	mov	r3, r0
 800bb6a:	6039      	str	r1, [r7, #0]
 800bb6c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	617b      	str	r3, [r7, #20]
 800bb72:	2300      	movs	r3, #0
 800bb74:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bb76:	79fb      	ldrb	r3, [r7, #7]
 800bb78:	9300      	str	r3, [sp, #0]
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	6939      	ldr	r1, [r7, #16]
 800bb80:	6978      	ldr	r0, [r7, #20]
 800bb82:	f7ff feeb 	bl	800b95c <xQueueGenericCreateStatic>
 800bb86:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f7ff ffb8 	bl	800bafe <prvInitialiseMutex>

		return xNewQueue;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
	}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3718      	adds	r7, #24
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b08e      	sub	sp, #56	; 0x38
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	607a      	str	r2, [r7, #4]
 800bba4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bba6:	2300      	movs	r3, #0
 800bba8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d10a      	bne.n	800bbca <xQueueGenericSend+0x32>
	__asm volatile
 800bbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb8:	f383 8811 	msr	BASEPRI, r3
 800bbbc:	f3bf 8f6f 	isb	sy
 800bbc0:	f3bf 8f4f 	dsb	sy
 800bbc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bbc6:	bf00      	nop
 800bbc8:	e7fe      	b.n	800bbc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d103      	bne.n	800bbd8 <xQueueGenericSend+0x40>
 800bbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d101      	bne.n	800bbdc <xQueueGenericSend+0x44>
 800bbd8:	2301      	movs	r3, #1
 800bbda:	e000      	b.n	800bbde <xQueueGenericSend+0x46>
 800bbdc:	2300      	movs	r3, #0
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d10a      	bne.n	800bbf8 <xQueueGenericSend+0x60>
	__asm volatile
 800bbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe6:	f383 8811 	msr	BASEPRI, r3
 800bbea:	f3bf 8f6f 	isb	sy
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bbf4:	bf00      	nop
 800bbf6:	e7fe      	b.n	800bbf6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	2b02      	cmp	r3, #2
 800bbfc:	d103      	bne.n	800bc06 <xQueueGenericSend+0x6e>
 800bbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d101      	bne.n	800bc0a <xQueueGenericSend+0x72>
 800bc06:	2301      	movs	r3, #1
 800bc08:	e000      	b.n	800bc0c <xQueueGenericSend+0x74>
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d10a      	bne.n	800bc26 <xQueueGenericSend+0x8e>
	__asm volatile
 800bc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc14:	f383 8811 	msr	BASEPRI, r3
 800bc18:	f3bf 8f6f 	isb	sy
 800bc1c:	f3bf 8f4f 	dsb	sy
 800bc20:	623b      	str	r3, [r7, #32]
}
 800bc22:	bf00      	nop
 800bc24:	e7fe      	b.n	800bc24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc26:	f001 fadd 	bl	800d1e4 <xTaskGetSchedulerState>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d102      	bne.n	800bc36 <xQueueGenericSend+0x9e>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d101      	bne.n	800bc3a <xQueueGenericSend+0xa2>
 800bc36:	2301      	movs	r3, #1
 800bc38:	e000      	b.n	800bc3c <xQueueGenericSend+0xa4>
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d10a      	bne.n	800bc56 <xQueueGenericSend+0xbe>
	__asm volatile
 800bc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc44:	f383 8811 	msr	BASEPRI, r3
 800bc48:	f3bf 8f6f 	isb	sy
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	61fb      	str	r3, [r7, #28]
}
 800bc52:	bf00      	nop
 800bc54:	e7fe      	b.n	800bc54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc56:	f002 f9dd 	bl	800e014 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d302      	bcc.n	800bc6c <xQueueGenericSend+0xd4>
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	2b02      	cmp	r3, #2
 800bc6a:	d129      	bne.n	800bcc0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc6c:	683a      	ldr	r2, [r7, #0]
 800bc6e:	68b9      	ldr	r1, [r7, #8]
 800bc70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc72:	f000 fb2f 	bl	800c2d4 <prvCopyDataToQueue>
 800bc76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d010      	beq.n	800bca2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc82:	3324      	adds	r3, #36	; 0x24
 800bc84:	4618      	mov	r0, r3
 800bc86:	f001 f8f1 	bl	800ce6c <xTaskRemoveFromEventList>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d013      	beq.n	800bcb8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bc90:	4b3f      	ldr	r3, [pc, #252]	; (800bd90 <xQueueGenericSend+0x1f8>)
 800bc92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc96:	601a      	str	r2, [r3, #0]
 800bc98:	f3bf 8f4f 	dsb	sy
 800bc9c:	f3bf 8f6f 	isb	sy
 800bca0:	e00a      	b.n	800bcb8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d007      	beq.n	800bcb8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bca8:	4b39      	ldr	r3, [pc, #228]	; (800bd90 <xQueueGenericSend+0x1f8>)
 800bcaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcae:	601a      	str	r2, [r3, #0]
 800bcb0:	f3bf 8f4f 	dsb	sy
 800bcb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bcb8:	f002 f9dc 	bl	800e074 <vPortExitCritical>
				return pdPASS;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	e063      	b.n	800bd88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d103      	bne.n	800bcce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bcc6:	f002 f9d5 	bl	800e074 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bcca:	2300      	movs	r3, #0
 800bccc:	e05c      	b.n	800bd88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bcce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d106      	bne.n	800bce2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bcd4:	f107 0314 	add.w	r3, r7, #20
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f001 f929 	bl	800cf30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bcde:	2301      	movs	r3, #1
 800bce0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bce2:	f002 f9c7 	bl	800e074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bce6:	f000 fe91 	bl	800ca0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bcea:	f002 f993 	bl	800e014 <vPortEnterCritical>
 800bcee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcf4:	b25b      	sxtb	r3, r3
 800bcf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcfa:	d103      	bne.n	800bd04 <xQueueGenericSend+0x16c>
 800bcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd0a:	b25b      	sxtb	r3, r3
 800bd0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd10:	d103      	bne.n	800bd1a <xQueueGenericSend+0x182>
 800bd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd14:	2200      	movs	r2, #0
 800bd16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd1a:	f002 f9ab 	bl	800e074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd1e:	1d3a      	adds	r2, r7, #4
 800bd20:	f107 0314 	add.w	r3, r7, #20
 800bd24:	4611      	mov	r1, r2
 800bd26:	4618      	mov	r0, r3
 800bd28:	f001 f918 	bl	800cf5c <xTaskCheckForTimeOut>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d124      	bne.n	800bd7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bd32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd34:	f000 fbc6 	bl	800c4c4 <prvIsQueueFull>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d018      	beq.n	800bd70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd40:	3310      	adds	r3, #16
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	4611      	mov	r1, r2
 800bd46:	4618      	mov	r0, r3
 800bd48:	f001 f840 	bl	800cdcc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bd4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd4e:	f000 fb51 	bl	800c3f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bd52:	f000 fe69 	bl	800ca28 <xTaskResumeAll>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	f47f af7c 	bne.w	800bc56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bd5e:	4b0c      	ldr	r3, [pc, #48]	; (800bd90 <xQueueGenericSend+0x1f8>)
 800bd60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd64:	601a      	str	r2, [r3, #0]
 800bd66:	f3bf 8f4f 	dsb	sy
 800bd6a:	f3bf 8f6f 	isb	sy
 800bd6e:	e772      	b.n	800bc56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bd70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd72:	f000 fb3f 	bl	800c3f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd76:	f000 fe57 	bl	800ca28 <xTaskResumeAll>
 800bd7a:	e76c      	b.n	800bc56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bd7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd7e:	f000 fb39 	bl	800c3f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd82:	f000 fe51 	bl	800ca28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bd86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3738      	adds	r7, #56	; 0x38
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	e000ed04 	.word	0xe000ed04

0800bd94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b090      	sub	sp, #64	; 0x40
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	607a      	str	r2, [r7, #4]
 800bda0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d10a      	bne.n	800bdc2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb0:	f383 8811 	msr	BASEPRI, r3
 800bdb4:	f3bf 8f6f 	isb	sy
 800bdb8:	f3bf 8f4f 	dsb	sy
 800bdbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bdbe:	bf00      	nop
 800bdc0:	e7fe      	b.n	800bdc0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d103      	bne.n	800bdd0 <xQueueGenericSendFromISR+0x3c>
 800bdc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d101      	bne.n	800bdd4 <xQueueGenericSendFromISR+0x40>
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	e000      	b.n	800bdd6 <xQueueGenericSendFromISR+0x42>
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d10a      	bne.n	800bdf0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bdec:	bf00      	nop
 800bdee:	e7fe      	b.n	800bdee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	2b02      	cmp	r3, #2
 800bdf4:	d103      	bne.n	800bdfe <xQueueGenericSendFromISR+0x6a>
 800bdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdfa:	2b01      	cmp	r3, #1
 800bdfc:	d101      	bne.n	800be02 <xQueueGenericSendFromISR+0x6e>
 800bdfe:	2301      	movs	r3, #1
 800be00:	e000      	b.n	800be04 <xQueueGenericSendFromISR+0x70>
 800be02:	2300      	movs	r3, #0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10a      	bne.n	800be1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800be08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0c:	f383 8811 	msr	BASEPRI, r3
 800be10:	f3bf 8f6f 	isb	sy
 800be14:	f3bf 8f4f 	dsb	sy
 800be18:	623b      	str	r3, [r7, #32]
}
 800be1a:	bf00      	nop
 800be1c:	e7fe      	b.n	800be1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be1e:	f002 f9db 	bl	800e1d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800be22:	f3ef 8211 	mrs	r2, BASEPRI
 800be26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2a:	f383 8811 	msr	BASEPRI, r3
 800be2e:	f3bf 8f6f 	isb	sy
 800be32:	f3bf 8f4f 	dsb	sy
 800be36:	61fa      	str	r2, [r7, #28]
 800be38:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800be3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be46:	429a      	cmp	r2, r3
 800be48:	d302      	bcc.n	800be50 <xQueueGenericSendFromISR+0xbc>
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	2b02      	cmp	r3, #2
 800be4e:	d12f      	bne.n	800beb0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800be50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be60:	683a      	ldr	r2, [r7, #0]
 800be62:	68b9      	ldr	r1, [r7, #8]
 800be64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be66:	f000 fa35 	bl	800c2d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800be6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800be6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be72:	d112      	bne.n	800be9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d016      	beq.n	800beaa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be7e:	3324      	adds	r3, #36	; 0x24
 800be80:	4618      	mov	r0, r3
 800be82:	f000 fff3 	bl	800ce6c <xTaskRemoveFromEventList>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00e      	beq.n	800beaa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00b      	beq.n	800beaa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2201      	movs	r2, #1
 800be96:	601a      	str	r2, [r3, #0]
 800be98:	e007      	b.n	800beaa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800be9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800be9e:	3301      	adds	r3, #1
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	b25a      	sxtb	r2, r3
 800bea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800beaa:	2301      	movs	r3, #1
 800beac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800beae:	e001      	b.n	800beb4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800beb0:	2300      	movs	r3, #0
 800beb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800beb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bebe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3740      	adds	r7, #64	; 0x40
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
	...

0800becc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b08c      	sub	sp, #48	; 0x30
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bed8:	2300      	movs	r3, #0
 800beda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10a      	bne.n	800befc <xQueueReceive+0x30>
	__asm volatile
 800bee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beea:	f383 8811 	msr	BASEPRI, r3
 800beee:	f3bf 8f6f 	isb	sy
 800bef2:	f3bf 8f4f 	dsb	sy
 800bef6:	623b      	str	r3, [r7, #32]
}
 800bef8:	bf00      	nop
 800befa:	e7fe      	b.n	800befa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d103      	bne.n	800bf0a <xQueueReceive+0x3e>
 800bf02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d101      	bne.n	800bf0e <xQueueReceive+0x42>
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e000      	b.n	800bf10 <xQueueReceive+0x44>
 800bf0e:	2300      	movs	r3, #0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d10a      	bne.n	800bf2a <xQueueReceive+0x5e>
	__asm volatile
 800bf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf18:	f383 8811 	msr	BASEPRI, r3
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	f3bf 8f4f 	dsb	sy
 800bf24:	61fb      	str	r3, [r7, #28]
}
 800bf26:	bf00      	nop
 800bf28:	e7fe      	b.n	800bf28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf2a:	f001 f95b 	bl	800d1e4 <xTaskGetSchedulerState>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d102      	bne.n	800bf3a <xQueueReceive+0x6e>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d101      	bne.n	800bf3e <xQueueReceive+0x72>
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e000      	b.n	800bf40 <xQueueReceive+0x74>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d10a      	bne.n	800bf5a <xQueueReceive+0x8e>
	__asm volatile
 800bf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf48:	f383 8811 	msr	BASEPRI, r3
 800bf4c:	f3bf 8f6f 	isb	sy
 800bf50:	f3bf 8f4f 	dsb	sy
 800bf54:	61bb      	str	r3, [r7, #24]
}
 800bf56:	bf00      	nop
 800bf58:	e7fe      	b.n	800bf58 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf5a:	f002 f85b 	bl	800e014 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d01f      	beq.n	800bfaa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf6a:	68b9      	ldr	r1, [r7, #8]
 800bf6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf6e:	f000 fa1b 	bl	800c3a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf74:	1e5a      	subs	r2, r3, #1
 800bf76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7c:	691b      	ldr	r3, [r3, #16]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d00f      	beq.n	800bfa2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf84:	3310      	adds	r3, #16
 800bf86:	4618      	mov	r0, r3
 800bf88:	f000 ff70 	bl	800ce6c <xTaskRemoveFromEventList>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d007      	beq.n	800bfa2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bf92:	4b3d      	ldr	r3, [pc, #244]	; (800c088 <xQueueReceive+0x1bc>)
 800bf94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf98:	601a      	str	r2, [r3, #0]
 800bf9a:	f3bf 8f4f 	dsb	sy
 800bf9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bfa2:	f002 f867 	bl	800e074 <vPortExitCritical>
				return pdPASS;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e069      	b.n	800c07e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d103      	bne.n	800bfb8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bfb0:	f002 f860 	bl	800e074 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	e062      	b.n	800c07e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bfb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d106      	bne.n	800bfcc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfbe:	f107 0310 	add.w	r3, r7, #16
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f000 ffb4 	bl	800cf30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bfcc:	f002 f852 	bl	800e074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bfd0:	f000 fd1c 	bl	800ca0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfd4:	f002 f81e 	bl	800e014 <vPortEnterCritical>
 800bfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfde:	b25b      	sxtb	r3, r3
 800bfe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfe4:	d103      	bne.n	800bfee <xQueueReceive+0x122>
 800bfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bff4:	b25b      	sxtb	r3, r3
 800bff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bffa:	d103      	bne.n	800c004 <xQueueReceive+0x138>
 800bffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffe:	2200      	movs	r2, #0
 800c000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c004:	f002 f836 	bl	800e074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c008:	1d3a      	adds	r2, r7, #4
 800c00a:	f107 0310 	add.w	r3, r7, #16
 800c00e:	4611      	mov	r1, r2
 800c010:	4618      	mov	r0, r3
 800c012:	f000 ffa3 	bl	800cf5c <xTaskCheckForTimeOut>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d123      	bne.n	800c064 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c01c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c01e:	f000 fa3b 	bl	800c498 <prvIsQueueEmpty>
 800c022:	4603      	mov	r3, r0
 800c024:	2b00      	cmp	r3, #0
 800c026:	d017      	beq.n	800c058 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02a:	3324      	adds	r3, #36	; 0x24
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	4611      	mov	r1, r2
 800c030:	4618      	mov	r0, r3
 800c032:	f000 fecb 	bl	800cdcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c038:	f000 f9dc 	bl	800c3f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c03c:	f000 fcf4 	bl	800ca28 <xTaskResumeAll>
 800c040:	4603      	mov	r3, r0
 800c042:	2b00      	cmp	r3, #0
 800c044:	d189      	bne.n	800bf5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c046:	4b10      	ldr	r3, [pc, #64]	; (800c088 <xQueueReceive+0x1bc>)
 800c048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c04c:	601a      	str	r2, [r3, #0]
 800c04e:	f3bf 8f4f 	dsb	sy
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	e780      	b.n	800bf5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c05a:	f000 f9cb 	bl	800c3f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c05e:	f000 fce3 	bl	800ca28 <xTaskResumeAll>
 800c062:	e77a      	b.n	800bf5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c066:	f000 f9c5 	bl	800c3f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c06a:	f000 fcdd 	bl	800ca28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c06e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c070:	f000 fa12 	bl	800c498 <prvIsQueueEmpty>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	f43f af6f 	beq.w	800bf5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c07c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3730      	adds	r7, #48	; 0x30
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	e000ed04 	.word	0xe000ed04

0800c08c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b08e      	sub	sp, #56	; 0x38
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c096:	2300      	movs	r3, #0
 800c098:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d10a      	bne.n	800c0be <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ac:	f383 8811 	msr	BASEPRI, r3
 800c0b0:	f3bf 8f6f 	isb	sy
 800c0b4:	f3bf 8f4f 	dsb	sy
 800c0b8:	623b      	str	r3, [r7, #32]
}
 800c0ba:	bf00      	nop
 800c0bc:	e7fe      	b.n	800c0bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d00a      	beq.n	800c0dc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ca:	f383 8811 	msr	BASEPRI, r3
 800c0ce:	f3bf 8f6f 	isb	sy
 800c0d2:	f3bf 8f4f 	dsb	sy
 800c0d6:	61fb      	str	r3, [r7, #28]
}
 800c0d8:	bf00      	nop
 800c0da:	e7fe      	b.n	800c0da <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0dc:	f001 f882 	bl	800d1e4 <xTaskGetSchedulerState>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d102      	bne.n	800c0ec <xQueueSemaphoreTake+0x60>
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d101      	bne.n	800c0f0 <xQueueSemaphoreTake+0x64>
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	e000      	b.n	800c0f2 <xQueueSemaphoreTake+0x66>
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d10a      	bne.n	800c10c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fa:	f383 8811 	msr	BASEPRI, r3
 800c0fe:	f3bf 8f6f 	isb	sy
 800c102:	f3bf 8f4f 	dsb	sy
 800c106:	61bb      	str	r3, [r7, #24]
}
 800c108:	bf00      	nop
 800c10a:	e7fe      	b.n	800c10a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c10c:	f001 ff82 	bl	800e014 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c114:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d024      	beq.n	800c166 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11e:	1e5a      	subs	r2, r3, #1
 800c120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c122:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d104      	bne.n	800c136 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c12c:	f001 fa02 	bl	800d534 <pvTaskIncrementMutexHeldCount>
 800c130:	4602      	mov	r2, r0
 800c132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c134:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d00f      	beq.n	800c15e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c140:	3310      	adds	r3, #16
 800c142:	4618      	mov	r0, r3
 800c144:	f000 fe92 	bl	800ce6c <xTaskRemoveFromEventList>
 800c148:	4603      	mov	r3, r0
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d007      	beq.n	800c15e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c14e:	4b54      	ldr	r3, [pc, #336]	; (800c2a0 <xQueueSemaphoreTake+0x214>)
 800c150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c154:	601a      	str	r2, [r3, #0]
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c15e:	f001 ff89 	bl	800e074 <vPortExitCritical>
				return pdPASS;
 800c162:	2301      	movs	r3, #1
 800c164:	e097      	b.n	800c296 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d111      	bne.n	800c190 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d00a      	beq.n	800c188 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c176:	f383 8811 	msr	BASEPRI, r3
 800c17a:	f3bf 8f6f 	isb	sy
 800c17e:	f3bf 8f4f 	dsb	sy
 800c182:	617b      	str	r3, [r7, #20]
}
 800c184:	bf00      	nop
 800c186:	e7fe      	b.n	800c186 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c188:	f001 ff74 	bl	800e074 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c18c:	2300      	movs	r3, #0
 800c18e:	e082      	b.n	800c296 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c192:	2b00      	cmp	r3, #0
 800c194:	d106      	bne.n	800c1a4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c196:	f107 030c 	add.w	r3, r7, #12
 800c19a:	4618      	mov	r0, r3
 800c19c:	f000 fec8 	bl	800cf30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c1a4:	f001 ff66 	bl	800e074 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1a8:	f000 fc30 	bl	800ca0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1ac:	f001 ff32 	bl	800e014 <vPortEnterCritical>
 800c1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1b6:	b25b      	sxtb	r3, r3
 800c1b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1bc:	d103      	bne.n	800c1c6 <xQueueSemaphoreTake+0x13a>
 800c1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1cc:	b25b      	sxtb	r3, r3
 800c1ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1d2:	d103      	bne.n	800c1dc <xQueueSemaphoreTake+0x150>
 800c1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1dc:	f001 ff4a 	bl	800e074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c1e0:	463a      	mov	r2, r7
 800c1e2:	f107 030c 	add.w	r3, r7, #12
 800c1e6:	4611      	mov	r1, r2
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f000 feb7 	bl	800cf5c <xTaskCheckForTimeOut>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d132      	bne.n	800c25a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1f6:	f000 f94f 	bl	800c498 <prvIsQueueEmpty>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d026      	beq.n	800c24e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d109      	bne.n	800c21c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c208:	f001 ff04 	bl	800e014 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	4618      	mov	r0, r3
 800c212:	f001 f805 	bl	800d220 <xTaskPriorityInherit>
 800c216:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c218:	f001 ff2c 	bl	800e074 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21e:	3324      	adds	r3, #36	; 0x24
 800c220:	683a      	ldr	r2, [r7, #0]
 800c222:	4611      	mov	r1, r2
 800c224:	4618      	mov	r0, r3
 800c226:	f000 fdd1 	bl	800cdcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c22a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c22c:	f000 f8e2 	bl	800c3f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c230:	f000 fbfa 	bl	800ca28 <xTaskResumeAll>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	f47f af68 	bne.w	800c10c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c23c:	4b18      	ldr	r3, [pc, #96]	; (800c2a0 <xQueueSemaphoreTake+0x214>)
 800c23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c242:	601a      	str	r2, [r3, #0]
 800c244:	f3bf 8f4f 	dsb	sy
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	e75e      	b.n	800c10c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c24e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c250:	f000 f8d0 	bl	800c3f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c254:	f000 fbe8 	bl	800ca28 <xTaskResumeAll>
 800c258:	e758      	b.n	800c10c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c25a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c25c:	f000 f8ca 	bl	800c3f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c260:	f000 fbe2 	bl	800ca28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c264:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c266:	f000 f917 	bl	800c498 <prvIsQueueEmpty>
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f43f af4d 	beq.w	800c10c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c274:	2b00      	cmp	r3, #0
 800c276:	d00d      	beq.n	800c294 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c278:	f001 fecc 	bl	800e014 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c27c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c27e:	f000 f811 	bl	800c2a4 <prvGetDisinheritPriorityAfterTimeout>
 800c282:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c286:	689b      	ldr	r3, [r3, #8]
 800c288:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c28a:	4618      	mov	r0, r3
 800c28c:	f001 f8c4 	bl	800d418 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c290:	f001 fef0 	bl	800e074 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c294:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c296:	4618      	mov	r0, r3
 800c298:	3738      	adds	r7, #56	; 0x38
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	e000ed04 	.word	0xe000ed04

0800c2a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d006      	beq.n	800c2c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f1c3 0304 	rsb	r3, r3, #4
 800c2be:	60fb      	str	r3, [r7, #12]
 800c2c0:	e001      	b.n	800c2c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
	}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3714      	adds	r7, #20
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b086      	sub	sp, #24
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	60b9      	str	r1, [r7, #8]
 800c2de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d10d      	bne.n	800c30e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d14d      	bne.n	800c396 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	689b      	ldr	r3, [r3, #8]
 800c2fe:	4618      	mov	r0, r3
 800c300:	f001 f804 	bl	800d30c <xTaskPriorityDisinherit>
 800c304:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2200      	movs	r2, #0
 800c30a:	609a      	str	r2, [r3, #8]
 800c30c:	e043      	b.n	800c396 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d119      	bne.n	800c348 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	6858      	ldr	r0, [r3, #4]
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c31c:	461a      	mov	r2, r3
 800c31e:	68b9      	ldr	r1, [r7, #8]
 800c320:	f002 f9ae 	bl	800e680 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	685a      	ldr	r2, [r3, #4]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c32c:	441a      	add	r2, r3
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	685a      	ldr	r2, [r3, #4]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d32b      	bcc.n	800c396 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	605a      	str	r2, [r3, #4]
 800c346:	e026      	b.n	800c396 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	68d8      	ldr	r0, [r3, #12]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c350:	461a      	mov	r2, r3
 800c352:	68b9      	ldr	r1, [r7, #8]
 800c354:	f002 f994 	bl	800e680 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	68da      	ldr	r2, [r3, #12]
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c360:	425b      	negs	r3, r3
 800c362:	441a      	add	r2, r3
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	68da      	ldr	r2, [r3, #12]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	429a      	cmp	r2, r3
 800c372:	d207      	bcs.n	800c384 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	689a      	ldr	r2, [r3, #8]
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c37c:	425b      	negs	r3, r3
 800c37e:	441a      	add	r2, r3
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2b02      	cmp	r3, #2
 800c388:	d105      	bne.n	800c396 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d002      	beq.n	800c396 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	3b01      	subs	r3, #1
 800c394:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	1c5a      	adds	r2, r3, #1
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c39e:	697b      	ldr	r3, [r7, #20]
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3718      	adds	r7, #24
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d018      	beq.n	800c3ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	68da      	ldr	r2, [r3, #12]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3c2:	441a      	add	r2, r3
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	68da      	ldr	r2, [r3, #12]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	689b      	ldr	r3, [r3, #8]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d303      	bcc.n	800c3dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	68d9      	ldr	r1, [r3, #12]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	6838      	ldr	r0, [r7, #0]
 800c3e8:	f002 f94a 	bl	800e680 <memcpy>
	}
}
 800c3ec:	bf00      	nop
 800c3ee:	3708      	adds	r7, #8
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c3fc:	f001 fe0a 	bl	800e014 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c406:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c408:	e011      	b.n	800c42e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d012      	beq.n	800c438 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	3324      	adds	r3, #36	; 0x24
 800c416:	4618      	mov	r0, r3
 800c418:	f000 fd28 	bl	800ce6c <xTaskRemoveFromEventList>
 800c41c:	4603      	mov	r3, r0
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d001      	beq.n	800c426 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c422:	f000 fdfd 	bl	800d020 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c426:	7bfb      	ldrb	r3, [r7, #15]
 800c428:	3b01      	subs	r3, #1
 800c42a:	b2db      	uxtb	r3, r3
 800c42c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c42e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c432:	2b00      	cmp	r3, #0
 800c434:	dce9      	bgt.n	800c40a <prvUnlockQueue+0x16>
 800c436:	e000      	b.n	800c43a <prvUnlockQueue+0x46>
					break;
 800c438:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	22ff      	movs	r2, #255	; 0xff
 800c43e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c442:	f001 fe17 	bl	800e074 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c446:	f001 fde5 	bl	800e014 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c450:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c452:	e011      	b.n	800c478 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	691b      	ldr	r3, [r3, #16]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d012      	beq.n	800c482 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	3310      	adds	r3, #16
 800c460:	4618      	mov	r0, r3
 800c462:	f000 fd03 	bl	800ce6c <xTaskRemoveFromEventList>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d001      	beq.n	800c470 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c46c:	f000 fdd8 	bl	800d020 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c470:	7bbb      	ldrb	r3, [r7, #14]
 800c472:	3b01      	subs	r3, #1
 800c474:	b2db      	uxtb	r3, r3
 800c476:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c478:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	dce9      	bgt.n	800c454 <prvUnlockQueue+0x60>
 800c480:	e000      	b.n	800c484 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c482:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	22ff      	movs	r2, #255	; 0xff
 800c488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c48c:	f001 fdf2 	bl	800e074 <vPortExitCritical>
}
 800c490:	bf00      	nop
 800c492:	3710      	adds	r7, #16
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4a0:	f001 fdb8 	bl	800e014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d102      	bne.n	800c4b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	60fb      	str	r3, [r7, #12]
 800c4b0:	e001      	b.n	800c4b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c4b6:	f001 fddd 	bl	800e074 <vPortExitCritical>

	return xReturn;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3710      	adds	r7, #16
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4cc:	f001 fda2 	bl	800e014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d102      	bne.n	800c4e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c4dc:	2301      	movs	r3, #1
 800c4de:	60fb      	str	r3, [r7, #12]
 800c4e0:	e001      	b.n	800c4e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c4e6:	f001 fdc5 	bl	800e074 <vPortExitCritical>

	return xReturn;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3710      	adds	r7, #16
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}

0800c4f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b085      	sub	sp, #20
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c4fe:	2300      	movs	r3, #0
 800c500:	60fb      	str	r3, [r7, #12]
 800c502:	e014      	b.n	800c52e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c504:	4a0f      	ldr	r2, [pc, #60]	; (800c544 <vQueueAddToRegistry+0x50>)
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10b      	bne.n	800c528 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c510:	490c      	ldr	r1, [pc, #48]	; (800c544 <vQueueAddToRegistry+0x50>)
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	683a      	ldr	r2, [r7, #0]
 800c516:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c51a:	4a0a      	ldr	r2, [pc, #40]	; (800c544 <vQueueAddToRegistry+0x50>)
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	00db      	lsls	r3, r3, #3
 800c520:	4413      	add	r3, r2
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c526:	e006      	b.n	800c536 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	3301      	adds	r3, #1
 800c52c:	60fb      	str	r3, [r7, #12]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2b07      	cmp	r3, #7
 800c532:	d9e7      	bls.n	800c504 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c534:	bf00      	nop
 800c536:	bf00      	nop
 800c538:	3714      	adds	r7, #20
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr
 800c542:	bf00      	nop
 800c544:	200026f4 	.word	0x200026f4

0800c548 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b086      	sub	sp, #24
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	60f8      	str	r0, [r7, #12]
 800c550:	60b9      	str	r1, [r7, #8]
 800c552:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c558:	f001 fd5c 	bl	800e014 <vPortEnterCritical>
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c562:	b25b      	sxtb	r3, r3
 800c564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c568:	d103      	bne.n	800c572 <vQueueWaitForMessageRestricted+0x2a>
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	2200      	movs	r2, #0
 800c56e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c578:	b25b      	sxtb	r3, r3
 800c57a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c57e:	d103      	bne.n	800c588 <vQueueWaitForMessageRestricted+0x40>
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	2200      	movs	r2, #0
 800c584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c588:	f001 fd74 	bl	800e074 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c590:	2b00      	cmp	r3, #0
 800c592:	d106      	bne.n	800c5a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	3324      	adds	r3, #36	; 0x24
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	68b9      	ldr	r1, [r7, #8]
 800c59c:	4618      	mov	r0, r3
 800c59e:	f000 fc39 	bl	800ce14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c5a2:	6978      	ldr	r0, [r7, #20]
 800c5a4:	f7ff ff26 	bl	800c3f4 <prvUnlockQueue>
	}
 800c5a8:	bf00      	nop
 800c5aa:	3718      	adds	r7, #24
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b08e      	sub	sp, #56	; 0x38
 800c5b4:	af04      	add	r7, sp, #16
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	60b9      	str	r1, [r7, #8]
 800c5ba:	607a      	str	r2, [r7, #4]
 800c5bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d10a      	bne.n	800c5da <xTaskCreateStatic+0x2a>
	__asm volatile
 800c5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c8:	f383 8811 	msr	BASEPRI, r3
 800c5cc:	f3bf 8f6f 	isb	sy
 800c5d0:	f3bf 8f4f 	dsb	sy
 800c5d4:	623b      	str	r3, [r7, #32]
}
 800c5d6:	bf00      	nop
 800c5d8:	e7fe      	b.n	800c5d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d10a      	bne.n	800c5f6 <xTaskCreateStatic+0x46>
	__asm volatile
 800c5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e4:	f383 8811 	msr	BASEPRI, r3
 800c5e8:	f3bf 8f6f 	isb	sy
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	61fb      	str	r3, [r7, #28]
}
 800c5f2:	bf00      	nop
 800c5f4:	e7fe      	b.n	800c5f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c5f6:	2364      	movs	r3, #100	; 0x64
 800c5f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	2b64      	cmp	r3, #100	; 0x64
 800c5fe:	d00a      	beq.n	800c616 <xTaskCreateStatic+0x66>
	__asm volatile
 800c600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c604:	f383 8811 	msr	BASEPRI, r3
 800c608:	f3bf 8f6f 	isb	sy
 800c60c:	f3bf 8f4f 	dsb	sy
 800c610:	61bb      	str	r3, [r7, #24]
}
 800c612:	bf00      	nop
 800c614:	e7fe      	b.n	800c614 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c616:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d01e      	beq.n	800c65c <xTaskCreateStatic+0xac>
 800c61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c620:	2b00      	cmp	r3, #0
 800c622:	d01b      	beq.n	800c65c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c626:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c62c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c630:	2202      	movs	r2, #2
 800c632:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c636:	2300      	movs	r3, #0
 800c638:	9303      	str	r3, [sp, #12]
 800c63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63c:	9302      	str	r3, [sp, #8]
 800c63e:	f107 0314 	add.w	r3, r7, #20
 800c642:	9301      	str	r3, [sp, #4]
 800c644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c646:	9300      	str	r3, [sp, #0]
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	68b9      	ldr	r1, [r7, #8]
 800c64e:	68f8      	ldr	r0, [r7, #12]
 800c650:	f000 f850 	bl	800c6f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c654:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c656:	f000 f8d5 	bl	800c804 <prvAddNewTaskToReadyList>
 800c65a:	e001      	b.n	800c660 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c65c:	2300      	movs	r3, #0
 800c65e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c660:	697b      	ldr	r3, [r7, #20]
	}
 800c662:	4618      	mov	r0, r3
 800c664:	3728      	adds	r7, #40	; 0x28
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}

0800c66a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c66a:	b580      	push	{r7, lr}
 800c66c:	b08c      	sub	sp, #48	; 0x30
 800c66e:	af04      	add	r7, sp, #16
 800c670:	60f8      	str	r0, [r7, #12]
 800c672:	60b9      	str	r1, [r7, #8]
 800c674:	603b      	str	r3, [r7, #0]
 800c676:	4613      	mov	r3, r2
 800c678:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c67a:	88fb      	ldrh	r3, [r7, #6]
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	4618      	mov	r0, r3
 800c680:	f001 fdea 	bl	800e258 <pvPortMalloc>
 800c684:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d00e      	beq.n	800c6aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c68c:	2064      	movs	r0, #100	; 0x64
 800c68e:	f001 fde3 	bl	800e258 <pvPortMalloc>
 800c692:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d003      	beq.n	800c6a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	697a      	ldr	r2, [r7, #20]
 800c69e:	631a      	str	r2, [r3, #48]	; 0x30
 800c6a0:	e005      	b.n	800c6ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c6a2:	6978      	ldr	r0, [r7, #20]
 800c6a4:	f001 fea4 	bl	800e3f0 <vPortFree>
 800c6a8:	e001      	b.n	800c6ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c6ae:	69fb      	ldr	r3, [r7, #28]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d017      	beq.n	800c6e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c6b4:	69fb      	ldr	r3, [r7, #28]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c6bc:	88fa      	ldrh	r2, [r7, #6]
 800c6be:	2300      	movs	r3, #0
 800c6c0:	9303      	str	r3, [sp, #12]
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	9302      	str	r3, [sp, #8]
 800c6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c8:	9301      	str	r3, [sp, #4]
 800c6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6cc:	9300      	str	r3, [sp, #0]
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	68b9      	ldr	r1, [r7, #8]
 800c6d2:	68f8      	ldr	r0, [r7, #12]
 800c6d4:	f000 f80e 	bl	800c6f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6d8:	69f8      	ldr	r0, [r7, #28]
 800c6da:	f000 f893 	bl	800c804 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	61bb      	str	r3, [r7, #24]
 800c6e2:	e002      	b.n	800c6ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c6e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c6ea:	69bb      	ldr	r3, [r7, #24]
	}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3720      	adds	r7, #32
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b088      	sub	sp, #32
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	60b9      	str	r1, [r7, #8]
 800c6fe:	607a      	str	r2, [r7, #4]
 800c700:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c70c:	3b01      	subs	r3, #1
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	4413      	add	r3, r2
 800c712:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c714:	69bb      	ldr	r3, [r7, #24]
 800c716:	f023 0307 	bic.w	r3, r3, #7
 800c71a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c71c:	69bb      	ldr	r3, [r7, #24]
 800c71e:	f003 0307 	and.w	r3, r3, #7
 800c722:	2b00      	cmp	r3, #0
 800c724:	d00a      	beq.n	800c73c <prvInitialiseNewTask+0x48>
	__asm volatile
 800c726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72a:	f383 8811 	msr	BASEPRI, r3
 800c72e:	f3bf 8f6f 	isb	sy
 800c732:	f3bf 8f4f 	dsb	sy
 800c736:	617b      	str	r3, [r7, #20]
}
 800c738:	bf00      	nop
 800c73a:	e7fe      	b.n	800c73a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d01f      	beq.n	800c782 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c742:	2300      	movs	r3, #0
 800c744:	61fb      	str	r3, [r7, #28]
 800c746:	e012      	b.n	800c76e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c748:	68ba      	ldr	r2, [r7, #8]
 800c74a:	69fb      	ldr	r3, [r7, #28]
 800c74c:	4413      	add	r3, r2
 800c74e:	7819      	ldrb	r1, [r3, #0]
 800c750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	4413      	add	r3, r2
 800c756:	3334      	adds	r3, #52	; 0x34
 800c758:	460a      	mov	r2, r1
 800c75a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c75c:	68ba      	ldr	r2, [r7, #8]
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	4413      	add	r3, r2
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d006      	beq.n	800c776 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	3301      	adds	r3, #1
 800c76c:	61fb      	str	r3, [r7, #28]
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	2b1f      	cmp	r3, #31
 800c772:	d9e9      	bls.n	800c748 <prvInitialiseNewTask+0x54>
 800c774:	e000      	b.n	800c778 <prvInitialiseNewTask+0x84>
			{
				break;
 800c776:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77a:	2200      	movs	r2, #0
 800c77c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800c780:	e003      	b.n	800c78a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c784:	2200      	movs	r2, #0
 800c786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78c:	2b03      	cmp	r3, #3
 800c78e:	d901      	bls.n	800c794 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c790:	2303      	movs	r3, #3
 800c792:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c798:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c79e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 800c7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a8:	3304      	adds	r3, #4
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fe ffda 	bl	800b764 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b2:	3318      	adds	r3, #24
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7fe ffd5 	bl	800b764 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c2:	f1c3 0204 	rsb	r2, r3, #4
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d8:	2200      	movs	r2, #0
 800c7da:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c7de:	683a      	ldr	r2, [r7, #0]
 800c7e0:	68f9      	ldr	r1, [r7, #12]
 800c7e2:	69b8      	ldr	r0, [r7, #24]
 800c7e4:	f001 faec 	bl	800ddc0 <pxPortInitialiseStack>
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d002      	beq.n	800c7fa <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7fa:	bf00      	nop
 800c7fc:	3720      	adds	r7, #32
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
	...

0800c804 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c80c:	f001 fc02 	bl	800e014 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c810:	4b2a      	ldr	r3, [pc, #168]	; (800c8bc <prvAddNewTaskToReadyList+0xb8>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	3301      	adds	r3, #1
 800c816:	4a29      	ldr	r2, [pc, #164]	; (800c8bc <prvAddNewTaskToReadyList+0xb8>)
 800c818:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c81a:	4b29      	ldr	r3, [pc, #164]	; (800c8c0 <prvAddNewTaskToReadyList+0xbc>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d109      	bne.n	800c836 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c822:	4a27      	ldr	r2, [pc, #156]	; (800c8c0 <prvAddNewTaskToReadyList+0xbc>)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c828:	4b24      	ldr	r3, [pc, #144]	; (800c8bc <prvAddNewTaskToReadyList+0xb8>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d110      	bne.n	800c852 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c830:	f000 fc1a 	bl	800d068 <prvInitialiseTaskLists>
 800c834:	e00d      	b.n	800c852 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c836:	4b23      	ldr	r3, [pc, #140]	; (800c8c4 <prvAddNewTaskToReadyList+0xc0>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d109      	bne.n	800c852 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c83e:	4b20      	ldr	r3, [pc, #128]	; (800c8c0 <prvAddNewTaskToReadyList+0xbc>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c848:	429a      	cmp	r2, r3
 800c84a:	d802      	bhi.n	800c852 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c84c:	4a1c      	ldr	r2, [pc, #112]	; (800c8c0 <prvAddNewTaskToReadyList+0xbc>)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c852:	4b1d      	ldr	r3, [pc, #116]	; (800c8c8 <prvAddNewTaskToReadyList+0xc4>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	3301      	adds	r3, #1
 800c858:	4a1b      	ldr	r2, [pc, #108]	; (800c8c8 <prvAddNewTaskToReadyList+0xc4>)
 800c85a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c860:	2201      	movs	r2, #1
 800c862:	409a      	lsls	r2, r3
 800c864:	4b19      	ldr	r3, [pc, #100]	; (800c8cc <prvAddNewTaskToReadyList+0xc8>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4313      	orrs	r3, r2
 800c86a:	4a18      	ldr	r2, [pc, #96]	; (800c8cc <prvAddNewTaskToReadyList+0xc8>)
 800c86c:	6013      	str	r3, [r2, #0]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c872:	4613      	mov	r3, r2
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	4413      	add	r3, r2
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	4a15      	ldr	r2, [pc, #84]	; (800c8d0 <prvAddNewTaskToReadyList+0xcc>)
 800c87c:	441a      	add	r2, r3
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	3304      	adds	r3, #4
 800c882:	4619      	mov	r1, r3
 800c884:	4610      	mov	r0, r2
 800c886:	f7fe ff7a 	bl	800b77e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c88a:	f001 fbf3 	bl	800e074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c88e:	4b0d      	ldr	r3, [pc, #52]	; (800c8c4 <prvAddNewTaskToReadyList+0xc0>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d00e      	beq.n	800c8b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c896:	4b0a      	ldr	r3, [pc, #40]	; (800c8c0 <prvAddNewTaskToReadyList+0xbc>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d207      	bcs.n	800c8b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c8a4:	4b0b      	ldr	r3, [pc, #44]	; (800c8d4 <prvAddNewTaskToReadyList+0xd0>)
 800c8a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8aa:	601a      	str	r2, [r3, #0]
 800c8ac:	f3bf 8f4f 	dsb	sy
 800c8b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8b4:	bf00      	nop
 800c8b6:	3708      	adds	r7, #8
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	200027f8 	.word	0x200027f8
 800c8c0:	20002734 	.word	0x20002734
 800c8c4:	20002804 	.word	0x20002804
 800c8c8:	20002814 	.word	0x20002814
 800c8cc:	20002800 	.word	0x20002800
 800c8d0:	20002738 	.word	0x20002738
 800c8d4:	e000ed04 	.word	0xe000ed04

0800c8d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b084      	sub	sp, #16
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d017      	beq.n	800c91a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c8ea:	4b13      	ldr	r3, [pc, #76]	; (800c938 <vTaskDelay+0x60>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d00a      	beq.n	800c908 <vTaskDelay+0x30>
	__asm volatile
 800c8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	60bb      	str	r3, [r7, #8]
}
 800c904:	bf00      	nop
 800c906:	e7fe      	b.n	800c906 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c908:	f000 f880 	bl	800ca0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c90c:	2100      	movs	r1, #0
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 fe24 	bl	800d55c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c914:	f000 f888 	bl	800ca28 <xTaskResumeAll>
 800c918:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d107      	bne.n	800c930 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c920:	4b06      	ldr	r3, [pc, #24]	; (800c93c <vTaskDelay+0x64>)
 800c922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c926:	601a      	str	r2, [r3, #0]
 800c928:	f3bf 8f4f 	dsb	sy
 800c92c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c930:	bf00      	nop
 800c932:	3710      	adds	r7, #16
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}
 800c938:	20002820 	.word	0x20002820
 800c93c:	e000ed04 	.word	0xe000ed04

0800c940 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b08a      	sub	sp, #40	; 0x28
 800c944:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c946:	2300      	movs	r3, #0
 800c948:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c94a:	2300      	movs	r3, #0
 800c94c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c94e:	463a      	mov	r2, r7
 800c950:	1d39      	adds	r1, r7, #4
 800c952:	f107 0308 	add.w	r3, r7, #8
 800c956:	4618      	mov	r0, r3
 800c958:	f7f6 fac8 	bl	8002eec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c95c:	6839      	ldr	r1, [r7, #0]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	68ba      	ldr	r2, [r7, #8]
 800c962:	9202      	str	r2, [sp, #8]
 800c964:	9301      	str	r3, [sp, #4]
 800c966:	2300      	movs	r3, #0
 800c968:	9300      	str	r3, [sp, #0]
 800c96a:	2300      	movs	r3, #0
 800c96c:	460a      	mov	r2, r1
 800c96e:	4921      	ldr	r1, [pc, #132]	; (800c9f4 <vTaskStartScheduler+0xb4>)
 800c970:	4821      	ldr	r0, [pc, #132]	; (800c9f8 <vTaskStartScheduler+0xb8>)
 800c972:	f7ff fe1d 	bl	800c5b0 <xTaskCreateStatic>
 800c976:	4603      	mov	r3, r0
 800c978:	4a20      	ldr	r2, [pc, #128]	; (800c9fc <vTaskStartScheduler+0xbc>)
 800c97a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c97c:	4b1f      	ldr	r3, [pc, #124]	; (800c9fc <vTaskStartScheduler+0xbc>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d002      	beq.n	800c98a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c984:	2301      	movs	r3, #1
 800c986:	617b      	str	r3, [r7, #20]
 800c988:	e001      	b.n	800c98e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c98a:	2300      	movs	r3, #0
 800c98c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	2b01      	cmp	r3, #1
 800c992:	d102      	bne.n	800c99a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c994:	f000 fe48 	bl	800d628 <xTimerCreateTimerTask>
 800c998:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d116      	bne.n	800c9ce <vTaskStartScheduler+0x8e>
	__asm volatile
 800c9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a4:	f383 8811 	msr	BASEPRI, r3
 800c9a8:	f3bf 8f6f 	isb	sy
 800c9ac:	f3bf 8f4f 	dsb	sy
 800c9b0:	613b      	str	r3, [r7, #16]
}
 800c9b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c9b4:	4b12      	ldr	r3, [pc, #72]	; (800ca00 <vTaskStartScheduler+0xc0>)
 800c9b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c9bc:	4b11      	ldr	r3, [pc, #68]	; (800ca04 <vTaskStartScheduler+0xc4>)
 800c9be:	2201      	movs	r2, #1
 800c9c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c9c2:	4b11      	ldr	r3, [pc, #68]	; (800ca08 <vTaskStartScheduler+0xc8>)
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c9c8:	f001 fa82 	bl	800ded0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c9cc:	e00e      	b.n	800c9ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9d4:	d10a      	bne.n	800c9ec <vTaskStartScheduler+0xac>
	__asm volatile
 800c9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9da:	f383 8811 	msr	BASEPRI, r3
 800c9de:	f3bf 8f6f 	isb	sy
 800c9e2:	f3bf 8f4f 	dsb	sy
 800c9e6:	60fb      	str	r3, [r7, #12]
}
 800c9e8:	bf00      	nop
 800c9ea:	e7fe      	b.n	800c9ea <vTaskStartScheduler+0xaa>
}
 800c9ec:	bf00      	nop
 800c9ee:	3718      	adds	r7, #24
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	0800ec4c 	.word	0x0800ec4c
 800c9f8:	0800d039 	.word	0x0800d039
 800c9fc:	2000281c 	.word	0x2000281c
 800ca00:	20002818 	.word	0x20002818
 800ca04:	20002804 	.word	0x20002804
 800ca08:	200027fc 	.word	0x200027fc

0800ca0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ca10:	4b04      	ldr	r3, [pc, #16]	; (800ca24 <vTaskSuspendAll+0x18>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	3301      	adds	r3, #1
 800ca16:	4a03      	ldr	r2, [pc, #12]	; (800ca24 <vTaskSuspendAll+0x18>)
 800ca18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ca1a:	bf00      	nop
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr
 800ca24:	20002820 	.word	0x20002820

0800ca28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca32:	2300      	movs	r3, #0
 800ca34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca36:	4b41      	ldr	r3, [pc, #260]	; (800cb3c <xTaskResumeAll+0x114>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d10a      	bne.n	800ca54 <xTaskResumeAll+0x2c>
	__asm volatile
 800ca3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca42:	f383 8811 	msr	BASEPRI, r3
 800ca46:	f3bf 8f6f 	isb	sy
 800ca4a:	f3bf 8f4f 	dsb	sy
 800ca4e:	603b      	str	r3, [r7, #0]
}
 800ca50:	bf00      	nop
 800ca52:	e7fe      	b.n	800ca52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ca54:	f001 fade 	bl	800e014 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ca58:	4b38      	ldr	r3, [pc, #224]	; (800cb3c <xTaskResumeAll+0x114>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	3b01      	subs	r3, #1
 800ca5e:	4a37      	ldr	r2, [pc, #220]	; (800cb3c <xTaskResumeAll+0x114>)
 800ca60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca62:	4b36      	ldr	r3, [pc, #216]	; (800cb3c <xTaskResumeAll+0x114>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d161      	bne.n	800cb2e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ca6a:	4b35      	ldr	r3, [pc, #212]	; (800cb40 <xTaskResumeAll+0x118>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d05d      	beq.n	800cb2e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca72:	e02e      	b.n	800cad2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca74:	4b33      	ldr	r3, [pc, #204]	; (800cb44 <xTaskResumeAll+0x11c>)
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	3318      	adds	r3, #24
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7fe fed9 	bl	800b838 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	3304      	adds	r3, #4
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7fe fed4 	bl	800b838 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca94:	2201      	movs	r2, #1
 800ca96:	409a      	lsls	r2, r3
 800ca98:	4b2b      	ldr	r3, [pc, #172]	; (800cb48 <xTaskResumeAll+0x120>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	4a2a      	ldr	r2, [pc, #168]	; (800cb48 <xTaskResumeAll+0x120>)
 800caa0:	6013      	str	r3, [r2, #0]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caa6:	4613      	mov	r3, r2
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	4413      	add	r3, r2
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	4a27      	ldr	r2, [pc, #156]	; (800cb4c <xTaskResumeAll+0x124>)
 800cab0:	441a      	add	r2, r3
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	3304      	adds	r3, #4
 800cab6:	4619      	mov	r1, r3
 800cab8:	4610      	mov	r0, r2
 800caba:	f7fe fe60 	bl	800b77e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cac2:	4b23      	ldr	r3, [pc, #140]	; (800cb50 <xTaskResumeAll+0x128>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac8:	429a      	cmp	r2, r3
 800caca:	d302      	bcc.n	800cad2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cacc:	4b21      	ldr	r3, [pc, #132]	; (800cb54 <xTaskResumeAll+0x12c>)
 800cace:	2201      	movs	r2, #1
 800cad0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cad2:	4b1c      	ldr	r3, [pc, #112]	; (800cb44 <xTaskResumeAll+0x11c>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d1cc      	bne.n	800ca74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d001      	beq.n	800cae4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cae0:	f000 fb60 	bl	800d1a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cae4:	4b1c      	ldr	r3, [pc, #112]	; (800cb58 <xTaskResumeAll+0x130>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d010      	beq.n	800cb12 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800caf0:	f000 f858 	bl	800cba4 <xTaskIncrementTick>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d002      	beq.n	800cb00 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800cafa:	4b16      	ldr	r3, [pc, #88]	; (800cb54 <xTaskResumeAll+0x12c>)
 800cafc:	2201      	movs	r2, #1
 800cafe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	3b01      	subs	r3, #1
 800cb04:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d1f1      	bne.n	800caf0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800cb0c:	4b12      	ldr	r3, [pc, #72]	; (800cb58 <xTaskResumeAll+0x130>)
 800cb0e:	2200      	movs	r2, #0
 800cb10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb12:	4b10      	ldr	r3, [pc, #64]	; (800cb54 <xTaskResumeAll+0x12c>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d009      	beq.n	800cb2e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cb1e:	4b0f      	ldr	r3, [pc, #60]	; (800cb5c <xTaskResumeAll+0x134>)
 800cb20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb24:	601a      	str	r2, [r3, #0]
 800cb26:	f3bf 8f4f 	dsb	sy
 800cb2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb2e:	f001 faa1 	bl	800e074 <vPortExitCritical>

	return xAlreadyYielded;
 800cb32:	68bb      	ldr	r3, [r7, #8]
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3710      	adds	r7, #16
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	20002820 	.word	0x20002820
 800cb40:	200027f8 	.word	0x200027f8
 800cb44:	200027b8 	.word	0x200027b8
 800cb48:	20002800 	.word	0x20002800
 800cb4c:	20002738 	.word	0x20002738
 800cb50:	20002734 	.word	0x20002734
 800cb54:	2000280c 	.word	0x2000280c
 800cb58:	20002808 	.word	0x20002808
 800cb5c:	e000ed04 	.word	0xe000ed04

0800cb60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cb60:	b480      	push	{r7}
 800cb62:	b083      	sub	sp, #12
 800cb64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cb66:	4b05      	ldr	r3, [pc, #20]	; (800cb7c <xTaskGetTickCount+0x1c>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cb6c:	687b      	ldr	r3, [r7, #4]
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	370c      	adds	r7, #12
 800cb72:	46bd      	mov	sp, r7
 800cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb78:	4770      	bx	lr
 800cb7a:	bf00      	nop
 800cb7c:	200027fc 	.word	0x200027fc

0800cb80 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb86:	f001 fb27 	bl	800e1d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800cb8e:	4b04      	ldr	r3, [pc, #16]	; (800cba0 <xTaskGetTickCountFromISR+0x20>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb94:	683b      	ldr	r3, [r7, #0]
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3708      	adds	r7, #8
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	200027fc 	.word	0x200027fc

0800cba4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b086      	sub	sp, #24
 800cba8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbae:	4b4e      	ldr	r3, [pc, #312]	; (800cce8 <xTaskIncrementTick+0x144>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	f040 808e 	bne.w	800ccd4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cbb8:	4b4c      	ldr	r3, [pc, #304]	; (800ccec <xTaskIncrementTick+0x148>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	3301      	adds	r3, #1
 800cbbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cbc0:	4a4a      	ldr	r2, [pc, #296]	; (800ccec <xTaskIncrementTick+0x148>)
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d120      	bne.n	800cc0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cbcc:	4b48      	ldr	r3, [pc, #288]	; (800ccf0 <xTaskIncrementTick+0x14c>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d00a      	beq.n	800cbec <xTaskIncrementTick+0x48>
	__asm volatile
 800cbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbda:	f383 8811 	msr	BASEPRI, r3
 800cbde:	f3bf 8f6f 	isb	sy
 800cbe2:	f3bf 8f4f 	dsb	sy
 800cbe6:	603b      	str	r3, [r7, #0]
}
 800cbe8:	bf00      	nop
 800cbea:	e7fe      	b.n	800cbea <xTaskIncrementTick+0x46>
 800cbec:	4b40      	ldr	r3, [pc, #256]	; (800ccf0 <xTaskIncrementTick+0x14c>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	60fb      	str	r3, [r7, #12]
 800cbf2:	4b40      	ldr	r3, [pc, #256]	; (800ccf4 <xTaskIncrementTick+0x150>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a3e      	ldr	r2, [pc, #248]	; (800ccf0 <xTaskIncrementTick+0x14c>)
 800cbf8:	6013      	str	r3, [r2, #0]
 800cbfa:	4a3e      	ldr	r2, [pc, #248]	; (800ccf4 <xTaskIncrementTick+0x150>)
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	6013      	str	r3, [r2, #0]
 800cc00:	4b3d      	ldr	r3, [pc, #244]	; (800ccf8 <xTaskIncrementTick+0x154>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	3301      	adds	r3, #1
 800cc06:	4a3c      	ldr	r2, [pc, #240]	; (800ccf8 <xTaskIncrementTick+0x154>)
 800cc08:	6013      	str	r3, [r2, #0]
 800cc0a:	f000 facb 	bl	800d1a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cc0e:	4b3b      	ldr	r3, [pc, #236]	; (800ccfc <xTaskIncrementTick+0x158>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	693a      	ldr	r2, [r7, #16]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d348      	bcc.n	800ccaa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc18:	4b35      	ldr	r3, [pc, #212]	; (800ccf0 <xTaskIncrementTick+0x14c>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d104      	bne.n	800cc2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc22:	4b36      	ldr	r3, [pc, #216]	; (800ccfc <xTaskIncrementTick+0x158>)
 800cc24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc28:	601a      	str	r2, [r3, #0]
					break;
 800cc2a:	e03e      	b.n	800ccaa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc2c:	4b30      	ldr	r3, [pc, #192]	; (800ccf0 <xTaskIncrementTick+0x14c>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	68db      	ldr	r3, [r3, #12]
 800cc34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cc3c:	693a      	ldr	r2, [r7, #16]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d203      	bcs.n	800cc4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cc44:	4a2d      	ldr	r2, [pc, #180]	; (800ccfc <xTaskIncrementTick+0x158>)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cc4a:	e02e      	b.n	800ccaa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	3304      	adds	r3, #4
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7fe fdf1 	bl	800b838 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d004      	beq.n	800cc68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	3318      	adds	r3, #24
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7fe fde8 	bl	800b838 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	409a      	lsls	r2, r3
 800cc70:	4b23      	ldr	r3, [pc, #140]	; (800cd00 <xTaskIncrementTick+0x15c>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	4a22      	ldr	r2, [pc, #136]	; (800cd00 <xTaskIncrementTick+0x15c>)
 800cc78:	6013      	str	r3, [r2, #0]
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc7e:	4613      	mov	r3, r2
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	4413      	add	r3, r2
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	4a1f      	ldr	r2, [pc, #124]	; (800cd04 <xTaskIncrementTick+0x160>)
 800cc88:	441a      	add	r2, r3
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	3304      	adds	r3, #4
 800cc8e:	4619      	mov	r1, r3
 800cc90:	4610      	mov	r0, r2
 800cc92:	f7fe fd74 	bl	800b77e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc9a:	4b1b      	ldr	r3, [pc, #108]	; (800cd08 <xTaskIncrementTick+0x164>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d3b9      	bcc.n	800cc18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cca4:	2301      	movs	r3, #1
 800cca6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cca8:	e7b6      	b.n	800cc18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ccaa:	4b17      	ldr	r3, [pc, #92]	; (800cd08 <xTaskIncrementTick+0x164>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccb0:	4914      	ldr	r1, [pc, #80]	; (800cd04 <xTaskIncrementTick+0x160>)
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	4413      	add	r3, r2
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	440b      	add	r3, r1
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d901      	bls.n	800ccc6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ccc6:	4b11      	ldr	r3, [pc, #68]	; (800cd0c <xTaskIncrementTick+0x168>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d007      	beq.n	800ccde <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ccce:	2301      	movs	r3, #1
 800ccd0:	617b      	str	r3, [r7, #20]
 800ccd2:	e004      	b.n	800ccde <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ccd4:	4b0e      	ldr	r3, [pc, #56]	; (800cd10 <xTaskIncrementTick+0x16c>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	4a0d      	ldr	r2, [pc, #52]	; (800cd10 <xTaskIncrementTick+0x16c>)
 800ccdc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ccde:	697b      	ldr	r3, [r7, #20]
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3718      	adds	r7, #24
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	20002820 	.word	0x20002820
 800ccec:	200027fc 	.word	0x200027fc
 800ccf0:	200027b0 	.word	0x200027b0
 800ccf4:	200027b4 	.word	0x200027b4
 800ccf8:	20002810 	.word	0x20002810
 800ccfc:	20002818 	.word	0x20002818
 800cd00:	20002800 	.word	0x20002800
 800cd04:	20002738 	.word	0x20002738
 800cd08:	20002734 	.word	0x20002734
 800cd0c:	2000280c 	.word	0x2000280c
 800cd10:	20002808 	.word	0x20002808

0800cd14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cd14:	b480      	push	{r7}
 800cd16:	b087      	sub	sp, #28
 800cd18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cd1a:	4b27      	ldr	r3, [pc, #156]	; (800cdb8 <vTaskSwitchContext+0xa4>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d003      	beq.n	800cd2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cd22:	4b26      	ldr	r3, [pc, #152]	; (800cdbc <vTaskSwitchContext+0xa8>)
 800cd24:	2201      	movs	r2, #1
 800cd26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cd28:	e03f      	b.n	800cdaa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800cd2a:	4b24      	ldr	r3, [pc, #144]	; (800cdbc <vTaskSwitchContext+0xa8>)
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd30:	4b23      	ldr	r3, [pc, #140]	; (800cdc0 <vTaskSwitchContext+0xac>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	fab3 f383 	clz	r3, r3
 800cd3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cd3e:	7afb      	ldrb	r3, [r7, #11]
 800cd40:	f1c3 031f 	rsb	r3, r3, #31
 800cd44:	617b      	str	r3, [r7, #20]
 800cd46:	491f      	ldr	r1, [pc, #124]	; (800cdc4 <vTaskSwitchContext+0xb0>)
 800cd48:	697a      	ldr	r2, [r7, #20]
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	009b      	lsls	r3, r3, #2
 800cd4e:	4413      	add	r3, r2
 800cd50:	009b      	lsls	r3, r3, #2
 800cd52:	440b      	add	r3, r1
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d10a      	bne.n	800cd70 <vTaskSwitchContext+0x5c>
	__asm volatile
 800cd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd5e:	f383 8811 	msr	BASEPRI, r3
 800cd62:	f3bf 8f6f 	isb	sy
 800cd66:	f3bf 8f4f 	dsb	sy
 800cd6a:	607b      	str	r3, [r7, #4]
}
 800cd6c:	bf00      	nop
 800cd6e:	e7fe      	b.n	800cd6e <vTaskSwitchContext+0x5a>
 800cd70:	697a      	ldr	r2, [r7, #20]
 800cd72:	4613      	mov	r3, r2
 800cd74:	009b      	lsls	r3, r3, #2
 800cd76:	4413      	add	r3, r2
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	4a12      	ldr	r2, [pc, #72]	; (800cdc4 <vTaskSwitchContext+0xb0>)
 800cd7c:	4413      	add	r3, r2
 800cd7e:	613b      	str	r3, [r7, #16]
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	685a      	ldr	r2, [r3, #4]
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	605a      	str	r2, [r3, #4]
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	685a      	ldr	r2, [r3, #4]
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	3308      	adds	r3, #8
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d104      	bne.n	800cda0 <vTaskSwitchContext+0x8c>
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	685b      	ldr	r3, [r3, #4]
 800cd9a:	685a      	ldr	r2, [r3, #4]
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	605a      	str	r2, [r3, #4]
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	68db      	ldr	r3, [r3, #12]
 800cda6:	4a08      	ldr	r2, [pc, #32]	; (800cdc8 <vTaskSwitchContext+0xb4>)
 800cda8:	6013      	str	r3, [r2, #0]
}
 800cdaa:	bf00      	nop
 800cdac:	371c      	adds	r7, #28
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr
 800cdb6:	bf00      	nop
 800cdb8:	20002820 	.word	0x20002820
 800cdbc:	2000280c 	.word	0x2000280c
 800cdc0:	20002800 	.word	0x20002800
 800cdc4:	20002738 	.word	0x20002738
 800cdc8:	20002734 	.word	0x20002734

0800cdcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d10a      	bne.n	800cdf2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde0:	f383 8811 	msr	BASEPRI, r3
 800cde4:	f3bf 8f6f 	isb	sy
 800cde8:	f3bf 8f4f 	dsb	sy
 800cdec:	60fb      	str	r3, [r7, #12]
}
 800cdee:	bf00      	nop
 800cdf0:	e7fe      	b.n	800cdf0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cdf2:	4b07      	ldr	r3, [pc, #28]	; (800ce10 <vTaskPlaceOnEventList+0x44>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	3318      	adds	r3, #24
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f7fe fce3 	bl	800b7c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce00:	2101      	movs	r1, #1
 800ce02:	6838      	ldr	r0, [r7, #0]
 800ce04:	f000 fbaa 	bl	800d55c <prvAddCurrentTaskToDelayedList>
}
 800ce08:	bf00      	nop
 800ce0a:	3710      	adds	r7, #16
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	20002734 	.word	0x20002734

0800ce14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b086      	sub	sp, #24
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	60f8      	str	r0, [r7, #12]
 800ce1c:	60b9      	str	r1, [r7, #8]
 800ce1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d10a      	bne.n	800ce3c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ce26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce2a:	f383 8811 	msr	BASEPRI, r3
 800ce2e:	f3bf 8f6f 	isb	sy
 800ce32:	f3bf 8f4f 	dsb	sy
 800ce36:	617b      	str	r3, [r7, #20]
}
 800ce38:	bf00      	nop
 800ce3a:	e7fe      	b.n	800ce3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce3c:	4b0a      	ldr	r3, [pc, #40]	; (800ce68 <vTaskPlaceOnEventListRestricted+0x54>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	3318      	adds	r3, #24
 800ce42:	4619      	mov	r1, r3
 800ce44:	68f8      	ldr	r0, [r7, #12]
 800ce46:	f7fe fc9a 	bl	800b77e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d002      	beq.n	800ce56 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ce50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ce56:	6879      	ldr	r1, [r7, #4]
 800ce58:	68b8      	ldr	r0, [r7, #8]
 800ce5a:	f000 fb7f 	bl	800d55c <prvAddCurrentTaskToDelayedList>
	}
 800ce5e:	bf00      	nop
 800ce60:	3718      	adds	r7, #24
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	20002734 	.word	0x20002734

0800ce6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b086      	sub	sp, #24
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	68db      	ldr	r3, [r3, #12]
 800ce7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d10a      	bne.n	800ce98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ce82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce86:	f383 8811 	msr	BASEPRI, r3
 800ce8a:	f3bf 8f6f 	isb	sy
 800ce8e:	f3bf 8f4f 	dsb	sy
 800ce92:	60fb      	str	r3, [r7, #12]
}
 800ce94:	bf00      	nop
 800ce96:	e7fe      	b.n	800ce96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	3318      	adds	r3, #24
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fe fccb 	bl	800b838 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cea2:	4b1d      	ldr	r3, [pc, #116]	; (800cf18 <xTaskRemoveFromEventList+0xac>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d11c      	bne.n	800cee4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	3304      	adds	r3, #4
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7fe fcc2 	bl	800b838 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb8:	2201      	movs	r2, #1
 800ceba:	409a      	lsls	r2, r3
 800cebc:	4b17      	ldr	r3, [pc, #92]	; (800cf1c <xTaskRemoveFromEventList+0xb0>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4313      	orrs	r3, r2
 800cec2:	4a16      	ldr	r2, [pc, #88]	; (800cf1c <xTaskRemoveFromEventList+0xb0>)
 800cec4:	6013      	str	r3, [r2, #0]
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceca:	4613      	mov	r3, r2
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	4413      	add	r3, r2
 800ced0:	009b      	lsls	r3, r3, #2
 800ced2:	4a13      	ldr	r2, [pc, #76]	; (800cf20 <xTaskRemoveFromEventList+0xb4>)
 800ced4:	441a      	add	r2, r3
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	3304      	adds	r3, #4
 800ceda:	4619      	mov	r1, r3
 800cedc:	4610      	mov	r0, r2
 800cede:	f7fe fc4e 	bl	800b77e <vListInsertEnd>
 800cee2:	e005      	b.n	800cef0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	3318      	adds	r3, #24
 800cee8:	4619      	mov	r1, r3
 800ceea:	480e      	ldr	r0, [pc, #56]	; (800cf24 <xTaskRemoveFromEventList+0xb8>)
 800ceec:	f7fe fc47 	bl	800b77e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cef4:	4b0c      	ldr	r3, [pc, #48]	; (800cf28 <xTaskRemoveFromEventList+0xbc>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d905      	bls.n	800cf0a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cefe:	2301      	movs	r3, #1
 800cf00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cf02:	4b0a      	ldr	r3, [pc, #40]	; (800cf2c <xTaskRemoveFromEventList+0xc0>)
 800cf04:	2201      	movs	r2, #1
 800cf06:	601a      	str	r2, [r3, #0]
 800cf08:	e001      	b.n	800cf0e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cf0e:	697b      	ldr	r3, [r7, #20]
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3718      	adds	r7, #24
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	20002820 	.word	0x20002820
 800cf1c:	20002800 	.word	0x20002800
 800cf20:	20002738 	.word	0x20002738
 800cf24:	200027b8 	.word	0x200027b8
 800cf28:	20002734 	.word	0x20002734
 800cf2c:	2000280c 	.word	0x2000280c

0800cf30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf30:	b480      	push	{r7}
 800cf32:	b083      	sub	sp, #12
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf38:	4b06      	ldr	r3, [pc, #24]	; (800cf54 <vTaskInternalSetTimeOutState+0x24>)
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cf40:	4b05      	ldr	r3, [pc, #20]	; (800cf58 <vTaskInternalSetTimeOutState+0x28>)
 800cf42:	681a      	ldr	r2, [r3, #0]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	605a      	str	r2, [r3, #4]
}
 800cf48:	bf00      	nop
 800cf4a:	370c      	adds	r7, #12
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr
 800cf54:	20002810 	.word	0x20002810
 800cf58:	200027fc 	.word	0x200027fc

0800cf5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b088      	sub	sp, #32
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d10a      	bne.n	800cf82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cf6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf70:	f383 8811 	msr	BASEPRI, r3
 800cf74:	f3bf 8f6f 	isb	sy
 800cf78:	f3bf 8f4f 	dsb	sy
 800cf7c:	613b      	str	r3, [r7, #16]
}
 800cf7e:	bf00      	nop
 800cf80:	e7fe      	b.n	800cf80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d10a      	bne.n	800cf9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cf88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8c:	f383 8811 	msr	BASEPRI, r3
 800cf90:	f3bf 8f6f 	isb	sy
 800cf94:	f3bf 8f4f 	dsb	sy
 800cf98:	60fb      	str	r3, [r7, #12]
}
 800cf9a:	bf00      	nop
 800cf9c:	e7fe      	b.n	800cf9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cf9e:	f001 f839 	bl	800e014 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cfa2:	4b1d      	ldr	r3, [pc, #116]	; (800d018 <xTaskCheckForTimeOut+0xbc>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	685b      	ldr	r3, [r3, #4]
 800cfac:	69ba      	ldr	r2, [r7, #24]
 800cfae:	1ad3      	subs	r3, r2, r3
 800cfb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfba:	d102      	bne.n	800cfc2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	61fb      	str	r3, [r7, #28]
 800cfc0:	e023      	b.n	800d00a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681a      	ldr	r2, [r3, #0]
 800cfc6:	4b15      	ldr	r3, [pc, #84]	; (800d01c <xTaskCheckForTimeOut+0xc0>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d007      	beq.n	800cfde <xTaskCheckForTimeOut+0x82>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	69ba      	ldr	r2, [r7, #24]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d302      	bcc.n	800cfde <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	61fb      	str	r3, [r7, #28]
 800cfdc:	e015      	b.n	800d00a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	697a      	ldr	r2, [r7, #20]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d20b      	bcs.n	800d000 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	1ad2      	subs	r2, r2, r3
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f7ff ff9b 	bl	800cf30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cffa:	2300      	movs	r3, #0
 800cffc:	61fb      	str	r3, [r7, #28]
 800cffe:	e004      	b.n	800d00a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	2200      	movs	r2, #0
 800d004:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d006:	2301      	movs	r3, #1
 800d008:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d00a:	f001 f833 	bl	800e074 <vPortExitCritical>

	return xReturn;
 800d00e:	69fb      	ldr	r3, [r7, #28]
}
 800d010:	4618      	mov	r0, r3
 800d012:	3720      	adds	r7, #32
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	200027fc 	.word	0x200027fc
 800d01c:	20002810 	.word	0x20002810

0800d020 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d020:	b480      	push	{r7}
 800d022:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d024:	4b03      	ldr	r3, [pc, #12]	; (800d034 <vTaskMissedYield+0x14>)
 800d026:	2201      	movs	r2, #1
 800d028:	601a      	str	r2, [r3, #0]
}
 800d02a:	bf00      	nop
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr
 800d034:	2000280c 	.word	0x2000280c

0800d038 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d040:	f000 f852 	bl	800d0e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d044:	4b06      	ldr	r3, [pc, #24]	; (800d060 <prvIdleTask+0x28>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d9f9      	bls.n	800d040 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d04c:	4b05      	ldr	r3, [pc, #20]	; (800d064 <prvIdleTask+0x2c>)
 800d04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d052:	601a      	str	r2, [r3, #0]
 800d054:	f3bf 8f4f 	dsb	sy
 800d058:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d05c:	e7f0      	b.n	800d040 <prvIdleTask+0x8>
 800d05e:	bf00      	nop
 800d060:	20002738 	.word	0x20002738
 800d064:	e000ed04 	.word	0xe000ed04

0800d068 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d06e:	2300      	movs	r3, #0
 800d070:	607b      	str	r3, [r7, #4]
 800d072:	e00c      	b.n	800d08e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	4613      	mov	r3, r2
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	4413      	add	r3, r2
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	4a12      	ldr	r2, [pc, #72]	; (800d0c8 <prvInitialiseTaskLists+0x60>)
 800d080:	4413      	add	r3, r2
 800d082:	4618      	mov	r0, r3
 800d084:	f7fe fb4e 	bl	800b724 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	3301      	adds	r3, #1
 800d08c:	607b      	str	r3, [r7, #4]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2b03      	cmp	r3, #3
 800d092:	d9ef      	bls.n	800d074 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d094:	480d      	ldr	r0, [pc, #52]	; (800d0cc <prvInitialiseTaskLists+0x64>)
 800d096:	f7fe fb45 	bl	800b724 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d09a:	480d      	ldr	r0, [pc, #52]	; (800d0d0 <prvInitialiseTaskLists+0x68>)
 800d09c:	f7fe fb42 	bl	800b724 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d0a0:	480c      	ldr	r0, [pc, #48]	; (800d0d4 <prvInitialiseTaskLists+0x6c>)
 800d0a2:	f7fe fb3f 	bl	800b724 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d0a6:	480c      	ldr	r0, [pc, #48]	; (800d0d8 <prvInitialiseTaskLists+0x70>)
 800d0a8:	f7fe fb3c 	bl	800b724 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d0ac:	480b      	ldr	r0, [pc, #44]	; (800d0dc <prvInitialiseTaskLists+0x74>)
 800d0ae:	f7fe fb39 	bl	800b724 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d0b2:	4b0b      	ldr	r3, [pc, #44]	; (800d0e0 <prvInitialiseTaskLists+0x78>)
 800d0b4:	4a05      	ldr	r2, [pc, #20]	; (800d0cc <prvInitialiseTaskLists+0x64>)
 800d0b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d0b8:	4b0a      	ldr	r3, [pc, #40]	; (800d0e4 <prvInitialiseTaskLists+0x7c>)
 800d0ba:	4a05      	ldr	r2, [pc, #20]	; (800d0d0 <prvInitialiseTaskLists+0x68>)
 800d0bc:	601a      	str	r2, [r3, #0]
}
 800d0be:	bf00      	nop
 800d0c0:	3708      	adds	r7, #8
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	20002738 	.word	0x20002738
 800d0cc:	20002788 	.word	0x20002788
 800d0d0:	2000279c 	.word	0x2000279c
 800d0d4:	200027b8 	.word	0x200027b8
 800d0d8:	200027cc 	.word	0x200027cc
 800d0dc:	200027e4 	.word	0x200027e4
 800d0e0:	200027b0 	.word	0x200027b0
 800d0e4:	200027b4 	.word	0x200027b4

0800d0e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0ee:	e019      	b.n	800d124 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d0f0:	f000 ff90 	bl	800e014 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0f4:	4b10      	ldr	r3, [pc, #64]	; (800d138 <prvCheckTasksWaitingTermination+0x50>)
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	68db      	ldr	r3, [r3, #12]
 800d0fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	3304      	adds	r3, #4
 800d100:	4618      	mov	r0, r3
 800d102:	f7fe fb99 	bl	800b838 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d106:	4b0d      	ldr	r3, [pc, #52]	; (800d13c <prvCheckTasksWaitingTermination+0x54>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	3b01      	subs	r3, #1
 800d10c:	4a0b      	ldr	r2, [pc, #44]	; (800d13c <prvCheckTasksWaitingTermination+0x54>)
 800d10e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d110:	4b0b      	ldr	r3, [pc, #44]	; (800d140 <prvCheckTasksWaitingTermination+0x58>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	3b01      	subs	r3, #1
 800d116:	4a0a      	ldr	r2, [pc, #40]	; (800d140 <prvCheckTasksWaitingTermination+0x58>)
 800d118:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d11a:	f000 ffab 	bl	800e074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 f810 	bl	800d144 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d124:	4b06      	ldr	r3, [pc, #24]	; (800d140 <prvCheckTasksWaitingTermination+0x58>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d1e1      	bne.n	800d0f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d12c:	bf00      	nop
 800d12e:	bf00      	nop
 800d130:	3708      	adds	r7, #8
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	200027cc 	.word	0x200027cc
 800d13c:	200027f8 	.word	0x200027f8
 800d140:	200027e0 	.word	0x200027e0

0800d144 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d144:	b580      	push	{r7, lr}
 800d146:	b084      	sub	sp, #16
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d152:	2b00      	cmp	r3, #0
 800d154:	d108      	bne.n	800d168 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d15a:	4618      	mov	r0, r3
 800d15c:	f001 f948 	bl	800e3f0 <vPortFree>
				vPortFree( pxTCB );
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f001 f945 	bl	800e3f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d166:	e018      	b.n	800d19a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d103      	bne.n	800d17a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f001 f93c 	bl	800e3f0 <vPortFree>
	}
 800d178:	e00f      	b.n	800d19a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d180:	2b02      	cmp	r3, #2
 800d182:	d00a      	beq.n	800d19a <prvDeleteTCB+0x56>
	__asm volatile
 800d184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d188:	f383 8811 	msr	BASEPRI, r3
 800d18c:	f3bf 8f6f 	isb	sy
 800d190:	f3bf 8f4f 	dsb	sy
 800d194:	60fb      	str	r3, [r7, #12]
}
 800d196:	bf00      	nop
 800d198:	e7fe      	b.n	800d198 <prvDeleteTCB+0x54>
	}
 800d19a:	bf00      	nop
 800d19c:	3710      	adds	r7, #16
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
	...

0800d1a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1aa:	4b0c      	ldr	r3, [pc, #48]	; (800d1dc <prvResetNextTaskUnblockTime+0x38>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d104      	bne.n	800d1be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1b4:	4b0a      	ldr	r3, [pc, #40]	; (800d1e0 <prvResetNextTaskUnblockTime+0x3c>)
 800d1b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d1ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d1bc:	e008      	b.n	800d1d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1be:	4b07      	ldr	r3, [pc, #28]	; (800d1dc <prvResetNextTaskUnblockTime+0x38>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	685b      	ldr	r3, [r3, #4]
 800d1cc:	4a04      	ldr	r2, [pc, #16]	; (800d1e0 <prvResetNextTaskUnblockTime+0x3c>)
 800d1ce:	6013      	str	r3, [r2, #0]
}
 800d1d0:	bf00      	nop
 800d1d2:	370c      	adds	r7, #12
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr
 800d1dc:	200027b0 	.word	0x200027b0
 800d1e0:	20002818 	.word	0x20002818

0800d1e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d1ea:	4b0b      	ldr	r3, [pc, #44]	; (800d218 <xTaskGetSchedulerState+0x34>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d102      	bne.n	800d1f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	607b      	str	r3, [r7, #4]
 800d1f6:	e008      	b.n	800d20a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1f8:	4b08      	ldr	r3, [pc, #32]	; (800d21c <xTaskGetSchedulerState+0x38>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d102      	bne.n	800d206 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d200:	2302      	movs	r3, #2
 800d202:	607b      	str	r3, [r7, #4]
 800d204:	e001      	b.n	800d20a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d206:	2300      	movs	r3, #0
 800d208:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d20a:	687b      	ldr	r3, [r7, #4]
	}
 800d20c:	4618      	mov	r0, r3
 800d20e:	370c      	adds	r7, #12
 800d210:	46bd      	mov	sp, r7
 800d212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d216:	4770      	bx	lr
 800d218:	20002804 	.word	0x20002804
 800d21c:	20002820 	.word	0x20002820

0800d220 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d220:	b580      	push	{r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d22c:	2300      	movs	r3, #0
 800d22e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d05e      	beq.n	800d2f4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d23a:	4b31      	ldr	r3, [pc, #196]	; (800d300 <xTaskPriorityInherit+0xe0>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d240:	429a      	cmp	r2, r3
 800d242:	d24e      	bcs.n	800d2e2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	699b      	ldr	r3, [r3, #24]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	db06      	blt.n	800d25a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d24c:	4b2c      	ldr	r3, [pc, #176]	; (800d300 <xTaskPriorityInherit+0xe0>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d252:	f1c3 0204 	rsb	r2, r3, #4
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	6959      	ldr	r1, [r3, #20]
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d262:	4613      	mov	r3, r2
 800d264:	009b      	lsls	r3, r3, #2
 800d266:	4413      	add	r3, r2
 800d268:	009b      	lsls	r3, r3, #2
 800d26a:	4a26      	ldr	r2, [pc, #152]	; (800d304 <xTaskPriorityInherit+0xe4>)
 800d26c:	4413      	add	r3, r2
 800d26e:	4299      	cmp	r1, r3
 800d270:	d12f      	bne.n	800d2d2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	3304      	adds	r3, #4
 800d276:	4618      	mov	r0, r3
 800d278:	f7fe fade 	bl	800b838 <uxListRemove>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d10a      	bne.n	800d298 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d286:	2201      	movs	r2, #1
 800d288:	fa02 f303 	lsl.w	r3, r2, r3
 800d28c:	43da      	mvns	r2, r3
 800d28e:	4b1e      	ldr	r3, [pc, #120]	; (800d308 <xTaskPriorityInherit+0xe8>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4013      	ands	r3, r2
 800d294:	4a1c      	ldr	r2, [pc, #112]	; (800d308 <xTaskPriorityInherit+0xe8>)
 800d296:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d298:	4b19      	ldr	r3, [pc, #100]	; (800d300 <xTaskPriorityInherit+0xe0>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	409a      	lsls	r2, r3
 800d2aa:	4b17      	ldr	r3, [pc, #92]	; (800d308 <xTaskPriorityInherit+0xe8>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4313      	orrs	r3, r2
 800d2b0:	4a15      	ldr	r2, [pc, #84]	; (800d308 <xTaskPriorityInherit+0xe8>)
 800d2b2:	6013      	str	r3, [r2, #0]
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2b8:	4613      	mov	r3, r2
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	4413      	add	r3, r2
 800d2be:	009b      	lsls	r3, r3, #2
 800d2c0:	4a10      	ldr	r2, [pc, #64]	; (800d304 <xTaskPriorityInherit+0xe4>)
 800d2c2:	441a      	add	r2, r3
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	3304      	adds	r3, #4
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	4610      	mov	r0, r2
 800d2cc:	f7fe fa57 	bl	800b77e <vListInsertEnd>
 800d2d0:	e004      	b.n	800d2dc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d2d2:	4b0b      	ldr	r3, [pc, #44]	; (800d300 <xTaskPriorityInherit+0xe0>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d2dc:	2301      	movs	r3, #1
 800d2de:	60fb      	str	r3, [r7, #12]
 800d2e0:	e008      	b.n	800d2f4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d2e6:	4b06      	ldr	r3, [pc, #24]	; (800d300 <xTaskPriorityInherit+0xe0>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d201      	bcs.n	800d2f4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
	}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3710      	adds	r7, #16
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	20002734 	.word	0x20002734
 800d304:	20002738 	.word	0x20002738
 800d308:	20002800 	.word	0x20002800

0800d30c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b086      	sub	sp, #24
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d318:	2300      	movs	r3, #0
 800d31a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d06e      	beq.n	800d400 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d322:	4b3a      	ldr	r3, [pc, #232]	; (800d40c <xTaskPriorityDisinherit+0x100>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	693a      	ldr	r2, [r7, #16]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d00a      	beq.n	800d342 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d330:	f383 8811 	msr	BASEPRI, r3
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	60fb      	str	r3, [r7, #12]
}
 800d33e:	bf00      	nop
 800d340:	e7fe      	b.n	800d340 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d346:	2b00      	cmp	r3, #0
 800d348:	d10a      	bne.n	800d360 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d34e:	f383 8811 	msr	BASEPRI, r3
 800d352:	f3bf 8f6f 	isb	sy
 800d356:	f3bf 8f4f 	dsb	sy
 800d35a:	60bb      	str	r3, [r7, #8]
}
 800d35c:	bf00      	nop
 800d35e:	e7fe      	b.n	800d35e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d364:	1e5a      	subs	r2, r3, #1
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d372:	429a      	cmp	r2, r3
 800d374:	d044      	beq.n	800d400 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d140      	bne.n	800d400 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	3304      	adds	r3, #4
 800d382:	4618      	mov	r0, r3
 800d384:	f7fe fa58 	bl	800b838 <uxListRemove>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d115      	bne.n	800d3ba <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d392:	491f      	ldr	r1, [pc, #124]	; (800d410 <xTaskPriorityDisinherit+0x104>)
 800d394:	4613      	mov	r3, r2
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	4413      	add	r3, r2
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	440b      	add	r3, r1
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d10a      	bne.n	800d3ba <xTaskPriorityDisinherit+0xae>
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	fa02 f303 	lsl.w	r3, r2, r3
 800d3ae:	43da      	mvns	r2, r3
 800d3b0:	4b18      	ldr	r3, [pc, #96]	; (800d414 <xTaskPriorityDisinherit+0x108>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	4013      	ands	r3, r2
 800d3b6:	4a17      	ldr	r2, [pc, #92]	; (800d414 <xTaskPriorityDisinherit+0x108>)
 800d3b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c6:	f1c3 0204 	rsb	r2, r3, #4
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	409a      	lsls	r2, r3
 800d3d6:	4b0f      	ldr	r3, [pc, #60]	; (800d414 <xTaskPriorityDisinherit+0x108>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	4a0d      	ldr	r2, [pc, #52]	; (800d414 <xTaskPriorityDisinherit+0x108>)
 800d3de:	6013      	str	r3, [r2, #0]
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	4413      	add	r3, r2
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	4a08      	ldr	r2, [pc, #32]	; (800d410 <xTaskPriorityDisinherit+0x104>)
 800d3ee:	441a      	add	r2, r3
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	3304      	adds	r3, #4
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	4610      	mov	r0, r2
 800d3f8:	f7fe f9c1 	bl	800b77e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d400:	697b      	ldr	r3, [r7, #20]
	}
 800d402:	4618      	mov	r0, r3
 800d404:	3718      	adds	r7, #24
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	20002734 	.word	0x20002734
 800d410:	20002738 	.word	0x20002738
 800d414:	20002800 	.word	0x20002800

0800d418 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b088      	sub	sp, #32
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d426:	2301      	movs	r3, #1
 800d428:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d077      	beq.n	800d520 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d434:	2b00      	cmp	r3, #0
 800d436:	d10a      	bne.n	800d44e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43c:	f383 8811 	msr	BASEPRI, r3
 800d440:	f3bf 8f6f 	isb	sy
 800d444:	f3bf 8f4f 	dsb	sy
 800d448:	60fb      	str	r3, [r7, #12]
}
 800d44a:	bf00      	nop
 800d44c:	e7fe      	b.n	800d44c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d44e:	69bb      	ldr	r3, [r7, #24]
 800d450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d452:	683a      	ldr	r2, [r7, #0]
 800d454:	429a      	cmp	r2, r3
 800d456:	d902      	bls.n	800d45e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	61fb      	str	r3, [r7, #28]
 800d45c:	e002      	b.n	800d464 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d462:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d468:	69fa      	ldr	r2, [r7, #28]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d058      	beq.n	800d520 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d46e:	69bb      	ldr	r3, [r7, #24]
 800d470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d472:	697a      	ldr	r2, [r7, #20]
 800d474:	429a      	cmp	r2, r3
 800d476:	d153      	bne.n	800d520 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d478:	4b2b      	ldr	r3, [pc, #172]	; (800d528 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	69ba      	ldr	r2, [r7, #24]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d10a      	bne.n	800d498 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d486:	f383 8811 	msr	BASEPRI, r3
 800d48a:	f3bf 8f6f 	isb	sy
 800d48e:	f3bf 8f4f 	dsb	sy
 800d492:	60bb      	str	r3, [r7, #8]
}
 800d494:	bf00      	nop
 800d496:	e7fe      	b.n	800d496 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d498:	69bb      	ldr	r3, [r7, #24]
 800d49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d49c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d49e:	69bb      	ldr	r3, [r7, #24]
 800d4a0:	69fa      	ldr	r2, [r7, #28]
 800d4a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d4a4:	69bb      	ldr	r3, [r7, #24]
 800d4a6:	699b      	ldr	r3, [r3, #24]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	db04      	blt.n	800d4b6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	f1c3 0204 	rsb	r2, r3, #4
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	6959      	ldr	r1, [r3, #20]
 800d4ba:	693a      	ldr	r2, [r7, #16]
 800d4bc:	4613      	mov	r3, r2
 800d4be:	009b      	lsls	r3, r3, #2
 800d4c0:	4413      	add	r3, r2
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	4a19      	ldr	r2, [pc, #100]	; (800d52c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d4c6:	4413      	add	r3, r2
 800d4c8:	4299      	cmp	r1, r3
 800d4ca:	d129      	bne.n	800d520 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4cc:	69bb      	ldr	r3, [r7, #24]
 800d4ce:	3304      	adds	r3, #4
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7fe f9b1 	bl	800b838 <uxListRemove>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d10a      	bne.n	800d4f2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d4dc:	69bb      	ldr	r3, [r7, #24]
 800d4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	fa02 f303 	lsl.w	r3, r2, r3
 800d4e6:	43da      	mvns	r2, r3
 800d4e8:	4b11      	ldr	r3, [pc, #68]	; (800d530 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4013      	ands	r3, r2
 800d4ee:	4a10      	ldr	r2, [pc, #64]	; (800d530 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d4f0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	409a      	lsls	r2, r3
 800d4fa:	4b0d      	ldr	r3, [pc, #52]	; (800d530 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	4313      	orrs	r3, r2
 800d500:	4a0b      	ldr	r2, [pc, #44]	; (800d530 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d502:	6013      	str	r3, [r2, #0]
 800d504:	69bb      	ldr	r3, [r7, #24]
 800d506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d508:	4613      	mov	r3, r2
 800d50a:	009b      	lsls	r3, r3, #2
 800d50c:	4413      	add	r3, r2
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	4a06      	ldr	r2, [pc, #24]	; (800d52c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d512:	441a      	add	r2, r3
 800d514:	69bb      	ldr	r3, [r7, #24]
 800d516:	3304      	adds	r3, #4
 800d518:	4619      	mov	r1, r3
 800d51a:	4610      	mov	r0, r2
 800d51c:	f7fe f92f 	bl	800b77e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d520:	bf00      	nop
 800d522:	3720      	adds	r7, #32
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}
 800d528:	20002734 	.word	0x20002734
 800d52c:	20002738 	.word	0x20002738
 800d530:	20002800 	.word	0x20002800

0800d534 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d534:	b480      	push	{r7}
 800d536:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d538:	4b07      	ldr	r3, [pc, #28]	; (800d558 <pvTaskIncrementMutexHeldCount+0x24>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d004      	beq.n	800d54a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d540:	4b05      	ldr	r3, [pc, #20]	; (800d558 <pvTaskIncrementMutexHeldCount+0x24>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d546:	3201      	adds	r2, #1
 800d548:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 800d54a:	4b03      	ldr	r3, [pc, #12]	; (800d558 <pvTaskIncrementMutexHeldCount+0x24>)
 800d54c:	681b      	ldr	r3, [r3, #0]
	}
 800d54e:	4618      	mov	r0, r3
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr
 800d558:	20002734 	.word	0x20002734

0800d55c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b084      	sub	sp, #16
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d566:	4b29      	ldr	r3, [pc, #164]	; (800d60c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d56c:	4b28      	ldr	r3, [pc, #160]	; (800d610 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	3304      	adds	r3, #4
 800d572:	4618      	mov	r0, r3
 800d574:	f7fe f960 	bl	800b838 <uxListRemove>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d10b      	bne.n	800d596 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d57e:	4b24      	ldr	r3, [pc, #144]	; (800d610 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d584:	2201      	movs	r2, #1
 800d586:	fa02 f303 	lsl.w	r3, r2, r3
 800d58a:	43da      	mvns	r2, r3
 800d58c:	4b21      	ldr	r3, [pc, #132]	; (800d614 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	4013      	ands	r3, r2
 800d592:	4a20      	ldr	r2, [pc, #128]	; (800d614 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d594:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d59c:	d10a      	bne.n	800d5b4 <prvAddCurrentTaskToDelayedList+0x58>
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d007      	beq.n	800d5b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5a4:	4b1a      	ldr	r3, [pc, #104]	; (800d610 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	3304      	adds	r3, #4
 800d5aa:	4619      	mov	r1, r3
 800d5ac:	481a      	ldr	r0, [pc, #104]	; (800d618 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d5ae:	f7fe f8e6 	bl	800b77e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d5b2:	e026      	b.n	800d602 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d5b4:	68fa      	ldr	r2, [r7, #12]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	4413      	add	r3, r2
 800d5ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d5bc:	4b14      	ldr	r3, [pc, #80]	; (800d610 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	68ba      	ldr	r2, [r7, #8]
 800d5c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d5c4:	68ba      	ldr	r2, [r7, #8]
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d209      	bcs.n	800d5e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5cc:	4b13      	ldr	r3, [pc, #76]	; (800d61c <prvAddCurrentTaskToDelayedList+0xc0>)
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	4b0f      	ldr	r3, [pc, #60]	; (800d610 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	3304      	adds	r3, #4
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	4610      	mov	r0, r2
 800d5da:	f7fe f8f4 	bl	800b7c6 <vListInsert>
}
 800d5de:	e010      	b.n	800d602 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5e0:	4b0f      	ldr	r3, [pc, #60]	; (800d620 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	4b0a      	ldr	r3, [pc, #40]	; (800d610 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	3304      	adds	r3, #4
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	4610      	mov	r0, r2
 800d5ee:	f7fe f8ea 	bl	800b7c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d5f2:	4b0c      	ldr	r3, [pc, #48]	; (800d624 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	68ba      	ldr	r2, [r7, #8]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d202      	bcs.n	800d602 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d5fc:	4a09      	ldr	r2, [pc, #36]	; (800d624 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	6013      	str	r3, [r2, #0]
}
 800d602:	bf00      	nop
 800d604:	3710      	adds	r7, #16
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	200027fc 	.word	0x200027fc
 800d610:	20002734 	.word	0x20002734
 800d614:	20002800 	.word	0x20002800
 800d618:	200027e4 	.word	0x200027e4
 800d61c:	200027b4 	.word	0x200027b4
 800d620:	200027b0 	.word	0x200027b0
 800d624:	20002818 	.word	0x20002818

0800d628 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b08a      	sub	sp, #40	; 0x28
 800d62c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d62e:	2300      	movs	r3, #0
 800d630:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d632:	f000 fb85 	bl	800dd40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d636:	4b1c      	ldr	r3, [pc, #112]	; (800d6a8 <xTimerCreateTimerTask+0x80>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d021      	beq.n	800d682 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d63e:	2300      	movs	r3, #0
 800d640:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d642:	2300      	movs	r3, #0
 800d644:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d646:	1d3a      	adds	r2, r7, #4
 800d648:	f107 0108 	add.w	r1, r7, #8
 800d64c:	f107 030c 	add.w	r3, r7, #12
 800d650:	4618      	mov	r0, r3
 800d652:	f7f5 fc65 	bl	8002f20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d656:	6879      	ldr	r1, [r7, #4]
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	68fa      	ldr	r2, [r7, #12]
 800d65c:	9202      	str	r2, [sp, #8]
 800d65e:	9301      	str	r3, [sp, #4]
 800d660:	2302      	movs	r3, #2
 800d662:	9300      	str	r3, [sp, #0]
 800d664:	2300      	movs	r3, #0
 800d666:	460a      	mov	r2, r1
 800d668:	4910      	ldr	r1, [pc, #64]	; (800d6ac <xTimerCreateTimerTask+0x84>)
 800d66a:	4811      	ldr	r0, [pc, #68]	; (800d6b0 <xTimerCreateTimerTask+0x88>)
 800d66c:	f7fe ffa0 	bl	800c5b0 <xTaskCreateStatic>
 800d670:	4603      	mov	r3, r0
 800d672:	4a10      	ldr	r2, [pc, #64]	; (800d6b4 <xTimerCreateTimerTask+0x8c>)
 800d674:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d676:	4b0f      	ldr	r3, [pc, #60]	; (800d6b4 <xTimerCreateTimerTask+0x8c>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d001      	beq.n	800d682 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d67e:	2301      	movs	r3, #1
 800d680:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d10a      	bne.n	800d69e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d68c:	f383 8811 	msr	BASEPRI, r3
 800d690:	f3bf 8f6f 	isb	sy
 800d694:	f3bf 8f4f 	dsb	sy
 800d698:	613b      	str	r3, [r7, #16]
}
 800d69a:	bf00      	nop
 800d69c:	e7fe      	b.n	800d69c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d69e:	697b      	ldr	r3, [r7, #20]
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3718      	adds	r7, #24
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	20002854 	.word	0x20002854
 800d6ac:	0800ec54 	.word	0x0800ec54
 800d6b0:	0800d921 	.word	0x0800d921
 800d6b4:	20002858 	.word	0x20002858

0800d6b8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b088      	sub	sp, #32
 800d6bc:	af02      	add	r7, sp, #8
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	607a      	str	r2, [r7, #4]
 800d6c4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d6c6:	2028      	movs	r0, #40	; 0x28
 800d6c8:	f000 fdc6 	bl	800e258 <pvPortMalloc>
 800d6cc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d00d      	beq.n	800d6f0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	9301      	str	r3, [sp, #4]
 800d6e0:	6a3b      	ldr	r3, [r7, #32]
 800d6e2:	9300      	str	r3, [sp, #0]
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	687a      	ldr	r2, [r7, #4]
 800d6e8:	68b9      	ldr	r1, [r7, #8]
 800d6ea:	68f8      	ldr	r0, [r7, #12]
 800d6ec:	f000 f843 	bl	800d776 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d6f0:	697b      	ldr	r3, [r7, #20]
	}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3718      	adds	r7, #24
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}

0800d6fa <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800d6fa:	b580      	push	{r7, lr}
 800d6fc:	b08a      	sub	sp, #40	; 0x28
 800d6fe:	af02      	add	r7, sp, #8
 800d700:	60f8      	str	r0, [r7, #12]
 800d702:	60b9      	str	r1, [r7, #8]
 800d704:	607a      	str	r2, [r7, #4]
 800d706:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800d708:	2328      	movs	r3, #40	; 0x28
 800d70a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	2b28      	cmp	r3, #40	; 0x28
 800d710:	d00a      	beq.n	800d728 <xTimerCreateStatic+0x2e>
	__asm volatile
 800d712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d716:	f383 8811 	msr	BASEPRI, r3
 800d71a:	f3bf 8f6f 	isb	sy
 800d71e:	f3bf 8f4f 	dsb	sy
 800d722:	61bb      	str	r3, [r7, #24]
}
 800d724:	bf00      	nop
 800d726:	e7fe      	b.n	800d726 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d728:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d10a      	bne.n	800d746 <xTimerCreateStatic+0x4c>
	__asm volatile
 800d730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d734:	f383 8811 	msr	BASEPRI, r3
 800d738:	f3bf 8f6f 	isb	sy
 800d73c:	f3bf 8f4f 	dsb	sy
 800d740:	617b      	str	r3, [r7, #20]
}
 800d742:	bf00      	nop
 800d744:	e7fe      	b.n	800d744 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d748:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d74a:	69fb      	ldr	r3, [r7, #28]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d00d      	beq.n	800d76c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d750:	69fb      	ldr	r3, [r7, #28]
 800d752:	2202      	movs	r2, #2
 800d754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	9301      	str	r3, [sp, #4]
 800d75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75e:	9300      	str	r3, [sp, #0]
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	687a      	ldr	r2, [r7, #4]
 800d764:	68b9      	ldr	r1, [r7, #8]
 800d766:	68f8      	ldr	r0, [r7, #12]
 800d768:	f000 f805 	bl	800d776 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d76c:	69fb      	ldr	r3, [r7, #28]
	}
 800d76e:	4618      	mov	r0, r3
 800d770:	3720      	adds	r7, #32
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d776:	b580      	push	{r7, lr}
 800d778:	b086      	sub	sp, #24
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	60f8      	str	r0, [r7, #12]
 800d77e:	60b9      	str	r1, [r7, #8]
 800d780:	607a      	str	r2, [r7, #4]
 800d782:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d10a      	bne.n	800d7a0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800d78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78e:	f383 8811 	msr	BASEPRI, r3
 800d792:	f3bf 8f6f 	isb	sy
 800d796:	f3bf 8f4f 	dsb	sy
 800d79a:	617b      	str	r3, [r7, #20]
}
 800d79c:	bf00      	nop
 800d79e:	e7fe      	b.n	800d79e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d01e      	beq.n	800d7e4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d7a6:	f000 facb 	bl	800dd40 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ac:	68fa      	ldr	r2, [r7, #12]
 800d7ae:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b2:	68ba      	ldr	r2, [r7, #8]
 800d7b4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b8:	683a      	ldr	r2, [r7, #0]
 800d7ba:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7be:	6a3a      	ldr	r2, [r7, #32]
 800d7c0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c4:	3304      	adds	r3, #4
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fd ffcc 	bl	800b764 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d008      	beq.n	800d7e4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d7d8:	f043 0304 	orr.w	r3, r3, #4
 800d7dc:	b2da      	uxtb	r2, r3
 800d7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d7e4:	bf00      	nop
 800d7e6:	3718      	adds	r7, #24
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b08a      	sub	sp, #40	; 0x28
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	607a      	str	r2, [r7, #4]
 800d7f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d10a      	bne.n	800d81a <xTimerGenericCommand+0x2e>
	__asm volatile
 800d804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d808:	f383 8811 	msr	BASEPRI, r3
 800d80c:	f3bf 8f6f 	isb	sy
 800d810:	f3bf 8f4f 	dsb	sy
 800d814:	623b      	str	r3, [r7, #32]
}
 800d816:	bf00      	nop
 800d818:	e7fe      	b.n	800d818 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d81a:	4b1a      	ldr	r3, [pc, #104]	; (800d884 <xTimerGenericCommand+0x98>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d02a      	beq.n	800d878 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	2b05      	cmp	r3, #5
 800d832:	dc18      	bgt.n	800d866 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d834:	f7ff fcd6 	bl	800d1e4 <xTaskGetSchedulerState>
 800d838:	4603      	mov	r3, r0
 800d83a:	2b02      	cmp	r3, #2
 800d83c:	d109      	bne.n	800d852 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d83e:	4b11      	ldr	r3, [pc, #68]	; (800d884 <xTimerGenericCommand+0x98>)
 800d840:	6818      	ldr	r0, [r3, #0]
 800d842:	f107 0114 	add.w	r1, r7, #20
 800d846:	2300      	movs	r3, #0
 800d848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d84a:	f7fe f9a5 	bl	800bb98 <xQueueGenericSend>
 800d84e:	6278      	str	r0, [r7, #36]	; 0x24
 800d850:	e012      	b.n	800d878 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d852:	4b0c      	ldr	r3, [pc, #48]	; (800d884 <xTimerGenericCommand+0x98>)
 800d854:	6818      	ldr	r0, [r3, #0]
 800d856:	f107 0114 	add.w	r1, r7, #20
 800d85a:	2300      	movs	r3, #0
 800d85c:	2200      	movs	r2, #0
 800d85e:	f7fe f99b 	bl	800bb98 <xQueueGenericSend>
 800d862:	6278      	str	r0, [r7, #36]	; 0x24
 800d864:	e008      	b.n	800d878 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d866:	4b07      	ldr	r3, [pc, #28]	; (800d884 <xTimerGenericCommand+0x98>)
 800d868:	6818      	ldr	r0, [r3, #0]
 800d86a:	f107 0114 	add.w	r1, r7, #20
 800d86e:	2300      	movs	r3, #0
 800d870:	683a      	ldr	r2, [r7, #0]
 800d872:	f7fe fa8f 	bl	800bd94 <xQueueGenericSendFromISR>
 800d876:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3728      	adds	r7, #40	; 0x28
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	20002854 	.word	0x20002854

0800d888 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b088      	sub	sp, #32
 800d88c:	af02      	add	r7, sp, #8
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d892:	4b22      	ldr	r3, [pc, #136]	; (800d91c <prvProcessExpiredTimer+0x94>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	68db      	ldr	r3, [r3, #12]
 800d898:	68db      	ldr	r3, [r3, #12]
 800d89a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	3304      	adds	r3, #4
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7fd ffc9 	bl	800b838 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d8ac:	f003 0304 	and.w	r3, r3, #4
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d022      	beq.n	800d8fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	699a      	ldr	r2, [r3, #24]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	18d1      	adds	r1, r2, r3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	683a      	ldr	r2, [r7, #0]
 800d8c0:	6978      	ldr	r0, [r7, #20]
 800d8c2:	f000 f8d1 	bl	800da68 <prvInsertTimerInActiveList>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d01f      	beq.n	800d90c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	9300      	str	r3, [sp, #0]
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	687a      	ldr	r2, [r7, #4]
 800d8d4:	2100      	movs	r1, #0
 800d8d6:	6978      	ldr	r0, [r7, #20]
 800d8d8:	f7ff ff88 	bl	800d7ec <xTimerGenericCommand>
 800d8dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d113      	bne.n	800d90c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e8:	f383 8811 	msr	BASEPRI, r3
 800d8ec:	f3bf 8f6f 	isb	sy
 800d8f0:	f3bf 8f4f 	dsb	sy
 800d8f4:	60fb      	str	r3, [r7, #12]
}
 800d8f6:	bf00      	nop
 800d8f8:	e7fe      	b.n	800d8f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d900:	f023 0301 	bic.w	r3, r3, #1
 800d904:	b2da      	uxtb	r2, r3
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	6a1b      	ldr	r3, [r3, #32]
 800d910:	6978      	ldr	r0, [r7, #20]
 800d912:	4798      	blx	r3
}
 800d914:	bf00      	nop
 800d916:	3718      	adds	r7, #24
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	2000284c 	.word	0x2000284c

0800d920 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b084      	sub	sp, #16
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d928:	f107 0308 	add.w	r3, r7, #8
 800d92c:	4618      	mov	r0, r3
 800d92e:	f000 f857 	bl	800d9e0 <prvGetNextExpireTime>
 800d932:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	4619      	mov	r1, r3
 800d938:	68f8      	ldr	r0, [r7, #12]
 800d93a:	f000 f803 	bl	800d944 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d93e:	f000 f8d5 	bl	800daec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d942:	e7f1      	b.n	800d928 <prvTimerTask+0x8>

0800d944 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d94e:	f7ff f85d 	bl	800ca0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d952:	f107 0308 	add.w	r3, r7, #8
 800d956:	4618      	mov	r0, r3
 800d958:	f000 f866 	bl	800da28 <prvSampleTimeNow>
 800d95c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d130      	bne.n	800d9c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d10a      	bne.n	800d980 <prvProcessTimerOrBlockTask+0x3c>
 800d96a:	687a      	ldr	r2, [r7, #4]
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	429a      	cmp	r2, r3
 800d970:	d806      	bhi.n	800d980 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d972:	f7ff f859 	bl	800ca28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d976:	68f9      	ldr	r1, [r7, #12]
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f7ff ff85 	bl	800d888 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d97e:	e024      	b.n	800d9ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d008      	beq.n	800d998 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d986:	4b13      	ldr	r3, [pc, #76]	; (800d9d4 <prvProcessTimerOrBlockTask+0x90>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d101      	bne.n	800d994 <prvProcessTimerOrBlockTask+0x50>
 800d990:	2301      	movs	r3, #1
 800d992:	e000      	b.n	800d996 <prvProcessTimerOrBlockTask+0x52>
 800d994:	2300      	movs	r3, #0
 800d996:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d998:	4b0f      	ldr	r3, [pc, #60]	; (800d9d8 <prvProcessTimerOrBlockTask+0x94>)
 800d99a:	6818      	ldr	r0, [r3, #0]
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	1ad3      	subs	r3, r2, r3
 800d9a2:	683a      	ldr	r2, [r7, #0]
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	f7fe fdcf 	bl	800c548 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d9aa:	f7ff f83d 	bl	800ca28 <xTaskResumeAll>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d10a      	bne.n	800d9ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d9b4:	4b09      	ldr	r3, [pc, #36]	; (800d9dc <prvProcessTimerOrBlockTask+0x98>)
 800d9b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9ba:	601a      	str	r2, [r3, #0]
 800d9bc:	f3bf 8f4f 	dsb	sy
 800d9c0:	f3bf 8f6f 	isb	sy
}
 800d9c4:	e001      	b.n	800d9ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d9c6:	f7ff f82f 	bl	800ca28 <xTaskResumeAll>
}
 800d9ca:	bf00      	nop
 800d9cc:	3710      	adds	r7, #16
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	20002850 	.word	0x20002850
 800d9d8:	20002854 	.word	0x20002854
 800d9dc:	e000ed04 	.word	0xe000ed04

0800d9e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b085      	sub	sp, #20
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d9e8:	4b0e      	ldr	r3, [pc, #56]	; (800da24 <prvGetNextExpireTime+0x44>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d101      	bne.n	800d9f6 <prvGetNextExpireTime+0x16>
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	e000      	b.n	800d9f8 <prvGetNextExpireTime+0x18>
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d105      	bne.n	800da10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800da04:	4b07      	ldr	r3, [pc, #28]	; (800da24 <prvGetNextExpireTime+0x44>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	68db      	ldr	r3, [r3, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	60fb      	str	r3, [r7, #12]
 800da0e:	e001      	b.n	800da14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800da10:	2300      	movs	r3, #0
 800da12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800da14:	68fb      	ldr	r3, [r7, #12]
}
 800da16:	4618      	mov	r0, r3
 800da18:	3714      	adds	r7, #20
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr
 800da22:	bf00      	nop
 800da24:	2000284c 	.word	0x2000284c

0800da28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800da30:	f7ff f896 	bl	800cb60 <xTaskGetTickCount>
 800da34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800da36:	4b0b      	ldr	r3, [pc, #44]	; (800da64 <prvSampleTimeNow+0x3c>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	68fa      	ldr	r2, [r7, #12]
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d205      	bcs.n	800da4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800da40:	f000 f91a 	bl	800dc78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2201      	movs	r2, #1
 800da48:	601a      	str	r2, [r3, #0]
 800da4a:	e002      	b.n	800da52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2200      	movs	r2, #0
 800da50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800da52:	4a04      	ldr	r2, [pc, #16]	; (800da64 <prvSampleTimeNow+0x3c>)
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800da58:	68fb      	ldr	r3, [r7, #12]
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3710      	adds	r7, #16
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop
 800da64:	2000285c 	.word	0x2000285c

0800da68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b086      	sub	sp, #24
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	607a      	str	r2, [r7, #4]
 800da74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800da76:	2300      	movs	r3, #0
 800da78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	68ba      	ldr	r2, [r7, #8]
 800da7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	68fa      	ldr	r2, [r7, #12]
 800da84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800da86:	68ba      	ldr	r2, [r7, #8]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d812      	bhi.n	800dab4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da8e:	687a      	ldr	r2, [r7, #4]
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	1ad2      	subs	r2, r2, r3
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	699b      	ldr	r3, [r3, #24]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d302      	bcc.n	800daa2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800da9c:	2301      	movs	r3, #1
 800da9e:	617b      	str	r3, [r7, #20]
 800daa0:	e01b      	b.n	800dada <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800daa2:	4b10      	ldr	r3, [pc, #64]	; (800dae4 <prvInsertTimerInActiveList+0x7c>)
 800daa4:	681a      	ldr	r2, [r3, #0]
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	3304      	adds	r3, #4
 800daaa:	4619      	mov	r1, r3
 800daac:	4610      	mov	r0, r2
 800daae:	f7fd fe8a 	bl	800b7c6 <vListInsert>
 800dab2:	e012      	b.n	800dada <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dab4:	687a      	ldr	r2, [r7, #4]
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d206      	bcs.n	800daca <prvInsertTimerInActiveList+0x62>
 800dabc:	68ba      	ldr	r2, [r7, #8]
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d302      	bcc.n	800daca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dac4:	2301      	movs	r3, #1
 800dac6:	617b      	str	r3, [r7, #20]
 800dac8:	e007      	b.n	800dada <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800daca:	4b07      	ldr	r3, [pc, #28]	; (800dae8 <prvInsertTimerInActiveList+0x80>)
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	3304      	adds	r3, #4
 800dad2:	4619      	mov	r1, r3
 800dad4:	4610      	mov	r0, r2
 800dad6:	f7fd fe76 	bl	800b7c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dada:	697b      	ldr	r3, [r7, #20]
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3718      	adds	r7, #24
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}
 800dae4:	20002850 	.word	0x20002850
 800dae8:	2000284c 	.word	0x2000284c

0800daec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b08c      	sub	sp, #48	; 0x30
 800daf0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800daf2:	e0ae      	b.n	800dc52 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	f2c0 80aa 	blt.w	800dc50 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800db00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db02:	695b      	ldr	r3, [r3, #20]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d004      	beq.n	800db12 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0a:	3304      	adds	r3, #4
 800db0c:	4618      	mov	r0, r3
 800db0e:	f7fd fe93 	bl	800b838 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db12:	1d3b      	adds	r3, r7, #4
 800db14:	4618      	mov	r0, r3
 800db16:	f7ff ff87 	bl	800da28 <prvSampleTimeNow>
 800db1a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	2b09      	cmp	r3, #9
 800db20:	f200 8097 	bhi.w	800dc52 <prvProcessReceivedCommands+0x166>
 800db24:	a201      	add	r2, pc, #4	; (adr r2, 800db2c <prvProcessReceivedCommands+0x40>)
 800db26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db2a:	bf00      	nop
 800db2c:	0800db55 	.word	0x0800db55
 800db30:	0800db55 	.word	0x0800db55
 800db34:	0800db55 	.word	0x0800db55
 800db38:	0800dbc9 	.word	0x0800dbc9
 800db3c:	0800dbdd 	.word	0x0800dbdd
 800db40:	0800dc27 	.word	0x0800dc27
 800db44:	0800db55 	.word	0x0800db55
 800db48:	0800db55 	.word	0x0800db55
 800db4c:	0800dbc9 	.word	0x0800dbc9
 800db50:	0800dbdd 	.word	0x0800dbdd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800db54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800db5a:	f043 0301 	orr.w	r3, r3, #1
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800db66:	68fa      	ldr	r2, [r7, #12]
 800db68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6a:	699b      	ldr	r3, [r3, #24]
 800db6c:	18d1      	adds	r1, r2, r3
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	6a3a      	ldr	r2, [r7, #32]
 800db72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db74:	f7ff ff78 	bl	800da68 <prvInsertTimerInActiveList>
 800db78:	4603      	mov	r3, r0
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d069      	beq.n	800dc52 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db80:	6a1b      	ldr	r3, [r3, #32]
 800db82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800db8c:	f003 0304 	and.w	r3, r3, #4
 800db90:	2b00      	cmp	r3, #0
 800db92:	d05e      	beq.n	800dc52 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800db94:	68fa      	ldr	r2, [r7, #12]
 800db96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db98:	699b      	ldr	r3, [r3, #24]
 800db9a:	441a      	add	r2, r3
 800db9c:	2300      	movs	r3, #0
 800db9e:	9300      	str	r3, [sp, #0]
 800dba0:	2300      	movs	r3, #0
 800dba2:	2100      	movs	r1, #0
 800dba4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dba6:	f7ff fe21 	bl	800d7ec <xTimerGenericCommand>
 800dbaa:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800dbac:	69fb      	ldr	r3, [r7, #28]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d14f      	bne.n	800dc52 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800dbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb6:	f383 8811 	msr	BASEPRI, r3
 800dbba:	f3bf 8f6f 	isb	sy
 800dbbe:	f3bf 8f4f 	dsb	sy
 800dbc2:	61bb      	str	r3, [r7, #24]
}
 800dbc4:	bf00      	nop
 800dbc6:	e7fe      	b.n	800dbc6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dbce:	f023 0301 	bic.w	r3, r3, #1
 800dbd2:	b2da      	uxtb	r2, r3
 800dbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800dbda:	e03a      	b.n	800dc52 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dbe2:	f043 0301 	orr.w	r3, r3, #1
 800dbe6:	b2da      	uxtb	r2, r3
 800dbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dbee:	68fa      	ldr	r2, [r7, #12]
 800dbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf6:	699b      	ldr	r3, [r3, #24]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d10a      	bne.n	800dc12 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800dbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc00:	f383 8811 	msr	BASEPRI, r3
 800dc04:	f3bf 8f6f 	isb	sy
 800dc08:	f3bf 8f4f 	dsb	sy
 800dc0c:	617b      	str	r3, [r7, #20]
}
 800dc0e:	bf00      	nop
 800dc10:	e7fe      	b.n	800dc10 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc14:	699a      	ldr	r2, [r3, #24]
 800dc16:	6a3b      	ldr	r3, [r7, #32]
 800dc18:	18d1      	adds	r1, r2, r3
 800dc1a:	6a3b      	ldr	r3, [r7, #32]
 800dc1c:	6a3a      	ldr	r2, [r7, #32]
 800dc1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc20:	f7ff ff22 	bl	800da68 <prvInsertTimerInActiveList>
					break;
 800dc24:	e015      	b.n	800dc52 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dc2c:	f003 0302 	and.w	r3, r3, #2
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d103      	bne.n	800dc3c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800dc34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc36:	f000 fbdb 	bl	800e3f0 <vPortFree>
 800dc3a:	e00a      	b.n	800dc52 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dc42:	f023 0301 	bic.w	r3, r3, #1
 800dc46:	b2da      	uxtb	r2, r3
 800dc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dc4e:	e000      	b.n	800dc52 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dc50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc52:	4b08      	ldr	r3, [pc, #32]	; (800dc74 <prvProcessReceivedCommands+0x188>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f107 0108 	add.w	r1, r7, #8
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7fe f935 	bl	800becc <xQueueReceive>
 800dc62:	4603      	mov	r3, r0
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	f47f af45 	bne.w	800daf4 <prvProcessReceivedCommands+0x8>
	}
}
 800dc6a:	bf00      	nop
 800dc6c:	bf00      	nop
 800dc6e:	3728      	adds	r7, #40	; 0x28
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	20002854 	.word	0x20002854

0800dc78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b088      	sub	sp, #32
 800dc7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc7e:	e048      	b.n	800dd12 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc80:	4b2d      	ldr	r3, [pc, #180]	; (800dd38 <prvSwitchTimerLists+0xc0>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	68db      	ldr	r3, [r3, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc8a:	4b2b      	ldr	r3, [pc, #172]	; (800dd38 <prvSwitchTimerLists+0xc0>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	68db      	ldr	r3, [r3, #12]
 800dc90:	68db      	ldr	r3, [r3, #12]
 800dc92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	3304      	adds	r3, #4
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7fd fdcd 	bl	800b838 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	6a1b      	ldr	r3, [r3, #32]
 800dca2:	68f8      	ldr	r0, [r7, #12]
 800dca4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dcac:	f003 0304 	and.w	r3, r3, #4
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d02e      	beq.n	800dd12 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	699b      	ldr	r3, [r3, #24]
 800dcb8:	693a      	ldr	r2, [r7, #16]
 800dcba:	4413      	add	r3, r2
 800dcbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dcbe:	68ba      	ldr	r2, [r7, #8]
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d90e      	bls.n	800dce4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	68ba      	ldr	r2, [r7, #8]
 800dcca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	68fa      	ldr	r2, [r7, #12]
 800dcd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dcd2:	4b19      	ldr	r3, [pc, #100]	; (800dd38 <prvSwitchTimerLists+0xc0>)
 800dcd4:	681a      	ldr	r2, [r3, #0]
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	3304      	adds	r3, #4
 800dcda:	4619      	mov	r1, r3
 800dcdc:	4610      	mov	r0, r2
 800dcde:	f7fd fd72 	bl	800b7c6 <vListInsert>
 800dce2:	e016      	b.n	800dd12 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dce4:	2300      	movs	r3, #0
 800dce6:	9300      	str	r3, [sp, #0]
 800dce8:	2300      	movs	r3, #0
 800dcea:	693a      	ldr	r2, [r7, #16]
 800dcec:	2100      	movs	r1, #0
 800dcee:	68f8      	ldr	r0, [r7, #12]
 800dcf0:	f7ff fd7c 	bl	800d7ec <xTimerGenericCommand>
 800dcf4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d10a      	bne.n	800dd12 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dcfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd00:	f383 8811 	msr	BASEPRI, r3
 800dd04:	f3bf 8f6f 	isb	sy
 800dd08:	f3bf 8f4f 	dsb	sy
 800dd0c:	603b      	str	r3, [r7, #0]
}
 800dd0e:	bf00      	nop
 800dd10:	e7fe      	b.n	800dd10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dd12:	4b09      	ldr	r3, [pc, #36]	; (800dd38 <prvSwitchTimerLists+0xc0>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d1b1      	bne.n	800dc80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dd1c:	4b06      	ldr	r3, [pc, #24]	; (800dd38 <prvSwitchTimerLists+0xc0>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dd22:	4b06      	ldr	r3, [pc, #24]	; (800dd3c <prvSwitchTimerLists+0xc4>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	4a04      	ldr	r2, [pc, #16]	; (800dd38 <prvSwitchTimerLists+0xc0>)
 800dd28:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dd2a:	4a04      	ldr	r2, [pc, #16]	; (800dd3c <prvSwitchTimerLists+0xc4>)
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	6013      	str	r3, [r2, #0]
}
 800dd30:	bf00      	nop
 800dd32:	3718      	adds	r7, #24
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}
 800dd38:	2000284c 	.word	0x2000284c
 800dd3c:	20002850 	.word	0x20002850

0800dd40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b082      	sub	sp, #8
 800dd44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dd46:	f000 f965 	bl	800e014 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dd4a:	4b15      	ldr	r3, [pc, #84]	; (800dda0 <prvCheckForValidListAndQueue+0x60>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d120      	bne.n	800dd94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dd52:	4814      	ldr	r0, [pc, #80]	; (800dda4 <prvCheckForValidListAndQueue+0x64>)
 800dd54:	f7fd fce6 	bl	800b724 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dd58:	4813      	ldr	r0, [pc, #76]	; (800dda8 <prvCheckForValidListAndQueue+0x68>)
 800dd5a:	f7fd fce3 	bl	800b724 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dd5e:	4b13      	ldr	r3, [pc, #76]	; (800ddac <prvCheckForValidListAndQueue+0x6c>)
 800dd60:	4a10      	ldr	r2, [pc, #64]	; (800dda4 <prvCheckForValidListAndQueue+0x64>)
 800dd62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dd64:	4b12      	ldr	r3, [pc, #72]	; (800ddb0 <prvCheckForValidListAndQueue+0x70>)
 800dd66:	4a10      	ldr	r2, [pc, #64]	; (800dda8 <prvCheckForValidListAndQueue+0x68>)
 800dd68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	9300      	str	r3, [sp, #0]
 800dd6e:	4b11      	ldr	r3, [pc, #68]	; (800ddb4 <prvCheckForValidListAndQueue+0x74>)
 800dd70:	4a11      	ldr	r2, [pc, #68]	; (800ddb8 <prvCheckForValidListAndQueue+0x78>)
 800dd72:	210c      	movs	r1, #12
 800dd74:	200a      	movs	r0, #10
 800dd76:	f7fd fdf1 	bl	800b95c <xQueueGenericCreateStatic>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	4a08      	ldr	r2, [pc, #32]	; (800dda0 <prvCheckForValidListAndQueue+0x60>)
 800dd7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dd80:	4b07      	ldr	r3, [pc, #28]	; (800dda0 <prvCheckForValidListAndQueue+0x60>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d005      	beq.n	800dd94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dd88:	4b05      	ldr	r3, [pc, #20]	; (800dda0 <prvCheckForValidListAndQueue+0x60>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	490b      	ldr	r1, [pc, #44]	; (800ddbc <prvCheckForValidListAndQueue+0x7c>)
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7fe fbb0 	bl	800c4f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dd94:	f000 f96e 	bl	800e074 <vPortExitCritical>
}
 800dd98:	bf00      	nop
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}
 800dd9e:	bf00      	nop
 800dda0:	20002854 	.word	0x20002854
 800dda4:	20002824 	.word	0x20002824
 800dda8:	20002838 	.word	0x20002838
 800ddac:	2000284c 	.word	0x2000284c
 800ddb0:	20002850 	.word	0x20002850
 800ddb4:	200028d8 	.word	0x200028d8
 800ddb8:	20002860 	.word	0x20002860
 800ddbc:	0800ec5c 	.word	0x0800ec5c

0800ddc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b085      	sub	sp, #20
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	60f8      	str	r0, [r7, #12]
 800ddc8:	60b9      	str	r1, [r7, #8]
 800ddca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	3b04      	subs	r3, #4
 800ddd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ddd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	3b04      	subs	r3, #4
 800ddde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	f023 0201 	bic.w	r2, r3, #1
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	3b04      	subs	r3, #4
 800ddee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ddf0:	4a0c      	ldr	r2, [pc, #48]	; (800de24 <pxPortInitialiseStack+0x64>)
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	3b14      	subs	r3, #20
 800ddfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	3b04      	subs	r3, #4
 800de06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f06f 0202 	mvn.w	r2, #2
 800de0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	3b20      	subs	r3, #32
 800de14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800de16:	68fb      	ldr	r3, [r7, #12]
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3714      	adds	r7, #20
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr
 800de24:	0800de29 	.word	0x0800de29

0800de28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800de28:	b480      	push	{r7}
 800de2a:	b085      	sub	sp, #20
 800de2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800de2e:	2300      	movs	r3, #0
 800de30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800de32:	4b12      	ldr	r3, [pc, #72]	; (800de7c <prvTaskExitError+0x54>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de3a:	d00a      	beq.n	800de52 <prvTaskExitError+0x2a>
	__asm volatile
 800de3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de40:	f383 8811 	msr	BASEPRI, r3
 800de44:	f3bf 8f6f 	isb	sy
 800de48:	f3bf 8f4f 	dsb	sy
 800de4c:	60fb      	str	r3, [r7, #12]
}
 800de4e:	bf00      	nop
 800de50:	e7fe      	b.n	800de50 <prvTaskExitError+0x28>
	__asm volatile
 800de52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de56:	f383 8811 	msr	BASEPRI, r3
 800de5a:	f3bf 8f6f 	isb	sy
 800de5e:	f3bf 8f4f 	dsb	sy
 800de62:	60bb      	str	r3, [r7, #8]
}
 800de64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800de66:	bf00      	nop
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d0fc      	beq.n	800de68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800de6e:	bf00      	nop
 800de70:	bf00      	nop
 800de72:	3714      	adds	r7, #20
 800de74:	46bd      	mov	sp, r7
 800de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7a:	4770      	bx	lr
 800de7c:	20000040 	.word	0x20000040

0800de80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800de80:	4b07      	ldr	r3, [pc, #28]	; (800dea0 <pxCurrentTCBConst2>)
 800de82:	6819      	ldr	r1, [r3, #0]
 800de84:	6808      	ldr	r0, [r1, #0]
 800de86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de8a:	f380 8809 	msr	PSP, r0
 800de8e:	f3bf 8f6f 	isb	sy
 800de92:	f04f 0000 	mov.w	r0, #0
 800de96:	f380 8811 	msr	BASEPRI, r0
 800de9a:	4770      	bx	lr
 800de9c:	f3af 8000 	nop.w

0800dea0 <pxCurrentTCBConst2>:
 800dea0:	20002734 	.word	0x20002734
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dea4:	bf00      	nop
 800dea6:	bf00      	nop

0800dea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dea8:	4808      	ldr	r0, [pc, #32]	; (800decc <prvPortStartFirstTask+0x24>)
 800deaa:	6800      	ldr	r0, [r0, #0]
 800deac:	6800      	ldr	r0, [r0, #0]
 800deae:	f380 8808 	msr	MSP, r0
 800deb2:	f04f 0000 	mov.w	r0, #0
 800deb6:	f380 8814 	msr	CONTROL, r0
 800deba:	b662      	cpsie	i
 800debc:	b661      	cpsie	f
 800debe:	f3bf 8f4f 	dsb	sy
 800dec2:	f3bf 8f6f 	isb	sy
 800dec6:	df00      	svc	0
 800dec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800deca:	bf00      	nop
 800decc:	e000ed08 	.word	0xe000ed08

0800ded0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b086      	sub	sp, #24
 800ded4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ded6:	4b46      	ldr	r3, [pc, #280]	; (800dff0 <xPortStartScheduler+0x120>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	4a46      	ldr	r2, [pc, #280]	; (800dff4 <xPortStartScheduler+0x124>)
 800dedc:	4293      	cmp	r3, r2
 800dede:	d10a      	bne.n	800def6 <xPortStartScheduler+0x26>
	__asm volatile
 800dee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee4:	f383 8811 	msr	BASEPRI, r3
 800dee8:	f3bf 8f6f 	isb	sy
 800deec:	f3bf 8f4f 	dsb	sy
 800def0:	613b      	str	r3, [r7, #16]
}
 800def2:	bf00      	nop
 800def4:	e7fe      	b.n	800def4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800def6:	4b3e      	ldr	r3, [pc, #248]	; (800dff0 <xPortStartScheduler+0x120>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	4a3f      	ldr	r2, [pc, #252]	; (800dff8 <xPortStartScheduler+0x128>)
 800defc:	4293      	cmp	r3, r2
 800defe:	d10a      	bne.n	800df16 <xPortStartScheduler+0x46>
	__asm volatile
 800df00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df04:	f383 8811 	msr	BASEPRI, r3
 800df08:	f3bf 8f6f 	isb	sy
 800df0c:	f3bf 8f4f 	dsb	sy
 800df10:	60fb      	str	r3, [r7, #12]
}
 800df12:	bf00      	nop
 800df14:	e7fe      	b.n	800df14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800df16:	4b39      	ldr	r3, [pc, #228]	; (800dffc <xPortStartScheduler+0x12c>)
 800df18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	b2db      	uxtb	r3, r3
 800df20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	22ff      	movs	r2, #255	; 0xff
 800df26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800df30:	78fb      	ldrb	r3, [r7, #3]
 800df32:	b2db      	uxtb	r3, r3
 800df34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800df38:	b2da      	uxtb	r2, r3
 800df3a:	4b31      	ldr	r3, [pc, #196]	; (800e000 <xPortStartScheduler+0x130>)
 800df3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800df3e:	4b31      	ldr	r3, [pc, #196]	; (800e004 <xPortStartScheduler+0x134>)
 800df40:	2207      	movs	r2, #7
 800df42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800df44:	e009      	b.n	800df5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800df46:	4b2f      	ldr	r3, [pc, #188]	; (800e004 <xPortStartScheduler+0x134>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	3b01      	subs	r3, #1
 800df4c:	4a2d      	ldr	r2, [pc, #180]	; (800e004 <xPortStartScheduler+0x134>)
 800df4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800df50:	78fb      	ldrb	r3, [r7, #3]
 800df52:	b2db      	uxtb	r3, r3
 800df54:	005b      	lsls	r3, r3, #1
 800df56:	b2db      	uxtb	r3, r3
 800df58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800df5a:	78fb      	ldrb	r3, [r7, #3]
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df62:	2b80      	cmp	r3, #128	; 0x80
 800df64:	d0ef      	beq.n	800df46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800df66:	4b27      	ldr	r3, [pc, #156]	; (800e004 <xPortStartScheduler+0x134>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f1c3 0307 	rsb	r3, r3, #7
 800df6e:	2b04      	cmp	r3, #4
 800df70:	d00a      	beq.n	800df88 <xPortStartScheduler+0xb8>
	__asm volatile
 800df72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df76:	f383 8811 	msr	BASEPRI, r3
 800df7a:	f3bf 8f6f 	isb	sy
 800df7e:	f3bf 8f4f 	dsb	sy
 800df82:	60bb      	str	r3, [r7, #8]
}
 800df84:	bf00      	nop
 800df86:	e7fe      	b.n	800df86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800df88:	4b1e      	ldr	r3, [pc, #120]	; (800e004 <xPortStartScheduler+0x134>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	021b      	lsls	r3, r3, #8
 800df8e:	4a1d      	ldr	r2, [pc, #116]	; (800e004 <xPortStartScheduler+0x134>)
 800df90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800df92:	4b1c      	ldr	r3, [pc, #112]	; (800e004 <xPortStartScheduler+0x134>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800df9a:	4a1a      	ldr	r2, [pc, #104]	; (800e004 <xPortStartScheduler+0x134>)
 800df9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	b2da      	uxtb	r2, r3
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dfa6:	4b18      	ldr	r3, [pc, #96]	; (800e008 <xPortStartScheduler+0x138>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4a17      	ldr	r2, [pc, #92]	; (800e008 <xPortStartScheduler+0x138>)
 800dfac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dfb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dfb2:	4b15      	ldr	r3, [pc, #84]	; (800e008 <xPortStartScheduler+0x138>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	4a14      	ldr	r2, [pc, #80]	; (800e008 <xPortStartScheduler+0x138>)
 800dfb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dfbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dfbe:	f000 f8dd 	bl	800e17c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dfc2:	4b12      	ldr	r3, [pc, #72]	; (800e00c <xPortStartScheduler+0x13c>)
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dfc8:	f000 f8fc 	bl	800e1c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dfcc:	4b10      	ldr	r3, [pc, #64]	; (800e010 <xPortStartScheduler+0x140>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4a0f      	ldr	r2, [pc, #60]	; (800e010 <xPortStartScheduler+0x140>)
 800dfd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dfd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dfd8:	f7ff ff66 	bl	800dea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dfdc:	f7fe fe9a 	bl	800cd14 <vTaskSwitchContext>
	prvTaskExitError();
 800dfe0:	f7ff ff22 	bl	800de28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dfe4:	2300      	movs	r3, #0
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3718      	adds	r7, #24
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	e000ed00 	.word	0xe000ed00
 800dff4:	410fc271 	.word	0x410fc271
 800dff8:	410fc270 	.word	0x410fc270
 800dffc:	e000e400 	.word	0xe000e400
 800e000:	20002920 	.word	0x20002920
 800e004:	20002924 	.word	0x20002924
 800e008:	e000ed20 	.word	0xe000ed20
 800e00c:	20000040 	.word	0x20000040
 800e010:	e000ef34 	.word	0xe000ef34

0800e014 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e014:	b480      	push	{r7}
 800e016:	b083      	sub	sp, #12
 800e018:	af00      	add	r7, sp, #0
	__asm volatile
 800e01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e01e:	f383 8811 	msr	BASEPRI, r3
 800e022:	f3bf 8f6f 	isb	sy
 800e026:	f3bf 8f4f 	dsb	sy
 800e02a:	607b      	str	r3, [r7, #4]
}
 800e02c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e02e:	4b0f      	ldr	r3, [pc, #60]	; (800e06c <vPortEnterCritical+0x58>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	3301      	adds	r3, #1
 800e034:	4a0d      	ldr	r2, [pc, #52]	; (800e06c <vPortEnterCritical+0x58>)
 800e036:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e038:	4b0c      	ldr	r3, [pc, #48]	; (800e06c <vPortEnterCritical+0x58>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d10f      	bne.n	800e060 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e040:	4b0b      	ldr	r3, [pc, #44]	; (800e070 <vPortEnterCritical+0x5c>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	b2db      	uxtb	r3, r3
 800e046:	2b00      	cmp	r3, #0
 800e048:	d00a      	beq.n	800e060 <vPortEnterCritical+0x4c>
	__asm volatile
 800e04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e04e:	f383 8811 	msr	BASEPRI, r3
 800e052:	f3bf 8f6f 	isb	sy
 800e056:	f3bf 8f4f 	dsb	sy
 800e05a:	603b      	str	r3, [r7, #0]
}
 800e05c:	bf00      	nop
 800e05e:	e7fe      	b.n	800e05e <vPortEnterCritical+0x4a>
	}
}
 800e060:	bf00      	nop
 800e062:	370c      	adds	r7, #12
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr
 800e06c:	20000040 	.word	0x20000040
 800e070:	e000ed04 	.word	0xe000ed04

0800e074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e07a:	4b12      	ldr	r3, [pc, #72]	; (800e0c4 <vPortExitCritical+0x50>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d10a      	bne.n	800e098 <vPortExitCritical+0x24>
	__asm volatile
 800e082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e086:	f383 8811 	msr	BASEPRI, r3
 800e08a:	f3bf 8f6f 	isb	sy
 800e08e:	f3bf 8f4f 	dsb	sy
 800e092:	607b      	str	r3, [r7, #4]
}
 800e094:	bf00      	nop
 800e096:	e7fe      	b.n	800e096 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e098:	4b0a      	ldr	r3, [pc, #40]	; (800e0c4 <vPortExitCritical+0x50>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	3b01      	subs	r3, #1
 800e09e:	4a09      	ldr	r2, [pc, #36]	; (800e0c4 <vPortExitCritical+0x50>)
 800e0a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e0a2:	4b08      	ldr	r3, [pc, #32]	; (800e0c4 <vPortExitCritical+0x50>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d105      	bne.n	800e0b6 <vPortExitCritical+0x42>
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	f383 8811 	msr	BASEPRI, r3
}
 800e0b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e0b6:	bf00      	nop
 800e0b8:	370c      	adds	r7, #12
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr
 800e0c2:	bf00      	nop
 800e0c4:	20000040 	.word	0x20000040
	...

0800e0d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e0d0:	f3ef 8009 	mrs	r0, PSP
 800e0d4:	f3bf 8f6f 	isb	sy
 800e0d8:	4b15      	ldr	r3, [pc, #84]	; (800e130 <pxCurrentTCBConst>)
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	f01e 0f10 	tst.w	lr, #16
 800e0e0:	bf08      	it	eq
 800e0e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e0e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ea:	6010      	str	r0, [r2, #0]
 800e0ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e0f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e0f4:	f380 8811 	msr	BASEPRI, r0
 800e0f8:	f3bf 8f4f 	dsb	sy
 800e0fc:	f3bf 8f6f 	isb	sy
 800e100:	f7fe fe08 	bl	800cd14 <vTaskSwitchContext>
 800e104:	f04f 0000 	mov.w	r0, #0
 800e108:	f380 8811 	msr	BASEPRI, r0
 800e10c:	bc09      	pop	{r0, r3}
 800e10e:	6819      	ldr	r1, [r3, #0]
 800e110:	6808      	ldr	r0, [r1, #0]
 800e112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e116:	f01e 0f10 	tst.w	lr, #16
 800e11a:	bf08      	it	eq
 800e11c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e120:	f380 8809 	msr	PSP, r0
 800e124:	f3bf 8f6f 	isb	sy
 800e128:	4770      	bx	lr
 800e12a:	bf00      	nop
 800e12c:	f3af 8000 	nop.w

0800e130 <pxCurrentTCBConst>:
 800e130:	20002734 	.word	0x20002734
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e134:	bf00      	nop
 800e136:	bf00      	nop

0800e138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
	__asm volatile
 800e13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e142:	f383 8811 	msr	BASEPRI, r3
 800e146:	f3bf 8f6f 	isb	sy
 800e14a:	f3bf 8f4f 	dsb	sy
 800e14e:	607b      	str	r3, [r7, #4]
}
 800e150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e152:	f7fe fd27 	bl	800cba4 <xTaskIncrementTick>
 800e156:	4603      	mov	r3, r0
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d003      	beq.n	800e164 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e15c:	4b06      	ldr	r3, [pc, #24]	; (800e178 <SysTick_Handler+0x40>)
 800e15e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e162:	601a      	str	r2, [r3, #0]
 800e164:	2300      	movs	r3, #0
 800e166:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	f383 8811 	msr	BASEPRI, r3
}
 800e16e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e170:	bf00      	nop
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	e000ed04 	.word	0xe000ed04

0800e17c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e17c:	b480      	push	{r7}
 800e17e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e180:	4b0b      	ldr	r3, [pc, #44]	; (800e1b0 <vPortSetupTimerInterrupt+0x34>)
 800e182:	2200      	movs	r2, #0
 800e184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e186:	4b0b      	ldr	r3, [pc, #44]	; (800e1b4 <vPortSetupTimerInterrupt+0x38>)
 800e188:	2200      	movs	r2, #0
 800e18a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e18c:	4b0a      	ldr	r3, [pc, #40]	; (800e1b8 <vPortSetupTimerInterrupt+0x3c>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a0a      	ldr	r2, [pc, #40]	; (800e1bc <vPortSetupTimerInterrupt+0x40>)
 800e192:	fba2 2303 	umull	r2, r3, r2, r3
 800e196:	099b      	lsrs	r3, r3, #6
 800e198:	4a09      	ldr	r2, [pc, #36]	; (800e1c0 <vPortSetupTimerInterrupt+0x44>)
 800e19a:	3b01      	subs	r3, #1
 800e19c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e19e:	4b04      	ldr	r3, [pc, #16]	; (800e1b0 <vPortSetupTimerInterrupt+0x34>)
 800e1a0:	2207      	movs	r2, #7
 800e1a2:	601a      	str	r2, [r3, #0]
}
 800e1a4:	bf00      	nop
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ac:	4770      	bx	lr
 800e1ae:	bf00      	nop
 800e1b0:	e000e010 	.word	0xe000e010
 800e1b4:	e000e018 	.word	0xe000e018
 800e1b8:	20000034 	.word	0x20000034
 800e1bc:	10624dd3 	.word	0x10624dd3
 800e1c0:	e000e014 	.word	0xe000e014

0800e1c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e1c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e1d4 <vPortEnableVFP+0x10>
 800e1c8:	6801      	ldr	r1, [r0, #0]
 800e1ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e1ce:	6001      	str	r1, [r0, #0]
 800e1d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e1d2:	bf00      	nop
 800e1d4:	e000ed88 	.word	0xe000ed88

0800e1d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e1d8:	b480      	push	{r7}
 800e1da:	b085      	sub	sp, #20
 800e1dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e1de:	f3ef 8305 	mrs	r3, IPSR
 800e1e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2b0f      	cmp	r3, #15
 800e1e8:	d914      	bls.n	800e214 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e1ea:	4a17      	ldr	r2, [pc, #92]	; (800e248 <vPortValidateInterruptPriority+0x70>)
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	4413      	add	r3, r2
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e1f4:	4b15      	ldr	r3, [pc, #84]	; (800e24c <vPortValidateInterruptPriority+0x74>)
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	7afa      	ldrb	r2, [r7, #11]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d20a      	bcs.n	800e214 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e202:	f383 8811 	msr	BASEPRI, r3
 800e206:	f3bf 8f6f 	isb	sy
 800e20a:	f3bf 8f4f 	dsb	sy
 800e20e:	607b      	str	r3, [r7, #4]
}
 800e210:	bf00      	nop
 800e212:	e7fe      	b.n	800e212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e214:	4b0e      	ldr	r3, [pc, #56]	; (800e250 <vPortValidateInterruptPriority+0x78>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e21c:	4b0d      	ldr	r3, [pc, #52]	; (800e254 <vPortValidateInterruptPriority+0x7c>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	429a      	cmp	r2, r3
 800e222:	d90a      	bls.n	800e23a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e228:	f383 8811 	msr	BASEPRI, r3
 800e22c:	f3bf 8f6f 	isb	sy
 800e230:	f3bf 8f4f 	dsb	sy
 800e234:	603b      	str	r3, [r7, #0]
}
 800e236:	bf00      	nop
 800e238:	e7fe      	b.n	800e238 <vPortValidateInterruptPriority+0x60>
	}
 800e23a:	bf00      	nop
 800e23c:	3714      	adds	r7, #20
 800e23e:	46bd      	mov	sp, r7
 800e240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e244:	4770      	bx	lr
 800e246:	bf00      	nop
 800e248:	e000e3f0 	.word	0xe000e3f0
 800e24c:	20002920 	.word	0x20002920
 800e250:	e000ed0c 	.word	0xe000ed0c
 800e254:	20002924 	.word	0x20002924

0800e258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b08a      	sub	sp, #40	; 0x28
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e260:	2300      	movs	r3, #0
 800e262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e264:	f7fe fbd2 	bl	800ca0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e268:	4b5b      	ldr	r3, [pc, #364]	; (800e3d8 <pvPortMalloc+0x180>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d101      	bne.n	800e274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e270:	f000 f920 	bl	800e4b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e274:	4b59      	ldr	r3, [pc, #356]	; (800e3dc <pvPortMalloc+0x184>)
 800e276:	681a      	ldr	r2, [r3, #0]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	4013      	ands	r3, r2
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	f040 8093 	bne.w	800e3a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d01d      	beq.n	800e2c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e288:	2208      	movs	r2, #8
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	4413      	add	r3, r2
 800e28e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f003 0307 	and.w	r3, r3, #7
 800e296:	2b00      	cmp	r3, #0
 800e298:	d014      	beq.n	800e2c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f023 0307 	bic.w	r3, r3, #7
 800e2a0:	3308      	adds	r3, #8
 800e2a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f003 0307 	and.w	r3, r3, #7
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d00a      	beq.n	800e2c4 <pvPortMalloc+0x6c>
	__asm volatile
 800e2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b2:	f383 8811 	msr	BASEPRI, r3
 800e2b6:	f3bf 8f6f 	isb	sy
 800e2ba:	f3bf 8f4f 	dsb	sy
 800e2be:	617b      	str	r3, [r7, #20]
}
 800e2c0:	bf00      	nop
 800e2c2:	e7fe      	b.n	800e2c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d06e      	beq.n	800e3a8 <pvPortMalloc+0x150>
 800e2ca:	4b45      	ldr	r3, [pc, #276]	; (800e3e0 <pvPortMalloc+0x188>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d869      	bhi.n	800e3a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e2d4:	4b43      	ldr	r3, [pc, #268]	; (800e3e4 <pvPortMalloc+0x18c>)
 800e2d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e2d8:	4b42      	ldr	r3, [pc, #264]	; (800e3e4 <pvPortMalloc+0x18c>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e2de:	e004      	b.n	800e2ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	687a      	ldr	r2, [r7, #4]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d903      	bls.n	800e2fc <pvPortMalloc+0xa4>
 800e2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d1f1      	bne.n	800e2e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e2fc:	4b36      	ldr	r3, [pc, #216]	; (800e3d8 <pvPortMalloc+0x180>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e302:	429a      	cmp	r2, r3
 800e304:	d050      	beq.n	800e3a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e306:	6a3b      	ldr	r3, [r7, #32]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2208      	movs	r2, #8
 800e30c:	4413      	add	r3, r2
 800e30e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e312:	681a      	ldr	r2, [r3, #0]
 800e314:	6a3b      	ldr	r3, [r7, #32]
 800e316:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31a:	685a      	ldr	r2, [r3, #4]
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	1ad2      	subs	r2, r2, r3
 800e320:	2308      	movs	r3, #8
 800e322:	005b      	lsls	r3, r3, #1
 800e324:	429a      	cmp	r2, r3
 800e326:	d91f      	bls.n	800e368 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	4413      	add	r3, r2
 800e32e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e330:	69bb      	ldr	r3, [r7, #24]
 800e332:	f003 0307 	and.w	r3, r3, #7
 800e336:	2b00      	cmp	r3, #0
 800e338:	d00a      	beq.n	800e350 <pvPortMalloc+0xf8>
	__asm volatile
 800e33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33e:	f383 8811 	msr	BASEPRI, r3
 800e342:	f3bf 8f6f 	isb	sy
 800e346:	f3bf 8f4f 	dsb	sy
 800e34a:	613b      	str	r3, [r7, #16]
}
 800e34c:	bf00      	nop
 800e34e:	e7fe      	b.n	800e34e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e352:	685a      	ldr	r2, [r3, #4]
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	1ad2      	subs	r2, r2, r3
 800e358:	69bb      	ldr	r3, [r7, #24]
 800e35a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e362:	69b8      	ldr	r0, [r7, #24]
 800e364:	f000 f908 	bl	800e578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e368:	4b1d      	ldr	r3, [pc, #116]	; (800e3e0 <pvPortMalloc+0x188>)
 800e36a:	681a      	ldr	r2, [r3, #0]
 800e36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	1ad3      	subs	r3, r2, r3
 800e372:	4a1b      	ldr	r2, [pc, #108]	; (800e3e0 <pvPortMalloc+0x188>)
 800e374:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e376:	4b1a      	ldr	r3, [pc, #104]	; (800e3e0 <pvPortMalloc+0x188>)
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	4b1b      	ldr	r3, [pc, #108]	; (800e3e8 <pvPortMalloc+0x190>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	429a      	cmp	r2, r3
 800e380:	d203      	bcs.n	800e38a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e382:	4b17      	ldr	r3, [pc, #92]	; (800e3e0 <pvPortMalloc+0x188>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4a18      	ldr	r2, [pc, #96]	; (800e3e8 <pvPortMalloc+0x190>)
 800e388:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38c:	685a      	ldr	r2, [r3, #4]
 800e38e:	4b13      	ldr	r3, [pc, #76]	; (800e3dc <pvPortMalloc+0x184>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	431a      	orrs	r2, r3
 800e394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e396:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39a:	2200      	movs	r2, #0
 800e39c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e39e:	4b13      	ldr	r3, [pc, #76]	; (800e3ec <pvPortMalloc+0x194>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	4a11      	ldr	r2, [pc, #68]	; (800e3ec <pvPortMalloc+0x194>)
 800e3a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e3a8:	f7fe fb3e 	bl	800ca28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e3ac:	69fb      	ldr	r3, [r7, #28]
 800e3ae:	f003 0307 	and.w	r3, r3, #7
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d00a      	beq.n	800e3cc <pvPortMalloc+0x174>
	__asm volatile
 800e3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ba:	f383 8811 	msr	BASEPRI, r3
 800e3be:	f3bf 8f6f 	isb	sy
 800e3c2:	f3bf 8f4f 	dsb	sy
 800e3c6:	60fb      	str	r3, [r7, #12]
}
 800e3c8:	bf00      	nop
 800e3ca:	e7fe      	b.n	800e3ca <pvPortMalloc+0x172>
	return pvReturn;
 800e3cc:	69fb      	ldr	r3, [r7, #28]
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3728      	adds	r7, #40	; 0x28
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}
 800e3d6:	bf00      	nop
 800e3d8:	20003130 	.word	0x20003130
 800e3dc:	20003144 	.word	0x20003144
 800e3e0:	20003134 	.word	0x20003134
 800e3e4:	20003128 	.word	0x20003128
 800e3e8:	20003138 	.word	0x20003138
 800e3ec:	2000313c 	.word	0x2000313c

0800e3f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b086      	sub	sp, #24
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d04d      	beq.n	800e49e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e402:	2308      	movs	r3, #8
 800e404:	425b      	negs	r3, r3
 800e406:	697a      	ldr	r2, [r7, #20]
 800e408:	4413      	add	r3, r2
 800e40a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	685a      	ldr	r2, [r3, #4]
 800e414:	4b24      	ldr	r3, [pc, #144]	; (800e4a8 <vPortFree+0xb8>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	4013      	ands	r3, r2
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d10a      	bne.n	800e434 <vPortFree+0x44>
	__asm volatile
 800e41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e422:	f383 8811 	msr	BASEPRI, r3
 800e426:	f3bf 8f6f 	isb	sy
 800e42a:	f3bf 8f4f 	dsb	sy
 800e42e:	60fb      	str	r3, [r7, #12]
}
 800e430:	bf00      	nop
 800e432:	e7fe      	b.n	800e432 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e434:	693b      	ldr	r3, [r7, #16]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d00a      	beq.n	800e452 <vPortFree+0x62>
	__asm volatile
 800e43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e440:	f383 8811 	msr	BASEPRI, r3
 800e444:	f3bf 8f6f 	isb	sy
 800e448:	f3bf 8f4f 	dsb	sy
 800e44c:	60bb      	str	r3, [r7, #8]
}
 800e44e:	bf00      	nop
 800e450:	e7fe      	b.n	800e450 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	685a      	ldr	r2, [r3, #4]
 800e456:	4b14      	ldr	r3, [pc, #80]	; (800e4a8 <vPortFree+0xb8>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	4013      	ands	r3, r2
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d01e      	beq.n	800e49e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d11a      	bne.n	800e49e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	685a      	ldr	r2, [r3, #4]
 800e46c:	4b0e      	ldr	r3, [pc, #56]	; (800e4a8 <vPortFree+0xb8>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	43db      	mvns	r3, r3
 800e472:	401a      	ands	r2, r3
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e478:	f7fe fac8 	bl	800ca0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	685a      	ldr	r2, [r3, #4]
 800e480:	4b0a      	ldr	r3, [pc, #40]	; (800e4ac <vPortFree+0xbc>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	4413      	add	r3, r2
 800e486:	4a09      	ldr	r2, [pc, #36]	; (800e4ac <vPortFree+0xbc>)
 800e488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e48a:	6938      	ldr	r0, [r7, #16]
 800e48c:	f000 f874 	bl	800e578 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e490:	4b07      	ldr	r3, [pc, #28]	; (800e4b0 <vPortFree+0xc0>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	3301      	adds	r3, #1
 800e496:	4a06      	ldr	r2, [pc, #24]	; (800e4b0 <vPortFree+0xc0>)
 800e498:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e49a:	f7fe fac5 	bl	800ca28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e49e:	bf00      	nop
 800e4a0:	3718      	adds	r7, #24
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	bf00      	nop
 800e4a8:	20003144 	.word	0x20003144
 800e4ac:	20003134 	.word	0x20003134
 800e4b0:	20003140 	.word	0x20003140

0800e4b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b085      	sub	sp, #20
 800e4b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e4ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e4c0:	4b27      	ldr	r3, [pc, #156]	; (800e560 <prvHeapInit+0xac>)
 800e4c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f003 0307 	and.w	r3, r3, #7
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d00c      	beq.n	800e4e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	3307      	adds	r3, #7
 800e4d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f023 0307 	bic.w	r3, r3, #7
 800e4da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e4dc:	68ba      	ldr	r2, [r7, #8]
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	1ad3      	subs	r3, r2, r3
 800e4e2:	4a1f      	ldr	r2, [pc, #124]	; (800e560 <prvHeapInit+0xac>)
 800e4e4:	4413      	add	r3, r2
 800e4e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e4ec:	4a1d      	ldr	r2, [pc, #116]	; (800e564 <prvHeapInit+0xb0>)
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e4f2:	4b1c      	ldr	r3, [pc, #112]	; (800e564 <prvHeapInit+0xb0>)
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	68ba      	ldr	r2, [r7, #8]
 800e4fc:	4413      	add	r3, r2
 800e4fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e500:	2208      	movs	r2, #8
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	1a9b      	subs	r3, r3, r2
 800e506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	f023 0307 	bic.w	r3, r3, #7
 800e50e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	4a15      	ldr	r2, [pc, #84]	; (800e568 <prvHeapInit+0xb4>)
 800e514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e516:	4b14      	ldr	r3, [pc, #80]	; (800e568 <prvHeapInit+0xb4>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	2200      	movs	r2, #0
 800e51c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e51e:	4b12      	ldr	r3, [pc, #72]	; (800e568 <prvHeapInit+0xb4>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	2200      	movs	r2, #0
 800e524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	68fa      	ldr	r2, [r7, #12]
 800e52e:	1ad2      	subs	r2, r2, r3
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e534:	4b0c      	ldr	r3, [pc, #48]	; (800e568 <prvHeapInit+0xb4>)
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	685b      	ldr	r3, [r3, #4]
 800e540:	4a0a      	ldr	r2, [pc, #40]	; (800e56c <prvHeapInit+0xb8>)
 800e542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	4a09      	ldr	r2, [pc, #36]	; (800e570 <prvHeapInit+0xbc>)
 800e54a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e54c:	4b09      	ldr	r3, [pc, #36]	; (800e574 <prvHeapInit+0xc0>)
 800e54e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e552:	601a      	str	r2, [r3, #0]
}
 800e554:	bf00      	nop
 800e556:	3714      	adds	r7, #20
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr
 800e560:	20002928 	.word	0x20002928
 800e564:	20003128 	.word	0x20003128
 800e568:	20003130 	.word	0x20003130
 800e56c:	20003138 	.word	0x20003138
 800e570:	20003134 	.word	0x20003134
 800e574:	20003144 	.word	0x20003144

0800e578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e578:	b480      	push	{r7}
 800e57a:	b085      	sub	sp, #20
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e580:	4b28      	ldr	r3, [pc, #160]	; (800e624 <prvInsertBlockIntoFreeList+0xac>)
 800e582:	60fb      	str	r3, [r7, #12]
 800e584:	e002      	b.n	800e58c <prvInsertBlockIntoFreeList+0x14>
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	60fb      	str	r3, [r7, #12]
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	687a      	ldr	r2, [r7, #4]
 800e592:	429a      	cmp	r2, r3
 800e594:	d8f7      	bhi.n	800e586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	68ba      	ldr	r2, [r7, #8]
 800e5a0:	4413      	add	r3, r2
 800e5a2:	687a      	ldr	r2, [r7, #4]
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d108      	bne.n	800e5ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	685a      	ldr	r2, [r3, #4]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	441a      	add	r2, r3
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	68ba      	ldr	r2, [r7, #8]
 800e5c4:	441a      	add	r2, r3
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d118      	bne.n	800e600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681a      	ldr	r2, [r3, #0]
 800e5d2:	4b15      	ldr	r3, [pc, #84]	; (800e628 <prvInsertBlockIntoFreeList+0xb0>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d00d      	beq.n	800e5f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	685a      	ldr	r2, [r3, #4]
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	441a      	add	r2, r3
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	681a      	ldr	r2, [r3, #0]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	601a      	str	r2, [r3, #0]
 800e5f4:	e008      	b.n	800e608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e5f6:	4b0c      	ldr	r3, [pc, #48]	; (800e628 <prvInsertBlockIntoFreeList+0xb0>)
 800e5f8:	681a      	ldr	r2, [r3, #0]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	601a      	str	r2, [r3, #0]
 800e5fe:	e003      	b.n	800e608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681a      	ldr	r2, [r3, #0]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e608:	68fa      	ldr	r2, [r7, #12]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d002      	beq.n	800e616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	687a      	ldr	r2, [r7, #4]
 800e614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e616:	bf00      	nop
 800e618:	3714      	adds	r7, #20
 800e61a:	46bd      	mov	sp, r7
 800e61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e620:	4770      	bx	lr
 800e622:	bf00      	nop
 800e624:	20003128 	.word	0x20003128
 800e628:	20003130 	.word	0x20003130

0800e62c <__errno>:
 800e62c:	4b01      	ldr	r3, [pc, #4]	; (800e634 <__errno+0x8>)
 800e62e:	6818      	ldr	r0, [r3, #0]
 800e630:	4770      	bx	lr
 800e632:	bf00      	nop
 800e634:	20000044 	.word	0x20000044

0800e638 <__libc_init_array>:
 800e638:	b570      	push	{r4, r5, r6, lr}
 800e63a:	4d0d      	ldr	r5, [pc, #52]	; (800e670 <__libc_init_array+0x38>)
 800e63c:	4c0d      	ldr	r4, [pc, #52]	; (800e674 <__libc_init_array+0x3c>)
 800e63e:	1b64      	subs	r4, r4, r5
 800e640:	10a4      	asrs	r4, r4, #2
 800e642:	2600      	movs	r6, #0
 800e644:	42a6      	cmp	r6, r4
 800e646:	d109      	bne.n	800e65c <__libc_init_array+0x24>
 800e648:	4d0b      	ldr	r5, [pc, #44]	; (800e678 <__libc_init_array+0x40>)
 800e64a:	4c0c      	ldr	r4, [pc, #48]	; (800e67c <__libc_init_array+0x44>)
 800e64c:	f000 fa36 	bl	800eabc <_init>
 800e650:	1b64      	subs	r4, r4, r5
 800e652:	10a4      	asrs	r4, r4, #2
 800e654:	2600      	movs	r6, #0
 800e656:	42a6      	cmp	r6, r4
 800e658:	d105      	bne.n	800e666 <__libc_init_array+0x2e>
 800e65a:	bd70      	pop	{r4, r5, r6, pc}
 800e65c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e660:	4798      	blx	r3
 800e662:	3601      	adds	r6, #1
 800e664:	e7ee      	b.n	800e644 <__libc_init_array+0xc>
 800e666:	f855 3b04 	ldr.w	r3, [r5], #4
 800e66a:	4798      	blx	r3
 800e66c:	3601      	adds	r6, #1
 800e66e:	e7f2      	b.n	800e656 <__libc_init_array+0x1e>
 800e670:	0800ecc8 	.word	0x0800ecc8
 800e674:	0800ecc8 	.word	0x0800ecc8
 800e678:	0800ecc8 	.word	0x0800ecc8
 800e67c:	0800eccc 	.word	0x0800eccc

0800e680 <memcpy>:
 800e680:	440a      	add	r2, r1
 800e682:	4291      	cmp	r1, r2
 800e684:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e688:	d100      	bne.n	800e68c <memcpy+0xc>
 800e68a:	4770      	bx	lr
 800e68c:	b510      	push	{r4, lr}
 800e68e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e692:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e696:	4291      	cmp	r1, r2
 800e698:	d1f9      	bne.n	800e68e <memcpy+0xe>
 800e69a:	bd10      	pop	{r4, pc}

0800e69c <memset>:
 800e69c:	4402      	add	r2, r0
 800e69e:	4603      	mov	r3, r0
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	d100      	bne.n	800e6a6 <memset+0xa>
 800e6a4:	4770      	bx	lr
 800e6a6:	f803 1b01 	strb.w	r1, [r3], #1
 800e6aa:	e7f9      	b.n	800e6a0 <memset+0x4>
 800e6ac:	0000      	movs	r0, r0
	...

0800e6b0 <exp>:
 800e6b0:	b538      	push	{r3, r4, r5, lr}
 800e6b2:	ed2d 8b02 	vpush	{d8}
 800e6b6:	ec55 4b10 	vmov	r4, r5, d0
 800e6ba:	f000 f841 	bl	800e740 <__ieee754_exp>
 800e6be:	eeb0 8a40 	vmov.f32	s16, s0
 800e6c2:	eef0 8a60 	vmov.f32	s17, s1
 800e6c6:	ec45 4b10 	vmov	d0, r4, r5
 800e6ca:	f000 f9eb 	bl	800eaa4 <finite>
 800e6ce:	b168      	cbz	r0, 800e6ec <exp+0x3c>
 800e6d0:	a317      	add	r3, pc, #92	; (adr r3, 800e730 <exp+0x80>)
 800e6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	4629      	mov	r1, r5
 800e6da:	f7f2 f9c5 	bl	8000a68 <__aeabi_dcmpgt>
 800e6de:	b160      	cbz	r0, 800e6fa <exp+0x4a>
 800e6e0:	f7ff ffa4 	bl	800e62c <__errno>
 800e6e4:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800e720 <exp+0x70>
 800e6e8:	2322      	movs	r3, #34	; 0x22
 800e6ea:	6003      	str	r3, [r0, #0]
 800e6ec:	eeb0 0a48 	vmov.f32	s0, s16
 800e6f0:	eef0 0a68 	vmov.f32	s1, s17
 800e6f4:	ecbd 8b02 	vpop	{d8}
 800e6f8:	bd38      	pop	{r3, r4, r5, pc}
 800e6fa:	a30f      	add	r3, pc, #60	; (adr r3, 800e738 <exp+0x88>)
 800e6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e700:	4620      	mov	r0, r4
 800e702:	4629      	mov	r1, r5
 800e704:	f7f2 f992 	bl	8000a2c <__aeabi_dcmplt>
 800e708:	2800      	cmp	r0, #0
 800e70a:	d0ef      	beq.n	800e6ec <exp+0x3c>
 800e70c:	f7ff ff8e 	bl	800e62c <__errno>
 800e710:	2322      	movs	r3, #34	; 0x22
 800e712:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800e728 <exp+0x78>
 800e716:	6003      	str	r3, [r0, #0]
 800e718:	e7e8      	b.n	800e6ec <exp+0x3c>
 800e71a:	bf00      	nop
 800e71c:	f3af 8000 	nop.w
 800e720:	00000000 	.word	0x00000000
 800e724:	7ff00000 	.word	0x7ff00000
	...
 800e730:	fefa39ef 	.word	0xfefa39ef
 800e734:	40862e42 	.word	0x40862e42
 800e738:	d52d3051 	.word	0xd52d3051
 800e73c:	c0874910 	.word	0xc0874910

0800e740 <__ieee754_exp>:
 800e740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e744:	ec55 4b10 	vmov	r4, r5, d0
 800e748:	49b5      	ldr	r1, [pc, #724]	; (800ea20 <__ieee754_exp+0x2e0>)
 800e74a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e74e:	428b      	cmp	r3, r1
 800e750:	ed2d 8b04 	vpush	{d8-d9}
 800e754:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800e758:	d93d      	bls.n	800e7d6 <__ieee754_exp+0x96>
 800e75a:	49b2      	ldr	r1, [pc, #712]	; (800ea24 <__ieee754_exp+0x2e4>)
 800e75c:	428b      	cmp	r3, r1
 800e75e:	d918      	bls.n	800e792 <__ieee754_exp+0x52>
 800e760:	ee10 3a10 	vmov	r3, s0
 800e764:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800e768:	4313      	orrs	r3, r2
 800e76a:	d009      	beq.n	800e780 <__ieee754_exp+0x40>
 800e76c:	ee10 2a10 	vmov	r2, s0
 800e770:	462b      	mov	r3, r5
 800e772:	4620      	mov	r0, r4
 800e774:	4629      	mov	r1, r5
 800e776:	f7f1 fd31 	bl	80001dc <__adddf3>
 800e77a:	4604      	mov	r4, r0
 800e77c:	460d      	mov	r5, r1
 800e77e:	e002      	b.n	800e786 <__ieee754_exp+0x46>
 800e780:	b10e      	cbz	r6, 800e786 <__ieee754_exp+0x46>
 800e782:	2400      	movs	r4, #0
 800e784:	2500      	movs	r5, #0
 800e786:	ecbd 8b04 	vpop	{d8-d9}
 800e78a:	ec45 4b10 	vmov	d0, r4, r5
 800e78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e792:	a38d      	add	r3, pc, #564	; (adr r3, 800e9c8 <__ieee754_exp+0x288>)
 800e794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e798:	ee10 0a10 	vmov	r0, s0
 800e79c:	4629      	mov	r1, r5
 800e79e:	f7f2 f963 	bl	8000a68 <__aeabi_dcmpgt>
 800e7a2:	4607      	mov	r7, r0
 800e7a4:	b130      	cbz	r0, 800e7b4 <__ieee754_exp+0x74>
 800e7a6:	ecbd 8b04 	vpop	{d8-d9}
 800e7aa:	2000      	movs	r0, #0
 800e7ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7b0:	f000 b96f 	b.w	800ea92 <__math_oflow>
 800e7b4:	a386      	add	r3, pc, #536	; (adr r3, 800e9d0 <__ieee754_exp+0x290>)
 800e7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	4629      	mov	r1, r5
 800e7be:	f7f2 f935 	bl	8000a2c <__aeabi_dcmplt>
 800e7c2:	2800      	cmp	r0, #0
 800e7c4:	f000 808b 	beq.w	800e8de <__ieee754_exp+0x19e>
 800e7c8:	ecbd 8b04 	vpop	{d8-d9}
 800e7cc:	4638      	mov	r0, r7
 800e7ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7d2:	f000 b955 	b.w	800ea80 <__math_uflow>
 800e7d6:	4a94      	ldr	r2, [pc, #592]	; (800ea28 <__ieee754_exp+0x2e8>)
 800e7d8:	4293      	cmp	r3, r2
 800e7da:	f240 80ac 	bls.w	800e936 <__ieee754_exp+0x1f6>
 800e7de:	4a93      	ldr	r2, [pc, #588]	; (800ea2c <__ieee754_exp+0x2ec>)
 800e7e0:	4293      	cmp	r3, r2
 800e7e2:	d87c      	bhi.n	800e8de <__ieee754_exp+0x19e>
 800e7e4:	4b92      	ldr	r3, [pc, #584]	; (800ea30 <__ieee754_exp+0x2f0>)
 800e7e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ee:	ee10 0a10 	vmov	r0, s0
 800e7f2:	4629      	mov	r1, r5
 800e7f4:	f7f1 fcf0 	bl	80001d8 <__aeabi_dsub>
 800e7f8:	4b8e      	ldr	r3, [pc, #568]	; (800ea34 <__ieee754_exp+0x2f4>)
 800e7fa:	00f7      	lsls	r7, r6, #3
 800e7fc:	443b      	add	r3, r7
 800e7fe:	ed93 7b00 	vldr	d7, [r3]
 800e802:	f1c6 0a01 	rsb	sl, r6, #1
 800e806:	4680      	mov	r8, r0
 800e808:	4689      	mov	r9, r1
 800e80a:	ebaa 0a06 	sub.w	sl, sl, r6
 800e80e:	eeb0 8a47 	vmov.f32	s16, s14
 800e812:	eef0 8a67 	vmov.f32	s17, s15
 800e816:	ec53 2b18 	vmov	r2, r3, d8
 800e81a:	4640      	mov	r0, r8
 800e81c:	4649      	mov	r1, r9
 800e81e:	f7f1 fcdb 	bl	80001d8 <__aeabi_dsub>
 800e822:	4604      	mov	r4, r0
 800e824:	460d      	mov	r5, r1
 800e826:	4622      	mov	r2, r4
 800e828:	462b      	mov	r3, r5
 800e82a:	4620      	mov	r0, r4
 800e82c:	4629      	mov	r1, r5
 800e82e:	f7f1 fe8b 	bl	8000548 <__aeabi_dmul>
 800e832:	a369      	add	r3, pc, #420	; (adr r3, 800e9d8 <__ieee754_exp+0x298>)
 800e834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e838:	4606      	mov	r6, r0
 800e83a:	460f      	mov	r7, r1
 800e83c:	f7f1 fe84 	bl	8000548 <__aeabi_dmul>
 800e840:	a367      	add	r3, pc, #412	; (adr r3, 800e9e0 <__ieee754_exp+0x2a0>)
 800e842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e846:	f7f1 fcc7 	bl	80001d8 <__aeabi_dsub>
 800e84a:	4632      	mov	r2, r6
 800e84c:	463b      	mov	r3, r7
 800e84e:	f7f1 fe7b 	bl	8000548 <__aeabi_dmul>
 800e852:	a365      	add	r3, pc, #404	; (adr r3, 800e9e8 <__ieee754_exp+0x2a8>)
 800e854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e858:	f7f1 fcc0 	bl	80001dc <__adddf3>
 800e85c:	4632      	mov	r2, r6
 800e85e:	463b      	mov	r3, r7
 800e860:	f7f1 fe72 	bl	8000548 <__aeabi_dmul>
 800e864:	a362      	add	r3, pc, #392	; (adr r3, 800e9f0 <__ieee754_exp+0x2b0>)
 800e866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86a:	f7f1 fcb5 	bl	80001d8 <__aeabi_dsub>
 800e86e:	4632      	mov	r2, r6
 800e870:	463b      	mov	r3, r7
 800e872:	f7f1 fe69 	bl	8000548 <__aeabi_dmul>
 800e876:	a360      	add	r3, pc, #384	; (adr r3, 800e9f8 <__ieee754_exp+0x2b8>)
 800e878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e87c:	f7f1 fcae 	bl	80001dc <__adddf3>
 800e880:	4632      	mov	r2, r6
 800e882:	463b      	mov	r3, r7
 800e884:	f7f1 fe60 	bl	8000548 <__aeabi_dmul>
 800e888:	4602      	mov	r2, r0
 800e88a:	460b      	mov	r3, r1
 800e88c:	4620      	mov	r0, r4
 800e88e:	4629      	mov	r1, r5
 800e890:	f7f1 fca2 	bl	80001d8 <__aeabi_dsub>
 800e894:	4602      	mov	r2, r0
 800e896:	460b      	mov	r3, r1
 800e898:	4606      	mov	r6, r0
 800e89a:	460f      	mov	r7, r1
 800e89c:	4620      	mov	r0, r4
 800e89e:	4629      	mov	r1, r5
 800e8a0:	f7f1 fe52 	bl	8000548 <__aeabi_dmul>
 800e8a4:	ec41 0b19 	vmov	d9, r0, r1
 800e8a8:	f1ba 0f00 	cmp.w	sl, #0
 800e8ac:	d15d      	bne.n	800e96a <__ieee754_exp+0x22a>
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e8b4:	4630      	mov	r0, r6
 800e8b6:	4639      	mov	r1, r7
 800e8b8:	f7f1 fc8e 	bl	80001d8 <__aeabi_dsub>
 800e8bc:	4602      	mov	r2, r0
 800e8be:	460b      	mov	r3, r1
 800e8c0:	ec51 0b19 	vmov	r0, r1, d9
 800e8c4:	f7f1 ff6a 	bl	800079c <__aeabi_ddiv>
 800e8c8:	4622      	mov	r2, r4
 800e8ca:	462b      	mov	r3, r5
 800e8cc:	f7f1 fc84 	bl	80001d8 <__aeabi_dsub>
 800e8d0:	4602      	mov	r2, r0
 800e8d2:	460b      	mov	r3, r1
 800e8d4:	2000      	movs	r0, #0
 800e8d6:	4958      	ldr	r1, [pc, #352]	; (800ea38 <__ieee754_exp+0x2f8>)
 800e8d8:	f7f1 fc7e 	bl	80001d8 <__aeabi_dsub>
 800e8dc:	e74d      	b.n	800e77a <__ieee754_exp+0x3a>
 800e8de:	4857      	ldr	r0, [pc, #348]	; (800ea3c <__ieee754_exp+0x2fc>)
 800e8e0:	a347      	add	r3, pc, #284	; (adr r3, 800ea00 <__ieee754_exp+0x2c0>)
 800e8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e6:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800e8ea:	4629      	mov	r1, r5
 800e8ec:	4620      	mov	r0, r4
 800e8ee:	f7f1 fe2b 	bl	8000548 <__aeabi_dmul>
 800e8f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e8f6:	f7f1 fc71 	bl	80001dc <__adddf3>
 800e8fa:	f7f2 f8bf 	bl	8000a7c <__aeabi_d2iz>
 800e8fe:	4682      	mov	sl, r0
 800e900:	f7f1 fdb8 	bl	8000474 <__aeabi_i2d>
 800e904:	a340      	add	r3, pc, #256	; (adr r3, 800ea08 <__ieee754_exp+0x2c8>)
 800e906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e90a:	4606      	mov	r6, r0
 800e90c:	460f      	mov	r7, r1
 800e90e:	f7f1 fe1b 	bl	8000548 <__aeabi_dmul>
 800e912:	4602      	mov	r2, r0
 800e914:	460b      	mov	r3, r1
 800e916:	4620      	mov	r0, r4
 800e918:	4629      	mov	r1, r5
 800e91a:	f7f1 fc5d 	bl	80001d8 <__aeabi_dsub>
 800e91e:	a33c      	add	r3, pc, #240	; (adr r3, 800ea10 <__ieee754_exp+0x2d0>)
 800e920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e924:	4680      	mov	r8, r0
 800e926:	4689      	mov	r9, r1
 800e928:	4630      	mov	r0, r6
 800e92a:	4639      	mov	r1, r7
 800e92c:	f7f1 fe0c 	bl	8000548 <__aeabi_dmul>
 800e930:	ec41 0b18 	vmov	d8, r0, r1
 800e934:	e76f      	b.n	800e816 <__ieee754_exp+0xd6>
 800e936:	4a42      	ldr	r2, [pc, #264]	; (800ea40 <__ieee754_exp+0x300>)
 800e938:	4293      	cmp	r3, r2
 800e93a:	d811      	bhi.n	800e960 <__ieee754_exp+0x220>
 800e93c:	a336      	add	r3, pc, #216	; (adr r3, 800ea18 <__ieee754_exp+0x2d8>)
 800e93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e942:	ee10 0a10 	vmov	r0, s0
 800e946:	4629      	mov	r1, r5
 800e948:	f7f1 fc48 	bl	80001dc <__adddf3>
 800e94c:	4b3a      	ldr	r3, [pc, #232]	; (800ea38 <__ieee754_exp+0x2f8>)
 800e94e:	2200      	movs	r2, #0
 800e950:	f7f2 f88a 	bl	8000a68 <__aeabi_dcmpgt>
 800e954:	b138      	cbz	r0, 800e966 <__ieee754_exp+0x226>
 800e956:	4b38      	ldr	r3, [pc, #224]	; (800ea38 <__ieee754_exp+0x2f8>)
 800e958:	2200      	movs	r2, #0
 800e95a:	4620      	mov	r0, r4
 800e95c:	4629      	mov	r1, r5
 800e95e:	e70a      	b.n	800e776 <__ieee754_exp+0x36>
 800e960:	f04f 0a00 	mov.w	sl, #0
 800e964:	e75f      	b.n	800e826 <__ieee754_exp+0xe6>
 800e966:	4682      	mov	sl, r0
 800e968:	e75d      	b.n	800e826 <__ieee754_exp+0xe6>
 800e96a:	4632      	mov	r2, r6
 800e96c:	463b      	mov	r3, r7
 800e96e:	2000      	movs	r0, #0
 800e970:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e974:	f7f1 fc30 	bl	80001d8 <__aeabi_dsub>
 800e978:	4602      	mov	r2, r0
 800e97a:	460b      	mov	r3, r1
 800e97c:	ec51 0b19 	vmov	r0, r1, d9
 800e980:	f7f1 ff0c 	bl	800079c <__aeabi_ddiv>
 800e984:	4602      	mov	r2, r0
 800e986:	460b      	mov	r3, r1
 800e988:	ec51 0b18 	vmov	r0, r1, d8
 800e98c:	f7f1 fc24 	bl	80001d8 <__aeabi_dsub>
 800e990:	4642      	mov	r2, r8
 800e992:	464b      	mov	r3, r9
 800e994:	f7f1 fc20 	bl	80001d8 <__aeabi_dsub>
 800e998:	4602      	mov	r2, r0
 800e99a:	460b      	mov	r3, r1
 800e99c:	2000      	movs	r0, #0
 800e99e:	4926      	ldr	r1, [pc, #152]	; (800ea38 <__ieee754_exp+0x2f8>)
 800e9a0:	f7f1 fc1a 	bl	80001d8 <__aeabi_dsub>
 800e9a4:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800e9a8:	4592      	cmp	sl, r2
 800e9aa:	db02      	blt.n	800e9b2 <__ieee754_exp+0x272>
 800e9ac:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800e9b0:	e6e3      	b.n	800e77a <__ieee754_exp+0x3a>
 800e9b2:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800e9b6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800e9c0:	f7f1 fdc2 	bl	8000548 <__aeabi_dmul>
 800e9c4:	e6d9      	b.n	800e77a <__ieee754_exp+0x3a>
 800e9c6:	bf00      	nop
 800e9c8:	fefa39ef 	.word	0xfefa39ef
 800e9cc:	40862e42 	.word	0x40862e42
 800e9d0:	d52d3051 	.word	0xd52d3051
 800e9d4:	c0874910 	.word	0xc0874910
 800e9d8:	72bea4d0 	.word	0x72bea4d0
 800e9dc:	3e663769 	.word	0x3e663769
 800e9e0:	c5d26bf1 	.word	0xc5d26bf1
 800e9e4:	3ebbbd41 	.word	0x3ebbbd41
 800e9e8:	af25de2c 	.word	0xaf25de2c
 800e9ec:	3f11566a 	.word	0x3f11566a
 800e9f0:	16bebd93 	.word	0x16bebd93
 800e9f4:	3f66c16c 	.word	0x3f66c16c
 800e9f8:	5555553e 	.word	0x5555553e
 800e9fc:	3fc55555 	.word	0x3fc55555
 800ea00:	652b82fe 	.word	0x652b82fe
 800ea04:	3ff71547 	.word	0x3ff71547
 800ea08:	fee00000 	.word	0xfee00000
 800ea0c:	3fe62e42 	.word	0x3fe62e42
 800ea10:	35793c76 	.word	0x35793c76
 800ea14:	3dea39ef 	.word	0x3dea39ef
 800ea18:	8800759c 	.word	0x8800759c
 800ea1c:	7e37e43c 	.word	0x7e37e43c
 800ea20:	40862e41 	.word	0x40862e41
 800ea24:	7fefffff 	.word	0x7fefffff
 800ea28:	3fd62e42 	.word	0x3fd62e42
 800ea2c:	3ff0a2b1 	.word	0x3ff0a2b1
 800ea30:	0800eca0 	.word	0x0800eca0
 800ea34:	0800ecb0 	.word	0x0800ecb0
 800ea38:	3ff00000 	.word	0x3ff00000
 800ea3c:	0800ec90 	.word	0x0800ec90
 800ea40:	3defffff 	.word	0x3defffff

0800ea44 <with_errno>:
 800ea44:	b570      	push	{r4, r5, r6, lr}
 800ea46:	4604      	mov	r4, r0
 800ea48:	460d      	mov	r5, r1
 800ea4a:	4616      	mov	r6, r2
 800ea4c:	f7ff fdee 	bl	800e62c <__errno>
 800ea50:	4629      	mov	r1, r5
 800ea52:	6006      	str	r6, [r0, #0]
 800ea54:	4620      	mov	r0, r4
 800ea56:	bd70      	pop	{r4, r5, r6, pc}

0800ea58 <xflow>:
 800ea58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea5a:	4614      	mov	r4, r2
 800ea5c:	461d      	mov	r5, r3
 800ea5e:	b108      	cbz	r0, 800ea64 <xflow+0xc>
 800ea60:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ea64:	e9cd 2300 	strd	r2, r3, [sp]
 800ea68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea6c:	4620      	mov	r0, r4
 800ea6e:	4629      	mov	r1, r5
 800ea70:	f7f1 fd6a 	bl	8000548 <__aeabi_dmul>
 800ea74:	2222      	movs	r2, #34	; 0x22
 800ea76:	b003      	add	sp, #12
 800ea78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea7c:	f7ff bfe2 	b.w	800ea44 <with_errno>

0800ea80 <__math_uflow>:
 800ea80:	b508      	push	{r3, lr}
 800ea82:	2200      	movs	r2, #0
 800ea84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ea88:	f7ff ffe6 	bl	800ea58 <xflow>
 800ea8c:	ec41 0b10 	vmov	d0, r0, r1
 800ea90:	bd08      	pop	{r3, pc}

0800ea92 <__math_oflow>:
 800ea92:	b508      	push	{r3, lr}
 800ea94:	2200      	movs	r2, #0
 800ea96:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ea9a:	f7ff ffdd 	bl	800ea58 <xflow>
 800ea9e:	ec41 0b10 	vmov	d0, r0, r1
 800eaa2:	bd08      	pop	{r3, pc}

0800eaa4 <finite>:
 800eaa4:	b082      	sub	sp, #8
 800eaa6:	ed8d 0b00 	vstr	d0, [sp]
 800eaaa:	9801      	ldr	r0, [sp, #4]
 800eaac:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800eab0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800eab4:	0fc0      	lsrs	r0, r0, #31
 800eab6:	b002      	add	sp, #8
 800eab8:	4770      	bx	lr
	...

0800eabc <_init>:
 800eabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eabe:	bf00      	nop
 800eac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eac2:	bc08      	pop	{r3}
 800eac4:	469e      	mov	lr, r3
 800eac6:	4770      	bx	lr

0800eac8 <_fini>:
 800eac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaca:	bf00      	nop
 800eacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eace:	bc08      	pop	{r3}
 800ead0:	469e      	mov	lr, r3
 800ead2:	4770      	bx	lr
