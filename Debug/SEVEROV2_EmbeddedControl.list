
SEVEROV2_EmbeddedControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800e780  0800e780  0001e780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea78  0800ea78  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea78  0800ea78  0001ea78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea80  0800ea80  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea80  0800ea80  0001ea80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea84  0800ea84  0001ea84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800ea88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00003598  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000361c  2000361c  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027920  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005450  00000000  00000000  000479d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001da8  00000000  00000000  0004ce28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b80  00000000  00000000  0004ebd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002673d  00000000  00000000  00050750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000254a2  00000000  00000000  00076e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd64b  00000000  00000000  0009c32f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017997a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000839c  00000000  00000000  001799cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e768 	.word	0x0800e768

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800e768 	.word	0x0800e768

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bac:	f000 b974 	b.w	8000e98 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468e      	mov	lr, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14d      	bne.n	8000c72 <__udivmoddi4+0xaa>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4694      	mov	ip, r2
 8000bda:	d969      	bls.n	8000cb0 <__udivmoddi4+0xe8>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b152      	cbz	r2, 8000bf8 <__udivmoddi4+0x30>
 8000be2:	fa01 f302 	lsl.w	r3, r1, r2
 8000be6:	f1c2 0120 	rsb	r1, r2, #32
 8000bea:	fa20 f101 	lsr.w	r1, r0, r1
 8000bee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bf6:	4094      	lsls	r4, r2
 8000bf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bfc:	0c21      	lsrs	r1, r4, #16
 8000bfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000c02:	fa1f f78c 	uxth.w	r7, ip
 8000c06:	fb08 e316 	mls	r3, r8, r6, lr
 8000c0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c0e:	fb06 f107 	mul.w	r1, r6, r7
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x64>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c1e:	f080 811f 	bcs.w	8000e60 <__udivmoddi4+0x298>
 8000c22:	4299      	cmp	r1, r3
 8000c24:	f240 811c 	bls.w	8000e60 <__udivmoddi4+0x298>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	1a5b      	subs	r3, r3, r1
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c3c:	fb00 f707 	mul.w	r7, r0, r7
 8000c40:	42a7      	cmp	r7, r4
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x92>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c4c:	f080 810a 	bcs.w	8000e64 <__udivmoddi4+0x29c>
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	f240 8107 	bls.w	8000e64 <__udivmoddi4+0x29c>
 8000c56:	4464      	add	r4, ip
 8000c58:	3802      	subs	r0, #2
 8000c5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5e:	1be4      	subs	r4, r4, r7
 8000c60:	2600      	movs	r6, #0
 8000c62:	b11d      	cbz	r5, 8000c6c <__udivmoddi4+0xa4>
 8000c64:	40d4      	lsrs	r4, r2
 8000c66:	2300      	movs	r3, #0
 8000c68:	e9c5 4300 	strd	r4, r3, [r5]
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0xc2>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f000 80ef 	beq.w	8000e5a <__udivmoddi4+0x292>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c82:	4630      	mov	r0, r6
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f683 	clz	r6, r3
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x160>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xd4>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80f9 	bhi.w	8000e8e <__udivmoddi4+0x2c6>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0e0      	beq.n	8000c6c <__udivmoddi4+0xa4>
 8000caa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cae:	e7dd      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000cb0:	b902      	cbnz	r2, 8000cb4 <__udivmoddi4+0xec>
 8000cb2:	deff      	udf	#255	; 0xff
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	f040 8092 	bne.w	8000de2 <__udivmoddi4+0x21a>
 8000cbe:	eba1 010c 	sub.w	r1, r1, ip
 8000cc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc6:	fa1f fe8c 	uxth.w	lr, ip
 8000cca:	2601      	movs	r6, #1
 8000ccc:	0c20      	lsrs	r0, r4, #16
 8000cce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cda:	fb0e f003 	mul.w	r0, lr, r3
 8000cde:	4288      	cmp	r0, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x12c>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x12a>
 8000cec:	4288      	cmp	r0, r1
 8000cee:	f200 80cb 	bhi.w	8000e88 <__udivmoddi4+0x2c0>
 8000cf2:	4643      	mov	r3, r8
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000d00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d04:	fb0e fe00 	mul.w	lr, lr, r0
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x156>
 8000d0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d10:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d14:	d202      	bcs.n	8000d1c <__udivmoddi4+0x154>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f200 80bb 	bhi.w	8000e92 <__udivmoddi4+0x2ca>
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d26:	e79c      	b.n	8000c62 <__udivmoddi4+0x9a>
 8000d28:	f1c6 0720 	rsb	r7, r6, #32
 8000d2c:	40b3      	lsls	r3, r6
 8000d2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d36:	fa20 f407 	lsr.w	r4, r0, r7
 8000d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d3e:	431c      	orrs	r4, r3
 8000d40:	40f9      	lsrs	r1, r7
 8000d42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d46:	fa00 f306 	lsl.w	r3, r0, r6
 8000d4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d4e:	0c20      	lsrs	r0, r4, #16
 8000d50:	fa1f fe8c 	uxth.w	lr, ip
 8000d54:	fb09 1118 	mls	r1, r9, r8, r1
 8000d58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d60:	4288      	cmp	r0, r1
 8000d62:	fa02 f206 	lsl.w	r2, r2, r6
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b8>
 8000d68:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d70:	f080 8088 	bcs.w	8000e84 <__udivmoddi4+0x2bc>
 8000d74:	4288      	cmp	r0, r1
 8000d76:	f240 8085 	bls.w	8000e84 <__udivmoddi4+0x2bc>
 8000d7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	1a09      	subs	r1, r1, r0
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d88:	fb09 1110 	mls	r1, r9, r0, r1
 8000d8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d94:	458e      	cmp	lr, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1e2>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000da0:	d26c      	bcs.n	8000e7c <__udivmoddi4+0x2b4>
 8000da2:	458e      	cmp	lr, r1
 8000da4:	d96a      	bls.n	8000e7c <__udivmoddi4+0x2b4>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4461      	add	r1, ip
 8000daa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dae:	fba0 9402 	umull	r9, r4, r0, r2
 8000db2:	eba1 010e 	sub.w	r1, r1, lr
 8000db6:	42a1      	cmp	r1, r4
 8000db8:	46c8      	mov	r8, r9
 8000dba:	46a6      	mov	lr, r4
 8000dbc:	d356      	bcc.n	8000e6c <__udivmoddi4+0x2a4>
 8000dbe:	d053      	beq.n	8000e68 <__udivmoddi4+0x2a0>
 8000dc0:	b15d      	cbz	r5, 8000dda <__udivmoddi4+0x212>
 8000dc2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dc6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dca:	fa01 f707 	lsl.w	r7, r1, r7
 8000dce:	fa22 f306 	lsr.w	r3, r2, r6
 8000dd2:	40f1      	lsrs	r1, r6
 8000dd4:	431f      	orrs	r7, r3
 8000dd6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dda:	2600      	movs	r6, #0
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	f1c2 0320 	rsb	r3, r2, #32
 8000de6:	40d8      	lsrs	r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa21 f303 	lsr.w	r3, r1, r3
 8000df0:	4091      	lsls	r1, r2
 8000df2:	4301      	orrs	r1, r0
 8000df4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df8:	fa1f fe8c 	uxth.w	lr, ip
 8000dfc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e00:	fb07 3610 	mls	r6, r7, r0, r3
 8000e04:	0c0b      	lsrs	r3, r1, #16
 8000e06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x260>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e1e:	d22f      	bcs.n	8000e80 <__udivmoddi4+0x2b8>
 8000e20:	429e      	cmp	r6, r3
 8000e22:	d92d      	bls.n	8000e80 <__udivmoddi4+0x2b8>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	b289      	uxth	r1, r1
 8000e2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e30:	fb07 3316 	mls	r3, r7, r6, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb06 f30e 	mul.w	r3, r6, lr
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x28a>
 8000e40:	eb1c 0101 	adds.w	r1, ip, r1
 8000e44:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e48:	d216      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d914      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4e:	3e02      	subs	r6, #2
 8000e50:	4461      	add	r1, ip
 8000e52:	1ac9      	subs	r1, r1, r3
 8000e54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e58:	e738      	b.n	8000ccc <__udivmoddi4+0x104>
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e705      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e3      	b.n	8000c2c <__udivmoddi4+0x64>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6f8      	b.n	8000c5a <__udivmoddi4+0x92>
 8000e68:	454b      	cmp	r3, r9
 8000e6a:	d2a9      	bcs.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7a3      	b.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e78:	4646      	mov	r6, r8
 8000e7a:	e7ea      	b.n	8000e52 <__udivmoddi4+0x28a>
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	e794      	b.n	8000daa <__udivmoddi4+0x1e2>
 8000e80:	4640      	mov	r0, r8
 8000e82:	e7d1      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e84:	46d0      	mov	r8, sl
 8000e86:	e77b      	b.n	8000d80 <__udivmoddi4+0x1b8>
 8000e88:	3b02      	subs	r3, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	e732      	b.n	8000cf4 <__udivmoddi4+0x12c>
 8000e8e:	4630      	mov	r0, r6
 8000e90:	e709      	b.n	8000ca6 <__udivmoddi4+0xde>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e742      	b.n	8000d1e <__udivmoddi4+0x156>

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <fromTickToMs>:

uint32_t fromSecToTick(float sec) {
	return (sec * configTICK_RATE_HZ);
}

float fromTickToMs(uint32_t ticks) {
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	return ((float) (ticks) * 1000.0f) / (float) configTICK_RATE_HZ;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	ee07 3a90 	vmov	s15, r3
 8000eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eae:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000ed0 <fromTickToMs+0x34>
 8000eb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eb6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000ed0 <fromTickToMs+0x34>
 8000eba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000ebe:	eef0 7a66 	vmov.f32	s15, s13
}
 8000ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	447a0000 	.word	0x447a0000

08000ed4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <MX_CAN1_Init+0x60>)
 8000eda:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000edc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_CAN1_Init+0x60>)
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <MX_CAN1_Init+0x60>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <MX_CAN1_Init+0x60>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <MX_CAN1_Init+0x60>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_CAN1_Init+0x60>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000efc:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <MX_CAN1_Init+0x60>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_CAN1_Init+0x60>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <MX_CAN1_Init+0x60>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_CAN1_Init+0x60>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <MX_CAN1_Init+0x60>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <MX_CAN1_Init+0x60>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <MX_CAN1_Init+0x60>)
 8000f22:	f003 ff3b 	bl	8004d9c <HAL_CAN_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000f2c:	f002 fbfe 	bl	800372c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200000a0 	.word	0x200000a0
 8000f38:	40006400 	.word	0x40006400

08000f3c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a19      	ldr	r2, [pc, #100]	; (8000fc0 <HAL_CAN_MspInit+0x84>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d12c      	bne.n	8000fb8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_CAN_MspInit+0x88>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <HAL_CAN_MspInit+0x88>)
 8000f68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_CAN_MspInit+0x88>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_CAN_MspInit+0x88>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <HAL_CAN_MspInit+0x88>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <HAL_CAN_MspInit+0x88>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fa8:	2309      	movs	r3, #9
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <HAL_CAN_MspInit+0x8c>)
 8000fb4:	f004 ffb8 	bl	8005f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000fb8:	bf00      	nop
 8000fba:	3728      	adds	r7, #40	; 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40006400 	.word	0x40006400
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020000 	.word	0x40020000

08000fcc <GetCrc16Checksumm>:
#include "checksum.h"

uint16_t GetCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 8000fd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fdc:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	len = len-2;
 8000fde:	887b      	ldrh	r3, [r7, #2]
 8000fe0:	3b02      	subs	r3, #2
 8000fe2:	807b      	strh	r3, [r7, #2]

    while (len--) {
 8000fe4:	e025      	b.n	8001032 <GetCrc16Checksumm+0x66>
        crc ^= *pcBlock++ << 8;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ff6:	4053      	eors	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	81fb      	strh	r3, [r7, #14]

        for (i = 0; i < 8; i++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	737b      	strb	r3, [r7, #13]
 8001000:	e014      	b.n	800102c <GetCrc16Checksumm+0x60>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 8001002:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001006:	2b00      	cmp	r3, #0
 8001008:	da09      	bge.n	800101e <GetCrc16Checksumm+0x52>
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	b21b      	sxth	r3, r3
 8001010:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8001014:	f083 0301 	eor.w	r3, r3, #1
 8001018:	b21b      	sxth	r3, r3
 800101a:	b29b      	uxth	r3, r3
 800101c:	e002      	b.n	8001024 <GetCrc16Checksumm+0x58>
 800101e:	89fb      	ldrh	r3, [r7, #14]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	b29b      	uxth	r3, r3
 8001024:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++)
 8001026:	7b7b      	ldrb	r3, [r7, #13]
 8001028:	3301      	adds	r3, #1
 800102a:	737b      	strb	r3, [r7, #13]
 800102c:	7b7b      	ldrb	r3, [r7, #13]
 800102e:	2b07      	cmp	r3, #7
 8001030:	d9e7      	bls.n	8001002 <GetCrc16Checksumm+0x36>
    while (len--) {
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	1e5a      	subs	r2, r3, #1
 8001036:	807a      	strh	r2, [r7, #2]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1d4      	bne.n	8000fe6 <GetCrc16Checksumm+0x1a>
    }
    return crc;
 800103c:	89fb      	ldrh	r3, [r7, #14]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <IsCrc16ChecksummCorrect>:

bool IsCrc16ChecksummCorrect(uint8_t *pcBlock, uint16_t len)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	807b      	strh	r3, [r7, #2]
	uint16_t crc_calculated = GetCrc16Checksumm(pcBlock, len);
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	4619      	mov	r1, r3
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffb6 	bl	8000fcc <GetCrc16Checksumm>
 8001060:	4603      	mov	r3, r0
 8001062:	82fb      	strh	r3, [r7, #22]

	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 8001064:	887b      	ldrh	r3, [r7, #2]
 8001066:	3b02      	subs	r3, #2
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	4413      	add	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
	uint16_t crc_got = *crc_pointer;
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	81fb      	strh	r3, [r7, #14]

	if(crc_got == crc_calculated) {
 8001074:	89fa      	ldrh	r2, [r7, #14]
 8001076:	8afb      	ldrh	r3, [r7, #22]
 8001078:	429a      	cmp	r2, r3
 800107a:	d101      	bne.n	8001080 <IsCrc16ChecksummCorrect+0x36>
		return true;
 800107c:	2301      	movs	r3, #1
 800107e:	e000      	b.n	8001082 <IsCrc16ChecksummCorrect+0x38>
	}
	else {
		return false;
 8001080:	2300      	movs	r3, #0
	}
}
 8001082:	4618      	mov	r0, r3
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <AddCrc16Checksumm>:

void AddCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	460b      	mov	r3, r1
 8001094:	807b      	strh	r3, [r7, #2]
	uint16_t crc = GetCrc16Checksumm(pcBlock, len);
 8001096:	887b      	ldrh	r3, [r7, #2]
 8001098:	4619      	mov	r1, r3
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ff96 	bl	8000fcc <GetCrc16Checksumm>
 80010a0:	4603      	mov	r3, r0
 80010a2:	81fb      	strh	r3, [r7, #14]
	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 80010a4:	887b      	ldrh	r3, [r7, #2]
 80010a6:	3b02      	subs	r3, #2
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	4413      	add	r3, r2
 80010ac:	60bb      	str	r3, [r7, #8]
	*crc_pointer = crc;
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	89fa      	ldrh	r2, [r7, #14]
 80010b2:	801a      	strh	r2, [r3, #0]
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <IsChecksumm8bCorrect>:
    msg[length - 2] = (uint8_t) (crc >> 8);
    msg[length - 1] = (uint8_t) crc;
}

bool IsChecksumm8bCorrect(uint8_t *msg, uint16_t length)
{
 80010bc:	b480      	push	{r7}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]
    uint8_t crcGot, crc = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	75fb      	strb	r3, [r7, #23]
    int i;

    crcGot = msg[length-1] ;
 80010cc:	887b      	ldrh	r3, [r7, #2]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	4413      	add	r3, r2
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	73fb      	strb	r3, [r7, #15]

        for(i=0; i < length - 1; i++){
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	e009      	b.n	80010f2 <IsChecksumm8bCorrect+0x36>
            crc ^= msg[i];
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	4413      	add	r3, r2
 80010e4:	781a      	ldrb	r2, [r3, #0]
 80010e6:	7dfb      	ldrb	r3, [r7, #23]
 80010e8:	4053      	eors	r3, r2
 80010ea:	75fb      	strb	r3, [r7, #23]
        for(i=0; i < length - 1; i++){
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	3301      	adds	r3, #1
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	887b      	ldrh	r3, [r7, #2]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbf0      	blt.n	80010de <IsChecksumm8bCorrect+0x22>
        }

    if(crc == crcGot)
 80010fc:	7dfa      	ldrb	r2, [r7, #23]
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	429a      	cmp	r2, r3
 8001102:	d101      	bne.n	8001108 <IsChecksumm8bCorrect+0x4c>
        return 1;
 8001104:	2301      	movs	r3, #1
 8001106:	e000      	b.n	800110a <IsChecksumm8bCorrect+0x4e>
    else return 0;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	371c      	adds	r7, #28
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <AddChecksumm8b>:

void AddChecksumm8b(uint8_t *msg, uint16_t length)
{
 8001116:	b480      	push	{r7}
 8001118:	b085      	sub	sp, #20
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	460b      	mov	r3, r1
 8001120:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	73fb      	strb	r3, [r7, #15]
	int i = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]

	for(i=0; i < length - 1; i++) {
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	e009      	b.n	8001144 <AddChecksumm8b+0x2e>
		crc ^= msg[i];
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	781a      	ldrb	r2, [r3, #0]
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	4053      	eors	r3, r2
 800113c:	73fb      	strb	r3, [r7, #15]
	for(i=0; i < length - 1; i++) {
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3301      	adds	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	887b      	ldrh	r3, [r7, #2]
 8001146:	3b01      	subs	r3, #1
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	429a      	cmp	r2, r3
 800114c:	dbf0      	blt.n	8001130 <AddChecksumm8b+0x1a>
	}

	msg[length-1] = crc;
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	3b01      	subs	r3, #1
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	7bfa      	ldrb	r2, [r7, #15]
 8001158:	701a      	strb	r2, [r3, #0]
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <IsChecksumm8bCorrectVma>:

bool IsChecksumm8bCorrectVma(uint8_t *msg, uint16_t length)
{
 8001166:	b480      	push	{r7}
 8001168:	b087      	sub	sp, #28
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	807b      	strh	r3, [r7, #2]
	uint8_t crcGot, crc = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	75fb      	strb	r3, [r7, #23]
	int i;

	crcGot = msg[length-1] ;
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	3b01      	subs	r3, #1
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	73fb      	strb	r3, [r7, #15]

	for (i = 1; i < length - 1; ++i) {
 8001182:	2301      	movs	r3, #1
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	e009      	b.n	800119c <IsChecksumm8bCorrectVma+0x36>
		crc ^= msg[i];
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	781a      	ldrb	r2, [r3, #0]
 8001190:	7dfb      	ldrb	r3, [r7, #23]
 8001192:	4053      	eors	r3, r2
 8001194:	75fb      	strb	r3, [r7, #23]
	for (i = 1; i < length - 1; ++i) {
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	3301      	adds	r3, #1
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	887b      	ldrh	r3, [r7, #2]
 800119e:	3b01      	subs	r3, #1
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	dbf0      	blt.n	8001188 <IsChecksumm8bCorrectVma+0x22>
	}

	if (crc == crcGot) {
 80011a6:	7dfa      	ldrb	r2, [r7, #23]
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d101      	bne.n	80011b2 <IsChecksumm8bCorrectVma+0x4c>
		return 1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <IsChecksumm8bCorrectVma+0x4e>
	}
	else {
		return 0;
 80011b2:	2300      	movs	r3, #0
	}
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	371c      	adds	r7, #28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <AddChecksumm8bVma>:

void AddChecksumm8bVma(uint8_t *msg, uint16_t length)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	73fb      	strb	r3, [r7, #15]

	for(int i = 1; i < length - 1; i++) {
 80011d0:	2301      	movs	r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	e009      	b.n	80011ea <AddChecksumm8bVma+0x2a>
		crc ^= msg[i];
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	4413      	add	r3, r2
 80011dc:	781a      	ldrb	r2, [r3, #0]
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	4053      	eors	r3, r2
 80011e2:	73fb      	strb	r3, [r7, #15]
	for(int i = 1; i < length - 1; i++) {
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	3301      	adds	r3, #1
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	887b      	ldrh	r3, [r7, #2]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	dbf0      	blt.n	80011d6 <AddChecksumm8bVma+0x16>
	}

	msg[length-1] = crc;
 80011f4:	887b      	ldrh	r3, [r7, #2]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	4413      	add	r3, r2
 80011fc:	7bfa      	ldrb	r2, [r7, #15]
 80011fe:	701a      	strb	r2, [r3, #0]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <IsChecksum16bSCorrect>:
    msg[length - 2] = (uint8_t) (checksum >> 8);
    msg[length - 1] = (uint8_t) checksum;
}

bool IsChecksum16bSCorrect(uint8_t *msg, uint16_t length)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
    uint16_t checksum = 0, checksum_in = (uint16_t) ((msg[length - 2] << 8) + (msg[length - 1]));
 8001218:	2300      	movs	r3, #0
 800121a:	81fb      	strh	r3, [r7, #14]
 800121c:	887b      	ldrh	r3, [r7, #2]
 800121e:	3b02      	subs	r3, #2
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	4413      	add	r3, r2
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	b29a      	uxth	r2, r3
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	3b01      	subs	r3, #1
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	440b      	add	r3, r1
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b29b      	uxth	r3, r3
 8001238:	4413      	add	r3, r2
 800123a:	817b      	strh	r3, [r7, #10]
  for(uint8_t i = 0; i < length-2; ++i) {
 800123c:	2300      	movs	r3, #0
 800123e:	737b      	strb	r3, [r7, #13]
 8001240:	e00a      	b.n	8001258 <IsChecksum16bSCorrect+0x4c>
    checksum += msg[i];
 8001242:	7b7b      	ldrb	r3, [r7, #13]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4413      	add	r3, r2
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b29a      	uxth	r2, r3
 800124c:	89fb      	ldrh	r3, [r7, #14]
 800124e:	4413      	add	r3, r2
 8001250:	81fb      	strh	r3, [r7, #14]
  for(uint8_t i = 0; i < length-2; ++i) {
 8001252:	7b7b      	ldrb	r3, [r7, #13]
 8001254:	3301      	adds	r3, #1
 8001256:	737b      	strb	r3, [r7, #13]
 8001258:	7b7a      	ldrb	r2, [r7, #13]
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	3b02      	subs	r3, #2
 800125e:	429a      	cmp	r2, r3
 8001260:	dbef      	blt.n	8001242 <IsChecksum16bSCorrect+0x36>
  }
    if(checksum == checksum_in) {
 8001262:	89fa      	ldrh	r2, [r7, #14]
 8001264:	897b      	ldrh	r3, [r7, #10]
 8001266:	429a      	cmp	r2, r3
 8001268:	d101      	bne.n	800126e <IsChecksum16bSCorrect+0x62>
        return true;
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <IsChecksum16bSCorrect+0x64>
    }
    else {
        return false;
 800126e:	2300      	movs	r3, #0
    }
}
 8001270:	4618      	mov	r0, r3
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <MergeBytes>:
    *lowbyte = (uint8_t) ((checksum & 0xFF00) >> 8);
    *upbyte = (uint8_t) (checksum & 0x00FF);
}

int16_t MergeBytes(uint8_t *pos)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	uint8_t temp = pos[0];
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	73fb      	strb	r3, [r7, #15]
	pos[0] = pos[1];
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	785a      	ldrb	r2, [r3, #1]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	701a      	strb	r2, [r3, #0]
	pos[1] = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3301      	adds	r3, #1
 8001296:	7bfa      	ldrb	r2, [r7, #15]
 8001298:	701a      	strb	r2, [r3, #0]

	int16_t *pointer = (int16_t*) (pos);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	60bb      	str	r3, [r7, #8]
	return *pointer;
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <PickBit>:
        array[i] = 0x00;
    }
}

bool PickBit(uint8_t input, uint8_t bit)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	460a      	mov	r2, r1
 80012ba:	71fb      	strb	r3, [r7, #7]
 80012bc:	4613      	mov	r3, r2
 80012be:	71bb      	strb	r3, [r7, #6]
	//return (bool) ((input << (7 - bit)) >> 7);

	switch(bit) {
 80012c0:	79bb      	ldrb	r3, [r7, #6]
 80012c2:	2b07      	cmp	r3, #7
 80012c4:	d857      	bhi.n	8001376 <PickBit+0xc6>
 80012c6:	a201      	add	r2, pc, #4	; (adr r2, 80012cc <PickBit+0x1c>)
 80012c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012cc:	080012ed 	.word	0x080012ed
 80012d0:	080012ff 	.word	0x080012ff
 80012d4:	08001311 	.word	0x08001311
 80012d8:	08001323 	.word	0x08001323
 80012dc:	08001335 	.word	0x08001335
 80012e0:	08001347 	.word	0x08001347
 80012e4:	08001359 	.word	0x08001359
 80012e8:	0800136b 	.word	0x0800136b
	case 0:
			return (bool) (input & 0b00000001);
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	bf14      	ite	ne
 80012f6:	2301      	movne	r3, #1
 80012f8:	2300      	moveq	r3, #0
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	e03c      	b.n	8001378 <PickBit+0xc8>
	case 1:
			return (bool) (input & 0b00000010);
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	bf14      	ite	ne
 8001308:	2301      	movne	r3, #1
 800130a:	2300      	moveq	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	e033      	b.n	8001378 <PickBit+0xc8>
	case 2:
			return (bool) (input & 0b00000100);
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf14      	ite	ne
 800131a:	2301      	movne	r3, #1
 800131c:	2300      	moveq	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	e02a      	b.n	8001378 <PickBit+0xc8>
	case 3:
			return (bool) (input & 0b00001000);
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf14      	ite	ne
 800132c:	2301      	movne	r3, #1
 800132e:	2300      	moveq	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	e021      	b.n	8001378 <PickBit+0xc8>
	case 4:
			return (bool) (input & 0b00010000);
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	2b00      	cmp	r3, #0
 800133c:	bf14      	ite	ne
 800133e:	2301      	movne	r3, #1
 8001340:	2300      	moveq	r3, #0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	e018      	b.n	8001378 <PickBit+0xc8>
	case 5:
			return (bool) (input & 0b00100000);
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 0320 	and.w	r3, r3, #32
 800134c:	2b00      	cmp	r3, #0
 800134e:	bf14      	ite	ne
 8001350:	2301      	movne	r3, #1
 8001352:	2300      	moveq	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	e00f      	b.n	8001378 <PickBit+0xc8>
	case 6:
			return (bool) (input & 0b01000000);
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800135e:	2b00      	cmp	r3, #0
 8001360:	bf14      	ite	ne
 8001362:	2301      	movne	r3, #1
 8001364:	2300      	moveq	r3, #0
 8001366:	b2db      	uxtb	r3, r3
 8001368:	e006      	b.n	8001378 <PickBit+0xc8>
	case 7:
			return (bool) (input & 0b10000000);
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	09db      	lsrs	r3, r3, #7
 8001372:	b2db      	uxtb	r3, r3
 8001374:	e000      	b.n	8001378 <PickBit+0xc8>
	}
	return false;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <transmitPackage>:
		uartBus[i].lastMessage = 0;
	}
}

bool transmitPackage(struct uartBus_s *bus, bool isrMode)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	70fb      	strb	r3, [r7, #3]
    bus->packageTransmitted = false;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	725a      	strb	r2, [r3, #9]

    HAL_UART_AbortTransmit_IT(bus->huart);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4618      	mov	r0, r3
 800139c:	f007 fe52 	bl	8009044 <HAL_UART_AbortTransmit_IT>
    switch(bus->txrxType) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00d      	beq.n	80013c6 <transmitPackage+0x42>
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d117      	bne.n	80013de <transmitPackage+0x5a>
        case TXRX_DMA:
            HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6859      	ldr	r1, [r3, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013bc:	b29b      	uxth	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	f007 fd92 	bl	8008ee8 <HAL_UART_Transmit_DMA>
            break;
 80013c4:	e00d      	b.n	80013e2 <transmitPackage+0x5e>
        case TXRX_IT:
        	HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6859      	ldr	r1, [r3, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	f007 fd11 	bl	8008dfe <HAL_UART_Transmit_IT>
            break;
 80013dc:	e001      	b.n	80013e2 <transmitPackage+0x5e>
        default:
            return false;
 80013de:	2300      	movs	r3, #0
 80013e0:	e036      	b.n	8001450 <transmitPackage+0xcc>
    }

    bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 80013e2:	f00a fe39 	bl	800c058 <xTaskGetTickCount>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fd57 	bl	8000e9c <fromTickToMs>
 80013ee:	eef0 7a40 	vmov.f32	s15, s0
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	edc3 7a05 	vstr	s15, [r3, #20]
    while (!bus->packageTransmitted && !isrMode) {
 80013f8:	e01c      	b.n	8001434 <transmitPackage+0xb0>
    	if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 80013fa:	f00a fe2d 	bl	800c058 <xTaskGetTickCount>
 80013fe:	4603      	mov	r3, r0
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fd4b 	bl	8000e9c <fromTickToMs>
 8001406:	eeb0 7a40 	vmov.f32	s14, s0
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001410:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001418:	ee07 3a90 	vmov	s15, r3
 800141c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001420:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	dd01      	ble.n	800142e <transmitPackage+0xaa>
    		return false;
 800142a:	2300      	movs	r3, #0
 800142c:	e010      	b.n	8001450 <transmitPackage+0xcc>
    	}
    	osDelay(DELAY_UART_TIMEOUT);
 800142e:	2032      	movs	r0, #50	; 0x32
 8001430:	f009 f9ae 	bl	800a790 <osDelay>
    while (!bus->packageTransmitted && !isrMode) {
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	7a5b      	ldrb	r3, [r3, #9]
 8001438:	f083 0301 	eor.w	r3, r3, #1
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <transmitPackage+0xca>
 8001442:	78fb      	ldrb	r3, [r7, #3]
 8001444:	f083 0301 	eor.w	r3, r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1d5      	bne.n	80013fa <transmitPackage+0x76>
    }
    return true;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <transmitAndReceive>:
	}
	return true;
}

bool transmitAndReceive(struct uartBus_s *bus, bool isrMode)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	70fb      	strb	r3, [r7, #3]
	bus->packageReceived = false;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	721a      	strb	r2, [r3, #8]
	bus->packageTransmitted = false;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	725a      	strb	r2, [r3, #9]

	HAL_UART_AbortReceive_IT(bus->huart);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	4618      	mov	r0, r3
 8001476:	f007 fe59 	bl	800912c <HAL_UART_AbortReceive_IT>
	HAL_UART_AbortTransmit_IT(bus->huart);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4618      	mov	r0, r3
 8001480:	f007 fde0 	bl	8009044 <HAL_UART_AbortTransmit_IT>
	switch(bus->txrxType) {
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800148a:	2b00      	cmp	r3, #0
 800148c:	d018      	beq.n	80014c0 <transmitAndReceive+0x68>
 800148e:	2b01      	cmp	r3, #1
 8001490:	d12d      	bne.n	80014ee <transmitAndReceive+0x96>
		case TXRX_DMA:
			HAL_UART_Receive_DMA(bus->huart, bus->rxBuffer, bus->rxLength);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6819      	ldr	r1, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	461a      	mov	r2, r3
 80014a4:	f007 fd9e 	bl	8008fe4 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6859      	ldr	r1, [r3, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	461a      	mov	r2, r3
 80014ba:	f007 fd15 	bl	8008ee8 <HAL_UART_Transmit_DMA>
			break;
 80014be:	e018      	b.n	80014f2 <transmitAndReceive+0x9a>
		case TXRX_IT:
			HAL_UART_Receive_IT(bus->huart, bus->rxBuffer, bus->rxLength);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6819      	ldr	r1, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	461a      	mov	r2, r3
 80014d2:	f007 fcd9 	bl	8008e88 <HAL_UART_Receive_IT>
			HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6859      	ldr	r1, [r3, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	461a      	mov	r2, r3
 80014e8:	f007 fc89 	bl	8008dfe <HAL_UART_Transmit_IT>
			break;
 80014ec:	e001      	b.n	80014f2 <transmitAndReceive+0x9a>
		default:
			return false;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e03d      	b.n	800156e <transmitAndReceive+0x116>
	}

	bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 80014f2:	f00a fdb1 	bl	800c058 <xTaskGetTickCount>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fccf 	bl	8000e9c <fromTickToMs>
 80014fe:	eef0 7a40 	vmov.f32	s15, s0
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	edc3 7a05 	vstr	s15, [r3, #20]
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 8001508:	e01c      	b.n	8001544 <transmitAndReceive+0xec>
		if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 800150a:	f00a fda5 	bl	800c058 <xTaskGetTickCount>
 800150e:	4603      	mov	r3, r0
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fcc3 	bl	8000e9c <fromTickToMs>
 8001516:	eeb0 7a40 	vmov.f32	s14, s0
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001520:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	ee07 3a90 	vmov	s15, r3
 800152c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001530:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001538:	dd01      	ble.n	800153e <transmitAndReceive+0xe6>
			return false;
 800153a:	2300      	movs	r3, #0
 800153c:	e017      	b.n	800156e <transmitAndReceive+0x116>
		}
		osDelay(DELAY_UART_TIMEOUT);
 800153e:	2032      	movs	r0, #50	; 0x32
 8001540:	f009 f926 	bl	800a790 <osDelay>
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7a5b      	ldrb	r3, [r3, #9]
 8001548:	f083 0301 	eor.w	r3, r3, #1
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00c      	beq.n	800156c <transmitAndReceive+0x114>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7a1b      	ldrb	r3, [r3, #8]
 8001556:	f083 0301 	eor.w	r3, r3, #1
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <transmitAndReceive+0x114>
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	f083 0301 	eor.w	r3, r3, #1
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1ce      	bne.n	800150a <transmitAndReceive+0xb2>
	}
	return true;
 800156c:	2301      	movs	r3, #1
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <HAL_UART_TxCpltCallback+0x6c>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	429a      	cmp	r2, r3
 8001588:	d103      	bne.n	8001592 <HAL_UART_TxCpltCallback+0x1a>
		uartBus[SHORE_UART].packageTransmitted = true;
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <HAL_UART_TxCpltCallback+0x6c>)
 800158c:	2201      	movs	r2, #1
 800158e:	725a      	strb	r2, [r3, #9]
		return;
 8001590:	e022      	b.n	80015d8 <HAL_UART_TxCpltCallback+0x60>
	}

	struct uartBus_s *bus = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001596:	2300      	movs	r3, #0
 8001598:	73fb      	strb	r3, [r7, #15]
 800159a:	e01a      	b.n	80015d2 <HAL_UART_TxCpltCallback+0x5a>
		if(uartBus[i].huart == huart) {
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	4911      	ldr	r1, [pc, #68]	; (80015e4 <HAL_UART_TxCpltCallback+0x6c>)
 80015a0:	4613      	mov	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	1a9b      	subs	r3, r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	3330      	adds	r3, #48	; 0x30
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d10b      	bne.n	80015cc <HAL_UART_TxCpltCallback+0x54>
			bus = &uartBus[i];
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	4613      	mov	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	1a9b      	subs	r3, r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <HAL_UART_TxCpltCallback+0x6c>)
 80015c0:	4413      	add	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]
			bus->packageTransmitted = true;
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2201      	movs	r2, #1
 80015c8:	725a      	strb	r2, [r3, #9]
			break;
 80015ca:	e005      	b.n	80015d8 <HAL_UART_TxCpltCallback+0x60>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	3301      	adds	r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d9e1      	bls.n	800159c <HAL_UART_TxCpltCallback+0x24>
		}
	}
}
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	200000c8 	.word	0x200000c8

080015e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 80015f0:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <HAL_UART_RxCpltCallback+0x7c>)
 80015f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d102      	bne.n	8001600 <HAL_UART_RxCpltCallback+0x18>
		ShoreReceive();
 80015fa:	f000 f8db 	bl	80017b4 <ShoreReceive>
		return;
 80015fe:	e02d      	b.n	800165c <HAL_UART_RxCpltCallback+0x74>
	}

	struct uartBus_s *bus = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001604:	2300      	movs	r3, #0
 8001606:	73fb      	strb	r3, [r7, #15]
 8001608:	e025      	b.n	8001656 <HAL_UART_RxCpltCallback+0x6e>
		if(uartBus[i].huart == huart) {
 800160a:	7bfa      	ldrb	r2, [r7, #15]
 800160c:	4915      	ldr	r1, [pc, #84]	; (8001664 <HAL_UART_RxCpltCallback+0x7c>)
 800160e:	4613      	mov	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	1a9b      	subs	r3, r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	440b      	add	r3, r1
 8001618:	3330      	adds	r3, #48	; 0x30
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	429a      	cmp	r2, r3
 8001620:	d116      	bne.n	8001650 <HAL_UART_RxCpltCallback+0x68>
			bus = &uartBus[i];
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	4613      	mov	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4a0d      	ldr	r2, [pc, #52]	; (8001664 <HAL_UART_RxCpltCallback+0x7c>)
 800162e:	4413      	add	r3, r2
 8001630:	60bb      	str	r3, [r7, #8]
			bus->packageReceived = true;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2201      	movs	r2, #1
 8001636:	721a      	strb	r2, [r3, #8]
			bus->lastMessage = fromTickToMs(xTaskGetTickCount());
 8001638:	f00a fd0e 	bl	800c058 <xTaskGetTickCount>
 800163c:	4603      	mov	r3, r0
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fc2c 	bl	8000e9c <fromTickToMs>
 8001644:	eef0 7a40 	vmov.f32	s15, s0
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	edc3 7a06 	vstr	s15, [r3, #24]
			break;
 800164e:	e005      	b.n	800165c <HAL_UART_RxCpltCallback+0x74>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	3301      	adds	r3, #1
 8001654:	73fb      	strb	r3, [r7, #15]
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d9d6      	bls.n	800160a <HAL_UART_RxCpltCallback+0x22>
		}
	}
}
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200000c8 	.word	0x200000c8

08001668 <receiveI2cPackageDMA>:

bool receiveI2cPackageDMA (uint8_t I2C, uint16_t addr, uint8_t *buf, uint8_t length)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	603a      	str	r2, [r7, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
 8001676:	460b      	mov	r3, r1
 8001678:	80bb      	strh	r3, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	71bb      	strb	r3, [r7, #6]
	float timeBegin = fromTickToMs(xTaskGetTickCount());
 800167e:	f00a fceb 	bl	800c058 <xTaskGetTickCount>
 8001682:	4603      	mov	r3, r0
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fc09 	bl	8000e9c <fromTickToMs>
 800168a:	ed87 0a03 	vstr	s0, [r7, #12]
	i2c1PackageReceived = false;
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <receiveI2cPackageDMA+0x98>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
	switch(I2C) {
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d12c      	bne.n	80016f4 <receiveI2cPackageDMA+0x8c>
	case DEV_I2C:
		HAL_I2C_Master_Receive_IT(&hi2c1, addr>>1, buf, length);
 800169a:	88bb      	ldrh	r3, [r7, #4]
 800169c:	085b      	lsrs	r3, r3, #1
 800169e:	b299      	uxth	r1, r3
 80016a0:	79bb      	ldrb	r3, [r7, #6]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	4817      	ldr	r0, [pc, #92]	; (8001704 <receiveI2cPackageDMA+0x9c>)
 80016a8:	f004 ff52 	bl	8006550 <HAL_I2C_Master_Receive_IT>
		while (!i2c1PackageReceived) {
 80016ac:	e01a      	b.n	80016e4 <receiveI2cPackageDMA+0x7c>
			if(fromTickToMs(xTaskGetTickCount()) - timeBegin > WAITING_SENSORS) {
 80016ae:	f00a fcd3 	bl	800c058 <xTaskGetTickCount>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fbf1 	bl	8000e9c <fromTickToMs>
 80016ba:	eeb0 7a40 	vmov.f32	s14, s0
 80016be:	edd7 7a03 	vldr	s15, [r7, #12]
 80016c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80016ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d2:	dd04      	ble.n	80016de <receiveI2cPackageDMA+0x76>
				//HAL_I2C_Master_Abort_IT(&hi2c2, addr>>1);
				HAL_I2C_Init(&hi2c1);
 80016d4:	480b      	ldr	r0, [pc, #44]	; (8001704 <receiveI2cPackageDMA+0x9c>)
 80016d6:	f004 fdf7 	bl	80062c8 <HAL_I2C_Init>
				return false;
 80016da:	2300      	movs	r3, #0
 80016dc:	e00b      	b.n	80016f6 <receiveI2cPackageDMA+0x8e>
			}
			osDelay(DELAY_SENSOR_TASK);
 80016de:	200a      	movs	r0, #10
 80016e0:	f009 f856 	bl	800a790 <osDelay>
		while (!i2c1PackageReceived) {
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <receiveI2cPackageDMA+0x98>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	f083 0301 	eor.w	r3, r3, #1
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1dd      	bne.n	80016ae <receiveI2cPackageDMA+0x46>
		}
		break;
 80016f2:	bf00      	nop
	}
	return true;
 80016f4:	2301      	movs	r3, #1
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000173 	.word	0x20000173
 8001704:	20001bd0 	.word	0x20001bd0

08001708 <HAL_I2C_MasterRxCpltCallback>:
	}
}


void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a06      	ldr	r2, [pc, #24]	; (800172c <HAL_I2C_MasterRxCpltCallback+0x24>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d102      	bne.n	800171e <HAL_I2C_MasterRxCpltCallback+0x16>
		i2c1PackageReceived = true;
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <HAL_I2C_MasterRxCpltCallback+0x28>)
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
	}
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20001bd0 	.word	0x20001bd0
 8001730:	20000173 	.word	0x20000173

08001734 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1) {
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a06      	ldr	r2, [pc, #24]	; (8001758 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d102      	bne.n	800174a <HAL_I2C_MasterTxCpltCallback+0x16>
		i2c1PackageTransmit = true;
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <HAL_I2C_MasterTxCpltCallback+0x28>)
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
	}
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20001bd0 	.word	0x20001bd0
 800175c:	20000172 	.word	0x20000172

08001760 <SensorsResponseUpdate>:


void SensorsResponseUpdate(uint8_t *buf, uint8_t Sensor_id)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	70fb      	strb	r3, [r7, #3]
	switch(Sensor_id) {
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d11a      	bne.n	80017a8 <SensorsResponseUpdate+0x48>
	case DEV_I2C:
		if(IsChecksumm8bCorrect(buf, PRESSURE_SENSOR_SIZE)) {
 8001772:	210a      	movs	r1, #10
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff fca1 	bl	80010bc <IsChecksumm8bCorrect>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d012      	beq.n	80017a6 <SensorsResponseUpdate+0x46>
			struct pressureResponse_s res;
			memcpy((void*)&res, (void*)buf, DEVICES_RESPONSE_LENGTH);
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	6810      	ldr	r0, [r2, #0]
 8001788:	6851      	ldr	r1, [r2, #4]
 800178a:	c303      	stmia	r3!, {r0, r1}
 800178c:	8912      	ldrh	r2, [r2, #8]
 800178e:	801a      	strh	r2, [r3, #0]
			if(res.code == 0xAA) {
 8001790:	7b3b      	ldrb	r3, [r7, #12]
 8001792:	2baa      	cmp	r3, #170	; 0xaa
 8001794:	d107      	bne.n	80017a6 <SensorsResponseUpdate+0x46>
				rSensors.pressure = res.value;//(9.124*res.value - 3.177) - rSensors.pressure_null;
 8001796:	f8d7 300d 	ldr.w	r3, [r7, #13]
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <SensorsResponseUpdate+0x50>)
 800179c:	6553      	str	r3, [r2, #84]	; 0x54
				rSensors.velocity_pressure = res.v_value;
 800179e:	f8d7 3011 	ldr.w	r3, [r7, #17]
 80017a2:	4a03      	ldr	r2, [pc, #12]	; (80017b0 <SensorsResponseUpdate+0x50>)
 80017a4:	65d3      	str	r3, [r2, #92]	; 0x5c
			}
		}
		break;
 80017a6:	bf00      	nop
	}
}
 80017a8:	bf00      	nop
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20001660 	.word	0x20001660

080017b4 <ShoreReceive>:

void ShoreReceive()
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af02      	add	r7, sp, #8
	static portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 80017ba:	4b39      	ldr	r3, [pc, #228]	; (80018a0 <ShoreReceive+0xec>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
	if(counterRx == 0) {
 80017c0:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <ShoreReceive+0xf0>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d142      	bne.n	800184e <ShoreReceive+0x9a>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 80017c8:	2300      	movs	r3, #0
 80017ca:	71fb      	strb	r3, [r7, #7]
 80017cc:	e03b      	b.n	8001846 <ShoreReceive+0x92>
			if(uartBus[SHORE_UART].rxBuffer[0] == ShoreCodes[i]) {
 80017ce:	4b36      	ldr	r3, [pc, #216]	; (80018a8 <ShoreReceive+0xf4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	781a      	ldrb	r2, [r3, #0]
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	4935      	ldr	r1, [pc, #212]	; (80018ac <ShoreReceive+0xf8>)
 80017d8:	5ccb      	ldrb	r3, [r1, r3]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d125      	bne.n	800182a <ShoreReceive+0x76>
				counterRx = 1;
 80017de:	4b31      	ldr	r3, [pc, #196]	; (80018a4 <ShoreReceive+0xf0>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	801a      	strh	r2, [r3, #0]
				uartBus[SHORE_UART].rxLength = ShoreLength[i]-1;
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	4a32      	ldr	r2, [pc, #200]	; (80018b0 <ShoreReceive+0xfc>)
 80017e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	3b01      	subs	r3, #1
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4b2d      	ldr	r3, [pc, #180]	; (80018a8 <ShoreReceive+0xf4>)
 80017f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer+1, uartBus[SHORE_UART].rxLength);
 80017f8:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <ShoreReceive+0xf4>)
 80017fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80017fc:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <ShoreReceive+0xf4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	4a29      	ldr	r2, [pc, #164]	; (80018a8 <ShoreReceive+0xf4>)
 8001804:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8001808:	b292      	uxth	r2, r2
 800180a:	4619      	mov	r1, r3
 800180c:	f007 fb3c 	bl	8008e88 <HAL_UART_Receive_IT>
				xTimerStartFromISR(UARTTimer, &xHigherPriorityTaskWoken);
 8001810:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <ShoreReceive+0x100>)
 8001812:	681c      	ldr	r4, [r3, #0]
 8001814:	f00a fc30 	bl	800c078 <xTaskGetTickCountFromISR>
 8001818:	4602      	mov	r2, r0
 800181a:	2300      	movs	r3, #0
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <ShoreReceive+0xec>)
 8001820:	2106      	movs	r1, #6
 8001822:	4620      	mov	r0, r4
 8001824:	f00b fa2a 	bl	800cc7c <xTimerGenericCommand>
				break;
 8001828:	e026      	b.n	8001878 <ShoreReceive+0xc4>
			}

			if(i == SHORE_REQUEST_MODES_NUMBER-1) {
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d107      	bne.n	8001840 <ShoreReceive+0x8c>
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8001830:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <ShoreReceive+0xf4>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	4a1c      	ldr	r2, [pc, #112]	; (80018a8 <ShoreReceive+0xf4>)
 8001836:	6811      	ldr	r1, [r2, #0]
 8001838:	2201      	movs	r2, #1
 800183a:	4618      	mov	r0, r3
 800183c:	f007 fb24 	bl	8008e88 <HAL_UART_Receive_IT>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	3301      	adds	r3, #1
 8001844:	71fb      	strb	r3, [r7, #7]
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d9c0      	bls.n	80017ce <ShoreReceive+0x1a>
 800184c:	e014      	b.n	8001878 <ShoreReceive+0xc4>
			}
		}
	}
	else if(counterRx == 1) {
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <ShoreReceive+0xf0>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d110      	bne.n	8001878 <ShoreReceive+0xc4>
		uartBus[SHORE_UART].packageReceived = true;
 8001856:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <ShoreReceive+0xf4>)
 8001858:	2201      	movs	r2, #1
 800185a:	721a      	strb	r2, [r3, #8]
		uartBus[SHORE_UART].lastMessage = fromTickToMs(xTaskGetTickCount());
 800185c:	f00a fbfc 	bl	800c058 <xTaskGetTickCount>
 8001860:	4603      	mov	r3, r0
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fb1a 	bl	8000e9c <fromTickToMs>
 8001868:	eef0 7a40 	vmov.f32	s15, s0
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <ShoreReceive+0xf4>)
 800186e:	edc3 7a06 	vstr	s15, [r3, #24]
		counterRx = 2;
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <ShoreReceive+0xf0>)
 8001874:	2202      	movs	r2, #2
 8001876:	801a      	strh	r2, [r3, #0]
	}

	if (xHigherPriorityTaskWoken == pdTRUE) {
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <ShoreReceive+0xec>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d10a      	bne.n	8001896 <ShoreReceive+0xe2>
		xHigherPriorityTaskWoken = pdFALSE;
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <ShoreReceive+0xec>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
		taskYIELD();
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <ShoreReceive+0x104>)
 8001888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	f3bf 8f4f 	dsb	sy
 8001892:	f3bf 8f6f 	isb	sy
	}
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bd90      	pop	{r4, r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000174 	.word	0x20000174
 80018a4:	20000170 	.word	0x20000170
 80018a8:	200000c8 	.word	0x200000c8
 80018ac:	0800e860 	.word	0x0800e860
 80018b0:	0800e858 	.word	0x0800e858
 80018b4:	20000178 	.word	0x20000178
 80018b8:	e000ed04 	.word	0xe000ed04

080018bc <DevicesRequestUpdate>:

void DevicesRequestUpdate(uint8_t *buf, uint8_t dev)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	70fb      	strb	r3, [r7, #3]
	struct devicesRequest_s req;

    req.AA1 = 0xAA;
 80018c8:	23aa      	movs	r3, #170	; 0xaa
 80018ca:	723b      	strb	r3, [r7, #8]
    req.AA2 = 0xAA;
 80018cc:	23aa      	movs	r3, #170	; 0xaa
 80018ce:	727b      	strb	r3, [r7, #9]
    req.address = rDevice[dev].address;
 80018d0:	78fa      	ldrb	r2, [r7, #3]
 80018d2:	491e      	ldr	r1, [pc, #120]	; (800194c <DevicesRequestUpdate+0x90>)
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	440b      	add	r3, r1
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	72bb      	strb	r3, [r7, #10]
    req.setting = rDevice[dev].settings;
 80018e2:	78fa      	ldrb	r2, [r7, #3]
 80018e4:	4919      	ldr	r1, [pc, #100]	; (800194c <DevicesRequestUpdate+0x90>)
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	440b      	add	r3, r1
 80018f0:	3301      	adds	r3, #1
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	72fb      	strb	r3, [r7, #11]
    req.velocity1 = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	733b      	strb	r3, [r7, #12]
    req.velocity2 = rDevice[dev].force;
 80018fa:	78fa      	ldrb	r2, [r7, #3]
 80018fc:	4913      	ldr	r1, [pc, #76]	; (800194c <DevicesRequestUpdate+0x90>)
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	440b      	add	r3, r1
 8001908:	3302      	adds	r3, #2
 800190a:	f993 3000 	ldrsb.w	r3, [r3]
 800190e:	737b      	strb	r3, [r7, #13]

    if(dev == GRAB) {
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d107      	bne.n	8001926 <DevicesRequestUpdate+0x6a>
    	req.velocity1 = rDevice[GRAB_ROTATION].force;
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <DevicesRequestUpdate+0x90>)
 8001918:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800191c:	733b      	strb	r3, [r7, #12]
    	req.velocity2 = rDevice[GRAB].force;
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <DevicesRequestUpdate+0x90>)
 8001920:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001924:	737b      	strb	r3, [r7, #13]
//    		rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_NULL;
//    	}
//    }


    memcpy((void*)buf, (void*)&req, DEVICES_REQUEST_LENGTH);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	461a      	mov	r2, r3
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	6818      	ldr	r0, [r3, #0]
 8001930:	6010      	str	r0, [r2, #0]
 8001932:	8899      	ldrh	r1, [r3, #4]
 8001934:	799b      	ldrb	r3, [r3, #6]
 8001936:	8091      	strh	r1, [r2, #4]
 8001938:	7193      	strb	r3, [r2, #6]
    AddChecksumm8b(buf, DEVICES_REQUEST_LENGTH);
 800193a:	2107      	movs	r1, #7
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff fbea 	bl	8001116 <AddChecksumm8b>
}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200016e4 	.word	0x200016e4

08001950 <DevicesResponseUpdate>:

void DevicesResponseUpdate(uint8_t *buf, uint8_t dev)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	70fb      	strb	r3, [r7, #3]
    if(IsChecksumm8bCorrect(buf, DEVICES_RESPONSE_LENGTH)) {
 800195c:	210a      	movs	r1, #10
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff fbac 	bl	80010bc <IsChecksumm8bCorrect>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d04a      	beq.n	8001a00 <DevicesResponseUpdate+0xb0>
    	struct devicesResponse_s res;
    	memcpy((void*)&res, (void*)buf, DEVICES_RESPONSE_LENGTH);
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	6810      	ldr	r0, [r2, #0]
 8001972:	6851      	ldr	r1, [r2, #4]
 8001974:	c303      	stmia	r3!, {r0, r1}
 8001976:	8912      	ldrh	r2, [r2, #8]
 8001978:	801a      	strh	r2, [r3, #0]

        rDevice[dev].current = res.current1;
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8001980:	b298      	uxth	r0, r3
 8001982:	4924      	ldr	r1, [pc, #144]	; (8001a14 <DevicesResponseUpdate+0xc4>)
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	440b      	add	r3, r1
 800198e:	3304      	adds	r3, #4
 8001990:	4602      	mov	r2, r0
 8001992:	801a      	strh	r2, [r3, #0]
        rDevice[dev].velocity1 = res.velocity1;
 8001994:	78fa      	ldrb	r2, [r7, #3]
 8001996:	7cf8      	ldrb	r0, [r7, #19]
 8001998:	491e      	ldr	r1, [pc, #120]	; (8001a14 <DevicesResponseUpdate+0xc4>)
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	440b      	add	r3, r1
 80019a4:	3307      	adds	r3, #7
 80019a6:	4602      	mov	r2, r0
 80019a8:	701a      	strb	r2, [r3, #0]
        rDevice[dev].velocity2 = res.velocity2;
 80019aa:	78fa      	ldrb	r2, [r7, #3]
 80019ac:	7d38      	ldrb	r0, [r7, #20]
 80019ae:	4919      	ldr	r1, [pc, #100]	; (8001a14 <DevicesResponseUpdate+0xc4>)
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	440b      	add	r3, r1
 80019ba:	3308      	adds	r3, #8
 80019bc:	4602      	mov	r2, r0
 80019be:	701a      	strb	r2, [r3, #0]

        if(rDevice[DEV2].velocity1 == 0x00 && dev == DEV2) {
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <DevicesResponseUpdate+0xc4>)
 80019c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <DevicesResponseUpdate+0x88>
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d103      	bne.n	80019d8 <DevicesResponseUpdate+0x88>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_FORWARD_SAT;
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <DevicesResponseUpdate+0xc8>)
 80019d2:	2203      	movs	r2, #3
 80019d4:	701a      	strb	r2, [r3, #0]
 80019d6:	e00a      	b.n	80019ee <DevicesResponseUpdate+0x9e>
        }
        else if(rDevice[DEV2].velocity2 == 0x00 && dev == DEV2) {
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <DevicesResponseUpdate+0xc4>)
 80019da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d105      	bne.n	80019ee <DevicesResponseUpdate+0x9e>
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	2b05      	cmp	r3, #5
 80019e6:	d102      	bne.n	80019ee <DevicesResponseUpdate+0x9e>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_BACKWARD_SAT;
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <DevicesResponseUpdate+0xc8>)
 80019ea:	2204      	movs	r2, #4
 80019ec:	701a      	strb	r2, [r3, #0]
        }
        // TODO make errors work pls
        //writeBit(&(robot->device[dev].errors), res.errors, AGAR);

        ++uartBus[DEVICES_UART].successRxCounter;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <DevicesResponseUpdate+0xcc>)
 80019f0:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80019f4:	3301      	adds	r3, #1
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <DevicesResponseUpdate+0xcc>)
 80019fa:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
    }
    else {
    	++uartBus[DEVICES_UART].brokenRxCounter;
    }
}
 80019fe:	e004      	b.n	8001a0a <DevicesResponseUpdate+0xba>
    	++uartBus[DEVICES_UART].brokenRxCounter;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <DevicesResponseUpdate+0xcc>)
 8001a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a04:	3301      	adds	r3, #1
 8001a06:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <DevicesResponseUpdate+0xcc>)
 8001a08:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200016e4 	.word	0x200016e4
 8001a18:	20001720 	.word	0x20001720
 8001a1c:	200000c8 	.word	0x200000c8

08001a20 <ShoreRequest>:

void ShoreRequest(uint8_t *requestBuf)
{
 8001a20:	b5b0      	push	{r4, r5, r7, lr}
 8001a22:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001a2c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8001a30:	6018      	str	r0, [r3, #0]
    if (IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_LENGTH)) {
 8001a32:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001a36:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8001a3a:	211e      	movs	r1, #30
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	f7ff fb04 	bl	800104a <IsCrc16ChecksummCorrect>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 8174 	beq.w	8001d32 <ShoreRequest+0x312>
    	struct shoreRequest_s req;
    	memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_LENGTH);
 8001a4a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001a4e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f507 740d 	add.w	r4, r7, #564	; 0x234
 8001a58:	461d      	mov	r5, r3
 8001a5a:	6828      	ldr	r0, [r5, #0]
 8001a5c:	6869      	ldr	r1, [r5, #4]
 8001a5e:	68aa      	ldr	r2, [r5, #8]
 8001a60:	68eb      	ldr	r3, [r5, #12]
 8001a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a64:	6928      	ldr	r0, [r5, #16]
 8001a66:	6969      	ldr	r1, [r5, #20]
 8001a68:	69aa      	ldr	r2, [r5, #24]
 8001a6a:	c407      	stmia	r4!, {r0, r1, r2}
 8001a6c:	8bab      	ldrh	r3, [r5, #28]
 8001a6e:	8023      	strh	r3, [r4, #0]

    	uint8_t tempCameraNum = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257

        rJoySpeed.march = req.march;
 8001a76:	f9b7 3236 	ldrsh.w	r3, [r7, #566]	; 0x236
 8001a7a:	ee07 3a90 	vmov	s15, r3
 8001a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a82:	4bb1      	ldr	r3, [pc, #708]	; (8001d48 <ShoreRequest+0x328>)
 8001a84:	edc3 7a00 	vstr	s15, [r3]
        rJoySpeed.lag = req.lag;
 8001a88:	f9b7 3238 	ldrsh.w	r3, [r7, #568]	; 0x238
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a94:	4bac      	ldr	r3, [pc, #688]	; (8001d48 <ShoreRequest+0x328>)
 8001a96:	edc3 7a01 	vstr	s15, [r3, #4]
        rJoySpeed.depth = req.depth;
 8001a9a:	f9b7 323a 	ldrsh.w	r3, [r7, #570]	; 0x23a
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa6:	4ba8      	ldr	r3, [pc, #672]	; (8001d48 <ShoreRequest+0x328>)
 8001aa8:	edc3 7a02 	vstr	s15, [r3, #8]
        rJoySpeed.roll = req.roll;
 8001aac:	f9b7 323c 	ldrsh.w	r3, [r7, #572]	; 0x23c
 8001ab0:	ee07 3a90 	vmov	s15, r3
 8001ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab8:	4ba3      	ldr	r3, [pc, #652]	; (8001d48 <ShoreRequest+0x328>)
 8001aba:	edc3 7a03 	vstr	s15, [r3, #12]
        rJoySpeed.pitch = req.pitch;
 8001abe:	f9b7 323e 	ldrsh.w	r3, [r7, #574]	; 0x23e
 8001ac2:	ee07 3a90 	vmov	s15, r3
 8001ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aca:	4b9f      	ldr	r3, [pc, #636]	; (8001d48 <ShoreRequest+0x328>)
 8001acc:	edc3 7a04 	vstr	s15, [r3, #16]
        rJoySpeed.yaw = req.yaw;
 8001ad0:	f9b7 3240 	ldrsh.w	r3, [r7, #576]	; 0x240
 8001ad4:	ee07 3a90 	vmov	s15, r3
 8001ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001adc:	4b9a      	ldr	r3, [pc, #616]	; (8001d48 <ShoreRequest+0x328>)
 8001ade:	edc3 7a05 	vstr	s15, [r3, #20]

        rDevice[GRAB].force = req.grab;
 8001ae2:	f997 2243 	ldrsb.w	r2, [r7, #579]	; 0x243
 8001ae6:	4b99      	ldr	r3, [pc, #612]	; (8001d4c <ShoreRequest+0x32c>)
 8001ae8:	731a      	strb	r2, [r3, #12]
        if (rDevice[GRAB].force < -127) {
 8001aea:	4b98      	ldr	r3, [pc, #608]	; (8001d4c <ShoreRequest+0x32c>)
 8001aec:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001af0:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001af4:	d102      	bne.n	8001afc <ShoreRequest+0xdc>
            rDevice[GRAB].force = -127;
 8001af6:	4b95      	ldr	r3, [pc, #596]	; (8001d4c <ShoreRequest+0x32c>)
 8001af8:	2281      	movs	r2, #129	; 0x81
 8001afa:	731a      	strb	r2, [r3, #12]
        }
        rDevice[TILT].force = req.tilt;
 8001afc:	f997 2244 	ldrsb.w	r2, [r7, #580]	; 0x244
 8001b00:	4b92      	ldr	r3, [pc, #584]	; (8001d4c <ShoreRequest+0x32c>)
 8001b02:	f883 2020 	strb.w	r2, [r3, #32]
        if (rDevice[TILT].force < -127) {
 8001b06:	4b91      	ldr	r3, [pc, #580]	; (8001d4c <ShoreRequest+0x32c>)
 8001b08:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8001b0c:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001b10:	d103      	bne.n	8001b1a <ShoreRequest+0xfa>
        	rDevice[TILT].force = -127;
 8001b12:	4b8e      	ldr	r3, [pc, #568]	; (8001d4c <ShoreRequest+0x32c>)
 8001b14:	2281      	movs	r2, #129	; 0x81
 8001b16:	f883 2020 	strb.w	r2, [r3, #32]
        }
        rDevice[GRAB_ROTATION].force  = req.grab_rotate;
 8001b1a:	f997 2245 	ldrsb.w	r2, [r7, #581]	; 0x245
 8001b1e:	4b8b      	ldr	r3, [pc, #556]	; (8001d4c <ShoreRequest+0x32c>)
 8001b20:	759a      	strb	r2, [r3, #22]
        if (rDevice[GRAB_ROTATION].force < -127) {
 8001b22:	4b8a      	ldr	r3, [pc, #552]	; (8001d4c <ShoreRequest+0x32c>)
 8001b24:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001b28:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001b2c:	d102      	bne.n	8001b34 <ShoreRequest+0x114>
            rDevice[GRAB_ROTATION].force = -127;
 8001b2e:	4b87      	ldr	r3, [pc, #540]	; (8001d4c <ShoreRequest+0x32c>)
 8001b30:	2281      	movs	r2, #129	; 0x81
 8001b32:	759a      	strb	r2, [r3, #22]
        }

        rDevice[DEV1].force = req.dev1;
 8001b34:	f997 2246 	ldrsb.w	r2, [r7, #582]	; 0x246
 8001b38:	4b84      	ldr	r3, [pc, #528]	; (8001d4c <ShoreRequest+0x32c>)
 8001b3a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        rDevice[DEV2].force = req.dev2;
 8001b3e:	f997 2247 	ldrsb.w	r2, [r7, #583]	; 0x247
 8001b42:	4b82      	ldr	r3, [pc, #520]	; (8001d4c <ShoreRequest+0x32c>)
 8001b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        rState.lag_error = (float) req.lag_error;
 8001b48:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001b4c:	ee07 3a90 	vmov	s15, r3
 8001b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b54:	4b7e      	ldr	r3, [pc, #504]	; (8001d50 <ShoreRequest+0x330>)
 8001b56:	edc3 7a02 	vstr	s15, [r3, #8]

        rSensors.resetIMU = PickBit(req.stabilize_flags, SHORE_STABILIZE_IMU_BIT);
 8001b5a:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001b5e:	2106      	movs	r1, #6
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fba5 	bl	80012b0 <PickBit>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b7a      	ldr	r3, [pc, #488]	; (8001d54 <ShoreRequest+0x334>)
 8001b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(PickBit(req.stabilize_flags, SHORE_STABILIZE_SAVE_BIT)) {
 8001b70:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001b74:	2107      	movs	r1, #7
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fb9a 	bl	80012b0 <PickBit>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <ShoreRequest+0x176>
        	struct flashConfiguration_s config;
        	flashFillStructure(&config);
 8001b82:	f107 0308 	add.w	r3, r7, #8
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 ff26 	bl	80029d8 <flashFillStructure>
        	flashWriteSettings(&config);
 8001b8c:	f107 0308 	add.w	r3, r7, #8
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 fee3 	bl	800295c <flashWriteSettings>
        }

        tempCameraNum = req.cameras;
 8001b96:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
 8001b9a:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257

        uint8_t old_reset = rComputer.reset;
 8001b9e:	4b6e      	ldr	r3, [pc, #440]	; (8001d58 <ShoreRequest+0x338>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256
        if(old_reset != req.pc_reset) {
 8001ba6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8001baa:	f897 2256 	ldrb.w	r2, [r7, #598]	; 0x256
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d002      	beq.n	8001bb8 <ShoreRequest+0x198>
            if(req.pc_reset == PC_ON_CODE) {
 8001bb2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8001bb6:	2baa      	cmp	r3, #170	; 0xaa
            else if(req.pc_reset == PC_OFF_CODE) {
           // 	HAL_GPIO_WritePin(PC_CONTROL1_GPIO_Port, PC_CONTROL1_Pin, GPIO_PIN_SET); // RESET
           //	HAL_GPIO_WritePin(PC_CONTROL2_GPIO_Port, PC_CONTROL2_Pin, GPIO_PIN_SET); // ONOFF
            }
        }
        rComputer.reset = req.pc_reset;
 8001bb8:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 8001bbc:	4b66      	ldr	r3, [pc, #408]	; (8001d58 <ShoreRequest+0x338>)
 8001bbe:	701a      	strb	r2, [r3, #0]

        bool wasEnabled = rStabConstants[STAB_YAW].enable;
 8001bc0:	4b66      	ldr	r3, [pc, #408]	; (8001d5c <ShoreRequest+0x33c>)
 8001bc2:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001bc6:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_YAW].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_YAW_BIT);
 8001bca:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001bce:	2103      	movs	r1, #3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fb6d 	bl	80012b0 <PickBit>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b60      	ldr	r3, [pc, #384]	; (8001d5c <ShoreRequest+0x33c>)
 8001bdc:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
        if(wasEnabled == false && rStabConstants[STAB_YAW].enable == true) {
 8001be0:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001be4:	f083 0301 	eor.w	r3, r3, #1
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d007      	beq.n	8001bfe <ShoreRequest+0x1de>
 8001bee:	4b5b      	ldr	r3, [pc, #364]	; (8001d5c <ShoreRequest+0x33c>)
 8001bf0:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <ShoreRequest+0x1de>
        	stabilizationStart(STAB_YAW);
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f001 fd9d 	bl	8003738 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_ROLL].enable;
 8001bfe:	4b57      	ldr	r3, [pc, #348]	; (8001d5c <ShoreRequest+0x33c>)
 8001c00:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001c04:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_ROLL].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_ROLL_BIT);
 8001c08:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fb4e 	bl	80012b0 <PickBit>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b50      	ldr	r3, [pc, #320]	; (8001d5c <ShoreRequest+0x33c>)
 8001c1a:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
        if(wasEnabled == false && rStabConstants[STAB_ROLL].enable == true) {
 8001c1e:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001c22:	f083 0301 	eor.w	r3, r3, #1
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d007      	beq.n	8001c3c <ShoreRequest+0x21c>
 8001c2c:	4b4b      	ldr	r3, [pc, #300]	; (8001d5c <ShoreRequest+0x33c>)
 8001c2e:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <ShoreRequest+0x21c>
        	stabilizationStart(STAB_ROLL);
 8001c36:	2004      	movs	r0, #4
 8001c38:	f001 fd7e 	bl	8003738 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_PITCH].enable;
 8001c3c:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <ShoreRequest+0x33c>)
 8001c3e:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8001c42:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_PITCH].enable = true; //PickBit(req.stabilize_flags, SHORE_STABILIZE_PITCH_BIT);
 8001c46:	4b45      	ldr	r3, [pc, #276]	; (8001d5c <ShoreRequest+0x33c>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
        if(wasEnabled == false && rStabConstants[STAB_PITCH].enable == true) {
 8001c4e:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001c52:	f083 0301 	eor.w	r3, r3, #1
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d007      	beq.n	8001c6c <ShoreRequest+0x24c>
 8001c5c:	4b3f      	ldr	r3, [pc, #252]	; (8001d5c <ShoreRequest+0x33c>)
 8001c5e:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <ShoreRequest+0x24c>
        	stabilizationStart(STAB_PITCH);
 8001c66:	2005      	movs	r0, #5
 8001c68:	f001 fd66 	bl	8003738 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_DEPTH].enable;
 8001c6c:	4b3b      	ldr	r3, [pc, #236]	; (8001d5c <ShoreRequest+0x33c>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_DEPTH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_DEPTH_BIT);
 8001c74:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fb18 	bl	80012b0 <PickBit>
 8001c80:	4603      	mov	r3, r0
 8001c82:	461a      	mov	r2, r3
 8001c84:	4b35      	ldr	r3, [pc, #212]	; (8001d5c <ShoreRequest+0x33c>)
 8001c86:	701a      	strb	r2, [r3, #0]
        if(wasEnabled == false && rStabConstants[STAB_DEPTH].enable == true) {
 8001c88:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001c8c:	f083 0301 	eor.w	r3, r3, #1
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <ShoreRequest+0x284>
 8001c96:	4b31      	ldr	r3, [pc, #196]	; (8001d5c <ShoreRequest+0x33c>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <ShoreRequest+0x284>
        	stabilizationStart(STAB_DEPTH);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f001 fd4a 	bl	8003738 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_LAG].enable;
 8001ca4:	4b2d      	ldr	r3, [pc, #180]	; (8001d5c <ShoreRequest+0x33c>)
 8001ca6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001caa:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_LAG].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_LAG_BIT);
 8001cae:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001cb2:	2104      	movs	r1, #4
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fafb 	bl	80012b0 <PickBit>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <ShoreRequest+0x33c>)
 8001cc0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        if(wasEnabled == false && rStabConstants[STAB_LAG].enable == true) {
 8001cc4:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001cc8:	f083 0301 	eor.w	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <ShoreRequest+0x2c2>
 8001cd2:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <ShoreRequest+0x33c>)
 8001cd4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <ShoreRequest+0x2c2>
        	stabilizationStart(STAB_LAG);
 8001cdc:	2002      	movs	r0, #2
 8001cde:	f001 fd2b 	bl	8003738 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_MARCH].enable;
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <ShoreRequest+0x33c>)
 8001ce4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001ce8:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_MARCH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_MARCH_BIT);
 8001cec:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001cf0:	2105      	movs	r1, #5
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fadc 	bl	80012b0 <PickBit>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <ShoreRequest+0x33c>)
 8001cfe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        if(wasEnabled == false && rStabConstants[STAB_MARCH].enable == true) {
 8001d02:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001d06:	f083 0301 	eor.w	r3, r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <ShoreRequest+0x300>
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <ShoreRequest+0x33c>)
 8001d12:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <ShoreRequest+0x300>
        	stabilizationStart(STAB_MARCH);
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f001 fd0c 	bl	8003738 <stabilizationStart>
//        		break;
//        	}
//        }

        // TODO tuuuupoooo
        formThrustVectors();
 8001d20:	f002 fac2 	bl	80042a8 <formThrustVectors>

        ++uartBus[SHORE_UART].successRxCounter;
 8001d24:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <ShoreRequest+0x340>)
 8001d26:	895b      	ldrh	r3, [r3, #10]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <ShoreRequest+0x340>)
 8001d2e:	815a      	strh	r2, [r3, #10]

        	brokenRxTolerance = 0;
        }
        */
    }
}
 8001d30:	e004      	b.n	8001d3c <ShoreRequest+0x31c>
    	++uartBus[SHORE_UART].brokenRxCounter;
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <ShoreRequest+0x340>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	3301      	adds	r3, #1
 8001d38:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <ShoreRequest+0x340>)
 8001d3a:	60d3      	str	r3, [r2, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bdb0      	pop	{r4, r5, r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200016cc 	.word	0x200016cc
 8001d4c:	200016e4 	.word	0x200016e4
 8001d50:	20001594 	.word	0x20001594
 8001d54:	20001660 	.word	0x20001660
 8001d58:	200016c8 	.word	0x200016c8
 8001d5c:	20001724 	.word	0x20001724
 8001d60:	200000c8 	.word	0x200000c8

08001d64 <ShoreConfigRequest>:

void ShoreConfigRequest(uint8_t *requestBuf)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b098      	sub	sp, #96	; 0x60
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, REQUEST_CONFIG_LENGTH)) {
 8001d6c:	2154      	movs	r1, #84	; 0x54
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff f96b 	bl	800104a <IsCrc16ChecksummCorrect>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 8158 	beq.w	800202c <ShoreConfigRequest+0x2c8>
		struct shoreConfigRequest_s req;
		memcpy((void*)&req, (void*)requestBuf, REQUEST_CONFIG_LENGTH);
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	f107 0308 	add.w	r3, r7, #8
 8001d82:	4611      	mov	r1, r2
 8001d84:	2254      	movs	r2, #84	; 0x54
 8001d86:	4618      	mov	r0, r3
 8001d88:	f00b ff04 	bl	800db94 <memcpy>

		rJoySpeed.march = req.march;
 8001d8c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d90:	ee07 3a90 	vmov	s15, r3
 8001d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d98:	4ba9      	ldr	r3, [pc, #676]	; (8002040 <ShoreConfigRequest+0x2dc>)
 8001d9a:	edc3 7a00 	vstr	s15, [r3]
		rJoySpeed.lag = req.lag;
 8001d9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001daa:	4ba5      	ldr	r3, [pc, #660]	; (8002040 <ShoreConfigRequest+0x2dc>)
 8001dac:	edc3 7a01 	vstr	s15, [r3, #4]
		rJoySpeed.depth = req.depth;
 8001db0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbc:	4ba0      	ldr	r3, [pc, #640]	; (8002040 <ShoreConfigRequest+0x2dc>)
 8001dbe:	edc3 7a02 	vstr	s15, [r3, #8]
		rJoySpeed.roll = req.roll;
 8001dc2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001dc6:	ee07 3a90 	vmov	s15, r3
 8001dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dce:	4b9c      	ldr	r3, [pc, #624]	; (8002040 <ShoreConfigRequest+0x2dc>)
 8001dd0:	edc3 7a03 	vstr	s15, [r3, #12]
		rJoySpeed.pitch = req.pitch;
 8001dd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001dd8:	ee07 3a90 	vmov	s15, r3
 8001ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de0:	4b97      	ldr	r3, [pc, #604]	; (8002040 <ShoreConfigRequest+0x2dc>)
 8001de2:	edc3 7a04 	vstr	s15, [r3, #16]
		rJoySpeed.yaw = req.yaw;
 8001de6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001dea:	ee07 3a90 	vmov	s15, r3
 8001dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df2:	4b93      	ldr	r3, [pc, #588]	; (8002040 <ShoreConfigRequest+0x2dc>)
 8001df4:	edc3 7a05 	vstr	s15, [r3, #20]

		rStabConstants[req.contour].pJoyUnitCast = req.pJoyUnitCast;
 8001df8:	7a7b      	ldrb	r3, [r7, #9]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f8d7 2016 	ldr.w	r2, [r7, #22]
 8001e00:	4613      	mov	r3, r2
 8001e02:	461a      	mov	r2, r3
 8001e04:	498f      	ldr	r1, [pc, #572]	; (8002044 <ShoreConfigRequest+0x2e0>)
 8001e06:	4603      	mov	r3, r0
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4403      	add	r3, r0
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	440b      	add	r3, r1
 8001e10:	3304      	adds	r3, #4
 8001e12:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pSpeedDyn = req.pSpeedDyn;
 8001e14:	7a7b      	ldrb	r3, [r7, #9]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f8d7 201a 	ldr.w	r2, [r7, #26]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4988      	ldr	r1, [pc, #544]	; (8002044 <ShoreConfigRequest+0x2e0>)
 8001e22:	4603      	mov	r3, r0
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4403      	add	r3, r0
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	440b      	add	r3, r1
 8001e2c:	3308      	adds	r3, #8
 8001e2e:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pErrGain = req.pErrGain;
 8001e30:	7a7b      	ldrb	r3, [r7, #9]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f8d7 201e 	ldr.w	r2, [r7, #30]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4981      	ldr	r1, [pc, #516]	; (8002044 <ShoreConfigRequest+0x2e0>)
 8001e3e:	4603      	mov	r3, r0
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4403      	add	r3, r0
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	440b      	add	r3, r1
 8001e48:	330c      	adds	r3, #12
 8001e4a:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].aFilter[POS_FILTER].T = req.posFilterT;
 8001e4c:	7a7b      	ldrb	r3, [r7, #9]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f8d7 2022 	ldr.w	r2, [r7, #34]	; 0x22
 8001e54:	4613      	mov	r3, r2
 8001e56:	461a      	mov	r2, r3
 8001e58:	497a      	ldr	r1, [pc, #488]	; (8002044 <ShoreConfigRequest+0x2e0>)
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4403      	add	r3, r0
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	440b      	add	r3, r1
 8001e64:	3310      	adds	r3, #16
 8001e66:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[POS_FILTER].K = req.posFilterK;
 8001e68:	7a7b      	ldrb	r3, [r7, #9]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f8d7 2026 	ldr.w	r2, [r7, #38]	; 0x26
 8001e70:	4613      	mov	r3, r2
 8001e72:	461a      	mov	r2, r3
 8001e74:	4973      	ldr	r1, [pc, #460]	; (8002044 <ShoreConfigRequest+0x2e0>)
 8001e76:	4603      	mov	r3, r0
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4403      	add	r3, r0
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	440b      	add	r3, r1
 8001e80:	3314      	adds	r3, #20
 8001e82:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].T = req.speedFilterT;
 8001e84:	7a7b      	ldrb	r3, [r7, #9]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f8d7 202a 	ldr.w	r2, [r7, #42]	; 0x2a
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	461a      	mov	r2, r3
 8001e90:	496c      	ldr	r1, [pc, #432]	; (8002044 <ShoreConfigRequest+0x2e0>)
 8001e92:	4603      	mov	r3, r0
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4403      	add	r3, r0
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	440b      	add	r3, r1
 8001e9c:	3318      	adds	r3, #24
 8001e9e:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].K = req.speedFilterK;
 8001ea0:	7a7b      	ldrb	r3, [r7, #9]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f8d7 202e 	ldr.w	r2, [r7, #46]	; 0x2e
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4965      	ldr	r1, [pc, #404]	; (8002044 <ShoreConfigRequest+0x2e0>)
 8001eae:	4603      	mov	r3, r0
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4403      	add	r3, r0
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	440b      	add	r3, r1
 8001eb8:	331c      	adds	r3, #28
 8001eba:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].pid.pGain = req.pid_pGain;
 8001ebc:	7a7b      	ldrb	r3, [r7, #9]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f8d7 2032 	ldr.w	r2, [r7, #50]	; 0x32
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	495e      	ldr	r1, [pc, #376]	; (8002044 <ShoreConfigRequest+0x2e0>)
 8001eca:	4603      	mov	r3, r0
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4403      	add	r3, r0
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3328      	adds	r3, #40	; 0x28
 8001ed6:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iGain = req.pid_iGain;
 8001ed8:	7a7b      	ldrb	r3, [r7, #9]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f8d7 2036 	ldr.w	r2, [r7, #54]	; 0x36
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4957      	ldr	r1, [pc, #348]	; (8002044 <ShoreConfigRequest+0x2e0>)
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4403      	add	r3, r0
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	440b      	add	r3, r1
 8001ef0:	332c      	adds	r3, #44	; 0x2c
 8001ef2:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iMax = req.pid_iMax;
 8001ef4:	7a7b      	ldrb	r3, [r7, #9]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f8d7 203a 	ldr.w	r2, [r7, #58]	; 0x3a
 8001efc:	4613      	mov	r3, r2
 8001efe:	461a      	mov	r2, r3
 8001f00:	4950      	ldr	r1, [pc, #320]	; (8002044 <ShoreConfigRequest+0x2e0>)
 8001f02:	4603      	mov	r3, r0
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4403      	add	r3, r0
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	440b      	add	r3, r1
 8001f0c:	3330      	adds	r3, #48	; 0x30
 8001f0e:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iMin = req.pid_iMin;
 8001f10:	7a7b      	ldrb	r3, [r7, #9]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f8d7 203e 	ldr.w	r2, [r7, #62]	; 0x3e
 8001f18:	4613      	mov	r3, r2
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4949      	ldr	r1, [pc, #292]	; (8002044 <ShoreConfigRequest+0x2e0>)
 8001f1e:	4603      	mov	r3, r0
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4403      	add	r3, r0
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	440b      	add	r3, r1
 8001f28:	3334      	adds	r3, #52	; 0x34
 8001f2a:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].pThrustersMin = req.pThrustersMin;
 8001f2c:	7a7b      	ldrb	r3, [r7, #9]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f8d7 2042 	ldr.w	r2, [r7, #66]	; 0x42
 8001f34:	4613      	mov	r3, r2
 8001f36:	461a      	mov	r2, r3
 8001f38:	4942      	ldr	r1, [pc, #264]	; (8002044 <ShoreConfigRequest+0x2e0>)
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4403      	add	r3, r0
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	440b      	add	r3, r1
 8001f44:	3338      	adds	r3, #56	; 0x38
 8001f46:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pThrustersMax = req.pThrustersMax;
 8001f48:	7a7b      	ldrb	r3, [r7, #9]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f8d7 2046 	ldr.w	r2, [r7, #70]	; 0x46
 8001f50:	4613      	mov	r3, r2
 8001f52:	461a      	mov	r2, r3
 8001f54:	493b      	ldr	r1, [pc, #236]	; (8002044 <ShoreConfigRequest+0x2e0>)
 8001f56:	4603      	mov	r3, r0
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4403      	add	r3, r0
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	333c      	adds	r3, #60	; 0x3c
 8001f62:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].T = req.thrustersFilterT;
 8001f64:	7a7b      	ldrb	r3, [r7, #9]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f8d7 204a 	ldr.w	r2, [r7, #74]	; 0x4a
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4934      	ldr	r1, [pc, #208]	; (8002044 <ShoreConfigRequest+0x2e0>)
 8001f72:	4603      	mov	r3, r0
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4403      	add	r3, r0
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3320      	adds	r3, #32
 8001f7e:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].K = req.thrustersFilterK;
 8001f80:	7a7b      	ldrb	r3, [r7, #9]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f8d7 204e 	ldr.w	r2, [r7, #78]	; 0x4e
 8001f88:	4613      	mov	r3, r2
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	492d      	ldr	r1, [pc, #180]	; (8002044 <ShoreConfigRequest+0x2e0>)
 8001f8e:	4603      	mov	r3, r0
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4403      	add	r3, r0
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	440b      	add	r3, r1
 8001f98:	3324      	adds	r3, #36	; 0x24
 8001f9a:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].sOutSummatorMax = req.sOutSummatorMax;
 8001f9c:	7a7b      	ldrb	r3, [r7, #9]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f8d7 2052 	ldr.w	r2, [r7, #82]	; 0x52
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4926      	ldr	r1, [pc, #152]	; (8002044 <ShoreConfigRequest+0x2e0>)
 8001faa:	4603      	mov	r3, r0
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4403      	add	r3, r0
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	440b      	add	r3, r1
 8001fb4:	3340      	adds	r3, #64	; 0x40
 8001fb6:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].sOutSummatorMin = req.sOutSummatorMin;
 8001fb8:	7a7b      	ldrb	r3, [r7, #9]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f8d7 2056 	ldr.w	r2, [r7, #86]	; 0x56
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	491f      	ldr	r1, [pc, #124]	; (8002044 <ShoreConfigRequest+0x2e0>)
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4403      	add	r3, r0
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	440b      	add	r3, r1
 8001fd0:	3344      	adds	r3, #68	; 0x44
 8001fd2:	601a      	str	r2, [r3, #0]

		if(rState.contourSelected != req.contour) {
 8001fd4:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <ShoreConfigRequest+0x2e4>)
 8001fd6:	785a      	ldrb	r2, [r3, #1]
 8001fd8:	7a7b      	ldrb	r3, [r7, #9]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d01d      	beq.n	800201a <ShoreConfigRequest+0x2b6>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001fe4:	e00e      	b.n	8002004 <ShoreConfigRequest+0x2a0>
				rStabConstants[i].enable = false;
 8001fe6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001fea:	4916      	ldr	r1, [pc, #88]	; (8002044 <ShoreConfigRequest+0x2e0>)
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8001ffa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001ffe:	3301      	adds	r3, #1
 8002000:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002004:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002008:	2b05      	cmp	r3, #5
 800200a:	d9ec      	bls.n	8001fe6 <ShoreConfigRequest+0x282>
			}
			rState.contourSelected = req.contour;
 800200c:	7a7a      	ldrb	r2, [r7, #9]
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <ShoreConfigRequest+0x2e4>)
 8002010:	705a      	strb	r2, [r3, #1]
			stabilizationStart(req.contour);
 8002012:	7a7b      	ldrb	r3, [r7, #9]
 8002014:	4618      	mov	r0, r3
 8002016:	f001 fb8f 	bl	8003738 <stabilizationStart>
		}

		// TODO tuuuupooo
		formThrustVectors();
 800201a:	f002 f945 	bl	80042a8 <formThrustVectors>

		++uartBus[SHORE_UART].successRxCounter;;
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <ShoreConfigRequest+0x2e8>)
 8002020:	895b      	ldrh	r3, [r3, #10]
 8002022:	3301      	adds	r3, #1
 8002024:	b29a      	uxth	r2, r3
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <ShoreConfigRequest+0x2e8>)
 8002028:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 800202a:	e004      	b.n	8002036 <ShoreConfigRequest+0x2d2>
		++uartBus[SHORE_UART].brokenRxCounter;
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <ShoreConfigRequest+0x2e8>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	3301      	adds	r3, #1
 8002032:	4a06      	ldr	r2, [pc, #24]	; (800204c <ShoreConfigRequest+0x2e8>)
 8002034:	60d3      	str	r3, [r2, #12]
}
 8002036:	bf00      	nop
 8002038:	3760      	adds	r7, #96	; 0x60
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200016cc 	.word	0x200016cc
 8002044:	20001724 	.word	0x20001724
 8002048:	20001594 	.word	0x20001594
 800204c:	200000c8 	.word	0x200000c8

08002050 <ShoreDirectRequest>:

void ShoreDirectRequest(uint8_t *requestBuf)
{
 8002050:	b5b0      	push	{r4, r5, r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_DIRECT_LENGTH)) {
 8002058:	2111      	movs	r1, #17
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7fe fff5 	bl	800104a <IsCrc16ChecksummCorrect>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 809b 	beq.w	800219e <ShoreDirectRequest+0x14e>
		struct shoreRequestDirect_s req;
		memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_DIRECT_LENGTH);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f107 040c 	add.w	r4, r7, #12
 800206e:	461d      	mov	r5, r3
 8002070:	6828      	ldr	r0, [r5, #0]
 8002072:	6869      	ldr	r1, [r5, #4]
 8002074:	68aa      	ldr	r2, [r5, #8]
 8002076:	68eb      	ldr	r3, [r5, #12]
 8002078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800207a:	7c2b      	ldrb	r3, [r5, #16]
 800207c:	7023      	strb	r3, [r4, #0]

		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800207e:	2300      	movs	r3, #0
 8002080:	77fb      	strb	r3, [r7, #31]
 8002082:	e00b      	b.n	800209c <ShoreDirectRequest+0x4c>
			rStabConstants[i].enable = false;
 8002084:	7ffa      	ldrb	r2, [r7, #31]
 8002086:	494a      	ldr	r1, [pc, #296]	; (80021b0 <ShoreDirectRequest+0x160>)
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	440b      	add	r3, r1
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002096:	7ffb      	ldrb	r3, [r7, #31]
 8002098:	3301      	adds	r3, #1
 800209a:	77fb      	strb	r3, [r7, #31]
 800209c:	7ffb      	ldrb	r3, [r7, #31]
 800209e:	2b05      	cmp	r3, #5
 80020a0:	d9f0      	bls.n	8002084 <ShoreDirectRequest+0x34>
		}

		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80020a2:	2300      	movs	r3, #0
 80020a4:	77bb      	strb	r3, [r7, #30]
 80020a6:	e070      	b.n	800218a <ShoreDirectRequest+0x13a>
			if(i != req.number) {
 80020a8:	7b7b      	ldrb	r3, [r7, #13]
 80020aa:	7fba      	ldrb	r2, [r7, #30]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d00a      	beq.n	80020c6 <ShoreDirectRequest+0x76>
				rThrusters[i].desiredSpeed = 0;
 80020b0:	7fba      	ldrb	r2, [r7, #30]
 80020b2:	4940      	ldr	r1, [pc, #256]	; (80021b4 <ShoreDirectRequest+0x164>)
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	440b      	add	r3, r1
 80020be:	3302      	adds	r3, #2
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
 80020c4:	e05e      	b.n	8002184 <ShoreDirectRequest+0x134>
			}
			else {
				rThrusters[req.number].desiredSpeed = req.velocity;
 80020c6:	7b7b      	ldrb	r3, [r7, #13]
 80020c8:	4619      	mov	r1, r3
 80020ca:	f997 000f 	ldrsb.w	r0, [r7, #15]
 80020ce:	4a39      	ldr	r2, [pc, #228]	; (80021b4 <ShoreDirectRequest+0x164>)
 80020d0:	460b      	mov	r3, r1
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	440b      	add	r3, r1
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	3302      	adds	r3, #2
 80020dc:	4602      	mov	r2, r0
 80020de:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].address = req.id;
 80020e0:	7b7b      	ldrb	r3, [r7, #13]
 80020e2:	4619      	mov	r1, r3
 80020e4:	7bb8      	ldrb	r0, [r7, #14]
 80020e6:	4a33      	ldr	r2, [pc, #204]	; (80021b4 <ShoreDirectRequest+0x164>)
 80020e8:	460b      	mov	r3, r1
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	440b      	add	r3, r1
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	4602      	mov	r2, r0
 80020f4:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].kForward = req.kForward;
 80020f6:	7b7b      	ldrb	r3, [r7, #13]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f8d7 2011 	ldr.w	r2, [r7, #17]
 80020fe:	4613      	mov	r3, r2
 8002100:	461a      	mov	r2, r3
 8002102:	492c      	ldr	r1, [pc, #176]	; (80021b4 <ShoreDirectRequest+0x164>)
 8002104:	4603      	mov	r3, r0
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4403      	add	r3, r0
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	440b      	add	r3, r1
 800210e:	330c      	adds	r3, #12
 8002110:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].kBackward = req.kBackward;
 8002112:	7b7b      	ldrb	r3, [r7, #13]
 8002114:	4618      	mov	r0, r3
 8002116:	f8d7 2015 	ldr.w	r2, [r7, #21]
 800211a:	4613      	mov	r3, r2
 800211c:	461a      	mov	r2, r3
 800211e:	4925      	ldr	r1, [pc, #148]	; (80021b4 <ShoreDirectRequest+0x164>)
 8002120:	4603      	mov	r3, r0
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4403      	add	r3, r0
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	440b      	add	r3, r1
 800212a:	3310      	adds	r3, #16
 800212c:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].sForward = req.sForward;
 800212e:	7b7b      	ldrb	r3, [r7, #13]
 8002130:	4619      	mov	r1, r3
 8002132:	f997 0019 	ldrsb.w	r0, [r7, #25]
 8002136:	4a1f      	ldr	r2, [pc, #124]	; (80021b4 <ShoreDirectRequest+0x164>)
 8002138:	460b      	mov	r3, r1
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	440b      	add	r3, r1
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4413      	add	r3, r2
 8002142:	3314      	adds	r3, #20
 8002144:	4602      	mov	r2, r0
 8002146:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].sBackward = req.sBackward;
 8002148:	7b7b      	ldrb	r3, [r7, #13]
 800214a:	4619      	mov	r1, r3
 800214c:	f997 001a 	ldrsb.w	r0, [r7, #26]
 8002150:	4a18      	ldr	r2, [pc, #96]	; (80021b4 <ShoreDirectRequest+0x164>)
 8002152:	460b      	mov	r3, r1
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	440b      	add	r3, r1
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4413      	add	r3, r2
 800215c:	3315      	adds	r3, #21
 800215e:	4602      	mov	r2, r0
 8002160:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].inverse = req.reverse;
 8002162:	7c3b      	ldrb	r3, [r7, #16]
 8002164:	7b7a      	ldrb	r2, [r7, #13]
 8002166:	4611      	mov	r1, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf14      	ite	ne
 800216c:	2301      	movne	r3, #1
 800216e:	2300      	moveq	r3, #0
 8002170:	b2d8      	uxtb	r0, r3
 8002172:	4a10      	ldr	r2, [pc, #64]	; (80021b4 <ShoreDirectRequest+0x164>)
 8002174:	460b      	mov	r3, r1
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	440b      	add	r3, r1
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4413      	add	r3, r2
 800217e:	3316      	adds	r3, #22
 8002180:	4602      	mov	r2, r0
 8002182:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8002184:	7fbb      	ldrb	r3, [r7, #30]
 8002186:	3301      	adds	r3, #1
 8002188:	77bb      	strb	r3, [r7, #30]
 800218a:	7fbb      	ldrb	r3, [r7, #30]
 800218c:	2b07      	cmp	r3, #7
 800218e:	d98b      	bls.n	80020a8 <ShoreDirectRequest+0x58>
			}
		}

		++uartBus[SHORE_UART].successRxCounter;;
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <ShoreDirectRequest+0x168>)
 8002192:	895b      	ldrh	r3, [r3, #10]
 8002194:	3301      	adds	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <ShoreDirectRequest+0x168>)
 800219a:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 800219c:	e004      	b.n	80021a8 <ShoreDirectRequest+0x158>
		++uartBus[SHORE_UART].brokenRxCounter;
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <ShoreDirectRequest+0x168>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	3301      	adds	r3, #1
 80021a4:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <ShoreDirectRequest+0x168>)
 80021a6:	60d3      	str	r3, [r2, #12]
}
 80021a8:	bf00      	nop
 80021aa:	3720      	adds	r7, #32
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bdb0      	pop	{r4, r5, r7, pc}
 80021b0:	20001724 	.word	0x20001724
 80021b4:	200015a0 	.word	0x200015a0
 80021b8:	200000c8 	.word	0x200000c8

080021bc <ShoreResponse>:

void ShoreResponse(uint8_t *responseBuf)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b094      	sub	sp, #80	; 0x50
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	struct shoreResponse_s res;

    res.roll = rSensors.roll;
 80021c4:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <ShoreResponse+0x78>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60bb      	str	r3, [r7, #8]
    res.pitch = rSensors.pitch;
 80021ca:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <ShoreResponse+0x78>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	60fb      	str	r3, [r7, #12]
    res.yaw =  rSensors.yaw;//*rStabState[STAB_YAW].posSignal;//rSensors.yaw;
 80021d0:	4b18      	ldr	r3, [pc, #96]	; (8002234 <ShoreResponse+0x78>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	613b      	str	r3, [r7, #16]
    res.rollSpeed = rSensors.rollSpeed;
 80021d6:	4b17      	ldr	r3, [pc, #92]	; (8002234 <ShoreResponse+0x78>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	617b      	str	r3, [r7, #20]
    res.pitchSpeed = rSensors.pitchSpeed;
 80021dc:	4b15      	ldr	r3, [pc, #84]	; (8002234 <ShoreResponse+0x78>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	61bb      	str	r3, [r7, #24]
    res.yawSpeed = rSensors.yawSpeed;
 80021e2:	4b14      	ldr	r3, [pc, #80]	; (8002234 <ShoreResponse+0x78>)
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	61fb      	str	r3, [r7, #28]

    res.pressure = rSensors.pressure;
 80021e8:	4b12      	ldr	r3, [pc, #72]	; (8002234 <ShoreResponse+0x78>)
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	623b      	str	r3, [r7, #32]

    res.vma_errors = 0x55;         //!!!!!TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 80021ee:	2300      	movs	r3, #0
 80021f0:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80021f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80021f8:	2300      	movs	r3, #0
 80021fa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    // TODO do this properly pls
    res.dev_errors = 0;//robot->device.errors;
 80021fe:	2300      	movs	r3, #0
 8002200:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8002204:	2300      	movs	r3, #0
 8002206:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    res.pc_errors = rComputer.errors;
 800220a:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <ShoreResponse+0x7c>)
 800220c:	785b      	ldrb	r3, [r3, #1]
 800220e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

    memcpy((void*)responseBuf, (void*)&res, SHORE_RESPONSE_LENGTH);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4618      	mov	r0, r3
 8002216:	f107 0308 	add.w	r3, r7, #8
 800221a:	2246      	movs	r2, #70	; 0x46
 800221c:	4619      	mov	r1, r3
 800221e:	f00b fcb9 	bl	800db94 <memcpy>
    AddCrc16Checksumm(responseBuf, SHORE_RESPONSE_LENGTH);
 8002222:	2146      	movs	r1, #70	; 0x46
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7fe ff30 	bl	800108a <AddCrc16Checksumm>
}
 800222a:	bf00      	nop
 800222c:	3750      	adds	r7, #80	; 0x50
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20001660 	.word	0x20001660
 8002238:	200016c8 	.word	0x200016c8

0800223c <ShoreConfigResponse>:

void ShoreConfigResponse(uint8_t *responseBuf)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b09c      	sub	sp, #112	; 0x70
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	struct shoreConfigResponse_s res;

	res.code = REQUEST_CONFIG_CODE;
 8002244:	2355      	movs	r3, #85	; 0x55
 8002246:	733b      	strb	r3, [r7, #12]

	res.roll = rSensors.roll;
 8002248:	4b74      	ldr	r3, [pc, #464]	; (800241c <ShoreConfigResponse+0x1e0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f8c7 300d 	str.w	r3, [r7, #13]
	res.pitch = rSensors.pitch;
 8002250:	4b72      	ldr	r3, [pc, #456]	; (800241c <ShoreConfigResponse+0x1e0>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f8c7 3011 	str.w	r3, [r7, #17]
	res.yaw = rSensors.yaw;
 8002258:	4b70      	ldr	r3, [pc, #448]	; (800241c <ShoreConfigResponse+0x1e0>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f8c7 3015 	str.w	r3, [r7, #21]
	res.raw_yaw = rSensors.raw_yaw;
 8002260:	4b6e      	ldr	r3, [pc, #440]	; (800241c <ShoreConfigResponse+0x1e0>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f8c7 3019 	str.w	r3, [r7, #25]

	res.rollSpeed = rSensors.rollSpeed;
 8002268:	4b6c      	ldr	r3, [pc, #432]	; (800241c <ShoreConfigResponse+0x1e0>)
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	f8c7 301d 	str.w	r3, [r7, #29]
	res.pitchSpeed = rSensors.pitchSpeed;
 8002270:	4b6a      	ldr	r3, [pc, #424]	; (800241c <ShoreConfigResponse+0x1e0>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
	res.yawSpeed = rSensors.yawSpeed;
 8002278:	4b68      	ldr	r3, [pc, #416]	; (800241c <ShoreConfigResponse+0x1e0>)
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25

	res.pressure = rSensors.pressure;
 8002280:	4b66      	ldr	r3, [pc, #408]	; (800241c <ShoreConfigResponse+0x1e0>)
 8002282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002284:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
	res.in_pressure = 0;
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	f8c7 302d 	str.w	r3, [r7, #45]	; 0x2d

	res.inputSignal = *rStabState[rState.contourSelected].inputSignal;
 8002290:	4b63      	ldr	r3, [pc, #396]	; (8002420 <ShoreConfigResponse+0x1e4>)
 8002292:	785b      	ldrb	r3, [r3, #1]
 8002294:	4619      	mov	r1, r3
 8002296:	4a63      	ldr	r2, [pc, #396]	; (8002424 <ShoreConfigResponse+0x1e8>)
 8002298:	2358      	movs	r3, #88	; 0x58
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4413      	add	r3, r2
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8c7 3031 	str.w	r3, [r7, #49]	; 0x31
	res.speedSignal = *rStabState[rState.contourSelected].speedSignal;
 80022a8:	4b5d      	ldr	r3, [pc, #372]	; (8002420 <ShoreConfigResponse+0x1e4>)
 80022aa:	785b      	ldrb	r3, [r3, #1]
 80022ac:	4619      	mov	r1, r3
 80022ae:	4a5d      	ldr	r2, [pc, #372]	; (8002424 <ShoreConfigResponse+0x1e8>)
 80022b0:	2358      	movs	r3, #88	; 0x58
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	3304      	adds	r3, #4
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8c7 3035 	str.w	r3, [r7, #53]	; 0x35
	res.posSignal = *rStabState[rState.contourSelected].posSignal;
 80022c2:	4b57      	ldr	r3, [pc, #348]	; (8002420 <ShoreConfigResponse+0x1e4>)
 80022c4:	785b      	ldrb	r3, [r3, #1]
 80022c6:	4619      	mov	r1, r3
 80022c8:	4a56      	ldr	r2, [pc, #344]	; (8002424 <ShoreConfigResponse+0x1e8>)
 80022ca:	2358      	movs	r3, #88	; 0x58
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	3308      	adds	r3, #8
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8c7 3039 	str.w	r3, [r7, #57]	; 0x39

	res.joyUnitCasted = rStabState[rState.contourSelected].joyUnitCasted;
 80022dc:	4b50      	ldr	r3, [pc, #320]	; (8002420 <ShoreConfigResponse+0x1e4>)
 80022de:	785b      	ldrb	r3, [r3, #1]
 80022e0:	4619      	mov	r1, r3
 80022e2:	4a50      	ldr	r2, [pc, #320]	; (8002424 <ShoreConfigResponse+0x1e8>)
 80022e4:	2358      	movs	r3, #88	; 0x58
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	331c      	adds	r3, #28
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8c7 303d 	str.w	r3, [r7, #61]	; 0x3d
	res.joy_iValue = rStabState[rState.contourSelected].joy_iValue;
 80022f4:	4b4a      	ldr	r3, [pc, #296]	; (8002420 <ShoreConfigResponse+0x1e4>)
 80022f6:	785b      	ldrb	r3, [r3, #1]
 80022f8:	4619      	mov	r1, r3
 80022fa:	4a4a      	ldr	r2, [pc, #296]	; (8002424 <ShoreConfigResponse+0x1e8>)
 80022fc:	2358      	movs	r3, #88	; 0x58
 80022fe:	fb01 f303 	mul.w	r3, r1, r3
 8002302:	4413      	add	r3, r2
 8002304:	3320      	adds	r3, #32
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8c7 3041 	str.w	r3, [r7, #65]	; 0x41
	res.posError = rStabState[rState.contourSelected].posError;
 800230c:	4b44      	ldr	r3, [pc, #272]	; (8002420 <ShoreConfigResponse+0x1e4>)
 800230e:	785b      	ldrb	r3, [r3, #1]
 8002310:	4619      	mov	r1, r3
 8002312:	4a44      	ldr	r2, [pc, #272]	; (8002424 <ShoreConfigResponse+0x1e8>)
 8002314:	2358      	movs	r3, #88	; 0x58
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	3324      	adds	r3, #36	; 0x24
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f8c7 3045 	str.w	r3, [r7, #69]	; 0x45
	res.speedError = rStabState[rState.contourSelected].speedError;
 8002324:	4b3e      	ldr	r3, [pc, #248]	; (8002420 <ShoreConfigResponse+0x1e4>)
 8002326:	785b      	ldrb	r3, [r3, #1]
 8002328:	4619      	mov	r1, r3
 800232a:	4a3e      	ldr	r2, [pc, #248]	; (8002424 <ShoreConfigResponse+0x1e8>)
 800232c:	2358      	movs	r3, #88	; 0x58
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	3328      	adds	r3, #40	; 0x28
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8c7 3049 	str.w	r3, [r7, #73]	; 0x49
	res.dynSummator = rStabState[rState.contourSelected].dynSummator;
 800233c:	4b38      	ldr	r3, [pc, #224]	; (8002420 <ShoreConfigResponse+0x1e4>)
 800233e:	785b      	ldrb	r3, [r3, #1]
 8002340:	4619      	mov	r1, r3
 8002342:	4a38      	ldr	r2, [pc, #224]	; (8002424 <ShoreConfigResponse+0x1e8>)
 8002344:	2358      	movs	r3, #88	; 0x58
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	4413      	add	r3, r2
 800234c:	332c      	adds	r3, #44	; 0x2c
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f8c7 304d 	str.w	r3, [r7, #77]	; 0x4d
	res.pidValue = rStabState[rState.contourSelected].pidValue;
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <ShoreConfigResponse+0x1e4>)
 8002356:	785b      	ldrb	r3, [r3, #1]
 8002358:	4619      	mov	r1, r3
 800235a:	4a32      	ldr	r2, [pc, #200]	; (8002424 <ShoreConfigResponse+0x1e8>)
 800235c:	2358      	movs	r3, #88	; 0x58
 800235e:	fb01 f303 	mul.w	r3, r1, r3
 8002362:	4413      	add	r3, r2
 8002364:	3330      	adds	r3, #48	; 0x30
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8c7 3051 	str.w	r3, [r7, #81]	; 0x51
	res.posErrorAmp = rStabState[rState.contourSelected].posErrorAmp;
 800236c:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <ShoreConfigResponse+0x1e4>)
 800236e:	785b      	ldrb	r3, [r3, #1]
 8002370:	4619      	mov	r1, r3
 8002372:	4a2c      	ldr	r2, [pc, #176]	; (8002424 <ShoreConfigResponse+0x1e8>)
 8002374:	2358      	movs	r3, #88	; 0x58
 8002376:	fb01 f303 	mul.w	r3, r1, r3
 800237a:	4413      	add	r3, r2
 800237c:	3338      	adds	r3, #56	; 0x38
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8c7 3055 	str.w	r3, [r7, #85]	; 0x55
	res.speedFiltered = rStabState[rState.contourSelected].speedFiltered;
 8002384:	4b26      	ldr	r3, [pc, #152]	; (8002420 <ShoreConfigResponse+0x1e4>)
 8002386:	785b      	ldrb	r3, [r3, #1]
 8002388:	4619      	mov	r1, r3
 800238a:	4a26      	ldr	r2, [pc, #152]	; (8002424 <ShoreConfigResponse+0x1e8>)
 800238c:	2358      	movs	r3, #88	; 0x58
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	4413      	add	r3, r2
 8002394:	333c      	adds	r3, #60	; 0x3c
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f8c7 3059 	str.w	r3, [r7, #89]	; 0x59
	res.posFiltered = rStabState[rState.contourSelected].posFiltered;
 800239c:	4b20      	ldr	r3, [pc, #128]	; (8002420 <ShoreConfigResponse+0x1e4>)
 800239e:	785b      	ldrb	r3, [r3, #1]
 80023a0:	4619      	mov	r1, r3
 80023a2:	4a20      	ldr	r2, [pc, #128]	; (8002424 <ShoreConfigResponse+0x1e8>)
 80023a4:	2358      	movs	r3, #88	; 0x58
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	3340      	adds	r3, #64	; 0x40
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f8c7 305d 	str.w	r3, [r7, #93]	; 0x5d

	res.pid_iValue = rStabState[rState.contourSelected].pid_iValue;
 80023b4:	4b1a      	ldr	r3, [pc, #104]	; (8002420 <ShoreConfigResponse+0x1e4>)
 80023b6:	785b      	ldrb	r3, [r3, #1]
 80023b8:	4619      	mov	r1, r3
 80023ba:	4a1a      	ldr	r2, [pc, #104]	; (8002424 <ShoreConfigResponse+0x1e8>)
 80023bc:	2358      	movs	r3, #88	; 0x58
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	3334      	adds	r3, #52	; 0x34
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f8c7 3061 	str.w	r3, [r7, #97]	; 0x61

	res.thrustersFiltered = rStabState[rState.contourSelected].thrustersFiltered;
 80023cc:	4b14      	ldr	r3, [pc, #80]	; (8002420 <ShoreConfigResponse+0x1e4>)
 80023ce:	785b      	ldrb	r3, [r3, #1]
 80023d0:	4619      	mov	r1, r3
 80023d2:	4a14      	ldr	r2, [pc, #80]	; (8002424 <ShoreConfigResponse+0x1e8>)
 80023d4:	2358      	movs	r3, #88	; 0x58
 80023d6:	fb01 f303 	mul.w	r3, r1, r3
 80023da:	4413      	add	r3, r2
 80023dc:	334c      	adds	r3, #76	; 0x4c
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f8c7 3065 	str.w	r3, [r7, #101]	; 0x65
	res.outputSignal = rStabState[rState.contourSelected].outputSignal;
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <ShoreConfigResponse+0x1e4>)
 80023e6:	785b      	ldrb	r3, [r3, #1]
 80023e8:	4619      	mov	r1, r3
 80023ea:	4a0e      	ldr	r2, [pc, #56]	; (8002424 <ShoreConfigResponse+0x1e8>)
 80023ec:	2358      	movs	r3, #88	; 0x58
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	3350      	adds	r3, #80	; 0x50
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f8c7 3069 	str.w	r3, [r7, #105]	; 0x69

	memcpy((void*)responseBuf, (void*)&res, SHORE_CONFIG_RESPONSE_LENGTH);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4618      	mov	r0, r3
 8002400:	f107 030c 	add.w	r3, r7, #12
 8002404:	2263      	movs	r2, #99	; 0x63
 8002406:	4619      	mov	r1, r3
 8002408:	f00b fbc4 	bl	800db94 <memcpy>

	AddCrc16Checksumm(responseBuf, SHORE_CONFIG_RESPONSE_LENGTH);
 800240c:	2163      	movs	r1, #99	; 0x63
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7fe fe3b 	bl	800108a <AddCrc16Checksumm>
}
 8002414:	bf00      	nop
 8002416:	3770      	adds	r7, #112	; 0x70
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20001660 	.word	0x20001660
 8002420:	20001594 	.word	0x20001594
 8002424:	200018d4 	.word	0x200018d4

08002428 <ShoreDirectResponse>:

void ShoreDirectResponse(uint8_t *responseBuf)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	struct shoreResponseDirect_s res;

	res.number = 0xFF;
 8002430:	23ff      	movs	r3, #255	; 0xff
 8002432:	723b      	strb	r3, [r7, #8]
	res.connection = 0xAA;
 8002434:	23aa      	movs	r3, #170	; 0xaa
 8002436:	727b      	strb	r3, [r7, #9]
	res.current = 0xBB;
 8002438:	23bb      	movs	r3, #187	; 0xbb
 800243a:	817b      	strh	r3, [r7, #10]

    memcpy((void*)responseBuf, (void*)&res, SHORE_DIRECT_RESPONSE_LENGTH);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	461a      	mov	r2, r3
 8002440:	f107 0308 	add.w	r3, r7, #8
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	6010      	str	r0, [r2, #0]
 8002448:	889b      	ldrh	r3, [r3, #4]
 800244a:	8093      	strh	r3, [r2, #4]

    AddCrc16Checksumm(responseBuf, SHORE_DIRECT_RESPONSE_LENGTH);
 800244c:	2106      	movs	r1, #6
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7fe fe1b 	bl	800108a <AddCrc16Checksumm>
}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	0000      	movs	r0, r0
	...

08002460 <ImuReceive>:
	}
	return 0;
}

void ImuReceive(uint8_t *ReceiveBuf)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

    for(uint8_t i = 0; i < IMU_CHECKSUMS; ++i) {
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]
 800246c:	e01d      	b.n	80024aa <ImuReceive+0x4a>
        if(!IsChecksum16bSCorrect(&ReceiveBuf[i*IMU_RESPONSE_LENGTH], IMU_RESPONSE_LENGTH)) {
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	4613      	mov	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	461a      	mov	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4413      	add	r3, r2
 800247c:	210f      	movs	r1, #15
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fec4 	bl	800120c <IsChecksum16bSCorrect>
 8002484:	4603      	mov	r3, r0
 8002486:	f083 0301 	eor.w	r3, r3, #1
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d009      	beq.n	80024a4 <ImuReceive+0x44>
            ++uartBus[IMU_UART].brokenRxCounter;
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <ImuReceive+0x40>)
 8002492:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002496:	3301      	adds	r3, #1
 8002498:	4a01      	ldr	r2, [pc, #4]	; (80024a0 <ImuReceive+0x40>)
 800249a:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
            return;
 800249e:	e1f9      	b.n	8002894 <ImuReceive+0x434>
 80024a0:	200000c8 	.word	0x200000c8
    for(uint8_t i = 0; i < IMU_CHECKSUMS; ++i) {
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	3301      	adds	r3, #1
 80024a8:	73fb      	strb	r3, [r7, #15]
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d9de      	bls.n	800246e <ImuReceive+0xe>
        }
    }

    rSensors.rollSpeed = (float) (MergeBytes(&ReceiveBuf[GYRO_PROC_Y])) * 0.0610352;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3307      	adds	r3, #7
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fee1 	bl	800127c <MergeBytes>
 80024ba:	4603      	mov	r3, r0
 80024bc:	ee07 3a90 	vmov	s15, r3
 80024c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c4:	ee17 0a90 	vmov	r0, s15
 80024c8:	f7fd ffe6 	bl	8000498 <__aeabi_f2d>
 80024cc:	a3d8      	add	r3, pc, #864	; (adr r3, 8002830 <ImuReceive+0x3d0>)
 80024ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d2:	f7fe f839 	bl	8000548 <__aeabi_dmul>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4610      	mov	r0, r2
 80024dc:	4619      	mov	r1, r3
 80024de:	f7fe fb0b 	bl	8000af8 <__aeabi_d2f>
 80024e2:	4603      	mov	r3, r0
 80024e4:	4ada      	ldr	r2, [pc, #872]	; (8002850 <ImuReceive+0x3f0>)
 80024e6:	61d3      	str	r3, [r2, #28]
    rSensors.pitchSpeed = (float) (MergeBytes(&ReceiveBuf[GYRO_PROC_X])) * 0.0610352;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3305      	adds	r3, #5
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fec5 	bl	800127c <MergeBytes>
 80024f2:	4603      	mov	r3, r0
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024fc:	ee17 0a90 	vmov	r0, s15
 8002500:	f7fd ffca 	bl	8000498 <__aeabi_f2d>
 8002504:	a3ca      	add	r3, pc, #808	; (adr r3, 8002830 <ImuReceive+0x3d0>)
 8002506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250a:	f7fe f81d 	bl	8000548 <__aeabi_dmul>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	f7fe faef 	bl	8000af8 <__aeabi_d2f>
 800251a:	4603      	mov	r3, r0
 800251c:	4acc      	ldr	r2, [pc, #816]	; (8002850 <ImuReceive+0x3f0>)
 800251e:	6213      	str	r3, [r2, #32]
    rSensors.yawSpeed = (float) (MergeBytes(&ReceiveBuf[GYRO_PROC_Z])) * 0.0610352;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3309      	adds	r3, #9
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fea9 	bl	800127c <MergeBytes>
 800252a:	4603      	mov	r3, r0
 800252c:	ee07 3a90 	vmov	s15, r3
 8002530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002534:	ee17 0a90 	vmov	r0, s15
 8002538:	f7fd ffae 	bl	8000498 <__aeabi_f2d>
 800253c:	a3bc      	add	r3, pc, #752	; (adr r3, 8002830 <ImuReceive+0x3d0>)
 800253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002542:	f7fe f801 	bl	8000548 <__aeabi_dmul>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f7fe fad3 	bl	8000af8 <__aeabi_d2f>
 8002552:	4603      	mov	r3, r0
 8002554:	4abe      	ldr	r2, [pc, #760]	; (8002850 <ImuReceive+0x3f0>)
 8002556:	6253      	str	r3, [r2, #36]	; 0x24

    rSensors.accelX = (float) (MergeBytes(&ReceiveBuf[ACCEL_PROC_X])) * 0.0109863;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3314      	adds	r3, #20
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe fe8d 	bl	800127c <MergeBytes>
 8002562:	4603      	mov	r3, r0
 8002564:	ee07 3a90 	vmov	s15, r3
 8002568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800256c:	ee17 0a90 	vmov	r0, s15
 8002570:	f7fd ff92 	bl	8000498 <__aeabi_f2d>
 8002574:	a3b0      	add	r3, pc, #704	; (adr r3, 8002838 <ImuReceive+0x3d8>)
 8002576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257a:	f7fd ffe5 	bl	8000548 <__aeabi_dmul>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f7fe fab7 	bl	8000af8 <__aeabi_d2f>
 800258a:	4603      	mov	r3, r0
 800258c:	4ab0      	ldr	r2, [pc, #704]	; (8002850 <ImuReceive+0x3f0>)
 800258e:	6293      	str	r3, [r2, #40]	; 0x28
    rSensors.accelY = (float) (MergeBytes(&ReceiveBuf[ACCEL_PROC_Y])) * 0.0109863;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3316      	adds	r3, #22
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe fe71 	bl	800127c <MergeBytes>
 800259a:	4603      	mov	r3, r0
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a4:	ee17 0a90 	vmov	r0, s15
 80025a8:	f7fd ff76 	bl	8000498 <__aeabi_f2d>
 80025ac:	a3a2      	add	r3, pc, #648	; (adr r3, 8002838 <ImuReceive+0x3d8>)
 80025ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b2:	f7fd ffc9 	bl	8000548 <__aeabi_dmul>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4610      	mov	r0, r2
 80025bc:	4619      	mov	r1, r3
 80025be:	f7fe fa9b 	bl	8000af8 <__aeabi_d2f>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4aa2      	ldr	r2, [pc, #648]	; (8002850 <ImuReceive+0x3f0>)
 80025c6:	62d3      	str	r3, [r2, #44]	; 0x2c
    rSensors.accelZ = (float) (MergeBytes(&ReceiveBuf[ACCEL_PROC_Z])) * 0.0109863;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3318      	adds	r3, #24
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fe55 	bl	800127c <MergeBytes>
 80025d2:	4603      	mov	r3, r0
 80025d4:	ee07 3a90 	vmov	s15, r3
 80025d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025dc:	ee17 0a90 	vmov	r0, s15
 80025e0:	f7fd ff5a 	bl	8000498 <__aeabi_f2d>
 80025e4:	a394      	add	r3, pc, #592	; (adr r3, 8002838 <ImuReceive+0x3d8>)
 80025e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ea:	f7fd ffad 	bl	8000548 <__aeabi_dmul>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4610      	mov	r0, r2
 80025f4:	4619      	mov	r1, r3
 80025f6:	f7fe fa7f 	bl	8000af8 <__aeabi_d2f>
 80025fa:	4603      	mov	r3, r0
 80025fc:	4a94      	ldr	r2, [pc, #592]	; (8002850 <ImuReceive+0x3f0>)
 80025fe:	6313      	str	r3, [r2, #48]	; 0x30

    rSensors.magX = (float) (MergeBytes(&ReceiveBuf[MAG_PROC_X])) * 0.000183105;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3323      	adds	r3, #35	; 0x23
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe fe39 	bl	800127c <MergeBytes>
 800260a:	4603      	mov	r3, r0
 800260c:	ee07 3a90 	vmov	s15, r3
 8002610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002614:	ee17 0a90 	vmov	r0, s15
 8002618:	f7fd ff3e 	bl	8000498 <__aeabi_f2d>
 800261c:	a388      	add	r3, pc, #544	; (adr r3, 8002840 <ImuReceive+0x3e0>)
 800261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002622:	f7fd ff91 	bl	8000548 <__aeabi_dmul>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4610      	mov	r0, r2
 800262c:	4619      	mov	r1, r3
 800262e:	f7fe fa63 	bl	8000af8 <__aeabi_d2f>
 8002632:	4603      	mov	r3, r0
 8002634:	4a86      	ldr	r2, [pc, #536]	; (8002850 <ImuReceive+0x3f0>)
 8002636:	6353      	str	r3, [r2, #52]	; 0x34
    rSensors.magY = (float) (MergeBytes(&ReceiveBuf[MAG_PROC_Y])) * 0.000183105;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3325      	adds	r3, #37	; 0x25
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe fe1d 	bl	800127c <MergeBytes>
 8002642:	4603      	mov	r3, r0
 8002644:	ee07 3a90 	vmov	s15, r3
 8002648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800264c:	ee17 0a90 	vmov	r0, s15
 8002650:	f7fd ff22 	bl	8000498 <__aeabi_f2d>
 8002654:	a37a      	add	r3, pc, #488	; (adr r3, 8002840 <ImuReceive+0x3e0>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	f7fd ff75 	bl	8000548 <__aeabi_dmul>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4610      	mov	r0, r2
 8002664:	4619      	mov	r1, r3
 8002666:	f7fe fa47 	bl	8000af8 <__aeabi_d2f>
 800266a:	4603      	mov	r3, r0
 800266c:	4a78      	ldr	r2, [pc, #480]	; (8002850 <ImuReceive+0x3f0>)
 800266e:	6393      	str	r3, [r2, #56]	; 0x38
    rSensors.magZ = (float) (MergeBytes(&ReceiveBuf[MAG_PROC_Z])) * 0.000183105;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3327      	adds	r3, #39	; 0x27
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fe01 	bl	800127c <MergeBytes>
 800267a:	4603      	mov	r3, r0
 800267c:	ee07 3a90 	vmov	s15, r3
 8002680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002684:	ee17 0a90 	vmov	r0, s15
 8002688:	f7fd ff06 	bl	8000498 <__aeabi_f2d>
 800268c:	a36c      	add	r3, pc, #432	; (adr r3, 8002840 <ImuReceive+0x3e0>)
 800268e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002692:	f7fd ff59 	bl	8000548 <__aeabi_dmul>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4610      	mov	r0, r2
 800269c:	4619      	mov	r1, r3
 800269e:	f7fe fa2b 	bl	8000af8 <__aeabi_d2f>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4a6a      	ldr	r2, [pc, #424]	; (8002850 <ImuReceive+0x3f0>)
 80026a6:	63d3      	str	r3, [r2, #60]	; 0x3c

    rSensors.quatA = (float) (MergeBytes(&ReceiveBuf[QUAT_A])) * 0.0000335693;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3341      	adds	r3, #65	; 0x41
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fde5 	bl	800127c <MergeBytes>
 80026b2:	4603      	mov	r3, r0
 80026b4:	ee07 3a90 	vmov	s15, r3
 80026b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026bc:	ee17 0a90 	vmov	r0, s15
 80026c0:	f7fd feea 	bl	8000498 <__aeabi_f2d>
 80026c4:	a360      	add	r3, pc, #384	; (adr r3, 8002848 <ImuReceive+0x3e8>)
 80026c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ca:	f7fd ff3d 	bl	8000548 <__aeabi_dmul>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	f7fe fa0f 	bl	8000af8 <__aeabi_d2f>
 80026da:	4603      	mov	r3, r0
 80026dc:	4a5c      	ldr	r2, [pc, #368]	; (8002850 <ImuReceive+0x3f0>)
 80026de:	6413      	str	r3, [r2, #64]	; 0x40
    rSensors.quatB = (float) (MergeBytes(&ReceiveBuf[QUAT_B])) * 0.0000335693;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3343      	adds	r3, #67	; 0x43
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fdc9 	bl	800127c <MergeBytes>
 80026ea:	4603      	mov	r3, r0
 80026ec:	ee07 3a90 	vmov	s15, r3
 80026f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026f4:	ee17 0a90 	vmov	r0, s15
 80026f8:	f7fd fece 	bl	8000498 <__aeabi_f2d>
 80026fc:	a352      	add	r3, pc, #328	; (adr r3, 8002848 <ImuReceive+0x3e8>)
 80026fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002702:	f7fd ff21 	bl	8000548 <__aeabi_dmul>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	f7fe f9f3 	bl	8000af8 <__aeabi_d2f>
 8002712:	4603      	mov	r3, r0
 8002714:	4a4e      	ldr	r2, [pc, #312]	; (8002850 <ImuReceive+0x3f0>)
 8002716:	6453      	str	r3, [r2, #68]	; 0x44
    rSensors.quatC = (float) (MergeBytes(&ReceiveBuf[QUAT_C])) * 0.0000335693;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3345      	adds	r3, #69	; 0x45
 800271c:	4618      	mov	r0, r3
 800271e:	f7fe fdad 	bl	800127c <MergeBytes>
 8002722:	4603      	mov	r3, r0
 8002724:	ee07 3a90 	vmov	s15, r3
 8002728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800272c:	ee17 0a90 	vmov	r0, s15
 8002730:	f7fd feb2 	bl	8000498 <__aeabi_f2d>
 8002734:	a344      	add	r3, pc, #272	; (adr r3, 8002848 <ImuReceive+0x3e8>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	f7fd ff05 	bl	8000548 <__aeabi_dmul>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	f7fe f9d7 	bl	8000af8 <__aeabi_d2f>
 800274a:	4603      	mov	r3, r0
 800274c:	4a40      	ldr	r2, [pc, #256]	; (8002850 <ImuReceive+0x3f0>)
 800274e:	6493      	str	r3, [r2, #72]	; 0x48
    rSensors.quatD = (float) (MergeBytes(&ReceiveBuf[QUAT_D])) * 0.0000335693;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3347      	adds	r3, #71	; 0x47
 8002754:	4618      	mov	r0, r3
 8002756:	f7fe fd91 	bl	800127c <MergeBytes>
 800275a:	4603      	mov	r3, r0
 800275c:	ee07 3a90 	vmov	s15, r3
 8002760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002764:	ee17 0a90 	vmov	r0, s15
 8002768:	f7fd fe96 	bl	8000498 <__aeabi_f2d>
 800276c:	a336      	add	r3, pc, #216	; (adr r3, 8002848 <ImuReceive+0x3e8>)
 800276e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002772:	f7fd fee9 	bl	8000548 <__aeabi_dmul>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4610      	mov	r0, r2
 800277c:	4619      	mov	r1, r3
 800277e:	f7fe f9bb 	bl	8000af8 <__aeabi_d2f>
 8002782:	4603      	mov	r3, r0
 8002784:	4a32      	ldr	r2, [pc, #200]	; (8002850 <ImuReceive+0x3f0>)
 8002786:	64d3      	str	r3, [r2, #76]	; 0x4c

	float diffTime = fromTickToMs(xTaskGetTickCount() - rSensors.LastTick) / 1000.0f;
 8002788:	f009 fc66 	bl	800c058 <xTaskGetTickCount>
 800278c:	ee07 0a90 	vmov	s15, r0
 8002790:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002794:	4b2e      	ldr	r3, [pc, #184]	; (8002850 <ImuReceive+0x3f0>)
 8002796:	edd3 7a05 	vldr	s15, [r3, #20]
 800279a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800279e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027a2:	ee17 0a90 	vmov	r0, s15
 80027a6:	f7fe fb79 	bl	8000e9c <fromTickToMs>
 80027aa:	eeb0 7a40 	vmov.f32	s14, s0
 80027ae:	eddf 6a29 	vldr	s13, [pc, #164]	; 8002854 <ImuReceive+0x3f4>
 80027b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027b6:	edc7 7a02 	vstr	s15, [r7, #8]
    rSensors.LastTick = xTaskGetTickCount();
 80027ba:	f009 fc4d 	bl	800c058 <xTaskGetTickCount>
 80027be:	ee07 0a90 	vmov	s15, r0
 80027c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c6:	4b22      	ldr	r3, [pc, #136]	; (8002850 <ImuReceive+0x3f0>)
 80027c8:	edc3 7a05 	vstr	s15, [r3, #20]
    rSensors.yaw += (rSensors.yawSpeed * diffTime);
 80027cc:	4b20      	ldr	r3, [pc, #128]	; (8002850 <ImuReceive+0x3f0>)
 80027ce:	ed93 7a02 	vldr	s14, [r3, #8]
 80027d2:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <ImuReceive+0x3f0>)
 80027d4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80027d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80027dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e4:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <ImuReceive+0x3f0>)
 80027e6:	edc3 7a02 	vstr	s15, [r3, #8]

    //rSensors.yaw = (float) (MergeBytes(&ReceiveBuf[EULER_PSI])) * 0.0109863;
    rSensors.roll =  0;//asin(rSensors.accelX/62)*180/3.14;
 80027ea:	4b19      	ldr	r3, [pc, #100]	; (8002850 <ImuReceive+0x3f0>)
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
    rSensors.pitch =  (float) asin(rSensors.accelY/62)*180/3.14;//(float) (MergeBytes(&ReceiveBuf[EULER_PHI])) * 0.0109863;
 80027f2:	4b17      	ldr	r3, [pc, #92]	; (8002850 <ImuReceive+0x3f0>)
 80027f4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80027f8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002858 <ImuReceive+0x3f8>
 80027fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002800:	ee16 0a90 	vmov	r0, s13
 8002804:	f7fd fe48 	bl	8000498 <__aeabi_f2d>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	ec43 2b10 	vmov	d0, r2, r3
 8002810:	f00b fa98 	bl	800dd44 <asin>
 8002814:	ec53 2b10 	vmov	r2, r3, d0
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	f7fe f96c 	bl	8000af8 <__aeabi_d2f>
 8002820:	ee07 0a10 	vmov	s14, r0
 8002824:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800285c <ImuReceive+0x3fc>
 8002828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800282c:	e018      	b.n	8002860 <ImuReceive+0x400>
 800282e:	bf00      	nop
 8002830:	77cf4476 	.word	0x77cf4476
 8002834:	3faf4001 	.word	0x3faf4001
 8002838:	39a1e23d 	.word	0x39a1e23d
 800283c:	3f867ffc 	.word	0x3f867ffc
 8002840:	f9353597 	.word	0xf9353597
 8002844:	3f27fffb 	.word	0x3f27fffb
 8002848:	5d7d8b50 	.word	0x5d7d8b50
 800284c:	3f019998 	.word	0x3f019998
 8002850:	20001660 	.word	0x20001660
 8002854:	447a0000 	.word	0x447a0000
 8002858:	42780000 	.word	0x42780000
 800285c:	43340000 	.word	0x43340000
 8002860:	ee17 0a90 	vmov	r0, s15
 8002864:	f7fd fe18 	bl	8000498 <__aeabi_f2d>
 8002868:	a30f      	add	r3, pc, #60	; (adr r3, 80028a8 <ImuReceive+0x448>)
 800286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286e:	f7fd ff95 	bl	800079c <__aeabi_ddiv>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	f7fe f93d 	bl	8000af8 <__aeabi_d2f>
 800287e:	4603      	mov	r3, r0
 8002880:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <ImuReceive+0x440>)
 8002882:	6053      	str	r3, [r2, #4]

    ++uartBus[IMU_UART].successRxCounter;
 8002884:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <ImuReceive+0x444>)
 8002886:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800288a:	3301      	adds	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <ImuReceive+0x444>)
 8002890:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
}
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	f3af 8000 	nop.w
 80028a0:	20001660 	.word	0x20001660
 80028a4:	200000c8 	.word	0x200000c8
 80028a8:	51eb851f 	.word	0x51eb851f
 80028ac:	40091eb8 	.word	0x40091eb8

080028b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	4b27      	ldr	r3, [pc, #156]	; (8002958 <MX_DMA_Init+0xa8>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	4a26      	ldr	r2, [pc, #152]	; (8002958 <MX_DMA_Init+0xa8>)
 80028c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028c4:	6313      	str	r3, [r2, #48]	; 0x30
 80028c6:	4b24      	ldr	r3, [pc, #144]	; (8002958 <MX_DMA_Init+0xa8>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	603b      	str	r3, [r7, #0]
 80028d6:	4b20      	ldr	r3, [pc, #128]	; (8002958 <MX_DMA_Init+0xa8>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4a1f      	ldr	r2, [pc, #124]	; (8002958 <MX_DMA_Init+0xa8>)
 80028dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028e0:	6313      	str	r3, [r2, #48]	; 0x30
 80028e2:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <MX_DMA_Init+0xa8>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80028ee:	2200      	movs	r2, #0
 80028f0:	2105      	movs	r1, #5
 80028f2:	200c      	movs	r0, #12
 80028f4:	f002 fc06 	bl	8005104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80028f8:	200c      	movs	r0, #12
 80028fa:	f002 fc1f 	bl	800513c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80028fe:	2200      	movs	r2, #0
 8002900:	2105      	movs	r1, #5
 8002902:	200e      	movs	r0, #14
 8002904:	f002 fbfe 	bl	8005104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002908:	200e      	movs	r0, #14
 800290a:	f002 fc17 	bl	800513c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800290e:	2200      	movs	r2, #0
 8002910:	2105      	movs	r1, #5
 8002912:	2010      	movs	r0, #16
 8002914:	f002 fbf6 	bl	8005104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002918:	2010      	movs	r0, #16
 800291a:	f002 fc0f 	bl	800513c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800291e:	2200      	movs	r2, #0
 8002920:	2105      	movs	r1, #5
 8002922:	2011      	movs	r0, #17
 8002924:	f002 fbee 	bl	8005104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002928:	2011      	movs	r0, #17
 800292a:	f002 fc07 	bl	800513c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	2105      	movs	r1, #5
 8002932:	203a      	movs	r0, #58	; 0x3a
 8002934:	f002 fbe6 	bl	8005104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002938:	203a      	movs	r0, #58	; 0x3a
 800293a:	f002 fbff 	bl	800513c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	2105      	movs	r1, #5
 8002942:	2046      	movs	r0, #70	; 0x46
 8002944:	f002 fbde 	bl	8005104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002948:	2046      	movs	r0, #70	; 0x46
 800294a:	f002 fbf7 	bl	800513c <HAL_NVIC_EnableIRQ>

}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800

0800295c <flashWriteSettings>:
		dest_addr++;
	}
}

void flashWriteSettings(struct flashConfiguration_s *config)
{
 800295c:	b5b0      	push	{r4, r5, r7, lr}
 800295e:	b08c      	sub	sp, #48	; 0x30
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	// Write settings
	HAL_FLASH_Unlock();
 8002964:	f003 f85c 	bl	8005a20 <HAL_FLASH_Unlock>

	// erase page
	FLASH_EraseInitTypeDef erase_conf;
	erase_conf.TypeErase = FLASH_TYPEERASE_SECTORS; // erase 1 page
 8002968:	2300      	movs	r3, #0
 800296a:	613b      	str	r3, [r7, #16]
	erase_conf.Sector = (uint32_t)(CONFIG_PAGE_ADDR);
 800296c:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <flashWriteSettings+0x78>)
 800296e:	61bb      	str	r3, [r7, #24]
	erase_conf.NbSectors = 1;
 8002970:	2301      	movs	r3, #1
 8002972:	61fb      	str	r3, [r7, #28]

	uint32_t page_error;
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
 8002974:	f107 020c 	add.w	r2, r7, #12
 8002978:	f107 0310 	add.w	r3, r7, #16
 800297c:	4611      	mov	r1, r2
 800297e:	4618      	mov	r0, r3
 8002980:	f003 f9b0 	bl	8005ce4 <HAL_FLASHEx_Erase>

	// write page
	uint32_t *source_addr = (void *)config;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t *dest_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 8002988:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <flashWriteSettings+0x78>)
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 800298c:	2300      	movs	r3, #0
 800298e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002992:	e015      	b.n	80029c0 <flashWriteSettings+0x64>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)dest_addr, *source_addr);
 8002994:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2200      	movs	r2, #0
 800299c:	461c      	mov	r4, r3
 800299e:	4615      	mov	r5, r2
 80029a0:	4622      	mov	r2, r4
 80029a2:	462b      	mov	r3, r5
 80029a4:	2002      	movs	r0, #2
 80029a6:	f002 ffe7 	bl	8005978 <HAL_FLASH_Program>
		source_addr++;
 80029aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ac:	3304      	adds	r3, #4
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
		dest_addr++;
 80029b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b2:	3304      	adds	r3, #4
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 80029b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029ba:	3301      	adds	r3, #1
 80029bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80029c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029c4:	2b89      	cmp	r3, #137	; 0x89
 80029c6:	d9e5      	bls.n	8002994 <flashWriteSettings+0x38>
	}

	HAL_FLASH_Lock();
 80029c8:	f003 f84c 	bl	8005a64 <HAL_FLASH_Lock>
}
 80029cc:	bf00      	nop
 80029ce:	3730      	adds	r7, #48	; 0x30
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bdb0      	pop	{r4, r5, r7, pc}
 80029d4:	0803f800 	.word	0x0803f800

080029d8 <flashFillStructure>:

void flashFillStructure(struct flashConfiguration_s *config)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
	config->writeFlag = 0xAA;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	22aa      	movs	r2, #170	; 0xaa
 80029e4:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
 80029ea:	e154      	b.n	8002c96 <flashFillStructure+0x2be>
		config->stabConstants[i].pJoyUnitCast = rStabConstants[i].pJoyUnitCast;
 80029ec:	7bf9      	ldrb	r1, [r7, #15]
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	48ae      	ldr	r0, [pc, #696]	; (8002cac <flashFillStructure+0x2d4>)
 80029f2:	460b      	mov	r3, r1
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	440b      	add	r3, r1
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4403      	add	r3, r0
 80029fc:	3304      	adds	r3, #4
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	4602      	mov	r2, r0
 8002a10:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pSpeedDyn = rStabConstants[i].pSpeedDyn;
 8002a12:	7bf9      	ldrb	r1, [r7, #15]
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	48a5      	ldr	r0, [pc, #660]	; (8002cac <flashFillStructure+0x2d4>)
 8002a18:	460b      	mov	r3, r1
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	440b      	add	r3, r1
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	4403      	add	r3, r0
 8002a22:	3308      	adds	r3, #8
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	3305      	adds	r3, #5
 8002a34:	4602      	mov	r2, r0
 8002a36:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pErrGain = rStabConstants[i].pErrGain;
 8002a38:	7bf9      	ldrb	r1, [r7, #15]
 8002a3a:	7bfa      	ldrb	r2, [r7, #15]
 8002a3c:	489b      	ldr	r0, [pc, #620]	; (8002cac <flashFillStructure+0x2d4>)
 8002a3e:	460b      	mov	r3, r1
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	440b      	add	r3, r1
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4403      	add	r3, r0
 8002a48:	330c      	adds	r3, #12
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	3308      	adds	r3, #8
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T1 = rStabConstants[i].aFilter[POS_FILTER].T;
 8002a60:	7bf9      	ldrb	r1, [r7, #15]
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	4891      	ldr	r0, [pc, #580]	; (8002cac <flashFillStructure+0x2d4>)
 8002a66:	460b      	mov	r3, r1
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4403      	add	r3, r0
 8002a70:	3310      	adds	r3, #16
 8002a72:	6818      	ldr	r0, [r3, #0]
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	3308      	adds	r3, #8
 8002a82:	3305      	adds	r3, #5
 8002a84:	4602      	mov	r2, r0
 8002a86:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T2 = rStabConstants[i].aFilter[SPEED_FILTER].T;
 8002a88:	7bf9      	ldrb	r1, [r7, #15]
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	4887      	ldr	r0, [pc, #540]	; (8002cac <flashFillStructure+0x2d4>)
 8002a8e:	460b      	mov	r3, r1
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	440b      	add	r3, r1
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4403      	add	r3, r0
 8002a98:	3318      	adds	r3, #24
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	3310      	adds	r3, #16
 8002aaa:	3301      	adds	r3, #1
 8002aac:	4602      	mov	r2, r0
 8002aae:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K1 = rStabConstants[i].aFilter[POS_FILTER].K;
 8002ab0:	7bf9      	ldrb	r1, [r7, #15]
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	487d      	ldr	r0, [pc, #500]	; (8002cac <flashFillStructure+0x2d4>)
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	440b      	add	r3, r1
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4403      	add	r3, r0
 8002ac0:	3314      	adds	r3, #20
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	3310      	adds	r3, #16
 8002ad2:	3305      	adds	r3, #5
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K2 = rStabConstants[i].aFilter[SPEED_FILTER].K;
 8002ad8:	7bf9      	ldrb	r1, [r7, #15]
 8002ada:	7bfa      	ldrb	r2, [r7, #15]
 8002adc:	4873      	ldr	r0, [pc, #460]	; (8002cac <flashFillStructure+0x2d4>)
 8002ade:	460b      	mov	r3, r1
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4403      	add	r3, r0
 8002ae8:	331c      	adds	r3, #28
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	3318      	adds	r3, #24
 8002afa:	3301      	adds	r3, #1
 8002afc:	4602      	mov	r2, r0
 8002afe:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_pGain = rStabConstants[i].pid.pGain;
 8002b00:	7bf9      	ldrb	r1, [r7, #15]
 8002b02:	7bfa      	ldrb	r2, [r7, #15]
 8002b04:	4869      	ldr	r0, [pc, #420]	; (8002cac <flashFillStructure+0x2d4>)
 8002b06:	460b      	mov	r3, r1
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	440b      	add	r3, r1
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4403      	add	r3, r0
 8002b10:	3328      	adds	r3, #40	; 0x28
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	3318      	adds	r3, #24
 8002b22:	3305      	adds	r3, #5
 8002b24:	4602      	mov	r2, r0
 8002b26:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iGain = rStabConstants[i].pid.iGain;
 8002b28:	7bf9      	ldrb	r1, [r7, #15]
 8002b2a:	7bfa      	ldrb	r2, [r7, #15]
 8002b2c:	485f      	ldr	r0, [pc, #380]	; (8002cac <flashFillStructure+0x2d4>)
 8002b2e:	460b      	mov	r3, r1
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	440b      	add	r3, r1
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4403      	add	r3, r0
 8002b38:	332c      	adds	r3, #44	; 0x2c
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	3320      	adds	r3, #32
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMax = rStabConstants[i].pid.iMax;
 8002b50:	7bf9      	ldrb	r1, [r7, #15]
 8002b52:	7bfa      	ldrb	r2, [r7, #15]
 8002b54:	4855      	ldr	r0, [pc, #340]	; (8002cac <flashFillStructure+0x2d4>)
 8002b56:	460b      	mov	r3, r1
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	440b      	add	r3, r1
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4403      	add	r3, r0
 8002b60:	3330      	adds	r3, #48	; 0x30
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	3320      	adds	r3, #32
 8002b72:	3305      	adds	r3, #5
 8002b74:	4602      	mov	r2, r0
 8002b76:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMin = rStabConstants[i].pid.iMin;
 8002b78:	7bf9      	ldrb	r1, [r7, #15]
 8002b7a:	7bfa      	ldrb	r2, [r7, #15]
 8002b7c:	484b      	ldr	r0, [pc, #300]	; (8002cac <flashFillStructure+0x2d4>)
 8002b7e:	460b      	mov	r3, r1
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	440b      	add	r3, r1
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4403      	add	r3, r0
 8002b88:	3334      	adds	r3, #52	; 0x34
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	3328      	adds	r3, #40	; 0x28
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMin = rStabConstants[i].pThrustersMin;
 8002ba0:	7bf9      	ldrb	r1, [r7, #15]
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	4841      	ldr	r0, [pc, #260]	; (8002cac <flashFillStructure+0x2d4>)
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4403      	add	r3, r0
 8002bb0:	3338      	adds	r3, #56	; 0x38
 8002bb2:	6818      	ldr	r0, [r3, #0]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3328      	adds	r3, #40	; 0x28
 8002bc2:	3305      	adds	r3, #5
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMax = rStabConstants[i].pThrustersMax;
 8002bc8:	7bf9      	ldrb	r1, [r7, #15]
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	4837      	ldr	r0, [pc, #220]	; (8002cac <flashFillStructure+0x2d4>)
 8002bce:	460b      	mov	r3, r1
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	440b      	add	r3, r1
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4403      	add	r3, r0
 8002bd8:	333c      	adds	r3, #60	; 0x3c
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	3330      	adds	r3, #48	; 0x30
 8002bea:	3301      	adds	r3, #1
 8002bec:	4602      	mov	r2, r0
 8002bee:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_T = rStabConstants[i].aFilter[THRUSTERS_FILTER].T;
 8002bf0:	7bf9      	ldrb	r1, [r7, #15]
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
 8002bf4:	482d      	ldr	r0, [pc, #180]	; (8002cac <flashFillStructure+0x2d4>)
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4403      	add	r3, r0
 8002c00:	3320      	adds	r3, #32
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	3330      	adds	r3, #48	; 0x30
 8002c12:	3305      	adds	r3, #5
 8002c14:	4602      	mov	r2, r0
 8002c16:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_K = rStabConstants[i].aFilter[THRUSTERS_FILTER].K;
 8002c18:	7bf9      	ldrb	r1, [r7, #15]
 8002c1a:	7bfa      	ldrb	r2, [r7, #15]
 8002c1c:	4823      	ldr	r0, [pc, #140]	; (8002cac <flashFillStructure+0x2d4>)
 8002c1e:	460b      	mov	r3, r1
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	440b      	add	r3, r1
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4403      	add	r3, r0
 8002c28:	3324      	adds	r3, #36	; 0x24
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	3338      	adds	r3, #56	; 0x38
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMax = rStabConstants[i].sOutSummatorMax;
 8002c40:	7bf9      	ldrb	r1, [r7, #15]
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	4819      	ldr	r0, [pc, #100]	; (8002cac <flashFillStructure+0x2d4>)
 8002c46:	460b      	mov	r3, r1
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	440b      	add	r3, r1
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4403      	add	r3, r0
 8002c50:	3340      	adds	r3, #64	; 0x40
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	3338      	adds	r3, #56	; 0x38
 8002c62:	3305      	adds	r3, #5
 8002c64:	4602      	mov	r2, r0
 8002c66:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMin = rStabConstants[i].sOutSummatorMin;
 8002c68:	7bf9      	ldrb	r1, [r7, #15]
 8002c6a:	7bfa      	ldrb	r2, [r7, #15]
 8002c6c:	480f      	ldr	r0, [pc, #60]	; (8002cac <flashFillStructure+0x2d4>)
 8002c6e:	460b      	mov	r3, r1
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	440b      	add	r3, r1
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4403      	add	r3, r0
 8002c78:	3344      	adds	r3, #68	; 0x44
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	3340      	adds	r3, #64	; 0x40
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	3301      	adds	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	f67f aea7 	bls.w	80029ec <flashFillStructure+0x14>
//		config->thrusters[i].kBackward = rThrusters[i].kBackward;
//		config->thrusters[i].sForward = rThrusters[i].sForward;
//		config->thrusters[i].sBackward = rThrusters[i].sBackward;
//		config->thrusters[i].inverse = rThrusters[i].inverse;
//	}
}
 8002c9e:	bf00      	nop
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	20001724 	.word	0x20001724

08002cb0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of mutData */
  mutDataHandle = osMutexNew(&mutData_attributes);
 8002cb6:	4844      	ldr	r0, [pc, #272]	; (8002dc8 <MX_FREERTOS_Init+0x118>)
 8002cb8:	f007 fe44 	bl	800a944 <osMutexNew>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4a43      	ldr	r2, [pc, #268]	; (8002dcc <MX_FREERTOS_Init+0x11c>)
 8002cc0:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of tUartTimer */
  tUartTimerHandle = osTimerNew(func_tUartTimer, osTimerOnce, NULL, &tUartTimer_attributes);
 8002cc2:	4b43      	ldr	r3, [pc, #268]	; (8002dd0 <MX_FREERTOS_Init+0x120>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4842      	ldr	r0, [pc, #264]	; (8002dd4 <MX_FREERTOS_Init+0x124>)
 8002cca:	f007 fdbf 	bl	800a84c <osTimerNew>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4a41      	ldr	r2, [pc, #260]	; (8002dd8 <MX_FREERTOS_Init+0x128>)
 8002cd2:	6013      	str	r3, [r2, #0]

  /* creation of tSilence */
  tSilenceHandle = osTimerNew(tSilence_func, osTimerOnce, NULL, &tSilence_attributes);
 8002cd4:	4b41      	ldr	r3, [pc, #260]	; (8002ddc <MX_FREERTOS_Init+0x12c>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4841      	ldr	r0, [pc, #260]	; (8002de0 <MX_FREERTOS_Init+0x130>)
 8002cdc:	f007 fdb6 	bl	800a84c <osTimerNew>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	4a40      	ldr	r2, [pc, #256]	; (8002de4 <MX_FREERTOS_Init+0x134>)
 8002ce4:	6013      	str	r3, [r2, #0]

  /* creation of tTechCommTImer */
  tTechCommTImerHandle = osTimerNew(tTechCommTImer_callback, osTimerOnce, NULL, &tTechCommTImer_attributes);
 8002ce6:	4b40      	ldr	r3, [pc, #256]	; (8002de8 <MX_FREERTOS_Init+0x138>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2100      	movs	r1, #0
 8002cec:	483f      	ldr	r0, [pc, #252]	; (8002dec <MX_FREERTOS_Init+0x13c>)
 8002cee:	f007 fdad 	bl	800a84c <osTimerNew>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4a3e      	ldr	r2, [pc, #248]	; (8002df0 <MX_FREERTOS_Init+0x140>)
 8002cf6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE BEGIN RTOS_TIMERS */
  SilenceTimer = xTimerCreate("silence", DELAY_SILENCE/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) tSilence_func);
 8002cf8:	4b39      	ldr	r3, [pc, #228]	; (8002de0 <MX_FREERTOS_Init+0x130>)
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d04:	483b      	ldr	r0, [pc, #236]	; (8002df4 <MX_FREERTOS_Init+0x144>)
 8002d06:	f009 ff1f 	bl	800cb48 <xTimerCreate>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4a3a      	ldr	r2, [pc, #232]	; (8002df8 <MX_FREERTOS_Init+0x148>)
 8002d0e:	6013      	str	r3, [r2, #0]
  UARTTimer = xTimerCreate("timer", DELAY_TIMER_TASK/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) func_tUartTimer);
 8002d10:	4b30      	ldr	r3, [pc, #192]	; (8002dd4 <MX_FREERTOS_Init+0x124>)
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	2300      	movs	r3, #0
 8002d16:	2200      	movs	r2, #0
 8002d18:	211e      	movs	r1, #30
 8002d1a:	4838      	ldr	r0, [pc, #224]	; (8002dfc <MX_FREERTOS_Init+0x14c>)
 8002d1c:	f009 ff14 	bl	800cb48 <xTimerCreate>
 8002d20:	4603      	mov	r3, r0
 8002d22:	4a37      	ldr	r2, [pc, #220]	; (8002e00 <MX_FREERTOS_Init+0x150>)
 8002d24:	6013      	str	r3, [r2, #0]

  xTimerStart(SilenceTimer, 10);
 8002d26:	4b34      	ldr	r3, [pc, #208]	; (8002df8 <MX_FREERTOS_Init+0x148>)
 8002d28:	681c      	ldr	r4, [r3, #0]
 8002d2a:	f009 f995 	bl	800c058 <xTaskGetTickCount>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	230a      	movs	r3, #10
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	2300      	movs	r3, #0
 8002d36:	2101      	movs	r1, #1
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f009 ff9f 	bl	800cc7c <xTimerGenericCommand>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002d3e:	4a31      	ldr	r2, [pc, #196]	; (8002e04 <MX_FREERTOS_Init+0x154>)
 8002d40:	2100      	movs	r1, #0
 8002d42:	4831      	ldr	r0, [pc, #196]	; (8002e08 <MX_FREERTOS_Init+0x158>)
 8002d44:	f007 fc92 	bl	800a66c <osThreadNew>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	4a30      	ldr	r2, [pc, #192]	; (8002e0c <MX_FREERTOS_Init+0x15c>)
 8002d4c:	6013      	str	r3, [r2, #0]

  /* creation of tLedBlinkingTask */
  tLedBlinkingTaskHandle = osThreadNew(func_tLedBlinkingTask, NULL, &tLedBlinkingTask_attributes);
 8002d4e:	4a30      	ldr	r2, [pc, #192]	; (8002e10 <MX_FREERTOS_Init+0x160>)
 8002d50:	2100      	movs	r1, #0
 8002d52:	4830      	ldr	r0, [pc, #192]	; (8002e14 <MX_FREERTOS_Init+0x164>)
 8002d54:	f007 fc8a 	bl	800a66c <osThreadNew>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	4a2f      	ldr	r2, [pc, #188]	; (8002e18 <MX_FREERTOS_Init+0x168>)
 8002d5c:	6013      	str	r3, [r2, #0]

  /* creation of tVmaCommTask */
  tVmaCommTaskHandle = osThreadNew(func_tVmaCommTask, NULL, &tVmaCommTask_attributes);
 8002d5e:	4a2f      	ldr	r2, [pc, #188]	; (8002e1c <MX_FREERTOS_Init+0x16c>)
 8002d60:	2100      	movs	r1, #0
 8002d62:	482f      	ldr	r0, [pc, #188]	; (8002e20 <MX_FREERTOS_Init+0x170>)
 8002d64:	f007 fc82 	bl	800a66c <osThreadNew>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4a2e      	ldr	r2, [pc, #184]	; (8002e24 <MX_FREERTOS_Init+0x174>)
 8002d6c:	6013      	str	r3, [r2, #0]

  /* creation of tImuCommTask */
  tImuCommTaskHandle = osThreadNew(func_tImuCommTask, NULL, &tImuCommTask_attributes);
 8002d6e:	4a2e      	ldr	r2, [pc, #184]	; (8002e28 <MX_FREERTOS_Init+0x178>)
 8002d70:	2100      	movs	r1, #0
 8002d72:	482e      	ldr	r0, [pc, #184]	; (8002e2c <MX_FREERTOS_Init+0x17c>)
 8002d74:	f007 fc7a 	bl	800a66c <osThreadNew>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	4a2d      	ldr	r2, [pc, #180]	; (8002e30 <MX_FREERTOS_Init+0x180>)
 8002d7c:	6013      	str	r3, [r2, #0]

  /* creation of tStabilizationTask */
  tStabilizationTaskHandle = osThreadNew(func_tStabilizationTask, NULL, &tStabilizationTask_attributes);
 8002d7e:	4a2d      	ldr	r2, [pc, #180]	; (8002e34 <MX_FREERTOS_Init+0x184>)
 8002d80:	2100      	movs	r1, #0
 8002d82:	482d      	ldr	r0, [pc, #180]	; (8002e38 <MX_FREERTOS_Init+0x188>)
 8002d84:	f007 fc72 	bl	800a66c <osThreadNew>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	4a2c      	ldr	r2, [pc, #176]	; (8002e3c <MX_FREERTOS_Init+0x18c>)
 8002d8c:	6013      	str	r3, [r2, #0]

  /* creation of tDevCommTask */
  tDevCommTaskHandle = osThreadNew(func_tDevCommTask, NULL, &tDevCommTask_attributes);
 8002d8e:	4a2c      	ldr	r2, [pc, #176]	; (8002e40 <MX_FREERTOS_Init+0x190>)
 8002d90:	2100      	movs	r1, #0
 8002d92:	482c      	ldr	r0, [pc, #176]	; (8002e44 <MX_FREERTOS_Init+0x194>)
 8002d94:	f007 fc6a 	bl	800a66c <osThreadNew>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	4a2b      	ldr	r2, [pc, #172]	; (8002e48 <MX_FREERTOS_Init+0x198>)
 8002d9c:	6013      	str	r3, [r2, #0]

  /* creation of tSensCommTask */
  tSensCommTaskHandle = osThreadNew(func_tSensCommTask, NULL, &tSensCommTask_attributes);
 8002d9e:	4a2b      	ldr	r2, [pc, #172]	; (8002e4c <MX_FREERTOS_Init+0x19c>)
 8002da0:	2100      	movs	r1, #0
 8002da2:	482b      	ldr	r0, [pc, #172]	; (8002e50 <MX_FREERTOS_Init+0x1a0>)
 8002da4:	f007 fc62 	bl	800a66c <osThreadNew>
 8002da8:	4603      	mov	r3, r0
 8002daa:	4a2a      	ldr	r2, [pc, #168]	; (8002e54 <MX_FREERTOS_Init+0x1a4>)
 8002dac:	6013      	str	r3, [r2, #0]

  /* creation of tPcCommTask */
  tPcCommTaskHandle = osThreadNew(func_tPcCommTask, NULL, &tPcCommTask_attributes);
 8002dae:	4a2a      	ldr	r2, [pc, #168]	; (8002e58 <MX_FREERTOS_Init+0x1a8>)
 8002db0:	2100      	movs	r1, #0
 8002db2:	482a      	ldr	r0, [pc, #168]	; (8002e5c <MX_FREERTOS_Init+0x1ac>)
 8002db4:	f007 fc5a 	bl	800a66c <osThreadNew>
 8002db8:	4603      	mov	r3, r0
 8002dba:	4a29      	ldr	r2, [pc, #164]	; (8002e60 <MX_FREERTOS_Init+0x1b0>)
 8002dbc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002dbe:	bf00      	nop
 8002dc0:	3704      	adds	r7, #4
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd90      	pop	{r4, r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	0800e9b4 	.word	0x0800e9b4
 8002dcc:	20001540 	.word	0x20001540
 8002dd0:	0800e984 	.word	0x0800e984
 8002dd4:	0800320d 	.word	0x0800320d
 8002dd8:	20001534 	.word	0x20001534
 8002ddc:	0800e994 	.word	0x0800e994
 8002de0:	08003319 	.word	0x08003319
 8002de4:	20001538 	.word	0x20001538
 8002de8:	0800e9a4 	.word	0x0800e9a4
 8002dec:	080033ed 	.word	0x080033ed
 8002df0:	2000153c 	.word	0x2000153c
 8002df4:	0800e830 	.word	0x0800e830
 8002df8:	2000017c 	.word	0x2000017c
 8002dfc:	0800e838 	.word	0x0800e838
 8002e00:	20000178 	.word	0x20000178
 8002e04:	0800e864 	.word	0x0800e864
 8002e08:	08002e65 	.word	0x08002e65
 8002e0c:	20000180 	.word	0x20000180
 8002e10:	0800e888 	.word	0x0800e888
 8002e14:	08002e75 	.word	0x08002e75
 8002e18:	20000184 	.word	0x20000184
 8002e1c:	0800e8ac 	.word	0x0800e8ac
 8002e20:	08002eb9 	.word	0x08002eb9
 8002e24:	20000454 	.word	0x20000454
 8002e28:	0800e8d0 	.word	0x0800e8d0
 8002e2c:	08002f85 	.word	0x08002f85
 8002e30:	20000724 	.word	0x20000724
 8002e34:	0800e8f4 	.word	0x0800e8f4
 8002e38:	08003065 	.word	0x08003065
 8002e3c:	200009f4 	.word	0x200009f4
 8002e40:	0800e918 	.word	0x0800e918
 8002e44:	080030cd 	.word	0x080030cd
 8002e48:	20000cc4 	.word	0x20000cc4
 8002e4c:	0800e93c 	.word	0x0800e93c
 8002e50:	080031a9 	.word	0x080031a9
 8002e54:	20000f94 	.word	0x20000f94
 8002e58:	0800e960 	.word	0x0800e960
 8002e5c:	080031fd 	.word	0x080031fd
 8002e60:	20001264 	.word	0x20001264

08002e64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	f007 fc8f 	bl	800a790 <osDelay>
 8002e72:	e7fb      	b.n	8002e6c <StartDefaultTask+0x8>

08002e74 <func_tLedBlinkingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tLedBlinkingTask */
void func_tLedBlinkingTask(void *argument)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tLedBlinkingTask */
  /* Infinite loop */
  for(;;)
  {
        HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 8002e7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e80:	480c      	ldr	r0, [pc, #48]	; (8002eb4 <func_tLedBlinkingTask+0x40>)
 8002e82:	f003 fa06 	bl	8006292 <HAL_GPIO_TogglePin>
        osDelayUntil(DELAY_LED_TASK);
 8002e86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e8a:	f007 fc9c 	bl	800a7c6 <osDelayUntil>
        HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 8002e8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e92:	4808      	ldr	r0, [pc, #32]	; (8002eb4 <func_tLedBlinkingTask+0x40>)
 8002e94:	f003 f9fd 	bl	8006292 <HAL_GPIO_TogglePin>
        osDelayUntil(DELAY_LED_TASK);
 8002e98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e9c:	f007 fc93 	bl	800a7c6 <osDelayUntil>
        HAL_GPIO_TogglePin(led1_GPIO_Port, led3_Pin);
 8002ea0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ea4:	4803      	ldr	r0, [pc, #12]	; (8002eb4 <func_tLedBlinkingTask+0x40>)
 8002ea6:	f003 f9f4 	bl	8006292 <HAL_GPIO_TogglePin>
        osDelayUntil(DELAY_LED_TASK);
 8002eaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002eae:	f007 fc8a 	bl	800a7c6 <osDelayUntil>
        HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 8002eb2:	e7e3      	b.n	8002e7c <func_tLedBlinkingTask+0x8>
 8002eb4:	40020400 	.word	0x40020400

08002eb8 <func_tVmaCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tVmaCommTask */
void func_tVmaCommTask(void *argument)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tVmaCommTask */
	uint8_t transaction = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8002ec4:	4b2a      	ldr	r3, [pc, #168]	; (8002f70 <func_tVmaCommTask+0xb8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2114      	movs	r1, #20
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f008 faac 	bl	800b428 <xQueueSemaphoreTake>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d10b      	bne.n	8002eee <func_tVmaCommTask+0x36>
			fillThrustersRequest(ThrustersRequestBuffer, transaction);
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4826      	ldr	r0, [pc, #152]	; (8002f74 <func_tVmaCommTask+0xbc>)
 8002edc:	f001 f92e 	bl	800413c <fillThrustersRequest>
			xSemaphoreGive(mutDataHandle);
 8002ee0:	4b23      	ldr	r3, [pc, #140]	; (8002f70 <func_tVmaCommTask+0xb8>)
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2100      	movs	r1, #0
 8002eea:	f008 f823 	bl	800af34 <xQueueGenericSend>
		}

		uartBus[THRUSTERS_UART].txBuffer = ThrustersRequestBuffer;
 8002eee:	4b22      	ldr	r3, [pc, #136]	; (8002f78 <func_tVmaCommTask+0xc0>)
 8002ef0:	4a20      	ldr	r2, [pc, #128]	; (8002f74 <func_tVmaCommTask+0xbc>)
 8002ef2:	63da      	str	r2, [r3, #60]	; 0x3c
		uartBus[THRUSTERS_UART].txLength = THRUSTERS_REQUEST_LENGTH;
 8002ef4:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <func_tVmaCommTask+0xc0>)
 8002ef6:	2205      	movs	r2, #5
 8002ef8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

		uartBus[THRUSTERS_UART].rxBuffer = ThrustersResponseBuffer[transaction];
 8002efc:	7bfa      	ldrb	r2, [r7, #15]
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	4a1d      	ldr	r2, [pc, #116]	; (8002f7c <func_tVmaCommTask+0xc4>)
 8002f06:	4413      	add	r3, r2
 8002f08:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <func_tVmaCommTask+0xc0>)
 8002f0a:	6393      	str	r3, [r2, #56]	; 0x38
		uartBus[THRUSTERS_UART].rxLength = THRUSTERS_RESPONSE_LENGTH;
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <func_tVmaCommTask+0xc0>)
 8002f0e:	2209      	movs	r2, #9
 8002f10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		transmitAndReceive(&uartBus[THRUSTERS_UART], false);
 8002f14:	2100      	movs	r1, #0
 8002f16:	481a      	ldr	r0, [pc, #104]	; (8002f80 <func_tVmaCommTask+0xc8>)
 8002f18:	f7fe fa9e 	bl	8001458 <transmitAndReceive>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8002f1c:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <func_tVmaCommTask+0xb8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2114      	movs	r1, #20
 8002f22:	4618      	mov	r0, r3
 8002f24:	f008 fa80 	bl	800b428 <xQueueSemaphoreTake>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d111      	bne.n	8002f52 <func_tVmaCommTask+0x9a>
			fillThrustersResponse(ThrustersResponseBuffer[transaction], transaction);
 8002f2e:	7bfa      	ldrb	r2, [r7, #15]
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	4a11      	ldr	r2, [pc, #68]	; (8002f7c <func_tVmaCommTask+0xc4>)
 8002f38:	4413      	add	r3, r2
 8002f3a:	7bfa      	ldrb	r2, [r7, #15]
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f001 f976 	bl	8004230 <fillThrustersResponse>
			xSemaphoreGive(mutDataHandle);
 8002f44:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <func_tVmaCommTask+0xb8>)
 8002f46:	6818      	ldr	r0, [r3, #0]
 8002f48:	2300      	movs	r3, #0
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	f007 fff1 	bl	800af34 <xQueueGenericSend>
		}

		transaction = (transaction + 1) % THRUSTERS_NUMBER;
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	3301      	adds	r3, #1
 8002f56:	425a      	negs	r2, r3
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	f002 0207 	and.w	r2, r2, #7
 8002f60:	bf58      	it	pl
 8002f62:	4253      	negpl	r3, r2
 8002f64:	73fb      	strb	r3, [r7, #15]
		osDelayUntil(DELAY_THRUSTERS_TASK);
 8002f66:	2014      	movs	r0, #20
 8002f68:	f007 fc2d 	bl	800a7c6 <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8002f6c:	e7aa      	b.n	8002ec4 <func_tVmaCommTask+0xc>
 8002f6e:	bf00      	nop
 8002f70:	20001540 	.word	0x20001540
 8002f74:	20001b30 	.word	0x20001b30
 8002f78:	200000c8 	.word	0x200000c8
 8002f7c:	20001b38 	.word	0x20001b38
 8002f80:	20000100 	.word	0x20000100

08002f84 <func_tImuCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tImuCommTask */
void func_tImuCommTask(void *argument)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tImuCommTask */
  /* Infinite loop */
  for(;;)
  {
	  	if(rSensors.resetIMU) {
 8002f8c:	4b2e      	ldr	r3, [pc, #184]	; (8003048 <func_tImuCommTask+0xc4>)
 8002f8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d014      	beq.n	8002fc0 <func_tImuCommTask+0x3c>
			uartBus[IMU_UART].txBuffer = ImuResetRequestBuffer;
 8002f96:	4b2d      	ldr	r3, [pc, #180]	; (800304c <func_tImuCommTask+0xc8>)
 8002f98:	4a2d      	ldr	r2, [pc, #180]	; (8003050 <func_tImuCommTask+0xcc>)
 8002f9a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH;
 8002f9e:	4b2b      	ldr	r3, [pc, #172]	; (800304c <func_tImuCommTask+0xc8>)
 8002fa0:	2207      	movs	r2, #7
 8002fa2:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	482a      	ldr	r0, [pc, #168]	; (8003054 <func_tImuCommTask+0xd0>)
 8002faa:	f7fe f9eb 	bl	8001384 <transmitPackage>

	  		rSensors.pressure_null = rSensors.pressure;
 8002fae:	4b26      	ldr	r3, [pc, #152]	; (8003048 <func_tImuCommTask+0xc4>)
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb2:	4a25      	ldr	r2, [pc, #148]	; (8003048 <func_tImuCommTask+0xc4>)
 8002fb4:	6593      	str	r3, [r2, #88]	; 0x58
	  		rSensors.resetIMU = false;
 8002fb6:	4b24      	ldr	r3, [pc, #144]	; (8003048 <func_tImuCommTask+0xc4>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002fbe:	e03f      	b.n	8003040 <func_tImuCommTask+0xbc>
	  	}
	  	else {
	  		uartBus[IMU_UART].txBuffer = ImuRequestBuffer;
 8002fc0:	4b22      	ldr	r3, [pc, #136]	; (800304c <func_tImuCommTask+0xc8>)
 8002fc2:	4a25      	ldr	r2, [pc, #148]	; (8003058 <func_tImuCommTask+0xd4>)
 8002fc4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	  		uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH;
 8002fc8:	4b20      	ldr	r3, [pc, #128]	; (800304c <func_tImuCommTask+0xc8>)
 8002fca:	2207      	movs	r2, #7
 8002fcc:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

	  		uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
 8002fd0:	4b1e      	ldr	r3, [pc, #120]	; (800304c <func_tImuCommTask+0xc8>)
 8002fd2:	4a22      	ldr	r2, [pc, #136]	; (800305c <func_tImuCommTask+0xd8>)
 8002fd4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  		uartBus[IMU_UART].rxLength = IMU_RESPONSE_LENGTH*IMU_CHECKSUMS;
 8002fd8:	4b1c      	ldr	r3, [pc, #112]	; (800304c <func_tImuCommTask+0xc8>)
 8002fda:	224b      	movs	r2, #75	; 0x4b
 8002fdc:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

	  		HAL_UART_Receive_IT(uartBus[IMU_UART].huart, uartBus[IMU_UART].rxBuffer, uartBus[IMU_UART].rxLength);
 8002fe0:	4b1a      	ldr	r3, [pc, #104]	; (800304c <func_tImuCommTask+0xc8>)
 8002fe2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fe6:	4a19      	ldr	r2, [pc, #100]	; (800304c <func_tImuCommTask+0xc8>)
 8002fe8:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 8002fec:	4a17      	ldr	r2, [pc, #92]	; (800304c <func_tImuCommTask+0xc8>)
 8002fee:	f892 20cc 	ldrb.w	r2, [r2, #204]	; 0xcc
 8002ff2:	b292      	uxth	r2, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f005 ff47 	bl	8008e88 <HAL_UART_Receive_IT>
	  		HAL_UART_Transmit_IT(uartBus[IMU_UART].huart, uartBus[IMU_UART].txBuffer, uartBus[IMU_UART].txLength);
 8002ffa:	4b14      	ldr	r3, [pc, #80]	; (800304c <func_tImuCommTask+0xc8>)
 8002ffc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003000:	4a12      	ldr	r2, [pc, #72]	; (800304c <func_tImuCommTask+0xc8>)
 8003002:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
 8003006:	4a11      	ldr	r2, [pc, #68]	; (800304c <func_tImuCommTask+0xc8>)
 8003008:	f892 20cd 	ldrb.w	r2, [r2, #205]	; 0xcd
 800300c:	b292      	uxth	r2, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f005 fef5 	bl	8008dfe <HAL_UART_Transmit_IT>
	  		osDelayUntil(DELAY_IMU_TASK);
 8003014:	200a      	movs	r0, #10
 8003016:	f007 fbd6 	bl	800a7c6 <osDelayUntil>

	  		//if(transmitAndReceive(&uartBus[IMU_UART], false)) {
	  			if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_IMU_TASK) == pdTRUE) {
 800301a:	4b11      	ldr	r3, [pc, #68]	; (8003060 <func_tImuCommTask+0xdc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	210a      	movs	r1, #10
 8003020:	4618      	mov	r0, r3
 8003022:	f008 fa01 	bl	800b428 <xQueueSemaphoreTake>
 8003026:	4603      	mov	r3, r0
 8003028:	2b01      	cmp	r3, #1
 800302a:	d109      	bne.n	8003040 <func_tImuCommTask+0xbc>
	  				ImuReceive(ImuResponseBuffer);
 800302c:	480b      	ldr	r0, [pc, #44]	; (800305c <func_tImuCommTask+0xd8>)
 800302e:	f7ff fa17 	bl	8002460 <ImuReceive>
	  				xSemaphoreGive(mutDataHandle);
 8003032:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <func_tImuCommTask+0xdc>)
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	2300      	movs	r3, #0
 8003038:	2200      	movs	r2, #0
 800303a:	2100      	movs	r1, #0
 800303c:	f007 ff7a 	bl	800af34 <xQueueGenericSend>
	  			}
	  		//}

	  	}

	  	osDelayUntil(DELAY_IMU_TASK);
 8003040:	200a      	movs	r0, #10
 8003042:	f007 fbc0 	bl	800a7c6 <osDelayUntil>
	  	if(rSensors.resetIMU) {
 8003046:	e7a1      	b.n	8002f8c <func_tImuCommTask+0x8>
 8003048:	20001660 	.word	0x20001660
 800304c:	200000c8 	.word	0x200000c8
 8003050:	20000008 	.word	0x20000008
 8003054:	20000170 	.word	0x20000170
 8003058:	20000000 	.word	0x20000000
 800305c:	20001ae4 	.word	0x20001ae4
 8003060:	20001540 	.word	0x20001540

08003064 <func_tStabilizationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tStabilizationTask */
void func_tStabilizationTask(void *argument)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tStabilizationTask */
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 800306c:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <func_tStabilizationTask+0x60>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	210a      	movs	r1, #10
 8003072:	4618      	mov	r0, r3
 8003074:	f008 f9d8 	bl	800b428 <xQueueSemaphoreTake>
 8003078:	4603      	mov	r3, r0
 800307a:	2b01      	cmp	r3, #1
 800307c:	d11d      	bne.n	80030ba <func_tStabilizationTask+0x56>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800307e:	2300      	movs	r3, #0
 8003080:	73fb      	strb	r3, [r7, #15]
 8003082:	e010      	b.n	80030a6 <func_tStabilizationTask+0x42>
				if (rStabConstants[i].enable) {
 8003084:	7bfa      	ldrb	r2, [r7, #15]
 8003086:	4910      	ldr	r1, [pc, #64]	; (80030c8 <func_tStabilizationTask+0x64>)
 8003088:	4613      	mov	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	440b      	add	r3, r1
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <func_tStabilizationTask+0x3c>
					stabilizationUpdate(i);
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fc3a 	bl	8003914 <stabilizationUpdate>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	3301      	adds	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	2b05      	cmp	r3, #5
 80030aa:	d9eb      	bls.n	8003084 <func_tStabilizationTask+0x20>
				}
			}
			//formThrustVectors();
			xSemaphoreGive(mutDataHandle);
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <func_tStabilizationTask+0x60>)
 80030ae:	6818      	ldr	r0, [r3, #0]
 80030b0:	2300      	movs	r3, #0
 80030b2:	2200      	movs	r2, #0
 80030b4:	2100      	movs	r1, #0
 80030b6:	f007 ff3d 	bl	800af34 <xQueueGenericSend>
		}

		osDelayUntil(DELAY_STABILIZATION_TASK);
 80030ba:	200a      	movs	r0, #10
 80030bc:	f007 fb83 	bl	800a7c6 <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 80030c0:	e7d4      	b.n	800306c <func_tStabilizationTask+0x8>
 80030c2:	bf00      	nop
 80030c4:	20001540 	.word	0x20001540
 80030c8:	20001724 	.word	0x20001724

080030cc <func_tDevCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tDevCommTask */
void func_tDevCommTask(void *argument)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tDevCommTask */
    uint8_t transaction = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 80030d8:	4b2d      	ldr	r3, [pc, #180]	; (8003190 <func_tDevCommTask+0xc4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	210a      	movs	r1, #10
 80030de:	4618      	mov	r0, r3
 80030e0:	f008 f9a2 	bl	800b428 <xQueueSemaphoreTake>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d10b      	bne.n	8003102 <func_tDevCommTask+0x36>
            DevicesRequestUpdate(DevicesRequestBuffer, transaction);
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	4619      	mov	r1, r3
 80030ee:	4829      	ldr	r0, [pc, #164]	; (8003194 <func_tDevCommTask+0xc8>)
 80030f0:	f7fe fbe4 	bl	80018bc <DevicesRequestUpdate>
            xSemaphoreGive(mutDataHandle);
 80030f4:	4b26      	ldr	r3, [pc, #152]	; (8003190 <func_tDevCommTask+0xc4>)
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	2300      	movs	r3, #0
 80030fa:	2200      	movs	r2, #0
 80030fc:	2100      	movs	r1, #0
 80030fe:	f007 ff19 	bl	800af34 <xQueueGenericSend>
        }

		uartBus[DEVICES_UART].txBuffer = DevicesRequestBuffer;
 8003102:	4b25      	ldr	r3, [pc, #148]	; (8003198 <func_tDevCommTask+0xcc>)
 8003104:	4a23      	ldr	r2, [pc, #140]	; (8003194 <func_tDevCommTask+0xc8>)
 8003106:	675a      	str	r2, [r3, #116]	; 0x74
		uartBus[DEVICES_UART].txLength = DEVICES_REQUEST_LENGTH;
 8003108:	4b23      	ldr	r3, [pc, #140]	; (8003198 <func_tDevCommTask+0xcc>)
 800310a:	2207      	movs	r2, #7
 800310c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

		uartBus[DEVICES_UART].rxBuffer = DevicesResponseBuffer[transaction];
 8003110:	7bfa      	ldrb	r2, [r7, #15]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	4a20      	ldr	r2, [pc, #128]	; (800319c <func_tDevCommTask+0xd0>)
 800311c:	4413      	add	r3, r2
 800311e:	4a1e      	ldr	r2, [pc, #120]	; (8003198 <func_tDevCommTask+0xcc>)
 8003120:	6713      	str	r3, [r2, #112]	; 0x70
		uartBus[DEVICES_UART].rxLength = DEVICES_RESPONSE_LENGTH;
 8003122:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <func_tDevCommTask+0xcc>)
 8003124:	220a      	movs	r2, #10
 8003126:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

		transmitAndReceive(&uartBus[DEVICES_UART], false);
 800312a:	2100      	movs	r1, #0
 800312c:	481c      	ldr	r0, [pc, #112]	; (80031a0 <func_tDevCommTask+0xd4>)
 800312e:	f7fe f993 	bl	8001458 <transmitAndReceive>

        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8003132:	4b17      	ldr	r3, [pc, #92]	; (8003190 <func_tDevCommTask+0xc4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	210a      	movs	r1, #10
 8003138:	4618      	mov	r0, r3
 800313a:	f008 f975 	bl	800b428 <xQueueSemaphoreTake>
 800313e:	4603      	mov	r3, r0
 8003140:	2b01      	cmp	r3, #1
 8003142:	d112      	bne.n	800316a <func_tDevCommTask+0x9e>
            DevicesResponseUpdate(DevicesResponseBuffer[transaction], transaction);
 8003144:	7bfa      	ldrb	r2, [r7, #15]
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4a13      	ldr	r2, [pc, #76]	; (800319c <func_tDevCommTask+0xd0>)
 8003150:	4413      	add	r3, r2
 8003152:	7bfa      	ldrb	r2, [r7, #15]
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f7fe fbfa 	bl	8001950 <DevicesResponseUpdate>
            xSemaphoreGive(mutDataHandle);
 800315c:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <func_tDevCommTask+0xc4>)
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	2300      	movs	r3, #0
 8003162:	2200      	movs	r2, #0
 8003164:	2100      	movs	r1, #0
 8003166:	f007 fee5 	bl	800af34 <xQueueGenericSend>
        }

        transaction = (transaction + 1) % DEVICES_NUMBER;
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <func_tDevCommTask+0xd8>)
 8003170:	fb83 3102 	smull	r3, r1, r3, r2
 8003174:	17d3      	asrs	r3, r2, #31
 8003176:	1ac9      	subs	r1, r1, r3
 8003178:	460b      	mov	r3, r1
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	440b      	add	r3, r1
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	1ad1      	subs	r1, r2, r3
 8003182:	460b      	mov	r3, r1
 8003184:	73fb      	strb	r3, [r7, #15]
        osDelayUntil(DELAY_DEVICES_TASK);
 8003186:	200a      	movs	r0, #10
 8003188:	f007 fb1d 	bl	800a7c6 <osDelayUntil>
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 800318c:	e7a4      	b.n	80030d8 <func_tDevCommTask+0xc>
 800318e:	bf00      	nop
 8003190:	20001540 	.word	0x20001540
 8003194:	20001b80 	.word	0x20001b80
 8003198:	200000c8 	.word	0x200000c8
 800319c:	20001b88 	.word	0x20001b88
 80031a0:	20000138 	.word	0x20000138
 80031a4:	2aaaaaab 	.word	0x2aaaaaab

080031a8 <func_tSensCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tSensCommTask */
void func_tSensCommTask(void *argument)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tSensCommTask */
  /* Infinite loop */
  for(;;)
  {
	  receiveI2cPackageDMA(DEV_I2C, SENSORS_PRESSURE_ADDR, PressureResponseBuffer, PRESSURE_SENSOR_SIZE);
 80031b0:	230a      	movs	r3, #10
 80031b2:	4a10      	ldr	r2, [pc, #64]	; (80031f4 <func_tSensCommTask+0x4c>)
 80031b4:	210f      	movs	r1, #15
 80031b6:	2000      	movs	r0, #0
 80031b8:	f7fe fa56 	bl	8001668 <receiveI2cPackageDMA>
	  osDelayUntil(DELAY_SENSOR_TASK);
 80031bc:	200a      	movs	r0, #10
 80031be:	f007 fb02 	bl	800a7c6 <osDelayUntil>
	  if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_SENSOR_TASK) == pdTRUE) {
 80031c2:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <func_tSensCommTask+0x50>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	210a      	movs	r1, #10
 80031c8:	4618      	mov	r0, r3
 80031ca:	f008 f92d 	bl	800b428 <xQueueSemaphoreTake>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d10a      	bne.n	80031ea <func_tSensCommTask+0x42>
	  	  SensorsResponseUpdate(PressureResponseBuffer, DEV_I2C);
 80031d4:	2100      	movs	r1, #0
 80031d6:	4807      	ldr	r0, [pc, #28]	; (80031f4 <func_tSensCommTask+0x4c>)
 80031d8:	f7fe fac2 	bl	8001760 <SensorsResponseUpdate>
	  	  xSemaphoreGive(mutDataHandle);
 80031dc:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <func_tSensCommTask+0x50>)
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	2300      	movs	r3, #0
 80031e2:	2200      	movs	r2, #0
 80031e4:	2100      	movs	r1, #0
 80031e6:	f007 fea5 	bl	800af34 <xQueueGenericSend>
	  }
	  osDelayUntil(DELAY_SENSOR_TASK);
 80031ea:	200a      	movs	r0, #10
 80031ec:	f007 faeb 	bl	800a7c6 <osDelayUntil>
	  receiveI2cPackageDMA(DEV_I2C, SENSORS_PRESSURE_ADDR, PressureResponseBuffer, PRESSURE_SENSOR_SIZE);
 80031f0:	e7de      	b.n	80031b0 <func_tSensCommTask+0x8>
 80031f2:	bf00      	nop
 80031f4:	20001bc4 	.word	0x20001bc4
 80031f8:	20001540 	.word	0x20001540

080031fc <func_tPcCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tPcCommTask */
void func_tPcCommTask(void *argument)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tPcCommTask */
  /* Infinite loop */
  for(;;)
  {
	  osDelayUntil(DELAY_PC_TASK);
 8003204:	200a      	movs	r0, #10
 8003206:	f007 fade 	bl	800a7c6 <osDelayUntil>
 800320a:	e7fb      	b.n	8003204 <func_tPcCommTask+0x8>

0800320c <func_tUartTimer>:
  /* USER CODE END func_tPcCommTask */
}

/* func_tUartTimer function */
void func_tUartTimer(void *argument)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tUartTimer */
	if (uartBus[SHORE_UART].packageReceived) {
 8003214:	4b3d      	ldr	r3, [pc, #244]	; (800330c <func_tUartTimer+0x100>)
 8003216:	7a1b      	ldrb	r3, [r3, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d05a      	beq.n	80032d2 <func_tUartTimer+0xc6>
		bool package = true;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 8003220:	4b3b      	ldr	r3, [pc, #236]	; (8003310 <func_tUartTimer+0x104>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2105      	movs	r1, #5
 8003226:	4618      	mov	r0, r3
 8003228:	f008 f8fe 	bl	800b428 <xQueueSemaphoreTake>
 800322c:	4603      	mov	r3, r0
 800322e:	2b01      	cmp	r3, #1
 8003230:	d140      	bne.n	80032b4 <func_tUartTimer+0xa8>
		//	xSemaphoreTake( xSemaphore, xBlockTime )		xQueueSemaphoreTake( ( xSemaphore ), ( xBlockTime ) )
			switch(uartBus[SHORE_UART].rxBuffer[0]) {
 8003232:	4b36      	ldr	r3, [pc, #216]	; (800330c <func_tUartTimer+0x100>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2baa      	cmp	r3, #170	; 0xaa
 800323a:	d023      	beq.n	8003284 <func_tUartTimer+0x78>
 800323c:	2baa      	cmp	r3, #170	; 0xaa
 800323e:	dc30      	bgt.n	80032a2 <func_tUartTimer+0x96>
 8003240:	2b55      	cmp	r3, #85	; 0x55
 8003242:	d010      	beq.n	8003266 <func_tUartTimer+0x5a>
 8003244:	2ba5      	cmp	r3, #165	; 0xa5
 8003246:	d12c      	bne.n	80032a2 <func_tUartTimer+0x96>
				case SHORE_REQUEST_CODE:
					ShoreRequest(uartBus[SHORE_UART].rxBuffer);
 8003248:	4b30      	ldr	r3, [pc, #192]	; (800330c <func_tUartTimer+0x100>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7fe fbe7 	bl	8001a20 <ShoreRequest>
					ShoreResponse(uartBus[SHORE_UART].txBuffer);
 8003252:	4b2e      	ldr	r3, [pc, #184]	; (800330c <func_tUartTimer+0x100>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe ffb0 	bl	80021bc <ShoreResponse>
					uartBus[SHORE_UART].txLength = SHORE_RESPONSE_LENGTH;
 800325c:	4b2b      	ldr	r3, [pc, #172]	; (800330c <func_tUartTimer+0x100>)
 800325e:	2246      	movs	r2, #70	; 0x46
 8003260:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003264:	e01f      	b.n	80032a6 <func_tUartTimer+0x9a>
				case REQUEST_CONFIG_CODE:
					ShoreConfigRequest(uartBus[SHORE_UART].rxBuffer);
 8003266:	4b29      	ldr	r3, [pc, #164]	; (800330c <func_tUartTimer+0x100>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe fd7a 	bl	8001d64 <ShoreConfigRequest>
					ShoreConfigResponse(uartBus[SHORE_UART].txBuffer);
 8003270:	4b26      	ldr	r3, [pc, #152]	; (800330c <func_tUartTimer+0x100>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	4618      	mov	r0, r3
 8003276:	f7fe ffe1 	bl	800223c <ShoreConfigResponse>
					uartBus[SHORE_UART].txLength = SHORE_CONFIG_RESPONSE_LENGTH;
 800327a:	4b24      	ldr	r3, [pc, #144]	; (800330c <func_tUartTimer+0x100>)
 800327c:	2263      	movs	r2, #99	; 0x63
 800327e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003282:	e010      	b.n	80032a6 <func_tUartTimer+0x9a>
				case DIRECT_REQUEST_CODE:
					ShoreDirectRequest(uartBus[SHORE_UART].rxBuffer);
 8003284:	4b21      	ldr	r3, [pc, #132]	; (800330c <func_tUartTimer+0x100>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe fee1 	bl	8002050 <ShoreDirectRequest>
					ShoreDirectResponse(uartBus[SHORE_UART].txBuffer);
 800328e:	4b1f      	ldr	r3, [pc, #124]	; (800330c <func_tUartTimer+0x100>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff f8c8 	bl	8002428 <ShoreDirectResponse>
					uartBus[SHORE_UART].txLength = SHORE_DIRECT_RESPONSE_LENGTH;
 8003298:	4b1c      	ldr	r3, [pc, #112]	; (800330c <func_tUartTimer+0x100>)
 800329a:	2206      	movs	r2, #6
 800329c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 80032a0:	e001      	b.n	80032a6 <func_tUartTimer+0x9a>
				default:
					package = false;
 80032a2:	2300      	movs	r3, #0
 80032a4:	73fb      	strb	r3, [r7, #15]
			}
			xSemaphoreGive(mutDataHandle);
 80032a6:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <func_tUartTimer+0x104>)
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	2300      	movs	r3, #0
 80032ac:	2200      	movs	r2, #0
 80032ae:	2100      	movs	r1, #0
 80032b0:	f007 fe40 	bl	800af34 <xQueueGenericSend>
		}
		if(package) {
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d010      	beq.n	80032dc <func_tUartTimer+0xd0>
			HAL_UART_Transmit_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].txBuffer, uartBus[SHORE_UART].txLength);
 80032ba:	4b14      	ldr	r3, [pc, #80]	; (800330c <func_tUartTimer+0x100>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	4a13      	ldr	r2, [pc, #76]	; (800330c <func_tUartTimer+0x100>)
 80032c0:	6851      	ldr	r1, [r2, #4]
 80032c2:	4a12      	ldr	r2, [pc, #72]	; (800330c <func_tUartTimer+0x100>)
 80032c4:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80032c8:	b292      	uxth	r2, r2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f005 fd97 	bl	8008dfe <HAL_UART_Transmit_IT>
 80032d0:	e004      	b.n	80032dc <func_tUartTimer+0xd0>
		}
	}
	else {
		++uartBus[SHORE_UART].outdatedRxCounter;
 80032d2:	4b0e      	ldr	r3, [pc, #56]	; (800330c <func_tUartTimer+0x100>)
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	3301      	adds	r3, #1
 80032d8:	4a0c      	ldr	r2, [pc, #48]	; (800330c <func_tUartTimer+0x100>)
 80032da:	6113      	str	r3, [r2, #16]
	}
	counterRx = 0;
 80032dc:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <func_tUartTimer+0x108>)
 80032de:	2200      	movs	r2, #0
 80032e0:	801a      	strh	r2, [r3, #0]
	uartBus[SHORE_UART].packageReceived = false;
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <func_tUartTimer+0x100>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	721a      	strb	r2, [r3, #8]
	HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 80032e8:	4b08      	ldr	r3, [pc, #32]	; (800330c <func_tUartTimer+0x100>)
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	4618      	mov	r0, r3
 80032ee:	f005 ff1d 	bl	800912c <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <func_tUartTimer+0x100>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	4a05      	ldr	r2, [pc, #20]	; (800330c <func_tUartTimer+0x100>)
 80032f8:	6811      	ldr	r1, [r2, #0]
 80032fa:	2201      	movs	r2, #1
 80032fc:	4618      	mov	r0, r3
 80032fe:	f005 fdc3 	bl	8008e88 <HAL_UART_Receive_IT>
  /* USER CODE END func_tUartTimer */
}
 8003302:	bf00      	nop
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	200000c8 	.word	0x200000c8
 8003310:	20001540 	.word	0x20001540
 8003314:	20000170 	.word	0x20000170

08003318 <tSilence_func>:

/* tSilence_func function */
void tSilence_func(void *argument)
{
 8003318:	b590      	push	{r4, r7, lr}
 800331a:	b087      	sub	sp, #28
 800331c:	af02      	add	r7, sp, #8
 800331e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tSilence_func */
	if(fromTickToMs(xTaskGetTickCount()) - uartBus[SHORE_UART].lastMessage > UART_SWITCH_DELAY && counterRx == 0) {
 8003320:	f008 fe9a 	bl	800c058 <xTaskGetTickCount>
 8003324:	4603      	mov	r3, r0
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd fdb8 	bl	8000e9c <fromTickToMs>
 800332c:	eeb0 7a40 	vmov.f32	s14, s0
 8003330:	4b28      	ldr	r3, [pc, #160]	; (80033d4 <tSilence_func+0xbc>)
 8003332:	edd3 7a06 	vldr	s15, [r3, #24]
 8003336:	ee77 7a67 	vsub.f32	s15, s14, s15
 800333a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80033d8 <tSilence_func+0xc0>
 800333e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003346:	dd34      	ble.n	80033b2 <tSilence_func+0x9a>
 8003348:	4b24      	ldr	r3, [pc, #144]	; (80033dc <tSilence_func+0xc4>)
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d130      	bne.n	80033b2 <tSilence_func+0x9a>
//			uartBus[SHORE_UART].huart = &huart5;
//		}
//		else if(uartBus[SHORE_UART].huart == &huart5) {
//			uartBus[SHORE_UART].huart = &huart1;
//		}
		HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 8003350:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <tSilence_func+0xbc>)
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	4618      	mov	r0, r3
 8003356:	f005 fee9 	bl	800912c <HAL_UART_AbortReceive_IT>
		HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 800335a:	4b1e      	ldr	r3, [pc, #120]	; (80033d4 <tSilence_func+0xbc>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <tSilence_func+0xbc>)
 8003360:	6811      	ldr	r1, [r2, #0]
 8003362:	2201      	movs	r2, #1
 8003364:	4618      	mov	r0, r3
 8003366:	f005 fd8f 	bl	8008e88 <HAL_UART_Receive_IT>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 800336a:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <tSilence_func+0xc8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2105      	movs	r1, #5
 8003370:	4618      	mov	r0, r3
 8003372:	f008 f859 	bl	800b428 <xQueueSemaphoreTake>
 8003376:	4603      	mov	r3, r0
 8003378:	2b01      	cmp	r3, #1
 800337a:	d11a      	bne.n	80033b2 <tSilence_func+0x9a>
			resetThrusters();
 800337c:	f000 fe9c 	bl	80040b8 <resetThrusters>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003380:	2300      	movs	r3, #0
 8003382:	73fb      	strb	r3, [r7, #15]
 8003384:	e00b      	b.n	800339e <tSilence_func+0x86>
				rStabConstants[i].enable = false;
 8003386:	7bfa      	ldrb	r2, [r7, #15]
 8003388:	4916      	ldr	r1, [pc, #88]	; (80033e4 <tSilence_func+0xcc>)
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4413      	add	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	440b      	add	r3, r1
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	3301      	adds	r3, #1
 800339c:	73fb      	strb	r3, [r7, #15]
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	2b05      	cmp	r3, #5
 80033a2:	d9f0      	bls.n	8003386 <tSilence_func+0x6e>
			}
			xSemaphoreGive(mutDataHandle);
 80033a4:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <tSilence_func+0xc8>)
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	2300      	movs	r3, #0
 80033aa:	2200      	movs	r2, #0
 80033ac:	2100      	movs	r1, #0
 80033ae:	f007 fdc1 	bl	800af34 <xQueueGenericSend>
//			break;
//			}
		}
//	}
	//HAL_GPIO_WritePin(GPIOE, RES_PC_2_Pin, GPIO_PIN_SET); // ONOFF
	xTimerStart(SilenceTimer, 50);
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <tSilence_func+0xd0>)
 80033b4:	681c      	ldr	r4, [r3, #0]
 80033b6:	f008 fe4f 	bl	800c058 <xTaskGetTickCount>
 80033ba:	4602      	mov	r2, r0
 80033bc:	2332      	movs	r3, #50	; 0x32
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	2300      	movs	r3, #0
 80033c2:	2101      	movs	r1, #1
 80033c4:	4620      	mov	r0, r4
 80033c6:	f009 fc59 	bl	800cc7c <xTimerGenericCommand>
  /* USER CODE END tSilence_func */
}
 80033ca:	bf00      	nop
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd90      	pop	{r4, r7, pc}
 80033d2:	bf00      	nop
 80033d4:	200000c8 	.word	0x200000c8
 80033d8:	447a0000 	.word	0x447a0000
 80033dc:	20000170 	.word	0x20000170
 80033e0:	20001540 	.word	0x20001540
 80033e4:	20001724 	.word	0x20001724
 80033e8:	2000017c 	.word	0x2000017c

080033ec <tTechCommTImer_callback>:

/* tTechCommTImer_callback function */
void tTechCommTImer_callback(void *argument)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tTechCommTImer_callback */

  /* USER CODE END tTechCommTImer_callback */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003406:	f107 030c 	add.w	r3, r7, #12
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	60da      	str	r2, [r3, #12]
 8003414:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003416:	2300      	movs	r3, #0
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	4b20      	ldr	r3, [pc, #128]	; (800349c <MX_GPIO_Init+0x9c>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	4a1f      	ldr	r2, [pc, #124]	; (800349c <MX_GPIO_Init+0x9c>)
 8003420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003424:	6313      	str	r3, [r2, #48]	; 0x30
 8003426:	4b1d      	ldr	r3, [pc, #116]	; (800349c <MX_GPIO_Init+0x9c>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	607b      	str	r3, [r7, #4]
 8003436:	4b19      	ldr	r3, [pc, #100]	; (800349c <MX_GPIO_Init+0x9c>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	4a18      	ldr	r2, [pc, #96]	; (800349c <MX_GPIO_Init+0x9c>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	6313      	str	r3, [r2, #48]	; 0x30
 8003442:	4b16      	ldr	r3, [pc, #88]	; (800349c <MX_GPIO_Init+0x9c>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	607b      	str	r3, [r7, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	603b      	str	r3, [r7, #0]
 8003452:	4b12      	ldr	r3, [pc, #72]	; (800349c <MX_GPIO_Init+0x9c>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	4a11      	ldr	r2, [pc, #68]	; (800349c <MX_GPIO_Init+0x9c>)
 8003458:	f043 0302 	orr.w	r3, r3, #2
 800345c:	6313      	str	r3, [r2, #48]	; 0x30
 800345e:	4b0f      	ldr	r3, [pc, #60]	; (800349c <MX_GPIO_Init+0x9c>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led1_Pin|led2_Pin|led3_Pin, GPIO_PIN_RESET);
 800346a:	2200      	movs	r2, #0
 800346c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8003470:	480b      	ldr	r0, [pc, #44]	; (80034a0 <MX_GPIO_Init+0xa0>)
 8003472:	f002 fef5 	bl	8006260 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin;
 8003476:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800347a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800347c:	2301      	movs	r3, #1
 800347e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003484:	2300      	movs	r3, #0
 8003486:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003488:	f107 030c 	add.w	r3, r7, #12
 800348c:	4619      	mov	r1, r3
 800348e:	4804      	ldr	r0, [pc, #16]	; (80034a0 <MX_GPIO_Init+0xa0>)
 8003490:	f002 fd4a 	bl	8005f28 <HAL_GPIO_Init>

}
 8003494:	bf00      	nop
 8003496:	3720      	adds	r7, #32
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40023800 	.word	0x40023800
 80034a0:	40020400 	.word	0x40020400

080034a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80034a8:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <MX_I2C1_Init+0x50>)
 80034aa:	4a13      	ldr	r2, [pc, #76]	; (80034f8 <MX_I2C1_Init+0x54>)
 80034ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80034ae:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <MX_I2C1_Init+0x50>)
 80034b0:	4a12      	ldr	r2, [pc, #72]	; (80034fc <MX_I2C1_Init+0x58>)
 80034b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80034b4:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <MX_I2C1_Init+0x50>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80034ba:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <MX_I2C1_Init+0x50>)
 80034bc:	2200      	movs	r2, #0
 80034be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <MX_I2C1_Init+0x50>)
 80034c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034c8:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <MX_I2C1_Init+0x50>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80034ce:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <MX_I2C1_Init+0x50>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034d4:	4b07      	ldr	r3, [pc, #28]	; (80034f4 <MX_I2C1_Init+0x50>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034da:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <MX_I2C1_Init+0x50>)
 80034dc:	2200      	movs	r2, #0
 80034de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034e0:	4804      	ldr	r0, [pc, #16]	; (80034f4 <MX_I2C1_Init+0x50>)
 80034e2:	f002 fef1 	bl	80062c8 <HAL_I2C_Init>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80034ec:	f000 f91e 	bl	800372c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80034f0:	bf00      	nop
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20001bd0 	.word	0x20001bd0
 80034f8:	40005400 	.word	0x40005400
 80034fc:	000186a0 	.word	0x000186a0

08003500 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08a      	sub	sp, #40	; 0x28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003508:	f107 0314 	add.w	r3, r7, #20
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	60da      	str	r2, [r3, #12]
 8003516:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a1d      	ldr	r2, [pc, #116]	; (8003594 <HAL_I2C_MspInit+0x94>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d133      	bne.n	800358a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	4b1c      	ldr	r3, [pc, #112]	; (8003598 <HAL_I2C_MspInit+0x98>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	4a1b      	ldr	r2, [pc, #108]	; (8003598 <HAL_I2C_MspInit+0x98>)
 800352c:	f043 0302 	orr.w	r3, r3, #2
 8003530:	6313      	str	r3, [r2, #48]	; 0x30
 8003532:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_I2C_MspInit+0x98>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800353e:	23c0      	movs	r3, #192	; 0xc0
 8003540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003542:	2312      	movs	r3, #18
 8003544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354a:	2303      	movs	r3, #3
 800354c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800354e:	2304      	movs	r3, #4
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003552:	f107 0314 	add.w	r3, r7, #20
 8003556:	4619      	mov	r1, r3
 8003558:	4810      	ldr	r0, [pc, #64]	; (800359c <HAL_I2C_MspInit+0x9c>)
 800355a:	f002 fce5 	bl	8005f28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	4b0d      	ldr	r3, [pc, #52]	; (8003598 <HAL_I2C_MspInit+0x98>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	4a0c      	ldr	r2, [pc, #48]	; (8003598 <HAL_I2C_MspInit+0x98>)
 8003568:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800356c:	6413      	str	r3, [r2, #64]	; 0x40
 800356e:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <HAL_I2C_MspInit+0x98>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800357a:	2200      	movs	r2, #0
 800357c:	2105      	movs	r1, #5
 800357e:	201f      	movs	r0, #31
 8003580:	f001 fdc0 	bl	8005104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003584:	201f      	movs	r0, #31
 8003586:	f001 fdd9 	bl	800513c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800358a:	bf00      	nop
 800358c:	3728      	adds	r7, #40	; 0x28
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40005400 	.word	0x40005400
 8003598:	40023800 	.word	0x40023800
 800359c:	40020400 	.word	0x40020400

080035a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035a4:	f001 fb94 	bl	8004cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035a8:	f000 f846 	bl	8003638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035ac:	f7ff ff28 	bl	8003400 <MX_GPIO_Init>
  MX_DMA_Init();
 80035b0:	f7ff f97e 	bl	80028b0 <MX_DMA_Init>
  MX_CAN1_Init();
 80035b4:	f7fd fc8e 	bl	8000ed4 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80035b8:	f001 f8de 	bl	8004778 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80035bc:	f001 f930 	bl	8004820 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80035c0:	f7ff ff70 	bl	80034a4 <MX_I2C1_Init>
  MX_TIM7_Init();
 80035c4:	f001 f882 	bl	80046cc <MX_TIM7_Init>
  MX_USART2_UART_Init();
 80035c8:	f001 f900 	bl	80047cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, led1_Pin, GPIO_PIN_RESET);
 80035cc:	2200      	movs	r2, #0
 80035ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035d2:	4818      	ldr	r0, [pc, #96]	; (8003634 <main+0x94>)
 80035d4:	f002 fe44 	bl	8006260 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, led2_Pin, GPIO_PIN_RESET);
 80035d8:	2200      	movs	r2, #0
 80035da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035de:	4815      	ldr	r0, [pc, #84]	; (8003634 <main+0x94>)
 80035e0:	f002 fe3e 	bl	8006260 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, led3_Pin, GPIO_PIN_RESET);
 80035e4:	2200      	movs	r2, #0
 80035e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035ea:	4812      	ldr	r0, [pc, #72]	; (8003634 <main+0x94>)
 80035ec:	f002 fe38 	bl	8006260 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80035f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035f4:	f001 fbae 	bl	8004d54 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, led1_Pin, GPIO_PIN_SET);
 80035f8:	2201      	movs	r2, #1
 80035fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035fe:	480d      	ldr	r0, [pc, #52]	; (8003634 <main+0x94>)
 8003600:	f002 fe2e 	bl	8006260 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, led2_Pin, GPIO_PIN_SET);
 8003604:	2201      	movs	r2, #1
 8003606:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800360a:	480a      	ldr	r0, [pc, #40]	; (8003634 <main+0x94>)
 800360c:	f002 fe28 	bl	8006260 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, led3_Pin, GPIO_PIN_SET);
 8003610:	2201      	movs	r2, #1
 8003612:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003616:	4807      	ldr	r0, [pc, #28]	; (8003634 <main+0x94>)
 8003618:	f002 fe22 	bl	8006260 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800361c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003620:	f001 fb98 	bl	8004d54 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003624:	f006 ffd8 	bl	800a5d8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003628:	f7ff fb42 	bl	8002cb0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800362c:	f006 fff8 	bl	800a620 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003630:	e7fe      	b.n	8003630 <main+0x90>
 8003632:	bf00      	nop
 8003634:	40020400 	.word	0x40020400

08003638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b094      	sub	sp, #80	; 0x50
 800363c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800363e:	f107 0320 	add.w	r3, r7, #32
 8003642:	2230      	movs	r2, #48	; 0x30
 8003644:	2100      	movs	r1, #0
 8003646:	4618      	mov	r0, r3
 8003648:	f00a fab2 	bl	800dbb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800364c:	f107 030c 	add.w	r3, r7, #12
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	605a      	str	r2, [r3, #4]
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	60da      	str	r2, [r3, #12]
 800365a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800365c:	2300      	movs	r3, #0
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	4b27      	ldr	r3, [pc, #156]	; (8003700 <SystemClock_Config+0xc8>)
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	4a26      	ldr	r2, [pc, #152]	; (8003700 <SystemClock_Config+0xc8>)
 8003666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366a:	6413      	str	r3, [r2, #64]	; 0x40
 800366c:	4b24      	ldr	r3, [pc, #144]	; (8003700 <SystemClock_Config+0xc8>)
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003678:	2300      	movs	r3, #0
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <SystemClock_Config+0xcc>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a20      	ldr	r2, [pc, #128]	; (8003704 <SystemClock_Config+0xcc>)
 8003682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <SystemClock_Config+0xcc>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003690:	607b      	str	r3, [r7, #4]
 8003692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003694:	2301      	movs	r3, #1
 8003696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800369e:	2302      	movs	r3, #2
 80036a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80036a8:	230c      	movs	r3, #12
 80036aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80036ac:	2348      	movs	r3, #72	; 0x48
 80036ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036b0:	2302      	movs	r3, #2
 80036b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80036b4:	2304      	movs	r3, #4
 80036b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036b8:	f107 0320 	add.w	r3, r7, #32
 80036bc:	4618      	mov	r0, r3
 80036be:	f004 fba7 	bl	8007e10 <HAL_RCC_OscConfig>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80036c8:	f000 f830 	bl	800372c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036cc:	230f      	movs	r3, #15
 80036ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036d0:	2302      	movs	r3, #2
 80036d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80036d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80036e2:	f107 030c 	add.w	r3, r7, #12
 80036e6:	2102      	movs	r1, #2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f004 fe09 	bl	8008300 <HAL_RCC_ClockConfig>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80036f4:	f000 f81a 	bl	800372c <Error_Handler>
  }
}
 80036f8:	bf00      	nop
 80036fa:	3750      	adds	r7, #80	; 0x50
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40023800 	.word	0x40023800
 8003704:	40007000 	.word	0x40007000

08003708 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a04      	ldr	r2, [pc, #16]	; (8003728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d101      	bne.n	800371e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800371a:	f001 fafb 	bl	8004d14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40010000 	.word	0x40010000

0800372c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003730:	b672      	cpsid	i
}
 8003732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003734:	e7fe      	b.n	8003734 <Error_Handler+0x8>
	...

08003738 <stabilizationStart>:


}

void stabilizationStart(uint8_t contour)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]
	rStabConstants[contour].enable = true;
 8003742:	79fa      	ldrb	r2, [r7, #7]
 8003744:	4970      	ldr	r1, [pc, #448]	; (8003908 <stabilizationStart+0x1d0>)
 8003746:	4613      	mov	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4413      	add	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	440b      	add	r3, r1
 8003750:	2201      	movs	r2, #1
 8003752:	701a      	strb	r2, [r3, #0]

	rStabState[contour].oldSpeed = *rStabState[contour].speedSignal;
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	4a6d      	ldr	r2, [pc, #436]	; (800390c <stabilizationStart+0x1d4>)
 8003758:	2158      	movs	r1, #88	; 0x58
 800375a:	fb01 f303 	mul.w	r3, r1, r3
 800375e:	4413      	add	r3, r2
 8003760:	3304      	adds	r3, #4
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	4968      	ldr	r1, [pc, #416]	; (800390c <stabilizationStart+0x1d4>)
 800376a:	2058      	movs	r0, #88	; 0x58
 800376c:	fb00 f303 	mul.w	r3, r0, r3
 8003770:	440b      	add	r3, r1
 8003772:	3314      	adds	r3, #20
 8003774:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPos = *rStabState[contour].posSignal;
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	4a64      	ldr	r2, [pc, #400]	; (800390c <stabilizationStart+0x1d4>)
 800377a:	2158      	movs	r1, #88	; 0x58
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	4413      	add	r3, r2
 8003782:	3308      	adds	r3, #8
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	6812      	ldr	r2, [r2, #0]
 800378a:	4960      	ldr	r1, [pc, #384]	; (800390c <stabilizationStart+0x1d4>)
 800378c:	2058      	movs	r0, #88	; 0x58
 800378e:	fb00 f303 	mul.w	r3, r0, r3
 8003792:	440b      	add	r3, r1
 8003794:	3318      	adds	r3, #24
 8003796:	601a      	str	r2, [r3, #0]
	rStabState[contour].posDerivative = 0;
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	4a5c      	ldr	r2, [pc, #368]	; (800390c <stabilizationStart+0x1d4>)
 800379c:	2158      	movs	r1, #88	; 0x58
 800379e:	fb01 f303 	mul.w	r3, r1, r3
 80037a2:	4413      	add	r3, r2
 80037a4:	3310      	adds	r3, #16
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
	//rStabState[contour].speedIntegral = 0;
if(contour==STAB_YAW)
 80037ac:	79fb      	ldrb	r3, [r7, #7]
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d103      	bne.n	80037ba <stabilizationStart+0x82>
{
	rSensors.yaw =0;
 80037b2:	4b57      	ldr	r3, [pc, #348]	; (8003910 <stabilizationStart+0x1d8>)
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
}
	rStabState[contour].joyUnitCasted = 0;
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	4a53      	ldr	r2, [pc, #332]	; (800390c <stabilizationStart+0x1d4>)
 80037be:	2158      	movs	r1, #88	; 0x58
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	4413      	add	r3, r2
 80037c6:	331c      	adds	r3, #28
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]
	rStabState[contour].joy_iValue = *rStabState[contour].posSignal;
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	4a4e      	ldr	r2, [pc, #312]	; (800390c <stabilizationStart+0x1d4>)
 80037d2:	2158      	movs	r1, #88	; 0x58
 80037d4:	fb01 f303 	mul.w	r3, r1, r3
 80037d8:	4413      	add	r3, r2
 80037da:	3308      	adds	r3, #8
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	6812      	ldr	r2, [r2, #0]
 80037e2:	494a      	ldr	r1, [pc, #296]	; (800390c <stabilizationStart+0x1d4>)
 80037e4:	2058      	movs	r0, #88	; 0x58
 80037e6:	fb00 f303 	mul.w	r3, r0, r3
 80037ea:	440b      	add	r3, r1
 80037ec:	3320      	adds	r3, #32
 80037ee:	601a      	str	r2, [r3, #0]
	rStabState[contour].posError = 0;
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	4a46      	ldr	r2, [pc, #280]	; (800390c <stabilizationStart+0x1d4>)
 80037f4:	2158      	movs	r1, #88	; 0x58
 80037f6:	fb01 f303 	mul.w	r3, r1, r3
 80037fa:	4413      	add	r3, r2
 80037fc:	3324      	adds	r3, #36	; 0x24
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedError = 0;
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	4a41      	ldr	r2, [pc, #260]	; (800390c <stabilizationStart+0x1d4>)
 8003808:	2158      	movs	r1, #88	; 0x58
 800380a:	fb01 f303 	mul.w	r3, r1, r3
 800380e:	4413      	add	r3, r2
 8003810:	3328      	adds	r3, #40	; 0x28
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
	rStabState[contour].dynSummator = 0;
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	4a3c      	ldr	r2, [pc, #240]	; (800390c <stabilizationStart+0x1d4>)
 800381c:	2158      	movs	r1, #88	; 0x58
 800381e:	fb01 f303 	mul.w	r3, r1, r3
 8003822:	4413      	add	r3, r2
 8003824:	332c      	adds	r3, #44	; 0x2c
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
	rStabState[contour].pidValue = 0;
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	4a37      	ldr	r2, [pc, #220]	; (800390c <stabilizationStart+0x1d4>)
 8003830:	2158      	movs	r1, #88	; 0x58
 8003832:	fb01 f303 	mul.w	r3, r1, r3
 8003836:	4413      	add	r3, r2
 8003838:	3330      	adds	r3, #48	; 0x30
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
	rStabState[contour].pid_iValue = 0;
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	4a32      	ldr	r2, [pc, #200]	; (800390c <stabilizationStart+0x1d4>)
 8003844:	2158      	movs	r1, #88	; 0x58
 8003846:	fb01 f303 	mul.w	r3, r1, r3
 800384a:	4413      	add	r3, r2
 800384c:	3334      	adds	r3, #52	; 0x34
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
	rStabState[contour].posErrorAmp = 0;
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	4a2d      	ldr	r2, [pc, #180]	; (800390c <stabilizationStart+0x1d4>)
 8003858:	2158      	movs	r1, #88	; 0x58
 800385a:	fb01 f303 	mul.w	r3, r1, r3
 800385e:	4413      	add	r3, r2
 8003860:	3338      	adds	r3, #56	; 0x38
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedFiltered = 0;
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	4a28      	ldr	r2, [pc, #160]	; (800390c <stabilizationStart+0x1d4>)
 800386c:	2158      	movs	r1, #88	; 0x58
 800386e:	fb01 f303 	mul.w	r3, r1, r3
 8003872:	4413      	add	r3, r2
 8003874:	333c      	adds	r3, #60	; 0x3c
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
	rStabState[contour].posFiltered = 0;
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	4a23      	ldr	r2, [pc, #140]	; (800390c <stabilizationStart+0x1d4>)
 8003880:	2158      	movs	r1, #88	; 0x58
 8003882:	fb01 f303 	mul.w	r3, r1, r3
 8003886:	4413      	add	r3, r2
 8003888:	3340      	adds	r3, #64	; 0x40
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPosFiltered = 0;
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	4a1e      	ldr	r2, [pc, #120]	; (800390c <stabilizationStart+0x1d4>)
 8003894:	2158      	movs	r1, #88	; 0x58
 8003896:	fb01 f303 	mul.w	r3, r1, r3
 800389a:	4413      	add	r3, r2
 800389c:	3344      	adds	r3, #68	; 0x44
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldSpeedError = 0;
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	4a19      	ldr	r2, [pc, #100]	; (800390c <stabilizationStart+0x1d4>)
 80038a8:	2158      	movs	r1, #88	; 0x58
 80038aa:	fb01 f303 	mul.w	r3, r1, r3
 80038ae:	4413      	add	r3, r2
 80038b0:	3348      	adds	r3, #72	; 0x48
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
	rStabState[contour].thrustersFiltered = 0;
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	4a14      	ldr	r2, [pc, #80]	; (800390c <stabilizationStart+0x1d4>)
 80038bc:	2158      	movs	r1, #88	; 0x58
 80038be:	fb01 f303 	mul.w	r3, r1, r3
 80038c2:	4413      	add	r3, r2
 80038c4:	334c      	adds	r3, #76	; 0x4c
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
	rStabState[contour].outputSignal = 0;
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	4a0f      	ldr	r2, [pc, #60]	; (800390c <stabilizationStart+0x1d4>)
 80038d0:	2158      	movs	r1, #88	; 0x58
 80038d2:	fb01 f303 	mul.w	r3, r1, r3
 80038d6:	4413      	add	r3, r2
 80038d8:	3350      	adds	r3, #80	; 0x50
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
	rStabState[contour].LastTick = xTaskGetTickCount();
 80038e0:	f008 fbba 	bl	800c058 <xTaskGetTickCount>
 80038e4:	ee07 0a90 	vmov	s15, r0
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ee:	4a07      	ldr	r2, [pc, #28]	; (800390c <stabilizationStart+0x1d4>)
 80038f0:	2158      	movs	r1, #88	; 0x58
 80038f2:	fb01 f303 	mul.w	r3, r1, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	3354      	adds	r3, #84	; 0x54
 80038fa:	edc3 7a00 	vstr	s15, [r3]
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20001724 	.word	0x20001724
 800390c:	200018d4 	.word	0x200018d4
 8003910:	20001660 	.word	0x20001660

08003914 <stabilizationUpdate>:

void stabilizationUpdate(uint8_t contour)
{
 8003914:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003918:	b086      	sub	sp, #24
 800391a:	af00      	add	r7, sp, #0
 800391c:	4603      	mov	r3, r0
 800391e:	71fb      	strb	r3, [r7, #7]
	struct robotStabilizationConstants_s *constants = &rStabConstants[contour];
 8003920:	79fa      	ldrb	r2, [r7, #7]
 8003922:	4613      	mov	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	4413      	add	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4aa6      	ldr	r2, [pc, #664]	; (8003bc4 <stabilizationUpdate+0x2b0>)
 800392c:	4413      	add	r3, r2
 800392e:	617b      	str	r3, [r7, #20]
	struct robotStabilizationState_s *state = &rStabState[contour];
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	2258      	movs	r2, #88	; 0x58
 8003934:	fb02 f303 	mul.w	r3, r2, r3
 8003938:	4aa3      	ldr	r2, [pc, #652]	; (8003bc8 <stabilizationUpdate+0x2b4>)
 800393a:	4413      	add	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
	float diffTime = fromTickToMs(xTaskGetTickCount() - state->LastTick) / 1000.0f;
 800393e:	f008 fb8b 	bl	800c058 <xTaskGetTickCount>
 8003942:	ee07 0a90 	vmov	s15, r0
 8003946:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003958:	ee17 0a90 	vmov	r0, s15
 800395c:	f7fd fa9e 	bl	8000e9c <fromTickToMs>
 8003960:	eeb0 7a40 	vmov.f32	s14, s0
 8003964:	eddf 6a99 	vldr	s13, [pc, #612]	; 8003bcc <stabilizationUpdate+0x2b8>
 8003968:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800396c:	edc7 7a03 	vstr	s15, [r7, #12]
	state->LastTick = xTaskGetTickCount();
 8003970:	f008 fb72 	bl	800c058 <xTaskGetTickCount>
 8003974:	ee07 0a90 	vmov	s15, r0
 8003978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	// Speed feedback filtering
	struct AperiodicFilter *filter = &constants->aFilter[SPEED_FILTER];
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	3318      	adds	r3, #24
 8003986:	60bb      	str	r3, [r7, #8]

	if(filter->T != 0) {
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	edd3 7a00 	vldr	s15, [r3]
 800398e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003996:	d02b      	beq.n	80039f0 <stabilizationUpdate+0xdc>
		//state->speedFiltered = state->speedFiltered*exp(-diffTime/filter->T/1e5) + state->oldSpeed*filter->K*80*(1-exp(-diffTime/filter->T/1e5));
		state->speedFiltered = state->oldSpeed + diffTime * (1/filter->T*100) * (*state->speedSignal * filter->K*70 - state->oldSpeed);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	ed93 7a05 	vldr	s14, [r3, #20]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	edd3 6a00 	vldr	s13, [r3]
 80039a4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80039a8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80039ac:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8003bdc <stabilizationUpdate+0x2c8>
 80039b0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80039b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80039b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	ed93 6a00 	vldr	s12, [r3]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80039ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80039ce:	ed9f 6a80 	vldr	s12, [pc, #512]	; 8003bd0 <stabilizationUpdate+0x2bc>
 80039d2:	ee27 6a86 	vmul.f32	s12, s15, s12
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80039dc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80039e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 80039ee:	e023      	b.n	8003a38 <stabilizationUpdate+0x124>
	}
	else {
		if(contour==STAB_PITCH)
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	2b05      	cmp	r3, #5
 80039f4:	d110      	bne.n	8003a18 <stabilizationUpdate+0x104>
		{
			state->speedFiltered = *state->speedSignal*filter->K*250;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	ed93 7a00 	vldr	s14, [r3]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a08:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003bd4 <stabilizationUpdate+0x2c0>
 8003a0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8003a16:	e00f      	b.n	8003a38 <stabilizationUpdate+0x124>
		}
		else
		state->speedFiltered = *state->speedSignal*filter->K*10;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	ed93 7a00 	vldr	s14, [r3]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	//state->oldSpeed = *state->speedSignal;
	state->oldSpeed = state->speedFiltered;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	615a      	str	r2, [r3, #20]

	// Position feedback filtering
	filter = &constants->aFilter[POS_FILTER];
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	3310      	adds	r3, #16
 8003a44:	60bb      	str	r3, [r7, #8]
	if(filter->T != 0) {
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	edd3 7a00 	vldr	s15, [r3]
 8003a4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a54:	d061      	beq.n	8003b1a <stabilizationUpdate+0x206>
		state->posFiltered = state->posFiltered*exp(-diffTime/filter->T) + state->oldPos*filter->K*(1-exp(-diffTime/filter->T));
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fc fd1c 	bl	8000498 <__aeabi_f2d>
 8003a60:	4604      	mov	r4, r0
 8003a62:	460d      	mov	r5, r1
 8003a64:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a68:	eeb1 7a67 	vneg.f32	s14, s15
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	edd3 7a00 	vldr	s15, [r3]
 8003a72:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a76:	ee16 0a90 	vmov	r0, s13
 8003a7a:	f7fc fd0d 	bl	8000498 <__aeabi_f2d>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	ec43 2b10 	vmov	d0, r2, r3
 8003a86:	f00a f993 	bl	800ddb0 <exp>
 8003a8a:	ec53 2b10 	vmov	r2, r3, d0
 8003a8e:	4620      	mov	r0, r4
 8003a90:	4629      	mov	r1, r5
 8003a92:	f7fc fd59 	bl	8000548 <__aeabi_dmul>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4690      	mov	r8, r2
 8003a9c:	4699      	mov	r9, r3
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	ed93 7a06 	vldr	s14, [r3, #24]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aae:	ee17 0a90 	vmov	r0, s15
 8003ab2:	f7fc fcf1 	bl	8000498 <__aeabi_f2d>
 8003ab6:	4604      	mov	r4, r0
 8003ab8:	460d      	mov	r5, r1
 8003aba:	edd7 7a03 	vldr	s15, [r7, #12]
 8003abe:	eeb1 7a67 	vneg.f32	s14, s15
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	edd3 7a00 	vldr	s15, [r3]
 8003ac8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003acc:	ee16 0a90 	vmov	r0, s13
 8003ad0:	f7fc fce2 	bl	8000498 <__aeabi_f2d>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	ec43 2b10 	vmov	d0, r2, r3
 8003adc:	f00a f968 	bl	800ddb0 <exp>
 8003ae0:	ec53 2b10 	vmov	r2, r3, d0
 8003ae4:	f04f 0000 	mov.w	r0, #0
 8003ae8:	493b      	ldr	r1, [pc, #236]	; (8003bd8 <stabilizationUpdate+0x2c4>)
 8003aea:	f7fc fb75 	bl	80001d8 <__aeabi_dsub>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4620      	mov	r0, r4
 8003af4:	4629      	mov	r1, r5
 8003af6:	f7fc fd27 	bl	8000548 <__aeabi_dmul>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4640      	mov	r0, r8
 8003b00:	4649      	mov	r1, r9
 8003b02:	f7fc fb6b 	bl	80001dc <__adddf3>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	f7fc fff3 	bl	8000af8 <__aeabi_d2f>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	641a      	str	r2, [r3, #64]	; 0x40
 8003b18:	e00b      	b.n	8003b32 <stabilizationUpdate+0x21e>
	}
	else {
		state->posFiltered = *state->posSignal*filter->K;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	ed93 7a00 	vldr	s14, [r3]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	}
	state->oldPos = *state->posSignal;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	619a      	str	r2, [r3, #24]

	// Speed integration calculation
	state->speedIntegral += (*state->speedSignal * diffTime);
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	edd3 6a00 	vldr	s13, [r3]
 8003b4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	edc3 7a03 	vstr	s15, [r3, #12]

    // Position derivative calculation
    state->posDerivative = (state->posFiltered - state->oldPosFiltered) / diffTime;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003b68:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003b6c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	edc3 7a04 	vstr	s15, [r3, #16]
    state->oldPosFiltered = state->posFiltered;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	645a      	str	r2, [r3, #68]	; 0x44

	// Input signal unit cast
	state->joyUnitCasted = constants->pJoyUnitCast * *state->inputSignal;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	edd3 7a00 	vldr	s15, [r3]
 8003b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	edc3 7a07 	vstr	s15, [r3, #28]

    // Casted input signal integration
	if(constants->joyIntegration) {
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	785b      	ldrb	r3, [r3, #1]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d01e      	beq.n	8003be0 <stabilizationUpdate+0x2cc>
		state->joy_iValue += state->joyUnitCasted * diffTime;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	ed93 7a08 	vldr	s14, [r3, #32]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	edd3 6a07 	vldr	s13, [r3, #28]
 8003bae:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	edc3 7a08 	vstr	s15, [r3, #32]
 8003bc0:	e012      	b.n	8003be8 <stabilizationUpdate+0x2d4>
 8003bc2:	bf00      	nop
 8003bc4:	20001724 	.word	0x20001724
 8003bc8:	200018d4 	.word	0x200018d4
 8003bcc:	447a0000 	.word	0x447a0000
 8003bd0:	428c0000 	.word	0x428c0000
 8003bd4:	437a0000 	.word	0x437a0000
 8003bd8:	3ff00000 	.word	0x3ff00000
 8003bdc:	42c80000 	.word	0x42c80000
	}
	else {
		state->joy_iValue = state->joyUnitCasted;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	621a      	str	r2, [r3, #32]
	}

    // Position feedback summator
    state->posError = state->joy_iValue - state->posFiltered;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	ed93 7a08 	vldr	s14, [r3, #32]
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Feedback amplifiers
    state->posErrorAmp = state->posError * constants->pErrGain;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    // PI integration
    state->pid_iValue += (state->posErrorAmp * diffTime) * constants->pid.iGain;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8003c20:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003c2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // PI integration saturation
    if(state->pid_iValue > constants->pid.iMax*100) {
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003c48:	ed5f 6a1c 	vldr	s13, [pc, #-112]	; 8003bdc <stabilizationUpdate+0x2c8>
 8003c4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c58:	dd0a      	ble.n	8003c70 <stabilizationUpdate+0x35c>
    	state->pid_iValue = constants->pid.iMax*100;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003c60:	ed1f 7a22 	vldr	s14, [pc, #-136]	; 8003bdc <stabilizationUpdate+0x2c8>
 8003c64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8003c6e:	e018      	b.n	8003ca2 <stabilizationUpdate+0x38e>
    }
    else if(state->pid_iValue < constants->pid.iMin*100) {
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003c7c:	ed5f 6a29 	vldr	s13, [pc, #-164]	; 8003bdc <stabilizationUpdate+0x2c8>
 8003c80:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c8c:	d509      	bpl.n	8003ca2 <stabilizationUpdate+0x38e>
    	state->pid_iValue = constants->pid.iMin*100;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003c94:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 8003bdc <stabilizationUpdate+0x2c8>
 8003c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    }

    // PI summator
    state->pidValue =  state->pid_iValue + (state->posErrorAmp * constants->pid.pGain);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003cb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    // Dynamic summator
    state->dynSummator = state->pidValue + *state->inputSignal * constants->pSpeedDyn;
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	edd3 6a00 	vldr	s13, [r3]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	edd3 7a02 	vldr	s15, [r3, #8]
 8003cd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    // Speed feedback
    state->speedError = state->dynSummator - state->speedFiltered;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    // Out filtering
    filter = &constants->aFilter[THRUSTERS_FILTER];
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	3320      	adds	r3, #32
 8003cfe:	60bb      	str	r3, [r7, #8]
    if(filter->T != 0) {
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	edd3 7a00 	vldr	s15, [r3]
 8003d06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d0e:	d061      	beq.n	8003dd4 <stabilizationUpdate+0x4c0>
    	state->thrustersFiltered = state->thrustersFiltered*exp(-diffTime/filter->T) + state->oldSpeedError*filter->K*(1-exp(-diffTime/filter->T));
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fc fbbf 	bl	8000498 <__aeabi_f2d>
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	460d      	mov	r5, r1
 8003d1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d22:	eeb1 7a67 	vneg.f32	s14, s15
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	edd3 7a00 	vldr	s15, [r3]
 8003d2c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d30:	ee16 0a90 	vmov	r0, s13
 8003d34:	f7fc fbb0 	bl	8000498 <__aeabi_f2d>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	ec43 2b10 	vmov	d0, r2, r3
 8003d40:	f00a f836 	bl	800ddb0 <exp>
 8003d44:	ec53 2b10 	vmov	r2, r3, d0
 8003d48:	4620      	mov	r0, r4
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	f7fc fbfc 	bl	8000548 <__aeabi_dmul>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4690      	mov	r8, r2
 8003d56:	4699      	mov	r9, r3
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d68:	ee17 0a90 	vmov	r0, s15
 8003d6c:	f7fc fb94 	bl	8000498 <__aeabi_f2d>
 8003d70:	4604      	mov	r4, r0
 8003d72:	460d      	mov	r5, r1
 8003d74:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d78:	eeb1 7a67 	vneg.f32	s14, s15
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	edd3 7a00 	vldr	s15, [r3]
 8003d82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d86:	ee16 0a90 	vmov	r0, s13
 8003d8a:	f7fc fb85 	bl	8000498 <__aeabi_f2d>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	460b      	mov	r3, r1
 8003d92:	ec43 2b10 	vmov	d0, r2, r3
 8003d96:	f00a f80b 	bl	800ddb0 <exp>
 8003d9a:	ec53 2b10 	vmov	r2, r3, d0
 8003d9e:	f04f 0000 	mov.w	r0, #0
 8003da2:	492a      	ldr	r1, [pc, #168]	; (8003e4c <stabilizationUpdate+0x538>)
 8003da4:	f7fc fa18 	bl	80001d8 <__aeabi_dsub>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4620      	mov	r0, r4
 8003dae:	4629      	mov	r1, r5
 8003db0:	f7fc fbca 	bl	8000548 <__aeabi_dmul>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4640      	mov	r0, r8
 8003dba:	4649      	mov	r1, r9
 8003dbc:	f7fc fa0e 	bl	80001dc <__adddf3>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	f7fc fe96 	bl	8000af8 <__aeabi_d2f>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	64da      	str	r2, [r3, #76]	; 0x4c
 8003dd2:	e00a      	b.n	8003dea <stabilizationUpdate+0x4d6>
    }
    else {
    	state->thrustersFiltered = state->speedError*filter->K;
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	edd3 7a01 	vldr	s15, [r3, #4]
 8003de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    }
    state->oldSpeedError = state->speedError;
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	649a      	str	r2, [r3, #72]	; 0x48

    if(state->thrustersFiltered > constants->pThrustersMax) {
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003dfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e06:	dd04      	ble.n	8003e12 <stabilizationUpdate+0x4fe>
    	state->thrustersFiltered = constants->pThrustersMax;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e10:	e00e      	b.n	8003e30 <stabilizationUpdate+0x51c>
    }
    else if(state->thrustersFiltered < constants->pThrustersMin) {
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003e1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e26:	d503      	bpl.n	8003e30 <stabilizationUpdate+0x51c>
    	state->thrustersFiltered = constants->pThrustersMin;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    state->outputSignal = -1*state->speedError;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003e36:	eef1 7a67 	vneg.f32	s15, s15
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 8003e40:	bf00      	nop
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e4a:	bf00      	nop
 8003e4c:	3ff00000 	.word	0x3ff00000

08003e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e56:	2300      	movs	r3, #0
 8003e58:	607b      	str	r3, [r7, #4]
 8003e5a:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <HAL_MspInit+0x54>)
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5e:	4a11      	ldr	r2, [pc, #68]	; (8003ea4 <HAL_MspInit+0x54>)
 8003e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e64:	6453      	str	r3, [r2, #68]	; 0x44
 8003e66:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <HAL_MspInit+0x54>)
 8003e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e6e:	607b      	str	r3, [r7, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	603b      	str	r3, [r7, #0]
 8003e76:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <HAL_MspInit+0x54>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ea4 <HAL_MspInit+0x54>)
 8003e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e80:	6413      	str	r3, [r2, #64]	; 0x40
 8003e82:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <HAL_MspInit+0x54>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	603b      	str	r3, [r7, #0]
 8003e8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e8e:	2200      	movs	r2, #0
 8003e90:	210f      	movs	r1, #15
 8003e92:	f06f 0001 	mvn.w	r0, #1
 8003e96:	f001 f935 	bl	8005104 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40023800 	.word	0x40023800

08003ea8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08c      	sub	sp, #48	; 0x30
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	4b2e      	ldr	r3, [pc, #184]	; (8003f78 <HAL_InitTick+0xd0>)
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec0:	4a2d      	ldr	r2, [pc, #180]	; (8003f78 <HAL_InitTick+0xd0>)
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	6453      	str	r3, [r2, #68]	; 0x44
 8003ec8:	4b2b      	ldr	r3, [pc, #172]	; (8003f78 <HAL_InitTick+0xd0>)
 8003eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ed4:	f107 020c 	add.w	r2, r7, #12
 8003ed8:	f107 0310 	add.w	r3, r7, #16
 8003edc:	4611      	mov	r1, r2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f004 fbee 	bl	80086c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003ee4:	f004 fbd8 	bl	8008698 <HAL_RCC_GetPCLK2Freq>
 8003ee8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eec:	4a23      	ldr	r2, [pc, #140]	; (8003f7c <HAL_InitTick+0xd4>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	0c9b      	lsrs	r3, r3, #18
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003ef8:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <HAL_InitTick+0xd8>)
 8003efa:	4a22      	ldr	r2, [pc, #136]	; (8003f84 <HAL_InitTick+0xdc>)
 8003efc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003efe:	4b20      	ldr	r3, [pc, #128]	; (8003f80 <HAL_InitTick+0xd8>)
 8003f00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f04:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003f06:	4a1e      	ldr	r2, [pc, #120]	; (8003f80 <HAL_InitTick+0xd8>)
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003f0c:	4b1c      	ldr	r3, [pc, #112]	; (8003f80 <HAL_InitTick+0xd8>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f12:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <HAL_InitTick+0xd8>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f18:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <HAL_InitTick+0xd8>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003f1e:	4818      	ldr	r0, [pc, #96]	; (8003f80 <HAL_InitTick+0xd8>)
 8003f20:	f004 fc00 	bl	8008724 <HAL_TIM_Base_Init>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d11b      	bne.n	8003f6a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003f32:	4813      	ldr	r0, [pc, #76]	; (8003f80 <HAL_InitTick+0xd8>)
 8003f34:	f004 fc46 	bl	80087c4 <HAL_TIM_Base_Start_IT>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d111      	bne.n	8003f6a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003f46:	2019      	movs	r0, #25
 8003f48:	f001 f8f8 	bl	800513c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b0f      	cmp	r3, #15
 8003f50:	d808      	bhi.n	8003f64 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003f52:	2200      	movs	r2, #0
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	2019      	movs	r0, #25
 8003f58:	f001 f8d4 	bl	8005104 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f5c:	4a0a      	ldr	r2, [pc, #40]	; (8003f88 <HAL_InitTick+0xe0>)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	e002      	b.n	8003f6a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003f6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3730      	adds	r7, #48	; 0x30
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	431bde83 	.word	0x431bde83
 8003f80:	20001c24 	.word	0x20001c24
 8003f84:	40010000 	.word	0x40010000
 8003f88:	20000014 	.word	0x20000014

08003f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f90:	e7fe      	b.n	8003f90 <NMI_Handler+0x4>

08003f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f92:	b480      	push	{r7}
 8003f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f96:	e7fe      	b.n	8003f96 <HardFault_Handler+0x4>

08003f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f9c:	e7fe      	b.n	8003f9c <MemManage_Handler+0x4>

08003f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fa2:	e7fe      	b.n	8003fa2 <BusFault_Handler+0x4>

08003fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fa8:	e7fe      	b.n	8003fa8 <UsageFault_Handler+0x4>

08003faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003faa:	b480      	push	{r7}
 8003fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fae:	bf00      	nop
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003fbc:	4802      	ldr	r0, [pc, #8]	; (8003fc8 <DMA1_Stream1_IRQHandler+0x10>)
 8003fbe:	f001 fa63 	bl	8005488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20001f00 	.word	0x20001f00

08003fcc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003fd0:	4802      	ldr	r0, [pc, #8]	; (8003fdc <DMA1_Stream3_IRQHandler+0x10>)
 8003fd2:	f001 fa59 	bl	8005488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003fd6:	bf00      	nop
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20001f60 	.word	0x20001f60

08003fe0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003fe4:	4802      	ldr	r0, [pc, #8]	; (8003ff0 <DMA1_Stream5_IRQHandler+0x10>)
 8003fe6:	f001 fa4f 	bl	8005488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003fea:	bf00      	nop
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20001e40 	.word	0x20001e40

08003ff4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003ff8:	4802      	ldr	r0, [pc, #8]	; (8004004 <DMA1_Stream6_IRQHandler+0x10>)
 8003ffa:	f001 fa45 	bl	8005488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003ffe:	bf00      	nop
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20001ea0 	.word	0x20001ea0

08004008 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800400c:	4802      	ldr	r0, [pc, #8]	; (8004018 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800400e:	f004 fc49 	bl	80088a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004012:	bf00      	nop
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	20001c24 	.word	0x20001c24

0800401c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004020:	4802      	ldr	r0, [pc, #8]	; (800402c <I2C1_EV_IRQHandler+0x10>)
 8004022:	f002 fb43 	bl	80066ac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004026:	bf00      	nop
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20001bd0 	.word	0x20001bd0

08004030 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004034:	4802      	ldr	r0, [pc, #8]	; (8004040 <USART1_IRQHandler+0x10>)
 8004036:	f005 f92b 	bl	8009290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800403a:	bf00      	nop
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	20001cb4 	.word	0x20001cb4

08004044 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004048:	4802      	ldr	r0, [pc, #8]	; (8004054 <USART2_IRQHandler+0x10>)
 800404a:	f005 f921 	bl	8009290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20001cf8 	.word	0x20001cf8

08004058 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800405c:	4802      	ldr	r0, [pc, #8]	; (8004068 <USART3_IRQHandler+0x10>)
 800405e:	f005 f917 	bl	8009290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004062:	bf00      	nop
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20001d3c 	.word	0x20001d3c

0800406c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004070:	4802      	ldr	r0, [pc, #8]	; (800407c <DMA2_Stream2_IRQHandler+0x10>)
 8004072:	f001 fa09 	bl	8005488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004076:	bf00      	nop
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20001d80 	.word	0x20001d80

08004080 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004084:	4802      	ldr	r0, [pc, #8]	; (8004090 <DMA2_Stream7_IRQHandler+0x10>)
 8004086:	f001 f9ff 	bl	8005488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20001de0 	.word	0x20001de0

08004094 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004098:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <SystemInit+0x20>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409e:	4a05      	ldr	r2, [pc, #20]	; (80040b4 <SystemInit+0x20>)
 80040a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040a8:	bf00      	nop
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	e000ed00 	.word	0xe000ed00

080040b8 <resetThrusters>:
	rThrusters[MarshDown].kForward = 0.7;
	rThrusters[MarshDown].kBackward = 0.7;
}

void resetThrusters()
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
	rJoySpeed.depth = 0;
 80040bc:	4b1d      	ldr	r3, [pc, #116]	; (8004134 <resetThrusters+0x7c>)
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	609a      	str	r2, [r3, #8]
	rJoySpeed.lag = 0;
 80040c4:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <resetThrusters+0x7c>)
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	605a      	str	r2, [r3, #4]
	rJoySpeed.march = 0;
 80040cc:	4b19      	ldr	r3, [pc, #100]	; (8004134 <resetThrusters+0x7c>)
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
	rJoySpeed.pitch = 0;
 80040d4:	4b17      	ldr	r3, [pc, #92]	; (8004134 <resetThrusters+0x7c>)
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	611a      	str	r2, [r3, #16]
	rJoySpeed.roll = 0;
 80040dc:	4b15      	ldr	r3, [pc, #84]	; (8004134 <resetThrusters+0x7c>)
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	60da      	str	r2, [r3, #12]
	rJoySpeed.yaw = 0;
 80040e4:	4b13      	ldr	r3, [pc, #76]	; (8004134 <resetThrusters+0x7c>)
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	615a      	str	r2, [r3, #20]

	rThrusters[Lag1st].desiredSpeed = 0;
 80040ec:	4b12      	ldr	r3, [pc, #72]	; (8004138 <resetThrusters+0x80>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rThrusters[Lag2nd].desiredSpeed = 0;
 80040f4:	4b10      	ldr	r3, [pc, #64]	; (8004138 <resetThrusters+0x80>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	rThrusters[MarshLEFT].desiredSpeed = 0;
 80040fc:	4b0e      	ldr	r3, [pc, #56]	; (8004138 <resetThrusters+0x80>)
 80040fe:	2200      	movs	r2, #0
 8004100:	709a      	strb	r2, [r3, #2]
	rThrusters[MarshRIGHT].desiredSpeed = 0;
 8004102:	4b0d      	ldr	r3, [pc, #52]	; (8004138 <resetThrusters+0x80>)
 8004104:	2200      	movs	r2, #0
 8004106:	769a      	strb	r2, [r3, #26]
	rThrusters[VertBACK].desiredSpeed = 0;
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <resetThrusters+0x80>)
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	rThrusters[VertLEFT].desiredSpeed = 0;
 8004110:	4b09      	ldr	r3, [pc, #36]	; (8004138 <resetThrusters+0x80>)
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rThrusters[VertRIGHT].desiredSpeed = 0;
 8004118:	4b07      	ldr	r3, [pc, #28]	; (8004138 <resetThrusters+0x80>)
 800411a:	2200      	movs	r2, #0
 800411c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	rThrusters[MarshDown].desiredSpeed = 0;
 8004120:	4b05      	ldr	r3, [pc, #20]	; (8004138 <resetThrusters+0x80>)
 8004122:	2200      	movs	r2, #0
 8004124:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
}
 8004128:	bf00      	nop
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	200016cc 	.word	0x200016cc
 8004138:	200015a0 	.word	0x200015a0

0800413c <fillThrustersRequest>:

void fillThrustersRequest(uint8_t *buf, uint8_t thruster)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	70fb      	strb	r3, [r7, #3]
    struct thrustersRequest_s res;

    res.AA = 0xAA;
 8004148:	23aa      	movs	r3, #170	; 0xaa
 800414a:	723b      	strb	r3, [r7, #8]
    res.type = 0x01;
 800414c:	2301      	movs	r3, #1
 800414e:	727b      	strb	r3, [r7, #9]
    res.address = rThrusters[thruster].address;
 8004150:	78fa      	ldrb	r2, [r7, #3]
 8004152:	4936      	ldr	r1, [pc, #216]	; (800422c <fillThrustersRequest+0xf0>)
 8004154:	4613      	mov	r3, r2
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	4413      	add	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	440b      	add	r3, r1
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	72bb      	strb	r3, [r7, #10]
    int16_t velocity = rThrusters[thruster].desiredSpeed;
 8004162:	78fa      	ldrb	r2, [r7, #3]
 8004164:	4931      	ldr	r1, [pc, #196]	; (800422c <fillThrustersRequest+0xf0>)
 8004166:	4613      	mov	r3, r2
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	4413      	add	r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	440b      	add	r3, r1
 8004170:	3302      	adds	r3, #2
 8004172:	f993 3000 	ldrsb.w	r3, [r3]
 8004176:	81fb      	strh	r3, [r7, #14]

    // Inverting
    if(rThrusters[thruster].inverse) {
 8004178:	78fa      	ldrb	r2, [r7, #3]
 800417a:	492c      	ldr	r1, [pc, #176]	; (800422c <fillThrustersRequest+0xf0>)
 800417c:	4613      	mov	r3, r2
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	4413      	add	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	440b      	add	r3, r1
 8004186:	3316      	adds	r3, #22
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <fillThrustersRequest+0x5a>
    	velocity *= -1;
 800418e:	89fb      	ldrh	r3, [r7, #14]
 8004190:	425b      	negs	r3, r3
 8004192:	b29b      	uxth	r3, r3
 8004194:	81fb      	strh	r3, [r7, #14]
    }

    // Multiplier constants
    if(velocity > 0) {
 8004196:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800419a:	2b00      	cmp	r3, #0
 800419c:	dd17      	ble.n	80041ce <fillThrustersRequest+0x92>
    	velocity = (int16_t) ( (float) (velocity) * rThrusters[thruster].kForward);
 800419e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041a2:	ee07 3a90 	vmov	s15, r3
 80041a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041aa:	78fa      	ldrb	r2, [r7, #3]
 80041ac:	491f      	ldr	r1, [pc, #124]	; (800422c <fillThrustersRequest+0xf0>)
 80041ae:	4613      	mov	r3, r2
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	4413      	add	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	440b      	add	r3, r1
 80041b8:	330c      	adds	r3, #12
 80041ba:	edd3 7a00 	vldr	s15, [r3]
 80041be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041c6:	ee17 3a90 	vmov	r3, s15
 80041ca:	81fb      	strh	r3, [r7, #14]
 80041cc:	e01a      	b.n	8004204 <fillThrustersRequest+0xc8>
    }
    else if(velocity < 0) {
 80041ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	da16      	bge.n	8004204 <fillThrustersRequest+0xc8>
    	velocity = (int16_t) ((float) (velocity) * rThrusters[thruster].kBackward);
 80041d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041da:	ee07 3a90 	vmov	s15, r3
 80041de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041e2:	78fa      	ldrb	r2, [r7, #3]
 80041e4:	4911      	ldr	r1, [pc, #68]	; (800422c <fillThrustersRequest+0xf0>)
 80041e6:	4613      	mov	r3, r2
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	4413      	add	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	440b      	add	r3, r1
 80041f0:	3310      	adds	r3, #16
 80041f2:	edd3 7a00 	vldr	s15, [r3]
 80041f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041fe:	ee17 3a90 	vmov	r3, s15
 8004202:	81fb      	strh	r3, [r7, #14]
//    	velocity = rThrusters[thruster].sForward;
//    }
//    else if(velocity < -rThrusters[thruster].sBackward) {
//    	velocity = -rThrusters[thruster].sBackward;
//    }
    res.velocity = velocity;
 8004204:	89fb      	ldrh	r3, [r7, #14]
 8004206:	b25b      	sxtb	r3, r3
 8004208:	72fb      	strb	r3, [r7, #11]

    memcpy((void*)buf, (void*)&res, THRUSTERS_REQUEST_LENGTH);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	461a      	mov	r2, r3
 800420e:	f107 0308 	add.w	r3, r7, #8
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	6010      	str	r0, [r2, #0]
 8004216:	791b      	ldrb	r3, [r3, #4]
 8004218:	7113      	strb	r3, [r2, #4]
    AddChecksumm8bVma(buf, THRUSTERS_REQUEST_LENGTH);
 800421a:	2105      	movs	r1, #5
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7fc ffcf 	bl	80011c0 <AddChecksumm8bVma>
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	200015a0 	.word	0x200015a0

08004230 <fillThrustersResponse>:

void fillThrustersResponse(uint8_t *buf, uint8_t thruster)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	70fb      	strb	r3, [r7, #3]
	//TODO errors parsing! and what is all this new stuff means
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 800423c:	2109      	movs	r1, #9
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fc ff91 	bl	8001166 <IsChecksumm8bCorrectVma>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d01f      	beq.n	800428a <fillThrustersResponse+0x5a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d01b      	beq.n	800428a <fillThrustersResponse+0x5a>
    	struct thrustersResponse_s res;
    	memcpy((void*)&res, (void*)buf, THRUSTERS_RESPONSE_LENGTH);
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	f107 030c 	add.w	r3, r7, #12
 8004258:	6810      	ldr	r0, [r2, #0]
 800425a:	6851      	ldr	r1, [r2, #4]
 800425c:	c303      	stmia	r3!, {r0, r1}
 800425e:	7a12      	ldrb	r2, [r2, #8]
 8004260:	701a      	strb	r2, [r3, #0]

        rThrusters[thruster].current = res.current;
 8004262:	78fa      	ldrb	r2, [r7, #3]
 8004264:	8a38      	ldrh	r0, [r7, #16]
 8004266:	490e      	ldr	r1, [pc, #56]	; (80042a0 <fillThrustersResponse+0x70>)
 8004268:	4613      	mov	r3, r2
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	4413      	add	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	440b      	add	r3, r1
 8004272:	3304      	adds	r3, #4
 8004274:	4602      	mov	r2, r0
 8004276:	801a      	strh	r2, [r3, #0]

        ++uartBus[THRUSTERS_UART].successRxCounter;
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <fillThrustersResponse+0x74>)
 800427a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800427e:	3301      	adds	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <fillThrustersResponse+0x74>)
 8004284:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 8004288:	e005      	b.n	8004296 <fillThrustersResponse+0x66>
    }
    else {
    	++uartBus[THRUSTERS_UART].brokenRxCounter;
 800428a:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <fillThrustersResponse+0x74>)
 800428c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428e:	3301      	adds	r3, #1
 8004290:	4a04      	ldr	r2, [pc, #16]	; (80042a4 <fillThrustersResponse+0x74>)
 8004292:	6453      	str	r3, [r2, #68]	; 0x44
    }
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	200015a0 	.word	0x200015a0
 80042a4:	200000c8 	.word	0x200000c8

080042a8 <formThrustVectors>:

void formThrustVectors()
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08a      	sub	sp, #40	; 0x28
 80042ac:	af00      	add	r7, sp, #0
	float velocity[THRUSTERS_NUMBER];
	for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80042ae:	2300      	movs	r3, #0
 80042b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80042b4:	e00d      	b.n	80042d2 <formThrustVectors+0x2a>
		velocity[i] = 0;
 80042b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	3328      	adds	r3, #40	; 0x28
 80042be:	443b      	add	r3, r7
 80042c0:	3b24      	subs	r3, #36	; 0x24
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80042c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042cc:	3301      	adds	r3, #1
 80042ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80042d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042d6:	2b07      	cmp	r3, #7
 80042d8:	d9ed      	bls.n	80042b6 <formThrustVectors+0xe>
	}
	// March thrusters1
	addMarchToSumm(velocity);
 80042da:	1d3b      	adds	r3, r7, #4
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 f841 	bl	8004364 <addMarchToSumm>
	// Lag Thrusters
	addYawToSumm(velocity);
 80042e2:	1d3b      	adds	r3, r7, #4
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 f8ed 	bl	80044c4 <addYawToSumm>
	addLagToSumm(velocity);
 80042ea:	1d3b      	adds	r3, r7, #4
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 f87b 	bl	80043e8 <addLagToSumm>
	// Two vertical thrusters
	addDepthToSumm(velocity);
 80042f2:	1d3b      	adds	r3, r7, #4
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 f8af 	bl	8004458 <addDepthToSumm>
	addRollToSumm(velocity);
 80042fa:	1d3b      	adds	r3, r7, #4
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 f919 	bl	8004534 <addRollToSumm>
	// One vertical corrective thruster
	addPitchToSumm(velocity);
 8004302:	1d3b      	adds	r3, r7, #4
 8004304:	4618      	mov	r0, r3
 8004306:	f000 f943 	bl	8004590 <addPitchToSumm>

	for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i) {
 800430a:	2300      	movs	r3, #0
 800430c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004310:	e01d      	b.n	800434e <formThrustVectors+0xa6>
		rThrusters[i].desiredSpeed = resizeFloatToUint8(velocity[i]);
 8004312:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	3328      	adds	r3, #40	; 0x28
 800431a:	443b      	add	r3, r7
 800431c:	3b24      	subs	r3, #36	; 0x24
 800431e:	edd3 7a00 	vldr	s15, [r3]
 8004322:	eeb0 0a67 	vmov.f32	s0, s15
 8004326:	f000 f9a5 	bl	8004674 <resizeFloatToUint8>
 800432a:	4603      	mov	r3, r0
 800432c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004330:	b258      	sxtb	r0, r3
 8004332:	490b      	ldr	r1, [pc, #44]	; (8004360 <formThrustVectors+0xb8>)
 8004334:	4613      	mov	r3, r2
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	4413      	add	r3, r2
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	440b      	add	r3, r1
 800433e:	3302      	adds	r3, #2
 8004340:	4602      	mov	r2, r0
 8004342:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i) {
 8004344:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004348:	3301      	adds	r3, #1
 800434a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800434e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004352:	2b07      	cmp	r3, #7
 8004354:	d9dd      	bls.n	8004312 <formThrustVectors+0x6a>
	}
}
 8004356:	bf00      	nop
 8004358:	bf00      	nop
 800435a:	3728      	adds	r7, #40	; 0x28
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	200015a0 	.word	0x200015a0

08004364 <addMarchToSumm>:

void addMarchToSumm(float *velocity)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
	float value = 0;
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_MARCH].enable) {
 8004372:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <addMarchToSumm+0x78>)
 8004374:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004378:	2b00      	cmp	r3, #0
 800437a:	d004      	beq.n	8004386 <addMarchToSumm+0x22>
		value = rStabState[STAB_MARCH].outputSignal;
 800437c:	4b18      	ldr	r3, [pc, #96]	; (80043e0 <addMarchToSumm+0x7c>)
 800437e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	e002      	b.n	800438c <addMarchToSumm+0x28>
	}
	else {
		value = rJoySpeed.march;
 8004386:	4b17      	ldr	r3, [pc, #92]	; (80043e4 <addMarchToSumm+0x80>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60fb      	str	r3, [r7, #12]
	}
	// March contour summ
	velocity[MarshLEFT] += value;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	ed93 7a00 	vldr	s14, [r3]
 8004392:	edd7 7a03 	vldr	s15, [r7, #12]
 8004396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	edc3 7a00 	vstr	s15, [r3]
	velocity[MarshRIGHT] += value;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3304      	adds	r3, #4
 80043a4:	ed93 7a00 	vldr	s14, [r3]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3304      	adds	r3, #4
 80043ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80043b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043b4:	edc3 7a00 	vstr	s15, [r3]
	velocity[MarshDown] += value;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	331c      	adds	r3, #28
 80043bc:	ed93 7a00 	vldr	s14, [r3]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	331c      	adds	r3, #28
 80043c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80043c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043cc:	edc3 7a00 	vstr	s15, [r3]
//		}
//		else if(velocity[i] < rStabConstants[STAB_MARCH].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_MARCH].sOutSummatorMin;
//		}
//	}
}
 80043d0:	bf00      	nop
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	20001724 	.word	0x20001724
 80043e0:	200018d4 	.word	0x200018d4
 80043e4:	200016cc 	.word	0x200016cc

080043e8 <addLagToSumm>:

void addLagToSumm(float *velocity)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
	float value = 0;
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_LAG].enable) {
 80043f6:	4b15      	ldr	r3, [pc, #84]	; (800444c <addLagToSumm+0x64>)
 80043f8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d004      	beq.n	800440a <addLagToSumm+0x22>
		value = rStabState[STAB_LAG].outputSignal;
 8004400:	4b13      	ldr	r3, [pc, #76]	; (8004450 <addLagToSumm+0x68>)
 8004402:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	e002      	b.n	8004410 <addLagToSumm+0x28>
	}
	else {
		value = rJoySpeed.lag;
 800440a:	4b12      	ldr	r3, [pc, #72]	; (8004454 <addLagToSumm+0x6c>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	60fb      	str	r3, [r7, #12]
	}
	// Lag contour summ
	velocity[Lag1st] += value;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3314      	adds	r3, #20
 8004414:	ed93 7a00 	vldr	s14, [r3]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3314      	adds	r3, #20
 800441c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004424:	edc3 7a00 	vstr	s15, [r3]
	velocity[Lag2nd] += value;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3318      	adds	r3, #24
 800442c:	ed93 7a00 	vldr	s14, [r3]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3318      	adds	r3, #24
 8004434:	edd7 7a03 	vldr	s15, [r7, #12]
 8004438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800443c:	edc3 7a00 	vstr	s15, [r3]
//		}
//		else if(velocity[i] < rStabConstants[STAB_LAG].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_LAG].sOutSummatorMin;
//		}
//	}
}
 8004440:	bf00      	nop
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	20001724 	.word	0x20001724
 8004450:	200018d4 	.word	0x200018d4
 8004454:	200016cc 	.word	0x200016cc

08004458 <addDepthToSumm>:

void addDepthToSumm(float *velocity)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
	float value = 0;
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_DEPTH].enable) {
 8004466:	4b14      	ldr	r3, [pc, #80]	; (80044b8 <addDepthToSumm+0x60>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <addDepthToSumm+0x1e>
		value = rStabState[STAB_DEPTH].outputSignal;
 800446e:	4b13      	ldr	r3, [pc, #76]	; (80044bc <addDepthToSumm+0x64>)
 8004470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	e002      	b.n	800447c <addDepthToSumm+0x24>
	}
	else {
		value = rJoySpeed.depth;
 8004476:	4b12      	ldr	r3, [pc, #72]	; (80044c0 <addDepthToSumm+0x68>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	60fb      	str	r3, [r7, #12]
	}
	// Depth contour summ
	//velocity[VertBACK] -= value;
	velocity[VertLEFT] -= value;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3308      	adds	r3, #8
 8004480:	ed93 7a00 	vldr	s14, [r3]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3308      	adds	r3, #8
 8004488:	edd7 7a03 	vldr	s15, [r7, #12]
 800448c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004490:	edc3 7a00 	vstr	s15, [r3]
	velocity[VertRIGHT] -= value;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	330c      	adds	r3, #12
 8004498:	ed93 7a00 	vldr	s14, [r3]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	330c      	adds	r3, #12
 80044a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80044a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044a8:	edc3 7a00 	vstr	s15, [r3]
//		}
//		else if(velocity[i] < rStabConstants[STAB_DEPTH].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_DEPTH].sOutSummatorMin;
//		}
//	}
}
 80044ac:	bf00      	nop
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	20001724 	.word	0x20001724
 80044bc:	200018d4 	.word	0x200018d4
 80044c0:	200016cc 	.word	0x200016cc

080044c4 <addYawToSumm>:

void addYawToSumm(float *velocity)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
	float value = 0;
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_YAW].enable) {
 80044d2:	4b15      	ldr	r3, [pc, #84]	; (8004528 <addYawToSumm+0x64>)
 80044d4:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d004      	beq.n	80044e6 <addYawToSumm+0x22>
		value = rStabState[STAB_YAW].outputSignal;
 80044dc:	4b13      	ldr	r3, [pc, #76]	; (800452c <addYawToSumm+0x68>)
 80044de:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	e002      	b.n	80044ec <addYawToSumm+0x28>
	}
	else {
		value = rJoySpeed.yaw;
 80044e6:	4b12      	ldr	r3, [pc, #72]	; (8004530 <addYawToSumm+0x6c>)
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	60fb      	str	r3, [r7, #12]
	}
	// Yaw contour summ
//	velocity[MarshLEFT] += value;
//	velocity[MarshRIGHT] -= value;
	velocity[Lag1st] += value;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3314      	adds	r3, #20
 80044f0:	ed93 7a00 	vldr	s14, [r3]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3314      	adds	r3, #20
 80044f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80044fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004500:	edc3 7a00 	vstr	s15, [r3]
	velocity[Lag2nd] -= value;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3318      	adds	r3, #24
 8004508:	ed93 7a00 	vldr	s14, [r3]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3318      	adds	r3, #24
 8004510:	edd7 7a03 	vldr	s15, [r7, #12]
 8004514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004518:	edc3 7a00 	vstr	s15, [r3]
//		}
//		else if(velocity[i] < rStabConstants[STAB_YAW].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_YAW].sOutSummatorMin;
//		}
//	}
}
 800451c:	bf00      	nop
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	20001724 	.word	0x20001724
 800452c:	200018d4 	.word	0x200018d4
 8004530:	200016cc 	.word	0x200016cc

08004534 <addRollToSumm>:

void addRollToSumm(float *velocity)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	float value = 0;
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_ROLL].enable) {
 8004542:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <addRollToSumm+0x4c>)
 8004544:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8004548:	2b00      	cmp	r3, #0
 800454a:	d004      	beq.n	8004556 <addRollToSumm+0x22>
		value = rStabState[STAB_ROLL].outputSignal;
 800454c:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <addRollToSumm+0x50>)
 800454e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	e002      	b.n	800455c <addRollToSumm+0x28>
	}
	else {
		value = rJoySpeed.roll;
 8004556:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <addRollToSumm+0x54>)
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	60fb      	str	r3, [r7, #12]
	}
	// Yaw contour summ
	velocity[VertBACK] += value;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3310      	adds	r3, #16
 8004560:	ed93 7a00 	vldr	s14, [r3]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3310      	adds	r3, #16
 8004568:	edd7 7a03 	vldr	s15, [r7, #12]
 800456c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004570:	edc3 7a00 	vstr	s15, [r3]
//		}
//		else if(velocity[i] < rStabConstants[STAB_ROLL].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_ROLL].sOutSummatorMin;
//		}
//	}
}
 8004574:	bf00      	nop
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	20001724 	.word	0x20001724
 8004584:	200018d4 	.word	0x200018d4
 8004588:	200016cc 	.word	0x200016cc
 800458c:	00000000 	.word	0x00000000

08004590 <addPitchToSumm>:

void addPitchToSumm(float *velocity)
{
 8004590:	b5b0      	push	{r4, r5, r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
	float value = 0;
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_PITCH].enable) {
 800459e:	4b32      	ldr	r3, [pc, #200]	; (8004668 <addPitchToSumm+0xd8>)
 80045a0:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d004      	beq.n	80045b2 <addPitchToSumm+0x22>
		value = rStabState[STAB_PITCH].outputSignal;
 80045a8:	4b30      	ldr	r3, [pc, #192]	; (800466c <addPitchToSumm+0xdc>)
 80045aa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	e002      	b.n	80045b8 <addPitchToSumm+0x28>
	}
	else {
		value = rJoySpeed.pitch;
 80045b2:	4b2f      	ldr	r3, [pc, #188]	; (8004670 <addPitchToSumm+0xe0>)
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	60fb      	str	r3, [r7, #12]
	}
	velocity[VertBACK] += value;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3310      	adds	r3, #16
 80045bc:	ed93 7a00 	vldr	s14, [r3]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3310      	adds	r3, #16
 80045c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80045c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045cc:	edc3 7a00 	vstr	s15, [r3]

	velocity[VertLEFT] -= 0.4*value;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3308      	adds	r3, #8
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fb ff5e 	bl	8000498 <__aeabi_f2d>
 80045dc:	4604      	mov	r4, r0
 80045de:	460d      	mov	r5, r1
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f7fb ff59 	bl	8000498 <__aeabi_f2d>
 80045e6:	a31e      	add	r3, pc, #120	; (adr r3, 8004660 <addPitchToSumm+0xd0>)
 80045e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ec:	f7fb ffac 	bl	8000548 <__aeabi_dmul>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4620      	mov	r0, r4
 80045f6:	4629      	mov	r1, r5
 80045f8:	f7fb fdee 	bl	80001d8 <__aeabi_dsub>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4610      	mov	r0, r2
 8004602:	4619      	mov	r1, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f103 0408 	add.w	r4, r3, #8
 800460a:	f7fc fa75 	bl	8000af8 <__aeabi_d2f>
 800460e:	4603      	mov	r3, r0
 8004610:	6023      	str	r3, [r4, #0]
	velocity[VertRIGHT] -= 0.4*value;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	330c      	adds	r3, #12
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f7fb ff3d 	bl	8000498 <__aeabi_f2d>
 800461e:	4604      	mov	r4, r0
 8004620:	460d      	mov	r5, r1
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f7fb ff38 	bl	8000498 <__aeabi_f2d>
 8004628:	a30d      	add	r3, pc, #52	; (adr r3, 8004660 <addPitchToSumm+0xd0>)
 800462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462e:	f7fb ff8b 	bl	8000548 <__aeabi_dmul>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4620      	mov	r0, r4
 8004638:	4629      	mov	r1, r5
 800463a:	f7fb fdcd 	bl	80001d8 <__aeabi_dsub>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f103 040c 	add.w	r4, r3, #12
 800464c:	f7fc fa54 	bl	8000af8 <__aeabi_d2f>
 8004650:	4603      	mov	r3, r0
 8004652:	6023      	str	r3, [r4, #0]
//		}
//		else if(velocity[i] < rStabConstants[STAB_PITCH].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_PITCH].sOutSummatorMin;
//		}
//	}
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bdb0      	pop	{r4, r5, r7, pc}
 800465c:	f3af 8000 	nop.w
 8004660:	9999999a 	.word	0x9999999a
 8004664:	3fd99999 	.word	0x3fd99999
 8004668:	20001724 	.word	0x20001724
 800466c:	200018d4 	.word	0x200018d4
 8004670:	200016cc 	.word	0x200016cc

08004674 <resizeFloatToUint8>:

uint8_t resizeFloatToUint8(float input)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	ed87 0a01 	vstr	s0, [r7, #4]
	int32_t cast = (int32_t) input;
 800467e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004686:	ee17 3a90 	vmov	r3, s15
 800468a:	60fb      	str	r3, [r7, #12]
	cast = cast / 0xFF;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a0e      	ldr	r2, [pc, #56]	; (80046c8 <resizeFloatToUint8+0x54>)
 8004690:	fb82 1203 	smull	r1, r2, r2, r3
 8004694:	441a      	add	r2, r3
 8004696:	11d2      	asrs	r2, r2, #7
 8004698:	17db      	asrs	r3, r3, #31
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	60fb      	str	r3, [r7, #12]
	if (cast > 127) {
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2b7f      	cmp	r3, #127	; 0x7f
 80046a2:	dd02      	ble.n	80046aa <resizeFloatToUint8+0x36>
		cast = 127;
 80046a4:	237f      	movs	r3, #127	; 0x7f
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e006      	b.n	80046b8 <resizeFloatToUint8+0x44>
	}
	else if(cast < -127) {
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 80046b0:	da02      	bge.n	80046b8 <resizeFloatToUint8+0x44>
		cast = -127;
 80046b2:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80046b6:	60fb      	str	r3, [r7, #12]
	}
	return (int8_t) cast;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	b2db      	uxtb	r3, r3
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	80808081 	.word	0x80808081

080046cc <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046d2:	463b      	mov	r3, r7
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80046da:	4b14      	ldr	r3, [pc, #80]	; (800472c <MX_TIM7_Init+0x60>)
 80046dc:	4a14      	ldr	r2, [pc, #80]	; (8004730 <MX_TIM7_Init+0x64>)
 80046de:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80046e0:	4b12      	ldr	r3, [pc, #72]	; (800472c <MX_TIM7_Init+0x60>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046e6:	4b11      	ldr	r3, [pc, #68]	; (800472c <MX_TIM7_Init+0x60>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 80046ec:	4b0f      	ldr	r3, [pc, #60]	; (800472c <MX_TIM7_Init+0x60>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046f2:	4b0e      	ldr	r3, [pc, #56]	; (800472c <MX_TIM7_Init+0x60>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80046f8:	480c      	ldr	r0, [pc, #48]	; (800472c <MX_TIM7_Init+0x60>)
 80046fa:	f004 f813 	bl	8008724 <HAL_TIM_Base_Init>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004704:	f7ff f812 	bl	800372c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004708:	2300      	movs	r3, #0
 800470a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800470c:	2300      	movs	r3, #0
 800470e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004710:	463b      	mov	r3, r7
 8004712:	4619      	mov	r1, r3
 8004714:	4805      	ldr	r0, [pc, #20]	; (800472c <MX_TIM7_Init+0x60>)
 8004716:	f004 fa95 	bl	8008c44 <HAL_TIMEx_MasterConfigSynchronization>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004720:	f7ff f804 	bl	800372c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004724:	bf00      	nop
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20001c6c 	.word	0x20001c6c
 8004730:	40001400 	.word	0x40001400

08004734 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a0b      	ldr	r2, [pc, #44]	; (8004770 <HAL_TIM_Base_MspInit+0x3c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d10d      	bne.n	8004762 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <HAL_TIM_Base_MspInit+0x40>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	4a09      	ldr	r2, [pc, #36]	; (8004774 <HAL_TIM_Base_MspInit+0x40>)
 8004750:	f043 0320 	orr.w	r3, r3, #32
 8004754:	6413      	str	r3, [r2, #64]	; 0x40
 8004756:	4b07      	ldr	r3, [pc, #28]	; (8004774 <HAL_TIM_Base_MspInit+0x40>)
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004762:	bf00      	nop
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40001400 	.word	0x40001400
 8004774:	40023800 	.word	0x40023800

08004778 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800477c:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <MX_USART1_UART_Init+0x4c>)
 800477e:	4a12      	ldr	r2, [pc, #72]	; (80047c8 <MX_USART1_UART_Init+0x50>)
 8004780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004782:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <MX_USART1_UART_Init+0x4c>)
 8004784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800478a:	4b0e      	ldr	r3, [pc, #56]	; (80047c4 <MX_USART1_UART_Init+0x4c>)
 800478c:	2200      	movs	r2, #0
 800478e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004790:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <MX_USART1_UART_Init+0x4c>)
 8004792:	2200      	movs	r2, #0
 8004794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004796:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <MX_USART1_UART_Init+0x4c>)
 8004798:	2200      	movs	r2, #0
 800479a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800479c:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <MX_USART1_UART_Init+0x4c>)
 800479e:	220c      	movs	r2, #12
 80047a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047a2:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <MX_USART1_UART_Init+0x4c>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80047a8:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <MX_USART1_UART_Init+0x4c>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80047ae:	4805      	ldr	r0, [pc, #20]	; (80047c4 <MX_USART1_UART_Init+0x4c>)
 80047b0:	f004 fad8 	bl	8008d64 <HAL_UART_Init>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80047ba:	f7fe ffb7 	bl	800372c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80047be:	bf00      	nop
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20001cb4 	.word	0x20001cb4
 80047c8:	40011000 	.word	0x40011000

080047cc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80047d0:	4b11      	ldr	r3, [pc, #68]	; (8004818 <MX_USART2_UART_Init+0x4c>)
 80047d2:	4a12      	ldr	r2, [pc, #72]	; (800481c <MX_USART2_UART_Init+0x50>)
 80047d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80047d6:	4b10      	ldr	r3, [pc, #64]	; (8004818 <MX_USART2_UART_Init+0x4c>)
 80047d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80047dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80047de:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <MX_USART2_UART_Init+0x4c>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80047e4:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <MX_USART2_UART_Init+0x4c>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80047ea:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <MX_USART2_UART_Init+0x4c>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80047f0:	4b09      	ldr	r3, [pc, #36]	; (8004818 <MX_USART2_UART_Init+0x4c>)
 80047f2:	220c      	movs	r2, #12
 80047f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047f6:	4b08      	ldr	r3, [pc, #32]	; (8004818 <MX_USART2_UART_Init+0x4c>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80047fc:	4b06      	ldr	r3, [pc, #24]	; (8004818 <MX_USART2_UART_Init+0x4c>)
 80047fe:	2200      	movs	r2, #0
 8004800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004802:	4805      	ldr	r0, [pc, #20]	; (8004818 <MX_USART2_UART_Init+0x4c>)
 8004804:	f004 faae 	bl	8008d64 <HAL_UART_Init>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800480e:	f7fe ff8d 	bl	800372c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004812:	bf00      	nop
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20001cf8 	.word	0x20001cf8
 800481c:	40004400 	.word	0x40004400

08004820 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004824:	4b11      	ldr	r3, [pc, #68]	; (800486c <MX_USART3_UART_Init+0x4c>)
 8004826:	4a12      	ldr	r2, [pc, #72]	; (8004870 <MX_USART3_UART_Init+0x50>)
 8004828:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800482a:	4b10      	ldr	r3, [pc, #64]	; (800486c <MX_USART3_UART_Init+0x4c>)
 800482c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004830:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004832:	4b0e      	ldr	r3, [pc, #56]	; (800486c <MX_USART3_UART_Init+0x4c>)
 8004834:	2200      	movs	r2, #0
 8004836:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004838:	4b0c      	ldr	r3, [pc, #48]	; (800486c <MX_USART3_UART_Init+0x4c>)
 800483a:	2200      	movs	r2, #0
 800483c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800483e:	4b0b      	ldr	r3, [pc, #44]	; (800486c <MX_USART3_UART_Init+0x4c>)
 8004840:	2200      	movs	r2, #0
 8004842:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004844:	4b09      	ldr	r3, [pc, #36]	; (800486c <MX_USART3_UART_Init+0x4c>)
 8004846:	220c      	movs	r2, #12
 8004848:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800484a:	4b08      	ldr	r3, [pc, #32]	; (800486c <MX_USART3_UART_Init+0x4c>)
 800484c:	2200      	movs	r2, #0
 800484e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004850:	4b06      	ldr	r3, [pc, #24]	; (800486c <MX_USART3_UART_Init+0x4c>)
 8004852:	2200      	movs	r2, #0
 8004854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004856:	4805      	ldr	r0, [pc, #20]	; (800486c <MX_USART3_UART_Init+0x4c>)
 8004858:	f004 fa84 	bl	8008d64 <HAL_UART_Init>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004862:	f7fe ff63 	bl	800372c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004866:	bf00      	nop
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20001d3c 	.word	0x20001d3c
 8004870:	40004800 	.word	0x40004800

08004874 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b08e      	sub	sp, #56	; 0x38
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800487c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	605a      	str	r2, [r3, #4]
 8004886:	609a      	str	r2, [r3, #8]
 8004888:	60da      	str	r2, [r3, #12]
 800488a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a98      	ldr	r2, [pc, #608]	; (8004af4 <HAL_UART_MspInit+0x280>)
 8004892:	4293      	cmp	r3, r2
 8004894:	f040 8094 	bne.w	80049c0 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004898:	2300      	movs	r3, #0
 800489a:	623b      	str	r3, [r7, #32]
 800489c:	4b96      	ldr	r3, [pc, #600]	; (8004af8 <HAL_UART_MspInit+0x284>)
 800489e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a0:	4a95      	ldr	r2, [pc, #596]	; (8004af8 <HAL_UART_MspInit+0x284>)
 80048a2:	f043 0310 	orr.w	r3, r3, #16
 80048a6:	6453      	str	r3, [r2, #68]	; 0x44
 80048a8:	4b93      	ldr	r3, [pc, #588]	; (8004af8 <HAL_UART_MspInit+0x284>)
 80048aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	623b      	str	r3, [r7, #32]
 80048b2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048b4:	2300      	movs	r3, #0
 80048b6:	61fb      	str	r3, [r7, #28]
 80048b8:	4b8f      	ldr	r3, [pc, #572]	; (8004af8 <HAL_UART_MspInit+0x284>)
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	4a8e      	ldr	r2, [pc, #568]	; (8004af8 <HAL_UART_MspInit+0x284>)
 80048be:	f043 0301 	orr.w	r3, r3, #1
 80048c2:	6313      	str	r3, [r2, #48]	; 0x30
 80048c4:	4b8c      	ldr	r3, [pc, #560]	; (8004af8 <HAL_UART_MspInit+0x284>)
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80048d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d6:	2302      	movs	r3, #2
 80048d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048de:	2303      	movs	r3, #3
 80048e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80048e2:	2307      	movs	r3, #7
 80048e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048ea:	4619      	mov	r1, r3
 80048ec:	4883      	ldr	r0, [pc, #524]	; (8004afc <HAL_UART_MspInit+0x288>)
 80048ee:	f001 fb1b 	bl	8005f28 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80048f2:	4b83      	ldr	r3, [pc, #524]	; (8004b00 <HAL_UART_MspInit+0x28c>)
 80048f4:	4a83      	ldr	r2, [pc, #524]	; (8004b04 <HAL_UART_MspInit+0x290>)
 80048f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80048f8:	4b81      	ldr	r3, [pc, #516]	; (8004b00 <HAL_UART_MspInit+0x28c>)
 80048fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80048fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004900:	4b7f      	ldr	r3, [pc, #508]	; (8004b00 <HAL_UART_MspInit+0x28c>)
 8004902:	2200      	movs	r2, #0
 8004904:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004906:	4b7e      	ldr	r3, [pc, #504]	; (8004b00 <HAL_UART_MspInit+0x28c>)
 8004908:	2200      	movs	r2, #0
 800490a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800490c:	4b7c      	ldr	r3, [pc, #496]	; (8004b00 <HAL_UART_MspInit+0x28c>)
 800490e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004912:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004914:	4b7a      	ldr	r3, [pc, #488]	; (8004b00 <HAL_UART_MspInit+0x28c>)
 8004916:	2200      	movs	r2, #0
 8004918:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800491a:	4b79      	ldr	r3, [pc, #484]	; (8004b00 <HAL_UART_MspInit+0x28c>)
 800491c:	2200      	movs	r2, #0
 800491e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004920:	4b77      	ldr	r3, [pc, #476]	; (8004b00 <HAL_UART_MspInit+0x28c>)
 8004922:	2200      	movs	r2, #0
 8004924:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004926:	4b76      	ldr	r3, [pc, #472]	; (8004b00 <HAL_UART_MspInit+0x28c>)
 8004928:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800492c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800492e:	4b74      	ldr	r3, [pc, #464]	; (8004b00 <HAL_UART_MspInit+0x28c>)
 8004930:	2200      	movs	r2, #0
 8004932:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004934:	4872      	ldr	r0, [pc, #456]	; (8004b00 <HAL_UART_MspInit+0x28c>)
 8004936:	f000 fc0f 	bl	8005158 <HAL_DMA_Init>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8004940:	f7fe fef4 	bl	800372c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a6e      	ldr	r2, [pc, #440]	; (8004b00 <HAL_UART_MspInit+0x28c>)
 8004948:	639a      	str	r2, [r3, #56]	; 0x38
 800494a:	4a6d      	ldr	r2, [pc, #436]	; (8004b00 <HAL_UART_MspInit+0x28c>)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8004950:	4b6d      	ldr	r3, [pc, #436]	; (8004b08 <HAL_UART_MspInit+0x294>)
 8004952:	4a6e      	ldr	r2, [pc, #440]	; (8004b0c <HAL_UART_MspInit+0x298>)
 8004954:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004956:	4b6c      	ldr	r3, [pc, #432]	; (8004b08 <HAL_UART_MspInit+0x294>)
 8004958:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800495c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800495e:	4b6a      	ldr	r3, [pc, #424]	; (8004b08 <HAL_UART_MspInit+0x294>)
 8004960:	2240      	movs	r2, #64	; 0x40
 8004962:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004964:	4b68      	ldr	r3, [pc, #416]	; (8004b08 <HAL_UART_MspInit+0x294>)
 8004966:	2200      	movs	r2, #0
 8004968:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800496a:	4b67      	ldr	r3, [pc, #412]	; (8004b08 <HAL_UART_MspInit+0x294>)
 800496c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004970:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004972:	4b65      	ldr	r3, [pc, #404]	; (8004b08 <HAL_UART_MspInit+0x294>)
 8004974:	2200      	movs	r2, #0
 8004976:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004978:	4b63      	ldr	r3, [pc, #396]	; (8004b08 <HAL_UART_MspInit+0x294>)
 800497a:	2200      	movs	r2, #0
 800497c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800497e:	4b62      	ldr	r3, [pc, #392]	; (8004b08 <HAL_UART_MspInit+0x294>)
 8004980:	2200      	movs	r2, #0
 8004982:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004984:	4b60      	ldr	r3, [pc, #384]	; (8004b08 <HAL_UART_MspInit+0x294>)
 8004986:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800498a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800498c:	4b5e      	ldr	r3, [pc, #376]	; (8004b08 <HAL_UART_MspInit+0x294>)
 800498e:	2200      	movs	r2, #0
 8004990:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004992:	485d      	ldr	r0, [pc, #372]	; (8004b08 <HAL_UART_MspInit+0x294>)
 8004994:	f000 fbe0 	bl	8005158 <HAL_DMA_Init>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800499e:	f7fe fec5 	bl	800372c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a58      	ldr	r2, [pc, #352]	; (8004b08 <HAL_UART_MspInit+0x294>)
 80049a6:	635a      	str	r2, [r3, #52]	; 0x34
 80049a8:	4a57      	ldr	r2, [pc, #348]	; (8004b08 <HAL_UART_MspInit+0x294>)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80049ae:	2200      	movs	r2, #0
 80049b0:	2105      	movs	r1, #5
 80049b2:	2025      	movs	r0, #37	; 0x25
 80049b4:	f000 fba6 	bl	8005104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80049b8:	2025      	movs	r0, #37	; 0x25
 80049ba:	f000 fbbf 	bl	800513c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80049be:	e14a      	b.n	8004c56 <HAL_UART_MspInit+0x3e2>
  else if(uartHandle->Instance==USART2)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a52      	ldr	r2, [pc, #328]	; (8004b10 <HAL_UART_MspInit+0x29c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	f040 80ac 	bne.w	8004b24 <HAL_UART_MspInit+0x2b0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80049cc:	2300      	movs	r3, #0
 80049ce:	61bb      	str	r3, [r7, #24]
 80049d0:	4b49      	ldr	r3, [pc, #292]	; (8004af8 <HAL_UART_MspInit+0x284>)
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	4a48      	ldr	r2, [pc, #288]	; (8004af8 <HAL_UART_MspInit+0x284>)
 80049d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049da:	6413      	str	r3, [r2, #64]	; 0x40
 80049dc:	4b46      	ldr	r3, [pc, #280]	; (8004af8 <HAL_UART_MspInit+0x284>)
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e4:	61bb      	str	r3, [r7, #24]
 80049e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	4b42      	ldr	r3, [pc, #264]	; (8004af8 <HAL_UART_MspInit+0x284>)
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	4a41      	ldr	r2, [pc, #260]	; (8004af8 <HAL_UART_MspInit+0x284>)
 80049f2:	f043 0301 	orr.w	r3, r3, #1
 80049f6:	6313      	str	r3, [r2, #48]	; 0x30
 80049f8:	4b3f      	ldr	r3, [pc, #252]	; (8004af8 <HAL_UART_MspInit+0x284>)
 80049fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004a04:	230c      	movs	r3, #12
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a08:	2302      	movs	r3, #2
 8004a0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a10:	2303      	movs	r3, #3
 8004a12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a14:	2307      	movs	r3, #7
 8004a16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4837      	ldr	r0, [pc, #220]	; (8004afc <HAL_UART_MspInit+0x288>)
 8004a20:	f001 fa82 	bl	8005f28 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004a24:	4b3b      	ldr	r3, [pc, #236]	; (8004b14 <HAL_UART_MspInit+0x2a0>)
 8004a26:	4a3c      	ldr	r2, [pc, #240]	; (8004b18 <HAL_UART_MspInit+0x2a4>)
 8004a28:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004a2a:	4b3a      	ldr	r3, [pc, #232]	; (8004b14 <HAL_UART_MspInit+0x2a0>)
 8004a2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a30:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a32:	4b38      	ldr	r3, [pc, #224]	; (8004b14 <HAL_UART_MspInit+0x2a0>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a38:	4b36      	ldr	r3, [pc, #216]	; (8004b14 <HAL_UART_MspInit+0x2a0>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a3e:	4b35      	ldr	r3, [pc, #212]	; (8004b14 <HAL_UART_MspInit+0x2a0>)
 8004a40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a44:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a46:	4b33      	ldr	r3, [pc, #204]	; (8004b14 <HAL_UART_MspInit+0x2a0>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a4c:	4b31      	ldr	r3, [pc, #196]	; (8004b14 <HAL_UART_MspInit+0x2a0>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004a52:	4b30      	ldr	r3, [pc, #192]	; (8004b14 <HAL_UART_MspInit+0x2a0>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004a58:	4b2e      	ldr	r3, [pc, #184]	; (8004b14 <HAL_UART_MspInit+0x2a0>)
 8004a5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a5e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a60:	4b2c      	ldr	r3, [pc, #176]	; (8004b14 <HAL_UART_MspInit+0x2a0>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004a66:	482b      	ldr	r0, [pc, #172]	; (8004b14 <HAL_UART_MspInit+0x2a0>)
 8004a68:	f000 fb76 	bl	8005158 <HAL_DMA_Init>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_UART_MspInit+0x202>
      Error_Handler();
 8004a72:	f7fe fe5b 	bl	800372c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a26      	ldr	r2, [pc, #152]	; (8004b14 <HAL_UART_MspInit+0x2a0>)
 8004a7a:	639a      	str	r2, [r3, #56]	; 0x38
 8004a7c:	4a25      	ldr	r2, [pc, #148]	; (8004b14 <HAL_UART_MspInit+0x2a0>)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004a82:	4b26      	ldr	r3, [pc, #152]	; (8004b1c <HAL_UART_MspInit+0x2a8>)
 8004a84:	4a26      	ldr	r2, [pc, #152]	; (8004b20 <HAL_UART_MspInit+0x2ac>)
 8004a86:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004a88:	4b24      	ldr	r3, [pc, #144]	; (8004b1c <HAL_UART_MspInit+0x2a8>)
 8004a8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a8e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a90:	4b22      	ldr	r3, [pc, #136]	; (8004b1c <HAL_UART_MspInit+0x2a8>)
 8004a92:	2240      	movs	r2, #64	; 0x40
 8004a94:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a96:	4b21      	ldr	r3, [pc, #132]	; (8004b1c <HAL_UART_MspInit+0x2a8>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a9c:	4b1f      	ldr	r3, [pc, #124]	; (8004b1c <HAL_UART_MspInit+0x2a8>)
 8004a9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004aa2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004aa4:	4b1d      	ldr	r3, [pc, #116]	; (8004b1c <HAL_UART_MspInit+0x2a8>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004aaa:	4b1c      	ldr	r3, [pc, #112]	; (8004b1c <HAL_UART_MspInit+0x2a8>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004ab0:	4b1a      	ldr	r3, [pc, #104]	; (8004b1c <HAL_UART_MspInit+0x2a8>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004ab6:	4b19      	ldr	r3, [pc, #100]	; (8004b1c <HAL_UART_MspInit+0x2a8>)
 8004ab8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004abc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004abe:	4b17      	ldr	r3, [pc, #92]	; (8004b1c <HAL_UART_MspInit+0x2a8>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004ac4:	4815      	ldr	r0, [pc, #84]	; (8004b1c <HAL_UART_MspInit+0x2a8>)
 8004ac6:	f000 fb47 	bl	8005158 <HAL_DMA_Init>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_UART_MspInit+0x260>
      Error_Handler();
 8004ad0:	f7fe fe2c 	bl	800372c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a11      	ldr	r2, [pc, #68]	; (8004b1c <HAL_UART_MspInit+0x2a8>)
 8004ad8:	635a      	str	r2, [r3, #52]	; 0x34
 8004ada:	4a10      	ldr	r2, [pc, #64]	; (8004b1c <HAL_UART_MspInit+0x2a8>)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	2105      	movs	r1, #5
 8004ae4:	2026      	movs	r0, #38	; 0x26
 8004ae6:	f000 fb0d 	bl	8005104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004aea:	2026      	movs	r0, #38	; 0x26
 8004aec:	f000 fb26 	bl	800513c <HAL_NVIC_EnableIRQ>
}
 8004af0:	e0b1      	b.n	8004c56 <HAL_UART_MspInit+0x3e2>
 8004af2:	bf00      	nop
 8004af4:	40011000 	.word	0x40011000
 8004af8:	40023800 	.word	0x40023800
 8004afc:	40020000 	.word	0x40020000
 8004b00:	20001d80 	.word	0x20001d80
 8004b04:	40026440 	.word	0x40026440
 8004b08:	20001de0 	.word	0x20001de0
 8004b0c:	400264b8 	.word	0x400264b8
 8004b10:	40004400 	.word	0x40004400
 8004b14:	20001e40 	.word	0x20001e40
 8004b18:	40026088 	.word	0x40026088
 8004b1c:	20001ea0 	.word	0x20001ea0
 8004b20:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a4d      	ldr	r2, [pc, #308]	; (8004c60 <HAL_UART_MspInit+0x3ec>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	f040 8093 	bne.w	8004c56 <HAL_UART_MspInit+0x3e2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004b30:	2300      	movs	r3, #0
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	4b4b      	ldr	r3, [pc, #300]	; (8004c64 <HAL_UART_MspInit+0x3f0>)
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	4a4a      	ldr	r2, [pc, #296]	; (8004c64 <HAL_UART_MspInit+0x3f0>)
 8004b3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8004b40:	4b48      	ldr	r3, [pc, #288]	; (8004c64 <HAL_UART_MspInit+0x3f0>)
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	4b44      	ldr	r3, [pc, #272]	; (8004c64 <HAL_UART_MspInit+0x3f0>)
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	4a43      	ldr	r2, [pc, #268]	; (8004c64 <HAL_UART_MspInit+0x3f0>)
 8004b56:	f043 0302 	orr.w	r3, r3, #2
 8004b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8004b5c:	4b41      	ldr	r3, [pc, #260]	; (8004c64 <HAL_UART_MspInit+0x3f0>)
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004b68:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b6e:	2302      	movs	r3, #2
 8004b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b72:	2300      	movs	r3, #0
 8004b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b76:	2303      	movs	r3, #3
 8004b78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004b7a:	2307      	movs	r3, #7
 8004b7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b82:	4619      	mov	r1, r3
 8004b84:	4838      	ldr	r0, [pc, #224]	; (8004c68 <HAL_UART_MspInit+0x3f4>)
 8004b86:	f001 f9cf 	bl	8005f28 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004b8a:	4b38      	ldr	r3, [pc, #224]	; (8004c6c <HAL_UART_MspInit+0x3f8>)
 8004b8c:	4a38      	ldr	r2, [pc, #224]	; (8004c70 <HAL_UART_MspInit+0x3fc>)
 8004b8e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004b90:	4b36      	ldr	r3, [pc, #216]	; (8004c6c <HAL_UART_MspInit+0x3f8>)
 8004b92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b96:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b98:	4b34      	ldr	r3, [pc, #208]	; (8004c6c <HAL_UART_MspInit+0x3f8>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b9e:	4b33      	ldr	r3, [pc, #204]	; (8004c6c <HAL_UART_MspInit+0x3f8>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ba4:	4b31      	ldr	r3, [pc, #196]	; (8004c6c <HAL_UART_MspInit+0x3f8>)
 8004ba6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004baa:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bac:	4b2f      	ldr	r3, [pc, #188]	; (8004c6c <HAL_UART_MspInit+0x3f8>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bb2:	4b2e      	ldr	r3, [pc, #184]	; (8004c6c <HAL_UART_MspInit+0x3f8>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004bb8:	4b2c      	ldr	r3, [pc, #176]	; (8004c6c <HAL_UART_MspInit+0x3f8>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004bbe:	4b2b      	ldr	r3, [pc, #172]	; (8004c6c <HAL_UART_MspInit+0x3f8>)
 8004bc0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004bc4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004bc6:	4b29      	ldr	r3, [pc, #164]	; (8004c6c <HAL_UART_MspInit+0x3f8>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004bcc:	4827      	ldr	r0, [pc, #156]	; (8004c6c <HAL_UART_MspInit+0x3f8>)
 8004bce:	f000 fac3 	bl	8005158 <HAL_DMA_Init>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <HAL_UART_MspInit+0x368>
      Error_Handler();
 8004bd8:	f7fe fda8 	bl	800372c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a23      	ldr	r2, [pc, #140]	; (8004c6c <HAL_UART_MspInit+0x3f8>)
 8004be0:	639a      	str	r2, [r3, #56]	; 0x38
 8004be2:	4a22      	ldr	r2, [pc, #136]	; (8004c6c <HAL_UART_MspInit+0x3f8>)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004be8:	4b22      	ldr	r3, [pc, #136]	; (8004c74 <HAL_UART_MspInit+0x400>)
 8004bea:	4a23      	ldr	r2, [pc, #140]	; (8004c78 <HAL_UART_MspInit+0x404>)
 8004bec:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004bee:	4b21      	ldr	r3, [pc, #132]	; (8004c74 <HAL_UART_MspInit+0x400>)
 8004bf0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004bf4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bf6:	4b1f      	ldr	r3, [pc, #124]	; (8004c74 <HAL_UART_MspInit+0x400>)
 8004bf8:	2240      	movs	r2, #64	; 0x40
 8004bfa:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bfc:	4b1d      	ldr	r3, [pc, #116]	; (8004c74 <HAL_UART_MspInit+0x400>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c02:	4b1c      	ldr	r3, [pc, #112]	; (8004c74 <HAL_UART_MspInit+0x400>)
 8004c04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c08:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c0a:	4b1a      	ldr	r3, [pc, #104]	; (8004c74 <HAL_UART_MspInit+0x400>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c10:	4b18      	ldr	r3, [pc, #96]	; (8004c74 <HAL_UART_MspInit+0x400>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004c16:	4b17      	ldr	r3, [pc, #92]	; (8004c74 <HAL_UART_MspInit+0x400>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004c1c:	4b15      	ldr	r3, [pc, #84]	; (8004c74 <HAL_UART_MspInit+0x400>)
 8004c1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c22:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c24:	4b13      	ldr	r3, [pc, #76]	; (8004c74 <HAL_UART_MspInit+0x400>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004c2a:	4812      	ldr	r0, [pc, #72]	; (8004c74 <HAL_UART_MspInit+0x400>)
 8004c2c:	f000 fa94 	bl	8005158 <HAL_DMA_Init>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <HAL_UART_MspInit+0x3c6>
      Error_Handler();
 8004c36:	f7fe fd79 	bl	800372c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a0d      	ldr	r2, [pc, #52]	; (8004c74 <HAL_UART_MspInit+0x400>)
 8004c3e:	635a      	str	r2, [r3, #52]	; 0x34
 8004c40:	4a0c      	ldr	r2, [pc, #48]	; (8004c74 <HAL_UART_MspInit+0x400>)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004c46:	2200      	movs	r2, #0
 8004c48:	2105      	movs	r1, #5
 8004c4a:	2027      	movs	r0, #39	; 0x27
 8004c4c:	f000 fa5a 	bl	8005104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004c50:	2027      	movs	r0, #39	; 0x27
 8004c52:	f000 fa73 	bl	800513c <HAL_NVIC_EnableIRQ>
}
 8004c56:	bf00      	nop
 8004c58:	3738      	adds	r7, #56	; 0x38
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40004800 	.word	0x40004800
 8004c64:	40023800 	.word	0x40023800
 8004c68:	40020400 	.word	0x40020400
 8004c6c:	20001f00 	.word	0x20001f00
 8004c70:	40026028 	.word	0x40026028
 8004c74:	20001f60 	.word	0x20001f60
 8004c78:	40026058 	.word	0x40026058

08004c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c80:	480d      	ldr	r0, [pc, #52]	; (8004cb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004c82:	490e      	ldr	r1, [pc, #56]	; (8004cbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004c84:	4a0e      	ldr	r2, [pc, #56]	; (8004cc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c88:	e002      	b.n	8004c90 <LoopCopyDataInit>

08004c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c8e:	3304      	adds	r3, #4

08004c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c94:	d3f9      	bcc.n	8004c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c96:	4a0b      	ldr	r2, [pc, #44]	; (8004cc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c98:	4c0b      	ldr	r4, [pc, #44]	; (8004cc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c9c:	e001      	b.n	8004ca2 <LoopFillZerobss>

08004c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ca0:	3204      	adds	r2, #4

08004ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ca4:	d3fb      	bcc.n	8004c9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ca6:	f7ff f9f5 	bl	8004094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004caa:	f008 ff4d 	bl	800db48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cae:	f7fe fc77 	bl	80035a0 <main>
  bx  lr    
 8004cb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004cb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004cbc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8004cc0:	0800ea88 	.word	0x0800ea88
  ldr r2, =_sbss
 8004cc4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8004cc8:	2000361c 	.word	0x2000361c

08004ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ccc:	e7fe      	b.n	8004ccc <ADC_IRQHandler>
	...

08004cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004cd4:	4b0e      	ldr	r3, [pc, #56]	; (8004d10 <HAL_Init+0x40>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a0d      	ldr	r2, [pc, #52]	; (8004d10 <HAL_Init+0x40>)
 8004cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ce0:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <HAL_Init+0x40>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a0a      	ldr	r2, [pc, #40]	; (8004d10 <HAL_Init+0x40>)
 8004ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cec:	4b08      	ldr	r3, [pc, #32]	; (8004d10 <HAL_Init+0x40>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a07      	ldr	r2, [pc, #28]	; (8004d10 <HAL_Init+0x40>)
 8004cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cf8:	2003      	movs	r0, #3
 8004cfa:	f000 f9f8 	bl	80050ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cfe:	200f      	movs	r0, #15
 8004d00:	f7ff f8d2 	bl	8003ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d04:	f7ff f8a4 	bl	8003e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	40023c00 	.word	0x40023c00

08004d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d18:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <HAL_IncTick+0x20>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <HAL_IncTick+0x24>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4413      	add	r3, r2
 8004d24:	4a04      	ldr	r2, [pc, #16]	; (8004d38 <HAL_IncTick+0x24>)
 8004d26:	6013      	str	r3, [r2, #0]
}
 8004d28:	bf00      	nop
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	20000018 	.word	0x20000018
 8004d38:	20001fc0 	.word	0x20001fc0

08004d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8004d40:	4b03      	ldr	r3, [pc, #12]	; (8004d50 <HAL_GetTick+0x14>)
 8004d42:	681b      	ldr	r3, [r3, #0]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	20001fc0 	.word	0x20001fc0

08004d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d5c:	f7ff ffee 	bl	8004d3c <HAL_GetTick>
 8004d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d6c:	d005      	beq.n	8004d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d6e:	4b0a      	ldr	r3, [pc, #40]	; (8004d98 <HAL_Delay+0x44>)
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4413      	add	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d7a:	bf00      	nop
 8004d7c:	f7ff ffde 	bl	8004d3c <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d8f7      	bhi.n	8004d7c <HAL_Delay+0x28>
  {
  }
}
 8004d8c:	bf00      	nop
 8004d8e:	bf00      	nop
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20000018 	.word	0x20000018

08004d9c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e0ed      	b.n	8004f8a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d102      	bne.n	8004dc0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fc f8be 	bl	8000f3c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dd0:	f7ff ffb4 	bl	8004d3c <HAL_GetTick>
 8004dd4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004dd6:	e012      	b.n	8004dfe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004dd8:	f7ff ffb0 	bl	8004d3c <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b0a      	cmp	r3, #10
 8004de4:	d90b      	bls.n	8004dfe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2205      	movs	r2, #5
 8004df6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e0c5      	b.n	8004f8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0e5      	beq.n	8004dd8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0202 	bic.w	r2, r2, #2
 8004e1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e1c:	f7ff ff8e 	bl	8004d3c <HAL_GetTick>
 8004e20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004e22:	e012      	b.n	8004e4a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e24:	f7ff ff8a 	bl	8004d3c <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b0a      	cmp	r3, #10
 8004e30:	d90b      	bls.n	8004e4a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2205      	movs	r2, #5
 8004e42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e09f      	b.n	8004f8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e5      	bne.n	8004e24 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	7e1b      	ldrb	r3, [r3, #24]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d108      	bne.n	8004e72 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	e007      	b.n	8004e82 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	7e5b      	ldrb	r3, [r3, #25]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d108      	bne.n	8004e9c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	e007      	b.n	8004eac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	7e9b      	ldrb	r3, [r3, #26]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d108      	bne.n	8004ec6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0220 	orr.w	r2, r2, #32
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	e007      	b.n	8004ed6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0220 	bic.w	r2, r2, #32
 8004ed4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	7edb      	ldrb	r3, [r3, #27]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d108      	bne.n	8004ef0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0210 	bic.w	r2, r2, #16
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	e007      	b.n	8004f00 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0210 	orr.w	r2, r2, #16
 8004efe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	7f1b      	ldrb	r3, [r3, #28]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d108      	bne.n	8004f1a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0208 	orr.w	r2, r2, #8
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	e007      	b.n	8004f2a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0208 	bic.w	r2, r2, #8
 8004f28:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	7f5b      	ldrb	r3, [r3, #29]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d108      	bne.n	8004f44 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0204 	orr.w	r2, r2, #4
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	e007      	b.n	8004f54 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 0204 	bic.w	r2, r2, #4
 8004f52:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	431a      	orrs	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	ea42 0103 	orr.w	r1, r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	1e5a      	subs	r2, r3, #1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	; (8004fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fc6:	4a04      	ldr	r2, [pc, #16]	; (8004fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	60d3      	str	r3, [r2, #12]
}
 8004fcc:	bf00      	nop
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	e000ed00 	.word	0xe000ed00

08004fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fe0:	4b04      	ldr	r3, [pc, #16]	; (8004ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	0a1b      	lsrs	r3, r3, #8
 8004fe6:	f003 0307 	and.w	r3, r3, #7
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	e000ed00 	.word	0xe000ed00

08004ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	4603      	mov	r3, r0
 8005000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005006:	2b00      	cmp	r3, #0
 8005008:	db0b      	blt.n	8005022 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	f003 021f 	and.w	r2, r3, #31
 8005010:	4907      	ldr	r1, [pc, #28]	; (8005030 <__NVIC_EnableIRQ+0x38>)
 8005012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	2001      	movs	r0, #1
 800501a:	fa00 f202 	lsl.w	r2, r0, r2
 800501e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	e000e100 	.word	0xe000e100

08005034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	4603      	mov	r3, r0
 800503c:	6039      	str	r1, [r7, #0]
 800503e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005044:	2b00      	cmp	r3, #0
 8005046:	db0a      	blt.n	800505e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	b2da      	uxtb	r2, r3
 800504c:	490c      	ldr	r1, [pc, #48]	; (8005080 <__NVIC_SetPriority+0x4c>)
 800504e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005052:	0112      	lsls	r2, r2, #4
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	440b      	add	r3, r1
 8005058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800505c:	e00a      	b.n	8005074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	b2da      	uxtb	r2, r3
 8005062:	4908      	ldr	r1, [pc, #32]	; (8005084 <__NVIC_SetPriority+0x50>)
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	3b04      	subs	r3, #4
 800506c:	0112      	lsls	r2, r2, #4
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	440b      	add	r3, r1
 8005072:	761a      	strb	r2, [r3, #24]
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	e000e100 	.word	0xe000e100
 8005084:	e000ed00 	.word	0xe000ed00

08005088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005088:	b480      	push	{r7}
 800508a:	b089      	sub	sp, #36	; 0x24
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f1c3 0307 	rsb	r3, r3, #7
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	bf28      	it	cs
 80050a6:	2304      	movcs	r3, #4
 80050a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	3304      	adds	r3, #4
 80050ae:	2b06      	cmp	r3, #6
 80050b0:	d902      	bls.n	80050b8 <NVIC_EncodePriority+0x30>
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	3b03      	subs	r3, #3
 80050b6:	e000      	b.n	80050ba <NVIC_EncodePriority+0x32>
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	fa02 f303 	lsl.w	r3, r2, r3
 80050c6:	43da      	mvns	r2, r3
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	401a      	ands	r2, r3
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	fa01 f303 	lsl.w	r3, r1, r3
 80050da:	43d9      	mvns	r1, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050e0:	4313      	orrs	r3, r2
         );
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3724      	adds	r7, #36	; 0x24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7ff ff4c 	bl	8004f94 <__NVIC_SetPriorityGrouping>
}
 80050fc:	bf00      	nop
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
 8005110:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005112:	2300      	movs	r3, #0
 8005114:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005116:	f7ff ff61 	bl	8004fdc <__NVIC_GetPriorityGrouping>
 800511a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	6978      	ldr	r0, [r7, #20]
 8005122:	f7ff ffb1 	bl	8005088 <NVIC_EncodePriority>
 8005126:	4602      	mov	r2, r0
 8005128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800512c:	4611      	mov	r1, r2
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff ff80 	bl	8005034 <__NVIC_SetPriority>
}
 8005134:	bf00      	nop
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff ff54 	bl	8004ff8 <__NVIC_EnableIRQ>
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005164:	f7ff fdea 	bl	8004d3c <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e099      	b.n	80052a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0201 	bic.w	r2, r2, #1
 8005192:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005194:	e00f      	b.n	80051b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005196:	f7ff fdd1 	bl	8004d3c <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b05      	cmp	r3, #5
 80051a2:	d908      	bls.n	80051b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2203      	movs	r2, #3
 80051ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e078      	b.n	80052a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1e8      	bne.n	8005196 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	4b38      	ldr	r3, [pc, #224]	; (80052b0 <HAL_DMA_Init+0x158>)
 80051d0:	4013      	ands	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	2b04      	cmp	r3, #4
 800520e:	d107      	bne.n	8005220 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005218:	4313      	orrs	r3, r2
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f023 0307 	bic.w	r3, r3, #7
 8005236:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	2b04      	cmp	r3, #4
 8005248:	d117      	bne.n	800527a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00e      	beq.n	800527a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 fb0f 	bl	8005880 <DMA_CheckFifoParam>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d008      	beq.n	800527a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2240      	movs	r2, #64	; 0x40
 800526c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005276:	2301      	movs	r3, #1
 8005278:	e016      	b.n	80052a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fac6 	bl	8005814 <DMA_CalcBaseAndBitshift>
 8005288:	4603      	mov	r3, r0
 800528a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005290:	223f      	movs	r2, #63	; 0x3f
 8005292:	409a      	lsls	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	f010803f 	.word	0xf010803f

080052b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d101      	bne.n	80052da <HAL_DMA_Start_IT+0x26>
 80052d6:	2302      	movs	r3, #2
 80052d8:	e040      	b.n	800535c <HAL_DMA_Start_IT+0xa8>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d12f      	bne.n	800534e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2202      	movs	r2, #2
 80052f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 fa58 	bl	80057b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530c:	223f      	movs	r2, #63	; 0x3f
 800530e:	409a      	lsls	r2, r3
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0216 	orr.w	r2, r2, #22
 8005322:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	2b00      	cmp	r3, #0
 800532a:	d007      	beq.n	800533c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0208 	orr.w	r2, r2, #8
 800533a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0201 	orr.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	e005      	b.n	800535a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005356:	2302      	movs	r3, #2
 8005358:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800535a:	7dfb      	ldrb	r3, [r7, #23]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005370:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005372:	f7ff fce3 	bl	8004d3c <HAL_GetTick>
 8005376:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d008      	beq.n	8005396 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2280      	movs	r2, #128	; 0x80
 8005388:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e052      	b.n	800543c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0216 	bic.w	r2, r2, #22
 80053a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695a      	ldr	r2, [r3, #20]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d103      	bne.n	80053c6 <HAL_DMA_Abort+0x62>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d007      	beq.n	80053d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0208 	bic.w	r2, r2, #8
 80053d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0201 	bic.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053e6:	e013      	b.n	8005410 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053e8:	f7ff fca8 	bl	8004d3c <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b05      	cmp	r3, #5
 80053f4:	d90c      	bls.n	8005410 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2220      	movs	r2, #32
 80053fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2203      	movs	r2, #3
 8005400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e015      	b.n	800543c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e4      	bne.n	80053e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005422:	223f      	movs	r2, #63	; 0x3f
 8005424:	409a      	lsls	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d004      	beq.n	8005462 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2280      	movs	r2, #128	; 0x80
 800545c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e00c      	b.n	800547c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2205      	movs	r2, #5
 8005466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0201 	bic.w	r2, r2, #1
 8005478:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005494:	4b8e      	ldr	r3, [pc, #568]	; (80056d0 <HAL_DMA_IRQHandler+0x248>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a8e      	ldr	r2, [pc, #568]	; (80056d4 <HAL_DMA_IRQHandler+0x24c>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	0a9b      	lsrs	r3, r3, #10
 80054a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b2:	2208      	movs	r2, #8
 80054b4:	409a      	lsls	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4013      	ands	r3, r2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d01a      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d013      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0204 	bic.w	r2, r2, #4
 80054da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e0:	2208      	movs	r2, #8
 80054e2:	409a      	lsls	r2, r3
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ec:	f043 0201 	orr.w	r2, r3, #1
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f8:	2201      	movs	r2, #1
 80054fa:	409a      	lsls	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4013      	ands	r3, r2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d012      	beq.n	800552a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00b      	beq.n	800552a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005516:	2201      	movs	r2, #1
 8005518:	409a      	lsls	r2, r3
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005522:	f043 0202 	orr.w	r2, r3, #2
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800552e:	2204      	movs	r2, #4
 8005530:	409a      	lsls	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4013      	ands	r3, r2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d012      	beq.n	8005560 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00b      	beq.n	8005560 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554c:	2204      	movs	r2, #4
 800554e:	409a      	lsls	r2, r3
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005558:	f043 0204 	orr.w	r2, r3, #4
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005564:	2210      	movs	r2, #16
 8005566:	409a      	lsls	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4013      	ands	r3, r2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d043      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d03c      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005582:	2210      	movs	r2, #16
 8005584:	409a      	lsls	r2, r3
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d018      	beq.n	80055ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d108      	bne.n	80055b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d024      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	4798      	blx	r3
 80055b6:	e01f      	b.n	80055f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01b      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	4798      	blx	r3
 80055c8:	e016      	b.n	80055f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d107      	bne.n	80055e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0208 	bic.w	r2, r2, #8
 80055e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fc:	2220      	movs	r2, #32
 80055fe:	409a      	lsls	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4013      	ands	r3, r2
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 808f 	beq.w	8005728 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0310 	and.w	r3, r3, #16
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 8087 	beq.w	8005728 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800561e:	2220      	movs	r2, #32
 8005620:	409a      	lsls	r2, r3
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b05      	cmp	r3, #5
 8005630:	d136      	bne.n	80056a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0216 	bic.w	r2, r2, #22
 8005640:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	695a      	ldr	r2, [r3, #20]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005650:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d103      	bne.n	8005662 <HAL_DMA_IRQHandler+0x1da>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800565e:	2b00      	cmp	r3, #0
 8005660:	d007      	beq.n	8005672 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 0208 	bic.w	r2, r2, #8
 8005670:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005676:	223f      	movs	r2, #63	; 0x3f
 8005678:	409a      	lsls	r2, r3
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005692:	2b00      	cmp	r3, #0
 8005694:	d07e      	beq.n	8005794 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	4798      	blx	r3
        }
        return;
 800569e:	e079      	b.n	8005794 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d01d      	beq.n	80056ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10d      	bne.n	80056d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d031      	beq.n	8005728 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	4798      	blx	r3
 80056cc:	e02c      	b.n	8005728 <HAL_DMA_IRQHandler+0x2a0>
 80056ce:	bf00      	nop
 80056d0:	20000010 	.word	0x20000010
 80056d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d023      	beq.n	8005728 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	4798      	blx	r3
 80056e8:	e01e      	b.n	8005728 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10f      	bne.n	8005718 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0210 	bic.w	r2, r2, #16
 8005706:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572c:	2b00      	cmp	r3, #0
 800572e:	d032      	beq.n	8005796 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b00      	cmp	r3, #0
 800573a:	d022      	beq.n	8005782 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2205      	movs	r2, #5
 8005740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0201 	bic.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	3301      	adds	r3, #1
 8005758:	60bb      	str	r3, [r7, #8]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	429a      	cmp	r2, r3
 800575e:	d307      	bcc.n	8005770 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1f2      	bne.n	8005754 <HAL_DMA_IRQHandler+0x2cc>
 800576e:	e000      	b.n	8005772 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005770:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	4798      	blx	r3
 8005792:	e000      	b.n	8005796 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005794:	bf00      	nop
    }
  }
}
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057aa:	b2db      	uxtb	r3, r3
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b40      	cmp	r3, #64	; 0x40
 80057e4:	d108      	bne.n	80057f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80057f6:	e007      	b.n	8005808 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	60da      	str	r2, [r3, #12]
}
 8005808:	bf00      	nop
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	3b10      	subs	r3, #16
 8005824:	4a14      	ldr	r2, [pc, #80]	; (8005878 <DMA_CalcBaseAndBitshift+0x64>)
 8005826:	fba2 2303 	umull	r2, r3, r2, r3
 800582a:	091b      	lsrs	r3, r3, #4
 800582c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800582e:	4a13      	ldr	r2, [pc, #76]	; (800587c <DMA_CalcBaseAndBitshift+0x68>)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4413      	add	r3, r2
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b03      	cmp	r3, #3
 8005840:	d909      	bls.n	8005856 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800584a:	f023 0303 	bic.w	r3, r3, #3
 800584e:	1d1a      	adds	r2, r3, #4
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	659a      	str	r2, [r3, #88]	; 0x58
 8005854:	e007      	b.n	8005866 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800585e:	f023 0303 	bic.w	r3, r3, #3
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800586a:	4618      	mov	r0, r3
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	aaaaaaab 	.word	0xaaaaaaab
 800587c:	0800e9dc 	.word	0x0800e9dc

08005880 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d11f      	bne.n	80058da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b03      	cmp	r3, #3
 800589e:	d856      	bhi.n	800594e <DMA_CheckFifoParam+0xce>
 80058a0:	a201      	add	r2, pc, #4	; (adr r2, 80058a8 <DMA_CheckFifoParam+0x28>)
 80058a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a6:	bf00      	nop
 80058a8:	080058b9 	.word	0x080058b9
 80058ac:	080058cb 	.word	0x080058cb
 80058b0:	080058b9 	.word	0x080058b9
 80058b4:	0800594f 	.word	0x0800594f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d046      	beq.n	8005952 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058c8:	e043      	b.n	8005952 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058d2:	d140      	bne.n	8005956 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058d8:	e03d      	b.n	8005956 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058e2:	d121      	bne.n	8005928 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d837      	bhi.n	800595a <DMA_CheckFifoParam+0xda>
 80058ea:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <DMA_CheckFifoParam+0x70>)
 80058ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f0:	08005901 	.word	0x08005901
 80058f4:	08005907 	.word	0x08005907
 80058f8:	08005901 	.word	0x08005901
 80058fc:	08005919 	.word	0x08005919
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
      break;
 8005904:	e030      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d025      	beq.n	800595e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005916:	e022      	b.n	800595e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005920:	d11f      	bne.n	8005962 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005926:	e01c      	b.n	8005962 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b02      	cmp	r3, #2
 800592c:	d903      	bls.n	8005936 <DMA_CheckFifoParam+0xb6>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2b03      	cmp	r3, #3
 8005932:	d003      	beq.n	800593c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005934:	e018      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	73fb      	strb	r3, [r7, #15]
      break;
 800593a:	e015      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00e      	beq.n	8005966 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	73fb      	strb	r3, [r7, #15]
      break;
 800594c:	e00b      	b.n	8005966 <DMA_CheckFifoParam+0xe6>
      break;
 800594e:	bf00      	nop
 8005950:	e00a      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
      break;
 8005952:	bf00      	nop
 8005954:	e008      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
      break;
 8005956:	bf00      	nop
 8005958:	e006      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
      break;
 800595a:	bf00      	nop
 800595c:	e004      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
      break;
 800595e:	bf00      	nop
 8005960:	e002      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
      break;   
 8005962:	bf00      	nop
 8005964:	e000      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
      break;
 8005966:	bf00      	nop
    }
  } 
  
  return status; 
 8005968:	7bfb      	ldrb	r3, [r7, #15]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop

08005978 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800598a:	4b23      	ldr	r3, [pc, #140]	; (8005a18 <HAL_FLASH_Program+0xa0>)
 800598c:	7e1b      	ldrb	r3, [r3, #24]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d101      	bne.n	8005996 <HAL_FLASH_Program+0x1e>
 8005992:	2302      	movs	r3, #2
 8005994:	e03b      	b.n	8005a0e <HAL_FLASH_Program+0x96>
 8005996:	4b20      	ldr	r3, [pc, #128]	; (8005a18 <HAL_FLASH_Program+0xa0>)
 8005998:	2201      	movs	r2, #1
 800599a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800599c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80059a0:	f000 f870 	bl	8005a84 <FLASH_WaitForLastOperation>
 80059a4:	4603      	mov	r3, r0
 80059a6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80059a8:	7dfb      	ldrb	r3, [r7, #23]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d12b      	bne.n	8005a06 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d105      	bne.n	80059c0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80059b4:	783b      	ldrb	r3, [r7, #0]
 80059b6:	4619      	mov	r1, r3
 80059b8:	68b8      	ldr	r0, [r7, #8]
 80059ba:	f000 f91b 	bl	8005bf4 <FLASH_Program_Byte>
 80059be:	e016      	b.n	80059ee <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d105      	bne.n	80059d2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80059c6:	883b      	ldrh	r3, [r7, #0]
 80059c8:	4619      	mov	r1, r3
 80059ca:	68b8      	ldr	r0, [r7, #8]
 80059cc:	f000 f8ee 	bl	8005bac <FLASH_Program_HalfWord>
 80059d0:	e00d      	b.n	80059ee <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d105      	bne.n	80059e4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	4619      	mov	r1, r3
 80059dc:	68b8      	ldr	r0, [r7, #8]
 80059de:	f000 f8c3 	bl	8005b68 <FLASH_Program_Word>
 80059e2:	e004      	b.n	80059ee <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80059e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059e8:	68b8      	ldr	r0, [r7, #8]
 80059ea:	f000 f88b 	bl	8005b04 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80059f2:	f000 f847 	bl	8005a84 <FLASH_WaitForLastOperation>
 80059f6:	4603      	mov	r3, r0
 80059f8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80059fa:	4b08      	ldr	r3, [pc, #32]	; (8005a1c <HAL_FLASH_Program+0xa4>)
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	4a07      	ldr	r2, [pc, #28]	; (8005a1c <HAL_FLASH_Program+0xa4>)
 8005a00:	f023 0301 	bic.w	r3, r3, #1
 8005a04:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a06:	4b04      	ldr	r3, [pc, #16]	; (8005a18 <HAL_FLASH_Program+0xa0>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3718      	adds	r7, #24
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20001fc4 	.word	0x20001fc4
 8005a1c:	40023c00 	.word	0x40023c00

08005a20 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005a2a:	4b0b      	ldr	r3, [pc, #44]	; (8005a58 <HAL_FLASH_Unlock+0x38>)
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	da0b      	bge.n	8005a4a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005a32:	4b09      	ldr	r3, [pc, #36]	; (8005a58 <HAL_FLASH_Unlock+0x38>)
 8005a34:	4a09      	ldr	r2, [pc, #36]	; (8005a5c <HAL_FLASH_Unlock+0x3c>)
 8005a36:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005a38:	4b07      	ldr	r3, [pc, #28]	; (8005a58 <HAL_FLASH_Unlock+0x38>)
 8005a3a:	4a09      	ldr	r2, [pc, #36]	; (8005a60 <HAL_FLASH_Unlock+0x40>)
 8005a3c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005a3e:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <HAL_FLASH_Unlock+0x38>)
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	da01      	bge.n	8005a4a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005a4a:	79fb      	ldrb	r3, [r7, #7]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	40023c00 	.word	0x40023c00
 8005a5c:	45670123 	.word	0x45670123
 8005a60:	cdef89ab 	.word	0xcdef89ab

08005a64 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005a68:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <HAL_FLASH_Lock+0x1c>)
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	4a04      	ldr	r2, [pc, #16]	; (8005a80 <HAL_FLASH_Lock+0x1c>)
 8005a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a72:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	40023c00 	.word	0x40023c00

08005a84 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005a90:	4b1a      	ldr	r3, [pc, #104]	; (8005afc <FLASH_WaitForLastOperation+0x78>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005a96:	f7ff f951 	bl	8004d3c <HAL_GetTick>
 8005a9a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005a9c:	e010      	b.n	8005ac0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aa4:	d00c      	beq.n	8005ac0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d007      	beq.n	8005abc <FLASH_WaitForLastOperation+0x38>
 8005aac:	f7ff f946 	bl	8004d3c <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d201      	bcs.n	8005ac0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e019      	b.n	8005af4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005ac0:	4b0f      	ldr	r3, [pc, #60]	; (8005b00 <FLASH_WaitForLastOperation+0x7c>)
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e8      	bne.n	8005a9e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005acc:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <FLASH_WaitForLastOperation+0x7c>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005ad8:	4b09      	ldr	r3, [pc, #36]	; (8005b00 <FLASH_WaitForLastOperation+0x7c>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005ade:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <FLASH_WaitForLastOperation+0x7c>)
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005aea:	f000 f8a5 	bl	8005c38 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e000      	b.n	8005af4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
  
}  
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	20001fc4 	.word	0x20001fc4
 8005b00:	40023c00 	.word	0x40023c00

08005b04 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b10:	4b14      	ldr	r3, [pc, #80]	; (8005b64 <FLASH_Program_DoubleWord+0x60>)
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	4a13      	ldr	r2, [pc, #76]	; (8005b64 <FLASH_Program_DoubleWord+0x60>)
 8005b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005b1c:	4b11      	ldr	r3, [pc, #68]	; (8005b64 <FLASH_Program_DoubleWord+0x60>)
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	4a10      	ldr	r2, [pc, #64]	; (8005b64 <FLASH_Program_DoubleWord+0x60>)
 8005b22:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005b26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005b28:	4b0e      	ldr	r3, [pc, #56]	; (8005b64 <FLASH_Program_DoubleWord+0x60>)
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	4a0d      	ldr	r2, [pc, #52]	; (8005b64 <FLASH_Program_DoubleWord+0x60>)
 8005b2e:	f043 0301 	orr.w	r3, r3, #1
 8005b32:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005b3a:	f3bf 8f6f 	isb	sy
}
 8005b3e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005b40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b44:	f04f 0200 	mov.w	r2, #0
 8005b48:	f04f 0300 	mov.w	r3, #0
 8005b4c:	000a      	movs	r2, r1
 8005b4e:	2300      	movs	r3, #0
 8005b50:	68f9      	ldr	r1, [r7, #12]
 8005b52:	3104      	adds	r1, #4
 8005b54:	4613      	mov	r3, r2
 8005b56:	600b      	str	r3, [r1, #0]
}
 8005b58:	bf00      	nop
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	40023c00 	.word	0x40023c00

08005b68 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b72:	4b0d      	ldr	r3, [pc, #52]	; (8005ba8 <FLASH_Program_Word+0x40>)
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	4a0c      	ldr	r2, [pc, #48]	; (8005ba8 <FLASH_Program_Word+0x40>)
 8005b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b7c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005b7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ba8 <FLASH_Program_Word+0x40>)
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	4a09      	ldr	r2, [pc, #36]	; (8005ba8 <FLASH_Program_Word+0x40>)
 8005b84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b88:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005b8a:	4b07      	ldr	r3, [pc, #28]	; (8005ba8 <FLASH_Program_Word+0x40>)
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	4a06      	ldr	r2, [pc, #24]	; (8005ba8 <FLASH_Program_Word+0x40>)
 8005b90:	f043 0301 	orr.w	r3, r3, #1
 8005b94:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	601a      	str	r2, [r3, #0]
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	40023c00 	.word	0x40023c00

08005bac <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005bb8:	4b0d      	ldr	r3, [pc, #52]	; (8005bf0 <FLASH_Program_HalfWord+0x44>)
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	4a0c      	ldr	r2, [pc, #48]	; (8005bf0 <FLASH_Program_HalfWord+0x44>)
 8005bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005bc4:	4b0a      	ldr	r3, [pc, #40]	; (8005bf0 <FLASH_Program_HalfWord+0x44>)
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	4a09      	ldr	r2, [pc, #36]	; (8005bf0 <FLASH_Program_HalfWord+0x44>)
 8005bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005bd0:	4b07      	ldr	r3, [pc, #28]	; (8005bf0 <FLASH_Program_HalfWord+0x44>)
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	4a06      	ldr	r2, [pc, #24]	; (8005bf0 <FLASH_Program_HalfWord+0x44>)
 8005bd6:	f043 0301 	orr.w	r3, r3, #1
 8005bda:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	887a      	ldrh	r2, [r7, #2]
 8005be0:	801a      	strh	r2, [r3, #0]
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40023c00 	.word	0x40023c00

08005bf4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005c00:	4b0c      	ldr	r3, [pc, #48]	; (8005c34 <FLASH_Program_Byte+0x40>)
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	4a0b      	ldr	r2, [pc, #44]	; (8005c34 <FLASH_Program_Byte+0x40>)
 8005c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005c0c:	4b09      	ldr	r3, [pc, #36]	; (8005c34 <FLASH_Program_Byte+0x40>)
 8005c0e:	4a09      	ldr	r2, [pc, #36]	; (8005c34 <FLASH_Program_Byte+0x40>)
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005c14:	4b07      	ldr	r3, [pc, #28]	; (8005c34 <FLASH_Program_Byte+0x40>)
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	4a06      	ldr	r2, [pc, #24]	; (8005c34 <FLASH_Program_Byte+0x40>)
 8005c1a:	f043 0301 	orr.w	r3, r3, #1
 8005c1e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	78fa      	ldrb	r2, [r7, #3]
 8005c24:	701a      	strb	r2, [r3, #0]
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	40023c00 	.word	0x40023c00

08005c38 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005c3c:	4b27      	ldr	r3, [pc, #156]	; (8005cdc <FLASH_SetErrorCode+0xa4>)
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f003 0310 	and.w	r3, r3, #16
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d008      	beq.n	8005c5a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005c48:	4b25      	ldr	r3, [pc, #148]	; (8005ce0 <FLASH_SetErrorCode+0xa8>)
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	f043 0310 	orr.w	r3, r3, #16
 8005c50:	4a23      	ldr	r2, [pc, #140]	; (8005ce0 <FLASH_SetErrorCode+0xa8>)
 8005c52:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005c54:	4b21      	ldr	r3, [pc, #132]	; (8005cdc <FLASH_SetErrorCode+0xa4>)
 8005c56:	2210      	movs	r2, #16
 8005c58:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005c5a:	4b20      	ldr	r3, [pc, #128]	; (8005cdc <FLASH_SetErrorCode+0xa4>)
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d008      	beq.n	8005c78 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005c66:	4b1e      	ldr	r3, [pc, #120]	; (8005ce0 <FLASH_SetErrorCode+0xa8>)
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	f043 0308 	orr.w	r3, r3, #8
 8005c6e:	4a1c      	ldr	r2, [pc, #112]	; (8005ce0 <FLASH_SetErrorCode+0xa8>)
 8005c70:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005c72:	4b1a      	ldr	r3, [pc, #104]	; (8005cdc <FLASH_SetErrorCode+0xa4>)
 8005c74:	2220      	movs	r2, #32
 8005c76:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005c78:	4b18      	ldr	r3, [pc, #96]	; (8005cdc <FLASH_SetErrorCode+0xa4>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d008      	beq.n	8005c96 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005c84:	4b16      	ldr	r3, [pc, #88]	; (8005ce0 <FLASH_SetErrorCode+0xa8>)
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	f043 0304 	orr.w	r3, r3, #4
 8005c8c:	4a14      	ldr	r2, [pc, #80]	; (8005ce0 <FLASH_SetErrorCode+0xa8>)
 8005c8e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005c90:	4b12      	ldr	r3, [pc, #72]	; (8005cdc <FLASH_SetErrorCode+0xa4>)
 8005c92:	2240      	movs	r2, #64	; 0x40
 8005c94:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005c96:	4b11      	ldr	r3, [pc, #68]	; (8005cdc <FLASH_SetErrorCode+0xa4>)
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d008      	beq.n	8005cb4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005ca2:	4b0f      	ldr	r3, [pc, #60]	; (8005ce0 <FLASH_SetErrorCode+0xa8>)
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	f043 0302 	orr.w	r3, r3, #2
 8005caa:	4a0d      	ldr	r2, [pc, #52]	; (8005ce0 <FLASH_SetErrorCode+0xa8>)
 8005cac:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005cae:	4b0b      	ldr	r3, [pc, #44]	; (8005cdc <FLASH_SetErrorCode+0xa4>)
 8005cb0:	2280      	movs	r2, #128	; 0x80
 8005cb2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005cb4:	4b09      	ldr	r3, [pc, #36]	; (8005cdc <FLASH_SetErrorCode+0xa4>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d008      	beq.n	8005cd2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005cc0:	4b07      	ldr	r3, [pc, #28]	; (8005ce0 <FLASH_SetErrorCode+0xa8>)
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	f043 0320 	orr.w	r3, r3, #32
 8005cc8:	4a05      	ldr	r2, [pc, #20]	; (8005ce0 <FLASH_SetErrorCode+0xa8>)
 8005cca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005ccc:	4b03      	ldr	r3, [pc, #12]	; (8005cdc <FLASH_SetErrorCode+0xa4>)
 8005cce:	2202      	movs	r2, #2
 8005cd0:	60da      	str	r2, [r3, #12]
  }
}
 8005cd2:	bf00      	nop
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	40023c00 	.word	0x40023c00
 8005ce0:	20001fc4 	.word	0x20001fc4

08005ce4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005cf6:	4b31      	ldr	r3, [pc, #196]	; (8005dbc <HAL_FLASHEx_Erase+0xd8>)
 8005cf8:	7e1b      	ldrb	r3, [r3, #24]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_FLASHEx_Erase+0x1e>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e058      	b.n	8005db4 <HAL_FLASHEx_Erase+0xd0>
 8005d02:	4b2e      	ldr	r3, [pc, #184]	; (8005dbc <HAL_FLASHEx_Erase+0xd8>)
 8005d04:	2201      	movs	r2, #1
 8005d06:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005d08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005d0c:	f7ff feba 	bl	8005a84 <FLASH_WaitForLastOperation>
 8005d10:	4603      	mov	r3, r0
 8005d12:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d148      	bne.n	8005dac <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d20:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d115      	bne.n	8005d56 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	4619      	mov	r1, r3
 8005d36:	4610      	mov	r0, r2
 8005d38:	f000 f844 	bl	8005dc4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005d3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005d40:	f7ff fea0 	bl	8005a84 <FLASH_WaitForLastOperation>
 8005d44:	4603      	mov	r3, r0
 8005d46:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005d48:	4b1d      	ldr	r3, [pc, #116]	; (8005dc0 <HAL_FLASHEx_Erase+0xdc>)
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	4a1c      	ldr	r2, [pc, #112]	; (8005dc0 <HAL_FLASHEx_Erase+0xdc>)
 8005d4e:	f023 0304 	bic.w	r3, r3, #4
 8005d52:	6113      	str	r3, [r2, #16]
 8005d54:	e028      	b.n	8005da8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	60bb      	str	r3, [r7, #8]
 8005d5c:	e01c      	b.n	8005d98 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	4619      	mov	r1, r3
 8005d66:	68b8      	ldr	r0, [r7, #8]
 8005d68:	f000 f850 	bl	8005e0c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005d6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005d70:	f7ff fe88 	bl	8005a84 <FLASH_WaitForLastOperation>
 8005d74:	4603      	mov	r3, r0
 8005d76:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005d78:	4b11      	ldr	r3, [pc, #68]	; (8005dc0 <HAL_FLASHEx_Erase+0xdc>)
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	4a10      	ldr	r2, [pc, #64]	; (8005dc0 <HAL_FLASHEx_Erase+0xdc>)
 8005d7e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005d82:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	601a      	str	r2, [r3, #0]
          break;
 8005d90:	e00a      	b.n	8005da8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	3301      	adds	r3, #1
 8005d96:	60bb      	str	r3, [r7, #8]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	4413      	add	r3, r2
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d3da      	bcc.n	8005d5e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005da8:	f000 f878 	bl	8005e9c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005dac:	4b03      	ldr	r3, [pc, #12]	; (8005dbc <HAL_FLASHEx_Erase+0xd8>)
 8005dae:	2200      	movs	r2, #0
 8005db0:	761a      	strb	r2, [r3, #24]

  return status;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20001fc4 	.word	0x20001fc4
 8005dc0:	40023c00 	.word	0x40023c00

08005dc4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	4603      	mov	r3, r0
 8005dcc:	6039      	str	r1, [r7, #0]
 8005dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005dd0:	4b0d      	ldr	r3, [pc, #52]	; (8005e08 <FLASH_MassErase+0x44>)
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	4a0c      	ldr	r2, [pc, #48]	; (8005e08 <FLASH_MassErase+0x44>)
 8005dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <FLASH_MassErase+0x44>)
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	4a09      	ldr	r2, [pc, #36]	; (8005e08 <FLASH_MassErase+0x44>)
 8005de2:	f043 0304 	orr.w	r3, r3, #4
 8005de6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005de8:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <FLASH_MassErase+0x44>)
 8005dea:	691a      	ldr	r2, [r3, #16]
 8005dec:	79fb      	ldrb	r3, [r7, #7]
 8005dee:	021b      	lsls	r3, r3, #8
 8005df0:	4313      	orrs	r3, r2
 8005df2:	4a05      	ldr	r2, [pc, #20]	; (8005e08 <FLASH_MassErase+0x44>)
 8005df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005df8:	6113      	str	r3, [r2, #16]
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40023c00 	.word	0x40023c00

08005e0c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d102      	bne.n	8005e28 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005e22:	2300      	movs	r3, #0
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	e010      	b.n	8005e4a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d103      	bne.n	8005e36 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	e009      	b.n	8005e4a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005e36:	78fb      	ldrb	r3, [r7, #3]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d103      	bne.n	8005e44 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e40:	60fb      	str	r3, [r7, #12]
 8005e42:	e002      	b.n	8005e4a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005e44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005e48:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005e4a:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <FLASH_Erase_Sector+0x8c>)
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	4a12      	ldr	r2, [pc, #72]	; (8005e98 <FLASH_Erase_Sector+0x8c>)
 8005e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e54:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005e56:	4b10      	ldr	r3, [pc, #64]	; (8005e98 <FLASH_Erase_Sector+0x8c>)
 8005e58:	691a      	ldr	r2, [r3, #16]
 8005e5a:	490f      	ldr	r1, [pc, #60]	; (8005e98 <FLASH_Erase_Sector+0x8c>)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005e62:	4b0d      	ldr	r3, [pc, #52]	; (8005e98 <FLASH_Erase_Sector+0x8c>)
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	4a0c      	ldr	r2, [pc, #48]	; (8005e98 <FLASH_Erase_Sector+0x8c>)
 8005e68:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005e6c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005e6e:	4b0a      	ldr	r3, [pc, #40]	; (8005e98 <FLASH_Erase_Sector+0x8c>)
 8005e70:	691a      	ldr	r2, [r3, #16]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	00db      	lsls	r3, r3, #3
 8005e76:	4313      	orrs	r3, r2
 8005e78:	4a07      	ldr	r2, [pc, #28]	; (8005e98 <FLASH_Erase_Sector+0x8c>)
 8005e7a:	f043 0302 	orr.w	r3, r3, #2
 8005e7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005e80:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <FLASH_Erase_Sector+0x8c>)
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	4a04      	ldr	r2, [pc, #16]	; (8005e98 <FLASH_Erase_Sector+0x8c>)
 8005e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e8a:	6113      	str	r3, [r2, #16]
}
 8005e8c:	bf00      	nop
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	40023c00 	.word	0x40023c00

08005e9c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005ea0:	4b20      	ldr	r3, [pc, #128]	; (8005f24 <FLASH_FlushCaches+0x88>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d017      	beq.n	8005edc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005eac:	4b1d      	ldr	r3, [pc, #116]	; (8005f24 <FLASH_FlushCaches+0x88>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a1c      	ldr	r2, [pc, #112]	; (8005f24 <FLASH_FlushCaches+0x88>)
 8005eb2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005eb6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005eb8:	4b1a      	ldr	r3, [pc, #104]	; (8005f24 <FLASH_FlushCaches+0x88>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a19      	ldr	r2, [pc, #100]	; (8005f24 <FLASH_FlushCaches+0x88>)
 8005ebe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	4b17      	ldr	r3, [pc, #92]	; (8005f24 <FLASH_FlushCaches+0x88>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a16      	ldr	r2, [pc, #88]	; (8005f24 <FLASH_FlushCaches+0x88>)
 8005eca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ece:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ed0:	4b14      	ldr	r3, [pc, #80]	; (8005f24 <FLASH_FlushCaches+0x88>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a13      	ldr	r2, [pc, #76]	; (8005f24 <FLASH_FlushCaches+0x88>)
 8005ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005eda:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005edc:	4b11      	ldr	r3, [pc, #68]	; (8005f24 <FLASH_FlushCaches+0x88>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d017      	beq.n	8005f18 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005ee8:	4b0e      	ldr	r3, [pc, #56]	; (8005f24 <FLASH_FlushCaches+0x88>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a0d      	ldr	r2, [pc, #52]	; (8005f24 <FLASH_FlushCaches+0x88>)
 8005eee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ef2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005ef4:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <FLASH_FlushCaches+0x88>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a0a      	ldr	r2, [pc, #40]	; (8005f24 <FLASH_FlushCaches+0x88>)
 8005efa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	4b08      	ldr	r3, [pc, #32]	; (8005f24 <FLASH_FlushCaches+0x88>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a07      	ldr	r2, [pc, #28]	; (8005f24 <FLASH_FlushCaches+0x88>)
 8005f06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f0a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005f0c:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <FLASH_FlushCaches+0x88>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a04      	ldr	r2, [pc, #16]	; (8005f24 <FLASH_FlushCaches+0x88>)
 8005f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f16:	6013      	str	r3, [r2, #0]
  }
}
 8005f18:	bf00      	nop
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	40023c00 	.word	0x40023c00

08005f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b089      	sub	sp, #36	; 0x24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61fb      	str	r3, [r7, #28]
 8005f42:	e16b      	b.n	800621c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f44:	2201      	movs	r2, #1
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	4013      	ands	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	f040 815a 	bne.w	8006216 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d005      	beq.n	8005f7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d130      	bne.n	8005fdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	2203      	movs	r2, #3
 8005f86:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8a:	43db      	mvns	r3, r3
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb8:	43db      	mvns	r3, r3
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	091b      	lsrs	r3, r3, #4
 8005fc6:	f003 0201 	and.w	r2, r3, #1
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f003 0303 	and.w	r3, r3, #3
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	d017      	beq.n	8006018 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	2203      	movs	r2, #3
 8005ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	fa02 f303 	lsl.w	r3, r2, r3
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	4313      	orrs	r3, r2
 8006010:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f003 0303 	and.w	r3, r3, #3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d123      	bne.n	800606c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	08da      	lsrs	r2, r3, #3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3208      	adds	r2, #8
 800602c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	220f      	movs	r2, #15
 800603c:	fa02 f303 	lsl.w	r3, r2, r3
 8006040:	43db      	mvns	r3, r3
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	4013      	ands	r3, r2
 8006046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	fa02 f303 	lsl.w	r3, r2, r3
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	4313      	orrs	r3, r2
 800605c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	08da      	lsrs	r2, r3, #3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3208      	adds	r2, #8
 8006066:	69b9      	ldr	r1, [r7, #24]
 8006068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	2203      	movs	r2, #3
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	43db      	mvns	r3, r3
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	4013      	ands	r3, r2
 8006082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f003 0203 	and.w	r2, r3, #3
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	fa02 f303 	lsl.w	r3, r2, r3
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	4313      	orrs	r3, r2
 8006098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 80b4 	beq.w	8006216 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	4b60      	ldr	r3, [pc, #384]	; (8006234 <HAL_GPIO_Init+0x30c>)
 80060b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b6:	4a5f      	ldr	r2, [pc, #380]	; (8006234 <HAL_GPIO_Init+0x30c>)
 80060b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060bc:	6453      	str	r3, [r2, #68]	; 0x44
 80060be:	4b5d      	ldr	r3, [pc, #372]	; (8006234 <HAL_GPIO_Init+0x30c>)
 80060c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060ca:	4a5b      	ldr	r2, [pc, #364]	; (8006238 <HAL_GPIO_Init+0x310>)
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	089b      	lsrs	r3, r3, #2
 80060d0:	3302      	adds	r3, #2
 80060d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	220f      	movs	r2, #15
 80060e2:	fa02 f303 	lsl.w	r3, r2, r3
 80060e6:	43db      	mvns	r3, r3
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	4013      	ands	r3, r2
 80060ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a52      	ldr	r2, [pc, #328]	; (800623c <HAL_GPIO_Init+0x314>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d02b      	beq.n	800614e <HAL_GPIO_Init+0x226>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a51      	ldr	r2, [pc, #324]	; (8006240 <HAL_GPIO_Init+0x318>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d025      	beq.n	800614a <HAL_GPIO_Init+0x222>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a50      	ldr	r2, [pc, #320]	; (8006244 <HAL_GPIO_Init+0x31c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d01f      	beq.n	8006146 <HAL_GPIO_Init+0x21e>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a4f      	ldr	r2, [pc, #316]	; (8006248 <HAL_GPIO_Init+0x320>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d019      	beq.n	8006142 <HAL_GPIO_Init+0x21a>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a4e      	ldr	r2, [pc, #312]	; (800624c <HAL_GPIO_Init+0x324>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d013      	beq.n	800613e <HAL_GPIO_Init+0x216>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a4d      	ldr	r2, [pc, #308]	; (8006250 <HAL_GPIO_Init+0x328>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00d      	beq.n	800613a <HAL_GPIO_Init+0x212>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a4c      	ldr	r2, [pc, #304]	; (8006254 <HAL_GPIO_Init+0x32c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d007      	beq.n	8006136 <HAL_GPIO_Init+0x20e>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a4b      	ldr	r2, [pc, #300]	; (8006258 <HAL_GPIO_Init+0x330>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d101      	bne.n	8006132 <HAL_GPIO_Init+0x20a>
 800612e:	2307      	movs	r3, #7
 8006130:	e00e      	b.n	8006150 <HAL_GPIO_Init+0x228>
 8006132:	2308      	movs	r3, #8
 8006134:	e00c      	b.n	8006150 <HAL_GPIO_Init+0x228>
 8006136:	2306      	movs	r3, #6
 8006138:	e00a      	b.n	8006150 <HAL_GPIO_Init+0x228>
 800613a:	2305      	movs	r3, #5
 800613c:	e008      	b.n	8006150 <HAL_GPIO_Init+0x228>
 800613e:	2304      	movs	r3, #4
 8006140:	e006      	b.n	8006150 <HAL_GPIO_Init+0x228>
 8006142:	2303      	movs	r3, #3
 8006144:	e004      	b.n	8006150 <HAL_GPIO_Init+0x228>
 8006146:	2302      	movs	r3, #2
 8006148:	e002      	b.n	8006150 <HAL_GPIO_Init+0x228>
 800614a:	2301      	movs	r3, #1
 800614c:	e000      	b.n	8006150 <HAL_GPIO_Init+0x228>
 800614e:	2300      	movs	r3, #0
 8006150:	69fa      	ldr	r2, [r7, #28]
 8006152:	f002 0203 	and.w	r2, r2, #3
 8006156:	0092      	lsls	r2, r2, #2
 8006158:	4093      	lsls	r3, r2
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	4313      	orrs	r3, r2
 800615e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006160:	4935      	ldr	r1, [pc, #212]	; (8006238 <HAL_GPIO_Init+0x310>)
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	089b      	lsrs	r3, r3, #2
 8006166:	3302      	adds	r3, #2
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800616e:	4b3b      	ldr	r3, [pc, #236]	; (800625c <HAL_GPIO_Init+0x334>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	43db      	mvns	r3, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	4013      	ands	r3, r2
 800617c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006192:	4a32      	ldr	r2, [pc, #200]	; (800625c <HAL_GPIO_Init+0x334>)
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006198:	4b30      	ldr	r3, [pc, #192]	; (800625c <HAL_GPIO_Init+0x334>)
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	43db      	mvns	r3, r3
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	4013      	ands	r3, r2
 80061a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061bc:	4a27      	ldr	r2, [pc, #156]	; (800625c <HAL_GPIO_Init+0x334>)
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80061c2:	4b26      	ldr	r3, [pc, #152]	; (800625c <HAL_GPIO_Init+0x334>)
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	43db      	mvns	r3, r3
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	4013      	ands	r3, r2
 80061d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061e6:	4a1d      	ldr	r2, [pc, #116]	; (800625c <HAL_GPIO_Init+0x334>)
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061ec:	4b1b      	ldr	r3, [pc, #108]	; (800625c <HAL_GPIO_Init+0x334>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	43db      	mvns	r3, r3
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	4013      	ands	r3, r2
 80061fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	4313      	orrs	r3, r2
 800620e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006210:	4a12      	ldr	r2, [pc, #72]	; (800625c <HAL_GPIO_Init+0x334>)
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	3301      	adds	r3, #1
 800621a:	61fb      	str	r3, [r7, #28]
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	2b0f      	cmp	r3, #15
 8006220:	f67f ae90 	bls.w	8005f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop
 8006228:	3724      	adds	r7, #36	; 0x24
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	40023800 	.word	0x40023800
 8006238:	40013800 	.word	0x40013800
 800623c:	40020000 	.word	0x40020000
 8006240:	40020400 	.word	0x40020400
 8006244:	40020800 	.word	0x40020800
 8006248:	40020c00 	.word	0x40020c00
 800624c:	40021000 	.word	0x40021000
 8006250:	40021400 	.word	0x40021400
 8006254:	40021800 	.word	0x40021800
 8006258:	40021c00 	.word	0x40021c00
 800625c:	40013c00 	.word	0x40013c00

08006260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	807b      	strh	r3, [r7, #2]
 800626c:	4613      	mov	r3, r2
 800626e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006270:	787b      	ldrb	r3, [r7, #1]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006276:	887a      	ldrh	r2, [r7, #2]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800627c:	e003      	b.n	8006286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800627e:	887b      	ldrh	r3, [r7, #2]
 8006280:	041a      	lsls	r2, r3, #16
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	619a      	str	r2, [r3, #24]
}
 8006286:	bf00      	nop
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006292:	b480      	push	{r7}
 8006294:	b085      	sub	sp, #20
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	460b      	mov	r3, r1
 800629c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80062a4:	887a      	ldrh	r2, [r7, #2]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	4013      	ands	r3, r2
 80062aa:	041a      	lsls	r2, r3, #16
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	43d9      	mvns	r1, r3
 80062b0:	887b      	ldrh	r3, [r7, #2]
 80062b2:	400b      	ands	r3, r1
 80062b4:	431a      	orrs	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	619a      	str	r2, [r3, #24]
}
 80062ba:	bf00      	nop
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
	...

080062c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e12b      	b.n	8006532 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d106      	bne.n	80062f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fd f906 	bl	8003500 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2224      	movs	r2, #36	; 0x24
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0201 	bic.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800631a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800632a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800632c:	f002 f9a0 	bl	8008670 <HAL_RCC_GetPCLK1Freq>
 8006330:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	4a81      	ldr	r2, [pc, #516]	; (800653c <HAL_I2C_Init+0x274>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d807      	bhi.n	800634c <HAL_I2C_Init+0x84>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4a80      	ldr	r2, [pc, #512]	; (8006540 <HAL_I2C_Init+0x278>)
 8006340:	4293      	cmp	r3, r2
 8006342:	bf94      	ite	ls
 8006344:	2301      	movls	r3, #1
 8006346:	2300      	movhi	r3, #0
 8006348:	b2db      	uxtb	r3, r3
 800634a:	e006      	b.n	800635a <HAL_I2C_Init+0x92>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4a7d      	ldr	r2, [pc, #500]	; (8006544 <HAL_I2C_Init+0x27c>)
 8006350:	4293      	cmp	r3, r2
 8006352:	bf94      	ite	ls
 8006354:	2301      	movls	r3, #1
 8006356:	2300      	movhi	r3, #0
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e0e7      	b.n	8006532 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4a78      	ldr	r2, [pc, #480]	; (8006548 <HAL_I2C_Init+0x280>)
 8006366:	fba2 2303 	umull	r2, r3, r2, r3
 800636a:	0c9b      	lsrs	r3, r3, #18
 800636c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	4a6a      	ldr	r2, [pc, #424]	; (800653c <HAL_I2C_Init+0x274>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d802      	bhi.n	800639c <HAL_I2C_Init+0xd4>
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	3301      	adds	r3, #1
 800639a:	e009      	b.n	80063b0 <HAL_I2C_Init+0xe8>
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80063a2:	fb02 f303 	mul.w	r3, r2, r3
 80063a6:	4a69      	ldr	r2, [pc, #420]	; (800654c <HAL_I2C_Init+0x284>)
 80063a8:	fba2 2303 	umull	r2, r3, r2, r3
 80063ac:	099b      	lsrs	r3, r3, #6
 80063ae:	3301      	adds	r3, #1
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	6812      	ldr	r2, [r2, #0]
 80063b4:	430b      	orrs	r3, r1
 80063b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80063c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	495c      	ldr	r1, [pc, #368]	; (800653c <HAL_I2C_Init+0x274>)
 80063cc:	428b      	cmp	r3, r1
 80063ce:	d819      	bhi.n	8006404 <HAL_I2C_Init+0x13c>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	1e59      	subs	r1, r3, #1
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	fbb1 f3f3 	udiv	r3, r1, r3
 80063de:	1c59      	adds	r1, r3, #1
 80063e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80063e4:	400b      	ands	r3, r1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <HAL_I2C_Init+0x138>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	1e59      	subs	r1, r3, #1
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80063f8:	3301      	adds	r3, #1
 80063fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063fe:	e051      	b.n	80064a4 <HAL_I2C_Init+0x1dc>
 8006400:	2304      	movs	r3, #4
 8006402:	e04f      	b.n	80064a4 <HAL_I2C_Init+0x1dc>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d111      	bne.n	8006430 <HAL_I2C_Init+0x168>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	1e58      	subs	r0, r3, #1
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6859      	ldr	r1, [r3, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	440b      	add	r3, r1
 800641a:	fbb0 f3f3 	udiv	r3, r0, r3
 800641e:	3301      	adds	r3, #1
 8006420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006424:	2b00      	cmp	r3, #0
 8006426:	bf0c      	ite	eq
 8006428:	2301      	moveq	r3, #1
 800642a:	2300      	movne	r3, #0
 800642c:	b2db      	uxtb	r3, r3
 800642e:	e012      	b.n	8006456 <HAL_I2C_Init+0x18e>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	1e58      	subs	r0, r3, #1
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6859      	ldr	r1, [r3, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	440b      	add	r3, r1
 800643e:	0099      	lsls	r1, r3, #2
 8006440:	440b      	add	r3, r1
 8006442:	fbb0 f3f3 	udiv	r3, r0, r3
 8006446:	3301      	adds	r3, #1
 8006448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800644c:	2b00      	cmp	r3, #0
 800644e:	bf0c      	ite	eq
 8006450:	2301      	moveq	r3, #1
 8006452:	2300      	movne	r3, #0
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <HAL_I2C_Init+0x196>
 800645a:	2301      	movs	r3, #1
 800645c:	e022      	b.n	80064a4 <HAL_I2C_Init+0x1dc>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10e      	bne.n	8006484 <HAL_I2C_Init+0x1bc>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	1e58      	subs	r0, r3, #1
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6859      	ldr	r1, [r3, #4]
 800646e:	460b      	mov	r3, r1
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	440b      	add	r3, r1
 8006474:	fbb0 f3f3 	udiv	r3, r0, r3
 8006478:	3301      	adds	r3, #1
 800647a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800647e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006482:	e00f      	b.n	80064a4 <HAL_I2C_Init+0x1dc>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	1e58      	subs	r0, r3, #1
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6859      	ldr	r1, [r3, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	440b      	add	r3, r1
 8006492:	0099      	lsls	r1, r3, #2
 8006494:	440b      	add	r3, r1
 8006496:	fbb0 f3f3 	udiv	r3, r0, r3
 800649a:	3301      	adds	r3, #1
 800649c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	6809      	ldr	r1, [r1, #0]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	69da      	ldr	r2, [r3, #28]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80064d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	6911      	ldr	r1, [r2, #16]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	68d2      	ldr	r2, [r2, #12]
 80064de:	4311      	orrs	r1, r2
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6812      	ldr	r2, [r2, #0]
 80064e4:	430b      	orrs	r3, r1
 80064e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	695a      	ldr	r2, [r3, #20]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	431a      	orrs	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0201 	orr.w	r2, r2, #1
 8006512:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	000186a0 	.word	0x000186a0
 8006540:	001e847f 	.word	0x001e847f
 8006544:	003d08ff 	.word	0x003d08ff
 8006548:	431bde83 	.word	0x431bde83
 800654c:	10624dd3 	.word	0x10624dd3

08006550 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	607a      	str	r2, [r7, #4]
 800655a:	461a      	mov	r2, r3
 800655c:	460b      	mov	r3, r1
 800655e:	817b      	strh	r3, [r7, #10]
 8006560:	4613      	mov	r3, r2
 8006562:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b20      	cmp	r3, #32
 8006572:	f040 808d 	bne.w	8006690 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006576:	4b4a      	ldr	r3, [pc, #296]	; (80066a0 <HAL_I2C_Master_Receive_IT+0x150>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	08db      	lsrs	r3, r3, #3
 800657c:	4a49      	ldr	r2, [pc, #292]	; (80066a4 <HAL_I2C_Master_Receive_IT+0x154>)
 800657e:	fba2 2303 	umull	r2, r3, r2, r3
 8006582:	0a1a      	lsrs	r2, r3, #8
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	009a      	lsls	r2, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	3b01      	subs	r3, #1
 8006594:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d116      	bne.n	80065ca <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	f043 0220 	orr.w	r2, r3, #32
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e063      	b.n	8006692 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d0db      	beq.n	8006590 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d101      	bne.n	80065e6 <HAL_I2C_Master_Receive_IT+0x96>
 80065e2:	2302      	movs	r3, #2
 80065e4:	e055      	b.n	8006692 <HAL_I2C_Master_Receive_IT+0x142>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d007      	beq.n	800660c <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0201 	orr.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800661a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2222      	movs	r2, #34	; 0x22
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2210      	movs	r2, #16
 8006628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	893a      	ldrh	r2, [r7, #8]
 800663c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4a17      	ldr	r2, [pc, #92]	; (80066a8 <HAL_I2C_Master_Receive_IT+0x158>)
 800664c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800664e:	897a      	ldrh	r2, [r7, #10]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800666a:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800667a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800668a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	e000      	b.n	8006692 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8006690:	2302      	movs	r3, #2
  }
}
 8006692:	4618      	mov	r0, r3
 8006694:	371c      	adds	r7, #28
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	20000010 	.word	0x20000010
 80066a4:	14f8b589 	.word	0x14f8b589
 80066a8:	ffff0000 	.word	0xffff0000

080066ac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066cc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
 80066d8:	2b10      	cmp	r3, #16
 80066da:	d003      	beq.n	80066e4 <HAL_I2C_EV_IRQHandler+0x38>
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
 80066de:	2b40      	cmp	r3, #64	; 0x40
 80066e0:	f040 80c1 	bne.w	8006866 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10d      	bne.n	800671a <HAL_I2C_EV_IRQHandler+0x6e>
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006704:	d003      	beq.n	800670e <HAL_I2C_EV_IRQHandler+0x62>
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800670c:	d101      	bne.n	8006712 <HAL_I2C_EV_IRQHandler+0x66>
 800670e:	2301      	movs	r3, #1
 8006710:	e000      	b.n	8006714 <HAL_I2C_EV_IRQHandler+0x68>
 8006712:	2300      	movs	r3, #0
 8006714:	2b01      	cmp	r3, #1
 8006716:	f000 8132 	beq.w	800697e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00c      	beq.n	800673e <HAL_I2C_EV_IRQHandler+0x92>
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	0a5b      	lsrs	r3, r3, #9
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	d006      	beq.n	800673e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 fb51 	bl	8007dd8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fcc8 	bl	80070cc <I2C_Master_SB>
 800673c:	e092      	b.n	8006864 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	08db      	lsrs	r3, r3, #3
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d009      	beq.n	800675e <HAL_I2C_EV_IRQHandler+0xb2>
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	0a5b      	lsrs	r3, r3, #9
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fd3e 	bl	80071d8 <I2C_Master_ADD10>
 800675c:	e082      	b.n	8006864 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	085b      	lsrs	r3, r3, #1
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d009      	beq.n	800677e <HAL_I2C_EV_IRQHandler+0xd2>
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	0a5b      	lsrs	r3, r3, #9
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fd58 	bl	800722c <I2C_Master_ADDR>
 800677c:	e072      	b.n	8006864 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	089b      	lsrs	r3, r3, #2
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d03b      	beq.n	8006802 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006798:	f000 80f3 	beq.w	8006982 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	09db      	lsrs	r3, r3, #7
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00f      	beq.n	80067c8 <HAL_I2C_EV_IRQHandler+0x11c>
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	0a9b      	lsrs	r3, r3, #10
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d009      	beq.n	80067c8 <HAL_I2C_EV_IRQHandler+0x11c>
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	089b      	lsrs	r3, r3, #2
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d103      	bne.n	80067c8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f938 	bl	8006a36 <I2C_MasterTransmit_TXE>
 80067c6:	e04d      	b.n	8006864 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	089b      	lsrs	r3, r3, #2
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 80d6 	beq.w	8006982 <HAL_I2C_EV_IRQHandler+0x2d6>
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	0a5b      	lsrs	r3, r3, #9
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 80cf 	beq.w	8006982 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80067e4:	7bbb      	ldrb	r3, [r7, #14]
 80067e6:	2b21      	cmp	r3, #33	; 0x21
 80067e8:	d103      	bne.n	80067f2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f9bf 	bl	8006b6e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067f0:	e0c7      	b.n	8006982 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	2b40      	cmp	r3, #64	; 0x40
 80067f6:	f040 80c4 	bne.w	8006982 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fa2d 	bl	8006c5a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006800:	e0bf      	b.n	8006982 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800680c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006810:	f000 80b7 	beq.w	8006982 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	099b      	lsrs	r3, r3, #6
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00f      	beq.n	8006840 <HAL_I2C_EV_IRQHandler+0x194>
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	0a9b      	lsrs	r3, r3, #10
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	d009      	beq.n	8006840 <HAL_I2C_EV_IRQHandler+0x194>
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	089b      	lsrs	r3, r3, #2
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	d103      	bne.n	8006840 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 faa2 	bl	8006d82 <I2C_MasterReceive_RXNE>
 800683e:	e011      	b.n	8006864 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	089b      	lsrs	r3, r3, #2
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 809a 	beq.w	8006982 <HAL_I2C_EV_IRQHandler+0x2d6>
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	0a5b      	lsrs	r3, r3, #9
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 8093 	beq.w	8006982 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fb4b 	bl	8006ef8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006862:	e08e      	b.n	8006982 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006864:	e08d      	b.n	8006982 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686a:	2b00      	cmp	r3, #0
 800686c:	d004      	beq.n	8006878 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	61fb      	str	r3, [r7, #28]
 8006876:	e007      	b.n	8006888 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	085b      	lsrs	r3, r3, #1
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d012      	beq.n	80068ba <HAL_I2C_EV_IRQHandler+0x20e>
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	0a5b      	lsrs	r3, r3, #9
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00c      	beq.n	80068ba <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d003      	beq.n	80068b0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80068b0:	69b9      	ldr	r1, [r7, #24]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 ff09 	bl	80076ca <I2C_Slave_ADDR>
 80068b8:	e066      	b.n	8006988 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	091b      	lsrs	r3, r3, #4
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d009      	beq.n	80068da <HAL_I2C_EV_IRQHandler+0x22e>
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	0a5b      	lsrs	r3, r3, #9
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 ff44 	bl	8007760 <I2C_Slave_STOPF>
 80068d8:	e056      	b.n	8006988 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80068da:	7bbb      	ldrb	r3, [r7, #14]
 80068dc:	2b21      	cmp	r3, #33	; 0x21
 80068de:	d002      	beq.n	80068e6 <HAL_I2C_EV_IRQHandler+0x23a>
 80068e0:	7bbb      	ldrb	r3, [r7, #14]
 80068e2:	2b29      	cmp	r3, #41	; 0x29
 80068e4:	d125      	bne.n	8006932 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	09db      	lsrs	r3, r3, #7
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00f      	beq.n	8006912 <HAL_I2C_EV_IRQHandler+0x266>
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	0a9b      	lsrs	r3, r3, #10
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d009      	beq.n	8006912 <HAL_I2C_EV_IRQHandler+0x266>
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	089b      	lsrs	r3, r3, #2
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d103      	bne.n	8006912 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fe1f 	bl	800754e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006910:	e039      	b.n	8006986 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	089b      	lsrs	r3, r3, #2
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d033      	beq.n	8006986 <HAL_I2C_EV_IRQHandler+0x2da>
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	0a5b      	lsrs	r3, r3, #9
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d02d      	beq.n	8006986 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fe4c 	bl	80075c8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006930:	e029      	b.n	8006986 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	099b      	lsrs	r3, r3, #6
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00f      	beq.n	800695e <HAL_I2C_EV_IRQHandler+0x2b2>
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	0a9b      	lsrs	r3, r3, #10
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d009      	beq.n	800695e <HAL_I2C_EV_IRQHandler+0x2b2>
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	089b      	lsrs	r3, r3, #2
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d103      	bne.n	800695e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fe57 	bl	800760a <I2C_SlaveReceive_RXNE>
 800695c:	e014      	b.n	8006988 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	089b      	lsrs	r3, r3, #2
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00e      	beq.n	8006988 <HAL_I2C_EV_IRQHandler+0x2dc>
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	0a5b      	lsrs	r3, r3, #9
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d008      	beq.n	8006988 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fe85 	bl	8007686 <I2C_SlaveReceive_BTF>
 800697c:	e004      	b.n	8006988 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800697e:	bf00      	nop
 8006980:	e002      	b.n	8006988 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006982:	bf00      	nop
 8006984:	e000      	b.n	8006988 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006986:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006988:	3720      	adds	r7, #32
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800698e:	b480      	push	{r7}
 8006990:	b083      	sub	sp, #12
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006996:	bf00      	nop
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b083      	sub	sp, #12
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b083      	sub	sp, #12
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	460b      	mov	r3, r1
 80069c0:	70fb      	strb	r3, [r7, #3]
 80069c2:	4613      	mov	r3, r2
 80069c4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80069da:	bf00      	nop
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80069ee:	bf00      	nop
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a44:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a4c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a52:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d150      	bne.n	8006afe <I2C_MasterTransmit_TXE+0xc8>
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
 8006a5e:	2b21      	cmp	r3, #33	; 0x21
 8006a60:	d14d      	bne.n	8006afe <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	d01d      	beq.n	8006aa4 <I2C_MasterTransmit_TXE+0x6e>
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2b20      	cmp	r3, #32
 8006a6c:	d01a      	beq.n	8006aa4 <I2C_MasterTransmit_TXE+0x6e>
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a74:	d016      	beq.n	8006aa4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a84:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2211      	movs	r2, #17
 8006a8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2220      	movs	r2, #32
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7fa fe49 	bl	8001734 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006aa2:	e060      	b.n	8006b66 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ab2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ac2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2220      	movs	r2, #32
 8006ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b40      	cmp	r3, #64	; 0x40
 8006adc:	d107      	bne.n	8006aee <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff ff7d 	bl	80069e6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006aec:	e03b      	b.n	8006b66 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7fa fe1c 	bl	8001734 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006afc:	e033      	b.n	8006b66 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
 8006b00:	2b21      	cmp	r3, #33	; 0x21
 8006b02:	d005      	beq.n	8006b10 <I2C_MasterTransmit_TXE+0xda>
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
 8006b06:	2b40      	cmp	r3, #64	; 0x40
 8006b08:	d12d      	bne.n	8006b66 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006b0a:	7bfb      	ldrb	r3, [r7, #15]
 8006b0c:	2b22      	cmp	r3, #34	; 0x22
 8006b0e:	d12a      	bne.n	8006b66 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d108      	bne.n	8006b2c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b28:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006b2a:	e01c      	b.n	8006b66 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b40      	cmp	r3, #64	; 0x40
 8006b36:	d103      	bne.n	8006b40 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f88e 	bl	8006c5a <I2C_MemoryTransmit_TXE_BTF>
}
 8006b3e:	e012      	b.n	8006b66 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	781a      	ldrb	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006b64:	e7ff      	b.n	8006b66 <I2C_MasterTransmit_TXE+0x130>
 8006b66:	bf00      	nop
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b084      	sub	sp, #16
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b21      	cmp	r3, #33	; 0x21
 8006b86:	d164      	bne.n	8006c52 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d012      	beq.n	8006bb8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	781a      	ldrb	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006bb6:	e04c      	b.n	8006c52 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	d01d      	beq.n	8006bfa <I2C_MasterTransmit_BTF+0x8c>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d01a      	beq.n	8006bfa <I2C_MasterTransmit_BTF+0x8c>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006bca:	d016      	beq.n	8006bfa <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bda:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2211      	movs	r2, #17
 8006be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2220      	movs	r2, #32
 8006bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7fa fd9e 	bl	8001734 <HAL_I2C_MasterTxCpltCallback>
}
 8006bf8:	e02b      	b.n	8006c52 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c08:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c18:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b40      	cmp	r3, #64	; 0x40
 8006c32:	d107      	bne.n	8006c44 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7ff fed2 	bl	80069e6 <HAL_I2C_MemTxCpltCallback>
}
 8006c42:	e006      	b.n	8006c52 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f7fa fd71 	bl	8001734 <HAL_I2C_MasterTxCpltCallback>
}
 8006c52:	bf00      	nop
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c68:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d11d      	bne.n	8006cae <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d10b      	bne.n	8006c92 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c8a:	1c9a      	adds	r2, r3, #2
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006c90:	e073      	b.n	8006d7a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	121b      	asrs	r3, r3, #8
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca6:	1c5a      	adds	r2, r3, #1
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006cac:	e065      	b.n	8006d7a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d10b      	bne.n	8006cce <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006ccc:	e055      	b.n	8006d7a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d151      	bne.n	8006d7a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
 8006cd8:	2b22      	cmp	r3, #34	; 0x22
 8006cda:	d10d      	bne.n	8006cf8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cea:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf0:	1c5a      	adds	r2, r3, #1
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006cf6:	e040      	b.n	8006d7a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d015      	beq.n	8006d2e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
 8006d04:	2b21      	cmp	r3, #33	; 0x21
 8006d06:	d112      	bne.n	8006d2e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	781a      	ldrb	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006d2c:	e025      	b.n	8006d7a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d120      	bne.n	8006d7a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	2b21      	cmp	r3, #33	; 0x21
 8006d3c:	d11d      	bne.n	8006d7a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d4c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d5c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2220      	movs	r2, #32
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7ff fe36 	bl	80069e6 <HAL_I2C_MemTxCpltCallback>
}
 8006d7a:	bf00      	nop
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b22      	cmp	r3, #34	; 0x22
 8006d94:	f040 80ac 	bne.w	8006ef0 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d921      	bls.n	8006dea <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	691a      	ldr	r2, [r3, #16]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	b2d2      	uxtb	r2, r2
 8006db2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	f040 808c 	bne.w	8006ef0 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006de6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006de8:	e082      	b.n	8006ef0 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d075      	beq.n	8006ede <I2C_MasterReceive_RXNE+0x15c>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d002      	beq.n	8006dfe <I2C_MasterReceive_RXNE+0x7c>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d16f      	bne.n	8006ede <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 ffb8 	bl	8007d74 <I2C_WaitOnSTOPRequestThroughIT>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d142      	bne.n	8006e90 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e18:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e28:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	691a      	ldr	r2, [r3, #16]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	1c5a      	adds	r2, r3, #1
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b40      	cmp	r3, #64	; 0x40
 8006e62:	d10a      	bne.n	8006e7a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7ff fdc1 	bl	80069fa <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006e78:	e03a      	b.n	8006ef0 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2212      	movs	r2, #18
 8006e86:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7fa fc3d 	bl	8001708 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006e8e:	e02f      	b.n	8006ef0 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e9e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691a      	ldr	r2, [r3, #16]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2220      	movs	r2, #32
 8006eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7ff fd99 	bl	8006a0e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006edc:	e008      	b.n	8006ef0 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eec:	605a      	str	r2, [r3, #4]
}
 8006eee:	e7ff      	b.n	8006ef0 <I2C_MasterReceive_RXNE+0x16e>
 8006ef0:	bf00      	nop
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f04:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d11b      	bne.n	8006f48 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f1e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	691a      	ldr	r2, [r3, #16]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2a:	b2d2      	uxtb	r2, r2
 8006f2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006f46:	e0bd      	b.n	80070c4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d129      	bne.n	8006fa6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f60:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d00a      	beq.n	8006f7e <I2C_MasterReceive_BTF+0x86>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d007      	beq.n	8006f7e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f7c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	691a      	ldr	r2, [r3, #16]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	b2d2      	uxtb	r2, r2
 8006f8a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006fa4:	e08e      	b.n	80070c4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d176      	bne.n	800709e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d002      	beq.n	8006fbc <I2C_MasterReceive_BTF+0xc4>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2b10      	cmp	r3, #16
 8006fba:	d108      	bne.n	8006fce <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	e019      	b.n	8007002 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b04      	cmp	r3, #4
 8006fd2:	d002      	beq.n	8006fda <I2C_MasterReceive_BTF+0xe2>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d108      	bne.n	8006fec <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	e00a      	b.n	8007002 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2b10      	cmp	r3, #16
 8006ff0:	d007      	beq.n	8007002 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007000:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	691a      	ldr	r2, [r3, #16]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	b2d2      	uxtb	r2, r2
 800700e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800701e:	b29b      	uxth	r3, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	691a      	ldr	r2, [r3, #16]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007044:	b29b      	uxth	r3, r3
 8007046:	3b01      	subs	r3, #1
 8007048:	b29a      	uxth	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800705c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2220      	movs	r2, #32
 8007062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b40      	cmp	r3, #64	; 0x40
 8007070:	d10a      	bne.n	8007088 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7ff fcba 	bl	80069fa <HAL_I2C_MemRxCpltCallback>
}
 8007086:	e01d      	b.n	80070c4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2212      	movs	r2, #18
 8007094:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7fa fb36 	bl	8001708 <HAL_I2C_MasterRxCpltCallback>
}
 800709c:	e012      	b.n	80070c4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	691a      	ldr	r2, [r3, #16]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a8:	b2d2      	uxtb	r2, r2
 80070aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	3b01      	subs	r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80070c4:	bf00      	nop
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b40      	cmp	r3, #64	; 0x40
 80070de:	d117      	bne.n	8007110 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d109      	bne.n	80070fc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	461a      	mov	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070f8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80070fa:	e067      	b.n	80071cc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007100:	b2db      	uxtb	r3, r3
 8007102:	f043 0301 	orr.w	r3, r3, #1
 8007106:	b2da      	uxtb	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	611a      	str	r2, [r3, #16]
}
 800710e:	e05d      	b.n	80071cc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007118:	d133      	bne.n	8007182 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b21      	cmp	r3, #33	; 0x21
 8007124:	d109      	bne.n	800713a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712a:	b2db      	uxtb	r3, r3
 800712c:	461a      	mov	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007136:	611a      	str	r2, [r3, #16]
 8007138:	e008      	b.n	800714c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713e:	b2db      	uxtb	r3, r3
 8007140:	f043 0301 	orr.w	r3, r3, #1
 8007144:	b2da      	uxtb	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007150:	2b00      	cmp	r3, #0
 8007152:	d004      	beq.n	800715e <I2C_Master_SB+0x92>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800715a:	2b00      	cmp	r3, #0
 800715c:	d108      	bne.n	8007170 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007162:	2b00      	cmp	r3, #0
 8007164:	d032      	beq.n	80071cc <I2C_Master_SB+0x100>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d02d      	beq.n	80071cc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800717e:	605a      	str	r2, [r3, #4]
}
 8007180:	e024      	b.n	80071cc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10e      	bne.n	80071a8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718e:	b29b      	uxth	r3, r3
 8007190:	11db      	asrs	r3, r3, #7
 8007192:	b2db      	uxtb	r3, r3
 8007194:	f003 0306 	and.w	r3, r3, #6
 8007198:	b2db      	uxtb	r3, r3
 800719a:	f063 030f 	orn	r3, r3, #15
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	611a      	str	r2, [r3, #16]
}
 80071a6:	e011      	b.n	80071cc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d10d      	bne.n	80071cc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	11db      	asrs	r3, r3, #7
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	f003 0306 	and.w	r3, r3, #6
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	f063 030e 	orn	r3, r3, #14
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	611a      	str	r2, [r3, #16]
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d004      	beq.n	80071fe <I2C_Master_ADD10+0x26>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d108      	bne.n	8007210 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00c      	beq.n	8007220 <I2C_Master_ADD10+0x48>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720c:	2b00      	cmp	r3, #0
 800720e:	d007      	beq.n	8007220 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	685a      	ldr	r2, [r3, #4]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800721e:	605a      	str	r2, [r3, #4]
  }
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800722c:	b480      	push	{r7}
 800722e:	b091      	sub	sp, #68	; 0x44
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800723a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007242:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007248:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b22      	cmp	r3, #34	; 0x22
 8007254:	f040 8169 	bne.w	800752a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10f      	bne.n	8007280 <I2C_Master_ADDR+0x54>
 8007260:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007264:	2b40      	cmp	r3, #64	; 0x40
 8007266:	d10b      	bne.n	8007280 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007268:	2300      	movs	r3, #0
 800726a:	633b      	str	r3, [r7, #48]	; 0x30
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	633b      	str	r3, [r7, #48]	; 0x30
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	633b      	str	r3, [r7, #48]	; 0x30
 800727c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727e:	e160      	b.n	8007542 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007284:	2b00      	cmp	r3, #0
 8007286:	d11d      	bne.n	80072c4 <I2C_Master_ADDR+0x98>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007290:	d118      	bne.n	80072c4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007292:	2300      	movs	r3, #0
 8007294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072b6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072bc:	1c5a      	adds	r2, r3, #1
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	651a      	str	r2, [r3, #80]	; 0x50
 80072c2:	e13e      	b.n	8007542 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d113      	bne.n	80072f6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072ce:	2300      	movs	r3, #0
 80072d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80072e2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	e115      	b.n	8007522 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	f040 808a 	bne.w	8007416 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007304:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007308:	d137      	bne.n	800737a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007318:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007328:	d113      	bne.n	8007352 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007338:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800733a:	2300      	movs	r3, #0
 800733c:	627b      	str	r3, [r7, #36]	; 0x24
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	627b      	str	r3, [r7, #36]	; 0x24
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	627b      	str	r3, [r7, #36]	; 0x24
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	e0e7      	b.n	8007522 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007352:	2300      	movs	r3, #0
 8007354:	623b      	str	r3, [r7, #32]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	623b      	str	r3, [r7, #32]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	623b      	str	r3, [r7, #32]
 8007366:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	e0d3      	b.n	8007522 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737c:	2b08      	cmp	r3, #8
 800737e:	d02e      	beq.n	80073de <I2C_Master_ADDR+0x1b2>
 8007380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007382:	2b20      	cmp	r3, #32
 8007384:	d02b      	beq.n	80073de <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007388:	2b12      	cmp	r3, #18
 800738a:	d102      	bne.n	8007392 <I2C_Master_ADDR+0x166>
 800738c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738e:	2b01      	cmp	r3, #1
 8007390:	d125      	bne.n	80073de <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	2b04      	cmp	r3, #4
 8007396:	d00e      	beq.n	80073b6 <I2C_Master_ADDR+0x18a>
 8007398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739a:	2b02      	cmp	r3, #2
 800739c:	d00b      	beq.n	80073b6 <I2C_Master_ADDR+0x18a>
 800739e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a0:	2b10      	cmp	r3, #16
 80073a2:	d008      	beq.n	80073b6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	e007      	b.n	80073c6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073c6:	2300      	movs	r3, #0
 80073c8:	61fb      	str	r3, [r7, #28]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	61fb      	str	r3, [r7, #28]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	61fb      	str	r3, [r7, #28]
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	e0a1      	b.n	8007522 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ec:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073ee:	2300      	movs	r3, #0
 80073f0:	61bb      	str	r3, [r7, #24]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	61bb      	str	r3, [r7, #24]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	61bb      	str	r3, [r7, #24]
 8007402:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	e085      	b.n	8007522 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800741a:	b29b      	uxth	r3, r3
 800741c:	2b02      	cmp	r3, #2
 800741e:	d14d      	bne.n	80074bc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007422:	2b04      	cmp	r3, #4
 8007424:	d016      	beq.n	8007454 <I2C_Master_ADDR+0x228>
 8007426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007428:	2b02      	cmp	r3, #2
 800742a:	d013      	beq.n	8007454 <I2C_Master_ADDR+0x228>
 800742c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742e:	2b10      	cmp	r3, #16
 8007430:	d010      	beq.n	8007454 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007440:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007450:	601a      	str	r2, [r3, #0]
 8007452:	e007      	b.n	8007464 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007462:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800746e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007472:	d117      	bne.n	80074a4 <I2C_Master_ADDR+0x278>
 8007474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007476:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800747a:	d00b      	beq.n	8007494 <I2C_Master_ADDR+0x268>
 800747c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747e:	2b01      	cmp	r3, #1
 8007480:	d008      	beq.n	8007494 <I2C_Master_ADDR+0x268>
 8007482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007484:	2b08      	cmp	r3, #8
 8007486:	d005      	beq.n	8007494 <I2C_Master_ADDR+0x268>
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	2b10      	cmp	r3, #16
 800748c:	d002      	beq.n	8007494 <I2C_Master_ADDR+0x268>
 800748e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007490:	2b20      	cmp	r3, #32
 8007492:	d107      	bne.n	80074a4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074a2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074a4:	2300      	movs	r3, #0
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	617b      	str	r3, [r7, #20]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	617b      	str	r3, [r7, #20]
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	e032      	b.n	8007522 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074ca:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074da:	d117      	bne.n	800750c <I2C_Master_ADDR+0x2e0>
 80074dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074e2:	d00b      	beq.n	80074fc <I2C_Master_ADDR+0x2d0>
 80074e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d008      	beq.n	80074fc <I2C_Master_ADDR+0x2d0>
 80074ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	d005      	beq.n	80074fc <I2C_Master_ADDR+0x2d0>
 80074f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f2:	2b10      	cmp	r3, #16
 80074f4:	d002      	beq.n	80074fc <I2C_Master_ADDR+0x2d0>
 80074f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f8:	2b20      	cmp	r3, #32
 80074fa:	d107      	bne.n	800750c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800750a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800750c:	2300      	movs	r3, #0
 800750e:	613b      	str	r3, [r7, #16]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	613b      	str	r3, [r7, #16]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	613b      	str	r3, [r7, #16]
 8007520:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007528:	e00b      	b.n	8007542 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800752a:	2300      	movs	r3, #0
 800752c:	60fb      	str	r3, [r7, #12]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	695b      	ldr	r3, [r3, #20]
 8007534:	60fb      	str	r3, [r7, #12]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	60fb      	str	r3, [r7, #12]
 800753e:	68fb      	ldr	r3, [r7, #12]
}
 8007540:	e7ff      	b.n	8007542 <I2C_Master_ADDR+0x316>
 8007542:	bf00      	nop
 8007544:	3744      	adds	r7, #68	; 0x44
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800755c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007562:	b29b      	uxth	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d02b      	beq.n	80075c0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756c:	781a      	ldrb	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007582:	b29b      	uxth	r3, r3
 8007584:	3b01      	subs	r3, #1
 8007586:	b29a      	uxth	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007590:	b29b      	uxth	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d114      	bne.n	80075c0 <I2C_SlaveTransmit_TXE+0x72>
 8007596:	7bfb      	ldrb	r3, [r7, #15]
 8007598:	2b29      	cmp	r3, #41	; 0x29
 800759a:	d111      	bne.n	80075c0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075aa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2221      	movs	r2, #33	; 0x21
 80075b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2228      	movs	r2, #40	; 0x28
 80075b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff f9e7 	bl	800698e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80075c0:	bf00      	nop
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d011      	beq.n	80075fe <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	781a      	ldrb	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	3b01      	subs	r3, #1
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80075fe:	bf00      	nop
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b084      	sub	sp, #16
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007618:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761e:	b29b      	uxth	r3, r3
 8007620:	2b00      	cmp	r3, #0
 8007622:	d02c      	beq.n	800767e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	691a      	ldr	r2, [r3, #16]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	b2d2      	uxtb	r2, r2
 8007630:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007640:	b29b      	uxth	r3, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	b29a      	uxth	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800764e:	b29b      	uxth	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d114      	bne.n	800767e <I2C_SlaveReceive_RXNE+0x74>
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	2b2a      	cmp	r3, #42	; 0x2a
 8007658:	d111      	bne.n	800767e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007668:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2222      	movs	r2, #34	; 0x22
 800766e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2228      	movs	r2, #40	; 0x28
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7ff f992 	bl	80069a2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800767e:	bf00      	nop
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007692:	b29b      	uxth	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d012      	beq.n	80076be <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	691a      	ldr	r2, [r3, #16]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a2:	b2d2      	uxtb	r2, r2
 80076a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	1c5a      	adds	r2, r3, #1
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	3b01      	subs	r3, #1
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80076be:	bf00      	nop
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80076d4:	2300      	movs	r3, #0
 80076d6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80076e4:	2b28      	cmp	r3, #40	; 0x28
 80076e6:	d127      	bne.n	8007738 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076f6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	089b      	lsrs	r3, r3, #2
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007704:	2301      	movs	r3, #1
 8007706:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	09db      	lsrs	r3, r3, #7
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	2b00      	cmp	r3, #0
 8007712:	d103      	bne.n	800771c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	81bb      	strh	r3, [r7, #12]
 800771a:	e002      	b.n	8007722 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800772a:	89ba      	ldrh	r2, [r7, #12]
 800772c:	7bfb      	ldrb	r3, [r7, #15]
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f7ff f940 	bl	80069b6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007736:	e00e      	b.n	8007756 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007738:	2300      	movs	r3, #0
 800773a:	60bb      	str	r3, [r7, #8]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	60bb      	str	r3, [r7, #8]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	60bb      	str	r3, [r7, #8]
 800774c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007756:	bf00      	nop
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
	...

08007760 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800776e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800777e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007780:	2300      	movs	r3, #0
 8007782:	60bb      	str	r3, [r7, #8]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	60bb      	str	r3, [r7, #8]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f042 0201 	orr.w	r2, r2, #1
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077ac:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077bc:	d172      	bne.n	80078a4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80077be:	7bfb      	ldrb	r3, [r7, #15]
 80077c0:	2b22      	cmp	r3, #34	; 0x22
 80077c2:	d002      	beq.n	80077ca <I2C_Slave_STOPF+0x6a>
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	2b2a      	cmp	r3, #42	; 0x2a
 80077c8:	d135      	bne.n	8007836 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077dc:	b29b      	uxth	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d005      	beq.n	80077ee <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e6:	f043 0204 	orr.w	r2, r3, #4
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007802:	4618      	mov	r0, r3
 8007804:	f7fd ffca 	bl	800579c <HAL_DMA_GetState>
 8007808:	4603      	mov	r3, r0
 800780a:	2b01      	cmp	r3, #1
 800780c:	d049      	beq.n	80078a2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007812:	4a69      	ldr	r2, [pc, #420]	; (80079b8 <I2C_Slave_STOPF+0x258>)
 8007814:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781a:	4618      	mov	r0, r3
 800781c:	f7fd fe12 	bl	8005444 <HAL_DMA_Abort_IT>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d03d      	beq.n	80078a2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007830:	4610      	mov	r0, r2
 8007832:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007834:	e035      	b.n	80078a2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	b29a      	uxth	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007848:	b29b      	uxth	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d005      	beq.n	800785a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007852:	f043 0204 	orr.w	r2, r3, #4
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007868:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800786e:	4618      	mov	r0, r3
 8007870:	f7fd ff94 	bl	800579c <HAL_DMA_GetState>
 8007874:	4603      	mov	r3, r0
 8007876:	2b01      	cmp	r3, #1
 8007878:	d014      	beq.n	80078a4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787e:	4a4e      	ldr	r2, [pc, #312]	; (80079b8 <I2C_Slave_STOPF+0x258>)
 8007880:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007886:	4618      	mov	r0, r3
 8007888:	f7fd fddc 	bl	8005444 <HAL_DMA_Abort_IT>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d008      	beq.n	80078a4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800789c:	4610      	mov	r0, r2
 800789e:	4798      	blx	r3
 80078a0:	e000      	b.n	80078a4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80078a2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d03e      	beq.n	800792c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	695b      	ldr	r3, [r3, #20]
 80078b4:	f003 0304 	and.w	r3, r3, #4
 80078b8:	2b04      	cmp	r3, #4
 80078ba:	d112      	bne.n	80078e2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	691a      	ldr	r2, [r3, #16]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c6:	b2d2      	uxtb	r2, r2
 80078c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d8:	b29b      	uxth	r3, r3
 80078da:	3b01      	subs	r3, #1
 80078dc:	b29a      	uxth	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ec:	2b40      	cmp	r3, #64	; 0x40
 80078ee:	d112      	bne.n	8007916 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	691a      	ldr	r2, [r3, #16]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fa:	b2d2      	uxtb	r2, r2
 80078fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007902:	1c5a      	adds	r2, r3, #1
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800790c:	b29b      	uxth	r3, r3
 800790e:	3b01      	subs	r3, #1
 8007910:	b29a      	uxth	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800791a:	b29b      	uxth	r3, r3
 800791c:	2b00      	cmp	r3, #0
 800791e:	d005      	beq.n	800792c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007924:	f043 0204 	orr.w	r2, r3, #4
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007930:	2b00      	cmp	r3, #0
 8007932:	d003      	beq.n	800793c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f843 	bl	80079c0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800793a:	e039      	b.n	80079b0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	2b2a      	cmp	r3, #42	; 0x2a
 8007940:	d109      	bne.n	8007956 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2228      	movs	r2, #40	; 0x28
 800794c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7ff f826 	bl	80069a2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b28      	cmp	r3, #40	; 0x28
 8007960:	d111      	bne.n	8007986 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a15      	ldr	r2, [pc, #84]	; (80079bc <I2C_Slave_STOPF+0x25c>)
 8007966:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2220      	movs	r2, #32
 8007972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7ff f827 	bl	80069d2 <HAL_I2C_ListenCpltCallback>
}
 8007984:	e014      	b.n	80079b0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798a:	2b22      	cmp	r3, #34	; 0x22
 800798c:	d002      	beq.n	8007994 <I2C_Slave_STOPF+0x234>
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	2b22      	cmp	r3, #34	; 0x22
 8007992:	d10d      	bne.n	80079b0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2220      	movs	r2, #32
 800799e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7fe fff9 	bl	80069a2 <HAL_I2C_SlaveRxCpltCallback>
}
 80079b0:	bf00      	nop
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	08007c25 	.word	0x08007c25
 80079bc:	ffff0000 	.word	0xffff0000

080079c0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	2b10      	cmp	r3, #16
 80079dc:	d002      	beq.n	80079e4 <I2C_ITError+0x24>
 80079de:	7bbb      	ldrb	r3, [r7, #14]
 80079e0:	2b40      	cmp	r3, #64	; 0x40
 80079e2:	d10a      	bne.n	80079fa <I2C_ITError+0x3a>
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
 80079e6:	2b22      	cmp	r3, #34	; 0x22
 80079e8:	d107      	bne.n	80079fa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079f8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
 80079fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a00:	2b28      	cmp	r3, #40	; 0x28
 8007a02:	d107      	bne.n	8007a14 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2228      	movs	r2, #40	; 0x28
 8007a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007a12:	e015      	b.n	8007a40 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a22:	d00a      	beq.n	8007a3a <I2C_ITError+0x7a>
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
 8007a26:	2b60      	cmp	r3, #96	; 0x60
 8007a28:	d007      	beq.n	8007a3a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a4e:	d162      	bne.n	8007b16 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685a      	ldr	r2, [r3, #4]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a5e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d020      	beq.n	8007ab0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a72:	4a6a      	ldr	r2, [pc, #424]	; (8007c1c <I2C_ITError+0x25c>)
 8007a74:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fd fce2 	bl	8005444 <HAL_DMA_Abort_IT>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 8089 	beq.w	8007b9a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f022 0201 	bic.w	r2, r2, #1
 8007a96:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007aaa:	4610      	mov	r0, r2
 8007aac:	4798      	blx	r3
 8007aae:	e074      	b.n	8007b9a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab4:	4a59      	ldr	r2, [pc, #356]	; (8007c1c <I2C_ITError+0x25c>)
 8007ab6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fd fcc1 	bl	8005444 <HAL_DMA_Abort_IT>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d068      	beq.n	8007b9a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad2:	2b40      	cmp	r3, #64	; 0x40
 8007ad4:	d10b      	bne.n	8007aee <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	691a      	ldr	r2, [r3, #16]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae0:	b2d2      	uxtb	r2, r2
 8007ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	1c5a      	adds	r2, r3, #1
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f022 0201 	bic.w	r2, r2, #1
 8007afc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2220      	movs	r2, #32
 8007b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b10:	4610      	mov	r0, r2
 8007b12:	4798      	blx	r3
 8007b14:	e041      	b.n	8007b9a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b60      	cmp	r3, #96	; 0x60
 8007b20:	d125      	bne.n	8007b6e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2220      	movs	r2, #32
 8007b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b3a:	2b40      	cmp	r3, #64	; 0x40
 8007b3c:	d10b      	bne.n	8007b56 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	691a      	ldr	r2, [r3, #16]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b48:	b2d2      	uxtb	r2, r2
 8007b4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b50:	1c5a      	adds	r2, r3, #1
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0201 	bic.w	r2, r2, #1
 8007b64:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7fe ff5b 	bl	8006a22 <HAL_I2C_AbortCpltCallback>
 8007b6c:	e015      	b.n	8007b9a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b78:	2b40      	cmp	r3, #64	; 0x40
 8007b7a:	d10b      	bne.n	8007b94 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	691a      	ldr	r2, [r3, #16]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	b2d2      	uxtb	r2, r2
 8007b88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8e:	1c5a      	adds	r2, r3, #1
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f7fe ff3a 	bl	8006a0e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10e      	bne.n	8007bc8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d109      	bne.n	8007bc8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d104      	bne.n	8007bc8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d007      	beq.n	8007bd8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007bd6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bde:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be4:	f003 0304 	and.w	r3, r3, #4
 8007be8:	2b04      	cmp	r3, #4
 8007bea:	d113      	bne.n	8007c14 <I2C_ITError+0x254>
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
 8007bee:	2b28      	cmp	r3, #40	; 0x28
 8007bf0:	d110      	bne.n	8007c14 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a0a      	ldr	r2, [pc, #40]	; (8007c20 <I2C_ITError+0x260>)
 8007bf6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2220      	movs	r2, #32
 8007c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7fe fedf 	bl	80069d2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007c14:	bf00      	nop
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	08007c25 	.word	0x08007c25
 8007c20:	ffff0000 	.word	0xffff0000

08007c24 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c34:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c3c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007c3e:	4b4b      	ldr	r3, [pc, #300]	; (8007d6c <I2C_DMAAbort+0x148>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	08db      	lsrs	r3, r3, #3
 8007c44:	4a4a      	ldr	r2, [pc, #296]	; (8007d70 <I2C_DMAAbort+0x14c>)
 8007c46:	fba2 2303 	umull	r2, r3, r2, r3
 8007c4a:	0a1a      	lsrs	r2, r3, #8
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	00da      	lsls	r2, r3, #3
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d106      	bne.n	8007c6c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c62:	f043 0220 	orr.w	r2, r3, #32
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007c6a:	e00a      	b.n	8007c82 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c80:	d0ea      	beq.n	8007c58 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c8e:	2200      	movs	r2, #0
 8007c90:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cb0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d003      	beq.n	8007cc8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f022 0201 	bic.w	r2, r2, #1
 8007ce6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b60      	cmp	r3, #96	; 0x60
 8007cf2:	d10e      	bne.n	8007d12 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	2220      	movs	r2, #32
 8007cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	2200      	movs	r2, #0
 8007d08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007d0a:	6978      	ldr	r0, [r7, #20]
 8007d0c:	f7fe fe89 	bl	8006a22 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007d10:	e027      	b.n	8007d62 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d12:	7cfb      	ldrb	r3, [r7, #19]
 8007d14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007d18:	2b28      	cmp	r3, #40	; 0x28
 8007d1a:	d117      	bne.n	8007d4c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f042 0201 	orr.w	r2, r2, #1
 8007d2a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d3a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2228      	movs	r2, #40	; 0x28
 8007d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007d4a:	e007      	b.n	8007d5c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	2220      	movs	r2, #32
 8007d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007d5c:	6978      	ldr	r0, [r7, #20]
 8007d5e:	f7fe fe56 	bl	8006a0e <HAL_I2C_ErrorCallback>
}
 8007d62:	bf00      	nop
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	20000010 	.word	0x20000010
 8007d70:	14f8b589 	.word	0x14f8b589

08007d74 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007d80:	4b13      	ldr	r3, [pc, #76]	; (8007dd0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	08db      	lsrs	r3, r3, #3
 8007d86:	4a13      	ldr	r2, [pc, #76]	; (8007dd4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007d88:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8c:	0a1a      	lsrs	r2, r3, #8
 8007d8e:	4613      	mov	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d107      	bne.n	8007db2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da6:	f043 0220 	orr.w	r2, r3, #32
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e008      	b.n	8007dc4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dc0:	d0e9      	beq.n	8007d96 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	20000010 	.word	0x20000010
 8007dd4:	14f8b589 	.word	0x14f8b589

08007dd8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007de8:	d103      	bne.n	8007df2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007df0:	e007      	b.n	8007e02 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007dfa:	d102      	bne.n	8007e02 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2208      	movs	r2, #8
 8007e00:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007e02:	bf00      	nop
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
	...

08007e10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e267      	b.n	80082f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d075      	beq.n	8007f1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e2e:	4b88      	ldr	r3, [pc, #544]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f003 030c 	and.w	r3, r3, #12
 8007e36:	2b04      	cmp	r3, #4
 8007e38:	d00c      	beq.n	8007e54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e3a:	4b85      	ldr	r3, [pc, #532]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e42:	2b08      	cmp	r3, #8
 8007e44:	d112      	bne.n	8007e6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e46:	4b82      	ldr	r3, [pc, #520]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e52:	d10b      	bne.n	8007e6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e54:	4b7e      	ldr	r3, [pc, #504]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d05b      	beq.n	8007f18 <HAL_RCC_OscConfig+0x108>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d157      	bne.n	8007f18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e242      	b.n	80082f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e74:	d106      	bne.n	8007e84 <HAL_RCC_OscConfig+0x74>
 8007e76:	4b76      	ldr	r3, [pc, #472]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a75      	ldr	r2, [pc, #468]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e80:	6013      	str	r3, [r2, #0]
 8007e82:	e01d      	b.n	8007ec0 <HAL_RCC_OscConfig+0xb0>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e8c:	d10c      	bne.n	8007ea8 <HAL_RCC_OscConfig+0x98>
 8007e8e:	4b70      	ldr	r3, [pc, #448]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a6f      	ldr	r2, [pc, #444]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e98:	6013      	str	r3, [r2, #0]
 8007e9a:	4b6d      	ldr	r3, [pc, #436]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a6c      	ldr	r2, [pc, #432]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ea4:	6013      	str	r3, [r2, #0]
 8007ea6:	e00b      	b.n	8007ec0 <HAL_RCC_OscConfig+0xb0>
 8007ea8:	4b69      	ldr	r3, [pc, #420]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a68      	ldr	r2, [pc, #416]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	4b66      	ldr	r3, [pc, #408]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a65      	ldr	r2, [pc, #404]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d013      	beq.n	8007ef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ec8:	f7fc ff38 	bl	8004d3c <HAL_GetTick>
 8007ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ece:	e008      	b.n	8007ee2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ed0:	f7fc ff34 	bl	8004d3c <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b64      	cmp	r3, #100	; 0x64
 8007edc:	d901      	bls.n	8007ee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e207      	b.n	80082f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ee2:	4b5b      	ldr	r3, [pc, #364]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0f0      	beq.n	8007ed0 <HAL_RCC_OscConfig+0xc0>
 8007eee:	e014      	b.n	8007f1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ef0:	f7fc ff24 	bl	8004d3c <HAL_GetTick>
 8007ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ef6:	e008      	b.n	8007f0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ef8:	f7fc ff20 	bl	8004d3c <HAL_GetTick>
 8007efc:	4602      	mov	r2, r0
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	2b64      	cmp	r3, #100	; 0x64
 8007f04:	d901      	bls.n	8007f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e1f3      	b.n	80082f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f0a:	4b51      	ldr	r3, [pc, #324]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1f0      	bne.n	8007ef8 <HAL_RCC_OscConfig+0xe8>
 8007f16:	e000      	b.n	8007f1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0302 	and.w	r3, r3, #2
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d063      	beq.n	8007fee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007f26:	4b4a      	ldr	r3, [pc, #296]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f003 030c 	and.w	r3, r3, #12
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00b      	beq.n	8007f4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f32:	4b47      	ldr	r3, [pc, #284]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007f3a:	2b08      	cmp	r3, #8
 8007f3c:	d11c      	bne.n	8007f78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f3e:	4b44      	ldr	r3, [pc, #272]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d116      	bne.n	8007f78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f4a:	4b41      	ldr	r3, [pc, #260]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0302 	and.w	r3, r3, #2
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d005      	beq.n	8007f62 <HAL_RCC_OscConfig+0x152>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d001      	beq.n	8007f62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e1c7      	b.n	80082f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f62:	4b3b      	ldr	r3, [pc, #236]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	4937      	ldr	r1, [pc, #220]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f76:	e03a      	b.n	8007fee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d020      	beq.n	8007fc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f80:	4b34      	ldr	r3, [pc, #208]	; (8008054 <HAL_RCC_OscConfig+0x244>)
 8007f82:	2201      	movs	r2, #1
 8007f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f86:	f7fc fed9 	bl	8004d3c <HAL_GetTick>
 8007f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f8c:	e008      	b.n	8007fa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f8e:	f7fc fed5 	bl	8004d3c <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d901      	bls.n	8007fa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e1a8      	b.n	80082f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fa0:	4b2b      	ldr	r3, [pc, #172]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0302 	and.w	r3, r3, #2
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d0f0      	beq.n	8007f8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fac:	4b28      	ldr	r3, [pc, #160]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	00db      	lsls	r3, r3, #3
 8007fba:	4925      	ldr	r1, [pc, #148]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	600b      	str	r3, [r1, #0]
 8007fc0:	e015      	b.n	8007fee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007fc2:	4b24      	ldr	r3, [pc, #144]	; (8008054 <HAL_RCC_OscConfig+0x244>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc8:	f7fc feb8 	bl	8004d3c <HAL_GetTick>
 8007fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007fce:	e008      	b.n	8007fe2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fd0:	f7fc feb4 	bl	8004d3c <HAL_GetTick>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d901      	bls.n	8007fe2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e187      	b.n	80082f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007fe2:	4b1b      	ldr	r3, [pc, #108]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0302 	and.w	r3, r3, #2
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1f0      	bne.n	8007fd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0308 	and.w	r3, r3, #8
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d036      	beq.n	8008068 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d016      	beq.n	8008030 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008002:	4b15      	ldr	r3, [pc, #84]	; (8008058 <HAL_RCC_OscConfig+0x248>)
 8008004:	2201      	movs	r2, #1
 8008006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008008:	f7fc fe98 	bl	8004d3c <HAL_GetTick>
 800800c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800800e:	e008      	b.n	8008022 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008010:	f7fc fe94 	bl	8004d3c <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	2b02      	cmp	r3, #2
 800801c:	d901      	bls.n	8008022 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e167      	b.n	80082f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008022:	4b0b      	ldr	r3, [pc, #44]	; (8008050 <HAL_RCC_OscConfig+0x240>)
 8008024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008026:	f003 0302 	and.w	r3, r3, #2
 800802a:	2b00      	cmp	r3, #0
 800802c:	d0f0      	beq.n	8008010 <HAL_RCC_OscConfig+0x200>
 800802e:	e01b      	b.n	8008068 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008030:	4b09      	ldr	r3, [pc, #36]	; (8008058 <HAL_RCC_OscConfig+0x248>)
 8008032:	2200      	movs	r2, #0
 8008034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008036:	f7fc fe81 	bl	8004d3c <HAL_GetTick>
 800803a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800803c:	e00e      	b.n	800805c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800803e:	f7fc fe7d 	bl	8004d3c <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	2b02      	cmp	r3, #2
 800804a:	d907      	bls.n	800805c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e150      	b.n	80082f2 <HAL_RCC_OscConfig+0x4e2>
 8008050:	40023800 	.word	0x40023800
 8008054:	42470000 	.word	0x42470000
 8008058:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800805c:	4b88      	ldr	r3, [pc, #544]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 800805e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008060:	f003 0302 	and.w	r3, r3, #2
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1ea      	bne.n	800803e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 0304 	and.w	r3, r3, #4
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 8097 	beq.w	80081a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008076:	2300      	movs	r3, #0
 8008078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800807a:	4b81      	ldr	r3, [pc, #516]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 800807c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10f      	bne.n	80080a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008086:	2300      	movs	r3, #0
 8008088:	60bb      	str	r3, [r7, #8]
 800808a:	4b7d      	ldr	r3, [pc, #500]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 800808c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808e:	4a7c      	ldr	r2, [pc, #496]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 8008090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008094:	6413      	str	r3, [r2, #64]	; 0x40
 8008096:	4b7a      	ldr	r3, [pc, #488]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 8008098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800809e:	60bb      	str	r3, [r7, #8]
 80080a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080a2:	2301      	movs	r3, #1
 80080a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080a6:	4b77      	ldr	r3, [pc, #476]	; (8008284 <HAL_RCC_OscConfig+0x474>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d118      	bne.n	80080e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80080b2:	4b74      	ldr	r3, [pc, #464]	; (8008284 <HAL_RCC_OscConfig+0x474>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a73      	ldr	r2, [pc, #460]	; (8008284 <HAL_RCC_OscConfig+0x474>)
 80080b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080be:	f7fc fe3d 	bl	8004d3c <HAL_GetTick>
 80080c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080c4:	e008      	b.n	80080d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080c6:	f7fc fe39 	bl	8004d3c <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d901      	bls.n	80080d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	e10c      	b.n	80082f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080d8:	4b6a      	ldr	r3, [pc, #424]	; (8008284 <HAL_RCC_OscConfig+0x474>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d0f0      	beq.n	80080c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d106      	bne.n	80080fa <HAL_RCC_OscConfig+0x2ea>
 80080ec:	4b64      	ldr	r3, [pc, #400]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 80080ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f0:	4a63      	ldr	r2, [pc, #396]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 80080f2:	f043 0301 	orr.w	r3, r3, #1
 80080f6:	6713      	str	r3, [r2, #112]	; 0x70
 80080f8:	e01c      	b.n	8008134 <HAL_RCC_OscConfig+0x324>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	2b05      	cmp	r3, #5
 8008100:	d10c      	bne.n	800811c <HAL_RCC_OscConfig+0x30c>
 8008102:	4b5f      	ldr	r3, [pc, #380]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 8008104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008106:	4a5e      	ldr	r2, [pc, #376]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 8008108:	f043 0304 	orr.w	r3, r3, #4
 800810c:	6713      	str	r3, [r2, #112]	; 0x70
 800810e:	4b5c      	ldr	r3, [pc, #368]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 8008110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008112:	4a5b      	ldr	r2, [pc, #364]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 8008114:	f043 0301 	orr.w	r3, r3, #1
 8008118:	6713      	str	r3, [r2, #112]	; 0x70
 800811a:	e00b      	b.n	8008134 <HAL_RCC_OscConfig+0x324>
 800811c:	4b58      	ldr	r3, [pc, #352]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 800811e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008120:	4a57      	ldr	r2, [pc, #348]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 8008122:	f023 0301 	bic.w	r3, r3, #1
 8008126:	6713      	str	r3, [r2, #112]	; 0x70
 8008128:	4b55      	ldr	r3, [pc, #340]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 800812a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812c:	4a54      	ldr	r2, [pc, #336]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 800812e:	f023 0304 	bic.w	r3, r3, #4
 8008132:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d015      	beq.n	8008168 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800813c:	f7fc fdfe 	bl	8004d3c <HAL_GetTick>
 8008140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008142:	e00a      	b.n	800815a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008144:	f7fc fdfa 	bl	8004d3c <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008152:	4293      	cmp	r3, r2
 8008154:	d901      	bls.n	800815a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e0cb      	b.n	80082f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800815a:	4b49      	ldr	r3, [pc, #292]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 800815c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815e:	f003 0302 	and.w	r3, r3, #2
 8008162:	2b00      	cmp	r3, #0
 8008164:	d0ee      	beq.n	8008144 <HAL_RCC_OscConfig+0x334>
 8008166:	e014      	b.n	8008192 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008168:	f7fc fde8 	bl	8004d3c <HAL_GetTick>
 800816c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800816e:	e00a      	b.n	8008186 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008170:	f7fc fde4 	bl	8004d3c <HAL_GetTick>
 8008174:	4602      	mov	r2, r0
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	f241 3288 	movw	r2, #5000	; 0x1388
 800817e:	4293      	cmp	r3, r2
 8008180:	d901      	bls.n	8008186 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e0b5      	b.n	80082f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008186:	4b3e      	ldr	r3, [pc, #248]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 8008188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800818a:	f003 0302 	and.w	r3, r3, #2
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1ee      	bne.n	8008170 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008192:	7dfb      	ldrb	r3, [r7, #23]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d105      	bne.n	80081a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008198:	4b39      	ldr	r3, [pc, #228]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 800819a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819c:	4a38      	ldr	r2, [pc, #224]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 800819e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 80a1 	beq.w	80082f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80081ae:	4b34      	ldr	r3, [pc, #208]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f003 030c 	and.w	r3, r3, #12
 80081b6:	2b08      	cmp	r3, #8
 80081b8:	d05c      	beq.n	8008274 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d141      	bne.n	8008246 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081c2:	4b31      	ldr	r3, [pc, #196]	; (8008288 <HAL_RCC_OscConfig+0x478>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081c8:	f7fc fdb8 	bl	8004d3c <HAL_GetTick>
 80081cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081ce:	e008      	b.n	80081e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081d0:	f7fc fdb4 	bl	8004d3c <HAL_GetTick>
 80081d4:	4602      	mov	r2, r0
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d901      	bls.n	80081e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e087      	b.n	80082f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081e2:	4b27      	ldr	r3, [pc, #156]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1f0      	bne.n	80081d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	69da      	ldr	r2, [r3, #28]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	431a      	orrs	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fc:	019b      	lsls	r3, r3, #6
 80081fe:	431a      	orrs	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008204:	085b      	lsrs	r3, r3, #1
 8008206:	3b01      	subs	r3, #1
 8008208:	041b      	lsls	r3, r3, #16
 800820a:	431a      	orrs	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008210:	061b      	lsls	r3, r3, #24
 8008212:	491b      	ldr	r1, [pc, #108]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 8008214:	4313      	orrs	r3, r2
 8008216:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008218:	4b1b      	ldr	r3, [pc, #108]	; (8008288 <HAL_RCC_OscConfig+0x478>)
 800821a:	2201      	movs	r2, #1
 800821c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800821e:	f7fc fd8d 	bl	8004d3c <HAL_GetTick>
 8008222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008224:	e008      	b.n	8008238 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008226:	f7fc fd89 	bl	8004d3c <HAL_GetTick>
 800822a:	4602      	mov	r2, r0
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	1ad3      	subs	r3, r2, r3
 8008230:	2b02      	cmp	r3, #2
 8008232:	d901      	bls.n	8008238 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008234:	2303      	movs	r3, #3
 8008236:	e05c      	b.n	80082f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008238:	4b11      	ldr	r3, [pc, #68]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d0f0      	beq.n	8008226 <HAL_RCC_OscConfig+0x416>
 8008244:	e054      	b.n	80082f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008246:	4b10      	ldr	r3, [pc, #64]	; (8008288 <HAL_RCC_OscConfig+0x478>)
 8008248:	2200      	movs	r2, #0
 800824a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800824c:	f7fc fd76 	bl	8004d3c <HAL_GetTick>
 8008250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008252:	e008      	b.n	8008266 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008254:	f7fc fd72 	bl	8004d3c <HAL_GetTick>
 8008258:	4602      	mov	r2, r0
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	2b02      	cmp	r3, #2
 8008260:	d901      	bls.n	8008266 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008262:	2303      	movs	r3, #3
 8008264:	e045      	b.n	80082f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008266:	4b06      	ldr	r3, [pc, #24]	; (8008280 <HAL_RCC_OscConfig+0x470>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1f0      	bne.n	8008254 <HAL_RCC_OscConfig+0x444>
 8008272:	e03d      	b.n	80082f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d107      	bne.n	800828c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e038      	b.n	80082f2 <HAL_RCC_OscConfig+0x4e2>
 8008280:	40023800 	.word	0x40023800
 8008284:	40007000 	.word	0x40007000
 8008288:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800828c:	4b1b      	ldr	r3, [pc, #108]	; (80082fc <HAL_RCC_OscConfig+0x4ec>)
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	2b01      	cmp	r3, #1
 8008298:	d028      	beq.n	80082ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d121      	bne.n	80082ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d11a      	bne.n	80082ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80082bc:	4013      	ands	r3, r2
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80082c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d111      	bne.n	80082ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d2:	085b      	lsrs	r3, r3, #1
 80082d4:	3b01      	subs	r3, #1
 80082d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80082d8:	429a      	cmp	r2, r3
 80082da:	d107      	bne.n	80082ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d001      	beq.n	80082f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e000      	b.n	80082f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3718      	adds	r7, #24
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	40023800 	.word	0x40023800

08008300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e0cc      	b.n	80084ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008314:	4b68      	ldr	r3, [pc, #416]	; (80084b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0307 	and.w	r3, r3, #7
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	429a      	cmp	r2, r3
 8008320:	d90c      	bls.n	800833c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008322:	4b65      	ldr	r3, [pc, #404]	; (80084b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008324:	683a      	ldr	r2, [r7, #0]
 8008326:	b2d2      	uxtb	r2, r2
 8008328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800832a:	4b63      	ldr	r3, [pc, #396]	; (80084b8 <HAL_RCC_ClockConfig+0x1b8>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 0307 	and.w	r3, r3, #7
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	429a      	cmp	r2, r3
 8008336:	d001      	beq.n	800833c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e0b8      	b.n	80084ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 0302 	and.w	r3, r3, #2
 8008344:	2b00      	cmp	r3, #0
 8008346:	d020      	beq.n	800838a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 0304 	and.w	r3, r3, #4
 8008350:	2b00      	cmp	r3, #0
 8008352:	d005      	beq.n	8008360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008354:	4b59      	ldr	r3, [pc, #356]	; (80084bc <HAL_RCC_ClockConfig+0x1bc>)
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	4a58      	ldr	r2, [pc, #352]	; (80084bc <HAL_RCC_ClockConfig+0x1bc>)
 800835a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800835e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0308 	and.w	r3, r3, #8
 8008368:	2b00      	cmp	r3, #0
 800836a:	d005      	beq.n	8008378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800836c:	4b53      	ldr	r3, [pc, #332]	; (80084bc <HAL_RCC_ClockConfig+0x1bc>)
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	4a52      	ldr	r2, [pc, #328]	; (80084bc <HAL_RCC_ClockConfig+0x1bc>)
 8008372:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008378:	4b50      	ldr	r3, [pc, #320]	; (80084bc <HAL_RCC_ClockConfig+0x1bc>)
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	494d      	ldr	r1, [pc, #308]	; (80084bc <HAL_RCC_ClockConfig+0x1bc>)
 8008386:	4313      	orrs	r3, r2
 8008388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	d044      	beq.n	8008420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d107      	bne.n	80083ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800839e:	4b47      	ldr	r3, [pc, #284]	; (80084bc <HAL_RCC_ClockConfig+0x1bc>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d119      	bne.n	80083de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e07f      	b.n	80084ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d003      	beq.n	80083be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083ba:	2b03      	cmp	r3, #3
 80083bc:	d107      	bne.n	80083ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083be:	4b3f      	ldr	r3, [pc, #252]	; (80084bc <HAL_RCC_ClockConfig+0x1bc>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d109      	bne.n	80083de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e06f      	b.n	80084ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083ce:	4b3b      	ldr	r3, [pc, #236]	; (80084bc <HAL_RCC_ClockConfig+0x1bc>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0302 	and.w	r3, r3, #2
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d101      	bne.n	80083de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e067      	b.n	80084ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80083de:	4b37      	ldr	r3, [pc, #220]	; (80084bc <HAL_RCC_ClockConfig+0x1bc>)
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f023 0203 	bic.w	r2, r3, #3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	4934      	ldr	r1, [pc, #208]	; (80084bc <HAL_RCC_ClockConfig+0x1bc>)
 80083ec:	4313      	orrs	r3, r2
 80083ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80083f0:	f7fc fca4 	bl	8004d3c <HAL_GetTick>
 80083f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083f6:	e00a      	b.n	800840e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083f8:	f7fc fca0 	bl	8004d3c <HAL_GetTick>
 80083fc:	4602      	mov	r2, r0
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	f241 3288 	movw	r2, #5000	; 0x1388
 8008406:	4293      	cmp	r3, r2
 8008408:	d901      	bls.n	800840e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e04f      	b.n	80084ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800840e:	4b2b      	ldr	r3, [pc, #172]	; (80084bc <HAL_RCC_ClockConfig+0x1bc>)
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	f003 020c 	and.w	r2, r3, #12
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	429a      	cmp	r2, r3
 800841e:	d1eb      	bne.n	80083f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008420:	4b25      	ldr	r3, [pc, #148]	; (80084b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0307 	and.w	r3, r3, #7
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	429a      	cmp	r2, r3
 800842c:	d20c      	bcs.n	8008448 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800842e:	4b22      	ldr	r3, [pc, #136]	; (80084b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	b2d2      	uxtb	r2, r2
 8008434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008436:	4b20      	ldr	r3, [pc, #128]	; (80084b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 0307 	and.w	r3, r3, #7
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	429a      	cmp	r2, r3
 8008442:	d001      	beq.n	8008448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e032      	b.n	80084ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0304 	and.w	r3, r3, #4
 8008450:	2b00      	cmp	r3, #0
 8008452:	d008      	beq.n	8008466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008454:	4b19      	ldr	r3, [pc, #100]	; (80084bc <HAL_RCC_ClockConfig+0x1bc>)
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	4916      	ldr	r1, [pc, #88]	; (80084bc <HAL_RCC_ClockConfig+0x1bc>)
 8008462:	4313      	orrs	r3, r2
 8008464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 0308 	and.w	r3, r3, #8
 800846e:	2b00      	cmp	r3, #0
 8008470:	d009      	beq.n	8008486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008472:	4b12      	ldr	r3, [pc, #72]	; (80084bc <HAL_RCC_ClockConfig+0x1bc>)
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	00db      	lsls	r3, r3, #3
 8008480:	490e      	ldr	r1, [pc, #56]	; (80084bc <HAL_RCC_ClockConfig+0x1bc>)
 8008482:	4313      	orrs	r3, r2
 8008484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008486:	f000 f821 	bl	80084cc <HAL_RCC_GetSysClockFreq>
 800848a:	4602      	mov	r2, r0
 800848c:	4b0b      	ldr	r3, [pc, #44]	; (80084bc <HAL_RCC_ClockConfig+0x1bc>)
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	091b      	lsrs	r3, r3, #4
 8008492:	f003 030f 	and.w	r3, r3, #15
 8008496:	490a      	ldr	r1, [pc, #40]	; (80084c0 <HAL_RCC_ClockConfig+0x1c0>)
 8008498:	5ccb      	ldrb	r3, [r1, r3]
 800849a:	fa22 f303 	lsr.w	r3, r2, r3
 800849e:	4a09      	ldr	r2, [pc, #36]	; (80084c4 <HAL_RCC_ClockConfig+0x1c4>)
 80084a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80084a2:	4b09      	ldr	r3, [pc, #36]	; (80084c8 <HAL_RCC_ClockConfig+0x1c8>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fb fcfe 	bl	8003ea8 <HAL_InitTick>

  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	40023c00 	.word	0x40023c00
 80084bc:	40023800 	.word	0x40023800
 80084c0:	0800e9c4 	.word	0x0800e9c4
 80084c4:	20000010 	.word	0x20000010
 80084c8:	20000014 	.word	0x20000014

080084cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084d0:	b090      	sub	sp, #64	; 0x40
 80084d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	637b      	str	r3, [r7, #52]	; 0x34
 80084d8:	2300      	movs	r3, #0
 80084da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084dc:	2300      	movs	r3, #0
 80084de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80084e0:	2300      	movs	r3, #0
 80084e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80084e4:	4b59      	ldr	r3, [pc, #356]	; (800864c <HAL_RCC_GetSysClockFreq+0x180>)
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f003 030c 	and.w	r3, r3, #12
 80084ec:	2b08      	cmp	r3, #8
 80084ee:	d00d      	beq.n	800850c <HAL_RCC_GetSysClockFreq+0x40>
 80084f0:	2b08      	cmp	r3, #8
 80084f2:	f200 80a1 	bhi.w	8008638 <HAL_RCC_GetSysClockFreq+0x16c>
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d002      	beq.n	8008500 <HAL_RCC_GetSysClockFreq+0x34>
 80084fa:	2b04      	cmp	r3, #4
 80084fc:	d003      	beq.n	8008506 <HAL_RCC_GetSysClockFreq+0x3a>
 80084fe:	e09b      	b.n	8008638 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008500:	4b53      	ldr	r3, [pc, #332]	; (8008650 <HAL_RCC_GetSysClockFreq+0x184>)
 8008502:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008504:	e09b      	b.n	800863e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008506:	4b53      	ldr	r3, [pc, #332]	; (8008654 <HAL_RCC_GetSysClockFreq+0x188>)
 8008508:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800850a:	e098      	b.n	800863e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800850c:	4b4f      	ldr	r3, [pc, #316]	; (800864c <HAL_RCC_GetSysClockFreq+0x180>)
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008514:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008516:	4b4d      	ldr	r3, [pc, #308]	; (800864c <HAL_RCC_GetSysClockFreq+0x180>)
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d028      	beq.n	8008574 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008522:	4b4a      	ldr	r3, [pc, #296]	; (800864c <HAL_RCC_GetSysClockFreq+0x180>)
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	099b      	lsrs	r3, r3, #6
 8008528:	2200      	movs	r2, #0
 800852a:	623b      	str	r3, [r7, #32]
 800852c:	627a      	str	r2, [r7, #36]	; 0x24
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008534:	2100      	movs	r1, #0
 8008536:	4b47      	ldr	r3, [pc, #284]	; (8008654 <HAL_RCC_GetSysClockFreq+0x188>)
 8008538:	fb03 f201 	mul.w	r2, r3, r1
 800853c:	2300      	movs	r3, #0
 800853e:	fb00 f303 	mul.w	r3, r0, r3
 8008542:	4413      	add	r3, r2
 8008544:	4a43      	ldr	r2, [pc, #268]	; (8008654 <HAL_RCC_GetSysClockFreq+0x188>)
 8008546:	fba0 1202 	umull	r1, r2, r0, r2
 800854a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800854c:	460a      	mov	r2, r1
 800854e:	62ba      	str	r2, [r7, #40]	; 0x28
 8008550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008552:	4413      	add	r3, r2
 8008554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008558:	2200      	movs	r2, #0
 800855a:	61bb      	str	r3, [r7, #24]
 800855c:	61fa      	str	r2, [r7, #28]
 800855e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008562:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008566:	f7f8 fb17 	bl	8000b98 <__aeabi_uldivmod>
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	4613      	mov	r3, r2
 8008570:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008572:	e053      	b.n	800861c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008574:	4b35      	ldr	r3, [pc, #212]	; (800864c <HAL_RCC_GetSysClockFreq+0x180>)
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	099b      	lsrs	r3, r3, #6
 800857a:	2200      	movs	r2, #0
 800857c:	613b      	str	r3, [r7, #16]
 800857e:	617a      	str	r2, [r7, #20]
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008586:	f04f 0b00 	mov.w	fp, #0
 800858a:	4652      	mov	r2, sl
 800858c:	465b      	mov	r3, fp
 800858e:	f04f 0000 	mov.w	r0, #0
 8008592:	f04f 0100 	mov.w	r1, #0
 8008596:	0159      	lsls	r1, r3, #5
 8008598:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800859c:	0150      	lsls	r0, r2, #5
 800859e:	4602      	mov	r2, r0
 80085a0:	460b      	mov	r3, r1
 80085a2:	ebb2 080a 	subs.w	r8, r2, sl
 80085a6:	eb63 090b 	sbc.w	r9, r3, fp
 80085aa:	f04f 0200 	mov.w	r2, #0
 80085ae:	f04f 0300 	mov.w	r3, #0
 80085b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80085b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80085ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80085be:	ebb2 0408 	subs.w	r4, r2, r8
 80085c2:	eb63 0509 	sbc.w	r5, r3, r9
 80085c6:	f04f 0200 	mov.w	r2, #0
 80085ca:	f04f 0300 	mov.w	r3, #0
 80085ce:	00eb      	lsls	r3, r5, #3
 80085d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085d4:	00e2      	lsls	r2, r4, #3
 80085d6:	4614      	mov	r4, r2
 80085d8:	461d      	mov	r5, r3
 80085da:	eb14 030a 	adds.w	r3, r4, sl
 80085de:	603b      	str	r3, [r7, #0]
 80085e0:	eb45 030b 	adc.w	r3, r5, fp
 80085e4:	607b      	str	r3, [r7, #4]
 80085e6:	f04f 0200 	mov.w	r2, #0
 80085ea:	f04f 0300 	mov.w	r3, #0
 80085ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80085f2:	4629      	mov	r1, r5
 80085f4:	028b      	lsls	r3, r1, #10
 80085f6:	4621      	mov	r1, r4
 80085f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80085fc:	4621      	mov	r1, r4
 80085fe:	028a      	lsls	r2, r1, #10
 8008600:	4610      	mov	r0, r2
 8008602:	4619      	mov	r1, r3
 8008604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008606:	2200      	movs	r2, #0
 8008608:	60bb      	str	r3, [r7, #8]
 800860a:	60fa      	str	r2, [r7, #12]
 800860c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008610:	f7f8 fac2 	bl	8000b98 <__aeabi_uldivmod>
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	4613      	mov	r3, r2
 800861a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800861c:	4b0b      	ldr	r3, [pc, #44]	; (800864c <HAL_RCC_GetSysClockFreq+0x180>)
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	0c1b      	lsrs	r3, r3, #16
 8008622:	f003 0303 	and.w	r3, r3, #3
 8008626:	3301      	adds	r3, #1
 8008628:	005b      	lsls	r3, r3, #1
 800862a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800862c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008630:	fbb2 f3f3 	udiv	r3, r2, r3
 8008634:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008636:	e002      	b.n	800863e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008638:	4b05      	ldr	r3, [pc, #20]	; (8008650 <HAL_RCC_GetSysClockFreq+0x184>)
 800863a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800863c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800863e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008640:	4618      	mov	r0, r3
 8008642:	3740      	adds	r7, #64	; 0x40
 8008644:	46bd      	mov	sp, r7
 8008646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800864a:	bf00      	nop
 800864c:	40023800 	.word	0x40023800
 8008650:	00f42400 	.word	0x00f42400
 8008654:	016e3600 	.word	0x016e3600

08008658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008658:	b480      	push	{r7}
 800865a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800865c:	4b03      	ldr	r3, [pc, #12]	; (800866c <HAL_RCC_GetHCLKFreq+0x14>)
 800865e:	681b      	ldr	r3, [r3, #0]
}
 8008660:	4618      	mov	r0, r3
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	20000010 	.word	0x20000010

08008670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008674:	f7ff fff0 	bl	8008658 <HAL_RCC_GetHCLKFreq>
 8008678:	4602      	mov	r2, r0
 800867a:	4b05      	ldr	r3, [pc, #20]	; (8008690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	0a9b      	lsrs	r3, r3, #10
 8008680:	f003 0307 	and.w	r3, r3, #7
 8008684:	4903      	ldr	r1, [pc, #12]	; (8008694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008686:	5ccb      	ldrb	r3, [r1, r3]
 8008688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800868c:	4618      	mov	r0, r3
 800868e:	bd80      	pop	{r7, pc}
 8008690:	40023800 	.word	0x40023800
 8008694:	0800e9d4 	.word	0x0800e9d4

08008698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800869c:	f7ff ffdc 	bl	8008658 <HAL_RCC_GetHCLKFreq>
 80086a0:	4602      	mov	r2, r0
 80086a2:	4b05      	ldr	r3, [pc, #20]	; (80086b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	0b5b      	lsrs	r3, r3, #13
 80086a8:	f003 0307 	and.w	r3, r3, #7
 80086ac:	4903      	ldr	r1, [pc, #12]	; (80086bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80086ae:	5ccb      	ldrb	r3, [r1, r3]
 80086b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	40023800 	.word	0x40023800
 80086bc:	0800e9d4 	.word	0x0800e9d4

080086c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	220f      	movs	r2, #15
 80086ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80086d0:	4b12      	ldr	r3, [pc, #72]	; (800871c <HAL_RCC_GetClockConfig+0x5c>)
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	f003 0203 	and.w	r2, r3, #3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80086dc:	4b0f      	ldr	r3, [pc, #60]	; (800871c <HAL_RCC_GetClockConfig+0x5c>)
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80086e8:	4b0c      	ldr	r3, [pc, #48]	; (800871c <HAL_RCC_GetClockConfig+0x5c>)
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80086f4:	4b09      	ldr	r3, [pc, #36]	; (800871c <HAL_RCC_GetClockConfig+0x5c>)
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	08db      	lsrs	r3, r3, #3
 80086fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008702:	4b07      	ldr	r3, [pc, #28]	; (8008720 <HAL_RCC_GetClockConfig+0x60>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 0207 	and.w	r2, r3, #7
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	601a      	str	r2, [r3, #0]
}
 800870e:	bf00      	nop
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	40023800 	.word	0x40023800
 8008720:	40023c00 	.word	0x40023c00

08008724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e041      	b.n	80087ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b00      	cmp	r3, #0
 8008740:	d106      	bne.n	8008750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7fb fff2 	bl	8004734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2202      	movs	r2, #2
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	3304      	adds	r3, #4
 8008760:	4619      	mov	r1, r3
 8008762:	4610      	mov	r0, r2
 8008764:	f000 f9ce 	bl	8008b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
	...

080087c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d001      	beq.n	80087dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e04e      	b.n	800887a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2202      	movs	r2, #2
 80087e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68da      	ldr	r2, [r3, #12]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f042 0201 	orr.w	r2, r2, #1
 80087f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a23      	ldr	r2, [pc, #140]	; (8008888 <HAL_TIM_Base_Start_IT+0xc4>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d022      	beq.n	8008844 <HAL_TIM_Base_Start_IT+0x80>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008806:	d01d      	beq.n	8008844 <HAL_TIM_Base_Start_IT+0x80>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a1f      	ldr	r2, [pc, #124]	; (800888c <HAL_TIM_Base_Start_IT+0xc8>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d018      	beq.n	8008844 <HAL_TIM_Base_Start_IT+0x80>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a1e      	ldr	r2, [pc, #120]	; (8008890 <HAL_TIM_Base_Start_IT+0xcc>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d013      	beq.n	8008844 <HAL_TIM_Base_Start_IT+0x80>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a1c      	ldr	r2, [pc, #112]	; (8008894 <HAL_TIM_Base_Start_IT+0xd0>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d00e      	beq.n	8008844 <HAL_TIM_Base_Start_IT+0x80>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a1b      	ldr	r2, [pc, #108]	; (8008898 <HAL_TIM_Base_Start_IT+0xd4>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d009      	beq.n	8008844 <HAL_TIM_Base_Start_IT+0x80>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a19      	ldr	r2, [pc, #100]	; (800889c <HAL_TIM_Base_Start_IT+0xd8>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d004      	beq.n	8008844 <HAL_TIM_Base_Start_IT+0x80>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a18      	ldr	r2, [pc, #96]	; (80088a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d111      	bne.n	8008868 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	f003 0307 	and.w	r3, r3, #7
 800884e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2b06      	cmp	r3, #6
 8008854:	d010      	beq.n	8008878 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f042 0201 	orr.w	r2, r2, #1
 8008864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008866:	e007      	b.n	8008878 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f042 0201 	orr.w	r2, r2, #1
 8008876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	40010000 	.word	0x40010000
 800888c:	40000400 	.word	0x40000400
 8008890:	40000800 	.word	0x40000800
 8008894:	40000c00 	.word	0x40000c00
 8008898:	40010400 	.word	0x40010400
 800889c:	40014000 	.word	0x40014000
 80088a0:	40001800 	.word	0x40001800

080088a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	f003 0302 	and.w	r3, r3, #2
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d122      	bne.n	8008900 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	f003 0302 	and.w	r3, r3, #2
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d11b      	bne.n	8008900 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f06f 0202 	mvn.w	r2, #2
 80088d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	f003 0303 	and.w	r3, r3, #3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d003      	beq.n	80088ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f8ee 	bl	8008ac8 <HAL_TIM_IC_CaptureCallback>
 80088ec:	e005      	b.n	80088fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f8e0 	bl	8008ab4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 f8f1 	bl	8008adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	f003 0304 	and.w	r3, r3, #4
 800890a:	2b04      	cmp	r3, #4
 800890c:	d122      	bne.n	8008954 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	f003 0304 	and.w	r3, r3, #4
 8008918:	2b04      	cmp	r3, #4
 800891a:	d11b      	bne.n	8008954 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f06f 0204 	mvn.w	r2, #4
 8008924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2202      	movs	r2, #2
 800892a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f8c4 	bl	8008ac8 <HAL_TIM_IC_CaptureCallback>
 8008940:	e005      	b.n	800894e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f8b6 	bl	8008ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 f8c7 	bl	8008adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	f003 0308 	and.w	r3, r3, #8
 800895e:	2b08      	cmp	r3, #8
 8008960:	d122      	bne.n	80089a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	f003 0308 	and.w	r3, r3, #8
 800896c:	2b08      	cmp	r3, #8
 800896e:	d11b      	bne.n	80089a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f06f 0208 	mvn.w	r2, #8
 8008978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2204      	movs	r2, #4
 800897e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	69db      	ldr	r3, [r3, #28]
 8008986:	f003 0303 	and.w	r3, r3, #3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f89a 	bl	8008ac8 <HAL_TIM_IC_CaptureCallback>
 8008994:	e005      	b.n	80089a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f88c 	bl	8008ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f89d 	bl	8008adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	f003 0310 	and.w	r3, r3, #16
 80089b2:	2b10      	cmp	r3, #16
 80089b4:	d122      	bne.n	80089fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	f003 0310 	and.w	r3, r3, #16
 80089c0:	2b10      	cmp	r3, #16
 80089c2:	d11b      	bne.n	80089fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f06f 0210 	mvn.w	r2, #16
 80089cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2208      	movs	r2, #8
 80089d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	69db      	ldr	r3, [r3, #28]
 80089da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d003      	beq.n	80089ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f870 	bl	8008ac8 <HAL_TIM_IC_CaptureCallback>
 80089e8:	e005      	b.n	80089f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f862 	bl	8008ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f873 	bl	8008adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d10e      	bne.n	8008a28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	f003 0301 	and.w	r3, r3, #1
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d107      	bne.n	8008a28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f06f 0201 	mvn.w	r2, #1
 8008a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f7fa fe70 	bl	8003708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a32:	2b80      	cmp	r3, #128	; 0x80
 8008a34:	d10e      	bne.n	8008a54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a40:	2b80      	cmp	r3, #128	; 0x80
 8008a42:	d107      	bne.n	8008a54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f97e 	bl	8008d50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a5e:	2b40      	cmp	r3, #64	; 0x40
 8008a60:	d10e      	bne.n	8008a80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a6c:	2b40      	cmp	r3, #64	; 0x40
 8008a6e:	d107      	bne.n	8008a80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f838 	bl	8008af0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	f003 0320 	and.w	r3, r3, #32
 8008a8a:	2b20      	cmp	r3, #32
 8008a8c:	d10e      	bne.n	8008aac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	f003 0320 	and.w	r3, r3, #32
 8008a98:	2b20      	cmp	r3, #32
 8008a9a:	d107      	bne.n	8008aac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f06f 0220 	mvn.w	r2, #32
 8008aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f948 	bl	8008d3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008aac:	bf00      	nop
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a40      	ldr	r2, [pc, #256]	; (8008c18 <TIM_Base_SetConfig+0x114>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d013      	beq.n	8008b44 <TIM_Base_SetConfig+0x40>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b22:	d00f      	beq.n	8008b44 <TIM_Base_SetConfig+0x40>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a3d      	ldr	r2, [pc, #244]	; (8008c1c <TIM_Base_SetConfig+0x118>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d00b      	beq.n	8008b44 <TIM_Base_SetConfig+0x40>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a3c      	ldr	r2, [pc, #240]	; (8008c20 <TIM_Base_SetConfig+0x11c>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d007      	beq.n	8008b44 <TIM_Base_SetConfig+0x40>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a3b      	ldr	r2, [pc, #236]	; (8008c24 <TIM_Base_SetConfig+0x120>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d003      	beq.n	8008b44 <TIM_Base_SetConfig+0x40>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a3a      	ldr	r2, [pc, #232]	; (8008c28 <TIM_Base_SetConfig+0x124>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d108      	bne.n	8008b56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a2f      	ldr	r2, [pc, #188]	; (8008c18 <TIM_Base_SetConfig+0x114>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d02b      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b64:	d027      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a2c      	ldr	r2, [pc, #176]	; (8008c1c <TIM_Base_SetConfig+0x118>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d023      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a2b      	ldr	r2, [pc, #172]	; (8008c20 <TIM_Base_SetConfig+0x11c>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d01f      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a2a      	ldr	r2, [pc, #168]	; (8008c24 <TIM_Base_SetConfig+0x120>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d01b      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a29      	ldr	r2, [pc, #164]	; (8008c28 <TIM_Base_SetConfig+0x124>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d017      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a28      	ldr	r2, [pc, #160]	; (8008c2c <TIM_Base_SetConfig+0x128>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d013      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a27      	ldr	r2, [pc, #156]	; (8008c30 <TIM_Base_SetConfig+0x12c>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d00f      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a26      	ldr	r2, [pc, #152]	; (8008c34 <TIM_Base_SetConfig+0x130>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d00b      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a25      	ldr	r2, [pc, #148]	; (8008c38 <TIM_Base_SetConfig+0x134>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d007      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a24      	ldr	r2, [pc, #144]	; (8008c3c <TIM_Base_SetConfig+0x138>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d003      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a23      	ldr	r2, [pc, #140]	; (8008c40 <TIM_Base_SetConfig+0x13c>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d108      	bne.n	8008bc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	695b      	ldr	r3, [r3, #20]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	689a      	ldr	r2, [r3, #8]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a0a      	ldr	r2, [pc, #40]	; (8008c18 <TIM_Base_SetConfig+0x114>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d003      	beq.n	8008bfc <TIM_Base_SetConfig+0xf8>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a0c      	ldr	r2, [pc, #48]	; (8008c28 <TIM_Base_SetConfig+0x124>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d103      	bne.n	8008c04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	691a      	ldr	r2, [r3, #16]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	615a      	str	r2, [r3, #20]
}
 8008c0a:	bf00      	nop
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	40010000 	.word	0x40010000
 8008c1c:	40000400 	.word	0x40000400
 8008c20:	40000800 	.word	0x40000800
 8008c24:	40000c00 	.word	0x40000c00
 8008c28:	40010400 	.word	0x40010400
 8008c2c:	40014000 	.word	0x40014000
 8008c30:	40014400 	.word	0x40014400
 8008c34:	40014800 	.word	0x40014800
 8008c38:	40001800 	.word	0x40001800
 8008c3c:	40001c00 	.word	0x40001c00
 8008c40:	40002000 	.word	0x40002000

08008c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d101      	bne.n	8008c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c58:	2302      	movs	r3, #2
 8008c5a:	e05a      	b.n	8008d12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2202      	movs	r2, #2
 8008c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a21      	ldr	r2, [pc, #132]	; (8008d20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d022      	beq.n	8008ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ca8:	d01d      	beq.n	8008ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a1d      	ldr	r2, [pc, #116]	; (8008d24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d018      	beq.n	8008ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a1b      	ldr	r2, [pc, #108]	; (8008d28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d013      	beq.n	8008ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a1a      	ldr	r2, [pc, #104]	; (8008d2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d00e      	beq.n	8008ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a18      	ldr	r2, [pc, #96]	; (8008d30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d009      	beq.n	8008ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a17      	ldr	r2, [pc, #92]	; (8008d34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d004      	beq.n	8008ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a15      	ldr	r2, [pc, #84]	; (8008d38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d10c      	bne.n	8008d00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	68ba      	ldr	r2, [r7, #8]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	40010000 	.word	0x40010000
 8008d24:	40000400 	.word	0x40000400
 8008d28:	40000800 	.word	0x40000800
 8008d2c:	40000c00 	.word	0x40000c00
 8008d30:	40010400 	.word	0x40010400
 8008d34:	40014000 	.word	0x40014000
 8008d38:	40001800 	.word	0x40001800

08008d3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d101      	bne.n	8008d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e03f      	b.n	8008df6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d106      	bne.n	8008d90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7fb fd72 	bl	8004874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2224      	movs	r2, #36	; 0x24
 8008d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68da      	ldr	r2, [r3, #12]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008da6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f001 f95d 	bl	800a068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	691a      	ldr	r2, [r3, #16]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008dbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	695a      	ldr	r2, [r3, #20]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008dcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68da      	ldr	r2, [r3, #12]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ddc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2220      	movs	r2, #32
 8008de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2220      	movs	r2, #32
 8008df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3708      	adds	r7, #8
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b085      	sub	sp, #20
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	60f8      	str	r0, [r7, #12]
 8008e06:	60b9      	str	r1, [r7, #8]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	2b20      	cmp	r3, #32
 8008e16:	d130      	bne.n	8008e7a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d002      	beq.n	8008e24 <HAL_UART_Transmit_IT+0x26>
 8008e1e:	88fb      	ldrh	r3, [r7, #6]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e029      	b.n	8008e7c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d101      	bne.n	8008e36 <HAL_UART_Transmit_IT+0x38>
 8008e32:	2302      	movs	r3, #2
 8008e34:	e022      	b.n	8008e7c <HAL_UART_Transmit_IT+0x7e>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	68ba      	ldr	r2, [r7, #8]
 8008e42:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	88fa      	ldrh	r2, [r7, #6]
 8008e48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	88fa      	ldrh	r2, [r7, #6]
 8008e4e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2221      	movs	r2, #33	; 0x21
 8008e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68da      	ldr	r2, [r3, #12]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008e74:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008e76:	2300      	movs	r3, #0
 8008e78:	e000      	b.n	8008e7c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008e7a:	2302      	movs	r3, #2
  }
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3714      	adds	r7, #20
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	4613      	mov	r3, r2
 8008e94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b20      	cmp	r3, #32
 8008ea0:	d11d      	bne.n	8008ede <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <HAL_UART_Receive_IT+0x26>
 8008ea8:	88fb      	ldrh	r3, [r7, #6]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d101      	bne.n	8008eb2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e016      	b.n	8008ee0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d101      	bne.n	8008ec0 <HAL_UART_Receive_IT+0x38>
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	e00f      	b.n	8008ee0 <HAL_UART_Receive_IT+0x58>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008ece:	88fb      	ldrh	r3, [r7, #6]
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	68b9      	ldr	r1, [r7, #8]
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f000 fdfa 	bl	8009ace <UART_Start_Receive_IT>
 8008eda:	4603      	mov	r3, r0
 8008edc:	e000      	b.n	8008ee0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008ede:	2302      	movs	r3, #2
  }
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b08c      	sub	sp, #48	; 0x30
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b20      	cmp	r3, #32
 8008f00:	d165      	bne.n	8008fce <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d002      	beq.n	8008f0e <HAL_UART_Transmit_DMA+0x26>
 8008f08:	88fb      	ldrh	r3, [r7, #6]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d101      	bne.n	8008f12 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e05e      	b.n	8008fd0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d101      	bne.n	8008f20 <HAL_UART_Transmit_DMA+0x38>
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	e057      	b.n	8008fd0 <HAL_UART_Transmit_DMA+0xe8>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	88fa      	ldrh	r2, [r7, #6]
 8008f32:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	88fa      	ldrh	r2, [r7, #6]
 8008f38:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2221      	movs	r2, #33	; 0x21
 8008f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4c:	4a22      	ldr	r2, [pc, #136]	; (8008fd8 <HAL_UART_Transmit_DMA+0xf0>)
 8008f4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f54:	4a21      	ldr	r2, [pc, #132]	; (8008fdc <HAL_UART_Transmit_DMA+0xf4>)
 8008f56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f5c:	4a20      	ldr	r2, [pc, #128]	; (8008fe0 <HAL_UART_Transmit_DMA+0xf8>)
 8008f5e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f64:	2200      	movs	r2, #0
 8008f66:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008f68:	f107 0308 	add.w	r3, r7, #8
 8008f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f74:	6819      	ldr	r1, [r3, #0]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3304      	adds	r3, #4
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	88fb      	ldrh	r3, [r7, #6]
 8008f80:	f7fc f998 	bl	80052b4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f8c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	3314      	adds	r3, #20
 8008f9c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	e853 3f00 	ldrex	r3, [r3]
 8008fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3314      	adds	r3, #20
 8008fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fb6:	627a      	str	r2, [r7, #36]	; 0x24
 8008fb8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fba:	6a39      	ldr	r1, [r7, #32]
 8008fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fbe:	e841 2300 	strex	r3, r2, [r1]
 8008fc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1e5      	bne.n	8008f96 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	e000      	b.n	8008fd0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008fce:	2302      	movs	r3, #2
  }
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3730      	adds	r7, #48	; 0x30
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	08009829 	.word	0x08009829
 8008fdc:	080098c3 	.word	0x080098c3
 8008fe0:	08009a3b 	.word	0x08009a3b

08008fe4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b20      	cmp	r3, #32
 8008ffc:	d11d      	bne.n	800903a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d002      	beq.n	800900a <HAL_UART_Receive_DMA+0x26>
 8009004:	88fb      	ldrh	r3, [r7, #6]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d101      	bne.n	800900e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e016      	b.n	800903c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009014:	2b01      	cmp	r3, #1
 8009016:	d101      	bne.n	800901c <HAL_UART_Receive_DMA+0x38>
 8009018:	2302      	movs	r3, #2
 800901a:	e00f      	b.n	800903c <HAL_UART_Receive_DMA+0x58>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800902a:	88fb      	ldrh	r3, [r7, #6]
 800902c:	461a      	mov	r2, r3
 800902e:	68b9      	ldr	r1, [r7, #8]
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 fd8b 	bl	8009b4c <UART_Start_Receive_DMA>
 8009036:	4603      	mov	r3, r0
 8009038:	e000      	b.n	800903c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800903a:	2302      	movs	r3, #2
  }
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b08e      	sub	sp, #56	; 0x38
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	330c      	adds	r3, #12
 8009052:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009054:	6a3b      	ldr	r3, [r7, #32]
 8009056:	e853 3f00 	ldrex	r3, [r3]
 800905a:	61fb      	str	r3, [r7, #28]
   return(result);
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009062:	637b      	str	r3, [r7, #52]	; 0x34
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	330c      	adds	r3, #12
 800906a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800906c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800906e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009070:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009074:	e841 2300 	strex	r3, r2, [r1]
 8009078:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1e5      	bne.n	800904c <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	695b      	ldr	r3, [r3, #20]
 8009086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800908a:	2b80      	cmp	r3, #128	; 0x80
 800908c:	d13c      	bne.n	8009108 <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	3314      	adds	r3, #20
 8009094:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	e853 3f00 	ldrex	r3, [r3]
 800909c:	60bb      	str	r3, [r7, #8]
   return(result);
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090a4:	633b      	str	r3, [r7, #48]	; 0x30
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	3314      	adds	r3, #20
 80090ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ae:	61ba      	str	r2, [r7, #24]
 80090b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b2:	6979      	ldr	r1, [r7, #20]
 80090b4:	69ba      	ldr	r2, [r7, #24]
 80090b6:	e841 2300 	strex	r3, r2, [r1]
 80090ba:	613b      	str	r3, [r7, #16]
   return(result);
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1e5      	bne.n	800908e <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d013      	beq.n	80090f2 <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ce:	4a16      	ldr	r2, [pc, #88]	; (8009128 <HAL_UART_AbortTransmit_IT+0xe4>)
 80090d0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fc f9b4 	bl	8005444 <HAL_DMA_Abort_IT>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d01c      	beq.n	800911c <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80090ec:	4610      	mov	r0, r2
 80090ee:	4798      	blx	r3
 80090f0:	e014      	b.n	800911c <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2220      	movs	r2, #32
 80090fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fb71 	bl	80097e8 <HAL_UART_AbortTransmitCpltCallback>
 8009106:	e009      	b.n	800911c <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2220      	movs	r2, #32
 8009112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fb66 	bl	80097e8 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3738      	adds	r7, #56	; 0x38
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	08009dc7 	.word	0x08009dc7

0800912c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b09a      	sub	sp, #104	; 0x68
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	330c      	adds	r3, #12
 800913a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800913e:	e853 3f00 	ldrex	r3, [r3]
 8009142:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009146:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800914a:	667b      	str	r3, [r7, #100]	; 0x64
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	330c      	adds	r3, #12
 8009152:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009154:	657a      	str	r2, [r7, #84]	; 0x54
 8009156:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009158:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800915a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800915c:	e841 2300 	strex	r3, r2, [r1]
 8009160:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1e5      	bne.n	8009134 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	3314      	adds	r3, #20
 800916e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009172:	e853 3f00 	ldrex	r3, [r3]
 8009176:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917a:	f023 0301 	bic.w	r3, r3, #1
 800917e:	663b      	str	r3, [r7, #96]	; 0x60
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	3314      	adds	r3, #20
 8009186:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009188:	643a      	str	r2, [r7, #64]	; 0x40
 800918a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800918e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009190:	e841 2300 	strex	r3, r2, [r1]
 8009194:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009198:	2b00      	cmp	r3, #0
 800919a:	d1e5      	bne.n	8009168 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d119      	bne.n	80091d8 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	330c      	adds	r3, #12
 80091aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ac:	6a3b      	ldr	r3, [r7, #32]
 80091ae:	e853 3f00 	ldrex	r3, [r3]
 80091b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	f023 0310 	bic.w	r3, r3, #16
 80091ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	330c      	adds	r3, #12
 80091c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80091c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091cc:	e841 2300 	strex	r3, r2, [r1]
 80091d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1e5      	bne.n	80091a4 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	695b      	ldr	r3, [r3, #20]
 80091de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091e2:	2b40      	cmp	r3, #64	; 0x40
 80091e4:	d13f      	bne.n	8009266 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3314      	adds	r3, #20
 80091ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	e853 3f00 	ldrex	r3, [r3]
 80091f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	3314      	adds	r3, #20
 8009204:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009206:	61ba      	str	r2, [r7, #24]
 8009208:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920a:	6979      	ldr	r1, [r7, #20]
 800920c:	69ba      	ldr	r2, [r7, #24]
 800920e:	e841 2300 	strex	r3, r2, [r1]
 8009212:	613b      	str	r3, [r7, #16]
   return(result);
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1e5      	bne.n	80091e6 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921e:	2b00      	cmp	r3, #0
 8009220:	d013      	beq.n	800924a <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009226:	4a19      	ldr	r2, [pc, #100]	; (800928c <HAL_UART_AbortReceive_IT+0x160>)
 8009228:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922e:	4618      	mov	r0, r3
 8009230:	f7fc f908 	bl	8005444 <HAL_DMA_Abort_IT>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d022      	beq.n	8009280 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009244:	4610      	mov	r0, r2
 8009246:	4798      	blx	r3
 8009248:	e01a      	b.n	8009280 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2220      	movs	r2, #32
 8009254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 facc 	bl	80097fc <HAL_UART_AbortReceiveCpltCallback>
 8009264:	e00c      	b.n	8009280 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2220      	movs	r2, #32
 8009270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 fabe 	bl	80097fc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3768      	adds	r7, #104	; 0x68
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	08009df1 	.word	0x08009df1

08009290 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b0ba      	sub	sp, #232	; 0xe8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	695b      	ldr	r3, [r3, #20]
 80092b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80092b6:	2300      	movs	r3, #0
 80092b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80092bc:	2300      	movs	r3, #0
 80092be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80092c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092c6:	f003 030f 	and.w	r3, r3, #15
 80092ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80092ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10f      	bne.n	80092f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80092d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092da:	f003 0320 	and.w	r3, r3, #32
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d009      	beq.n	80092f6 <HAL_UART_IRQHandler+0x66>
 80092e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092e6:	f003 0320 	and.w	r3, r3, #32
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fdfe 	bl	8009ef0 <UART_Receive_IT>
      return;
 80092f4:	e256      	b.n	80097a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80092f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f000 80de 	beq.w	80094bc <HAL_UART_IRQHandler+0x22c>
 8009300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009304:	f003 0301 	and.w	r3, r3, #1
 8009308:	2b00      	cmp	r3, #0
 800930a:	d106      	bne.n	800931a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800930c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009310:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 80d1 	beq.w	80094bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800931a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00b      	beq.n	800933e <HAL_UART_IRQHandler+0xae>
 8009326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800932a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800932e:	2b00      	cmp	r3, #0
 8009330:	d005      	beq.n	800933e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009336:	f043 0201 	orr.w	r2, r3, #1
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800933e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009342:	f003 0304 	and.w	r3, r3, #4
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00b      	beq.n	8009362 <HAL_UART_IRQHandler+0xd2>
 800934a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d005      	beq.n	8009362 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935a:	f043 0202 	orr.w	r2, r3, #2
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009366:	f003 0302 	and.w	r3, r3, #2
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00b      	beq.n	8009386 <HAL_UART_IRQHandler+0xf6>
 800936e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	2b00      	cmp	r3, #0
 8009378:	d005      	beq.n	8009386 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937e:	f043 0204 	orr.w	r2, r3, #4
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800938a:	f003 0308 	and.w	r3, r3, #8
 800938e:	2b00      	cmp	r3, #0
 8009390:	d011      	beq.n	80093b6 <HAL_UART_IRQHandler+0x126>
 8009392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009396:	f003 0320 	and.w	r3, r3, #32
 800939a:	2b00      	cmp	r3, #0
 800939c:	d105      	bne.n	80093aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800939e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d005      	beq.n	80093b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ae:	f043 0208 	orr.w	r2, r3, #8
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f000 81ed 	beq.w	800979a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80093c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093c4:	f003 0320 	and.w	r3, r3, #32
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d008      	beq.n	80093de <HAL_UART_IRQHandler+0x14e>
 80093cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093d0:	f003 0320 	and.w	r3, r3, #32
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 fd89 	bl	8009ef0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	695b      	ldr	r3, [r3, #20]
 80093e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e8:	2b40      	cmp	r3, #64	; 0x40
 80093ea:	bf0c      	ite	eq
 80093ec:	2301      	moveq	r3, #1
 80093ee:	2300      	movne	r3, #0
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fa:	f003 0308 	and.w	r3, r3, #8
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d103      	bne.n	800940a <HAL_UART_IRQHandler+0x17a>
 8009402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009406:	2b00      	cmp	r3, #0
 8009408:	d04f      	beq.n	80094aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fc64 	bl	8009cd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	695b      	ldr	r3, [r3, #20]
 8009416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941a:	2b40      	cmp	r3, #64	; 0x40
 800941c:	d141      	bne.n	80094a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3314      	adds	r3, #20
 8009424:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009428:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800942c:	e853 3f00 	ldrex	r3, [r3]
 8009430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009434:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800943c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3314      	adds	r3, #20
 8009446:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800944a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800944e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009452:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009456:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800945a:	e841 2300 	strex	r3, r2, [r1]
 800945e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1d9      	bne.n	800941e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946e:	2b00      	cmp	r3, #0
 8009470:	d013      	beq.n	800949a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009476:	4a7d      	ldr	r2, [pc, #500]	; (800966c <HAL_UART_IRQHandler+0x3dc>)
 8009478:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947e:	4618      	mov	r0, r3
 8009480:	f7fb ffe0 	bl	8005444 <HAL_DMA_Abort_IT>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d016      	beq.n	80094b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009494:	4610      	mov	r0, r2
 8009496:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009498:	e00e      	b.n	80094b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f99a 	bl	80097d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094a0:	e00a      	b.n	80094b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f996 	bl	80097d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094a8:	e006      	b.n	80094b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f992 	bl	80097d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80094b6:	e170      	b.n	800979a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094b8:	bf00      	nop
    return;
 80094ba:	e16e      	b.n	800979a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	f040 814a 	bne.w	800975a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80094c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ca:	f003 0310 	and.w	r3, r3, #16
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	f000 8143 	beq.w	800975a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80094d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094d8:	f003 0310 	and.w	r3, r3, #16
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f000 813c 	beq.w	800975a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094e2:	2300      	movs	r3, #0
 80094e4:	60bb      	str	r3, [r7, #8]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	60bb      	str	r3, [r7, #8]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	60bb      	str	r3, [r7, #8]
 80094f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	695b      	ldr	r3, [r3, #20]
 80094fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009502:	2b40      	cmp	r3, #64	; 0x40
 8009504:	f040 80b4 	bne.w	8009670 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009514:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009518:	2b00      	cmp	r3, #0
 800951a:	f000 8140 	beq.w	800979e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009522:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009526:	429a      	cmp	r2, r3
 8009528:	f080 8139 	bcs.w	800979e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009532:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009538:	69db      	ldr	r3, [r3, #28]
 800953a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800953e:	f000 8088 	beq.w	8009652 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	330c      	adds	r3, #12
 8009548:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009550:	e853 3f00 	ldrex	r3, [r3]
 8009554:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009558:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800955c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009560:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	330c      	adds	r3, #12
 800956a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800956e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009572:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009576:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800957a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800957e:	e841 2300 	strex	r3, r2, [r1]
 8009582:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1d9      	bne.n	8009542 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	3314      	adds	r3, #20
 8009594:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009598:	e853 3f00 	ldrex	r3, [r3]
 800959c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800959e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095a0:	f023 0301 	bic.w	r3, r3, #1
 80095a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	3314      	adds	r3, #20
 80095ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80095b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80095b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80095ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80095be:	e841 2300 	strex	r3, r2, [r1]
 80095c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80095c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1e1      	bne.n	800958e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	3314      	adds	r3, #20
 80095d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095d4:	e853 3f00 	ldrex	r3, [r3]
 80095d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80095da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3314      	adds	r3, #20
 80095ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80095ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80095f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80095f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80095f6:	e841 2300 	strex	r3, r2, [r1]
 80095fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80095fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1e3      	bne.n	80095ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2220      	movs	r2, #32
 8009606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	330c      	adds	r3, #12
 8009616:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800961a:	e853 3f00 	ldrex	r3, [r3]
 800961e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009622:	f023 0310 	bic.w	r3, r3, #16
 8009626:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	330c      	adds	r3, #12
 8009630:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009634:	65ba      	str	r2, [r7, #88]	; 0x58
 8009636:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009638:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800963a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800963c:	e841 2300 	strex	r3, r2, [r1]
 8009640:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1e3      	bne.n	8009610 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964c:	4618      	mov	r0, r3
 800964e:	f7fb fe89 	bl	8005364 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800965a:	b29b      	uxth	r3, r3
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	b29b      	uxth	r3, r3
 8009660:	4619      	mov	r1, r3
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 f8d4 	bl	8009810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009668:	e099      	b.n	800979e <HAL_UART_IRQHandler+0x50e>
 800966a:	bf00      	nop
 800966c:	08009d9f 	.word	0x08009d9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009678:	b29b      	uxth	r3, r3
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009684:	b29b      	uxth	r3, r3
 8009686:	2b00      	cmp	r3, #0
 8009688:	f000 808b 	beq.w	80097a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800968c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009690:	2b00      	cmp	r3, #0
 8009692:	f000 8086 	beq.w	80097a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	330c      	adds	r3, #12
 800969c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a0:	e853 3f00 	ldrex	r3, [r3]
 80096a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	330c      	adds	r3, #12
 80096b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80096ba:	647a      	str	r2, [r7, #68]	; 0x44
 80096bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096c2:	e841 2300 	strex	r3, r2, [r1]
 80096c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1e3      	bne.n	8009696 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3314      	adds	r3, #20
 80096d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d8:	e853 3f00 	ldrex	r3, [r3]
 80096dc:	623b      	str	r3, [r7, #32]
   return(result);
 80096de:	6a3b      	ldr	r3, [r7, #32]
 80096e0:	f023 0301 	bic.w	r3, r3, #1
 80096e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	3314      	adds	r3, #20
 80096ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80096f2:	633a      	str	r2, [r7, #48]	; 0x30
 80096f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096fa:	e841 2300 	strex	r3, r2, [r1]
 80096fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1e3      	bne.n	80096ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2220      	movs	r2, #32
 800970a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	330c      	adds	r3, #12
 800971a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	e853 3f00 	ldrex	r3, [r3]
 8009722:	60fb      	str	r3, [r7, #12]
   return(result);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f023 0310 	bic.w	r3, r3, #16
 800972a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	330c      	adds	r3, #12
 8009734:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009738:	61fa      	str	r2, [r7, #28]
 800973a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973c:	69b9      	ldr	r1, [r7, #24]
 800973e:	69fa      	ldr	r2, [r7, #28]
 8009740:	e841 2300 	strex	r3, r2, [r1]
 8009744:	617b      	str	r3, [r7, #20]
   return(result);
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1e3      	bne.n	8009714 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800974c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009750:	4619      	mov	r1, r3
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f85c 	bl	8009810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009758:	e023      	b.n	80097a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800975a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800975e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009762:	2b00      	cmp	r3, #0
 8009764:	d009      	beq.n	800977a <HAL_UART_IRQHandler+0x4ea>
 8009766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800976a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800976e:	2b00      	cmp	r3, #0
 8009770:	d003      	beq.n	800977a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fb54 	bl	8009e20 <UART_Transmit_IT>
    return;
 8009778:	e014      	b.n	80097a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800977a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800977e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00e      	beq.n	80097a4 <HAL_UART_IRQHandler+0x514>
 8009786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800978a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800978e:	2b00      	cmp	r3, #0
 8009790:	d008      	beq.n	80097a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 fb94 	bl	8009ec0 <UART_EndTransmit_IT>
    return;
 8009798:	e004      	b.n	80097a4 <HAL_UART_IRQHandler+0x514>
    return;
 800979a:	bf00      	nop
 800979c:	e002      	b.n	80097a4 <HAL_UART_IRQHandler+0x514>
      return;
 800979e:	bf00      	nop
 80097a0:	e000      	b.n	80097a4 <HAL_UART_IRQHandler+0x514>
      return;
 80097a2:	bf00      	nop
  }
}
 80097a4:	37e8      	adds	r7, #232	; 0xe8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop

080097ac <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80097b4:	bf00      	nop
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80097c8:	bf00      	nop
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80097dc:	bf00      	nop
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009804:	bf00      	nop
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b090      	sub	sp, #64	; 0x40
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009834:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009840:	2b00      	cmp	r3, #0
 8009842:	d137      	bne.n	80098b4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009846:	2200      	movs	r2, #0
 8009848:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800984a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3314      	adds	r3, #20
 8009850:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009854:	e853 3f00 	ldrex	r3, [r3]
 8009858:	623b      	str	r3, [r7, #32]
   return(result);
 800985a:	6a3b      	ldr	r3, [r7, #32]
 800985c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009860:	63bb      	str	r3, [r7, #56]	; 0x38
 8009862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	3314      	adds	r3, #20
 8009868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800986a:	633a      	str	r2, [r7, #48]	; 0x30
 800986c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009872:	e841 2300 	strex	r3, r2, [r1]
 8009876:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1e5      	bne.n	800984a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800987e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	330c      	adds	r3, #12
 8009884:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	e853 3f00 	ldrex	r3, [r3]
 800988c:	60fb      	str	r3, [r7, #12]
   return(result);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009894:	637b      	str	r3, [r7, #52]	; 0x34
 8009896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	330c      	adds	r3, #12
 800989c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800989e:	61fa      	str	r2, [r7, #28]
 80098a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a2:	69b9      	ldr	r1, [r7, #24]
 80098a4:	69fa      	ldr	r2, [r7, #28]
 80098a6:	e841 2300 	strex	r3, r2, [r1]
 80098aa:	617b      	str	r3, [r7, #20]
   return(result);
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1e5      	bne.n	800987e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80098b2:	e002      	b.n	80098ba <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80098b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80098b6:	f7f7 fe5f 	bl	8001578 <HAL_UART_TxCpltCallback>
}
 80098ba:	bf00      	nop
 80098bc:	3740      	adds	r7, #64	; 0x40
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b084      	sub	sp, #16
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f7ff ff6b 	bl	80097ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098d6:	bf00      	nop
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b09c      	sub	sp, #112	; 0x70
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d172      	bne.n	80099e0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80098fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098fc:	2200      	movs	r2, #0
 80098fe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	330c      	adds	r3, #12
 8009906:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800990a:	e853 3f00 	ldrex	r3, [r3]
 800990e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009912:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009916:	66bb      	str	r3, [r7, #104]	; 0x68
 8009918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	330c      	adds	r3, #12
 800991e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009920:	65ba      	str	r2, [r7, #88]	; 0x58
 8009922:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009924:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009926:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009928:	e841 2300 	strex	r3, r2, [r1]
 800992c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800992e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e5      	bne.n	8009900 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	3314      	adds	r3, #20
 800993a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993e:	e853 3f00 	ldrex	r3, [r3]
 8009942:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009946:	f023 0301 	bic.w	r3, r3, #1
 800994a:	667b      	str	r3, [r7, #100]	; 0x64
 800994c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	3314      	adds	r3, #20
 8009952:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009954:	647a      	str	r2, [r7, #68]	; 0x44
 8009956:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009958:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800995a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800995c:	e841 2300 	strex	r3, r2, [r1]
 8009960:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1e5      	bne.n	8009934 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	3314      	adds	r3, #20
 800996e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	e853 3f00 	ldrex	r3, [r3]
 8009976:	623b      	str	r3, [r7, #32]
   return(result);
 8009978:	6a3b      	ldr	r3, [r7, #32]
 800997a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800997e:	663b      	str	r3, [r7, #96]	; 0x60
 8009980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3314      	adds	r3, #20
 8009986:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009988:	633a      	str	r2, [r7, #48]	; 0x30
 800998a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800998e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009990:	e841 2300 	strex	r3, r2, [r1]
 8009994:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1e5      	bne.n	8009968 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800999c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800999e:	2220      	movs	r2, #32
 80099a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d119      	bne.n	80099e0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	330c      	adds	r3, #12
 80099b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	e853 3f00 	ldrex	r3, [r3]
 80099ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f023 0310 	bic.w	r3, r3, #16
 80099c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	330c      	adds	r3, #12
 80099ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80099cc:	61fa      	str	r2, [r7, #28]
 80099ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d0:	69b9      	ldr	r1, [r7, #24]
 80099d2:	69fa      	ldr	r2, [r7, #28]
 80099d4:	e841 2300 	strex	r3, r2, [r1]
 80099d8:	617b      	str	r3, [r7, #20]
   return(result);
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1e5      	bne.n	80099ac <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d106      	bne.n	80099f6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80099ec:	4619      	mov	r1, r3
 80099ee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80099f0:	f7ff ff0e 	bl	8009810 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80099f4:	e002      	b.n	80099fc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80099f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80099f8:	f7f7 fdf6 	bl	80015e8 <HAL_UART_RxCpltCallback>
}
 80099fc:	bf00      	nop
 80099fe:	3770      	adds	r7, #112	; 0x70
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a10:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d108      	bne.n	8009a2c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a1e:	085b      	lsrs	r3, r3, #1
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	4619      	mov	r1, r3
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f7ff fef3 	bl	8009810 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a2a:	e002      	b.n	8009a32 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f7ff fec7 	bl	80097c0 <HAL_UART_RxHalfCpltCallback>
}
 8009a32:	bf00      	nop
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b084      	sub	sp, #16
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009a42:	2300      	movs	r3, #0
 8009a44:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	695b      	ldr	r3, [r3, #20]
 8009a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a56:	2b80      	cmp	r3, #128	; 0x80
 8009a58:	bf0c      	ite	eq
 8009a5a:	2301      	moveq	r3, #1
 8009a5c:	2300      	movne	r3, #0
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b21      	cmp	r3, #33	; 0x21
 8009a6c:	d108      	bne.n	8009a80 <UART_DMAError+0x46>
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d005      	beq.n	8009a80 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	2200      	movs	r2, #0
 8009a78:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009a7a:	68b8      	ldr	r0, [r7, #8]
 8009a7c:	f000 f904 	bl	8009c88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	695b      	ldr	r3, [r3, #20]
 8009a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a8a:	2b40      	cmp	r3, #64	; 0x40
 8009a8c:	bf0c      	ite	eq
 8009a8e:	2301      	moveq	r3, #1
 8009a90:	2300      	movne	r3, #0
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	2b22      	cmp	r3, #34	; 0x22
 8009aa0:	d108      	bne.n	8009ab4 <UART_DMAError+0x7a>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d005      	beq.n	8009ab4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009aae:	68b8      	ldr	r0, [r7, #8]
 8009ab0:	f000 f912 	bl	8009cd8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab8:	f043 0210 	orr.w	r2, r3, #16
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ac0:	68b8      	ldr	r0, [r7, #8]
 8009ac2:	f7ff fe87 	bl	80097d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ac6:	bf00      	nop
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ace:	b480      	push	{r7}
 8009ad0:	b085      	sub	sp, #20
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	60f8      	str	r0, [r7, #12]
 8009ad6:	60b9      	str	r1, [r7, #8]
 8009ad8:	4613      	mov	r3, r2
 8009ada:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	88fa      	ldrh	r2, [r7, #6]
 8009ae6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	88fa      	ldrh	r2, [r7, #6]
 8009aec:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2222      	movs	r2, #34	; 0x22
 8009af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d007      	beq.n	8009b1c <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68da      	ldr	r2, [r3, #12]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b1a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	695a      	ldr	r2, [r3, #20]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f042 0201 	orr.w	r2, r2, #1
 8009b2a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68da      	ldr	r2, [r3, #12]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f042 0220 	orr.w	r2, r2, #32
 8009b3a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3714      	adds	r7, #20
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr
	...

08009b4c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b098      	sub	sp, #96	; 0x60
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	4613      	mov	r3, r2
 8009b58:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	88fa      	ldrh	r2, [r7, #6]
 8009b64:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2222      	movs	r2, #34	; 0x22
 8009b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b78:	4a40      	ldr	r2, [pc, #256]	; (8009c7c <UART_Start_Receive_DMA+0x130>)
 8009b7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b80:	4a3f      	ldr	r2, [pc, #252]	; (8009c80 <UART_Start_Receive_DMA+0x134>)
 8009b82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b88:	4a3e      	ldr	r2, [pc, #248]	; (8009c84 <UART_Start_Receive_DMA+0x138>)
 8009b8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b90:	2200      	movs	r2, #0
 8009b92:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009b94:	f107 0308 	add.w	r3, r7, #8
 8009b98:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	3304      	adds	r3, #4
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	88fb      	ldrh	r3, [r7, #6]
 8009bac:	f7fb fb82 	bl	80052b4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	613b      	str	r3, [r7, #16]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	613b      	str	r3, [r7, #16]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	613b      	str	r3, [r7, #16]
 8009bc4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d019      	beq.n	8009c0a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	330c      	adds	r3, #12
 8009bdc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009be0:	e853 3f00 	ldrex	r3, [r3]
 8009be4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bec:	65bb      	str	r3, [r7, #88]	; 0x58
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	330c      	adds	r3, #12
 8009bf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009bf6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009bf8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009bfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bfe:	e841 2300 	strex	r3, r2, [r1]
 8009c02:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1e5      	bne.n	8009bd6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	3314      	adds	r3, #20
 8009c10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c14:	e853 3f00 	ldrex	r3, [r3]
 8009c18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1c:	f043 0301 	orr.w	r3, r3, #1
 8009c20:	657b      	str	r3, [r7, #84]	; 0x54
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	3314      	adds	r3, #20
 8009c28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c2a:	63ba      	str	r2, [r7, #56]	; 0x38
 8009c2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c32:	e841 2300 	strex	r3, r2, [r1]
 8009c36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d1e5      	bne.n	8009c0a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	3314      	adds	r3, #20
 8009c44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	e853 3f00 	ldrex	r3, [r3]
 8009c4c:	617b      	str	r3, [r7, #20]
   return(result);
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c54:	653b      	str	r3, [r7, #80]	; 0x50
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	3314      	adds	r3, #20
 8009c5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c5e:	627a      	str	r2, [r7, #36]	; 0x24
 8009c60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c62:	6a39      	ldr	r1, [r7, #32]
 8009c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c66:	e841 2300 	strex	r3, r2, [r1]
 8009c6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1e5      	bne.n	8009c3e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3760      	adds	r7, #96	; 0x60
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	080098df 	.word	0x080098df
 8009c80:	08009a05 	.word	0x08009a05
 8009c84:	08009a3b 	.word	0x08009a3b

08009c88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b089      	sub	sp, #36	; 0x24
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	330c      	adds	r3, #12
 8009c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	e853 3f00 	ldrex	r3, [r3]
 8009c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009ca6:	61fb      	str	r3, [r7, #28]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	330c      	adds	r3, #12
 8009cae:	69fa      	ldr	r2, [r7, #28]
 8009cb0:	61ba      	str	r2, [r7, #24]
 8009cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb4:	6979      	ldr	r1, [r7, #20]
 8009cb6:	69ba      	ldr	r2, [r7, #24]
 8009cb8:	e841 2300 	strex	r3, r2, [r1]
 8009cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1e5      	bne.n	8009c90 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2220      	movs	r2, #32
 8009cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009ccc:	bf00      	nop
 8009cce:	3724      	adds	r7, #36	; 0x24
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b095      	sub	sp, #84	; 0x54
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	330c      	adds	r3, #12
 8009ce6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cea:	e853 3f00 	ldrex	r3, [r3]
 8009cee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	330c      	adds	r3, #12
 8009cfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d00:	643a      	str	r2, [r7, #64]	; 0x40
 8009d02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d08:	e841 2300 	strex	r3, r2, [r1]
 8009d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1e5      	bne.n	8009ce0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3314      	adds	r3, #20
 8009d1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1c:	6a3b      	ldr	r3, [r7, #32]
 8009d1e:	e853 3f00 	ldrex	r3, [r3]
 8009d22:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	f023 0301 	bic.w	r3, r3, #1
 8009d2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	3314      	adds	r3, #20
 8009d32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d3c:	e841 2300 	strex	r3, r2, [r1]
 8009d40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1e5      	bne.n	8009d14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d119      	bne.n	8009d84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	330c      	adds	r3, #12
 8009d56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	e853 3f00 	ldrex	r3, [r3]
 8009d5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	f023 0310 	bic.w	r3, r3, #16
 8009d66:	647b      	str	r3, [r7, #68]	; 0x44
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	330c      	adds	r3, #12
 8009d6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d70:	61ba      	str	r2, [r7, #24]
 8009d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d74:	6979      	ldr	r1, [r7, #20]
 8009d76:	69ba      	ldr	r2, [r7, #24]
 8009d78:	e841 2300 	strex	r3, r2, [r1]
 8009d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d1e5      	bne.n	8009d50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2220      	movs	r2, #32
 8009d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009d92:	bf00      	nop
 8009d94:	3754      	adds	r7, #84	; 0x54
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009daa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2200      	movs	r2, #0
 8009db0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2200      	movs	r2, #0
 8009db6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f7ff fd0b 	bl	80097d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dbe:	bf00      	nop
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b084      	sub	sp, #16
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd2:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2220      	movs	r2, #32
 8009dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f7ff fd00 	bl	80097e8 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009de8:	bf00      	nop
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dfc:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2220      	movs	r2, #32
 8009e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f7ff fcf2 	bl	80097fc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e18:	bf00      	nop
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	2b21      	cmp	r3, #33	; 0x21
 8009e32:	d13e      	bne.n	8009eb2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e3c:	d114      	bne.n	8009e68 <UART_Transmit_IT+0x48>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d110      	bne.n	8009e68 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	881b      	ldrh	r3, [r3, #0]
 8009e50:	461a      	mov	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e5a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a1b      	ldr	r3, [r3, #32]
 8009e60:	1c9a      	adds	r2, r3, #2
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	621a      	str	r2, [r3, #32]
 8009e66:	e008      	b.n	8009e7a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6a1b      	ldr	r3, [r3, #32]
 8009e6c:	1c59      	adds	r1, r3, #1
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	6211      	str	r1, [r2, #32]
 8009e72:	781a      	ldrb	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	3b01      	subs	r3, #1
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	4619      	mov	r1, r3
 8009e88:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10f      	bne.n	8009eae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68da      	ldr	r2, [r3, #12]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68da      	ldr	r2, [r3, #12]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009eac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	e000      	b.n	8009eb4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009eb2:	2302      	movs	r3, #2
  }
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68da      	ldr	r2, [r3, #12]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ed6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2220      	movs	r2, #32
 8009edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f7f7 fb49 	bl	8001578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b08c      	sub	sp, #48	; 0x30
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	2b22      	cmp	r3, #34	; 0x22
 8009f02:	f040 80ab 	bne.w	800a05c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f0e:	d117      	bne.n	8009f40 <UART_Receive_IT+0x50>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d113      	bne.n	8009f40 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f20:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f38:	1c9a      	adds	r2, r3, #2
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	629a      	str	r2, [r3, #40]	; 0x28
 8009f3e:	e026      	b.n	8009f8e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009f46:	2300      	movs	r3, #0
 8009f48:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f52:	d007      	beq.n	8009f64 <UART_Receive_IT+0x74>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d10a      	bne.n	8009f72 <UART_Receive_IT+0x82>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d106      	bne.n	8009f72 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	b2da      	uxtb	r2, r3
 8009f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6e:	701a      	strb	r2, [r3, #0]
 8009f70:	e008      	b.n	8009f84 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f82:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f88:	1c5a      	adds	r2, r3, #1
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	3b01      	subs	r3, #1
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d15a      	bne.n	800a058 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68da      	ldr	r2, [r3, #12]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f022 0220 	bic.w	r2, r2, #32
 8009fb0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	68da      	ldr	r2, [r3, #12]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009fc0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	695a      	ldr	r2, [r3, #20]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f022 0201 	bic.w	r2, r2, #1
 8009fd0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2220      	movs	r2, #32
 8009fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d135      	bne.n	800a04e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	330c      	adds	r3, #12
 8009fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	e853 3f00 	ldrex	r3, [r3]
 8009ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	f023 0310 	bic.w	r3, r3, #16
 8009ffe:	627b      	str	r3, [r7, #36]	; 0x24
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	330c      	adds	r3, #12
 800a006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a008:	623a      	str	r2, [r7, #32]
 800a00a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a00c:	69f9      	ldr	r1, [r7, #28]
 800a00e:	6a3a      	ldr	r2, [r7, #32]
 800a010:	e841 2300 	strex	r3, r2, [r1]
 800a014:	61bb      	str	r3, [r7, #24]
   return(result);
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d1e5      	bne.n	8009fe8 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f003 0310 	and.w	r3, r3, #16
 800a026:	2b10      	cmp	r3, #16
 800a028:	d10a      	bne.n	800a040 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a02a:	2300      	movs	r3, #0
 800a02c:	60fb      	str	r3, [r7, #12]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	60fb      	str	r3, [r7, #12]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	60fb      	str	r3, [r7, #12]
 800a03e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a044:	4619      	mov	r1, r3
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f7ff fbe2 	bl	8009810 <HAL_UARTEx_RxEventCallback>
 800a04c:	e002      	b.n	800a054 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7f7 faca 	bl	80015e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a054:	2300      	movs	r3, #0
 800a056:	e002      	b.n	800a05e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a058:	2300      	movs	r3, #0
 800a05a:	e000      	b.n	800a05e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a05c:	2302      	movs	r3, #2
  }
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3730      	adds	r7, #48	; 0x30
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
	...

0800a068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a06c:	b0c0      	sub	sp, #256	; 0x100
 800a06e:	af00      	add	r7, sp, #0
 800a070:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	691b      	ldr	r3, [r3, #16]
 800a07c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a084:	68d9      	ldr	r1, [r3, #12]
 800a086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	ea40 0301 	orr.w	r3, r0, r1
 800a090:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a096:	689a      	ldr	r2, [r3, #8]
 800a098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	431a      	orrs	r2, r3
 800a0a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0a4:	695b      	ldr	r3, [r3, #20]
 800a0a6:	431a      	orrs	r2, r3
 800a0a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0ac:	69db      	ldr	r3, [r3, #28]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a0b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a0c0:	f021 010c 	bic.w	r1, r1, #12
 800a0c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a0ce:	430b      	orrs	r3, r1
 800a0d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a0d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	695b      	ldr	r3, [r3, #20]
 800a0da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a0de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0e2:	6999      	ldr	r1, [r3, #24]
 800a0e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	ea40 0301 	orr.w	r3, r0, r1
 800a0ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a0f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	4b8f      	ldr	r3, [pc, #572]	; (800a334 <UART_SetConfig+0x2cc>)
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d005      	beq.n	800a108 <UART_SetConfig+0xa0>
 800a0fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	4b8d      	ldr	r3, [pc, #564]	; (800a338 <UART_SetConfig+0x2d0>)
 800a104:	429a      	cmp	r2, r3
 800a106:	d104      	bne.n	800a112 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a108:	f7fe fac6 	bl	8008698 <HAL_RCC_GetPCLK2Freq>
 800a10c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a110:	e003      	b.n	800a11a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a112:	f7fe faad 	bl	8008670 <HAL_RCC_GetPCLK1Freq>
 800a116:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a11a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a11e:	69db      	ldr	r3, [r3, #28]
 800a120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a124:	f040 810c 	bne.w	800a340 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a12c:	2200      	movs	r2, #0
 800a12e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a132:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a136:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a13a:	4622      	mov	r2, r4
 800a13c:	462b      	mov	r3, r5
 800a13e:	1891      	adds	r1, r2, r2
 800a140:	65b9      	str	r1, [r7, #88]	; 0x58
 800a142:	415b      	adcs	r3, r3
 800a144:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a146:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a14a:	4621      	mov	r1, r4
 800a14c:	eb12 0801 	adds.w	r8, r2, r1
 800a150:	4629      	mov	r1, r5
 800a152:	eb43 0901 	adc.w	r9, r3, r1
 800a156:	f04f 0200 	mov.w	r2, #0
 800a15a:	f04f 0300 	mov.w	r3, #0
 800a15e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a162:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a166:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a16a:	4690      	mov	r8, r2
 800a16c:	4699      	mov	r9, r3
 800a16e:	4623      	mov	r3, r4
 800a170:	eb18 0303 	adds.w	r3, r8, r3
 800a174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a178:	462b      	mov	r3, r5
 800a17a:	eb49 0303 	adc.w	r3, r9, r3
 800a17e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a18e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a192:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a196:	460b      	mov	r3, r1
 800a198:	18db      	adds	r3, r3, r3
 800a19a:	653b      	str	r3, [r7, #80]	; 0x50
 800a19c:	4613      	mov	r3, r2
 800a19e:	eb42 0303 	adc.w	r3, r2, r3
 800a1a2:	657b      	str	r3, [r7, #84]	; 0x54
 800a1a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a1a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a1ac:	f7f6 fcf4 	bl	8000b98 <__aeabi_uldivmod>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	4b61      	ldr	r3, [pc, #388]	; (800a33c <UART_SetConfig+0x2d4>)
 800a1b6:	fba3 2302 	umull	r2, r3, r3, r2
 800a1ba:	095b      	lsrs	r3, r3, #5
 800a1bc:	011c      	lsls	r4, r3, #4
 800a1be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a1c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a1cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a1d0:	4642      	mov	r2, r8
 800a1d2:	464b      	mov	r3, r9
 800a1d4:	1891      	adds	r1, r2, r2
 800a1d6:	64b9      	str	r1, [r7, #72]	; 0x48
 800a1d8:	415b      	adcs	r3, r3
 800a1da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a1e0:	4641      	mov	r1, r8
 800a1e2:	eb12 0a01 	adds.w	sl, r2, r1
 800a1e6:	4649      	mov	r1, r9
 800a1e8:	eb43 0b01 	adc.w	fp, r3, r1
 800a1ec:	f04f 0200 	mov.w	r2, #0
 800a1f0:	f04f 0300 	mov.w	r3, #0
 800a1f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a1f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a1fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a200:	4692      	mov	sl, r2
 800a202:	469b      	mov	fp, r3
 800a204:	4643      	mov	r3, r8
 800a206:	eb1a 0303 	adds.w	r3, sl, r3
 800a20a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a20e:	464b      	mov	r3, r9
 800a210:	eb4b 0303 	adc.w	r3, fp, r3
 800a214:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a224:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a228:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a22c:	460b      	mov	r3, r1
 800a22e:	18db      	adds	r3, r3, r3
 800a230:	643b      	str	r3, [r7, #64]	; 0x40
 800a232:	4613      	mov	r3, r2
 800a234:	eb42 0303 	adc.w	r3, r2, r3
 800a238:	647b      	str	r3, [r7, #68]	; 0x44
 800a23a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a23e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a242:	f7f6 fca9 	bl	8000b98 <__aeabi_uldivmod>
 800a246:	4602      	mov	r2, r0
 800a248:	460b      	mov	r3, r1
 800a24a:	4611      	mov	r1, r2
 800a24c:	4b3b      	ldr	r3, [pc, #236]	; (800a33c <UART_SetConfig+0x2d4>)
 800a24e:	fba3 2301 	umull	r2, r3, r3, r1
 800a252:	095b      	lsrs	r3, r3, #5
 800a254:	2264      	movs	r2, #100	; 0x64
 800a256:	fb02 f303 	mul.w	r3, r2, r3
 800a25a:	1acb      	subs	r3, r1, r3
 800a25c:	00db      	lsls	r3, r3, #3
 800a25e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a262:	4b36      	ldr	r3, [pc, #216]	; (800a33c <UART_SetConfig+0x2d4>)
 800a264:	fba3 2302 	umull	r2, r3, r3, r2
 800a268:	095b      	lsrs	r3, r3, #5
 800a26a:	005b      	lsls	r3, r3, #1
 800a26c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a270:	441c      	add	r4, r3
 800a272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a276:	2200      	movs	r2, #0
 800a278:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a27c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a280:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a284:	4642      	mov	r2, r8
 800a286:	464b      	mov	r3, r9
 800a288:	1891      	adds	r1, r2, r2
 800a28a:	63b9      	str	r1, [r7, #56]	; 0x38
 800a28c:	415b      	adcs	r3, r3
 800a28e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a294:	4641      	mov	r1, r8
 800a296:	1851      	adds	r1, r2, r1
 800a298:	6339      	str	r1, [r7, #48]	; 0x30
 800a29a:	4649      	mov	r1, r9
 800a29c:	414b      	adcs	r3, r1
 800a29e:	637b      	str	r3, [r7, #52]	; 0x34
 800a2a0:	f04f 0200 	mov.w	r2, #0
 800a2a4:	f04f 0300 	mov.w	r3, #0
 800a2a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a2ac:	4659      	mov	r1, fp
 800a2ae:	00cb      	lsls	r3, r1, #3
 800a2b0:	4651      	mov	r1, sl
 800a2b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2b6:	4651      	mov	r1, sl
 800a2b8:	00ca      	lsls	r2, r1, #3
 800a2ba:	4610      	mov	r0, r2
 800a2bc:	4619      	mov	r1, r3
 800a2be:	4603      	mov	r3, r0
 800a2c0:	4642      	mov	r2, r8
 800a2c2:	189b      	adds	r3, r3, r2
 800a2c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a2c8:	464b      	mov	r3, r9
 800a2ca:	460a      	mov	r2, r1
 800a2cc:	eb42 0303 	adc.w	r3, r2, r3
 800a2d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a2d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a2e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a2e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	18db      	adds	r3, r3, r3
 800a2ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	eb42 0303 	adc.w	r3, r2, r3
 800a2f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a2fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a2fe:	f7f6 fc4b 	bl	8000b98 <__aeabi_uldivmod>
 800a302:	4602      	mov	r2, r0
 800a304:	460b      	mov	r3, r1
 800a306:	4b0d      	ldr	r3, [pc, #52]	; (800a33c <UART_SetConfig+0x2d4>)
 800a308:	fba3 1302 	umull	r1, r3, r3, r2
 800a30c:	095b      	lsrs	r3, r3, #5
 800a30e:	2164      	movs	r1, #100	; 0x64
 800a310:	fb01 f303 	mul.w	r3, r1, r3
 800a314:	1ad3      	subs	r3, r2, r3
 800a316:	00db      	lsls	r3, r3, #3
 800a318:	3332      	adds	r3, #50	; 0x32
 800a31a:	4a08      	ldr	r2, [pc, #32]	; (800a33c <UART_SetConfig+0x2d4>)
 800a31c:	fba2 2303 	umull	r2, r3, r2, r3
 800a320:	095b      	lsrs	r3, r3, #5
 800a322:	f003 0207 	and.w	r2, r3, #7
 800a326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4422      	add	r2, r4
 800a32e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a330:	e105      	b.n	800a53e <UART_SetConfig+0x4d6>
 800a332:	bf00      	nop
 800a334:	40011000 	.word	0x40011000
 800a338:	40011400 	.word	0x40011400
 800a33c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a344:	2200      	movs	r2, #0
 800a346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a34a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a34e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a352:	4642      	mov	r2, r8
 800a354:	464b      	mov	r3, r9
 800a356:	1891      	adds	r1, r2, r2
 800a358:	6239      	str	r1, [r7, #32]
 800a35a:	415b      	adcs	r3, r3
 800a35c:	627b      	str	r3, [r7, #36]	; 0x24
 800a35e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a362:	4641      	mov	r1, r8
 800a364:	1854      	adds	r4, r2, r1
 800a366:	4649      	mov	r1, r9
 800a368:	eb43 0501 	adc.w	r5, r3, r1
 800a36c:	f04f 0200 	mov.w	r2, #0
 800a370:	f04f 0300 	mov.w	r3, #0
 800a374:	00eb      	lsls	r3, r5, #3
 800a376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a37a:	00e2      	lsls	r2, r4, #3
 800a37c:	4614      	mov	r4, r2
 800a37e:	461d      	mov	r5, r3
 800a380:	4643      	mov	r3, r8
 800a382:	18e3      	adds	r3, r4, r3
 800a384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a388:	464b      	mov	r3, r9
 800a38a:	eb45 0303 	adc.w	r3, r5, r3
 800a38e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a39e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a3a2:	f04f 0200 	mov.w	r2, #0
 800a3a6:	f04f 0300 	mov.w	r3, #0
 800a3aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a3ae:	4629      	mov	r1, r5
 800a3b0:	008b      	lsls	r3, r1, #2
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3b8:	4621      	mov	r1, r4
 800a3ba:	008a      	lsls	r2, r1, #2
 800a3bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a3c0:	f7f6 fbea 	bl	8000b98 <__aeabi_uldivmod>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	4b60      	ldr	r3, [pc, #384]	; (800a54c <UART_SetConfig+0x4e4>)
 800a3ca:	fba3 2302 	umull	r2, r3, r3, r2
 800a3ce:	095b      	lsrs	r3, r3, #5
 800a3d0:	011c      	lsls	r4, r3, #4
 800a3d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a3dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a3e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a3e4:	4642      	mov	r2, r8
 800a3e6:	464b      	mov	r3, r9
 800a3e8:	1891      	adds	r1, r2, r2
 800a3ea:	61b9      	str	r1, [r7, #24]
 800a3ec:	415b      	adcs	r3, r3
 800a3ee:	61fb      	str	r3, [r7, #28]
 800a3f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a3f4:	4641      	mov	r1, r8
 800a3f6:	1851      	adds	r1, r2, r1
 800a3f8:	6139      	str	r1, [r7, #16]
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	414b      	adcs	r3, r1
 800a3fe:	617b      	str	r3, [r7, #20]
 800a400:	f04f 0200 	mov.w	r2, #0
 800a404:	f04f 0300 	mov.w	r3, #0
 800a408:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a40c:	4659      	mov	r1, fp
 800a40e:	00cb      	lsls	r3, r1, #3
 800a410:	4651      	mov	r1, sl
 800a412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a416:	4651      	mov	r1, sl
 800a418:	00ca      	lsls	r2, r1, #3
 800a41a:	4610      	mov	r0, r2
 800a41c:	4619      	mov	r1, r3
 800a41e:	4603      	mov	r3, r0
 800a420:	4642      	mov	r2, r8
 800a422:	189b      	adds	r3, r3, r2
 800a424:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a428:	464b      	mov	r3, r9
 800a42a:	460a      	mov	r2, r1
 800a42c:	eb42 0303 	adc.w	r3, r2, r3
 800a430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a43e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a440:	f04f 0200 	mov.w	r2, #0
 800a444:	f04f 0300 	mov.w	r3, #0
 800a448:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a44c:	4649      	mov	r1, r9
 800a44e:	008b      	lsls	r3, r1, #2
 800a450:	4641      	mov	r1, r8
 800a452:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a456:	4641      	mov	r1, r8
 800a458:	008a      	lsls	r2, r1, #2
 800a45a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a45e:	f7f6 fb9b 	bl	8000b98 <__aeabi_uldivmod>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	4b39      	ldr	r3, [pc, #228]	; (800a54c <UART_SetConfig+0x4e4>)
 800a468:	fba3 1302 	umull	r1, r3, r3, r2
 800a46c:	095b      	lsrs	r3, r3, #5
 800a46e:	2164      	movs	r1, #100	; 0x64
 800a470:	fb01 f303 	mul.w	r3, r1, r3
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	011b      	lsls	r3, r3, #4
 800a478:	3332      	adds	r3, #50	; 0x32
 800a47a:	4a34      	ldr	r2, [pc, #208]	; (800a54c <UART_SetConfig+0x4e4>)
 800a47c:	fba2 2303 	umull	r2, r3, r2, r3
 800a480:	095b      	lsrs	r3, r3, #5
 800a482:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a486:	441c      	add	r4, r3
 800a488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a48c:	2200      	movs	r2, #0
 800a48e:	673b      	str	r3, [r7, #112]	; 0x70
 800a490:	677a      	str	r2, [r7, #116]	; 0x74
 800a492:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a496:	4642      	mov	r2, r8
 800a498:	464b      	mov	r3, r9
 800a49a:	1891      	adds	r1, r2, r2
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	415b      	adcs	r3, r3
 800a4a0:	60fb      	str	r3, [r7, #12]
 800a4a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a4a6:	4641      	mov	r1, r8
 800a4a8:	1851      	adds	r1, r2, r1
 800a4aa:	6039      	str	r1, [r7, #0]
 800a4ac:	4649      	mov	r1, r9
 800a4ae:	414b      	adcs	r3, r1
 800a4b0:	607b      	str	r3, [r7, #4]
 800a4b2:	f04f 0200 	mov.w	r2, #0
 800a4b6:	f04f 0300 	mov.w	r3, #0
 800a4ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a4be:	4659      	mov	r1, fp
 800a4c0:	00cb      	lsls	r3, r1, #3
 800a4c2:	4651      	mov	r1, sl
 800a4c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a4c8:	4651      	mov	r1, sl
 800a4ca:	00ca      	lsls	r2, r1, #3
 800a4cc:	4610      	mov	r0, r2
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	4642      	mov	r2, r8
 800a4d4:	189b      	adds	r3, r3, r2
 800a4d6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4d8:	464b      	mov	r3, r9
 800a4da:	460a      	mov	r2, r1
 800a4dc:	eb42 0303 	adc.w	r3, r2, r3
 800a4e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	663b      	str	r3, [r7, #96]	; 0x60
 800a4ec:	667a      	str	r2, [r7, #100]	; 0x64
 800a4ee:	f04f 0200 	mov.w	r2, #0
 800a4f2:	f04f 0300 	mov.w	r3, #0
 800a4f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a4fa:	4649      	mov	r1, r9
 800a4fc:	008b      	lsls	r3, r1, #2
 800a4fe:	4641      	mov	r1, r8
 800a500:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a504:	4641      	mov	r1, r8
 800a506:	008a      	lsls	r2, r1, #2
 800a508:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a50c:	f7f6 fb44 	bl	8000b98 <__aeabi_uldivmod>
 800a510:	4602      	mov	r2, r0
 800a512:	460b      	mov	r3, r1
 800a514:	4b0d      	ldr	r3, [pc, #52]	; (800a54c <UART_SetConfig+0x4e4>)
 800a516:	fba3 1302 	umull	r1, r3, r3, r2
 800a51a:	095b      	lsrs	r3, r3, #5
 800a51c:	2164      	movs	r1, #100	; 0x64
 800a51e:	fb01 f303 	mul.w	r3, r1, r3
 800a522:	1ad3      	subs	r3, r2, r3
 800a524:	011b      	lsls	r3, r3, #4
 800a526:	3332      	adds	r3, #50	; 0x32
 800a528:	4a08      	ldr	r2, [pc, #32]	; (800a54c <UART_SetConfig+0x4e4>)
 800a52a:	fba2 2303 	umull	r2, r3, r2, r3
 800a52e:	095b      	lsrs	r3, r3, #5
 800a530:	f003 020f 	and.w	r2, r3, #15
 800a534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4422      	add	r2, r4
 800a53c:	609a      	str	r2, [r3, #8]
}
 800a53e:	bf00      	nop
 800a540:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a544:	46bd      	mov	sp, r7
 800a546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a54a:	bf00      	nop
 800a54c:	51eb851f 	.word	0x51eb851f

0800a550 <__NVIC_SetPriority>:
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	4603      	mov	r3, r0
 800a558:	6039      	str	r1, [r7, #0]
 800a55a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a55c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a560:	2b00      	cmp	r3, #0
 800a562:	db0a      	blt.n	800a57a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	b2da      	uxtb	r2, r3
 800a568:	490c      	ldr	r1, [pc, #48]	; (800a59c <__NVIC_SetPriority+0x4c>)
 800a56a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a56e:	0112      	lsls	r2, r2, #4
 800a570:	b2d2      	uxtb	r2, r2
 800a572:	440b      	add	r3, r1
 800a574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a578:	e00a      	b.n	800a590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	b2da      	uxtb	r2, r3
 800a57e:	4908      	ldr	r1, [pc, #32]	; (800a5a0 <__NVIC_SetPriority+0x50>)
 800a580:	79fb      	ldrb	r3, [r7, #7]
 800a582:	f003 030f 	and.w	r3, r3, #15
 800a586:	3b04      	subs	r3, #4
 800a588:	0112      	lsls	r2, r2, #4
 800a58a:	b2d2      	uxtb	r2, r2
 800a58c:	440b      	add	r3, r1
 800a58e:	761a      	strb	r2, [r3, #24]
}
 800a590:	bf00      	nop
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr
 800a59c:	e000e100 	.word	0xe000e100
 800a5a0:	e000ed00 	.word	0xe000ed00

0800a5a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a5a8:	4b05      	ldr	r3, [pc, #20]	; (800a5c0 <SysTick_Handler+0x1c>)
 800a5aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a5ac:	f002 f8a6 	bl	800c6fc <xTaskGetSchedulerState>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d001      	beq.n	800a5ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a5b6:	f003 f847 	bl	800d648 <xPortSysTickHandler>
  }
}
 800a5ba:	bf00      	nop
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	e000e010 	.word	0xe000e010

0800a5c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	f06f 0004 	mvn.w	r0, #4
 800a5ce:	f7ff ffbf 	bl	800a550 <__NVIC_SetPriority>
#endif
}
 800a5d2:	bf00      	nop
 800a5d4:	bd80      	pop	{r7, pc}
	...

0800a5d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5de:	f3ef 8305 	mrs	r3, IPSR
 800a5e2:	603b      	str	r3, [r7, #0]
  return(result);
 800a5e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d003      	beq.n	800a5f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a5ea:	f06f 0305 	mvn.w	r3, #5
 800a5ee:	607b      	str	r3, [r7, #4]
 800a5f0:	e00c      	b.n	800a60c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a5f2:	4b0a      	ldr	r3, [pc, #40]	; (800a61c <osKernelInitialize+0x44>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d105      	bne.n	800a606 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a5fa:	4b08      	ldr	r3, [pc, #32]	; (800a61c <osKernelInitialize+0x44>)
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a600:	2300      	movs	r3, #0
 800a602:	607b      	str	r3, [r7, #4]
 800a604:	e002      	b.n	800a60c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a60a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a60c:	687b      	ldr	r3, [r7, #4]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	370c      	adds	r7, #12
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	20001fe4 	.word	0x20001fe4

0800a620 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a626:	f3ef 8305 	mrs	r3, IPSR
 800a62a:	603b      	str	r3, [r7, #0]
  return(result);
 800a62c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a632:	f06f 0305 	mvn.w	r3, #5
 800a636:	607b      	str	r3, [r7, #4]
 800a638:	e010      	b.n	800a65c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a63a:	4b0b      	ldr	r3, [pc, #44]	; (800a668 <osKernelStart+0x48>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d109      	bne.n	800a656 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a642:	f7ff ffbf 	bl	800a5c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a646:	4b08      	ldr	r3, [pc, #32]	; (800a668 <osKernelStart+0x48>)
 800a648:	2202      	movs	r2, #2
 800a64a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a64c:	f001 fbe8 	bl	800be20 <vTaskStartScheduler>
      stat = osOK;
 800a650:	2300      	movs	r3, #0
 800a652:	607b      	str	r3, [r7, #4]
 800a654:	e002      	b.n	800a65c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a65a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a65c:	687b      	ldr	r3, [r7, #4]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3708      	adds	r7, #8
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	20001fe4 	.word	0x20001fe4

0800a66c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b08e      	sub	sp, #56	; 0x38
 800a670:	af04      	add	r7, sp, #16
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a678:	2300      	movs	r3, #0
 800a67a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a67c:	f3ef 8305 	mrs	r3, IPSR
 800a680:	617b      	str	r3, [r7, #20]
  return(result);
 800a682:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a684:	2b00      	cmp	r3, #0
 800a686:	d17e      	bne.n	800a786 <osThreadNew+0x11a>
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d07b      	beq.n	800a786 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a68e:	2380      	movs	r3, #128	; 0x80
 800a690:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a692:	2318      	movs	r3, #24
 800a694:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a696:	2300      	movs	r3, #0
 800a698:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a69a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a69e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d045      	beq.n	800a732 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d002      	beq.n	800a6b4 <osThreadNew+0x48>
        name = attr->name;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	699b      	ldr	r3, [r3, #24]
 800a6c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d008      	beq.n	800a6da <osThreadNew+0x6e>
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	2b38      	cmp	r3, #56	; 0x38
 800a6cc:	d805      	bhi.n	800a6da <osThreadNew+0x6e>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	f003 0301 	and.w	r3, r3, #1
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d001      	beq.n	800a6de <osThreadNew+0x72>
        return (NULL);
 800a6da:	2300      	movs	r3, #0
 800a6dc:	e054      	b.n	800a788 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d003      	beq.n	800a6ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	695b      	ldr	r3, [r3, #20]
 800a6ea:	089b      	lsrs	r3, r3, #2
 800a6ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00e      	beq.n	800a714 <osThreadNew+0xa8>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	2bcb      	cmp	r3, #203	; 0xcb
 800a6fc:	d90a      	bls.n	800a714 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a702:	2b00      	cmp	r3, #0
 800a704:	d006      	beq.n	800a714 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	695b      	ldr	r3, [r3, #20]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d002      	beq.n	800a714 <osThreadNew+0xa8>
        mem = 1;
 800a70e:	2301      	movs	r3, #1
 800a710:	61bb      	str	r3, [r7, #24]
 800a712:	e010      	b.n	800a736 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10c      	bne.n	800a736 <osThreadNew+0xca>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d108      	bne.n	800a736 <osThreadNew+0xca>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d104      	bne.n	800a736 <osThreadNew+0xca>
          mem = 0;
 800a72c:	2300      	movs	r3, #0
 800a72e:	61bb      	str	r3, [r7, #24]
 800a730:	e001      	b.n	800a736 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a732:	2300      	movs	r3, #0
 800a734:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d110      	bne.n	800a75e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a744:	9202      	str	r2, [sp, #8]
 800a746:	9301      	str	r3, [sp, #4]
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	6a3a      	ldr	r2, [r7, #32]
 800a750:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f001 f8fa 	bl	800b94c <xTaskCreateStatic>
 800a758:	4603      	mov	r3, r0
 800a75a:	613b      	str	r3, [r7, #16]
 800a75c:	e013      	b.n	800a786 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a75e:	69bb      	ldr	r3, [r7, #24]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d110      	bne.n	800a786 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a764:	6a3b      	ldr	r3, [r7, #32]
 800a766:	b29a      	uxth	r2, r3
 800a768:	f107 0310 	add.w	r3, r7, #16
 800a76c:	9301      	str	r3, [sp, #4]
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f001 f945 	bl	800ba06 <xTaskCreate>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d001      	beq.n	800a786 <osThreadNew+0x11a>
            hTask = NULL;
 800a782:	2300      	movs	r3, #0
 800a784:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a786:	693b      	ldr	r3, [r7, #16]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3728      	adds	r7, #40	; 0x28
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a798:	f3ef 8305 	mrs	r3, IPSR
 800a79c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a79e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d003      	beq.n	800a7ac <osDelay+0x1c>
    stat = osErrorISR;
 800a7a4:	f06f 0305 	mvn.w	r3, #5
 800a7a8:	60fb      	str	r3, [r7, #12]
 800a7aa:	e007      	b.n	800a7bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d002      	beq.n	800a7bc <osDelay+0x2c>
      vTaskDelay(ticks);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f001 fafe 	bl	800bdb8 <vTaskDelay>
    }
  }

  return (stat);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b086      	sub	sp, #24
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7ce:	f3ef 8305 	mrs	r3, IPSR
 800a7d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d003      	beq.n	800a7e2 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800a7da:	f06f 0305 	mvn.w	r3, #5
 800a7de:	617b      	str	r3, [r7, #20]
 800a7e0:	e019      	b.n	800a816 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800a7e6:	f001 fc37 	bl	800c058 <xTaskGetTickCount>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d009      	beq.n	800a810 <osDelayUntil+0x4a>
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	db06      	blt.n	800a810 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800a802:	f107 0308 	add.w	r3, r7, #8
 800a806:	6939      	ldr	r1, [r7, #16]
 800a808:	4618      	mov	r0, r3
 800a80a:	f001 fa57 	bl	800bcbc <vTaskDelayUntil>
 800a80e:	e002      	b.n	800a816 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800a810:	f06f 0303 	mvn.w	r3, #3
 800a814:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a816:	697b      	ldr	r3, [r7, #20]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3718      	adds	r7, #24
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <TimerCallback>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f002 fd2d 	bl	800d288 <pvTimerGetTimerID>
 800a82e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d005      	beq.n	800a842 <TimerCallback+0x22>
    callb->func (callb->arg);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	6852      	ldr	r2, [r2, #4]
 800a83e:	4610      	mov	r0, r2
 800a840:	4798      	blx	r3
  }
}
 800a842:	bf00      	nop
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
	...

0800a84c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b08c      	sub	sp, #48	; 0x30
 800a850:	af02      	add	r7, sp, #8
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	607a      	str	r2, [r7, #4]
 800a856:	603b      	str	r3, [r7, #0]
 800a858:	460b      	mov	r3, r1
 800a85a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a85c:	2300      	movs	r3, #0
 800a85e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a860:	f3ef 8305 	mrs	r3, IPSR
 800a864:	613b      	str	r3, [r7, #16]
  return(result);
 800a866:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d163      	bne.n	800a934 <osTimerNew+0xe8>
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d060      	beq.n	800a934 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a872:	2008      	movs	r0, #8
 800a874:	f002 ff78 	bl	800d768 <pvPortMalloc>
 800a878:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d059      	beq.n	800a934 <osTimerNew+0xe8>
      callb->func = func;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a88c:	7afb      	ldrb	r3, [r7, #11]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d102      	bne.n	800a898 <osTimerNew+0x4c>
        reload = pdFALSE;
 800a892:	2300      	movs	r3, #0
 800a894:	61fb      	str	r3, [r7, #28]
 800a896:	e001      	b.n	800a89c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800a898:	2301      	movs	r3, #1
 800a89a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800a89c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8a0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d01c      	beq.n	800a8e6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d002      	beq.n	800a8ba <osTimerNew+0x6e>
          name = attr->name;
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d006      	beq.n	800a8d0 <osTimerNew+0x84>
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	2b2b      	cmp	r3, #43	; 0x2b
 800a8c8:	d902      	bls.n	800a8d0 <osTimerNew+0x84>
          mem = 1;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	61bb      	str	r3, [r7, #24]
 800a8ce:	e00c      	b.n	800a8ea <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d108      	bne.n	800a8ea <osTimerNew+0x9e>
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d104      	bne.n	800a8ea <osTimerNew+0x9e>
            mem = 0;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	61bb      	str	r3, [r7, #24]
 800a8e4:	e001      	b.n	800a8ea <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800a8ea:	69bb      	ldr	r3, [r7, #24]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d10c      	bne.n	800a90a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	9301      	str	r3, [sp, #4]
 800a8f6:	4b12      	ldr	r3, [pc, #72]	; (800a940 <osTimerNew+0xf4>)
 800a8f8:	9300      	str	r3, [sp, #0]
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	69fa      	ldr	r2, [r7, #28]
 800a8fe:	2101      	movs	r1, #1
 800a900:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a902:	f002 f942 	bl	800cb8a <xTimerCreateStatic>
 800a906:	6238      	str	r0, [r7, #32]
 800a908:	e00b      	b.n	800a922 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d108      	bne.n	800a922 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a910:	4b0b      	ldr	r3, [pc, #44]	; (800a940 <osTimerNew+0xf4>)
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	69fa      	ldr	r2, [r7, #28]
 800a918:	2101      	movs	r1, #1
 800a91a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a91c:	f002 f914 	bl	800cb48 <xTimerCreate>
 800a920:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800a922:	6a3b      	ldr	r3, [r7, #32]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d105      	bne.n	800a934 <osTimerNew+0xe8>
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d002      	beq.n	800a934 <osTimerNew+0xe8>
        vPortFree (callb);
 800a92e:	6978      	ldr	r0, [r7, #20]
 800a930:	f002 ffe6 	bl	800d900 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a934:	6a3b      	ldr	r3, [r7, #32]
}
 800a936:	4618      	mov	r0, r3
 800a938:	3728      	adds	r7, #40	; 0x28
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	0800a821 	.word	0x0800a821

0800a944 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a944:	b580      	push	{r7, lr}
 800a946:	b088      	sub	sp, #32
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a94c:	2300      	movs	r3, #0
 800a94e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a950:	f3ef 8305 	mrs	r3, IPSR
 800a954:	60bb      	str	r3, [r7, #8]
  return(result);
 800a956:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d174      	bne.n	800aa46 <osMutexNew+0x102>
    if (attr != NULL) {
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d003      	beq.n	800a96a <osMutexNew+0x26>
      type = attr->attr_bits;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	61bb      	str	r3, [r7, #24]
 800a968:	e001      	b.n	800a96e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800a96a:	2300      	movs	r3, #0
 800a96c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	f003 0301 	and.w	r3, r3, #1
 800a974:	2b00      	cmp	r3, #0
 800a976:	d002      	beq.n	800a97e <osMutexNew+0x3a>
      rmtx = 1U;
 800a978:	2301      	movs	r3, #1
 800a97a:	617b      	str	r3, [r7, #20]
 800a97c:	e001      	b.n	800a982 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800a97e:	2300      	movs	r3, #0
 800a980:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	f003 0308 	and.w	r3, r3, #8
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d15c      	bne.n	800aa46 <osMutexNew+0x102>
      mem = -1;
 800a98c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a990:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d015      	beq.n	800a9c4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d006      	beq.n	800a9ae <osMutexNew+0x6a>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	2b4f      	cmp	r3, #79	; 0x4f
 800a9a6:	d902      	bls.n	800a9ae <osMutexNew+0x6a>
          mem = 1;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	613b      	str	r3, [r7, #16]
 800a9ac:	e00c      	b.n	800a9c8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d108      	bne.n	800a9c8 <osMutexNew+0x84>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	68db      	ldr	r3, [r3, #12]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d104      	bne.n	800a9c8 <osMutexNew+0x84>
            mem = 0;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	613b      	str	r3, [r7, #16]
 800a9c2:	e001      	b.n	800a9c8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d112      	bne.n	800a9f4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d007      	beq.n	800a9e4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	4619      	mov	r1, r3
 800a9da:	2004      	movs	r0, #4
 800a9dc:	f000 fa8f 	bl	800aefe <xQueueCreateMutexStatic>
 800a9e0:	61f8      	str	r0, [r7, #28]
 800a9e2:	e016      	b.n	800aa12 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	2001      	movs	r0, #1
 800a9ec:	f000 fa87 	bl	800aefe <xQueueCreateMutexStatic>
 800a9f0:	61f8      	str	r0, [r7, #28]
 800a9f2:	e00e      	b.n	800aa12 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10b      	bne.n	800aa12 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d004      	beq.n	800aa0a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800aa00:	2004      	movs	r0, #4
 800aa02:	f000 fa64 	bl	800aece <xQueueCreateMutex>
 800aa06:	61f8      	str	r0, [r7, #28]
 800aa08:	e003      	b.n	800aa12 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800aa0a:	2001      	movs	r0, #1
 800aa0c:	f000 fa5f 	bl	800aece <xQueueCreateMutex>
 800aa10:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00c      	beq.n	800aa32 <osMutexNew+0xee>
        if (attr != NULL) {
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d003      	beq.n	800aa26 <osMutexNew+0xe2>
          name = attr->name;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	60fb      	str	r3, [r7, #12]
 800aa24:	e001      	b.n	800aa2a <osMutexNew+0xe6>
        } else {
          name = NULL;
 800aa26:	2300      	movs	r3, #0
 800aa28:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800aa2a:	68f9      	ldr	r1, [r7, #12]
 800aa2c:	69f8      	ldr	r0, [r7, #28]
 800aa2e:	f000 ff2f 	bl	800b890 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d006      	beq.n	800aa46 <osMutexNew+0x102>
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d003      	beq.n	800aa46 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	f043 0301 	orr.w	r3, r3, #1
 800aa44:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800aa46:	69fb      	ldr	r3, [r7, #28]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3720      	adds	r7, #32
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	4a07      	ldr	r2, [pc, #28]	; (800aa7c <vApplicationGetIdleTaskMemory+0x2c>)
 800aa60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	4a06      	ldr	r2, [pc, #24]	; (800aa80 <vApplicationGetIdleTaskMemory+0x30>)
 800aa66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2280      	movs	r2, #128	; 0x80
 800aa6c:	601a      	str	r2, [r3, #0]
}
 800aa6e:	bf00      	nop
 800aa70:	3714      	adds	r7, #20
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	20001fe8 	.word	0x20001fe8
 800aa80:	200020b4 	.word	0x200020b4

0800aa84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	4a07      	ldr	r2, [pc, #28]	; (800aab0 <vApplicationGetTimerTaskMemory+0x2c>)
 800aa94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	4a06      	ldr	r2, [pc, #24]	; (800aab4 <vApplicationGetTimerTaskMemory+0x30>)
 800aa9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aaa2:	601a      	str	r2, [r3, #0]
}
 800aaa4:	bf00      	nop
 800aaa6:	3714      	adds	r7, #20
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr
 800aab0:	200022b4 	.word	0x200022b4
 800aab4:	20002380 	.word	0x20002380

0800aab8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f103 0208 	add.w	r2, r3, #8
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aad0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f103 0208 	add.w	r2, r3, #8
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f103 0208 	add.w	r2, r3, #8
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab06:	bf00      	nop
 800ab08:	370c      	adds	r7, #12
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab12:	b480      	push	{r7}
 800ab14:	b085      	sub	sp, #20
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	689a      	ldr	r2, [r3, #8]
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	683a      	ldr	r2, [r7, #0]
 800ab36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	683a      	ldr	r2, [r7, #0]
 800ab3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	1c5a      	adds	r2, r3, #1
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	601a      	str	r2, [r3, #0]
}
 800ab4e:	bf00      	nop
 800ab50:	3714      	adds	r7, #20
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	b085      	sub	sp, #20
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab70:	d103      	bne.n	800ab7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	60fb      	str	r3, [r7, #12]
 800ab78:	e00c      	b.n	800ab94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	3308      	adds	r3, #8
 800ab7e:	60fb      	str	r3, [r7, #12]
 800ab80:	e002      	b.n	800ab88 <vListInsert+0x2e>
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	60fb      	str	r3, [r7, #12]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d2f6      	bcs.n	800ab82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	685a      	ldr	r2, [r3, #4]
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	683a      	ldr	r2, [r7, #0]
 800aba2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	683a      	ldr	r2, [r7, #0]
 800abae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	1c5a      	adds	r2, r3, #1
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	601a      	str	r2, [r3, #0]
}
 800abc0:	bf00      	nop
 800abc2:	3714      	adds	r7, #20
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	691b      	ldr	r3, [r3, #16]
 800abd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	6892      	ldr	r2, [r2, #8]
 800abe2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	6852      	ldr	r2, [r2, #4]
 800abec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d103      	bne.n	800ac00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	689a      	ldr	r2, [r3, #8]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	1e5a      	subs	r2, r3, #1
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3714      	adds	r7, #20
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d10a      	bne.n	800ac4a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ac34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac38:	f383 8811 	msr	BASEPRI, r3
 800ac3c:	f3bf 8f6f 	isb	sy
 800ac40:	f3bf 8f4f 	dsb	sy
 800ac44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ac46:	bf00      	nop
 800ac48:	e7fe      	b.n	800ac48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ac4a:	f002 fc6b 	bl	800d524 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac56:	68f9      	ldr	r1, [r7, #12]
 800ac58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac5a:	fb01 f303 	mul.w	r3, r1, r3
 800ac5e:	441a      	add	r2, r3
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2200      	movs	r2, #0
 800ac68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac7a:	3b01      	subs	r3, #1
 800ac7c:	68f9      	ldr	r1, [r7, #12]
 800ac7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac80:	fb01 f303 	mul.w	r3, r1, r3
 800ac84:	441a      	add	r2, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	22ff      	movs	r2, #255	; 0xff
 800ac8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	22ff      	movs	r2, #255	; 0xff
 800ac96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d114      	bne.n	800acca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d01a      	beq.n	800acde <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	3310      	adds	r3, #16
 800acac:	4618      	mov	r0, r3
 800acae:	f001 fb63 	bl	800c378 <xTaskRemoveFromEventList>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d012      	beq.n	800acde <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800acb8:	4b0c      	ldr	r3, [pc, #48]	; (800acec <xQueueGenericReset+0xcc>)
 800acba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acbe:	601a      	str	r2, [r3, #0]
 800acc0:	f3bf 8f4f 	dsb	sy
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	e009      	b.n	800acde <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	3310      	adds	r3, #16
 800acce:	4618      	mov	r0, r3
 800acd0:	f7ff fef2 	bl	800aab8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	3324      	adds	r3, #36	; 0x24
 800acd8:	4618      	mov	r0, r3
 800acda:	f7ff feed 	bl	800aab8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800acde:	f002 fc51 	bl	800d584 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ace2:	2301      	movs	r3, #1
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3710      	adds	r7, #16
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	e000ed04 	.word	0xe000ed04

0800acf0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b08e      	sub	sp, #56	; 0x38
 800acf4:	af02      	add	r7, sp, #8
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	607a      	str	r2, [r7, #4]
 800acfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d10a      	bne.n	800ad1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ad04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad08:	f383 8811 	msr	BASEPRI, r3
 800ad0c:	f3bf 8f6f 	isb	sy
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad16:	bf00      	nop
 800ad18:	e7fe      	b.n	800ad18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d10a      	bne.n	800ad36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ad20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad24:	f383 8811 	msr	BASEPRI, r3
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad32:	bf00      	nop
 800ad34:	e7fe      	b.n	800ad34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d002      	beq.n	800ad42 <xQueueGenericCreateStatic+0x52>
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <xQueueGenericCreateStatic+0x56>
 800ad42:	2301      	movs	r3, #1
 800ad44:	e000      	b.n	800ad48 <xQueueGenericCreateStatic+0x58>
 800ad46:	2300      	movs	r3, #0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d10a      	bne.n	800ad62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ad4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad50:	f383 8811 	msr	BASEPRI, r3
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	623b      	str	r3, [r7, #32]
}
 800ad5e:	bf00      	nop
 800ad60:	e7fe      	b.n	800ad60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d102      	bne.n	800ad6e <xQueueGenericCreateStatic+0x7e>
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d101      	bne.n	800ad72 <xQueueGenericCreateStatic+0x82>
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e000      	b.n	800ad74 <xQueueGenericCreateStatic+0x84>
 800ad72:	2300      	movs	r3, #0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10a      	bne.n	800ad8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ad78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7c:	f383 8811 	msr	BASEPRI, r3
 800ad80:	f3bf 8f6f 	isb	sy
 800ad84:	f3bf 8f4f 	dsb	sy
 800ad88:	61fb      	str	r3, [r7, #28]
}
 800ad8a:	bf00      	nop
 800ad8c:	e7fe      	b.n	800ad8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ad8e:	2350      	movs	r3, #80	; 0x50
 800ad90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	2b50      	cmp	r3, #80	; 0x50
 800ad96:	d00a      	beq.n	800adae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ad98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9c:	f383 8811 	msr	BASEPRI, r3
 800ada0:	f3bf 8f6f 	isb	sy
 800ada4:	f3bf 8f4f 	dsb	sy
 800ada8:	61bb      	str	r3, [r7, #24]
}
 800adaa:	bf00      	nop
 800adac:	e7fe      	b.n	800adac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800adae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800adb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00d      	beq.n	800add6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800adba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adbc:	2201      	movs	r2, #1
 800adbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800adc2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800adc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc8:	9300      	str	r3, [sp, #0]
 800adca:	4613      	mov	r3, r2
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	68b9      	ldr	r1, [r7, #8]
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	f000 f83f 	bl	800ae54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800add6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800add8:	4618      	mov	r0, r3
 800adda:	3730      	adds	r7, #48	; 0x30
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b08a      	sub	sp, #40	; 0x28
 800ade4:	af02      	add	r7, sp, #8
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	4613      	mov	r3, r2
 800adec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d10a      	bne.n	800ae0a <xQueueGenericCreate+0x2a>
	__asm volatile
 800adf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf8:	f383 8811 	msr	BASEPRI, r3
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	613b      	str	r3, [r7, #16]
}
 800ae06:	bf00      	nop
 800ae08:	e7fe      	b.n	800ae08 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	68ba      	ldr	r2, [r7, #8]
 800ae0e:	fb02 f303 	mul.w	r3, r2, r3
 800ae12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ae14:	69fb      	ldr	r3, [r7, #28]
 800ae16:	3350      	adds	r3, #80	; 0x50
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f002 fca5 	bl	800d768 <pvPortMalloc>
 800ae1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d011      	beq.n	800ae4a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	3350      	adds	r3, #80	; 0x50
 800ae2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	2200      	movs	r2, #0
 800ae34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae38:	79fa      	ldrb	r2, [r7, #7]
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	9300      	str	r3, [sp, #0]
 800ae3e:	4613      	mov	r3, r2
 800ae40:	697a      	ldr	r2, [r7, #20]
 800ae42:	68b9      	ldr	r1, [r7, #8]
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f000 f805 	bl	800ae54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae4a:	69bb      	ldr	r3, [r7, #24]
	}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3720      	adds	r7, #32
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	607a      	str	r2, [r7, #4]
 800ae60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d103      	bne.n	800ae70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	69ba      	ldr	r2, [r7, #24]
 800ae6c:	601a      	str	r2, [r3, #0]
 800ae6e:	e002      	b.n	800ae76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	68ba      	ldr	r2, [r7, #8]
 800ae80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ae82:	2101      	movs	r1, #1
 800ae84:	69b8      	ldr	r0, [r7, #24]
 800ae86:	f7ff fecb 	bl	800ac20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ae8a:	69bb      	ldr	r3, [r7, #24]
 800ae8c:	78fa      	ldrb	r2, [r7, #3]
 800ae8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ae92:	bf00      	nop
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b082      	sub	sp, #8
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d00e      	beq.n	800aec6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800aeba:	2300      	movs	r3, #0
 800aebc:	2200      	movs	r2, #0
 800aebe:	2100      	movs	r1, #0
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 f837 	bl	800af34 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800aec6:	bf00      	nop
 800aec8:	3708      	adds	r7, #8
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b086      	sub	sp, #24
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	4603      	mov	r3, r0
 800aed6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800aed8:	2301      	movs	r3, #1
 800aeda:	617b      	str	r3, [r7, #20]
 800aedc:	2300      	movs	r3, #0
 800aede:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800aee0:	79fb      	ldrb	r3, [r7, #7]
 800aee2:	461a      	mov	r2, r3
 800aee4:	6939      	ldr	r1, [r7, #16]
 800aee6:	6978      	ldr	r0, [r7, #20]
 800aee8:	f7ff ff7a 	bl	800ade0 <xQueueGenericCreate>
 800aeec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f7ff ffd3 	bl	800ae9a <prvInitialiseMutex>

		return xNewQueue;
 800aef4:	68fb      	ldr	r3, [r7, #12]
	}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3718      	adds	r7, #24
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b088      	sub	sp, #32
 800af02:	af02      	add	r7, sp, #8
 800af04:	4603      	mov	r3, r0
 800af06:	6039      	str	r1, [r7, #0]
 800af08:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800af0a:	2301      	movs	r3, #1
 800af0c:	617b      	str	r3, [r7, #20]
 800af0e:	2300      	movs	r3, #0
 800af10:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800af12:	79fb      	ldrb	r3, [r7, #7]
 800af14:	9300      	str	r3, [sp, #0]
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	2200      	movs	r2, #0
 800af1a:	6939      	ldr	r1, [r7, #16]
 800af1c:	6978      	ldr	r0, [r7, #20]
 800af1e:	f7ff fee7 	bl	800acf0 <xQueueGenericCreateStatic>
 800af22:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f7ff ffb8 	bl	800ae9a <prvInitialiseMutex>

		return xNewQueue;
 800af2a:	68fb      	ldr	r3, [r7, #12]
	}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3718      	adds	r7, #24
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b08e      	sub	sp, #56	; 0x38
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
 800af40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800af42:	2300      	movs	r3, #0
 800af44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d10a      	bne.n	800af66 <xQueueGenericSend+0x32>
	__asm volatile
 800af50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af54:	f383 8811 	msr	BASEPRI, r3
 800af58:	f3bf 8f6f 	isb	sy
 800af5c:	f3bf 8f4f 	dsb	sy
 800af60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af62:	bf00      	nop
 800af64:	e7fe      	b.n	800af64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d103      	bne.n	800af74 <xQueueGenericSend+0x40>
 800af6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af70:	2b00      	cmp	r3, #0
 800af72:	d101      	bne.n	800af78 <xQueueGenericSend+0x44>
 800af74:	2301      	movs	r3, #1
 800af76:	e000      	b.n	800af7a <xQueueGenericSend+0x46>
 800af78:	2300      	movs	r3, #0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d10a      	bne.n	800af94 <xQueueGenericSend+0x60>
	__asm volatile
 800af7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af82:	f383 8811 	msr	BASEPRI, r3
 800af86:	f3bf 8f6f 	isb	sy
 800af8a:	f3bf 8f4f 	dsb	sy
 800af8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af90:	bf00      	nop
 800af92:	e7fe      	b.n	800af92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	2b02      	cmp	r3, #2
 800af98:	d103      	bne.n	800afa2 <xQueueGenericSend+0x6e>
 800af9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d101      	bne.n	800afa6 <xQueueGenericSend+0x72>
 800afa2:	2301      	movs	r3, #1
 800afa4:	e000      	b.n	800afa8 <xQueueGenericSend+0x74>
 800afa6:	2300      	movs	r3, #0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d10a      	bne.n	800afc2 <xQueueGenericSend+0x8e>
	__asm volatile
 800afac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb0:	f383 8811 	msr	BASEPRI, r3
 800afb4:	f3bf 8f6f 	isb	sy
 800afb8:	f3bf 8f4f 	dsb	sy
 800afbc:	623b      	str	r3, [r7, #32]
}
 800afbe:	bf00      	nop
 800afc0:	e7fe      	b.n	800afc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800afc2:	f001 fb9b 	bl	800c6fc <xTaskGetSchedulerState>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d102      	bne.n	800afd2 <xQueueGenericSend+0x9e>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d101      	bne.n	800afd6 <xQueueGenericSend+0xa2>
 800afd2:	2301      	movs	r3, #1
 800afd4:	e000      	b.n	800afd8 <xQueueGenericSend+0xa4>
 800afd6:	2300      	movs	r3, #0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d10a      	bne.n	800aff2 <xQueueGenericSend+0xbe>
	__asm volatile
 800afdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe0:	f383 8811 	msr	BASEPRI, r3
 800afe4:	f3bf 8f6f 	isb	sy
 800afe8:	f3bf 8f4f 	dsb	sy
 800afec:	61fb      	str	r3, [r7, #28]
}
 800afee:	bf00      	nop
 800aff0:	e7fe      	b.n	800aff0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aff2:	f002 fa97 	bl	800d524 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800affa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800affe:	429a      	cmp	r2, r3
 800b000:	d302      	bcc.n	800b008 <xQueueGenericSend+0xd4>
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	2b02      	cmp	r3, #2
 800b006:	d129      	bne.n	800b05c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b008:	683a      	ldr	r2, [r7, #0]
 800b00a:	68b9      	ldr	r1, [r7, #8]
 800b00c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b00e:	f000 fb2f 	bl	800b670 <prvCopyDataToQueue>
 800b012:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d010      	beq.n	800b03e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01e:	3324      	adds	r3, #36	; 0x24
 800b020:	4618      	mov	r0, r3
 800b022:	f001 f9a9 	bl	800c378 <xTaskRemoveFromEventList>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d013      	beq.n	800b054 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b02c:	4b3f      	ldr	r3, [pc, #252]	; (800b12c <xQueueGenericSend+0x1f8>)
 800b02e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b032:	601a      	str	r2, [r3, #0]
 800b034:	f3bf 8f4f 	dsb	sy
 800b038:	f3bf 8f6f 	isb	sy
 800b03c:	e00a      	b.n	800b054 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b040:	2b00      	cmp	r3, #0
 800b042:	d007      	beq.n	800b054 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b044:	4b39      	ldr	r3, [pc, #228]	; (800b12c <xQueueGenericSend+0x1f8>)
 800b046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b04a:	601a      	str	r2, [r3, #0]
 800b04c:	f3bf 8f4f 	dsb	sy
 800b050:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b054:	f002 fa96 	bl	800d584 <vPortExitCritical>
				return pdPASS;
 800b058:	2301      	movs	r3, #1
 800b05a:	e063      	b.n	800b124 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d103      	bne.n	800b06a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b062:	f002 fa8f 	bl	800d584 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b066:	2300      	movs	r3, #0
 800b068:	e05c      	b.n	800b124 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b06a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d106      	bne.n	800b07e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b070:	f107 0314 	add.w	r3, r7, #20
 800b074:	4618      	mov	r0, r3
 800b076:	f001 f9e3 	bl	800c440 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b07a:	2301      	movs	r3, #1
 800b07c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b07e:	f002 fa81 	bl	800d584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b082:	f000 ff3d 	bl	800bf00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b086:	f002 fa4d 	bl	800d524 <vPortEnterCritical>
 800b08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b090:	b25b      	sxtb	r3, r3
 800b092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b096:	d103      	bne.n	800b0a0 <xQueueGenericSend+0x16c>
 800b098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09a:	2200      	movs	r2, #0
 800b09c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0a6:	b25b      	sxtb	r3, r3
 800b0a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0ac:	d103      	bne.n	800b0b6 <xQueueGenericSend+0x182>
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0b6:	f002 fa65 	bl	800d584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0ba:	1d3a      	adds	r2, r7, #4
 800b0bc:	f107 0314 	add.w	r3, r7, #20
 800b0c0:	4611      	mov	r1, r2
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f001 f9d2 	bl	800c46c <xTaskCheckForTimeOut>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d124      	bne.n	800b118 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b0ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0d0:	f000 fbc6 	bl	800b860 <prvIsQueueFull>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d018      	beq.n	800b10c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0dc:	3310      	adds	r3, #16
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	4611      	mov	r1, r2
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f001 f8f8 	bl	800c2d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b0e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0ea:	f000 fb51 	bl	800b790 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b0ee:	f000 ff15 	bl	800bf1c <xTaskResumeAll>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f47f af7c 	bne.w	800aff2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b0fa:	4b0c      	ldr	r3, [pc, #48]	; (800b12c <xQueueGenericSend+0x1f8>)
 800b0fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b100:	601a      	str	r2, [r3, #0]
 800b102:	f3bf 8f4f 	dsb	sy
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	e772      	b.n	800aff2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b10c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b10e:	f000 fb3f 	bl	800b790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b112:	f000 ff03 	bl	800bf1c <xTaskResumeAll>
 800b116:	e76c      	b.n	800aff2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b11a:	f000 fb39 	bl	800b790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b11e:	f000 fefd 	bl	800bf1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b122:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b124:	4618      	mov	r0, r3
 800b126:	3738      	adds	r7, #56	; 0x38
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	e000ed04 	.word	0xe000ed04

0800b130 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b090      	sub	sp, #64	; 0x40
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	607a      	str	r2, [r7, #4]
 800b13c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b144:	2b00      	cmp	r3, #0
 800b146:	d10a      	bne.n	800b15e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14c:	f383 8811 	msr	BASEPRI, r3
 800b150:	f3bf 8f6f 	isb	sy
 800b154:	f3bf 8f4f 	dsb	sy
 800b158:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b15a:	bf00      	nop
 800b15c:	e7fe      	b.n	800b15c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d103      	bne.n	800b16c <xQueueGenericSendFromISR+0x3c>
 800b164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d101      	bne.n	800b170 <xQueueGenericSendFromISR+0x40>
 800b16c:	2301      	movs	r3, #1
 800b16e:	e000      	b.n	800b172 <xQueueGenericSendFromISR+0x42>
 800b170:	2300      	movs	r3, #0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10a      	bne.n	800b18c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17a:	f383 8811 	msr	BASEPRI, r3
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	f3bf 8f4f 	dsb	sy
 800b186:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b188:	bf00      	nop
 800b18a:	e7fe      	b.n	800b18a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	2b02      	cmp	r3, #2
 800b190:	d103      	bne.n	800b19a <xQueueGenericSendFromISR+0x6a>
 800b192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b196:	2b01      	cmp	r3, #1
 800b198:	d101      	bne.n	800b19e <xQueueGenericSendFromISR+0x6e>
 800b19a:	2301      	movs	r3, #1
 800b19c:	e000      	b.n	800b1a0 <xQueueGenericSendFromISR+0x70>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10a      	bne.n	800b1ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a8:	f383 8811 	msr	BASEPRI, r3
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f3bf 8f4f 	dsb	sy
 800b1b4:	623b      	str	r3, [r7, #32]
}
 800b1b6:	bf00      	nop
 800b1b8:	e7fe      	b.n	800b1b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1ba:	f002 fa95 	bl	800d6e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b1be:	f3ef 8211 	mrs	r2, BASEPRI
 800b1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	61fa      	str	r2, [r7, #28]
 800b1d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b1d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b1d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d302      	bcc.n	800b1ec <xQueueGenericSendFromISR+0xbc>
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	d12f      	bne.n	800b24c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b1fc:	683a      	ldr	r2, [r7, #0]
 800b1fe:	68b9      	ldr	r1, [r7, #8]
 800b200:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b202:	f000 fa35 	bl	800b670 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b206:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b20a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b20e:	d112      	bne.n	800b236 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b214:	2b00      	cmp	r3, #0
 800b216:	d016      	beq.n	800b246 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21a:	3324      	adds	r3, #36	; 0x24
 800b21c:	4618      	mov	r0, r3
 800b21e:	f001 f8ab 	bl	800c378 <xTaskRemoveFromEventList>
 800b222:	4603      	mov	r3, r0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d00e      	beq.n	800b246 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00b      	beq.n	800b246 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2201      	movs	r2, #1
 800b232:	601a      	str	r2, [r3, #0]
 800b234:	e007      	b.n	800b246 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b236:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b23a:	3301      	adds	r3, #1
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	b25a      	sxtb	r2, r3
 800b240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b246:	2301      	movs	r3, #1
 800b248:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b24a:	e001      	b.n	800b250 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b24c:	2300      	movs	r3, #0
 800b24e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b252:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b25a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3740      	adds	r7, #64	; 0x40
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
	...

0800b268 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b08c      	sub	sp, #48	; 0x30
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b274:	2300      	movs	r3, #0
 800b276:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10a      	bne.n	800b298 <xQueueReceive+0x30>
	__asm volatile
 800b282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	623b      	str	r3, [r7, #32]
}
 800b294:	bf00      	nop
 800b296:	e7fe      	b.n	800b296 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d103      	bne.n	800b2a6 <xQueueReceive+0x3e>
 800b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d101      	bne.n	800b2aa <xQueueReceive+0x42>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e000      	b.n	800b2ac <xQueueReceive+0x44>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d10a      	bne.n	800b2c6 <xQueueReceive+0x5e>
	__asm volatile
 800b2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	61fb      	str	r3, [r7, #28]
}
 800b2c2:	bf00      	nop
 800b2c4:	e7fe      	b.n	800b2c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2c6:	f001 fa19 	bl	800c6fc <xTaskGetSchedulerState>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d102      	bne.n	800b2d6 <xQueueReceive+0x6e>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d101      	bne.n	800b2da <xQueueReceive+0x72>
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e000      	b.n	800b2dc <xQueueReceive+0x74>
 800b2da:	2300      	movs	r3, #0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d10a      	bne.n	800b2f6 <xQueueReceive+0x8e>
	__asm volatile
 800b2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e4:	f383 8811 	msr	BASEPRI, r3
 800b2e8:	f3bf 8f6f 	isb	sy
 800b2ec:	f3bf 8f4f 	dsb	sy
 800b2f0:	61bb      	str	r3, [r7, #24]
}
 800b2f2:	bf00      	nop
 800b2f4:	e7fe      	b.n	800b2f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2f6:	f002 f915 	bl	800d524 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b302:	2b00      	cmp	r3, #0
 800b304:	d01f      	beq.n	800b346 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b306:	68b9      	ldr	r1, [r7, #8]
 800b308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b30a:	f000 fa1b 	bl	800b744 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b310:	1e5a      	subs	r2, r3, #1
 800b312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b314:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b318:	691b      	ldr	r3, [r3, #16]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00f      	beq.n	800b33e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b320:	3310      	adds	r3, #16
 800b322:	4618      	mov	r0, r3
 800b324:	f001 f828 	bl	800c378 <xTaskRemoveFromEventList>
 800b328:	4603      	mov	r3, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d007      	beq.n	800b33e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b32e:	4b3d      	ldr	r3, [pc, #244]	; (800b424 <xQueueReceive+0x1bc>)
 800b330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b334:	601a      	str	r2, [r3, #0]
 800b336:	f3bf 8f4f 	dsb	sy
 800b33a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b33e:	f002 f921 	bl	800d584 <vPortExitCritical>
				return pdPASS;
 800b342:	2301      	movs	r3, #1
 800b344:	e069      	b.n	800b41a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d103      	bne.n	800b354 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b34c:	f002 f91a 	bl	800d584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b350:	2300      	movs	r3, #0
 800b352:	e062      	b.n	800b41a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b356:	2b00      	cmp	r3, #0
 800b358:	d106      	bne.n	800b368 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b35a:	f107 0310 	add.w	r3, r7, #16
 800b35e:	4618      	mov	r0, r3
 800b360:	f001 f86e 	bl	800c440 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b364:	2301      	movs	r3, #1
 800b366:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b368:	f002 f90c 	bl	800d584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b36c:	f000 fdc8 	bl	800bf00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b370:	f002 f8d8 	bl	800d524 <vPortEnterCritical>
 800b374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b376:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b37a:	b25b      	sxtb	r3, r3
 800b37c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b380:	d103      	bne.n	800b38a <xQueueReceive+0x122>
 800b382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b384:	2200      	movs	r2, #0
 800b386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b390:	b25b      	sxtb	r3, r3
 800b392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b396:	d103      	bne.n	800b3a0 <xQueueReceive+0x138>
 800b398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39a:	2200      	movs	r2, #0
 800b39c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3a0:	f002 f8f0 	bl	800d584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3a4:	1d3a      	adds	r2, r7, #4
 800b3a6:	f107 0310 	add.w	r3, r7, #16
 800b3aa:	4611      	mov	r1, r2
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f001 f85d 	bl	800c46c <xTaskCheckForTimeOut>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d123      	bne.n	800b400 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3ba:	f000 fa3b 	bl	800b834 <prvIsQueueEmpty>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d017      	beq.n	800b3f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c6:	3324      	adds	r3, #36	; 0x24
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	4611      	mov	r1, r2
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f000 ff83 	bl	800c2d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b3d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3d4:	f000 f9dc 	bl	800b790 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b3d8:	f000 fda0 	bl	800bf1c <xTaskResumeAll>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d189      	bne.n	800b2f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b3e2:	4b10      	ldr	r3, [pc, #64]	; (800b424 <xQueueReceive+0x1bc>)
 800b3e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3e8:	601a      	str	r2, [r3, #0]
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	f3bf 8f6f 	isb	sy
 800b3f2:	e780      	b.n	800b2f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b3f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3f6:	f000 f9cb 	bl	800b790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b3fa:	f000 fd8f 	bl	800bf1c <xTaskResumeAll>
 800b3fe:	e77a      	b.n	800b2f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b402:	f000 f9c5 	bl	800b790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b406:	f000 fd89 	bl	800bf1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b40a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b40c:	f000 fa12 	bl	800b834 <prvIsQueueEmpty>
 800b410:	4603      	mov	r3, r0
 800b412:	2b00      	cmp	r3, #0
 800b414:	f43f af6f 	beq.w	800b2f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b418:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3730      	adds	r7, #48	; 0x30
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	e000ed04 	.word	0xe000ed04

0800b428 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b08e      	sub	sp, #56	; 0x38
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b432:	2300      	movs	r3, #0
 800b434:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b43a:	2300      	movs	r3, #0
 800b43c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10a      	bne.n	800b45a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b448:	f383 8811 	msr	BASEPRI, r3
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	f3bf 8f4f 	dsb	sy
 800b454:	623b      	str	r3, [r7, #32]
}
 800b456:	bf00      	nop
 800b458:	e7fe      	b.n	800b458 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00a      	beq.n	800b478 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b466:	f383 8811 	msr	BASEPRI, r3
 800b46a:	f3bf 8f6f 	isb	sy
 800b46e:	f3bf 8f4f 	dsb	sy
 800b472:	61fb      	str	r3, [r7, #28]
}
 800b474:	bf00      	nop
 800b476:	e7fe      	b.n	800b476 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b478:	f001 f940 	bl	800c6fc <xTaskGetSchedulerState>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d102      	bne.n	800b488 <xQueueSemaphoreTake+0x60>
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d101      	bne.n	800b48c <xQueueSemaphoreTake+0x64>
 800b488:	2301      	movs	r3, #1
 800b48a:	e000      	b.n	800b48e <xQueueSemaphoreTake+0x66>
 800b48c:	2300      	movs	r3, #0
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d10a      	bne.n	800b4a8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b496:	f383 8811 	msr	BASEPRI, r3
 800b49a:	f3bf 8f6f 	isb	sy
 800b49e:	f3bf 8f4f 	dsb	sy
 800b4a2:	61bb      	str	r3, [r7, #24]
}
 800b4a4:	bf00      	nop
 800b4a6:	e7fe      	b.n	800b4a6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4a8:	f002 f83c 	bl	800d524 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d024      	beq.n	800b502 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ba:	1e5a      	subs	r2, r3, #1
 800b4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d104      	bne.n	800b4d2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b4c8:	f001 fa8e 	bl	800c9e8 <pvTaskIncrementMutexHeldCount>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d4:	691b      	ldr	r3, [r3, #16]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00f      	beq.n	800b4fa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4dc:	3310      	adds	r3, #16
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f000 ff4a 	bl	800c378 <xTaskRemoveFromEventList>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d007      	beq.n	800b4fa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b4ea:	4b54      	ldr	r3, [pc, #336]	; (800b63c <xQueueSemaphoreTake+0x214>)
 800b4ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4f0:	601a      	str	r2, [r3, #0]
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b4fa:	f002 f843 	bl	800d584 <vPortExitCritical>
				return pdPASS;
 800b4fe:	2301      	movs	r3, #1
 800b500:	e097      	b.n	800b632 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d111      	bne.n	800b52c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00a      	beq.n	800b524 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	617b      	str	r3, [r7, #20]
}
 800b520:	bf00      	nop
 800b522:	e7fe      	b.n	800b522 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b524:	f002 f82e 	bl	800d584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b528:	2300      	movs	r3, #0
 800b52a:	e082      	b.n	800b632 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b52c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d106      	bne.n	800b540 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b532:	f107 030c 	add.w	r3, r7, #12
 800b536:	4618      	mov	r0, r3
 800b538:	f000 ff82 	bl	800c440 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b53c:	2301      	movs	r3, #1
 800b53e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b540:	f002 f820 	bl	800d584 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b544:	f000 fcdc 	bl	800bf00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b548:	f001 ffec 	bl	800d524 <vPortEnterCritical>
 800b54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b552:	b25b      	sxtb	r3, r3
 800b554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b558:	d103      	bne.n	800b562 <xQueueSemaphoreTake+0x13a>
 800b55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55c:	2200      	movs	r2, #0
 800b55e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b568:	b25b      	sxtb	r3, r3
 800b56a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b56e:	d103      	bne.n	800b578 <xQueueSemaphoreTake+0x150>
 800b570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b572:	2200      	movs	r2, #0
 800b574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b578:	f002 f804 	bl	800d584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b57c:	463a      	mov	r2, r7
 800b57e:	f107 030c 	add.w	r3, r7, #12
 800b582:	4611      	mov	r1, r2
 800b584:	4618      	mov	r0, r3
 800b586:	f000 ff71 	bl	800c46c <xTaskCheckForTimeOut>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d132      	bne.n	800b5f6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b590:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b592:	f000 f94f 	bl	800b834 <prvIsQueueEmpty>
 800b596:	4603      	mov	r3, r0
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d026      	beq.n	800b5ea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d109      	bne.n	800b5b8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b5a4:	f001 ffbe 	bl	800d524 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f001 f8c3 	bl	800c738 <xTaskPriorityInherit>
 800b5b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b5b4:	f001 ffe6 	bl	800d584 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ba:	3324      	adds	r3, #36	; 0x24
 800b5bc:	683a      	ldr	r2, [r7, #0]
 800b5be:	4611      	mov	r1, r2
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f000 fe89 	bl	800c2d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b5c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5c8:	f000 f8e2 	bl	800b790 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b5cc:	f000 fca6 	bl	800bf1c <xTaskResumeAll>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f47f af68 	bne.w	800b4a8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b5d8:	4b18      	ldr	r3, [pc, #96]	; (800b63c <xQueueSemaphoreTake+0x214>)
 800b5da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5de:	601a      	str	r2, [r3, #0]
 800b5e0:	f3bf 8f4f 	dsb	sy
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	e75e      	b.n	800b4a8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b5ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5ec:	f000 f8d0 	bl	800b790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5f0:	f000 fc94 	bl	800bf1c <xTaskResumeAll>
 800b5f4:	e758      	b.n	800b4a8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b5f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5f8:	f000 f8ca 	bl	800b790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5fc:	f000 fc8e 	bl	800bf1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b600:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b602:	f000 f917 	bl	800b834 <prvIsQueueEmpty>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	f43f af4d 	beq.w	800b4a8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b610:	2b00      	cmp	r3, #0
 800b612:	d00d      	beq.n	800b630 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b614:	f001 ff86 	bl	800d524 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b618:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b61a:	f000 f811 	bl	800b640 <prvGetDisinheritPriorityAfterTimeout>
 800b61e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b626:	4618      	mov	r0, r3
 800b628:	f001 f95c 	bl	800c8e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b62c:	f001 ffaa 	bl	800d584 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b630:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b632:	4618      	mov	r0, r3
 800b634:	3738      	adds	r7, #56	; 0x38
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	e000ed04 	.word	0xe000ed04

0800b640 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b640:	b480      	push	{r7}
 800b642:	b085      	sub	sp, #20
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d006      	beq.n	800b65e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b65a:	60fb      	str	r3, [r7, #12]
 800b65c:	e001      	b.n	800b662 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b65e:	2300      	movs	r3, #0
 800b660:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b662:	68fb      	ldr	r3, [r7, #12]
	}
 800b664:	4618      	mov	r0, r3
 800b666:	3714      	adds	r7, #20
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af00      	add	r7, sp, #0
 800b676:	60f8      	str	r0, [r7, #12]
 800b678:	60b9      	str	r1, [r7, #8]
 800b67a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b67c:	2300      	movs	r3, #0
 800b67e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b684:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d10d      	bne.n	800b6aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d14d      	bne.n	800b732 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	4618      	mov	r0, r3
 800b69c:	f001 f8b4 	bl	800c808 <xTaskPriorityDisinherit>
 800b6a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	609a      	str	r2, [r3, #8]
 800b6a8:	e043      	b.n	800b732 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d119      	bne.n	800b6e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6858      	ldr	r0, [r3, #4]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	68b9      	ldr	r1, [r7, #8]
 800b6bc:	f002 fa6a 	bl	800db94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	685a      	ldr	r2, [r3, #4]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6c8:	441a      	add	r2, r3
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	685a      	ldr	r2, [r3, #4]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d32b      	bcc.n	800b732 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	605a      	str	r2, [r3, #4]
 800b6e2:	e026      	b.n	800b732 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	68d8      	ldr	r0, [r3, #12]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	68b9      	ldr	r1, [r7, #8]
 800b6f0:	f002 fa50 	bl	800db94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	68da      	ldr	r2, [r3, #12]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6fc:	425b      	negs	r3, r3
 800b6fe:	441a      	add	r2, r3
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	68da      	ldr	r2, [r3, #12]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d207      	bcs.n	800b720 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	689a      	ldr	r2, [r3, #8]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b718:	425b      	negs	r3, r3
 800b71a:	441a      	add	r2, r3
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2b02      	cmp	r3, #2
 800b724:	d105      	bne.n	800b732 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d002      	beq.n	800b732 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	3b01      	subs	r3, #1
 800b730:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	1c5a      	adds	r2, r3, #1
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b73a:	697b      	ldr	r3, [r7, #20]
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3718      	adds	r7, #24
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b752:	2b00      	cmp	r3, #0
 800b754:	d018      	beq.n	800b788 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	68da      	ldr	r2, [r3, #12]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b75e:	441a      	add	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	68da      	ldr	r2, [r3, #12]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d303      	bcc.n	800b778 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	68d9      	ldr	r1, [r3, #12]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b780:	461a      	mov	r2, r3
 800b782:	6838      	ldr	r0, [r7, #0]
 800b784:	f002 fa06 	bl	800db94 <memcpy>
	}
}
 800b788:	bf00      	nop
 800b78a:	3708      	adds	r7, #8
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b798:	f001 fec4 	bl	800d524 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b7a4:	e011      	b.n	800b7ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d012      	beq.n	800b7d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	3324      	adds	r3, #36	; 0x24
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f000 fde0 	bl	800c378 <xTaskRemoveFromEventList>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d001      	beq.n	800b7c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b7be:	f000 feb7 	bl	800c530 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b7c2:	7bfb      	ldrb	r3, [r7, #15]
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b7ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	dce9      	bgt.n	800b7a6 <prvUnlockQueue+0x16>
 800b7d2:	e000      	b.n	800b7d6 <prvUnlockQueue+0x46>
					break;
 800b7d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	22ff      	movs	r2, #255	; 0xff
 800b7da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b7de:	f001 fed1 	bl	800d584 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b7e2:	f001 fe9f 	bl	800d524 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b7ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b7ee:	e011      	b.n	800b814 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	691b      	ldr	r3, [r3, #16]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d012      	beq.n	800b81e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	3310      	adds	r3, #16
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f000 fdbb 	bl	800c378 <xTaskRemoveFromEventList>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d001      	beq.n	800b80c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b808:	f000 fe92 	bl	800c530 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b80c:	7bbb      	ldrb	r3, [r7, #14]
 800b80e:	3b01      	subs	r3, #1
 800b810:	b2db      	uxtb	r3, r3
 800b812:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b814:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	dce9      	bgt.n	800b7f0 <prvUnlockQueue+0x60>
 800b81c:	e000      	b.n	800b820 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b81e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	22ff      	movs	r2, #255	; 0xff
 800b824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b828:	f001 feac 	bl	800d584 <vPortExitCritical>
}
 800b82c:	bf00      	nop
 800b82e:	3710      	adds	r7, #16
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b83c:	f001 fe72 	bl	800d524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b844:	2b00      	cmp	r3, #0
 800b846:	d102      	bne.n	800b84e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b848:	2301      	movs	r3, #1
 800b84a:	60fb      	str	r3, [r7, #12]
 800b84c:	e001      	b.n	800b852 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b84e:	2300      	movs	r3, #0
 800b850:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b852:	f001 fe97 	bl	800d584 <vPortExitCritical>

	return xReturn;
 800b856:	68fb      	ldr	r3, [r7, #12]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b868:	f001 fe5c 	bl	800d524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b874:	429a      	cmp	r2, r3
 800b876:	d102      	bne.n	800b87e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b878:	2301      	movs	r3, #1
 800b87a:	60fb      	str	r3, [r7, #12]
 800b87c:	e001      	b.n	800b882 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b87e:	2300      	movs	r3, #0
 800b880:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b882:	f001 fe7f 	bl	800d584 <vPortExitCritical>

	return xReturn;
 800b886:	68fb      	ldr	r3, [r7, #12]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3710      	adds	r7, #16
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b890:	b480      	push	{r7}
 800b892:	b085      	sub	sp, #20
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b89a:	2300      	movs	r3, #0
 800b89c:	60fb      	str	r3, [r7, #12]
 800b89e:	e014      	b.n	800b8ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b8a0:	4a0f      	ldr	r2, [pc, #60]	; (800b8e0 <vQueueAddToRegistry+0x50>)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10b      	bne.n	800b8c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b8ac:	490c      	ldr	r1, [pc, #48]	; (800b8e0 <vQueueAddToRegistry+0x50>)
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	683a      	ldr	r2, [r7, #0]
 800b8b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b8b6:	4a0a      	ldr	r2, [pc, #40]	; (800b8e0 <vQueueAddToRegistry+0x50>)
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	00db      	lsls	r3, r3, #3
 800b8bc:	4413      	add	r3, r2
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b8c2:	e006      	b.n	800b8d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	60fb      	str	r3, [r7, #12]
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2b07      	cmp	r3, #7
 800b8ce:	d9e7      	bls.n	800b8a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b8d0:	bf00      	nop
 800b8d2:	bf00      	nop
 800b8d4:	3714      	adds	r7, #20
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	20002780 	.word	0x20002780

0800b8e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b086      	sub	sp, #24
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b8f4:	f001 fe16 	bl	800d524 <vPortEnterCritical>
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8fe:	b25b      	sxtb	r3, r3
 800b900:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b904:	d103      	bne.n	800b90e <vQueueWaitForMessageRestricted+0x2a>
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	2200      	movs	r2, #0
 800b90a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b914:	b25b      	sxtb	r3, r3
 800b916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b91a:	d103      	bne.n	800b924 <vQueueWaitForMessageRestricted+0x40>
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	2200      	movs	r2, #0
 800b920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b924:	f001 fe2e 	bl	800d584 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d106      	bne.n	800b93e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	3324      	adds	r3, #36	; 0x24
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	68b9      	ldr	r1, [r7, #8]
 800b938:	4618      	mov	r0, r3
 800b93a:	f000 fcf1 	bl	800c320 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b93e:	6978      	ldr	r0, [r7, #20]
 800b940:	f7ff ff26 	bl	800b790 <prvUnlockQueue>
	}
 800b944:	bf00      	nop
 800b946:	3718      	adds	r7, #24
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b08e      	sub	sp, #56	; 0x38
 800b950:	af04      	add	r7, sp, #16
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
 800b958:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b95a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d10a      	bne.n	800b976 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b964:	f383 8811 	msr	BASEPRI, r3
 800b968:	f3bf 8f6f 	isb	sy
 800b96c:	f3bf 8f4f 	dsb	sy
 800b970:	623b      	str	r3, [r7, #32]
}
 800b972:	bf00      	nop
 800b974:	e7fe      	b.n	800b974 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d10a      	bne.n	800b992 <xTaskCreateStatic+0x46>
	__asm volatile
 800b97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b980:	f383 8811 	msr	BASEPRI, r3
 800b984:	f3bf 8f6f 	isb	sy
 800b988:	f3bf 8f4f 	dsb	sy
 800b98c:	61fb      	str	r3, [r7, #28]
}
 800b98e:	bf00      	nop
 800b990:	e7fe      	b.n	800b990 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b992:	23cc      	movs	r3, #204	; 0xcc
 800b994:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	2bcc      	cmp	r3, #204	; 0xcc
 800b99a:	d00a      	beq.n	800b9b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800b99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a0:	f383 8811 	msr	BASEPRI, r3
 800b9a4:	f3bf 8f6f 	isb	sy
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	61bb      	str	r3, [r7, #24]
}
 800b9ae:	bf00      	nop
 800b9b0:	e7fe      	b.n	800b9b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b9b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d01e      	beq.n	800b9f8 <xTaskCreateStatic+0xac>
 800b9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d01b      	beq.n	800b9f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9cc:	2202      	movs	r2, #2
 800b9ce:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	9303      	str	r3, [sp, #12]
 800b9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d8:	9302      	str	r3, [sp, #8]
 800b9da:	f107 0314 	add.w	r3, r7, #20
 800b9de:	9301      	str	r3, [sp, #4]
 800b9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e2:	9300      	str	r3, [sp, #0]
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	68b9      	ldr	r1, [r7, #8]
 800b9ea:	68f8      	ldr	r0, [r7, #12]
 800b9ec:	f000 f850 	bl	800ba90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b9f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9f2:	f000 f8f3 	bl	800bbdc <prvAddNewTaskToReadyList>
 800b9f6:	e001      	b.n	800b9fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b9fc:	697b      	ldr	r3, [r7, #20]
	}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3728      	adds	r7, #40	; 0x28
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b08c      	sub	sp, #48	; 0x30
 800ba0a:	af04      	add	r7, sp, #16
 800ba0c:	60f8      	str	r0, [r7, #12]
 800ba0e:	60b9      	str	r1, [r7, #8]
 800ba10:	603b      	str	r3, [r7, #0]
 800ba12:	4613      	mov	r3, r2
 800ba14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ba16:	88fb      	ldrh	r3, [r7, #6]
 800ba18:	009b      	lsls	r3, r3, #2
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f001 fea4 	bl	800d768 <pvPortMalloc>
 800ba20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d00e      	beq.n	800ba46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ba28:	20cc      	movs	r0, #204	; 0xcc
 800ba2a:	f001 fe9d 	bl	800d768 <pvPortMalloc>
 800ba2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d003      	beq.n	800ba3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	697a      	ldr	r2, [r7, #20]
 800ba3a:	631a      	str	r2, [r3, #48]	; 0x30
 800ba3c:	e005      	b.n	800ba4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ba3e:	6978      	ldr	r0, [r7, #20]
 800ba40:	f001 ff5e 	bl	800d900 <vPortFree>
 800ba44:	e001      	b.n	800ba4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ba46:	2300      	movs	r3, #0
 800ba48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ba4a:	69fb      	ldr	r3, [r7, #28]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d017      	beq.n	800ba80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	2200      	movs	r2, #0
 800ba54:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ba58:	88fa      	ldrh	r2, [r7, #6]
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	9303      	str	r3, [sp, #12]
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	9302      	str	r3, [sp, #8]
 800ba62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba64:	9301      	str	r3, [sp, #4]
 800ba66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba68:	9300      	str	r3, [sp, #0]
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	68b9      	ldr	r1, [r7, #8]
 800ba6e:	68f8      	ldr	r0, [r7, #12]
 800ba70:	f000 f80e 	bl	800ba90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba74:	69f8      	ldr	r0, [r7, #28]
 800ba76:	f000 f8b1 	bl	800bbdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	61bb      	str	r3, [r7, #24]
 800ba7e:	e002      	b.n	800ba86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ba80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ba86:	69bb      	ldr	r3, [r7, #24]
	}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3720      	adds	r7, #32
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b088      	sub	sp, #32
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	607a      	str	r2, [r7, #4]
 800ba9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ba9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	461a      	mov	r2, r3
 800baa8:	21a5      	movs	r1, #165	; 0xa5
 800baaa:	f002 f881 	bl	800dbb0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800baae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bab8:	3b01      	subs	r3, #1
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	4413      	add	r3, r2
 800babe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bac0:	69bb      	ldr	r3, [r7, #24]
 800bac2:	f023 0307 	bic.w	r3, r3, #7
 800bac6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bac8:	69bb      	ldr	r3, [r7, #24]
 800baca:	f003 0307 	and.w	r3, r3, #7
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d00a      	beq.n	800bae8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad6:	f383 8811 	msr	BASEPRI, r3
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	617b      	str	r3, [r7, #20]
}
 800bae4:	bf00      	nop
 800bae6:	e7fe      	b.n	800bae6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d01f      	beq.n	800bb2e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800baee:	2300      	movs	r3, #0
 800baf0:	61fb      	str	r3, [r7, #28]
 800baf2:	e012      	b.n	800bb1a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800baf4:	68ba      	ldr	r2, [r7, #8]
 800baf6:	69fb      	ldr	r3, [r7, #28]
 800baf8:	4413      	add	r3, r2
 800bafa:	7819      	ldrb	r1, [r3, #0]
 800bafc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bafe:	69fb      	ldr	r3, [r7, #28]
 800bb00:	4413      	add	r3, r2
 800bb02:	3334      	adds	r3, #52	; 0x34
 800bb04:	460a      	mov	r2, r1
 800bb06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bb08:	68ba      	ldr	r2, [r7, #8]
 800bb0a:	69fb      	ldr	r3, [r7, #28]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d006      	beq.n	800bb22 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	3301      	adds	r3, #1
 800bb18:	61fb      	str	r3, [r7, #28]
 800bb1a:	69fb      	ldr	r3, [r7, #28]
 800bb1c:	2b1f      	cmp	r3, #31
 800bb1e:	d9e9      	bls.n	800baf4 <prvInitialiseNewTask+0x64>
 800bb20:	e000      	b.n	800bb24 <prvInitialiseNewTask+0x94>
			{
				break;
 800bb22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800bb2c:	e003      	b.n	800bb36 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb30:	2200      	movs	r2, #0
 800bb32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb38:	2b37      	cmp	r3, #55	; 0x37
 800bb3a:	d901      	bls.n	800bb40 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bb3c:	2337      	movs	r3, #55	; 0x37
 800bb3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb4a:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800bb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4e:	2200      	movs	r2, #0
 800bb50:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb54:	3304      	adds	r3, #4
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fe ffce 	bl	800aaf8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5e:	3318      	adds	r3, #24
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7fe ffc9 	bl	800aaf8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb86:	2200      	movs	r2, #0
 800bb88:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8e:	3364      	adds	r3, #100	; 0x64
 800bb90:	2260      	movs	r2, #96	; 0x60
 800bb92:	2100      	movs	r1, #0
 800bb94:	4618      	mov	r0, r3
 800bb96:	f002 f80b 	bl	800dbb0 <memset>
 800bb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9c:	4a0c      	ldr	r2, [pc, #48]	; (800bbd0 <prvInitialiseNewTask+0x140>)
 800bb9e:	669a      	str	r2, [r3, #104]	; 0x68
 800bba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba2:	4a0c      	ldr	r2, [pc, #48]	; (800bbd4 <prvInitialiseNewTask+0x144>)
 800bba4:	66da      	str	r2, [r3, #108]	; 0x6c
 800bba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba8:	4a0b      	ldr	r2, [pc, #44]	; (800bbd8 <prvInitialiseNewTask+0x148>)
 800bbaa:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bbac:	683a      	ldr	r2, [r7, #0]
 800bbae:	68f9      	ldr	r1, [r7, #12]
 800bbb0:	69b8      	ldr	r0, [r7, #24]
 800bbb2:	f001 fb89 	bl	800d2c8 <pxPortInitialiseStack>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d002      	beq.n	800bbc8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbc6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbc8:	bf00      	nop
 800bbca:	3720      	adds	r7, #32
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	0800ea04 	.word	0x0800ea04
 800bbd4:	0800ea24 	.word	0x0800ea24
 800bbd8:	0800e9e4 	.word	0x0800e9e4

0800bbdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bbe4:	f001 fc9e 	bl	800d524 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bbe8:	4b2d      	ldr	r3, [pc, #180]	; (800bca0 <prvAddNewTaskToReadyList+0xc4>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	3301      	adds	r3, #1
 800bbee:	4a2c      	ldr	r2, [pc, #176]	; (800bca0 <prvAddNewTaskToReadyList+0xc4>)
 800bbf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bbf2:	4b2c      	ldr	r3, [pc, #176]	; (800bca4 <prvAddNewTaskToReadyList+0xc8>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d109      	bne.n	800bc0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bbfa:	4a2a      	ldr	r2, [pc, #168]	; (800bca4 <prvAddNewTaskToReadyList+0xc8>)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bc00:	4b27      	ldr	r3, [pc, #156]	; (800bca0 <prvAddNewTaskToReadyList+0xc4>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d110      	bne.n	800bc2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bc08:	f000 fcb6 	bl	800c578 <prvInitialiseTaskLists>
 800bc0c:	e00d      	b.n	800bc2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bc0e:	4b26      	ldr	r3, [pc, #152]	; (800bca8 <prvAddNewTaskToReadyList+0xcc>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d109      	bne.n	800bc2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bc16:	4b23      	ldr	r3, [pc, #140]	; (800bca4 <prvAddNewTaskToReadyList+0xc8>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d802      	bhi.n	800bc2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bc24:	4a1f      	ldr	r2, [pc, #124]	; (800bca4 <prvAddNewTaskToReadyList+0xc8>)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bc2a:	4b20      	ldr	r3, [pc, #128]	; (800bcac <prvAddNewTaskToReadyList+0xd0>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	3301      	adds	r3, #1
 800bc30:	4a1e      	ldr	r2, [pc, #120]	; (800bcac <prvAddNewTaskToReadyList+0xd0>)
 800bc32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bc34:	4b1d      	ldr	r3, [pc, #116]	; (800bcac <prvAddNewTaskToReadyList+0xd0>)
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc40:	4b1b      	ldr	r3, [pc, #108]	; (800bcb0 <prvAddNewTaskToReadyList+0xd4>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d903      	bls.n	800bc50 <prvAddNewTaskToReadyList+0x74>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc4c:	4a18      	ldr	r2, [pc, #96]	; (800bcb0 <prvAddNewTaskToReadyList+0xd4>)
 800bc4e:	6013      	str	r3, [r2, #0]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc54:	4613      	mov	r3, r2
 800bc56:	009b      	lsls	r3, r3, #2
 800bc58:	4413      	add	r3, r2
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	4a15      	ldr	r2, [pc, #84]	; (800bcb4 <prvAddNewTaskToReadyList+0xd8>)
 800bc5e:	441a      	add	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	3304      	adds	r3, #4
 800bc64:	4619      	mov	r1, r3
 800bc66:	4610      	mov	r0, r2
 800bc68:	f7fe ff53 	bl	800ab12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bc6c:	f001 fc8a 	bl	800d584 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bc70:	4b0d      	ldr	r3, [pc, #52]	; (800bca8 <prvAddNewTaskToReadyList+0xcc>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d00e      	beq.n	800bc96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bc78:	4b0a      	ldr	r3, [pc, #40]	; (800bca4 <prvAddNewTaskToReadyList+0xc8>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d207      	bcs.n	800bc96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bc86:	4b0c      	ldr	r3, [pc, #48]	; (800bcb8 <prvAddNewTaskToReadyList+0xdc>)
 800bc88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc8c:	601a      	str	r2, [r3, #0]
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc96:	bf00      	nop
 800bc98:	3708      	adds	r7, #8
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	20002c94 	.word	0x20002c94
 800bca4:	200027c0 	.word	0x200027c0
 800bca8:	20002ca0 	.word	0x20002ca0
 800bcac:	20002cb0 	.word	0x20002cb0
 800bcb0:	20002c9c 	.word	0x20002c9c
 800bcb4:	200027c4 	.word	0x200027c4
 800bcb8:	e000ed04 	.word	0xe000ed04

0800bcbc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b08a      	sub	sp, #40	; 0x28
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10a      	bne.n	800bce6 <vTaskDelayUntil+0x2a>
	__asm volatile
 800bcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	617b      	str	r3, [r7, #20]
}
 800bce2:	bf00      	nop
 800bce4:	e7fe      	b.n	800bce4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d10a      	bne.n	800bd02 <vTaskDelayUntil+0x46>
	__asm volatile
 800bcec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf0:	f383 8811 	msr	BASEPRI, r3
 800bcf4:	f3bf 8f6f 	isb	sy
 800bcf8:	f3bf 8f4f 	dsb	sy
 800bcfc:	613b      	str	r3, [r7, #16]
}
 800bcfe:	bf00      	nop
 800bd00:	e7fe      	b.n	800bd00 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800bd02:	4b2a      	ldr	r3, [pc, #168]	; (800bdac <vTaskDelayUntil+0xf0>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00a      	beq.n	800bd20 <vTaskDelayUntil+0x64>
	__asm volatile
 800bd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0e:	f383 8811 	msr	BASEPRI, r3
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	60fb      	str	r3, [r7, #12]
}
 800bd1c:	bf00      	nop
 800bd1e:	e7fe      	b.n	800bd1e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800bd20:	f000 f8ee 	bl	800bf00 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800bd24:	4b22      	ldr	r3, [pc, #136]	; (800bdb0 <vTaskDelayUntil+0xf4>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	683a      	ldr	r2, [r7, #0]
 800bd30:	4413      	add	r3, r2
 800bd32:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	6a3a      	ldr	r2, [r7, #32]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d20b      	bcs.n	800bd56 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	69fa      	ldr	r2, [r7, #28]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d211      	bcs.n	800bd6c <vTaskDelayUntil+0xb0>
 800bd48:	69fa      	ldr	r2, [r7, #28]
 800bd4a:	6a3b      	ldr	r3, [r7, #32]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d90d      	bls.n	800bd6c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800bd50:	2301      	movs	r3, #1
 800bd52:	627b      	str	r3, [r7, #36]	; 0x24
 800bd54:	e00a      	b.n	800bd6c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	69fa      	ldr	r2, [r7, #28]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d303      	bcc.n	800bd68 <vTaskDelayUntil+0xac>
 800bd60:	69fa      	ldr	r2, [r7, #28]
 800bd62:	6a3b      	ldr	r3, [r7, #32]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d901      	bls.n	800bd6c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	69fa      	ldr	r2, [r7, #28]
 800bd70:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800bd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d006      	beq.n	800bd86 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800bd78:	69fa      	ldr	r2, [r7, #28]
 800bd7a:	6a3b      	ldr	r3, [r7, #32]
 800bd7c:	1ad3      	subs	r3, r2, r3
 800bd7e:	2100      	movs	r1, #0
 800bd80:	4618      	mov	r0, r3
 800bd82:	f000 fe45 	bl	800ca10 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800bd86:	f000 f8c9 	bl	800bf1c <xTaskResumeAll>
 800bd8a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bd8c:	69bb      	ldr	r3, [r7, #24]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d107      	bne.n	800bda2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800bd92:	4b08      	ldr	r3, [pc, #32]	; (800bdb4 <vTaskDelayUntil+0xf8>)
 800bd94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd98:	601a      	str	r2, [r3, #0]
 800bd9a:	f3bf 8f4f 	dsb	sy
 800bd9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bda2:	bf00      	nop
 800bda4:	3728      	adds	r7, #40	; 0x28
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
 800bdaa:	bf00      	nop
 800bdac:	20002cbc 	.word	0x20002cbc
 800bdb0:	20002c98 	.word	0x20002c98
 800bdb4:	e000ed04 	.word	0xe000ed04

0800bdb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d017      	beq.n	800bdfa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bdca:	4b13      	ldr	r3, [pc, #76]	; (800be18 <vTaskDelay+0x60>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00a      	beq.n	800bde8 <vTaskDelay+0x30>
	__asm volatile
 800bdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd6:	f383 8811 	msr	BASEPRI, r3
 800bdda:	f3bf 8f6f 	isb	sy
 800bdde:	f3bf 8f4f 	dsb	sy
 800bde2:	60bb      	str	r3, [r7, #8]
}
 800bde4:	bf00      	nop
 800bde6:	e7fe      	b.n	800bde6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bde8:	f000 f88a 	bl	800bf00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bdec:	2100      	movs	r1, #0
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 fe0e 	bl	800ca10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bdf4:	f000 f892 	bl	800bf1c <xTaskResumeAll>
 800bdf8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d107      	bne.n	800be10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800be00:	4b06      	ldr	r3, [pc, #24]	; (800be1c <vTaskDelay+0x64>)
 800be02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be06:	601a      	str	r2, [r3, #0]
 800be08:	f3bf 8f4f 	dsb	sy
 800be0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800be10:	bf00      	nop
 800be12:	3710      	adds	r7, #16
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	20002cbc 	.word	0x20002cbc
 800be1c:	e000ed04 	.word	0xe000ed04

0800be20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b08a      	sub	sp, #40	; 0x28
 800be24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800be26:	2300      	movs	r3, #0
 800be28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800be2a:	2300      	movs	r3, #0
 800be2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800be2e:	463a      	mov	r2, r7
 800be30:	1d39      	adds	r1, r7, #4
 800be32:	f107 0308 	add.w	r3, r7, #8
 800be36:	4618      	mov	r0, r3
 800be38:	f7fe fe0a 	bl	800aa50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800be3c:	6839      	ldr	r1, [r7, #0]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	68ba      	ldr	r2, [r7, #8]
 800be42:	9202      	str	r2, [sp, #8]
 800be44:	9301      	str	r3, [sp, #4]
 800be46:	2300      	movs	r3, #0
 800be48:	9300      	str	r3, [sp, #0]
 800be4a:	2300      	movs	r3, #0
 800be4c:	460a      	mov	r2, r1
 800be4e:	4924      	ldr	r1, [pc, #144]	; (800bee0 <vTaskStartScheduler+0xc0>)
 800be50:	4824      	ldr	r0, [pc, #144]	; (800bee4 <vTaskStartScheduler+0xc4>)
 800be52:	f7ff fd7b 	bl	800b94c <xTaskCreateStatic>
 800be56:	4603      	mov	r3, r0
 800be58:	4a23      	ldr	r2, [pc, #140]	; (800bee8 <vTaskStartScheduler+0xc8>)
 800be5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800be5c:	4b22      	ldr	r3, [pc, #136]	; (800bee8 <vTaskStartScheduler+0xc8>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d002      	beq.n	800be6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800be64:	2301      	movs	r3, #1
 800be66:	617b      	str	r3, [r7, #20]
 800be68:	e001      	b.n	800be6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800be6a:	2300      	movs	r3, #0
 800be6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	2b01      	cmp	r3, #1
 800be72:	d102      	bne.n	800be7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800be74:	f000 fe20 	bl	800cab8 <xTimerCreateTimerTask>
 800be78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d11b      	bne.n	800beb8 <vTaskStartScheduler+0x98>
	__asm volatile
 800be80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be84:	f383 8811 	msr	BASEPRI, r3
 800be88:	f3bf 8f6f 	isb	sy
 800be8c:	f3bf 8f4f 	dsb	sy
 800be90:	613b      	str	r3, [r7, #16]
}
 800be92:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800be94:	4b15      	ldr	r3, [pc, #84]	; (800beec <vTaskStartScheduler+0xcc>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	3364      	adds	r3, #100	; 0x64
 800be9a:	4a15      	ldr	r2, [pc, #84]	; (800bef0 <vTaskStartScheduler+0xd0>)
 800be9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800be9e:	4b15      	ldr	r3, [pc, #84]	; (800bef4 <vTaskStartScheduler+0xd4>)
 800bea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bea4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bea6:	4b14      	ldr	r3, [pc, #80]	; (800bef8 <vTaskStartScheduler+0xd8>)
 800bea8:	2201      	movs	r2, #1
 800beaa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800beac:	4b13      	ldr	r3, [pc, #76]	; (800befc <vTaskStartScheduler+0xdc>)
 800beae:	2200      	movs	r2, #0
 800beb0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800beb2:	f001 fa95 	bl	800d3e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800beb6:	e00e      	b.n	800bed6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bebe:	d10a      	bne.n	800bed6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800bec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec4:	f383 8811 	msr	BASEPRI, r3
 800bec8:	f3bf 8f6f 	isb	sy
 800becc:	f3bf 8f4f 	dsb	sy
 800bed0:	60fb      	str	r3, [r7, #12]
}
 800bed2:	bf00      	nop
 800bed4:	e7fe      	b.n	800bed4 <vTaskStartScheduler+0xb4>
}
 800bed6:	bf00      	nop
 800bed8:	3718      	adds	r7, #24
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	0800e840 	.word	0x0800e840
 800bee4:	0800c549 	.word	0x0800c549
 800bee8:	20002cb8 	.word	0x20002cb8
 800beec:	200027c0 	.word	0x200027c0
 800bef0:	20000020 	.word	0x20000020
 800bef4:	20002cb4 	.word	0x20002cb4
 800bef8:	20002ca0 	.word	0x20002ca0
 800befc:	20002c98 	.word	0x20002c98

0800bf00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bf00:	b480      	push	{r7}
 800bf02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bf04:	4b04      	ldr	r3, [pc, #16]	; (800bf18 <vTaskSuspendAll+0x18>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	4a03      	ldr	r2, [pc, #12]	; (800bf18 <vTaskSuspendAll+0x18>)
 800bf0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bf0e:	bf00      	nop
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr
 800bf18:	20002cbc 	.word	0x20002cbc

0800bf1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bf22:	2300      	movs	r3, #0
 800bf24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bf26:	2300      	movs	r3, #0
 800bf28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bf2a:	4b42      	ldr	r3, [pc, #264]	; (800c034 <xTaskResumeAll+0x118>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d10a      	bne.n	800bf48 <xTaskResumeAll+0x2c>
	__asm volatile
 800bf32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf36:	f383 8811 	msr	BASEPRI, r3
 800bf3a:	f3bf 8f6f 	isb	sy
 800bf3e:	f3bf 8f4f 	dsb	sy
 800bf42:	603b      	str	r3, [r7, #0]
}
 800bf44:	bf00      	nop
 800bf46:	e7fe      	b.n	800bf46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bf48:	f001 faec 	bl	800d524 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bf4c:	4b39      	ldr	r3, [pc, #228]	; (800c034 <xTaskResumeAll+0x118>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	3b01      	subs	r3, #1
 800bf52:	4a38      	ldr	r2, [pc, #224]	; (800c034 <xTaskResumeAll+0x118>)
 800bf54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf56:	4b37      	ldr	r3, [pc, #220]	; (800c034 <xTaskResumeAll+0x118>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d162      	bne.n	800c024 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bf5e:	4b36      	ldr	r3, [pc, #216]	; (800c038 <xTaskResumeAll+0x11c>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d05e      	beq.n	800c024 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf66:	e02f      	b.n	800bfc8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf68:	4b34      	ldr	r3, [pc, #208]	; (800c03c <xTaskResumeAll+0x120>)
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	3318      	adds	r3, #24
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7fe fe29 	bl	800abcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	3304      	adds	r3, #4
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7fe fe24 	bl	800abcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf88:	4b2d      	ldr	r3, [pc, #180]	; (800c040 <xTaskResumeAll+0x124>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d903      	bls.n	800bf98 <xTaskResumeAll+0x7c>
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf94:	4a2a      	ldr	r2, [pc, #168]	; (800c040 <xTaskResumeAll+0x124>)
 800bf96:	6013      	str	r3, [r2, #0]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf9c:	4613      	mov	r3, r2
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	4413      	add	r3, r2
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	4a27      	ldr	r2, [pc, #156]	; (800c044 <xTaskResumeAll+0x128>)
 800bfa6:	441a      	add	r2, r3
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	3304      	adds	r3, #4
 800bfac:	4619      	mov	r1, r3
 800bfae:	4610      	mov	r0, r2
 800bfb0:	f7fe fdaf 	bl	800ab12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb8:	4b23      	ldr	r3, [pc, #140]	; (800c048 <xTaskResumeAll+0x12c>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d302      	bcc.n	800bfc8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bfc2:	4b22      	ldr	r3, [pc, #136]	; (800c04c <xTaskResumeAll+0x130>)
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bfc8:	4b1c      	ldr	r3, [pc, #112]	; (800c03c <xTaskResumeAll+0x120>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d1cb      	bne.n	800bf68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d001      	beq.n	800bfda <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bfd6:	f000 fb71 	bl	800c6bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bfda:	4b1d      	ldr	r3, [pc, #116]	; (800c050 <xTaskResumeAll+0x134>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d010      	beq.n	800c008 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bfe6:	f000 f859 	bl	800c09c <xTaskIncrementTick>
 800bfea:	4603      	mov	r3, r0
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d002      	beq.n	800bff6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bff0:	4b16      	ldr	r3, [pc, #88]	; (800c04c <xTaskResumeAll+0x130>)
 800bff2:	2201      	movs	r2, #1
 800bff4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	3b01      	subs	r3, #1
 800bffa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1f1      	bne.n	800bfe6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c002:	4b13      	ldr	r3, [pc, #76]	; (800c050 <xTaskResumeAll+0x134>)
 800c004:	2200      	movs	r2, #0
 800c006:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c008:	4b10      	ldr	r3, [pc, #64]	; (800c04c <xTaskResumeAll+0x130>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d009      	beq.n	800c024 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c010:	2301      	movs	r3, #1
 800c012:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c014:	4b0f      	ldr	r3, [pc, #60]	; (800c054 <xTaskResumeAll+0x138>)
 800c016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c01a:	601a      	str	r2, [r3, #0]
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c024:	f001 faae 	bl	800d584 <vPortExitCritical>

	return xAlreadyYielded;
 800c028:	68bb      	ldr	r3, [r7, #8]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	20002cbc 	.word	0x20002cbc
 800c038:	20002c94 	.word	0x20002c94
 800c03c:	20002c54 	.word	0x20002c54
 800c040:	20002c9c 	.word	0x20002c9c
 800c044:	200027c4 	.word	0x200027c4
 800c048:	200027c0 	.word	0x200027c0
 800c04c:	20002ca8 	.word	0x20002ca8
 800c050:	20002ca4 	.word	0x20002ca4
 800c054:	e000ed04 	.word	0xe000ed04

0800c058 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c05e:	4b05      	ldr	r3, [pc, #20]	; (800c074 <xTaskGetTickCount+0x1c>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c064:	687b      	ldr	r3, [r7, #4]
}
 800c066:	4618      	mov	r0, r3
 800c068:	370c      	adds	r7, #12
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop
 800c074:	20002c98 	.word	0x20002c98

0800c078 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c07e:	f001 fb33 	bl	800d6e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c082:	2300      	movs	r3, #0
 800c084:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c086:	4b04      	ldr	r3, [pc, #16]	; (800c098 <xTaskGetTickCountFromISR+0x20>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c08c:	683b      	ldr	r3, [r7, #0]
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3708      	adds	r7, #8
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	20002c98 	.word	0x20002c98

0800c09c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b086      	sub	sp, #24
 800c0a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0a6:	4b4f      	ldr	r3, [pc, #316]	; (800c1e4 <xTaskIncrementTick+0x148>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	f040 808f 	bne.w	800c1ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c0b0:	4b4d      	ldr	r3, [pc, #308]	; (800c1e8 <xTaskIncrementTick+0x14c>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c0b8:	4a4b      	ldr	r2, [pc, #300]	; (800c1e8 <xTaskIncrementTick+0x14c>)
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d120      	bne.n	800c106 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c0c4:	4b49      	ldr	r3, [pc, #292]	; (800c1ec <xTaskIncrementTick+0x150>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d00a      	beq.n	800c0e4 <xTaskIncrementTick+0x48>
	__asm volatile
 800c0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d2:	f383 8811 	msr	BASEPRI, r3
 800c0d6:	f3bf 8f6f 	isb	sy
 800c0da:	f3bf 8f4f 	dsb	sy
 800c0de:	603b      	str	r3, [r7, #0]
}
 800c0e0:	bf00      	nop
 800c0e2:	e7fe      	b.n	800c0e2 <xTaskIncrementTick+0x46>
 800c0e4:	4b41      	ldr	r3, [pc, #260]	; (800c1ec <xTaskIncrementTick+0x150>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	60fb      	str	r3, [r7, #12]
 800c0ea:	4b41      	ldr	r3, [pc, #260]	; (800c1f0 <xTaskIncrementTick+0x154>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4a3f      	ldr	r2, [pc, #252]	; (800c1ec <xTaskIncrementTick+0x150>)
 800c0f0:	6013      	str	r3, [r2, #0]
 800c0f2:	4a3f      	ldr	r2, [pc, #252]	; (800c1f0 <xTaskIncrementTick+0x154>)
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	6013      	str	r3, [r2, #0]
 800c0f8:	4b3e      	ldr	r3, [pc, #248]	; (800c1f4 <xTaskIncrementTick+0x158>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	4a3d      	ldr	r2, [pc, #244]	; (800c1f4 <xTaskIncrementTick+0x158>)
 800c100:	6013      	str	r3, [r2, #0]
 800c102:	f000 fadb 	bl	800c6bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c106:	4b3c      	ldr	r3, [pc, #240]	; (800c1f8 <xTaskIncrementTick+0x15c>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	693a      	ldr	r2, [r7, #16]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d349      	bcc.n	800c1a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c110:	4b36      	ldr	r3, [pc, #216]	; (800c1ec <xTaskIncrementTick+0x150>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d104      	bne.n	800c124 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c11a:	4b37      	ldr	r3, [pc, #220]	; (800c1f8 <xTaskIncrementTick+0x15c>)
 800c11c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c120:	601a      	str	r2, [r3, #0]
					break;
 800c122:	e03f      	b.n	800c1a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c124:	4b31      	ldr	r3, [pc, #196]	; (800c1ec <xTaskIncrementTick+0x150>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c134:	693a      	ldr	r2, [r7, #16]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d203      	bcs.n	800c144 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c13c:	4a2e      	ldr	r2, [pc, #184]	; (800c1f8 <xTaskIncrementTick+0x15c>)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c142:	e02f      	b.n	800c1a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	3304      	adds	r3, #4
 800c148:	4618      	mov	r0, r3
 800c14a:	f7fe fd3f 	bl	800abcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c152:	2b00      	cmp	r3, #0
 800c154:	d004      	beq.n	800c160 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	3318      	adds	r3, #24
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7fe fd36 	bl	800abcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c164:	4b25      	ldr	r3, [pc, #148]	; (800c1fc <xTaskIncrementTick+0x160>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d903      	bls.n	800c174 <xTaskIncrementTick+0xd8>
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c170:	4a22      	ldr	r2, [pc, #136]	; (800c1fc <xTaskIncrementTick+0x160>)
 800c172:	6013      	str	r3, [r2, #0]
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c178:	4613      	mov	r3, r2
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	4413      	add	r3, r2
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	4a1f      	ldr	r2, [pc, #124]	; (800c200 <xTaskIncrementTick+0x164>)
 800c182:	441a      	add	r2, r3
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	3304      	adds	r3, #4
 800c188:	4619      	mov	r1, r3
 800c18a:	4610      	mov	r0, r2
 800c18c:	f7fe fcc1 	bl	800ab12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c194:	4b1b      	ldr	r3, [pc, #108]	; (800c204 <xTaskIncrementTick+0x168>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d3b8      	bcc.n	800c110 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1a2:	e7b5      	b.n	800c110 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c1a4:	4b17      	ldr	r3, [pc, #92]	; (800c204 <xTaskIncrementTick+0x168>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1aa:	4915      	ldr	r1, [pc, #84]	; (800c200 <xTaskIncrementTick+0x164>)
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	4413      	add	r3, r2
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	440b      	add	r3, r1
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d901      	bls.n	800c1c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c1c0:	4b11      	ldr	r3, [pc, #68]	; (800c208 <xTaskIncrementTick+0x16c>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d007      	beq.n	800c1d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	617b      	str	r3, [r7, #20]
 800c1cc:	e004      	b.n	800c1d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c1ce:	4b0f      	ldr	r3, [pc, #60]	; (800c20c <xTaskIncrementTick+0x170>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	4a0d      	ldr	r2, [pc, #52]	; (800c20c <xTaskIncrementTick+0x170>)
 800c1d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c1d8:	697b      	ldr	r3, [r7, #20]
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3718      	adds	r7, #24
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	20002cbc 	.word	0x20002cbc
 800c1e8:	20002c98 	.word	0x20002c98
 800c1ec:	20002c4c 	.word	0x20002c4c
 800c1f0:	20002c50 	.word	0x20002c50
 800c1f4:	20002cac 	.word	0x20002cac
 800c1f8:	20002cb4 	.word	0x20002cb4
 800c1fc:	20002c9c 	.word	0x20002c9c
 800c200:	200027c4 	.word	0x200027c4
 800c204:	200027c0 	.word	0x200027c0
 800c208:	20002ca8 	.word	0x20002ca8
 800c20c:	20002ca4 	.word	0x20002ca4

0800c210 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c216:	4b2a      	ldr	r3, [pc, #168]	; (800c2c0 <vTaskSwitchContext+0xb0>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d003      	beq.n	800c226 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c21e:	4b29      	ldr	r3, [pc, #164]	; (800c2c4 <vTaskSwitchContext+0xb4>)
 800c220:	2201      	movs	r2, #1
 800c222:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c224:	e046      	b.n	800c2b4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c226:	4b27      	ldr	r3, [pc, #156]	; (800c2c4 <vTaskSwitchContext+0xb4>)
 800c228:	2200      	movs	r2, #0
 800c22a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c22c:	4b26      	ldr	r3, [pc, #152]	; (800c2c8 <vTaskSwitchContext+0xb8>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	60fb      	str	r3, [r7, #12]
 800c232:	e010      	b.n	800c256 <vTaskSwitchContext+0x46>
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d10a      	bne.n	800c250 <vTaskSwitchContext+0x40>
	__asm volatile
 800c23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c23e:	f383 8811 	msr	BASEPRI, r3
 800c242:	f3bf 8f6f 	isb	sy
 800c246:	f3bf 8f4f 	dsb	sy
 800c24a:	607b      	str	r3, [r7, #4]
}
 800c24c:	bf00      	nop
 800c24e:	e7fe      	b.n	800c24e <vTaskSwitchContext+0x3e>
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	3b01      	subs	r3, #1
 800c254:	60fb      	str	r3, [r7, #12]
 800c256:	491d      	ldr	r1, [pc, #116]	; (800c2cc <vTaskSwitchContext+0xbc>)
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	4613      	mov	r3, r2
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	4413      	add	r3, r2
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	440b      	add	r3, r1
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d0e4      	beq.n	800c234 <vTaskSwitchContext+0x24>
 800c26a:	68fa      	ldr	r2, [r7, #12]
 800c26c:	4613      	mov	r3, r2
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	4413      	add	r3, r2
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	4a15      	ldr	r2, [pc, #84]	; (800c2cc <vTaskSwitchContext+0xbc>)
 800c276:	4413      	add	r3, r2
 800c278:	60bb      	str	r3, [r7, #8]
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	685a      	ldr	r2, [r3, #4]
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	605a      	str	r2, [r3, #4]
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	685a      	ldr	r2, [r3, #4]
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	3308      	adds	r3, #8
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d104      	bne.n	800c29a <vTaskSwitchContext+0x8a>
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	685a      	ldr	r2, [r3, #4]
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	605a      	str	r2, [r3, #4]
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	68db      	ldr	r3, [r3, #12]
 800c2a0:	4a0b      	ldr	r2, [pc, #44]	; (800c2d0 <vTaskSwitchContext+0xc0>)
 800c2a2:	6013      	str	r3, [r2, #0]
 800c2a4:	4a08      	ldr	r2, [pc, #32]	; (800c2c8 <vTaskSwitchContext+0xb8>)
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c2aa:	4b09      	ldr	r3, [pc, #36]	; (800c2d0 <vTaskSwitchContext+0xc0>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	3364      	adds	r3, #100	; 0x64
 800c2b0:	4a08      	ldr	r2, [pc, #32]	; (800c2d4 <vTaskSwitchContext+0xc4>)
 800c2b2:	6013      	str	r3, [r2, #0]
}
 800c2b4:	bf00      	nop
 800c2b6:	3714      	adds	r7, #20
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr
 800c2c0:	20002cbc 	.word	0x20002cbc
 800c2c4:	20002ca8 	.word	0x20002ca8
 800c2c8:	20002c9c 	.word	0x20002c9c
 800c2cc:	200027c4 	.word	0x200027c4
 800c2d0:	200027c0 	.word	0x200027c0
 800c2d4:	20000020 	.word	0x20000020

0800c2d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d10a      	bne.n	800c2fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ec:	f383 8811 	msr	BASEPRI, r3
 800c2f0:	f3bf 8f6f 	isb	sy
 800c2f4:	f3bf 8f4f 	dsb	sy
 800c2f8:	60fb      	str	r3, [r7, #12]
}
 800c2fa:	bf00      	nop
 800c2fc:	e7fe      	b.n	800c2fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c2fe:	4b07      	ldr	r3, [pc, #28]	; (800c31c <vTaskPlaceOnEventList+0x44>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	3318      	adds	r3, #24
 800c304:	4619      	mov	r1, r3
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f7fe fc27 	bl	800ab5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c30c:	2101      	movs	r1, #1
 800c30e:	6838      	ldr	r0, [r7, #0]
 800c310:	f000 fb7e 	bl	800ca10 <prvAddCurrentTaskToDelayedList>
}
 800c314:	bf00      	nop
 800c316:	3710      	adds	r7, #16
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	200027c0 	.word	0x200027c0

0800c320 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c320:	b580      	push	{r7, lr}
 800c322:	b086      	sub	sp, #24
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d10a      	bne.n	800c348 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c336:	f383 8811 	msr	BASEPRI, r3
 800c33a:	f3bf 8f6f 	isb	sy
 800c33e:	f3bf 8f4f 	dsb	sy
 800c342:	617b      	str	r3, [r7, #20]
}
 800c344:	bf00      	nop
 800c346:	e7fe      	b.n	800c346 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c348:	4b0a      	ldr	r3, [pc, #40]	; (800c374 <vTaskPlaceOnEventListRestricted+0x54>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	3318      	adds	r3, #24
 800c34e:	4619      	mov	r1, r3
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	f7fe fbde 	bl	800ab12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d002      	beq.n	800c362 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c35c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c360:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c362:	6879      	ldr	r1, [r7, #4]
 800c364:	68b8      	ldr	r0, [r7, #8]
 800c366:	f000 fb53 	bl	800ca10 <prvAddCurrentTaskToDelayedList>
	}
 800c36a:	bf00      	nop
 800c36c:	3718      	adds	r7, #24
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	200027c0 	.word	0x200027c0

0800c378 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b086      	sub	sp, #24
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	68db      	ldr	r3, [r3, #12]
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d10a      	bne.n	800c3a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c392:	f383 8811 	msr	BASEPRI, r3
 800c396:	f3bf 8f6f 	isb	sy
 800c39a:	f3bf 8f4f 	dsb	sy
 800c39e:	60fb      	str	r3, [r7, #12]
}
 800c3a0:	bf00      	nop
 800c3a2:	e7fe      	b.n	800c3a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	3318      	adds	r3, #24
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7fe fc0f 	bl	800abcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3ae:	4b1e      	ldr	r3, [pc, #120]	; (800c428 <xTaskRemoveFromEventList+0xb0>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d11d      	bne.n	800c3f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	3304      	adds	r3, #4
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7fe fc06 	bl	800abcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3c4:	4b19      	ldr	r3, [pc, #100]	; (800c42c <xTaskRemoveFromEventList+0xb4>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d903      	bls.n	800c3d4 <xTaskRemoveFromEventList+0x5c>
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d0:	4a16      	ldr	r2, [pc, #88]	; (800c42c <xTaskRemoveFromEventList+0xb4>)
 800c3d2:	6013      	str	r3, [r2, #0]
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3d8:	4613      	mov	r3, r2
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	4413      	add	r3, r2
 800c3de:	009b      	lsls	r3, r3, #2
 800c3e0:	4a13      	ldr	r2, [pc, #76]	; (800c430 <xTaskRemoveFromEventList+0xb8>)
 800c3e2:	441a      	add	r2, r3
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	3304      	adds	r3, #4
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	4610      	mov	r0, r2
 800c3ec:	f7fe fb91 	bl	800ab12 <vListInsertEnd>
 800c3f0:	e005      	b.n	800c3fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	3318      	adds	r3, #24
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	480e      	ldr	r0, [pc, #56]	; (800c434 <xTaskRemoveFromEventList+0xbc>)
 800c3fa:	f7fe fb8a 	bl	800ab12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c402:	4b0d      	ldr	r3, [pc, #52]	; (800c438 <xTaskRemoveFromEventList+0xc0>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c408:	429a      	cmp	r2, r3
 800c40a:	d905      	bls.n	800c418 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c40c:	2301      	movs	r3, #1
 800c40e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c410:	4b0a      	ldr	r3, [pc, #40]	; (800c43c <xTaskRemoveFromEventList+0xc4>)
 800c412:	2201      	movs	r2, #1
 800c414:	601a      	str	r2, [r3, #0]
 800c416:	e001      	b.n	800c41c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c418:	2300      	movs	r3, #0
 800c41a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c41c:	697b      	ldr	r3, [r7, #20]
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3718      	adds	r7, #24
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	20002cbc 	.word	0x20002cbc
 800c42c:	20002c9c 	.word	0x20002c9c
 800c430:	200027c4 	.word	0x200027c4
 800c434:	20002c54 	.word	0x20002c54
 800c438:	200027c0 	.word	0x200027c0
 800c43c:	20002ca8 	.word	0x20002ca8

0800c440 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c440:	b480      	push	{r7}
 800c442:	b083      	sub	sp, #12
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c448:	4b06      	ldr	r3, [pc, #24]	; (800c464 <vTaskInternalSetTimeOutState+0x24>)
 800c44a:	681a      	ldr	r2, [r3, #0]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c450:	4b05      	ldr	r3, [pc, #20]	; (800c468 <vTaskInternalSetTimeOutState+0x28>)
 800c452:	681a      	ldr	r2, [r3, #0]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	605a      	str	r2, [r3, #4]
}
 800c458:	bf00      	nop
 800c45a:	370c      	adds	r7, #12
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr
 800c464:	20002cac 	.word	0x20002cac
 800c468:	20002c98 	.word	0x20002c98

0800c46c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b088      	sub	sp, #32
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d10a      	bne.n	800c492 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c480:	f383 8811 	msr	BASEPRI, r3
 800c484:	f3bf 8f6f 	isb	sy
 800c488:	f3bf 8f4f 	dsb	sy
 800c48c:	613b      	str	r3, [r7, #16]
}
 800c48e:	bf00      	nop
 800c490:	e7fe      	b.n	800c490 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d10a      	bne.n	800c4ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c49c:	f383 8811 	msr	BASEPRI, r3
 800c4a0:	f3bf 8f6f 	isb	sy
 800c4a4:	f3bf 8f4f 	dsb	sy
 800c4a8:	60fb      	str	r3, [r7, #12]
}
 800c4aa:	bf00      	nop
 800c4ac:	e7fe      	b.n	800c4ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c4ae:	f001 f839 	bl	800d524 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c4b2:	4b1d      	ldr	r3, [pc, #116]	; (800c528 <xTaskCheckForTimeOut+0xbc>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	69ba      	ldr	r2, [r7, #24]
 800c4be:	1ad3      	subs	r3, r2, r3
 800c4c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4ca:	d102      	bne.n	800c4d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	61fb      	str	r3, [r7, #28]
 800c4d0:	e023      	b.n	800c51a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681a      	ldr	r2, [r3, #0]
 800c4d6:	4b15      	ldr	r3, [pc, #84]	; (800c52c <xTaskCheckForTimeOut+0xc0>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d007      	beq.n	800c4ee <xTaskCheckForTimeOut+0x82>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	69ba      	ldr	r2, [r7, #24]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d302      	bcc.n	800c4ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	61fb      	str	r3, [r7, #28]
 800c4ec:	e015      	b.n	800c51a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	697a      	ldr	r2, [r7, #20]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d20b      	bcs.n	800c510 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	1ad2      	subs	r2, r2, r3
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f7ff ff9b 	bl	800c440 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c50a:	2300      	movs	r3, #0
 800c50c:	61fb      	str	r3, [r7, #28]
 800c50e:	e004      	b.n	800c51a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	2200      	movs	r2, #0
 800c514:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c516:	2301      	movs	r3, #1
 800c518:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c51a:	f001 f833 	bl	800d584 <vPortExitCritical>

	return xReturn;
 800c51e:	69fb      	ldr	r3, [r7, #28]
}
 800c520:	4618      	mov	r0, r3
 800c522:	3720      	adds	r7, #32
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}
 800c528:	20002c98 	.word	0x20002c98
 800c52c:	20002cac 	.word	0x20002cac

0800c530 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c530:	b480      	push	{r7}
 800c532:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c534:	4b03      	ldr	r3, [pc, #12]	; (800c544 <vTaskMissedYield+0x14>)
 800c536:	2201      	movs	r2, #1
 800c538:	601a      	str	r2, [r3, #0]
}
 800c53a:	bf00      	nop
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr
 800c544:	20002ca8 	.word	0x20002ca8

0800c548 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c550:	f000 f852 	bl	800c5f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c554:	4b06      	ldr	r3, [pc, #24]	; (800c570 <prvIdleTask+0x28>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d9f9      	bls.n	800c550 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c55c:	4b05      	ldr	r3, [pc, #20]	; (800c574 <prvIdleTask+0x2c>)
 800c55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c562:	601a      	str	r2, [r3, #0]
 800c564:	f3bf 8f4f 	dsb	sy
 800c568:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c56c:	e7f0      	b.n	800c550 <prvIdleTask+0x8>
 800c56e:	bf00      	nop
 800c570:	200027c4 	.word	0x200027c4
 800c574:	e000ed04 	.word	0xe000ed04

0800c578 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c57e:	2300      	movs	r3, #0
 800c580:	607b      	str	r3, [r7, #4]
 800c582:	e00c      	b.n	800c59e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	4613      	mov	r3, r2
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	4413      	add	r3, r2
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	4a12      	ldr	r2, [pc, #72]	; (800c5d8 <prvInitialiseTaskLists+0x60>)
 800c590:	4413      	add	r3, r2
 800c592:	4618      	mov	r0, r3
 800c594:	f7fe fa90 	bl	800aab8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	3301      	adds	r3, #1
 800c59c:	607b      	str	r3, [r7, #4]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2b37      	cmp	r3, #55	; 0x37
 800c5a2:	d9ef      	bls.n	800c584 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c5a4:	480d      	ldr	r0, [pc, #52]	; (800c5dc <prvInitialiseTaskLists+0x64>)
 800c5a6:	f7fe fa87 	bl	800aab8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c5aa:	480d      	ldr	r0, [pc, #52]	; (800c5e0 <prvInitialiseTaskLists+0x68>)
 800c5ac:	f7fe fa84 	bl	800aab8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c5b0:	480c      	ldr	r0, [pc, #48]	; (800c5e4 <prvInitialiseTaskLists+0x6c>)
 800c5b2:	f7fe fa81 	bl	800aab8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c5b6:	480c      	ldr	r0, [pc, #48]	; (800c5e8 <prvInitialiseTaskLists+0x70>)
 800c5b8:	f7fe fa7e 	bl	800aab8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c5bc:	480b      	ldr	r0, [pc, #44]	; (800c5ec <prvInitialiseTaskLists+0x74>)
 800c5be:	f7fe fa7b 	bl	800aab8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c5c2:	4b0b      	ldr	r3, [pc, #44]	; (800c5f0 <prvInitialiseTaskLists+0x78>)
 800c5c4:	4a05      	ldr	r2, [pc, #20]	; (800c5dc <prvInitialiseTaskLists+0x64>)
 800c5c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c5c8:	4b0a      	ldr	r3, [pc, #40]	; (800c5f4 <prvInitialiseTaskLists+0x7c>)
 800c5ca:	4a05      	ldr	r2, [pc, #20]	; (800c5e0 <prvInitialiseTaskLists+0x68>)
 800c5cc:	601a      	str	r2, [r3, #0]
}
 800c5ce:	bf00      	nop
 800c5d0:	3708      	adds	r7, #8
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	200027c4 	.word	0x200027c4
 800c5dc:	20002c24 	.word	0x20002c24
 800c5e0:	20002c38 	.word	0x20002c38
 800c5e4:	20002c54 	.word	0x20002c54
 800c5e8:	20002c68 	.word	0x20002c68
 800c5ec:	20002c80 	.word	0x20002c80
 800c5f0:	20002c4c 	.word	0x20002c4c
 800c5f4:	20002c50 	.word	0x20002c50

0800c5f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c5fe:	e019      	b.n	800c634 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c600:	f000 ff90 	bl	800d524 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c604:	4b10      	ldr	r3, [pc, #64]	; (800c648 <prvCheckTasksWaitingTermination+0x50>)
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	3304      	adds	r3, #4
 800c610:	4618      	mov	r0, r3
 800c612:	f7fe fadb 	bl	800abcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c616:	4b0d      	ldr	r3, [pc, #52]	; (800c64c <prvCheckTasksWaitingTermination+0x54>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	3b01      	subs	r3, #1
 800c61c:	4a0b      	ldr	r2, [pc, #44]	; (800c64c <prvCheckTasksWaitingTermination+0x54>)
 800c61e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c620:	4b0b      	ldr	r3, [pc, #44]	; (800c650 <prvCheckTasksWaitingTermination+0x58>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	3b01      	subs	r3, #1
 800c626:	4a0a      	ldr	r2, [pc, #40]	; (800c650 <prvCheckTasksWaitingTermination+0x58>)
 800c628:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c62a:	f000 ffab 	bl	800d584 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 f810 	bl	800c654 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c634:	4b06      	ldr	r3, [pc, #24]	; (800c650 <prvCheckTasksWaitingTermination+0x58>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1e1      	bne.n	800c600 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c63c:	bf00      	nop
 800c63e:	bf00      	nop
 800c640:	3708      	adds	r7, #8
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	20002c68 	.word	0x20002c68
 800c64c:	20002c94 	.word	0x20002c94
 800c650:	20002c7c 	.word	0x20002c7c

0800c654 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	3364      	adds	r3, #100	; 0x64
 800c660:	4618      	mov	r0, r3
 800c662:	f001 fabb 	bl	800dbdc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d108      	bne.n	800c682 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c674:	4618      	mov	r0, r3
 800c676:	f001 f943 	bl	800d900 <vPortFree>
				vPortFree( pxTCB );
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f001 f940 	bl	800d900 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c680:	e018      	b.n	800c6b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d103      	bne.n	800c694 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f001 f937 	bl	800d900 <vPortFree>
	}
 800c692:	e00f      	b.n	800c6b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c69a:	2b02      	cmp	r3, #2
 800c69c:	d00a      	beq.n	800c6b4 <prvDeleteTCB+0x60>
	__asm volatile
 800c69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a2:	f383 8811 	msr	BASEPRI, r3
 800c6a6:	f3bf 8f6f 	isb	sy
 800c6aa:	f3bf 8f4f 	dsb	sy
 800c6ae:	60fb      	str	r3, [r7, #12]
}
 800c6b0:	bf00      	nop
 800c6b2:	e7fe      	b.n	800c6b2 <prvDeleteTCB+0x5e>
	}
 800c6b4:	bf00      	nop
 800c6b6:	3710      	adds	r7, #16
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6c2:	4b0c      	ldr	r3, [pc, #48]	; (800c6f4 <prvResetNextTaskUnblockTime+0x38>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d104      	bne.n	800c6d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c6cc:	4b0a      	ldr	r3, [pc, #40]	; (800c6f8 <prvResetNextTaskUnblockTime+0x3c>)
 800c6ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c6d4:	e008      	b.n	800c6e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6d6:	4b07      	ldr	r3, [pc, #28]	; (800c6f4 <prvResetNextTaskUnblockTime+0x38>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	68db      	ldr	r3, [r3, #12]
 800c6de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	4a04      	ldr	r2, [pc, #16]	; (800c6f8 <prvResetNextTaskUnblockTime+0x3c>)
 800c6e6:	6013      	str	r3, [r2, #0]
}
 800c6e8:	bf00      	nop
 800c6ea:	370c      	adds	r7, #12
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr
 800c6f4:	20002c4c 	.word	0x20002c4c
 800c6f8:	20002cb4 	.word	0x20002cb4

0800c6fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b083      	sub	sp, #12
 800c700:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c702:	4b0b      	ldr	r3, [pc, #44]	; (800c730 <xTaskGetSchedulerState+0x34>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d102      	bne.n	800c710 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c70a:	2301      	movs	r3, #1
 800c70c:	607b      	str	r3, [r7, #4]
 800c70e:	e008      	b.n	800c722 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c710:	4b08      	ldr	r3, [pc, #32]	; (800c734 <xTaskGetSchedulerState+0x38>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d102      	bne.n	800c71e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c718:	2302      	movs	r3, #2
 800c71a:	607b      	str	r3, [r7, #4]
 800c71c:	e001      	b.n	800c722 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c71e:	2300      	movs	r3, #0
 800c720:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c722:	687b      	ldr	r3, [r7, #4]
	}
 800c724:	4618      	mov	r0, r3
 800c726:	370c      	adds	r7, #12
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr
 800c730:	20002ca0 	.word	0x20002ca0
 800c734:	20002cbc 	.word	0x20002cbc

0800c738 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c744:	2300      	movs	r3, #0
 800c746:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d051      	beq.n	800c7f2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c752:	4b2a      	ldr	r3, [pc, #168]	; (800c7fc <xTaskPriorityInherit+0xc4>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c758:	429a      	cmp	r2, r3
 800c75a:	d241      	bcs.n	800c7e0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	699b      	ldr	r3, [r3, #24]
 800c760:	2b00      	cmp	r3, #0
 800c762:	db06      	blt.n	800c772 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c764:	4b25      	ldr	r3, [pc, #148]	; (800c7fc <xTaskPriorityInherit+0xc4>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c76a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	6959      	ldr	r1, [r3, #20]
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c77a:	4613      	mov	r3, r2
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	4413      	add	r3, r2
 800c780:	009b      	lsls	r3, r3, #2
 800c782:	4a1f      	ldr	r2, [pc, #124]	; (800c800 <xTaskPriorityInherit+0xc8>)
 800c784:	4413      	add	r3, r2
 800c786:	4299      	cmp	r1, r3
 800c788:	d122      	bne.n	800c7d0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	3304      	adds	r3, #4
 800c78e:	4618      	mov	r0, r3
 800c790:	f7fe fa1c 	bl	800abcc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c794:	4b19      	ldr	r3, [pc, #100]	; (800c7fc <xTaskPriorityInherit+0xc4>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7a2:	4b18      	ldr	r3, [pc, #96]	; (800c804 <xTaskPriorityInherit+0xcc>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d903      	bls.n	800c7b2 <xTaskPriorityInherit+0x7a>
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ae:	4a15      	ldr	r2, [pc, #84]	; (800c804 <xTaskPriorityInherit+0xcc>)
 800c7b0:	6013      	str	r3, [r2, #0]
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7b6:	4613      	mov	r3, r2
 800c7b8:	009b      	lsls	r3, r3, #2
 800c7ba:	4413      	add	r3, r2
 800c7bc:	009b      	lsls	r3, r3, #2
 800c7be:	4a10      	ldr	r2, [pc, #64]	; (800c800 <xTaskPriorityInherit+0xc8>)
 800c7c0:	441a      	add	r2, r3
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	4610      	mov	r0, r2
 800c7ca:	f7fe f9a2 	bl	800ab12 <vListInsertEnd>
 800c7ce:	e004      	b.n	800c7da <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c7d0:	4b0a      	ldr	r3, [pc, #40]	; (800c7fc <xTaskPriorityInherit+0xc4>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	60fb      	str	r3, [r7, #12]
 800c7de:	e008      	b.n	800c7f2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c7e4:	4b05      	ldr	r3, [pc, #20]	; (800c7fc <xTaskPriorityInherit+0xc4>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d201      	bcs.n	800c7f2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
	}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3710      	adds	r7, #16
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	200027c0 	.word	0x200027c0
 800c800:	200027c4 	.word	0x200027c4
 800c804:	20002c9c 	.word	0x20002c9c

0800c808 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b086      	sub	sp, #24
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c814:	2300      	movs	r3, #0
 800c816:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d056      	beq.n	800c8cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c81e:	4b2e      	ldr	r3, [pc, #184]	; (800c8d8 <xTaskPriorityDisinherit+0xd0>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	693a      	ldr	r2, [r7, #16]
 800c824:	429a      	cmp	r2, r3
 800c826:	d00a      	beq.n	800c83e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82c:	f383 8811 	msr	BASEPRI, r3
 800c830:	f3bf 8f6f 	isb	sy
 800c834:	f3bf 8f4f 	dsb	sy
 800c838:	60fb      	str	r3, [r7, #12]
}
 800c83a:	bf00      	nop
 800c83c:	e7fe      	b.n	800c83c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c842:	2b00      	cmp	r3, #0
 800c844:	d10a      	bne.n	800c85c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84a:	f383 8811 	msr	BASEPRI, r3
 800c84e:	f3bf 8f6f 	isb	sy
 800c852:	f3bf 8f4f 	dsb	sy
 800c856:	60bb      	str	r3, [r7, #8]
}
 800c858:	bf00      	nop
 800c85a:	e7fe      	b.n	800c85a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c860:	1e5a      	subs	r2, r3, #1
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c86e:	429a      	cmp	r2, r3
 800c870:	d02c      	beq.n	800c8cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c876:	2b00      	cmp	r3, #0
 800c878:	d128      	bne.n	800c8cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	3304      	adds	r3, #4
 800c87e:	4618      	mov	r0, r3
 800c880:	f7fe f9a4 	bl	800abcc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c890:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c89c:	4b0f      	ldr	r3, [pc, #60]	; (800c8dc <xTaskPriorityDisinherit+0xd4>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d903      	bls.n	800c8ac <xTaskPriorityDisinherit+0xa4>
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a8:	4a0c      	ldr	r2, [pc, #48]	; (800c8dc <xTaskPriorityDisinherit+0xd4>)
 800c8aa:	6013      	str	r3, [r2, #0]
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	4413      	add	r3, r2
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	4a09      	ldr	r2, [pc, #36]	; (800c8e0 <xTaskPriorityDisinherit+0xd8>)
 800c8ba:	441a      	add	r2, r3
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	3304      	adds	r3, #4
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	4610      	mov	r0, r2
 800c8c4:	f7fe f925 	bl	800ab12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c8cc:	697b      	ldr	r3, [r7, #20]
	}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3718      	adds	r7, #24
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	200027c0 	.word	0x200027c0
 800c8dc:	20002c9c 	.word	0x20002c9c
 800c8e0:	200027c4 	.word	0x200027c4

0800c8e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b088      	sub	sp, #32
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d06a      	beq.n	800c9d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c8fc:	69bb      	ldr	r3, [r7, #24]
 800c8fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c900:	2b00      	cmp	r3, #0
 800c902:	d10a      	bne.n	800c91a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c908:	f383 8811 	msr	BASEPRI, r3
 800c90c:	f3bf 8f6f 	isb	sy
 800c910:	f3bf 8f4f 	dsb	sy
 800c914:	60fb      	str	r3, [r7, #12]
}
 800c916:	bf00      	nop
 800c918:	e7fe      	b.n	800c918 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c91e:	683a      	ldr	r2, [r7, #0]
 800c920:	429a      	cmp	r2, r3
 800c922:	d902      	bls.n	800c92a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	61fb      	str	r3, [r7, #28]
 800c928:	e002      	b.n	800c930 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c92e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c934:	69fa      	ldr	r2, [r7, #28]
 800c936:	429a      	cmp	r2, r3
 800c938:	d04b      	beq.n	800c9d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c93a:	69bb      	ldr	r3, [r7, #24]
 800c93c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c93e:	697a      	ldr	r2, [r7, #20]
 800c940:	429a      	cmp	r2, r3
 800c942:	d146      	bne.n	800c9d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c944:	4b25      	ldr	r3, [pc, #148]	; (800c9dc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	69ba      	ldr	r2, [r7, #24]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d10a      	bne.n	800c964 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c952:	f383 8811 	msr	BASEPRI, r3
 800c956:	f3bf 8f6f 	isb	sy
 800c95a:	f3bf 8f4f 	dsb	sy
 800c95e:	60bb      	str	r3, [r7, #8]
}
 800c960:	bf00      	nop
 800c962:	e7fe      	b.n	800c962 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c964:	69bb      	ldr	r3, [r7, #24]
 800c966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c968:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c96a:	69bb      	ldr	r3, [r7, #24]
 800c96c:	69fa      	ldr	r2, [r7, #28]
 800c96e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c970:	69bb      	ldr	r3, [r7, #24]
 800c972:	699b      	ldr	r3, [r3, #24]
 800c974:	2b00      	cmp	r3, #0
 800c976:	db04      	blt.n	800c982 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c97e:	69bb      	ldr	r3, [r7, #24]
 800c980:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c982:	69bb      	ldr	r3, [r7, #24]
 800c984:	6959      	ldr	r1, [r3, #20]
 800c986:	693a      	ldr	r2, [r7, #16]
 800c988:	4613      	mov	r3, r2
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	4413      	add	r3, r2
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	4a13      	ldr	r2, [pc, #76]	; (800c9e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c992:	4413      	add	r3, r2
 800c994:	4299      	cmp	r1, r3
 800c996:	d11c      	bne.n	800c9d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c998:	69bb      	ldr	r3, [r7, #24]
 800c99a:	3304      	adds	r3, #4
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7fe f915 	bl	800abcc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c9a2:	69bb      	ldr	r3, [r7, #24]
 800c9a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9a6:	4b0f      	ldr	r3, [pc, #60]	; (800c9e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d903      	bls.n	800c9b6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b2:	4a0c      	ldr	r2, [pc, #48]	; (800c9e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c9b4:	6013      	str	r3, [r2, #0]
 800c9b6:	69bb      	ldr	r3, [r7, #24]
 800c9b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9ba:	4613      	mov	r3, r2
 800c9bc:	009b      	lsls	r3, r3, #2
 800c9be:	4413      	add	r3, r2
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	4a07      	ldr	r2, [pc, #28]	; (800c9e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c9c4:	441a      	add	r2, r3
 800c9c6:	69bb      	ldr	r3, [r7, #24]
 800c9c8:	3304      	adds	r3, #4
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	4610      	mov	r0, r2
 800c9ce:	f7fe f8a0 	bl	800ab12 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c9d2:	bf00      	nop
 800c9d4:	3720      	adds	r7, #32
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	200027c0 	.word	0x200027c0
 800c9e0:	200027c4 	.word	0x200027c4
 800c9e4:	20002c9c 	.word	0x20002c9c

0800c9e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c9e8:	b480      	push	{r7}
 800c9ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c9ec:	4b07      	ldr	r3, [pc, #28]	; (800ca0c <pvTaskIncrementMutexHeldCount+0x24>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d004      	beq.n	800c9fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c9f4:	4b05      	ldr	r3, [pc, #20]	; (800ca0c <pvTaskIncrementMutexHeldCount+0x24>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c9fa:	3201      	adds	r2, #1
 800c9fc:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 800c9fe:	4b03      	ldr	r3, [pc, #12]	; (800ca0c <pvTaskIncrementMutexHeldCount+0x24>)
 800ca00:	681b      	ldr	r3, [r3, #0]
	}
 800ca02:	4618      	mov	r0, r3
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr
 800ca0c:	200027c0 	.word	0x200027c0

0800ca10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ca1a:	4b21      	ldr	r3, [pc, #132]	; (800caa0 <prvAddCurrentTaskToDelayedList+0x90>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca20:	4b20      	ldr	r3, [pc, #128]	; (800caa4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	3304      	adds	r3, #4
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7fe f8d0 	bl	800abcc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca32:	d10a      	bne.n	800ca4a <prvAddCurrentTaskToDelayedList+0x3a>
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d007      	beq.n	800ca4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca3a:	4b1a      	ldr	r3, [pc, #104]	; (800caa4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	3304      	adds	r3, #4
 800ca40:	4619      	mov	r1, r3
 800ca42:	4819      	ldr	r0, [pc, #100]	; (800caa8 <prvAddCurrentTaskToDelayedList+0x98>)
 800ca44:	f7fe f865 	bl	800ab12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ca48:	e026      	b.n	800ca98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ca4a:	68fa      	ldr	r2, [r7, #12]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	4413      	add	r3, r2
 800ca50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ca52:	4b14      	ldr	r3, [pc, #80]	; (800caa4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	68ba      	ldr	r2, [r7, #8]
 800ca58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ca5a:	68ba      	ldr	r2, [r7, #8]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d209      	bcs.n	800ca76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca62:	4b12      	ldr	r3, [pc, #72]	; (800caac <prvAddCurrentTaskToDelayedList+0x9c>)
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	4b0f      	ldr	r3, [pc, #60]	; (800caa4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	3304      	adds	r3, #4
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	4610      	mov	r0, r2
 800ca70:	f7fe f873 	bl	800ab5a <vListInsert>
}
 800ca74:	e010      	b.n	800ca98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca76:	4b0e      	ldr	r3, [pc, #56]	; (800cab0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	4b0a      	ldr	r3, [pc, #40]	; (800caa4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	3304      	adds	r3, #4
 800ca80:	4619      	mov	r1, r3
 800ca82:	4610      	mov	r0, r2
 800ca84:	f7fe f869 	bl	800ab5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ca88:	4b0a      	ldr	r3, [pc, #40]	; (800cab4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	68ba      	ldr	r2, [r7, #8]
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d202      	bcs.n	800ca98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ca92:	4a08      	ldr	r2, [pc, #32]	; (800cab4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	6013      	str	r3, [r2, #0]
}
 800ca98:	bf00      	nop
 800ca9a:	3710      	adds	r7, #16
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	20002c98 	.word	0x20002c98
 800caa4:	200027c0 	.word	0x200027c0
 800caa8:	20002c80 	.word	0x20002c80
 800caac:	20002c50 	.word	0x20002c50
 800cab0:	20002c4c 	.word	0x20002c4c
 800cab4:	20002cb4 	.word	0x20002cb4

0800cab8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b08a      	sub	sp, #40	; 0x28
 800cabc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cabe:	2300      	movs	r3, #0
 800cac0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cac2:	f000 fba1 	bl	800d208 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cac6:	4b1c      	ldr	r3, [pc, #112]	; (800cb38 <xTimerCreateTimerTask+0x80>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d021      	beq.n	800cb12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cace:	2300      	movs	r3, #0
 800cad0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cad2:	2300      	movs	r3, #0
 800cad4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cad6:	1d3a      	adds	r2, r7, #4
 800cad8:	f107 0108 	add.w	r1, r7, #8
 800cadc:	f107 030c 	add.w	r3, r7, #12
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7fd ffcf 	bl	800aa84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cae6:	6879      	ldr	r1, [r7, #4]
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	68fa      	ldr	r2, [r7, #12]
 800caec:	9202      	str	r2, [sp, #8]
 800caee:	9301      	str	r3, [sp, #4]
 800caf0:	2302      	movs	r3, #2
 800caf2:	9300      	str	r3, [sp, #0]
 800caf4:	2300      	movs	r3, #0
 800caf6:	460a      	mov	r2, r1
 800caf8:	4910      	ldr	r1, [pc, #64]	; (800cb3c <xTimerCreateTimerTask+0x84>)
 800cafa:	4811      	ldr	r0, [pc, #68]	; (800cb40 <xTimerCreateTimerTask+0x88>)
 800cafc:	f7fe ff26 	bl	800b94c <xTaskCreateStatic>
 800cb00:	4603      	mov	r3, r0
 800cb02:	4a10      	ldr	r2, [pc, #64]	; (800cb44 <xTimerCreateTimerTask+0x8c>)
 800cb04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cb06:	4b0f      	ldr	r3, [pc, #60]	; (800cb44 <xTimerCreateTimerTask+0x8c>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d001      	beq.n	800cb12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d10a      	bne.n	800cb2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cb18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb1c:	f383 8811 	msr	BASEPRI, r3
 800cb20:	f3bf 8f6f 	isb	sy
 800cb24:	f3bf 8f4f 	dsb	sy
 800cb28:	613b      	str	r3, [r7, #16]
}
 800cb2a:	bf00      	nop
 800cb2c:	e7fe      	b.n	800cb2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cb2e:	697b      	ldr	r3, [r7, #20]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3718      	adds	r7, #24
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	20002cf0 	.word	0x20002cf0
 800cb3c:	0800e848 	.word	0x0800e848
 800cb40:	0800cdb1 	.word	0x0800cdb1
 800cb44:	20002cf4 	.word	0x20002cf4

0800cb48 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b088      	sub	sp, #32
 800cb4c:	af02      	add	r7, sp, #8
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
 800cb54:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800cb56:	202c      	movs	r0, #44	; 0x2c
 800cb58:	f000 fe06 	bl	800d768 <pvPortMalloc>
 800cb5c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00d      	beq.n	800cb80 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	2200      	movs	r2, #0
 800cb68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	9301      	str	r3, [sp, #4]
 800cb70:	6a3b      	ldr	r3, [r7, #32]
 800cb72:	9300      	str	r3, [sp, #0]
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	68b9      	ldr	r1, [r7, #8]
 800cb7a:	68f8      	ldr	r0, [r7, #12]
 800cb7c:	f000 f843 	bl	800cc06 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800cb80:	697b      	ldr	r3, [r7, #20]
	}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3718      	adds	r7, #24
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b08a      	sub	sp, #40	; 0x28
 800cb8e:	af02      	add	r7, sp, #8
 800cb90:	60f8      	str	r0, [r7, #12]
 800cb92:	60b9      	str	r1, [r7, #8]
 800cb94:	607a      	str	r2, [r7, #4]
 800cb96:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800cb98:	232c      	movs	r3, #44	; 0x2c
 800cb9a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	2b2c      	cmp	r3, #44	; 0x2c
 800cba0:	d00a      	beq.n	800cbb8 <xTimerCreateStatic+0x2e>
	__asm volatile
 800cba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba6:	f383 8811 	msr	BASEPRI, r3
 800cbaa:	f3bf 8f6f 	isb	sy
 800cbae:	f3bf 8f4f 	dsb	sy
 800cbb2:	61bb      	str	r3, [r7, #24]
}
 800cbb4:	bf00      	nop
 800cbb6:	e7fe      	b.n	800cbb6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cbb8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800cbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d10a      	bne.n	800cbd6 <xTimerCreateStatic+0x4c>
	__asm volatile
 800cbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc4:	f383 8811 	msr	BASEPRI, r3
 800cbc8:	f3bf 8f6f 	isb	sy
 800cbcc:	f3bf 8f4f 	dsb	sy
 800cbd0:	617b      	str	r3, [r7, #20]
}
 800cbd2:	bf00      	nop
 800cbd4:	e7fe      	b.n	800cbd4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800cbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800cbda:	69fb      	ldr	r3, [r7, #28]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d00d      	beq.n	800cbfc <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	2202      	movs	r2, #2
 800cbe4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cbe8:	69fb      	ldr	r3, [r7, #28]
 800cbea:	9301      	str	r3, [sp, #4]
 800cbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbee:	9300      	str	r3, [sp, #0]
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	68b9      	ldr	r1, [r7, #8]
 800cbf6:	68f8      	ldr	r0, [r7, #12]
 800cbf8:	f000 f805 	bl	800cc06 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800cbfc:	69fb      	ldr	r3, [r7, #28]
	}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3720      	adds	r7, #32
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}

0800cc06 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800cc06:	b580      	push	{r7, lr}
 800cc08:	b086      	sub	sp, #24
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	60f8      	str	r0, [r7, #12]
 800cc0e:	60b9      	str	r1, [r7, #8]
 800cc10:	607a      	str	r2, [r7, #4]
 800cc12:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d10a      	bne.n	800cc30 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800cc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1e:	f383 8811 	msr	BASEPRI, r3
 800cc22:	f3bf 8f6f 	isb	sy
 800cc26:	f3bf 8f4f 	dsb	sy
 800cc2a:	617b      	str	r3, [r7, #20]
}
 800cc2c:	bf00      	nop
 800cc2e:	e7fe      	b.n	800cc2e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800cc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d01e      	beq.n	800cc74 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800cc36:	f000 fae7 	bl	800d208 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800cc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3c:	68fa      	ldr	r2, [r7, #12]
 800cc3e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800cc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc42:	68ba      	ldr	r2, [r7, #8]
 800cc44:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800cc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc48:	683a      	ldr	r2, [r7, #0]
 800cc4a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800cc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4e:	6a3a      	ldr	r2, [r7, #32]
 800cc50:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800cc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc54:	3304      	adds	r3, #4
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7fd ff4e 	bl	800aaf8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d008      	beq.n	800cc74 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800cc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc68:	f043 0304 	orr.w	r3, r3, #4
 800cc6c:	b2da      	uxtb	r2, r3
 800cc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800cc74:	bf00      	nop
 800cc76:	3718      	adds	r7, #24
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b08a      	sub	sp, #40	; 0x28
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	607a      	str	r2, [r7, #4]
 800cc88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d10a      	bne.n	800ccaa <xTimerGenericCommand+0x2e>
	__asm volatile
 800cc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc98:	f383 8811 	msr	BASEPRI, r3
 800cc9c:	f3bf 8f6f 	isb	sy
 800cca0:	f3bf 8f4f 	dsb	sy
 800cca4:	623b      	str	r3, [r7, #32]
}
 800cca6:	bf00      	nop
 800cca8:	e7fe      	b.n	800cca8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ccaa:	4b1a      	ldr	r3, [pc, #104]	; (800cd14 <xTimerGenericCommand+0x98>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d02a      	beq.n	800cd08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	2b05      	cmp	r3, #5
 800ccc2:	dc18      	bgt.n	800ccf6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ccc4:	f7ff fd1a 	bl	800c6fc <xTaskGetSchedulerState>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b02      	cmp	r3, #2
 800cccc:	d109      	bne.n	800cce2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ccce:	4b11      	ldr	r3, [pc, #68]	; (800cd14 <xTimerGenericCommand+0x98>)
 800ccd0:	6818      	ldr	r0, [r3, #0]
 800ccd2:	f107 0110 	add.w	r1, r7, #16
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccda:	f7fe f92b 	bl	800af34 <xQueueGenericSend>
 800ccde:	6278      	str	r0, [r7, #36]	; 0x24
 800cce0:	e012      	b.n	800cd08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cce2:	4b0c      	ldr	r3, [pc, #48]	; (800cd14 <xTimerGenericCommand+0x98>)
 800cce4:	6818      	ldr	r0, [r3, #0]
 800cce6:	f107 0110 	add.w	r1, r7, #16
 800ccea:	2300      	movs	r3, #0
 800ccec:	2200      	movs	r2, #0
 800ccee:	f7fe f921 	bl	800af34 <xQueueGenericSend>
 800ccf2:	6278      	str	r0, [r7, #36]	; 0x24
 800ccf4:	e008      	b.n	800cd08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ccf6:	4b07      	ldr	r3, [pc, #28]	; (800cd14 <xTimerGenericCommand+0x98>)
 800ccf8:	6818      	ldr	r0, [r3, #0]
 800ccfa:	f107 0110 	add.w	r1, r7, #16
 800ccfe:	2300      	movs	r3, #0
 800cd00:	683a      	ldr	r2, [r7, #0]
 800cd02:	f7fe fa15 	bl	800b130 <xQueueGenericSendFromISR>
 800cd06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3728      	adds	r7, #40	; 0x28
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	20002cf0 	.word	0x20002cf0

0800cd18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b088      	sub	sp, #32
 800cd1c:	af02      	add	r7, sp, #8
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd22:	4b22      	ldr	r3, [pc, #136]	; (800cdac <prvProcessExpiredTimer+0x94>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	68db      	ldr	r3, [r3, #12]
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	3304      	adds	r3, #4
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7fd ff4b 	bl	800abcc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd3c:	f003 0304 	and.w	r3, r3, #4
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d022      	beq.n	800cd8a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	699a      	ldr	r2, [r3, #24]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	18d1      	adds	r1, r2, r3
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	683a      	ldr	r2, [r7, #0]
 800cd50:	6978      	ldr	r0, [r7, #20]
 800cd52:	f000 f8d1 	bl	800cef8 <prvInsertTimerInActiveList>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d01f      	beq.n	800cd9c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	9300      	str	r3, [sp, #0]
 800cd60:	2300      	movs	r3, #0
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	2100      	movs	r1, #0
 800cd66:	6978      	ldr	r0, [r7, #20]
 800cd68:	f7ff ff88 	bl	800cc7c <xTimerGenericCommand>
 800cd6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d113      	bne.n	800cd9c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd78:	f383 8811 	msr	BASEPRI, r3
 800cd7c:	f3bf 8f6f 	isb	sy
 800cd80:	f3bf 8f4f 	dsb	sy
 800cd84:	60fb      	str	r3, [r7, #12]
}
 800cd86:	bf00      	nop
 800cd88:	e7fe      	b.n	800cd88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd90:	f023 0301 	bic.w	r3, r3, #1
 800cd94:	b2da      	uxtb	r2, r3
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	6a1b      	ldr	r3, [r3, #32]
 800cda0:	6978      	ldr	r0, [r7, #20]
 800cda2:	4798      	blx	r3
}
 800cda4:	bf00      	nop
 800cda6:	3718      	adds	r7, #24
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	20002ce8 	.word	0x20002ce8

0800cdb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cdb8:	f107 0308 	add.w	r3, r7, #8
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f000 f857 	bl	800ce70 <prvGetNextExpireTime>
 800cdc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	68f8      	ldr	r0, [r7, #12]
 800cdca:	f000 f803 	bl	800cdd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cdce:	f000 f8d5 	bl	800cf7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cdd2:	e7f1      	b.n	800cdb8 <prvTimerTask+0x8>

0800cdd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cdde:	f7ff f88f 	bl	800bf00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cde2:	f107 0308 	add.w	r3, r7, #8
 800cde6:	4618      	mov	r0, r3
 800cde8:	f000 f866 	bl	800ceb8 <prvSampleTimeNow>
 800cdec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d130      	bne.n	800ce56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d10a      	bne.n	800ce10 <prvProcessTimerOrBlockTask+0x3c>
 800cdfa:	687a      	ldr	r2, [r7, #4]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d806      	bhi.n	800ce10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ce02:	f7ff f88b 	bl	800bf1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ce06:	68f9      	ldr	r1, [r7, #12]
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f7ff ff85 	bl	800cd18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ce0e:	e024      	b.n	800ce5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d008      	beq.n	800ce28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ce16:	4b13      	ldr	r3, [pc, #76]	; (800ce64 <prvProcessTimerOrBlockTask+0x90>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d101      	bne.n	800ce24 <prvProcessTimerOrBlockTask+0x50>
 800ce20:	2301      	movs	r3, #1
 800ce22:	e000      	b.n	800ce26 <prvProcessTimerOrBlockTask+0x52>
 800ce24:	2300      	movs	r3, #0
 800ce26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ce28:	4b0f      	ldr	r3, [pc, #60]	; (800ce68 <prvProcessTimerOrBlockTask+0x94>)
 800ce2a:	6818      	ldr	r0, [r3, #0]
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	1ad3      	subs	r3, r2, r3
 800ce32:	683a      	ldr	r2, [r7, #0]
 800ce34:	4619      	mov	r1, r3
 800ce36:	f7fe fd55 	bl	800b8e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ce3a:	f7ff f86f 	bl	800bf1c <xTaskResumeAll>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d10a      	bne.n	800ce5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ce44:	4b09      	ldr	r3, [pc, #36]	; (800ce6c <prvProcessTimerOrBlockTask+0x98>)
 800ce46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce4a:	601a      	str	r2, [r3, #0]
 800ce4c:	f3bf 8f4f 	dsb	sy
 800ce50:	f3bf 8f6f 	isb	sy
}
 800ce54:	e001      	b.n	800ce5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ce56:	f7ff f861 	bl	800bf1c <xTaskResumeAll>
}
 800ce5a:	bf00      	nop
 800ce5c:	3710      	adds	r7, #16
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	20002cec 	.word	0x20002cec
 800ce68:	20002cf0 	.word	0x20002cf0
 800ce6c:	e000ed04 	.word	0xe000ed04

0800ce70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ce70:	b480      	push	{r7}
 800ce72:	b085      	sub	sp, #20
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ce78:	4b0e      	ldr	r3, [pc, #56]	; (800ceb4 <prvGetNextExpireTime+0x44>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d101      	bne.n	800ce86 <prvGetNextExpireTime+0x16>
 800ce82:	2201      	movs	r2, #1
 800ce84:	e000      	b.n	800ce88 <prvGetNextExpireTime+0x18>
 800ce86:	2200      	movs	r2, #0
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d105      	bne.n	800cea0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce94:	4b07      	ldr	r3, [pc, #28]	; (800ceb4 <prvGetNextExpireTime+0x44>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	68db      	ldr	r3, [r3, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	60fb      	str	r3, [r7, #12]
 800ce9e:	e001      	b.n	800cea4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cea0:	2300      	movs	r3, #0
 800cea2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cea4:	68fb      	ldr	r3, [r7, #12]
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3714      	adds	r7, #20
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop
 800ceb4:	20002ce8 	.word	0x20002ce8

0800ceb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cec0:	f7ff f8ca 	bl	800c058 <xTaskGetTickCount>
 800cec4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cec6:	4b0b      	ldr	r3, [pc, #44]	; (800cef4 <prvSampleTimeNow+0x3c>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	68fa      	ldr	r2, [r7, #12]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d205      	bcs.n	800cedc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ced0:	f000 f936 	bl	800d140 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2201      	movs	r2, #1
 800ced8:	601a      	str	r2, [r3, #0]
 800ceda:	e002      	b.n	800cee2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2200      	movs	r2, #0
 800cee0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cee2:	4a04      	ldr	r2, [pc, #16]	; (800cef4 <prvSampleTimeNow+0x3c>)
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cee8:	68fb      	ldr	r3, [r7, #12]
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3710      	adds	r7, #16
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	20002cf8 	.word	0x20002cf8

0800cef8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b086      	sub	sp, #24
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	607a      	str	r2, [r7, #4]
 800cf04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cf06:	2300      	movs	r3, #0
 800cf08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	68ba      	ldr	r2, [r7, #8]
 800cf0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	68fa      	ldr	r2, [r7, #12]
 800cf14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cf16:	68ba      	ldr	r2, [r7, #8]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d812      	bhi.n	800cf44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	1ad2      	subs	r2, r2, r3
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	699b      	ldr	r3, [r3, #24]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d302      	bcc.n	800cf32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	617b      	str	r3, [r7, #20]
 800cf30:	e01b      	b.n	800cf6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cf32:	4b10      	ldr	r3, [pc, #64]	; (800cf74 <prvInsertTimerInActiveList+0x7c>)
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	3304      	adds	r3, #4
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	4610      	mov	r0, r2
 800cf3e:	f7fd fe0c 	bl	800ab5a <vListInsert>
 800cf42:	e012      	b.n	800cf6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d206      	bcs.n	800cf5a <prvInsertTimerInActiveList+0x62>
 800cf4c:	68ba      	ldr	r2, [r7, #8]
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d302      	bcc.n	800cf5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cf54:	2301      	movs	r3, #1
 800cf56:	617b      	str	r3, [r7, #20]
 800cf58:	e007      	b.n	800cf6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf5a:	4b07      	ldr	r3, [pc, #28]	; (800cf78 <prvInsertTimerInActiveList+0x80>)
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	3304      	adds	r3, #4
 800cf62:	4619      	mov	r1, r3
 800cf64:	4610      	mov	r0, r2
 800cf66:	f7fd fdf8 	bl	800ab5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cf6a:	697b      	ldr	r3, [r7, #20]
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3718      	adds	r7, #24
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	20002cec 	.word	0x20002cec
 800cf78:	20002ce8 	.word	0x20002ce8

0800cf7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b08e      	sub	sp, #56	; 0x38
 800cf80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf82:	e0ca      	b.n	800d11a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	da18      	bge.n	800cfbc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cf8a:	1d3b      	adds	r3, r7, #4
 800cf8c:	3304      	adds	r3, #4
 800cf8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cf90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d10a      	bne.n	800cfac <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cf96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9a:	f383 8811 	msr	BASEPRI, r3
 800cf9e:	f3bf 8f6f 	isb	sy
 800cfa2:	f3bf 8f4f 	dsb	sy
 800cfa6:	61fb      	str	r3, [r7, #28]
}
 800cfa8:	bf00      	nop
 800cfaa:	e7fe      	b.n	800cfaa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfb2:	6850      	ldr	r0, [r2, #4]
 800cfb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfb6:	6892      	ldr	r2, [r2, #8]
 800cfb8:	4611      	mov	r1, r2
 800cfba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	f2c0 80aa 	blt.w	800d118 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfca:	695b      	ldr	r3, [r3, #20]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d004      	beq.n	800cfda <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd2:	3304      	adds	r3, #4
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f7fd fdf9 	bl	800abcc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cfda:	463b      	mov	r3, r7
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7ff ff6b 	bl	800ceb8 <prvSampleTimeNow>
 800cfe2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2b09      	cmp	r3, #9
 800cfe8:	f200 8097 	bhi.w	800d11a <prvProcessReceivedCommands+0x19e>
 800cfec:	a201      	add	r2, pc, #4	; (adr r2, 800cff4 <prvProcessReceivedCommands+0x78>)
 800cfee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cff2:	bf00      	nop
 800cff4:	0800d01d 	.word	0x0800d01d
 800cff8:	0800d01d 	.word	0x0800d01d
 800cffc:	0800d01d 	.word	0x0800d01d
 800d000:	0800d091 	.word	0x0800d091
 800d004:	0800d0a5 	.word	0x0800d0a5
 800d008:	0800d0ef 	.word	0x0800d0ef
 800d00c:	0800d01d 	.word	0x0800d01d
 800d010:	0800d01d 	.word	0x0800d01d
 800d014:	0800d091 	.word	0x0800d091
 800d018:	0800d0a5 	.word	0x0800d0a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d022:	f043 0301 	orr.w	r3, r3, #1
 800d026:	b2da      	uxtb	r2, r3
 800d028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d02e:	68ba      	ldr	r2, [r7, #8]
 800d030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d032:	699b      	ldr	r3, [r3, #24]
 800d034:	18d1      	adds	r1, r2, r3
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d03a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d03c:	f7ff ff5c 	bl	800cef8 <prvInsertTimerInActiveList>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d069      	beq.n	800d11a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d048:	6a1b      	ldr	r3, [r3, #32]
 800d04a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d04c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d054:	f003 0304 	and.w	r3, r3, #4
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d05e      	beq.n	800d11a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d05c:	68ba      	ldr	r2, [r7, #8]
 800d05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d060:	699b      	ldr	r3, [r3, #24]
 800d062:	441a      	add	r2, r3
 800d064:	2300      	movs	r3, #0
 800d066:	9300      	str	r3, [sp, #0]
 800d068:	2300      	movs	r3, #0
 800d06a:	2100      	movs	r1, #0
 800d06c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d06e:	f7ff fe05 	bl	800cc7c <xTimerGenericCommand>
 800d072:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d074:	6a3b      	ldr	r3, [r7, #32]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d14f      	bne.n	800d11a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07e:	f383 8811 	msr	BASEPRI, r3
 800d082:	f3bf 8f6f 	isb	sy
 800d086:	f3bf 8f4f 	dsb	sy
 800d08a:	61bb      	str	r3, [r7, #24]
}
 800d08c:	bf00      	nop
 800d08e:	e7fe      	b.n	800d08e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d092:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d096:	f023 0301 	bic.w	r3, r3, #1
 800d09a:	b2da      	uxtb	r2, r3
 800d09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d09e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d0a2:	e03a      	b.n	800d11a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0aa:	f043 0301 	orr.w	r3, r3, #1
 800d0ae:	b2da      	uxtb	r2, r3
 800d0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d0b6:	68ba      	ldr	r2, [r7, #8]
 800d0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0be:	699b      	ldr	r3, [r3, #24]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10a      	bne.n	800d0da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c8:	f383 8811 	msr	BASEPRI, r3
 800d0cc:	f3bf 8f6f 	isb	sy
 800d0d0:	f3bf 8f4f 	dsb	sy
 800d0d4:	617b      	str	r3, [r7, #20]
}
 800d0d6:	bf00      	nop
 800d0d8:	e7fe      	b.n	800d0d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0dc:	699a      	ldr	r2, [r3, #24]
 800d0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e0:	18d1      	adds	r1, r2, r3
 800d0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0e8:	f7ff ff06 	bl	800cef8 <prvInsertTimerInActiveList>
					break;
 800d0ec:	e015      	b.n	800d11a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0f4:	f003 0302 	and.w	r3, r3, #2
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d103      	bne.n	800d104 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d0fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0fe:	f000 fbff 	bl	800d900 <vPortFree>
 800d102:	e00a      	b.n	800d11a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d106:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d10a:	f023 0301 	bic.w	r3, r3, #1
 800d10e:	b2da      	uxtb	r2, r3
 800d110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d112:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d116:	e000      	b.n	800d11a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d118:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d11a:	4b08      	ldr	r3, [pc, #32]	; (800d13c <prvProcessReceivedCommands+0x1c0>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	1d39      	adds	r1, r7, #4
 800d120:	2200      	movs	r2, #0
 800d122:	4618      	mov	r0, r3
 800d124:	f7fe f8a0 	bl	800b268 <xQueueReceive>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	f47f af2a 	bne.w	800cf84 <prvProcessReceivedCommands+0x8>
	}
}
 800d130:	bf00      	nop
 800d132:	bf00      	nop
 800d134:	3730      	adds	r7, #48	; 0x30
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	20002cf0 	.word	0x20002cf0

0800d140 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b088      	sub	sp, #32
 800d144:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d146:	e048      	b.n	800d1da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d148:	4b2d      	ldr	r3, [pc, #180]	; (800d200 <prvSwitchTimerLists+0xc0>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d152:	4b2b      	ldr	r3, [pc, #172]	; (800d200 <prvSwitchTimerLists+0xc0>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	3304      	adds	r3, #4
 800d160:	4618      	mov	r0, r3
 800d162:	f7fd fd33 	bl	800abcc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	6a1b      	ldr	r3, [r3, #32]
 800d16a:	68f8      	ldr	r0, [r7, #12]
 800d16c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d174:	f003 0304 	and.w	r3, r3, #4
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d02e      	beq.n	800d1da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	699b      	ldr	r3, [r3, #24]
 800d180:	693a      	ldr	r2, [r7, #16]
 800d182:	4413      	add	r3, r2
 800d184:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d186:	68ba      	ldr	r2, [r7, #8]
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d90e      	bls.n	800d1ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	68ba      	ldr	r2, [r7, #8]
 800d192:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	68fa      	ldr	r2, [r7, #12]
 800d198:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d19a:	4b19      	ldr	r3, [pc, #100]	; (800d200 <prvSwitchTimerLists+0xc0>)
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	3304      	adds	r3, #4
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	4610      	mov	r0, r2
 800d1a6:	f7fd fcd8 	bl	800ab5a <vListInsert>
 800d1aa:	e016      	b.n	800d1da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	9300      	str	r3, [sp, #0]
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	693a      	ldr	r2, [r7, #16]
 800d1b4:	2100      	movs	r1, #0
 800d1b6:	68f8      	ldr	r0, [r7, #12]
 800d1b8:	f7ff fd60 	bl	800cc7c <xTimerGenericCommand>
 800d1bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d10a      	bne.n	800d1da <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c8:	f383 8811 	msr	BASEPRI, r3
 800d1cc:	f3bf 8f6f 	isb	sy
 800d1d0:	f3bf 8f4f 	dsb	sy
 800d1d4:	603b      	str	r3, [r7, #0]
}
 800d1d6:	bf00      	nop
 800d1d8:	e7fe      	b.n	800d1d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d1da:	4b09      	ldr	r3, [pc, #36]	; (800d200 <prvSwitchTimerLists+0xc0>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d1b1      	bne.n	800d148 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d1e4:	4b06      	ldr	r3, [pc, #24]	; (800d200 <prvSwitchTimerLists+0xc0>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d1ea:	4b06      	ldr	r3, [pc, #24]	; (800d204 <prvSwitchTimerLists+0xc4>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a04      	ldr	r2, [pc, #16]	; (800d200 <prvSwitchTimerLists+0xc0>)
 800d1f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d1f2:	4a04      	ldr	r2, [pc, #16]	; (800d204 <prvSwitchTimerLists+0xc4>)
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	6013      	str	r3, [r2, #0]
}
 800d1f8:	bf00      	nop
 800d1fa:	3718      	adds	r7, #24
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}
 800d200:	20002ce8 	.word	0x20002ce8
 800d204:	20002cec 	.word	0x20002cec

0800d208 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d20e:	f000 f989 	bl	800d524 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d212:	4b15      	ldr	r3, [pc, #84]	; (800d268 <prvCheckForValidListAndQueue+0x60>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d120      	bne.n	800d25c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d21a:	4814      	ldr	r0, [pc, #80]	; (800d26c <prvCheckForValidListAndQueue+0x64>)
 800d21c:	f7fd fc4c 	bl	800aab8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d220:	4813      	ldr	r0, [pc, #76]	; (800d270 <prvCheckForValidListAndQueue+0x68>)
 800d222:	f7fd fc49 	bl	800aab8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d226:	4b13      	ldr	r3, [pc, #76]	; (800d274 <prvCheckForValidListAndQueue+0x6c>)
 800d228:	4a10      	ldr	r2, [pc, #64]	; (800d26c <prvCheckForValidListAndQueue+0x64>)
 800d22a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d22c:	4b12      	ldr	r3, [pc, #72]	; (800d278 <prvCheckForValidListAndQueue+0x70>)
 800d22e:	4a10      	ldr	r2, [pc, #64]	; (800d270 <prvCheckForValidListAndQueue+0x68>)
 800d230:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d232:	2300      	movs	r3, #0
 800d234:	9300      	str	r3, [sp, #0]
 800d236:	4b11      	ldr	r3, [pc, #68]	; (800d27c <prvCheckForValidListAndQueue+0x74>)
 800d238:	4a11      	ldr	r2, [pc, #68]	; (800d280 <prvCheckForValidListAndQueue+0x78>)
 800d23a:	2110      	movs	r1, #16
 800d23c:	200a      	movs	r0, #10
 800d23e:	f7fd fd57 	bl	800acf0 <xQueueGenericCreateStatic>
 800d242:	4603      	mov	r3, r0
 800d244:	4a08      	ldr	r2, [pc, #32]	; (800d268 <prvCheckForValidListAndQueue+0x60>)
 800d246:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d248:	4b07      	ldr	r3, [pc, #28]	; (800d268 <prvCheckForValidListAndQueue+0x60>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d005      	beq.n	800d25c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d250:	4b05      	ldr	r3, [pc, #20]	; (800d268 <prvCheckForValidListAndQueue+0x60>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	490b      	ldr	r1, [pc, #44]	; (800d284 <prvCheckForValidListAndQueue+0x7c>)
 800d256:	4618      	mov	r0, r3
 800d258:	f7fe fb1a 	bl	800b890 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d25c:	f000 f992 	bl	800d584 <vPortExitCritical>
}
 800d260:	bf00      	nop
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	20002cf0 	.word	0x20002cf0
 800d26c:	20002cc0 	.word	0x20002cc0
 800d270:	20002cd4 	.word	0x20002cd4
 800d274:	20002ce8 	.word	0x20002ce8
 800d278:	20002cec 	.word	0x20002cec
 800d27c:	20002d9c 	.word	0x20002d9c
 800d280:	20002cfc 	.word	0x20002cfc
 800d284:	0800e850 	.word	0x0800e850

0800d288 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b086      	sub	sp, #24
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d10a      	bne.n	800d2b0 <pvTimerGetTimerID+0x28>
	__asm volatile
 800d29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29e:	f383 8811 	msr	BASEPRI, r3
 800d2a2:	f3bf 8f6f 	isb	sy
 800d2a6:	f3bf 8f4f 	dsb	sy
 800d2aa:	60fb      	str	r3, [r7, #12]
}
 800d2ac:	bf00      	nop
 800d2ae:	e7fe      	b.n	800d2ae <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800d2b0:	f000 f938 	bl	800d524 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	69db      	ldr	r3, [r3, #28]
 800d2b8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d2ba:	f000 f963 	bl	800d584 <vPortExitCritical>

	return pvReturn;
 800d2be:	693b      	ldr	r3, [r7, #16]
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3718      	adds	r7, #24
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b085      	sub	sp, #20
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	60f8      	str	r0, [r7, #12]
 800d2d0:	60b9      	str	r1, [r7, #8]
 800d2d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	3b04      	subs	r3, #4
 800d2d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d2e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	3b04      	subs	r3, #4
 800d2e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	f023 0201 	bic.w	r2, r3, #1
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	3b04      	subs	r3, #4
 800d2f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d2f8:	4a0c      	ldr	r2, [pc, #48]	; (800d32c <pxPortInitialiseStack+0x64>)
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	3b14      	subs	r3, #20
 800d302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d304:	687a      	ldr	r2, [r7, #4]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	3b04      	subs	r3, #4
 800d30e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f06f 0202 	mvn.w	r2, #2
 800d316:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	3b20      	subs	r3, #32
 800d31c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d31e:	68fb      	ldr	r3, [r7, #12]
}
 800d320:	4618      	mov	r0, r3
 800d322:	3714      	adds	r7, #20
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr
 800d32c:	0800d331 	.word	0x0800d331

0800d330 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d330:	b480      	push	{r7}
 800d332:	b085      	sub	sp, #20
 800d334:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d336:	2300      	movs	r3, #0
 800d338:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d33a:	4b12      	ldr	r3, [pc, #72]	; (800d384 <prvTaskExitError+0x54>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d342:	d00a      	beq.n	800d35a <prvTaskExitError+0x2a>
	__asm volatile
 800d344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d348:	f383 8811 	msr	BASEPRI, r3
 800d34c:	f3bf 8f6f 	isb	sy
 800d350:	f3bf 8f4f 	dsb	sy
 800d354:	60fb      	str	r3, [r7, #12]
}
 800d356:	bf00      	nop
 800d358:	e7fe      	b.n	800d358 <prvTaskExitError+0x28>
	__asm volatile
 800d35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35e:	f383 8811 	msr	BASEPRI, r3
 800d362:	f3bf 8f6f 	isb	sy
 800d366:	f3bf 8f4f 	dsb	sy
 800d36a:	60bb      	str	r3, [r7, #8]
}
 800d36c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d36e:	bf00      	nop
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d0fc      	beq.n	800d370 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d376:	bf00      	nop
 800d378:	bf00      	nop
 800d37a:	3714      	adds	r7, #20
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr
 800d384:	2000001c 	.word	0x2000001c
	...

0800d390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d390:	4b07      	ldr	r3, [pc, #28]	; (800d3b0 <pxCurrentTCBConst2>)
 800d392:	6819      	ldr	r1, [r3, #0]
 800d394:	6808      	ldr	r0, [r1, #0]
 800d396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d39a:	f380 8809 	msr	PSP, r0
 800d39e:	f3bf 8f6f 	isb	sy
 800d3a2:	f04f 0000 	mov.w	r0, #0
 800d3a6:	f380 8811 	msr	BASEPRI, r0
 800d3aa:	4770      	bx	lr
 800d3ac:	f3af 8000 	nop.w

0800d3b0 <pxCurrentTCBConst2>:
 800d3b0:	200027c0 	.word	0x200027c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d3b4:	bf00      	nop
 800d3b6:	bf00      	nop

0800d3b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d3b8:	4808      	ldr	r0, [pc, #32]	; (800d3dc <prvPortStartFirstTask+0x24>)
 800d3ba:	6800      	ldr	r0, [r0, #0]
 800d3bc:	6800      	ldr	r0, [r0, #0]
 800d3be:	f380 8808 	msr	MSP, r0
 800d3c2:	f04f 0000 	mov.w	r0, #0
 800d3c6:	f380 8814 	msr	CONTROL, r0
 800d3ca:	b662      	cpsie	i
 800d3cc:	b661      	cpsie	f
 800d3ce:	f3bf 8f4f 	dsb	sy
 800d3d2:	f3bf 8f6f 	isb	sy
 800d3d6:	df00      	svc	0
 800d3d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d3da:	bf00      	nop
 800d3dc:	e000ed08 	.word	0xe000ed08

0800d3e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b086      	sub	sp, #24
 800d3e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d3e6:	4b46      	ldr	r3, [pc, #280]	; (800d500 <xPortStartScheduler+0x120>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	4a46      	ldr	r2, [pc, #280]	; (800d504 <xPortStartScheduler+0x124>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d10a      	bne.n	800d406 <xPortStartScheduler+0x26>
	__asm volatile
 800d3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f4:	f383 8811 	msr	BASEPRI, r3
 800d3f8:	f3bf 8f6f 	isb	sy
 800d3fc:	f3bf 8f4f 	dsb	sy
 800d400:	613b      	str	r3, [r7, #16]
}
 800d402:	bf00      	nop
 800d404:	e7fe      	b.n	800d404 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d406:	4b3e      	ldr	r3, [pc, #248]	; (800d500 <xPortStartScheduler+0x120>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4a3f      	ldr	r2, [pc, #252]	; (800d508 <xPortStartScheduler+0x128>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d10a      	bne.n	800d426 <xPortStartScheduler+0x46>
	__asm volatile
 800d410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d414:	f383 8811 	msr	BASEPRI, r3
 800d418:	f3bf 8f6f 	isb	sy
 800d41c:	f3bf 8f4f 	dsb	sy
 800d420:	60fb      	str	r3, [r7, #12]
}
 800d422:	bf00      	nop
 800d424:	e7fe      	b.n	800d424 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d426:	4b39      	ldr	r3, [pc, #228]	; (800d50c <xPortStartScheduler+0x12c>)
 800d428:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	22ff      	movs	r2, #255	; 0xff
 800d436:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	781b      	ldrb	r3, [r3, #0]
 800d43c:	b2db      	uxtb	r3, r3
 800d43e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d440:	78fb      	ldrb	r3, [r7, #3]
 800d442:	b2db      	uxtb	r3, r3
 800d444:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d448:	b2da      	uxtb	r2, r3
 800d44a:	4b31      	ldr	r3, [pc, #196]	; (800d510 <xPortStartScheduler+0x130>)
 800d44c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d44e:	4b31      	ldr	r3, [pc, #196]	; (800d514 <xPortStartScheduler+0x134>)
 800d450:	2207      	movs	r2, #7
 800d452:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d454:	e009      	b.n	800d46a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d456:	4b2f      	ldr	r3, [pc, #188]	; (800d514 <xPortStartScheduler+0x134>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	3b01      	subs	r3, #1
 800d45c:	4a2d      	ldr	r2, [pc, #180]	; (800d514 <xPortStartScheduler+0x134>)
 800d45e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d460:	78fb      	ldrb	r3, [r7, #3]
 800d462:	b2db      	uxtb	r3, r3
 800d464:	005b      	lsls	r3, r3, #1
 800d466:	b2db      	uxtb	r3, r3
 800d468:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d46a:	78fb      	ldrb	r3, [r7, #3]
 800d46c:	b2db      	uxtb	r3, r3
 800d46e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d472:	2b80      	cmp	r3, #128	; 0x80
 800d474:	d0ef      	beq.n	800d456 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d476:	4b27      	ldr	r3, [pc, #156]	; (800d514 <xPortStartScheduler+0x134>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f1c3 0307 	rsb	r3, r3, #7
 800d47e:	2b04      	cmp	r3, #4
 800d480:	d00a      	beq.n	800d498 <xPortStartScheduler+0xb8>
	__asm volatile
 800d482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d486:	f383 8811 	msr	BASEPRI, r3
 800d48a:	f3bf 8f6f 	isb	sy
 800d48e:	f3bf 8f4f 	dsb	sy
 800d492:	60bb      	str	r3, [r7, #8]
}
 800d494:	bf00      	nop
 800d496:	e7fe      	b.n	800d496 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d498:	4b1e      	ldr	r3, [pc, #120]	; (800d514 <xPortStartScheduler+0x134>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	021b      	lsls	r3, r3, #8
 800d49e:	4a1d      	ldr	r2, [pc, #116]	; (800d514 <xPortStartScheduler+0x134>)
 800d4a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d4a2:	4b1c      	ldr	r3, [pc, #112]	; (800d514 <xPortStartScheduler+0x134>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d4aa:	4a1a      	ldr	r2, [pc, #104]	; (800d514 <xPortStartScheduler+0x134>)
 800d4ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	b2da      	uxtb	r2, r3
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d4b6:	4b18      	ldr	r3, [pc, #96]	; (800d518 <xPortStartScheduler+0x138>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	4a17      	ldr	r2, [pc, #92]	; (800d518 <xPortStartScheduler+0x138>)
 800d4bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d4c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d4c2:	4b15      	ldr	r3, [pc, #84]	; (800d518 <xPortStartScheduler+0x138>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	4a14      	ldr	r2, [pc, #80]	; (800d518 <xPortStartScheduler+0x138>)
 800d4c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d4cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d4ce:	f000 f8dd 	bl	800d68c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d4d2:	4b12      	ldr	r3, [pc, #72]	; (800d51c <xPortStartScheduler+0x13c>)
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d4d8:	f000 f8fc 	bl	800d6d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d4dc:	4b10      	ldr	r3, [pc, #64]	; (800d520 <xPortStartScheduler+0x140>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4a0f      	ldr	r2, [pc, #60]	; (800d520 <xPortStartScheduler+0x140>)
 800d4e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d4e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d4e8:	f7ff ff66 	bl	800d3b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d4ec:	f7fe fe90 	bl	800c210 <vTaskSwitchContext>
	prvTaskExitError();
 800d4f0:	f7ff ff1e 	bl	800d330 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d4f4:	2300      	movs	r3, #0
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3718      	adds	r7, #24
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop
 800d500:	e000ed00 	.word	0xe000ed00
 800d504:	410fc271 	.word	0x410fc271
 800d508:	410fc270 	.word	0x410fc270
 800d50c:	e000e400 	.word	0xe000e400
 800d510:	20002dec 	.word	0x20002dec
 800d514:	20002df0 	.word	0x20002df0
 800d518:	e000ed20 	.word	0xe000ed20
 800d51c:	2000001c 	.word	0x2000001c
 800d520:	e000ef34 	.word	0xe000ef34

0800d524 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
	__asm volatile
 800d52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52e:	f383 8811 	msr	BASEPRI, r3
 800d532:	f3bf 8f6f 	isb	sy
 800d536:	f3bf 8f4f 	dsb	sy
 800d53a:	607b      	str	r3, [r7, #4]
}
 800d53c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d53e:	4b0f      	ldr	r3, [pc, #60]	; (800d57c <vPortEnterCritical+0x58>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	3301      	adds	r3, #1
 800d544:	4a0d      	ldr	r2, [pc, #52]	; (800d57c <vPortEnterCritical+0x58>)
 800d546:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d548:	4b0c      	ldr	r3, [pc, #48]	; (800d57c <vPortEnterCritical+0x58>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d10f      	bne.n	800d570 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d550:	4b0b      	ldr	r3, [pc, #44]	; (800d580 <vPortEnterCritical+0x5c>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	b2db      	uxtb	r3, r3
 800d556:	2b00      	cmp	r3, #0
 800d558:	d00a      	beq.n	800d570 <vPortEnterCritical+0x4c>
	__asm volatile
 800d55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d55e:	f383 8811 	msr	BASEPRI, r3
 800d562:	f3bf 8f6f 	isb	sy
 800d566:	f3bf 8f4f 	dsb	sy
 800d56a:	603b      	str	r3, [r7, #0]
}
 800d56c:	bf00      	nop
 800d56e:	e7fe      	b.n	800d56e <vPortEnterCritical+0x4a>
	}
}
 800d570:	bf00      	nop
 800d572:	370c      	adds	r7, #12
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr
 800d57c:	2000001c 	.word	0x2000001c
 800d580:	e000ed04 	.word	0xe000ed04

0800d584 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d584:	b480      	push	{r7}
 800d586:	b083      	sub	sp, #12
 800d588:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d58a:	4b12      	ldr	r3, [pc, #72]	; (800d5d4 <vPortExitCritical+0x50>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d10a      	bne.n	800d5a8 <vPortExitCritical+0x24>
	__asm volatile
 800d592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d596:	f383 8811 	msr	BASEPRI, r3
 800d59a:	f3bf 8f6f 	isb	sy
 800d59e:	f3bf 8f4f 	dsb	sy
 800d5a2:	607b      	str	r3, [r7, #4]
}
 800d5a4:	bf00      	nop
 800d5a6:	e7fe      	b.n	800d5a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d5a8:	4b0a      	ldr	r3, [pc, #40]	; (800d5d4 <vPortExitCritical+0x50>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	3b01      	subs	r3, #1
 800d5ae:	4a09      	ldr	r2, [pc, #36]	; (800d5d4 <vPortExitCritical+0x50>)
 800d5b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d5b2:	4b08      	ldr	r3, [pc, #32]	; (800d5d4 <vPortExitCritical+0x50>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d105      	bne.n	800d5c6 <vPortExitCritical+0x42>
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	f383 8811 	msr	BASEPRI, r3
}
 800d5c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d5c6:	bf00      	nop
 800d5c8:	370c      	adds	r7, #12
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr
 800d5d2:	bf00      	nop
 800d5d4:	2000001c 	.word	0x2000001c
	...

0800d5e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d5e0:	f3ef 8009 	mrs	r0, PSP
 800d5e4:	f3bf 8f6f 	isb	sy
 800d5e8:	4b15      	ldr	r3, [pc, #84]	; (800d640 <pxCurrentTCBConst>)
 800d5ea:	681a      	ldr	r2, [r3, #0]
 800d5ec:	f01e 0f10 	tst.w	lr, #16
 800d5f0:	bf08      	it	eq
 800d5f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d5f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5fa:	6010      	str	r0, [r2, #0]
 800d5fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d600:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d604:	f380 8811 	msr	BASEPRI, r0
 800d608:	f3bf 8f4f 	dsb	sy
 800d60c:	f3bf 8f6f 	isb	sy
 800d610:	f7fe fdfe 	bl	800c210 <vTaskSwitchContext>
 800d614:	f04f 0000 	mov.w	r0, #0
 800d618:	f380 8811 	msr	BASEPRI, r0
 800d61c:	bc09      	pop	{r0, r3}
 800d61e:	6819      	ldr	r1, [r3, #0]
 800d620:	6808      	ldr	r0, [r1, #0]
 800d622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d626:	f01e 0f10 	tst.w	lr, #16
 800d62a:	bf08      	it	eq
 800d62c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d630:	f380 8809 	msr	PSP, r0
 800d634:	f3bf 8f6f 	isb	sy
 800d638:	4770      	bx	lr
 800d63a:	bf00      	nop
 800d63c:	f3af 8000 	nop.w

0800d640 <pxCurrentTCBConst>:
 800d640:	200027c0 	.word	0x200027c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d644:	bf00      	nop
 800d646:	bf00      	nop

0800d648 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
	__asm volatile
 800d64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d652:	f383 8811 	msr	BASEPRI, r3
 800d656:	f3bf 8f6f 	isb	sy
 800d65a:	f3bf 8f4f 	dsb	sy
 800d65e:	607b      	str	r3, [r7, #4]
}
 800d660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d662:	f7fe fd1b 	bl	800c09c <xTaskIncrementTick>
 800d666:	4603      	mov	r3, r0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d003      	beq.n	800d674 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d66c:	4b06      	ldr	r3, [pc, #24]	; (800d688 <xPortSysTickHandler+0x40>)
 800d66e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d672:	601a      	str	r2, [r3, #0]
 800d674:	2300      	movs	r3, #0
 800d676:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	f383 8811 	msr	BASEPRI, r3
}
 800d67e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d680:	bf00      	nop
 800d682:	3708      	adds	r7, #8
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}
 800d688:	e000ed04 	.word	0xe000ed04

0800d68c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d68c:	b480      	push	{r7}
 800d68e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d690:	4b0b      	ldr	r3, [pc, #44]	; (800d6c0 <vPortSetupTimerInterrupt+0x34>)
 800d692:	2200      	movs	r2, #0
 800d694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d696:	4b0b      	ldr	r3, [pc, #44]	; (800d6c4 <vPortSetupTimerInterrupt+0x38>)
 800d698:	2200      	movs	r2, #0
 800d69a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d69c:	4b0a      	ldr	r3, [pc, #40]	; (800d6c8 <vPortSetupTimerInterrupt+0x3c>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4a0a      	ldr	r2, [pc, #40]	; (800d6cc <vPortSetupTimerInterrupt+0x40>)
 800d6a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d6a6:	099b      	lsrs	r3, r3, #6
 800d6a8:	4a09      	ldr	r2, [pc, #36]	; (800d6d0 <vPortSetupTimerInterrupt+0x44>)
 800d6aa:	3b01      	subs	r3, #1
 800d6ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d6ae:	4b04      	ldr	r3, [pc, #16]	; (800d6c0 <vPortSetupTimerInterrupt+0x34>)
 800d6b0:	2207      	movs	r2, #7
 800d6b2:	601a      	str	r2, [r3, #0]
}
 800d6b4:	bf00      	nop
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6bc:	4770      	bx	lr
 800d6be:	bf00      	nop
 800d6c0:	e000e010 	.word	0xe000e010
 800d6c4:	e000e018 	.word	0xe000e018
 800d6c8:	20000010 	.word	0x20000010
 800d6cc:	10624dd3 	.word	0x10624dd3
 800d6d0:	e000e014 	.word	0xe000e014

0800d6d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d6d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d6e4 <vPortEnableVFP+0x10>
 800d6d8:	6801      	ldr	r1, [r0, #0]
 800d6da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d6de:	6001      	str	r1, [r0, #0]
 800d6e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d6e2:	bf00      	nop
 800d6e4:	e000ed88 	.word	0xe000ed88

0800d6e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d6e8:	b480      	push	{r7}
 800d6ea:	b085      	sub	sp, #20
 800d6ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d6ee:	f3ef 8305 	mrs	r3, IPSR
 800d6f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2b0f      	cmp	r3, #15
 800d6f8:	d914      	bls.n	800d724 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d6fa:	4a17      	ldr	r2, [pc, #92]	; (800d758 <vPortValidateInterruptPriority+0x70>)
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	4413      	add	r3, r2
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d704:	4b15      	ldr	r3, [pc, #84]	; (800d75c <vPortValidateInterruptPriority+0x74>)
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	7afa      	ldrb	r2, [r7, #11]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d20a      	bcs.n	800d724 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d712:	f383 8811 	msr	BASEPRI, r3
 800d716:	f3bf 8f6f 	isb	sy
 800d71a:	f3bf 8f4f 	dsb	sy
 800d71e:	607b      	str	r3, [r7, #4]
}
 800d720:	bf00      	nop
 800d722:	e7fe      	b.n	800d722 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d724:	4b0e      	ldr	r3, [pc, #56]	; (800d760 <vPortValidateInterruptPriority+0x78>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d72c:	4b0d      	ldr	r3, [pc, #52]	; (800d764 <vPortValidateInterruptPriority+0x7c>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	429a      	cmp	r2, r3
 800d732:	d90a      	bls.n	800d74a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	603b      	str	r3, [r7, #0]
}
 800d746:	bf00      	nop
 800d748:	e7fe      	b.n	800d748 <vPortValidateInterruptPriority+0x60>
	}
 800d74a:	bf00      	nop
 800d74c:	3714      	adds	r7, #20
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr
 800d756:	bf00      	nop
 800d758:	e000e3f0 	.word	0xe000e3f0
 800d75c:	20002dec 	.word	0x20002dec
 800d760:	e000ed0c 	.word	0xe000ed0c
 800d764:	20002df0 	.word	0x20002df0

0800d768 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b08a      	sub	sp, #40	; 0x28
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d770:	2300      	movs	r3, #0
 800d772:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d774:	f7fe fbc4 	bl	800bf00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d778:	4b5b      	ldr	r3, [pc, #364]	; (800d8e8 <pvPortMalloc+0x180>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d101      	bne.n	800d784 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d780:	f000 f920 	bl	800d9c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d784:	4b59      	ldr	r3, [pc, #356]	; (800d8ec <pvPortMalloc+0x184>)
 800d786:	681a      	ldr	r2, [r3, #0]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	4013      	ands	r3, r2
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	f040 8093 	bne.w	800d8b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d01d      	beq.n	800d7d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d798:	2208      	movs	r2, #8
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	4413      	add	r3, r2
 800d79e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f003 0307 	and.w	r3, r3, #7
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d014      	beq.n	800d7d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f023 0307 	bic.w	r3, r3, #7
 800d7b0:	3308      	adds	r3, #8
 800d7b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f003 0307 	and.w	r3, r3, #7
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d00a      	beq.n	800d7d4 <pvPortMalloc+0x6c>
	__asm volatile
 800d7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c2:	f383 8811 	msr	BASEPRI, r3
 800d7c6:	f3bf 8f6f 	isb	sy
 800d7ca:	f3bf 8f4f 	dsb	sy
 800d7ce:	617b      	str	r3, [r7, #20]
}
 800d7d0:	bf00      	nop
 800d7d2:	e7fe      	b.n	800d7d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d06e      	beq.n	800d8b8 <pvPortMalloc+0x150>
 800d7da:	4b45      	ldr	r3, [pc, #276]	; (800d8f0 <pvPortMalloc+0x188>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d869      	bhi.n	800d8b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d7e4:	4b43      	ldr	r3, [pc, #268]	; (800d8f4 <pvPortMalloc+0x18c>)
 800d7e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d7e8:	4b42      	ldr	r3, [pc, #264]	; (800d8f4 <pvPortMalloc+0x18c>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7ee:	e004      	b.n	800d7fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	687a      	ldr	r2, [r7, #4]
 800d800:	429a      	cmp	r2, r3
 800d802:	d903      	bls.n	800d80c <pvPortMalloc+0xa4>
 800d804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d1f1      	bne.n	800d7f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d80c:	4b36      	ldr	r3, [pc, #216]	; (800d8e8 <pvPortMalloc+0x180>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d812:	429a      	cmp	r2, r3
 800d814:	d050      	beq.n	800d8b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d816:	6a3b      	ldr	r3, [r7, #32]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	2208      	movs	r2, #8
 800d81c:	4413      	add	r3, r2
 800d81e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d822:	681a      	ldr	r2, [r3, #0]
 800d824:	6a3b      	ldr	r3, [r7, #32]
 800d826:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82a:	685a      	ldr	r2, [r3, #4]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	1ad2      	subs	r2, r2, r3
 800d830:	2308      	movs	r3, #8
 800d832:	005b      	lsls	r3, r3, #1
 800d834:	429a      	cmp	r2, r3
 800d836:	d91f      	bls.n	800d878 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	4413      	add	r3, r2
 800d83e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	f003 0307 	and.w	r3, r3, #7
 800d846:	2b00      	cmp	r3, #0
 800d848:	d00a      	beq.n	800d860 <pvPortMalloc+0xf8>
	__asm volatile
 800d84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d84e:	f383 8811 	msr	BASEPRI, r3
 800d852:	f3bf 8f6f 	isb	sy
 800d856:	f3bf 8f4f 	dsb	sy
 800d85a:	613b      	str	r3, [r7, #16]
}
 800d85c:	bf00      	nop
 800d85e:	e7fe      	b.n	800d85e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d862:	685a      	ldr	r2, [r3, #4]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	1ad2      	subs	r2, r2, r3
 800d868:	69bb      	ldr	r3, [r7, #24]
 800d86a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d872:	69b8      	ldr	r0, [r7, #24]
 800d874:	f000 f908 	bl	800da88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d878:	4b1d      	ldr	r3, [pc, #116]	; (800d8f0 <pvPortMalloc+0x188>)
 800d87a:	681a      	ldr	r2, [r3, #0]
 800d87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	1ad3      	subs	r3, r2, r3
 800d882:	4a1b      	ldr	r2, [pc, #108]	; (800d8f0 <pvPortMalloc+0x188>)
 800d884:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d886:	4b1a      	ldr	r3, [pc, #104]	; (800d8f0 <pvPortMalloc+0x188>)
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	4b1b      	ldr	r3, [pc, #108]	; (800d8f8 <pvPortMalloc+0x190>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d203      	bcs.n	800d89a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d892:	4b17      	ldr	r3, [pc, #92]	; (800d8f0 <pvPortMalloc+0x188>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4a18      	ldr	r2, [pc, #96]	; (800d8f8 <pvPortMalloc+0x190>)
 800d898:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89c:	685a      	ldr	r2, [r3, #4]
 800d89e:	4b13      	ldr	r3, [pc, #76]	; (800d8ec <pvPortMalloc+0x184>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	431a      	orrs	r2, r3
 800d8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d8ae:	4b13      	ldr	r3, [pc, #76]	; (800d8fc <pvPortMalloc+0x194>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	4a11      	ldr	r2, [pc, #68]	; (800d8fc <pvPortMalloc+0x194>)
 800d8b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d8b8:	f7fe fb30 	bl	800bf1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	f003 0307 	and.w	r3, r3, #7
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d00a      	beq.n	800d8dc <pvPortMalloc+0x174>
	__asm volatile
 800d8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ca:	f383 8811 	msr	BASEPRI, r3
 800d8ce:	f3bf 8f6f 	isb	sy
 800d8d2:	f3bf 8f4f 	dsb	sy
 800d8d6:	60fb      	str	r3, [r7, #12]
}
 800d8d8:	bf00      	nop
 800d8da:	e7fe      	b.n	800d8da <pvPortMalloc+0x172>
	return pvReturn;
 800d8dc:	69fb      	ldr	r3, [r7, #28]
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3728      	adds	r7, #40	; 0x28
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	200035fc 	.word	0x200035fc
 800d8ec:	20003610 	.word	0x20003610
 800d8f0:	20003600 	.word	0x20003600
 800d8f4:	200035f4 	.word	0x200035f4
 800d8f8:	20003604 	.word	0x20003604
 800d8fc:	20003608 	.word	0x20003608

0800d900 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b086      	sub	sp, #24
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d04d      	beq.n	800d9ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d912:	2308      	movs	r3, #8
 800d914:	425b      	negs	r3, r3
 800d916:	697a      	ldr	r2, [r7, #20]
 800d918:	4413      	add	r3, r2
 800d91a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	685a      	ldr	r2, [r3, #4]
 800d924:	4b24      	ldr	r3, [pc, #144]	; (800d9b8 <vPortFree+0xb8>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4013      	ands	r3, r2
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d10a      	bne.n	800d944 <vPortFree+0x44>
	__asm volatile
 800d92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d932:	f383 8811 	msr	BASEPRI, r3
 800d936:	f3bf 8f6f 	isb	sy
 800d93a:	f3bf 8f4f 	dsb	sy
 800d93e:	60fb      	str	r3, [r7, #12]
}
 800d940:	bf00      	nop
 800d942:	e7fe      	b.n	800d942 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d00a      	beq.n	800d962 <vPortFree+0x62>
	__asm volatile
 800d94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d950:	f383 8811 	msr	BASEPRI, r3
 800d954:	f3bf 8f6f 	isb	sy
 800d958:	f3bf 8f4f 	dsb	sy
 800d95c:	60bb      	str	r3, [r7, #8]
}
 800d95e:	bf00      	nop
 800d960:	e7fe      	b.n	800d960 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	685a      	ldr	r2, [r3, #4]
 800d966:	4b14      	ldr	r3, [pc, #80]	; (800d9b8 <vPortFree+0xb8>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4013      	ands	r3, r2
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d01e      	beq.n	800d9ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d11a      	bne.n	800d9ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	685a      	ldr	r2, [r3, #4]
 800d97c:	4b0e      	ldr	r3, [pc, #56]	; (800d9b8 <vPortFree+0xb8>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	43db      	mvns	r3, r3
 800d982:	401a      	ands	r2, r3
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d988:	f7fe faba 	bl	800bf00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	685a      	ldr	r2, [r3, #4]
 800d990:	4b0a      	ldr	r3, [pc, #40]	; (800d9bc <vPortFree+0xbc>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4413      	add	r3, r2
 800d996:	4a09      	ldr	r2, [pc, #36]	; (800d9bc <vPortFree+0xbc>)
 800d998:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d99a:	6938      	ldr	r0, [r7, #16]
 800d99c:	f000 f874 	bl	800da88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d9a0:	4b07      	ldr	r3, [pc, #28]	; (800d9c0 <vPortFree+0xc0>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	4a06      	ldr	r2, [pc, #24]	; (800d9c0 <vPortFree+0xc0>)
 800d9a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d9aa:	f7fe fab7 	bl	800bf1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d9ae:	bf00      	nop
 800d9b0:	3718      	adds	r7, #24
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	20003610 	.word	0x20003610
 800d9bc:	20003600 	.word	0x20003600
 800d9c0:	2000360c 	.word	0x2000360c

0800d9c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b085      	sub	sp, #20
 800d9c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d9ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d9ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d9d0:	4b27      	ldr	r3, [pc, #156]	; (800da70 <prvHeapInit+0xac>)
 800d9d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f003 0307 	and.w	r3, r3, #7
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d00c      	beq.n	800d9f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	3307      	adds	r3, #7
 800d9e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f023 0307 	bic.w	r3, r3, #7
 800d9ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d9ec:	68ba      	ldr	r2, [r7, #8]
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	1ad3      	subs	r3, r2, r3
 800d9f2:	4a1f      	ldr	r2, [pc, #124]	; (800da70 <prvHeapInit+0xac>)
 800d9f4:	4413      	add	r3, r2
 800d9f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d9fc:	4a1d      	ldr	r2, [pc, #116]	; (800da74 <prvHeapInit+0xb0>)
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800da02:	4b1c      	ldr	r3, [pc, #112]	; (800da74 <prvHeapInit+0xb0>)
 800da04:	2200      	movs	r2, #0
 800da06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	68ba      	ldr	r2, [r7, #8]
 800da0c:	4413      	add	r3, r2
 800da0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800da10:	2208      	movs	r2, #8
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	1a9b      	subs	r3, r3, r2
 800da16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f023 0307 	bic.w	r3, r3, #7
 800da1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	4a15      	ldr	r2, [pc, #84]	; (800da78 <prvHeapInit+0xb4>)
 800da24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800da26:	4b14      	ldr	r3, [pc, #80]	; (800da78 <prvHeapInit+0xb4>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	2200      	movs	r2, #0
 800da2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800da2e:	4b12      	ldr	r3, [pc, #72]	; (800da78 <prvHeapInit+0xb4>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	2200      	movs	r2, #0
 800da34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	68fa      	ldr	r2, [r7, #12]
 800da3e:	1ad2      	subs	r2, r2, r3
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800da44:	4b0c      	ldr	r3, [pc, #48]	; (800da78 <prvHeapInit+0xb4>)
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	4a0a      	ldr	r2, [pc, #40]	; (800da7c <prvHeapInit+0xb8>)
 800da52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	685b      	ldr	r3, [r3, #4]
 800da58:	4a09      	ldr	r2, [pc, #36]	; (800da80 <prvHeapInit+0xbc>)
 800da5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800da5c:	4b09      	ldr	r3, [pc, #36]	; (800da84 <prvHeapInit+0xc0>)
 800da5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800da62:	601a      	str	r2, [r3, #0]
}
 800da64:	bf00      	nop
 800da66:	3714      	adds	r7, #20
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr
 800da70:	20002df4 	.word	0x20002df4
 800da74:	200035f4 	.word	0x200035f4
 800da78:	200035fc 	.word	0x200035fc
 800da7c:	20003604 	.word	0x20003604
 800da80:	20003600 	.word	0x20003600
 800da84:	20003610 	.word	0x20003610

0800da88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800da88:	b480      	push	{r7}
 800da8a:	b085      	sub	sp, #20
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800da90:	4b28      	ldr	r3, [pc, #160]	; (800db34 <prvInsertBlockIntoFreeList+0xac>)
 800da92:	60fb      	str	r3, [r7, #12]
 800da94:	e002      	b.n	800da9c <prvInsertBlockIntoFreeList+0x14>
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	60fb      	str	r3, [r7, #12]
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d8f7      	bhi.n	800da96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	685b      	ldr	r3, [r3, #4]
 800daae:	68ba      	ldr	r2, [r7, #8]
 800dab0:	4413      	add	r3, r2
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d108      	bne.n	800daca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	685a      	ldr	r2, [r3, #4]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	441a      	add	r2, r3
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	68ba      	ldr	r2, [r7, #8]
 800dad4:	441a      	add	r2, r3
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d118      	bne.n	800db10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681a      	ldr	r2, [r3, #0]
 800dae2:	4b15      	ldr	r3, [pc, #84]	; (800db38 <prvInsertBlockIntoFreeList+0xb0>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d00d      	beq.n	800db06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	685a      	ldr	r2, [r3, #4]
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	441a      	add	r2, r3
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	681a      	ldr	r2, [r3, #0]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	601a      	str	r2, [r3, #0]
 800db04:	e008      	b.n	800db18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800db06:	4b0c      	ldr	r3, [pc, #48]	; (800db38 <prvInsertBlockIntoFreeList+0xb0>)
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	601a      	str	r2, [r3, #0]
 800db0e:	e003      	b.n	800db18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681a      	ldr	r2, [r3, #0]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800db18:	68fa      	ldr	r2, [r7, #12]
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d002      	beq.n	800db26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	687a      	ldr	r2, [r7, #4]
 800db24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db26:	bf00      	nop
 800db28:	3714      	adds	r7, #20
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop
 800db34:	200035f4 	.word	0x200035f4
 800db38:	200035fc 	.word	0x200035fc

0800db3c <__errno>:
 800db3c:	4b01      	ldr	r3, [pc, #4]	; (800db44 <__errno+0x8>)
 800db3e:	6818      	ldr	r0, [r3, #0]
 800db40:	4770      	bx	lr
 800db42:	bf00      	nop
 800db44:	20000020 	.word	0x20000020

0800db48 <__libc_init_array>:
 800db48:	b570      	push	{r4, r5, r6, lr}
 800db4a:	4d0d      	ldr	r5, [pc, #52]	; (800db80 <__libc_init_array+0x38>)
 800db4c:	4c0d      	ldr	r4, [pc, #52]	; (800db84 <__libc_init_array+0x3c>)
 800db4e:	1b64      	subs	r4, r4, r5
 800db50:	10a4      	asrs	r4, r4, #2
 800db52:	2600      	movs	r6, #0
 800db54:	42a6      	cmp	r6, r4
 800db56:	d109      	bne.n	800db6c <__libc_init_array+0x24>
 800db58:	4d0b      	ldr	r5, [pc, #44]	; (800db88 <__libc_init_array+0x40>)
 800db5a:	4c0c      	ldr	r4, [pc, #48]	; (800db8c <__libc_init_array+0x44>)
 800db5c:	f000 fe04 	bl	800e768 <_init>
 800db60:	1b64      	subs	r4, r4, r5
 800db62:	10a4      	asrs	r4, r4, #2
 800db64:	2600      	movs	r6, #0
 800db66:	42a6      	cmp	r6, r4
 800db68:	d105      	bne.n	800db76 <__libc_init_array+0x2e>
 800db6a:	bd70      	pop	{r4, r5, r6, pc}
 800db6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800db70:	4798      	blx	r3
 800db72:	3601      	adds	r6, #1
 800db74:	e7ee      	b.n	800db54 <__libc_init_array+0xc>
 800db76:	f855 3b04 	ldr.w	r3, [r5], #4
 800db7a:	4798      	blx	r3
 800db7c:	3601      	adds	r6, #1
 800db7e:	e7f2      	b.n	800db66 <__libc_init_array+0x1e>
 800db80:	0800ea80 	.word	0x0800ea80
 800db84:	0800ea80 	.word	0x0800ea80
 800db88:	0800ea80 	.word	0x0800ea80
 800db8c:	0800ea84 	.word	0x0800ea84

0800db90 <__retarget_lock_acquire_recursive>:
 800db90:	4770      	bx	lr

0800db92 <__retarget_lock_release_recursive>:
 800db92:	4770      	bx	lr

0800db94 <memcpy>:
 800db94:	440a      	add	r2, r1
 800db96:	4291      	cmp	r1, r2
 800db98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800db9c:	d100      	bne.n	800dba0 <memcpy+0xc>
 800db9e:	4770      	bx	lr
 800dba0:	b510      	push	{r4, lr}
 800dba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbaa:	4291      	cmp	r1, r2
 800dbac:	d1f9      	bne.n	800dba2 <memcpy+0xe>
 800dbae:	bd10      	pop	{r4, pc}

0800dbb0 <memset>:
 800dbb0:	4402      	add	r2, r0
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d100      	bne.n	800dbba <memset+0xa>
 800dbb8:	4770      	bx	lr
 800dbba:	f803 1b01 	strb.w	r1, [r3], #1
 800dbbe:	e7f9      	b.n	800dbb4 <memset+0x4>

0800dbc0 <cleanup_glue>:
 800dbc0:	b538      	push	{r3, r4, r5, lr}
 800dbc2:	460c      	mov	r4, r1
 800dbc4:	6809      	ldr	r1, [r1, #0]
 800dbc6:	4605      	mov	r5, r0
 800dbc8:	b109      	cbz	r1, 800dbce <cleanup_glue+0xe>
 800dbca:	f7ff fff9 	bl	800dbc0 <cleanup_glue>
 800dbce:	4621      	mov	r1, r4
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbd6:	f000 b869 	b.w	800dcac <_free_r>
	...

0800dbdc <_reclaim_reent>:
 800dbdc:	4b2c      	ldr	r3, [pc, #176]	; (800dc90 <_reclaim_reent+0xb4>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4283      	cmp	r3, r0
 800dbe2:	b570      	push	{r4, r5, r6, lr}
 800dbe4:	4604      	mov	r4, r0
 800dbe6:	d051      	beq.n	800dc8c <_reclaim_reent+0xb0>
 800dbe8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800dbea:	b143      	cbz	r3, 800dbfe <_reclaim_reent+0x22>
 800dbec:	68db      	ldr	r3, [r3, #12]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d14a      	bne.n	800dc88 <_reclaim_reent+0xac>
 800dbf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbf4:	6819      	ldr	r1, [r3, #0]
 800dbf6:	b111      	cbz	r1, 800dbfe <_reclaim_reent+0x22>
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	f000 f857 	bl	800dcac <_free_r>
 800dbfe:	6961      	ldr	r1, [r4, #20]
 800dc00:	b111      	cbz	r1, 800dc08 <_reclaim_reent+0x2c>
 800dc02:	4620      	mov	r0, r4
 800dc04:	f000 f852 	bl	800dcac <_free_r>
 800dc08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dc0a:	b111      	cbz	r1, 800dc12 <_reclaim_reent+0x36>
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	f000 f84d 	bl	800dcac <_free_r>
 800dc12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dc14:	b111      	cbz	r1, 800dc1c <_reclaim_reent+0x40>
 800dc16:	4620      	mov	r0, r4
 800dc18:	f000 f848 	bl	800dcac <_free_r>
 800dc1c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dc1e:	b111      	cbz	r1, 800dc26 <_reclaim_reent+0x4a>
 800dc20:	4620      	mov	r0, r4
 800dc22:	f000 f843 	bl	800dcac <_free_r>
 800dc26:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dc28:	b111      	cbz	r1, 800dc30 <_reclaim_reent+0x54>
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	f000 f83e 	bl	800dcac <_free_r>
 800dc30:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800dc32:	b111      	cbz	r1, 800dc3a <_reclaim_reent+0x5e>
 800dc34:	4620      	mov	r0, r4
 800dc36:	f000 f839 	bl	800dcac <_free_r>
 800dc3a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800dc3c:	b111      	cbz	r1, 800dc44 <_reclaim_reent+0x68>
 800dc3e:	4620      	mov	r0, r4
 800dc40:	f000 f834 	bl	800dcac <_free_r>
 800dc44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc46:	b111      	cbz	r1, 800dc4e <_reclaim_reent+0x72>
 800dc48:	4620      	mov	r0, r4
 800dc4a:	f000 f82f 	bl	800dcac <_free_r>
 800dc4e:	69a3      	ldr	r3, [r4, #24]
 800dc50:	b1e3      	cbz	r3, 800dc8c <_reclaim_reent+0xb0>
 800dc52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dc54:	4620      	mov	r0, r4
 800dc56:	4798      	blx	r3
 800dc58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dc5a:	b1b9      	cbz	r1, 800dc8c <_reclaim_reent+0xb0>
 800dc5c:	4620      	mov	r0, r4
 800dc5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc62:	f7ff bfad 	b.w	800dbc0 <cleanup_glue>
 800dc66:	5949      	ldr	r1, [r1, r5]
 800dc68:	b941      	cbnz	r1, 800dc7c <_reclaim_reent+0xa0>
 800dc6a:	3504      	adds	r5, #4
 800dc6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc6e:	2d80      	cmp	r5, #128	; 0x80
 800dc70:	68d9      	ldr	r1, [r3, #12]
 800dc72:	d1f8      	bne.n	800dc66 <_reclaim_reent+0x8a>
 800dc74:	4620      	mov	r0, r4
 800dc76:	f000 f819 	bl	800dcac <_free_r>
 800dc7a:	e7ba      	b.n	800dbf2 <_reclaim_reent+0x16>
 800dc7c:	680e      	ldr	r6, [r1, #0]
 800dc7e:	4620      	mov	r0, r4
 800dc80:	f000 f814 	bl	800dcac <_free_r>
 800dc84:	4631      	mov	r1, r6
 800dc86:	e7ef      	b.n	800dc68 <_reclaim_reent+0x8c>
 800dc88:	2500      	movs	r5, #0
 800dc8a:	e7ef      	b.n	800dc6c <_reclaim_reent+0x90>
 800dc8c:	bd70      	pop	{r4, r5, r6, pc}
 800dc8e:	bf00      	nop
 800dc90:	20000020 	.word	0x20000020

0800dc94 <__malloc_lock>:
 800dc94:	4801      	ldr	r0, [pc, #4]	; (800dc9c <__malloc_lock+0x8>)
 800dc96:	f7ff bf7b 	b.w	800db90 <__retarget_lock_acquire_recursive>
 800dc9a:	bf00      	nop
 800dc9c:	20003614 	.word	0x20003614

0800dca0 <__malloc_unlock>:
 800dca0:	4801      	ldr	r0, [pc, #4]	; (800dca8 <__malloc_unlock+0x8>)
 800dca2:	f7ff bf76 	b.w	800db92 <__retarget_lock_release_recursive>
 800dca6:	bf00      	nop
 800dca8:	20003614 	.word	0x20003614

0800dcac <_free_r>:
 800dcac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dcae:	2900      	cmp	r1, #0
 800dcb0:	d044      	beq.n	800dd3c <_free_r+0x90>
 800dcb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcb6:	9001      	str	r0, [sp, #4]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	f1a1 0404 	sub.w	r4, r1, #4
 800dcbe:	bfb8      	it	lt
 800dcc0:	18e4      	addlt	r4, r4, r3
 800dcc2:	f7ff ffe7 	bl	800dc94 <__malloc_lock>
 800dcc6:	4a1e      	ldr	r2, [pc, #120]	; (800dd40 <_free_r+0x94>)
 800dcc8:	9801      	ldr	r0, [sp, #4]
 800dcca:	6813      	ldr	r3, [r2, #0]
 800dccc:	b933      	cbnz	r3, 800dcdc <_free_r+0x30>
 800dcce:	6063      	str	r3, [r4, #4]
 800dcd0:	6014      	str	r4, [r2, #0]
 800dcd2:	b003      	add	sp, #12
 800dcd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dcd8:	f7ff bfe2 	b.w	800dca0 <__malloc_unlock>
 800dcdc:	42a3      	cmp	r3, r4
 800dcde:	d908      	bls.n	800dcf2 <_free_r+0x46>
 800dce0:	6825      	ldr	r5, [r4, #0]
 800dce2:	1961      	adds	r1, r4, r5
 800dce4:	428b      	cmp	r3, r1
 800dce6:	bf01      	itttt	eq
 800dce8:	6819      	ldreq	r1, [r3, #0]
 800dcea:	685b      	ldreq	r3, [r3, #4]
 800dcec:	1949      	addeq	r1, r1, r5
 800dcee:	6021      	streq	r1, [r4, #0]
 800dcf0:	e7ed      	b.n	800dcce <_free_r+0x22>
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	b10b      	cbz	r3, 800dcfc <_free_r+0x50>
 800dcf8:	42a3      	cmp	r3, r4
 800dcfa:	d9fa      	bls.n	800dcf2 <_free_r+0x46>
 800dcfc:	6811      	ldr	r1, [r2, #0]
 800dcfe:	1855      	adds	r5, r2, r1
 800dd00:	42a5      	cmp	r5, r4
 800dd02:	d10b      	bne.n	800dd1c <_free_r+0x70>
 800dd04:	6824      	ldr	r4, [r4, #0]
 800dd06:	4421      	add	r1, r4
 800dd08:	1854      	adds	r4, r2, r1
 800dd0a:	42a3      	cmp	r3, r4
 800dd0c:	6011      	str	r1, [r2, #0]
 800dd0e:	d1e0      	bne.n	800dcd2 <_free_r+0x26>
 800dd10:	681c      	ldr	r4, [r3, #0]
 800dd12:	685b      	ldr	r3, [r3, #4]
 800dd14:	6053      	str	r3, [r2, #4]
 800dd16:	4421      	add	r1, r4
 800dd18:	6011      	str	r1, [r2, #0]
 800dd1a:	e7da      	b.n	800dcd2 <_free_r+0x26>
 800dd1c:	d902      	bls.n	800dd24 <_free_r+0x78>
 800dd1e:	230c      	movs	r3, #12
 800dd20:	6003      	str	r3, [r0, #0]
 800dd22:	e7d6      	b.n	800dcd2 <_free_r+0x26>
 800dd24:	6825      	ldr	r5, [r4, #0]
 800dd26:	1961      	adds	r1, r4, r5
 800dd28:	428b      	cmp	r3, r1
 800dd2a:	bf04      	itt	eq
 800dd2c:	6819      	ldreq	r1, [r3, #0]
 800dd2e:	685b      	ldreq	r3, [r3, #4]
 800dd30:	6063      	str	r3, [r4, #4]
 800dd32:	bf04      	itt	eq
 800dd34:	1949      	addeq	r1, r1, r5
 800dd36:	6021      	streq	r1, [r4, #0]
 800dd38:	6054      	str	r4, [r2, #4]
 800dd3a:	e7ca      	b.n	800dcd2 <_free_r+0x26>
 800dd3c:	b003      	add	sp, #12
 800dd3e:	bd30      	pop	{r4, r5, pc}
 800dd40:	20003618 	.word	0x20003618

0800dd44 <asin>:
 800dd44:	b538      	push	{r3, r4, r5, lr}
 800dd46:	ed2d 8b02 	vpush	{d8}
 800dd4a:	ec55 4b10 	vmov	r4, r5, d0
 800dd4e:	f000 f877 	bl	800de40 <__ieee754_asin>
 800dd52:	4622      	mov	r2, r4
 800dd54:	462b      	mov	r3, r5
 800dd56:	4620      	mov	r0, r4
 800dd58:	4629      	mov	r1, r5
 800dd5a:	eeb0 8a40 	vmov.f32	s16, s0
 800dd5e:	eef0 8a60 	vmov.f32	s17, s1
 800dd62:	f7f2 fe8b 	bl	8000a7c <__aeabi_dcmpun>
 800dd66:	b9a8      	cbnz	r0, 800dd94 <asin+0x50>
 800dd68:	ec45 4b10 	vmov	d0, r4, r5
 800dd6c:	f000 fce0 	bl	800e730 <fabs>
 800dd70:	4b0c      	ldr	r3, [pc, #48]	; (800dda4 <asin+0x60>)
 800dd72:	ec51 0b10 	vmov	r0, r1, d0
 800dd76:	2200      	movs	r2, #0
 800dd78:	f7f2 fe76 	bl	8000a68 <__aeabi_dcmpgt>
 800dd7c:	b150      	cbz	r0, 800dd94 <asin+0x50>
 800dd7e:	f7ff fedd 	bl	800db3c <__errno>
 800dd82:	ecbd 8b02 	vpop	{d8}
 800dd86:	2321      	movs	r3, #33	; 0x21
 800dd88:	6003      	str	r3, [r0, #0]
 800dd8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd8e:	4806      	ldr	r0, [pc, #24]	; (800dda8 <asin+0x64>)
 800dd90:	f000 bce2 	b.w	800e758 <nan>
 800dd94:	eeb0 0a48 	vmov.f32	s0, s16
 800dd98:	eef0 0a68 	vmov.f32	s1, s17
 800dd9c:	ecbd 8b02 	vpop	{d8}
 800dda0:	bd38      	pop	{r3, r4, r5, pc}
 800dda2:	bf00      	nop
 800dda4:	3ff00000 	.word	0x3ff00000
 800dda8:	0800ea44 	.word	0x0800ea44
 800ddac:	00000000 	.word	0x00000000

0800ddb0 <exp>:
 800ddb0:	b538      	push	{r3, r4, r5, lr}
 800ddb2:	ed2d 8b02 	vpush	{d8}
 800ddb6:	ec55 4b10 	vmov	r4, r5, d0
 800ddba:	f000 fa55 	bl	800e268 <__ieee754_exp>
 800ddbe:	eeb0 8a40 	vmov.f32	s16, s0
 800ddc2:	eef0 8a60 	vmov.f32	s17, s1
 800ddc6:	ec45 4b10 	vmov	d0, r4, r5
 800ddca:	f000 fcba 	bl	800e742 <finite>
 800ddce:	b168      	cbz	r0, 800ddec <exp+0x3c>
 800ddd0:	a317      	add	r3, pc, #92	; (adr r3, 800de30 <exp+0x80>)
 800ddd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd6:	4620      	mov	r0, r4
 800ddd8:	4629      	mov	r1, r5
 800ddda:	f7f2 fe45 	bl	8000a68 <__aeabi_dcmpgt>
 800ddde:	b160      	cbz	r0, 800ddfa <exp+0x4a>
 800dde0:	f7ff feac 	bl	800db3c <__errno>
 800dde4:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800de20 <exp+0x70>
 800dde8:	2322      	movs	r3, #34	; 0x22
 800ddea:	6003      	str	r3, [r0, #0]
 800ddec:	eeb0 0a48 	vmov.f32	s0, s16
 800ddf0:	eef0 0a68 	vmov.f32	s1, s17
 800ddf4:	ecbd 8b02 	vpop	{d8}
 800ddf8:	bd38      	pop	{r3, r4, r5, pc}
 800ddfa:	a30f      	add	r3, pc, #60	; (adr r3, 800de38 <exp+0x88>)
 800ddfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de00:	4620      	mov	r0, r4
 800de02:	4629      	mov	r1, r5
 800de04:	f7f2 fe12 	bl	8000a2c <__aeabi_dcmplt>
 800de08:	2800      	cmp	r0, #0
 800de0a:	d0ef      	beq.n	800ddec <exp+0x3c>
 800de0c:	f7ff fe96 	bl	800db3c <__errno>
 800de10:	2322      	movs	r3, #34	; 0x22
 800de12:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800de28 <exp+0x78>
 800de16:	6003      	str	r3, [r0, #0]
 800de18:	e7e8      	b.n	800ddec <exp+0x3c>
 800de1a:	bf00      	nop
 800de1c:	f3af 8000 	nop.w
 800de20:	00000000 	.word	0x00000000
 800de24:	7ff00000 	.word	0x7ff00000
	...
 800de30:	fefa39ef 	.word	0xfefa39ef
 800de34:	40862e42 	.word	0x40862e42
 800de38:	d52d3051 	.word	0xd52d3051
 800de3c:	c0874910 	.word	0xc0874910

0800de40 <__ieee754_asin>:
 800de40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de44:	ed2d 8b04 	vpush	{d8-d9}
 800de48:	ec55 4b10 	vmov	r4, r5, d0
 800de4c:	4bcc      	ldr	r3, [pc, #816]	; (800e180 <__ieee754_asin+0x340>)
 800de4e:	b083      	sub	sp, #12
 800de50:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800de54:	4598      	cmp	r8, r3
 800de56:	9501      	str	r5, [sp, #4]
 800de58:	dd35      	ble.n	800dec6 <__ieee754_asin+0x86>
 800de5a:	ee10 3a10 	vmov	r3, s0
 800de5e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800de62:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800de66:	ea58 0303 	orrs.w	r3, r8, r3
 800de6a:	d117      	bne.n	800de9c <__ieee754_asin+0x5c>
 800de6c:	a3aa      	add	r3, pc, #680	; (adr r3, 800e118 <__ieee754_asin+0x2d8>)
 800de6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de72:	ee10 0a10 	vmov	r0, s0
 800de76:	4629      	mov	r1, r5
 800de78:	f7f2 fb66 	bl	8000548 <__aeabi_dmul>
 800de7c:	a3a8      	add	r3, pc, #672	; (adr r3, 800e120 <__ieee754_asin+0x2e0>)
 800de7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de82:	4606      	mov	r6, r0
 800de84:	460f      	mov	r7, r1
 800de86:	4620      	mov	r0, r4
 800de88:	4629      	mov	r1, r5
 800de8a:	f7f2 fb5d 	bl	8000548 <__aeabi_dmul>
 800de8e:	4602      	mov	r2, r0
 800de90:	460b      	mov	r3, r1
 800de92:	4630      	mov	r0, r6
 800de94:	4639      	mov	r1, r7
 800de96:	f7f2 f9a1 	bl	80001dc <__adddf3>
 800de9a:	e00b      	b.n	800deb4 <__ieee754_asin+0x74>
 800de9c:	ee10 2a10 	vmov	r2, s0
 800dea0:	462b      	mov	r3, r5
 800dea2:	ee10 0a10 	vmov	r0, s0
 800dea6:	4629      	mov	r1, r5
 800dea8:	f7f2 f996 	bl	80001d8 <__aeabi_dsub>
 800deac:	4602      	mov	r2, r0
 800deae:	460b      	mov	r3, r1
 800deb0:	f7f2 fc74 	bl	800079c <__aeabi_ddiv>
 800deb4:	4604      	mov	r4, r0
 800deb6:	460d      	mov	r5, r1
 800deb8:	ec45 4b10 	vmov	d0, r4, r5
 800debc:	b003      	add	sp, #12
 800debe:	ecbd 8b04 	vpop	{d8-d9}
 800dec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dec6:	4baf      	ldr	r3, [pc, #700]	; (800e184 <__ieee754_asin+0x344>)
 800dec8:	4598      	cmp	r8, r3
 800deca:	dc11      	bgt.n	800def0 <__ieee754_asin+0xb0>
 800decc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ded0:	f280 80ae 	bge.w	800e030 <__ieee754_asin+0x1f0>
 800ded4:	a394      	add	r3, pc, #592	; (adr r3, 800e128 <__ieee754_asin+0x2e8>)
 800ded6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deda:	ee10 0a10 	vmov	r0, s0
 800dede:	4629      	mov	r1, r5
 800dee0:	f7f2 f97c 	bl	80001dc <__adddf3>
 800dee4:	4ba8      	ldr	r3, [pc, #672]	; (800e188 <__ieee754_asin+0x348>)
 800dee6:	2200      	movs	r2, #0
 800dee8:	f7f2 fdbe 	bl	8000a68 <__aeabi_dcmpgt>
 800deec:	2800      	cmp	r0, #0
 800deee:	d1e3      	bne.n	800deb8 <__ieee754_asin+0x78>
 800def0:	ec45 4b10 	vmov	d0, r4, r5
 800def4:	f000 fc1c 	bl	800e730 <fabs>
 800def8:	49a3      	ldr	r1, [pc, #652]	; (800e188 <__ieee754_asin+0x348>)
 800defa:	ec53 2b10 	vmov	r2, r3, d0
 800defe:	2000      	movs	r0, #0
 800df00:	f7f2 f96a 	bl	80001d8 <__aeabi_dsub>
 800df04:	4ba1      	ldr	r3, [pc, #644]	; (800e18c <__ieee754_asin+0x34c>)
 800df06:	2200      	movs	r2, #0
 800df08:	f7f2 fb1e 	bl	8000548 <__aeabi_dmul>
 800df0c:	a388      	add	r3, pc, #544	; (adr r3, 800e130 <__ieee754_asin+0x2f0>)
 800df0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df12:	4604      	mov	r4, r0
 800df14:	460d      	mov	r5, r1
 800df16:	f7f2 fb17 	bl	8000548 <__aeabi_dmul>
 800df1a:	a387      	add	r3, pc, #540	; (adr r3, 800e138 <__ieee754_asin+0x2f8>)
 800df1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df20:	f7f2 f95c 	bl	80001dc <__adddf3>
 800df24:	4622      	mov	r2, r4
 800df26:	462b      	mov	r3, r5
 800df28:	f7f2 fb0e 	bl	8000548 <__aeabi_dmul>
 800df2c:	a384      	add	r3, pc, #528	; (adr r3, 800e140 <__ieee754_asin+0x300>)
 800df2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df32:	f7f2 f951 	bl	80001d8 <__aeabi_dsub>
 800df36:	4622      	mov	r2, r4
 800df38:	462b      	mov	r3, r5
 800df3a:	f7f2 fb05 	bl	8000548 <__aeabi_dmul>
 800df3e:	a382      	add	r3, pc, #520	; (adr r3, 800e148 <__ieee754_asin+0x308>)
 800df40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df44:	f7f2 f94a 	bl	80001dc <__adddf3>
 800df48:	4622      	mov	r2, r4
 800df4a:	462b      	mov	r3, r5
 800df4c:	f7f2 fafc 	bl	8000548 <__aeabi_dmul>
 800df50:	a37f      	add	r3, pc, #508	; (adr r3, 800e150 <__ieee754_asin+0x310>)
 800df52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df56:	f7f2 f93f 	bl	80001d8 <__aeabi_dsub>
 800df5a:	4622      	mov	r2, r4
 800df5c:	462b      	mov	r3, r5
 800df5e:	f7f2 faf3 	bl	8000548 <__aeabi_dmul>
 800df62:	a37d      	add	r3, pc, #500	; (adr r3, 800e158 <__ieee754_asin+0x318>)
 800df64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df68:	f7f2 f938 	bl	80001dc <__adddf3>
 800df6c:	4622      	mov	r2, r4
 800df6e:	462b      	mov	r3, r5
 800df70:	f7f2 faea 	bl	8000548 <__aeabi_dmul>
 800df74:	a37a      	add	r3, pc, #488	; (adr r3, 800e160 <__ieee754_asin+0x320>)
 800df76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7a:	ec41 0b18 	vmov	d8, r0, r1
 800df7e:	4620      	mov	r0, r4
 800df80:	4629      	mov	r1, r5
 800df82:	f7f2 fae1 	bl	8000548 <__aeabi_dmul>
 800df86:	a378      	add	r3, pc, #480	; (adr r3, 800e168 <__ieee754_asin+0x328>)
 800df88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8c:	f7f2 f924 	bl	80001d8 <__aeabi_dsub>
 800df90:	4622      	mov	r2, r4
 800df92:	462b      	mov	r3, r5
 800df94:	f7f2 fad8 	bl	8000548 <__aeabi_dmul>
 800df98:	a375      	add	r3, pc, #468	; (adr r3, 800e170 <__ieee754_asin+0x330>)
 800df9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9e:	f7f2 f91d 	bl	80001dc <__adddf3>
 800dfa2:	4622      	mov	r2, r4
 800dfa4:	462b      	mov	r3, r5
 800dfa6:	f7f2 facf 	bl	8000548 <__aeabi_dmul>
 800dfaa:	a373      	add	r3, pc, #460	; (adr r3, 800e178 <__ieee754_asin+0x338>)
 800dfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb0:	f7f2 f912 	bl	80001d8 <__aeabi_dsub>
 800dfb4:	4622      	mov	r2, r4
 800dfb6:	462b      	mov	r3, r5
 800dfb8:	f7f2 fac6 	bl	8000548 <__aeabi_dmul>
 800dfbc:	4b72      	ldr	r3, [pc, #456]	; (800e188 <__ieee754_asin+0x348>)
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	f7f2 f90c 	bl	80001dc <__adddf3>
 800dfc4:	ec45 4b10 	vmov	d0, r4, r5
 800dfc8:	4606      	mov	r6, r0
 800dfca:	460f      	mov	r7, r1
 800dfcc:	f000 face 	bl	800e56c <__ieee754_sqrt>
 800dfd0:	4b6f      	ldr	r3, [pc, #444]	; (800e190 <__ieee754_asin+0x350>)
 800dfd2:	4598      	cmp	r8, r3
 800dfd4:	ec5b ab10 	vmov	sl, fp, d0
 800dfd8:	f340 80dc 	ble.w	800e194 <__ieee754_asin+0x354>
 800dfdc:	4632      	mov	r2, r6
 800dfde:	463b      	mov	r3, r7
 800dfe0:	ec51 0b18 	vmov	r0, r1, d8
 800dfe4:	f7f2 fbda 	bl	800079c <__aeabi_ddiv>
 800dfe8:	4652      	mov	r2, sl
 800dfea:	465b      	mov	r3, fp
 800dfec:	f7f2 faac 	bl	8000548 <__aeabi_dmul>
 800dff0:	4652      	mov	r2, sl
 800dff2:	465b      	mov	r3, fp
 800dff4:	f7f2 f8f2 	bl	80001dc <__adddf3>
 800dff8:	4602      	mov	r2, r0
 800dffa:	460b      	mov	r3, r1
 800dffc:	f7f2 f8ee 	bl	80001dc <__adddf3>
 800e000:	a347      	add	r3, pc, #284	; (adr r3, 800e120 <__ieee754_asin+0x2e0>)
 800e002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e006:	f7f2 f8e7 	bl	80001d8 <__aeabi_dsub>
 800e00a:	4602      	mov	r2, r0
 800e00c:	460b      	mov	r3, r1
 800e00e:	a142      	add	r1, pc, #264	; (adr r1, 800e118 <__ieee754_asin+0x2d8>)
 800e010:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e014:	f7f2 f8e0 	bl	80001d8 <__aeabi_dsub>
 800e018:	9b01      	ldr	r3, [sp, #4]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	bfdc      	itt	le
 800e01e:	4602      	movle	r2, r0
 800e020:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800e024:	4604      	mov	r4, r0
 800e026:	460d      	mov	r5, r1
 800e028:	bfdc      	itt	le
 800e02a:	4614      	movle	r4, r2
 800e02c:	461d      	movle	r5, r3
 800e02e:	e743      	b.n	800deb8 <__ieee754_asin+0x78>
 800e030:	ee10 2a10 	vmov	r2, s0
 800e034:	ee10 0a10 	vmov	r0, s0
 800e038:	462b      	mov	r3, r5
 800e03a:	4629      	mov	r1, r5
 800e03c:	f7f2 fa84 	bl	8000548 <__aeabi_dmul>
 800e040:	a33b      	add	r3, pc, #236	; (adr r3, 800e130 <__ieee754_asin+0x2f0>)
 800e042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e046:	4606      	mov	r6, r0
 800e048:	460f      	mov	r7, r1
 800e04a:	f7f2 fa7d 	bl	8000548 <__aeabi_dmul>
 800e04e:	a33a      	add	r3, pc, #232	; (adr r3, 800e138 <__ieee754_asin+0x2f8>)
 800e050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e054:	f7f2 f8c2 	bl	80001dc <__adddf3>
 800e058:	4632      	mov	r2, r6
 800e05a:	463b      	mov	r3, r7
 800e05c:	f7f2 fa74 	bl	8000548 <__aeabi_dmul>
 800e060:	a337      	add	r3, pc, #220	; (adr r3, 800e140 <__ieee754_asin+0x300>)
 800e062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e066:	f7f2 f8b7 	bl	80001d8 <__aeabi_dsub>
 800e06a:	4632      	mov	r2, r6
 800e06c:	463b      	mov	r3, r7
 800e06e:	f7f2 fa6b 	bl	8000548 <__aeabi_dmul>
 800e072:	a335      	add	r3, pc, #212	; (adr r3, 800e148 <__ieee754_asin+0x308>)
 800e074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e078:	f7f2 f8b0 	bl	80001dc <__adddf3>
 800e07c:	4632      	mov	r2, r6
 800e07e:	463b      	mov	r3, r7
 800e080:	f7f2 fa62 	bl	8000548 <__aeabi_dmul>
 800e084:	a332      	add	r3, pc, #200	; (adr r3, 800e150 <__ieee754_asin+0x310>)
 800e086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e08a:	f7f2 f8a5 	bl	80001d8 <__aeabi_dsub>
 800e08e:	4632      	mov	r2, r6
 800e090:	463b      	mov	r3, r7
 800e092:	f7f2 fa59 	bl	8000548 <__aeabi_dmul>
 800e096:	a330      	add	r3, pc, #192	; (adr r3, 800e158 <__ieee754_asin+0x318>)
 800e098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09c:	f7f2 f89e 	bl	80001dc <__adddf3>
 800e0a0:	4632      	mov	r2, r6
 800e0a2:	463b      	mov	r3, r7
 800e0a4:	f7f2 fa50 	bl	8000548 <__aeabi_dmul>
 800e0a8:	a32d      	add	r3, pc, #180	; (adr r3, 800e160 <__ieee754_asin+0x320>)
 800e0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ae:	4680      	mov	r8, r0
 800e0b0:	4689      	mov	r9, r1
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	4639      	mov	r1, r7
 800e0b6:	f7f2 fa47 	bl	8000548 <__aeabi_dmul>
 800e0ba:	a32b      	add	r3, pc, #172	; (adr r3, 800e168 <__ieee754_asin+0x328>)
 800e0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c0:	f7f2 f88a 	bl	80001d8 <__aeabi_dsub>
 800e0c4:	4632      	mov	r2, r6
 800e0c6:	463b      	mov	r3, r7
 800e0c8:	f7f2 fa3e 	bl	8000548 <__aeabi_dmul>
 800e0cc:	a328      	add	r3, pc, #160	; (adr r3, 800e170 <__ieee754_asin+0x330>)
 800e0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d2:	f7f2 f883 	bl	80001dc <__adddf3>
 800e0d6:	4632      	mov	r2, r6
 800e0d8:	463b      	mov	r3, r7
 800e0da:	f7f2 fa35 	bl	8000548 <__aeabi_dmul>
 800e0de:	a326      	add	r3, pc, #152	; (adr r3, 800e178 <__ieee754_asin+0x338>)
 800e0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e4:	f7f2 f878 	bl	80001d8 <__aeabi_dsub>
 800e0e8:	4632      	mov	r2, r6
 800e0ea:	463b      	mov	r3, r7
 800e0ec:	f7f2 fa2c 	bl	8000548 <__aeabi_dmul>
 800e0f0:	4b25      	ldr	r3, [pc, #148]	; (800e188 <__ieee754_asin+0x348>)
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f7f2 f872 	bl	80001dc <__adddf3>
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	460b      	mov	r3, r1
 800e0fc:	4640      	mov	r0, r8
 800e0fe:	4649      	mov	r1, r9
 800e100:	f7f2 fb4c 	bl	800079c <__aeabi_ddiv>
 800e104:	4622      	mov	r2, r4
 800e106:	462b      	mov	r3, r5
 800e108:	f7f2 fa1e 	bl	8000548 <__aeabi_dmul>
 800e10c:	4602      	mov	r2, r0
 800e10e:	460b      	mov	r3, r1
 800e110:	4620      	mov	r0, r4
 800e112:	4629      	mov	r1, r5
 800e114:	e6bf      	b.n	800de96 <__ieee754_asin+0x56>
 800e116:	bf00      	nop
 800e118:	54442d18 	.word	0x54442d18
 800e11c:	3ff921fb 	.word	0x3ff921fb
 800e120:	33145c07 	.word	0x33145c07
 800e124:	3c91a626 	.word	0x3c91a626
 800e128:	8800759c 	.word	0x8800759c
 800e12c:	7e37e43c 	.word	0x7e37e43c
 800e130:	0dfdf709 	.word	0x0dfdf709
 800e134:	3f023de1 	.word	0x3f023de1
 800e138:	7501b288 	.word	0x7501b288
 800e13c:	3f49efe0 	.word	0x3f49efe0
 800e140:	b5688f3b 	.word	0xb5688f3b
 800e144:	3fa48228 	.word	0x3fa48228
 800e148:	0e884455 	.word	0x0e884455
 800e14c:	3fc9c155 	.word	0x3fc9c155
 800e150:	03eb6f7d 	.word	0x03eb6f7d
 800e154:	3fd4d612 	.word	0x3fd4d612
 800e158:	55555555 	.word	0x55555555
 800e15c:	3fc55555 	.word	0x3fc55555
 800e160:	b12e9282 	.word	0xb12e9282
 800e164:	3fb3b8c5 	.word	0x3fb3b8c5
 800e168:	1b8d0159 	.word	0x1b8d0159
 800e16c:	3fe6066c 	.word	0x3fe6066c
 800e170:	9c598ac8 	.word	0x9c598ac8
 800e174:	40002ae5 	.word	0x40002ae5
 800e178:	1c8a2d4b 	.word	0x1c8a2d4b
 800e17c:	40033a27 	.word	0x40033a27
 800e180:	3fefffff 	.word	0x3fefffff
 800e184:	3fdfffff 	.word	0x3fdfffff
 800e188:	3ff00000 	.word	0x3ff00000
 800e18c:	3fe00000 	.word	0x3fe00000
 800e190:	3fef3332 	.word	0x3fef3332
 800e194:	ee10 2a10 	vmov	r2, s0
 800e198:	ee10 0a10 	vmov	r0, s0
 800e19c:	465b      	mov	r3, fp
 800e19e:	4659      	mov	r1, fp
 800e1a0:	f7f2 f81c 	bl	80001dc <__adddf3>
 800e1a4:	4632      	mov	r2, r6
 800e1a6:	463b      	mov	r3, r7
 800e1a8:	ec41 0b19 	vmov	d9, r0, r1
 800e1ac:	ec51 0b18 	vmov	r0, r1, d8
 800e1b0:	f7f2 faf4 	bl	800079c <__aeabi_ddiv>
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	ec51 0b19 	vmov	r0, r1, d9
 800e1bc:	f7f2 f9c4 	bl	8000548 <__aeabi_dmul>
 800e1c0:	f04f 0800 	mov.w	r8, #0
 800e1c4:	4606      	mov	r6, r0
 800e1c6:	460f      	mov	r7, r1
 800e1c8:	4642      	mov	r2, r8
 800e1ca:	465b      	mov	r3, fp
 800e1cc:	4640      	mov	r0, r8
 800e1ce:	4659      	mov	r1, fp
 800e1d0:	f7f2 f9ba 	bl	8000548 <__aeabi_dmul>
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	460b      	mov	r3, r1
 800e1d8:	4620      	mov	r0, r4
 800e1da:	4629      	mov	r1, r5
 800e1dc:	f7f1 fffc 	bl	80001d8 <__aeabi_dsub>
 800e1e0:	4642      	mov	r2, r8
 800e1e2:	4604      	mov	r4, r0
 800e1e4:	460d      	mov	r5, r1
 800e1e6:	465b      	mov	r3, fp
 800e1e8:	4650      	mov	r0, sl
 800e1ea:	4659      	mov	r1, fp
 800e1ec:	f7f1 fff6 	bl	80001dc <__adddf3>
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	460b      	mov	r3, r1
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	4629      	mov	r1, r5
 800e1f8:	f7f2 fad0 	bl	800079c <__aeabi_ddiv>
 800e1fc:	4602      	mov	r2, r0
 800e1fe:	460b      	mov	r3, r1
 800e200:	f7f1 ffec 	bl	80001dc <__adddf3>
 800e204:	4602      	mov	r2, r0
 800e206:	460b      	mov	r3, r1
 800e208:	a113      	add	r1, pc, #76	; (adr r1, 800e258 <__ieee754_asin+0x418>)
 800e20a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e20e:	f7f1 ffe3 	bl	80001d8 <__aeabi_dsub>
 800e212:	4602      	mov	r2, r0
 800e214:	460b      	mov	r3, r1
 800e216:	4630      	mov	r0, r6
 800e218:	4639      	mov	r1, r7
 800e21a:	f7f1 ffdd 	bl	80001d8 <__aeabi_dsub>
 800e21e:	4642      	mov	r2, r8
 800e220:	4604      	mov	r4, r0
 800e222:	460d      	mov	r5, r1
 800e224:	465b      	mov	r3, fp
 800e226:	4640      	mov	r0, r8
 800e228:	4659      	mov	r1, fp
 800e22a:	f7f1 ffd7 	bl	80001dc <__adddf3>
 800e22e:	4602      	mov	r2, r0
 800e230:	460b      	mov	r3, r1
 800e232:	a10b      	add	r1, pc, #44	; (adr r1, 800e260 <__ieee754_asin+0x420>)
 800e234:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e238:	f7f1 ffce 	bl	80001d8 <__aeabi_dsub>
 800e23c:	4602      	mov	r2, r0
 800e23e:	460b      	mov	r3, r1
 800e240:	4620      	mov	r0, r4
 800e242:	4629      	mov	r1, r5
 800e244:	f7f1 ffc8 	bl	80001d8 <__aeabi_dsub>
 800e248:	4602      	mov	r2, r0
 800e24a:	460b      	mov	r3, r1
 800e24c:	a104      	add	r1, pc, #16	; (adr r1, 800e260 <__ieee754_asin+0x420>)
 800e24e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e252:	e6df      	b.n	800e014 <__ieee754_asin+0x1d4>
 800e254:	f3af 8000 	nop.w
 800e258:	33145c07 	.word	0x33145c07
 800e25c:	3c91a626 	.word	0x3c91a626
 800e260:	54442d18 	.word	0x54442d18
 800e264:	3fe921fb 	.word	0x3fe921fb

0800e268 <__ieee754_exp>:
 800e268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e26c:	ec55 4b10 	vmov	r4, r5, d0
 800e270:	49b5      	ldr	r1, [pc, #724]	; (800e548 <__ieee754_exp+0x2e0>)
 800e272:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e276:	428b      	cmp	r3, r1
 800e278:	ed2d 8b04 	vpush	{d8-d9}
 800e27c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800e280:	d93d      	bls.n	800e2fe <__ieee754_exp+0x96>
 800e282:	49b2      	ldr	r1, [pc, #712]	; (800e54c <__ieee754_exp+0x2e4>)
 800e284:	428b      	cmp	r3, r1
 800e286:	d918      	bls.n	800e2ba <__ieee754_exp+0x52>
 800e288:	ee10 3a10 	vmov	r3, s0
 800e28c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800e290:	4313      	orrs	r3, r2
 800e292:	d009      	beq.n	800e2a8 <__ieee754_exp+0x40>
 800e294:	ee10 2a10 	vmov	r2, s0
 800e298:	462b      	mov	r3, r5
 800e29a:	4620      	mov	r0, r4
 800e29c:	4629      	mov	r1, r5
 800e29e:	f7f1 ff9d 	bl	80001dc <__adddf3>
 800e2a2:	4604      	mov	r4, r0
 800e2a4:	460d      	mov	r5, r1
 800e2a6:	e002      	b.n	800e2ae <__ieee754_exp+0x46>
 800e2a8:	b10e      	cbz	r6, 800e2ae <__ieee754_exp+0x46>
 800e2aa:	2400      	movs	r4, #0
 800e2ac:	2500      	movs	r5, #0
 800e2ae:	ecbd 8b04 	vpop	{d8-d9}
 800e2b2:	ec45 4b10 	vmov	d0, r4, r5
 800e2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2ba:	a38d      	add	r3, pc, #564	; (adr r3, 800e4f0 <__ieee754_exp+0x288>)
 800e2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c0:	ee10 0a10 	vmov	r0, s0
 800e2c4:	4629      	mov	r1, r5
 800e2c6:	f7f2 fbcf 	bl	8000a68 <__aeabi_dcmpgt>
 800e2ca:	4607      	mov	r7, r0
 800e2cc:	b130      	cbz	r0, 800e2dc <__ieee754_exp+0x74>
 800e2ce:	ecbd 8b04 	vpop	{d8-d9}
 800e2d2:	2000      	movs	r0, #0
 800e2d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2d8:	f000 ba21 	b.w	800e71e <__math_oflow>
 800e2dc:	a386      	add	r3, pc, #536	; (adr r3, 800e4f8 <__ieee754_exp+0x290>)
 800e2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	4629      	mov	r1, r5
 800e2e6:	f7f2 fba1 	bl	8000a2c <__aeabi_dcmplt>
 800e2ea:	2800      	cmp	r0, #0
 800e2ec:	f000 808b 	beq.w	800e406 <__ieee754_exp+0x19e>
 800e2f0:	ecbd 8b04 	vpop	{d8-d9}
 800e2f4:	4638      	mov	r0, r7
 800e2f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2fa:	f000 ba07 	b.w	800e70c <__math_uflow>
 800e2fe:	4a94      	ldr	r2, [pc, #592]	; (800e550 <__ieee754_exp+0x2e8>)
 800e300:	4293      	cmp	r3, r2
 800e302:	f240 80ac 	bls.w	800e45e <__ieee754_exp+0x1f6>
 800e306:	4a93      	ldr	r2, [pc, #588]	; (800e554 <__ieee754_exp+0x2ec>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d87c      	bhi.n	800e406 <__ieee754_exp+0x19e>
 800e30c:	4b92      	ldr	r3, [pc, #584]	; (800e558 <__ieee754_exp+0x2f0>)
 800e30e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e316:	ee10 0a10 	vmov	r0, s0
 800e31a:	4629      	mov	r1, r5
 800e31c:	f7f1 ff5c 	bl	80001d8 <__aeabi_dsub>
 800e320:	4b8e      	ldr	r3, [pc, #568]	; (800e55c <__ieee754_exp+0x2f4>)
 800e322:	00f7      	lsls	r7, r6, #3
 800e324:	443b      	add	r3, r7
 800e326:	ed93 7b00 	vldr	d7, [r3]
 800e32a:	f1c6 0a01 	rsb	sl, r6, #1
 800e32e:	4680      	mov	r8, r0
 800e330:	4689      	mov	r9, r1
 800e332:	ebaa 0a06 	sub.w	sl, sl, r6
 800e336:	eeb0 8a47 	vmov.f32	s16, s14
 800e33a:	eef0 8a67 	vmov.f32	s17, s15
 800e33e:	ec53 2b18 	vmov	r2, r3, d8
 800e342:	4640      	mov	r0, r8
 800e344:	4649      	mov	r1, r9
 800e346:	f7f1 ff47 	bl	80001d8 <__aeabi_dsub>
 800e34a:	4604      	mov	r4, r0
 800e34c:	460d      	mov	r5, r1
 800e34e:	4622      	mov	r2, r4
 800e350:	462b      	mov	r3, r5
 800e352:	4620      	mov	r0, r4
 800e354:	4629      	mov	r1, r5
 800e356:	f7f2 f8f7 	bl	8000548 <__aeabi_dmul>
 800e35a:	a369      	add	r3, pc, #420	; (adr r3, 800e500 <__ieee754_exp+0x298>)
 800e35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e360:	4606      	mov	r6, r0
 800e362:	460f      	mov	r7, r1
 800e364:	f7f2 f8f0 	bl	8000548 <__aeabi_dmul>
 800e368:	a367      	add	r3, pc, #412	; (adr r3, 800e508 <__ieee754_exp+0x2a0>)
 800e36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36e:	f7f1 ff33 	bl	80001d8 <__aeabi_dsub>
 800e372:	4632      	mov	r2, r6
 800e374:	463b      	mov	r3, r7
 800e376:	f7f2 f8e7 	bl	8000548 <__aeabi_dmul>
 800e37a:	a365      	add	r3, pc, #404	; (adr r3, 800e510 <__ieee754_exp+0x2a8>)
 800e37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e380:	f7f1 ff2c 	bl	80001dc <__adddf3>
 800e384:	4632      	mov	r2, r6
 800e386:	463b      	mov	r3, r7
 800e388:	f7f2 f8de 	bl	8000548 <__aeabi_dmul>
 800e38c:	a362      	add	r3, pc, #392	; (adr r3, 800e518 <__ieee754_exp+0x2b0>)
 800e38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e392:	f7f1 ff21 	bl	80001d8 <__aeabi_dsub>
 800e396:	4632      	mov	r2, r6
 800e398:	463b      	mov	r3, r7
 800e39a:	f7f2 f8d5 	bl	8000548 <__aeabi_dmul>
 800e39e:	a360      	add	r3, pc, #384	; (adr r3, 800e520 <__ieee754_exp+0x2b8>)
 800e3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a4:	f7f1 ff1a 	bl	80001dc <__adddf3>
 800e3a8:	4632      	mov	r2, r6
 800e3aa:	463b      	mov	r3, r7
 800e3ac:	f7f2 f8cc 	bl	8000548 <__aeabi_dmul>
 800e3b0:	4602      	mov	r2, r0
 800e3b2:	460b      	mov	r3, r1
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	4629      	mov	r1, r5
 800e3b8:	f7f1 ff0e 	bl	80001d8 <__aeabi_dsub>
 800e3bc:	4602      	mov	r2, r0
 800e3be:	460b      	mov	r3, r1
 800e3c0:	4606      	mov	r6, r0
 800e3c2:	460f      	mov	r7, r1
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	4629      	mov	r1, r5
 800e3c8:	f7f2 f8be 	bl	8000548 <__aeabi_dmul>
 800e3cc:	ec41 0b19 	vmov	d9, r0, r1
 800e3d0:	f1ba 0f00 	cmp.w	sl, #0
 800e3d4:	d15d      	bne.n	800e492 <__ieee754_exp+0x22a>
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e3dc:	4630      	mov	r0, r6
 800e3de:	4639      	mov	r1, r7
 800e3e0:	f7f1 fefa 	bl	80001d8 <__aeabi_dsub>
 800e3e4:	4602      	mov	r2, r0
 800e3e6:	460b      	mov	r3, r1
 800e3e8:	ec51 0b19 	vmov	r0, r1, d9
 800e3ec:	f7f2 f9d6 	bl	800079c <__aeabi_ddiv>
 800e3f0:	4622      	mov	r2, r4
 800e3f2:	462b      	mov	r3, r5
 800e3f4:	f7f1 fef0 	bl	80001d8 <__aeabi_dsub>
 800e3f8:	4602      	mov	r2, r0
 800e3fa:	460b      	mov	r3, r1
 800e3fc:	2000      	movs	r0, #0
 800e3fe:	4958      	ldr	r1, [pc, #352]	; (800e560 <__ieee754_exp+0x2f8>)
 800e400:	f7f1 feea 	bl	80001d8 <__aeabi_dsub>
 800e404:	e74d      	b.n	800e2a2 <__ieee754_exp+0x3a>
 800e406:	4857      	ldr	r0, [pc, #348]	; (800e564 <__ieee754_exp+0x2fc>)
 800e408:	a347      	add	r3, pc, #284	; (adr r3, 800e528 <__ieee754_exp+0x2c0>)
 800e40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e40e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800e412:	4629      	mov	r1, r5
 800e414:	4620      	mov	r0, r4
 800e416:	f7f2 f897 	bl	8000548 <__aeabi_dmul>
 800e41a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e41e:	f7f1 fedd 	bl	80001dc <__adddf3>
 800e422:	f7f2 fb41 	bl	8000aa8 <__aeabi_d2iz>
 800e426:	4682      	mov	sl, r0
 800e428:	f7f2 f824 	bl	8000474 <__aeabi_i2d>
 800e42c:	a340      	add	r3, pc, #256	; (adr r3, 800e530 <__ieee754_exp+0x2c8>)
 800e42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e432:	4606      	mov	r6, r0
 800e434:	460f      	mov	r7, r1
 800e436:	f7f2 f887 	bl	8000548 <__aeabi_dmul>
 800e43a:	4602      	mov	r2, r0
 800e43c:	460b      	mov	r3, r1
 800e43e:	4620      	mov	r0, r4
 800e440:	4629      	mov	r1, r5
 800e442:	f7f1 fec9 	bl	80001d8 <__aeabi_dsub>
 800e446:	a33c      	add	r3, pc, #240	; (adr r3, 800e538 <__ieee754_exp+0x2d0>)
 800e448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e44c:	4680      	mov	r8, r0
 800e44e:	4689      	mov	r9, r1
 800e450:	4630      	mov	r0, r6
 800e452:	4639      	mov	r1, r7
 800e454:	f7f2 f878 	bl	8000548 <__aeabi_dmul>
 800e458:	ec41 0b18 	vmov	d8, r0, r1
 800e45c:	e76f      	b.n	800e33e <__ieee754_exp+0xd6>
 800e45e:	4a42      	ldr	r2, [pc, #264]	; (800e568 <__ieee754_exp+0x300>)
 800e460:	4293      	cmp	r3, r2
 800e462:	d811      	bhi.n	800e488 <__ieee754_exp+0x220>
 800e464:	a336      	add	r3, pc, #216	; (adr r3, 800e540 <__ieee754_exp+0x2d8>)
 800e466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46a:	ee10 0a10 	vmov	r0, s0
 800e46e:	4629      	mov	r1, r5
 800e470:	f7f1 feb4 	bl	80001dc <__adddf3>
 800e474:	4b3a      	ldr	r3, [pc, #232]	; (800e560 <__ieee754_exp+0x2f8>)
 800e476:	2200      	movs	r2, #0
 800e478:	f7f2 faf6 	bl	8000a68 <__aeabi_dcmpgt>
 800e47c:	b138      	cbz	r0, 800e48e <__ieee754_exp+0x226>
 800e47e:	4b38      	ldr	r3, [pc, #224]	; (800e560 <__ieee754_exp+0x2f8>)
 800e480:	2200      	movs	r2, #0
 800e482:	4620      	mov	r0, r4
 800e484:	4629      	mov	r1, r5
 800e486:	e70a      	b.n	800e29e <__ieee754_exp+0x36>
 800e488:	f04f 0a00 	mov.w	sl, #0
 800e48c:	e75f      	b.n	800e34e <__ieee754_exp+0xe6>
 800e48e:	4682      	mov	sl, r0
 800e490:	e75d      	b.n	800e34e <__ieee754_exp+0xe6>
 800e492:	4632      	mov	r2, r6
 800e494:	463b      	mov	r3, r7
 800e496:	2000      	movs	r0, #0
 800e498:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e49c:	f7f1 fe9c 	bl	80001d8 <__aeabi_dsub>
 800e4a0:	4602      	mov	r2, r0
 800e4a2:	460b      	mov	r3, r1
 800e4a4:	ec51 0b19 	vmov	r0, r1, d9
 800e4a8:	f7f2 f978 	bl	800079c <__aeabi_ddiv>
 800e4ac:	4602      	mov	r2, r0
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	ec51 0b18 	vmov	r0, r1, d8
 800e4b4:	f7f1 fe90 	bl	80001d8 <__aeabi_dsub>
 800e4b8:	4642      	mov	r2, r8
 800e4ba:	464b      	mov	r3, r9
 800e4bc:	f7f1 fe8c 	bl	80001d8 <__aeabi_dsub>
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	460b      	mov	r3, r1
 800e4c4:	2000      	movs	r0, #0
 800e4c6:	4926      	ldr	r1, [pc, #152]	; (800e560 <__ieee754_exp+0x2f8>)
 800e4c8:	f7f1 fe86 	bl	80001d8 <__aeabi_dsub>
 800e4cc:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800e4d0:	4592      	cmp	sl, r2
 800e4d2:	db02      	blt.n	800e4da <__ieee754_exp+0x272>
 800e4d4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800e4d8:	e6e3      	b.n	800e2a2 <__ieee754_exp+0x3a>
 800e4da:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800e4de:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800e4e8:	f7f2 f82e 	bl	8000548 <__aeabi_dmul>
 800e4ec:	e6d9      	b.n	800e2a2 <__ieee754_exp+0x3a>
 800e4ee:	bf00      	nop
 800e4f0:	fefa39ef 	.word	0xfefa39ef
 800e4f4:	40862e42 	.word	0x40862e42
 800e4f8:	d52d3051 	.word	0xd52d3051
 800e4fc:	c0874910 	.word	0xc0874910
 800e500:	72bea4d0 	.word	0x72bea4d0
 800e504:	3e663769 	.word	0x3e663769
 800e508:	c5d26bf1 	.word	0xc5d26bf1
 800e50c:	3ebbbd41 	.word	0x3ebbbd41
 800e510:	af25de2c 	.word	0xaf25de2c
 800e514:	3f11566a 	.word	0x3f11566a
 800e518:	16bebd93 	.word	0x16bebd93
 800e51c:	3f66c16c 	.word	0x3f66c16c
 800e520:	5555553e 	.word	0x5555553e
 800e524:	3fc55555 	.word	0x3fc55555
 800e528:	652b82fe 	.word	0x652b82fe
 800e52c:	3ff71547 	.word	0x3ff71547
 800e530:	fee00000 	.word	0xfee00000
 800e534:	3fe62e42 	.word	0x3fe62e42
 800e538:	35793c76 	.word	0x35793c76
 800e53c:	3dea39ef 	.word	0x3dea39ef
 800e540:	8800759c 	.word	0x8800759c
 800e544:	7e37e43c 	.word	0x7e37e43c
 800e548:	40862e41 	.word	0x40862e41
 800e54c:	7fefffff 	.word	0x7fefffff
 800e550:	3fd62e42 	.word	0x3fd62e42
 800e554:	3ff0a2b1 	.word	0x3ff0a2b1
 800e558:	0800ea58 	.word	0x0800ea58
 800e55c:	0800ea68 	.word	0x0800ea68
 800e560:	3ff00000 	.word	0x3ff00000
 800e564:	0800ea48 	.word	0x0800ea48
 800e568:	3defffff 	.word	0x3defffff

0800e56c <__ieee754_sqrt>:
 800e56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e570:	ec55 4b10 	vmov	r4, r5, d0
 800e574:	4e55      	ldr	r6, [pc, #340]	; (800e6cc <__ieee754_sqrt+0x160>)
 800e576:	43ae      	bics	r6, r5
 800e578:	ee10 0a10 	vmov	r0, s0
 800e57c:	ee10 3a10 	vmov	r3, s0
 800e580:	462a      	mov	r2, r5
 800e582:	4629      	mov	r1, r5
 800e584:	d110      	bne.n	800e5a8 <__ieee754_sqrt+0x3c>
 800e586:	ee10 2a10 	vmov	r2, s0
 800e58a:	462b      	mov	r3, r5
 800e58c:	f7f1 ffdc 	bl	8000548 <__aeabi_dmul>
 800e590:	4602      	mov	r2, r0
 800e592:	460b      	mov	r3, r1
 800e594:	4620      	mov	r0, r4
 800e596:	4629      	mov	r1, r5
 800e598:	f7f1 fe20 	bl	80001dc <__adddf3>
 800e59c:	4604      	mov	r4, r0
 800e59e:	460d      	mov	r5, r1
 800e5a0:	ec45 4b10 	vmov	d0, r4, r5
 800e5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5a8:	2d00      	cmp	r5, #0
 800e5aa:	dc10      	bgt.n	800e5ce <__ieee754_sqrt+0x62>
 800e5ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e5b0:	4330      	orrs	r0, r6
 800e5b2:	d0f5      	beq.n	800e5a0 <__ieee754_sqrt+0x34>
 800e5b4:	b15d      	cbz	r5, 800e5ce <__ieee754_sqrt+0x62>
 800e5b6:	ee10 2a10 	vmov	r2, s0
 800e5ba:	462b      	mov	r3, r5
 800e5bc:	ee10 0a10 	vmov	r0, s0
 800e5c0:	f7f1 fe0a 	bl	80001d8 <__aeabi_dsub>
 800e5c4:	4602      	mov	r2, r0
 800e5c6:	460b      	mov	r3, r1
 800e5c8:	f7f2 f8e8 	bl	800079c <__aeabi_ddiv>
 800e5cc:	e7e6      	b.n	800e59c <__ieee754_sqrt+0x30>
 800e5ce:	1512      	asrs	r2, r2, #20
 800e5d0:	d074      	beq.n	800e6bc <__ieee754_sqrt+0x150>
 800e5d2:	07d4      	lsls	r4, r2, #31
 800e5d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e5d8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e5dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e5e0:	bf5e      	ittt	pl
 800e5e2:	0fda      	lsrpl	r2, r3, #31
 800e5e4:	005b      	lslpl	r3, r3, #1
 800e5e6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e5ea:	2400      	movs	r4, #0
 800e5ec:	0fda      	lsrs	r2, r3, #31
 800e5ee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e5f2:	107f      	asrs	r7, r7, #1
 800e5f4:	005b      	lsls	r3, r3, #1
 800e5f6:	2516      	movs	r5, #22
 800e5f8:	4620      	mov	r0, r4
 800e5fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e5fe:	1886      	adds	r6, r0, r2
 800e600:	428e      	cmp	r6, r1
 800e602:	bfde      	ittt	le
 800e604:	1b89      	suble	r1, r1, r6
 800e606:	18b0      	addle	r0, r6, r2
 800e608:	18a4      	addle	r4, r4, r2
 800e60a:	0049      	lsls	r1, r1, #1
 800e60c:	3d01      	subs	r5, #1
 800e60e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e612:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e616:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e61a:	d1f0      	bne.n	800e5fe <__ieee754_sqrt+0x92>
 800e61c:	462a      	mov	r2, r5
 800e61e:	f04f 0e20 	mov.w	lr, #32
 800e622:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e626:	4281      	cmp	r1, r0
 800e628:	eb06 0c05 	add.w	ip, r6, r5
 800e62c:	dc02      	bgt.n	800e634 <__ieee754_sqrt+0xc8>
 800e62e:	d113      	bne.n	800e658 <__ieee754_sqrt+0xec>
 800e630:	459c      	cmp	ip, r3
 800e632:	d811      	bhi.n	800e658 <__ieee754_sqrt+0xec>
 800e634:	f1bc 0f00 	cmp.w	ip, #0
 800e638:	eb0c 0506 	add.w	r5, ip, r6
 800e63c:	da43      	bge.n	800e6c6 <__ieee754_sqrt+0x15a>
 800e63e:	2d00      	cmp	r5, #0
 800e640:	db41      	blt.n	800e6c6 <__ieee754_sqrt+0x15a>
 800e642:	f100 0801 	add.w	r8, r0, #1
 800e646:	1a09      	subs	r1, r1, r0
 800e648:	459c      	cmp	ip, r3
 800e64a:	bf88      	it	hi
 800e64c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800e650:	eba3 030c 	sub.w	r3, r3, ip
 800e654:	4432      	add	r2, r6
 800e656:	4640      	mov	r0, r8
 800e658:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e65c:	f1be 0e01 	subs.w	lr, lr, #1
 800e660:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e664:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e668:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e66c:	d1db      	bne.n	800e626 <__ieee754_sqrt+0xba>
 800e66e:	430b      	orrs	r3, r1
 800e670:	d006      	beq.n	800e680 <__ieee754_sqrt+0x114>
 800e672:	1c50      	adds	r0, r2, #1
 800e674:	bf13      	iteet	ne
 800e676:	3201      	addne	r2, #1
 800e678:	3401      	addeq	r4, #1
 800e67a:	4672      	moveq	r2, lr
 800e67c:	f022 0201 	bicne.w	r2, r2, #1
 800e680:	1063      	asrs	r3, r4, #1
 800e682:	0852      	lsrs	r2, r2, #1
 800e684:	07e1      	lsls	r1, r4, #31
 800e686:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e68a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e68e:	bf48      	it	mi
 800e690:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e694:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e698:	4614      	mov	r4, r2
 800e69a:	e781      	b.n	800e5a0 <__ieee754_sqrt+0x34>
 800e69c:	0ad9      	lsrs	r1, r3, #11
 800e69e:	3815      	subs	r0, #21
 800e6a0:	055b      	lsls	r3, r3, #21
 800e6a2:	2900      	cmp	r1, #0
 800e6a4:	d0fa      	beq.n	800e69c <__ieee754_sqrt+0x130>
 800e6a6:	02cd      	lsls	r5, r1, #11
 800e6a8:	d50a      	bpl.n	800e6c0 <__ieee754_sqrt+0x154>
 800e6aa:	f1c2 0420 	rsb	r4, r2, #32
 800e6ae:	fa23 f404 	lsr.w	r4, r3, r4
 800e6b2:	1e55      	subs	r5, r2, #1
 800e6b4:	4093      	lsls	r3, r2
 800e6b6:	4321      	orrs	r1, r4
 800e6b8:	1b42      	subs	r2, r0, r5
 800e6ba:	e78a      	b.n	800e5d2 <__ieee754_sqrt+0x66>
 800e6bc:	4610      	mov	r0, r2
 800e6be:	e7f0      	b.n	800e6a2 <__ieee754_sqrt+0x136>
 800e6c0:	0049      	lsls	r1, r1, #1
 800e6c2:	3201      	adds	r2, #1
 800e6c4:	e7ef      	b.n	800e6a6 <__ieee754_sqrt+0x13a>
 800e6c6:	4680      	mov	r8, r0
 800e6c8:	e7bd      	b.n	800e646 <__ieee754_sqrt+0xda>
 800e6ca:	bf00      	nop
 800e6cc:	7ff00000 	.word	0x7ff00000

0800e6d0 <with_errno>:
 800e6d0:	b570      	push	{r4, r5, r6, lr}
 800e6d2:	4604      	mov	r4, r0
 800e6d4:	460d      	mov	r5, r1
 800e6d6:	4616      	mov	r6, r2
 800e6d8:	f7ff fa30 	bl	800db3c <__errno>
 800e6dc:	4629      	mov	r1, r5
 800e6de:	6006      	str	r6, [r0, #0]
 800e6e0:	4620      	mov	r0, r4
 800e6e2:	bd70      	pop	{r4, r5, r6, pc}

0800e6e4 <xflow>:
 800e6e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6e6:	4614      	mov	r4, r2
 800e6e8:	461d      	mov	r5, r3
 800e6ea:	b108      	cbz	r0, 800e6f0 <xflow+0xc>
 800e6ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e6f0:	e9cd 2300 	strd	r2, r3, [sp]
 800e6f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6f8:	4620      	mov	r0, r4
 800e6fa:	4629      	mov	r1, r5
 800e6fc:	f7f1 ff24 	bl	8000548 <__aeabi_dmul>
 800e700:	2222      	movs	r2, #34	; 0x22
 800e702:	b003      	add	sp, #12
 800e704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e708:	f7ff bfe2 	b.w	800e6d0 <with_errno>

0800e70c <__math_uflow>:
 800e70c:	b508      	push	{r3, lr}
 800e70e:	2200      	movs	r2, #0
 800e710:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e714:	f7ff ffe6 	bl	800e6e4 <xflow>
 800e718:	ec41 0b10 	vmov	d0, r0, r1
 800e71c:	bd08      	pop	{r3, pc}

0800e71e <__math_oflow>:
 800e71e:	b508      	push	{r3, lr}
 800e720:	2200      	movs	r2, #0
 800e722:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e726:	f7ff ffdd 	bl	800e6e4 <xflow>
 800e72a:	ec41 0b10 	vmov	d0, r0, r1
 800e72e:	bd08      	pop	{r3, pc}

0800e730 <fabs>:
 800e730:	ec51 0b10 	vmov	r0, r1, d0
 800e734:	ee10 2a10 	vmov	r2, s0
 800e738:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e73c:	ec43 2b10 	vmov	d0, r2, r3
 800e740:	4770      	bx	lr

0800e742 <finite>:
 800e742:	b082      	sub	sp, #8
 800e744:	ed8d 0b00 	vstr	d0, [sp]
 800e748:	9801      	ldr	r0, [sp, #4]
 800e74a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e74e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e752:	0fc0      	lsrs	r0, r0, #31
 800e754:	b002      	add	sp, #8
 800e756:	4770      	bx	lr

0800e758 <nan>:
 800e758:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e760 <nan+0x8>
 800e75c:	4770      	bx	lr
 800e75e:	bf00      	nop
 800e760:	00000000 	.word	0x00000000
 800e764:	7ff80000 	.word	0x7ff80000

0800e768 <_init>:
 800e768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e76a:	bf00      	nop
 800e76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e76e:	bc08      	pop	{r3}
 800e770:	469e      	mov	lr, r3
 800e772:	4770      	bx	lr

0800e774 <_fini>:
 800e774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e776:	bf00      	nop
 800e778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e77a:	bc08      	pop	{r3}
 800e77c:	469e      	mov	lr, r3
 800e77e:	4770      	bx	lr
