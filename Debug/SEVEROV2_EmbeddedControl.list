
SEVEROV2_EmbeddedControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800d448  0800d448  0001d448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5a0  0800d5a0  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5a0  0800d5a0  0001d5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5a8  0800d5a8  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5a8  0800d5a8  0001d5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5ac  0800d5ac  0001d5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800d5b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          000029e8  200000a8  200000a8  000200a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002a90  20002a90  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021a99  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004de6  00000000  00000000  00041b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001af8  00000000  00000000  00046958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018f0  00000000  00000000  00048450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025822  00000000  00000000  00049d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021f67  00000000  00000000  0006f562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d982a  00000000  00000000  000914c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016acf3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007324  00000000  00000000  0016ad44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d42c 	.word	0x0800d42c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800d42c 	.word	0x0800d42c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b974 	b.w	8000e6c <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468e      	mov	lr, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d14d      	bne.n	8000c46 <__udivmoddi4+0xaa>
 8000baa:	428a      	cmp	r2, r1
 8000bac:	4694      	mov	ip, r2
 8000bae:	d969      	bls.n	8000c84 <__udivmoddi4+0xe8>
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	b152      	cbz	r2, 8000bcc <__udivmoddi4+0x30>
 8000bb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bba:	f1c2 0120 	rsb	r1, r2, #32
 8000bbe:	fa20 f101 	lsr.w	r1, r0, r1
 8000bc2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bca:	4094      	lsls	r4, r2
 8000bcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd0:	0c21      	lsrs	r1, r4, #16
 8000bd2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bd6:	fa1f f78c 	uxth.w	r7, ip
 8000bda:	fb08 e316 	mls	r3, r8, r6, lr
 8000bde:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000be2:	fb06 f107 	mul.w	r1, r6, r7
 8000be6:	4299      	cmp	r1, r3
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x64>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bf2:	f080 811f 	bcs.w	8000e34 <__udivmoddi4+0x298>
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	f240 811c 	bls.w	8000e34 <__udivmoddi4+0x298>
 8000bfc:	3e02      	subs	r6, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a5b      	subs	r3, r3, r1
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c08:	fb08 3310 	mls	r3, r8, r0, r3
 8000c0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c10:	fb00 f707 	mul.w	r7, r0, r7
 8000c14:	42a7      	cmp	r7, r4
 8000c16:	d90a      	bls.n	8000c2e <__udivmoddi4+0x92>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c20:	f080 810a 	bcs.w	8000e38 <__udivmoddi4+0x29c>
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	f240 8107 	bls.w	8000e38 <__udivmoddi4+0x29c>
 8000c2a:	4464      	add	r4, ip
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c32:	1be4      	subs	r4, r4, r7
 8000c34:	2600      	movs	r6, #0
 8000c36:	b11d      	cbz	r5, 8000c40 <__udivmoddi4+0xa4>
 8000c38:	40d4      	lsrs	r4, r2
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c40:	4631      	mov	r1, r6
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d909      	bls.n	8000c5e <__udivmoddi4+0xc2>
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	f000 80ef 	beq.w	8000e2e <__udivmoddi4+0x292>
 8000c50:	2600      	movs	r6, #0
 8000c52:	e9c5 0100 	strd	r0, r1, [r5]
 8000c56:	4630      	mov	r0, r6
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	fab3 f683 	clz	r6, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d14a      	bne.n	8000cfc <__udivmoddi4+0x160>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d302      	bcc.n	8000c70 <__udivmoddi4+0xd4>
 8000c6a:	4282      	cmp	r2, r0
 8000c6c:	f200 80f9 	bhi.w	8000e62 <__udivmoddi4+0x2c6>
 8000c70:	1a84      	subs	r4, r0, r2
 8000c72:	eb61 0303 	sbc.w	r3, r1, r3
 8000c76:	2001      	movs	r0, #1
 8000c78:	469e      	mov	lr, r3
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d0e0      	beq.n	8000c40 <__udivmoddi4+0xa4>
 8000c7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c82:	e7dd      	b.n	8000c40 <__udivmoddi4+0xa4>
 8000c84:	b902      	cbnz	r2, 8000c88 <__udivmoddi4+0xec>
 8000c86:	deff      	udf	#255	; 0xff
 8000c88:	fab2 f282 	clz	r2, r2
 8000c8c:	2a00      	cmp	r2, #0
 8000c8e:	f040 8092 	bne.w	8000db6 <__udivmoddi4+0x21a>
 8000c92:	eba1 010c 	sub.w	r1, r1, ip
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	2601      	movs	r6, #1
 8000ca0:	0c20      	lsrs	r0, r4, #16
 8000ca2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ca6:	fb07 1113 	mls	r1, r7, r3, r1
 8000caa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cae:	fb0e f003 	mul.w	r0, lr, r3
 8000cb2:	4288      	cmp	r0, r1
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x12c>
 8000cb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cba:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x12a>
 8000cc0:	4288      	cmp	r0, r1
 8000cc2:	f200 80cb 	bhi.w	8000e5c <__udivmoddi4+0x2c0>
 8000cc6:	4643      	mov	r3, r8
 8000cc8:	1a09      	subs	r1, r1, r0
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x156>
 8000ce0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ce8:	d202      	bcs.n	8000cf0 <__udivmoddi4+0x154>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f200 80bb 	bhi.w	8000e66 <__udivmoddi4+0x2ca>
 8000cf0:	4608      	mov	r0, r1
 8000cf2:	eba4 040e 	sub.w	r4, r4, lr
 8000cf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cfa:	e79c      	b.n	8000c36 <__udivmoddi4+0x9a>
 8000cfc:	f1c6 0720 	rsb	r7, r6, #32
 8000d00:	40b3      	lsls	r3, r6
 8000d02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d12:	431c      	orrs	r4, r3
 8000d14:	40f9      	lsrs	r1, r7
 8000d16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d22:	0c20      	lsrs	r0, r4, #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fb09 1118 	mls	r1, r9, r8, r1
 8000d2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d30:	fb08 f00e 	mul.w	r0, r8, lr
 8000d34:	4288      	cmp	r0, r1
 8000d36:	fa02 f206 	lsl.w	r2, r2, r6
 8000d3a:	d90b      	bls.n	8000d54 <__udivmoddi4+0x1b8>
 8000d3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d40:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d44:	f080 8088 	bcs.w	8000e58 <__udivmoddi4+0x2bc>
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	f240 8085 	bls.w	8000e58 <__udivmoddi4+0x2bc>
 8000d4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d52:	4461      	add	r1, ip
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d68:	458e      	cmp	lr, r1
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x1e2>
 8000d6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d70:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d74:	d26c      	bcs.n	8000e50 <__udivmoddi4+0x2b4>
 8000d76:	458e      	cmp	lr, r1
 8000d78:	d96a      	bls.n	8000e50 <__udivmoddi4+0x2b4>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4461      	add	r1, ip
 8000d7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d82:	fba0 9402 	umull	r9, r4, r0, r2
 8000d86:	eba1 010e 	sub.w	r1, r1, lr
 8000d8a:	42a1      	cmp	r1, r4
 8000d8c:	46c8      	mov	r8, r9
 8000d8e:	46a6      	mov	lr, r4
 8000d90:	d356      	bcc.n	8000e40 <__udivmoddi4+0x2a4>
 8000d92:	d053      	beq.n	8000e3c <__udivmoddi4+0x2a0>
 8000d94:	b15d      	cbz	r5, 8000dae <__udivmoddi4+0x212>
 8000d96:	ebb3 0208 	subs.w	r2, r3, r8
 8000d9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000da2:	fa22 f306 	lsr.w	r3, r2, r6
 8000da6:	40f1      	lsrs	r1, r6
 8000da8:	431f      	orrs	r7, r3
 8000daa:	e9c5 7100 	strd	r7, r1, [r5]
 8000dae:	2600      	movs	r6, #0
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	f1c2 0320 	rsb	r3, r2, #32
 8000dba:	40d8      	lsrs	r0, r3
 8000dbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dc4:	4091      	lsls	r1, r2
 8000dc6:	4301      	orrs	r1, r0
 8000dc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dcc:	fa1f fe8c 	uxth.w	lr, ip
 8000dd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000dd8:	0c0b      	lsrs	r3, r1, #16
 8000dda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dde:	fb00 f60e 	mul.w	r6, r0, lr
 8000de2:	429e      	cmp	r6, r3
 8000de4:	fa04 f402 	lsl.w	r4, r4, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x260>
 8000dea:	eb1c 0303 	adds.w	r3, ip, r3
 8000dee:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000df2:	d22f      	bcs.n	8000e54 <__udivmoddi4+0x2b8>
 8000df4:	429e      	cmp	r6, r3
 8000df6:	d92d      	bls.n	8000e54 <__udivmoddi4+0x2b8>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	1b9b      	subs	r3, r3, r6
 8000dfe:	b289      	uxth	r1, r1
 8000e00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e04:	fb07 3316 	mls	r3, r7, r6, r3
 8000e08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e10:	428b      	cmp	r3, r1
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x28a>
 8000e14:	eb1c 0101 	adds.w	r1, ip, r1
 8000e18:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e1c:	d216      	bcs.n	8000e4c <__udivmoddi4+0x2b0>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d914      	bls.n	8000e4c <__udivmoddi4+0x2b0>
 8000e22:	3e02      	subs	r6, #2
 8000e24:	4461      	add	r1, ip
 8000e26:	1ac9      	subs	r1, r1, r3
 8000e28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e2c:	e738      	b.n	8000ca0 <__udivmoddi4+0x104>
 8000e2e:	462e      	mov	r6, r5
 8000e30:	4628      	mov	r0, r5
 8000e32:	e705      	b.n	8000c40 <__udivmoddi4+0xa4>
 8000e34:	4606      	mov	r6, r0
 8000e36:	e6e3      	b.n	8000c00 <__udivmoddi4+0x64>
 8000e38:	4618      	mov	r0, r3
 8000e3a:	e6f8      	b.n	8000c2e <__udivmoddi4+0x92>
 8000e3c:	454b      	cmp	r3, r9
 8000e3e:	d2a9      	bcs.n	8000d94 <__udivmoddi4+0x1f8>
 8000e40:	ebb9 0802 	subs.w	r8, r9, r2
 8000e44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e48:	3801      	subs	r0, #1
 8000e4a:	e7a3      	b.n	8000d94 <__udivmoddi4+0x1f8>
 8000e4c:	4646      	mov	r6, r8
 8000e4e:	e7ea      	b.n	8000e26 <__udivmoddi4+0x28a>
 8000e50:	4620      	mov	r0, r4
 8000e52:	e794      	b.n	8000d7e <__udivmoddi4+0x1e2>
 8000e54:	4640      	mov	r0, r8
 8000e56:	e7d1      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e58:	46d0      	mov	r8, sl
 8000e5a:	e77b      	b.n	8000d54 <__udivmoddi4+0x1b8>
 8000e5c:	3b02      	subs	r3, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	e732      	b.n	8000cc8 <__udivmoddi4+0x12c>
 8000e62:	4630      	mov	r0, r6
 8000e64:	e709      	b.n	8000c7a <__udivmoddi4+0xde>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e742      	b.n	8000cf2 <__udivmoddi4+0x156>

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <fromTickToMs>:

uint32_t fromSecToTick(float sec) {
	return (sec * configTICK_RATE_HZ);
}

float fromTickToMs(uint32_t ticks) {
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	return ((float) (ticks) * 1000.0f) / (float) configTICK_RATE_HZ;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	ee07 3a90 	vmov	s15, r3
 8000e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e82:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000ea4 <fromTickToMs+0x34>
 8000e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e8a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000ea4 <fromTickToMs+0x34>
 8000e8e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000e92:	eef0 7a66 	vmov.f32	s15, s13
}
 8000e96:	eeb0 0a67 	vmov.f32	s0, s15
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	447a0000 	.word	0x447a0000

08000ea8 <GetCrc16Checksumm>:
#include "checksum.h"

uint16_t GetCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 8000eb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eb8:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	len = len-2;
 8000eba:	887b      	ldrh	r3, [r7, #2]
 8000ebc:	3b02      	subs	r3, #2
 8000ebe:	807b      	strh	r3, [r7, #2]

    while (len--) {
 8000ec0:	e025      	b.n	8000f0e <GetCrc16Checksumm+0x66>
        crc ^= *pcBlock++ << 8;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	b21a      	sxth	r2, r3
 8000ece:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ed2:	4053      	eors	r3, r2
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	81fb      	strh	r3, [r7, #14]

        for (i = 0; i < 8; i++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	737b      	strb	r3, [r7, #13]
 8000edc:	e014      	b.n	8000f08 <GetCrc16Checksumm+0x60>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 8000ede:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	da09      	bge.n	8000efa <GetCrc16Checksumm+0x52>
 8000ee6:	89fb      	ldrh	r3, [r7, #14]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000ef0:	f083 0301 	eor.w	r3, r3, #1
 8000ef4:	b21b      	sxth	r3, r3
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	e002      	b.n	8000f00 <GetCrc16Checksumm+0x58>
 8000efa:	89fb      	ldrh	r3, [r7, #14]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++)
 8000f02:	7b7b      	ldrb	r3, [r7, #13]
 8000f04:	3301      	adds	r3, #1
 8000f06:	737b      	strb	r3, [r7, #13]
 8000f08:	7b7b      	ldrb	r3, [r7, #13]
 8000f0a:	2b07      	cmp	r3, #7
 8000f0c:	d9e7      	bls.n	8000ede <GetCrc16Checksumm+0x36>
    while (len--) {
 8000f0e:	887b      	ldrh	r3, [r7, #2]
 8000f10:	1e5a      	subs	r2, r3, #1
 8000f12:	807a      	strh	r2, [r7, #2]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1d4      	bne.n	8000ec2 <GetCrc16Checksumm+0x1a>
    }
    return crc;
 8000f18:	89fb      	ldrh	r3, [r7, #14]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <IsCrc16ChecksummCorrect>:

bool IsCrc16ChecksummCorrect(uint8_t *pcBlock, uint16_t len)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	807b      	strh	r3, [r7, #2]
	uint16_t crc_calculated = GetCrc16Checksumm(pcBlock, len);
 8000f32:	887b      	ldrh	r3, [r7, #2]
 8000f34:	4619      	mov	r1, r3
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ffb6 	bl	8000ea8 <GetCrc16Checksumm>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	82fb      	strh	r3, [r7, #22]

	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 8000f40:	887b      	ldrh	r3, [r7, #2]
 8000f42:	3b02      	subs	r3, #2
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	4413      	add	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
	uint16_t crc_got = *crc_pointer;
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	81fb      	strh	r3, [r7, #14]

	if(crc_got == crc_calculated) {
 8000f50:	89fa      	ldrh	r2, [r7, #14]
 8000f52:	8afb      	ldrh	r3, [r7, #22]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d101      	bne.n	8000f5c <IsCrc16ChecksummCorrect+0x36>
		return true;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <IsCrc16ChecksummCorrect+0x38>
	}
	else {
		return false;
 8000f5c:	2300      	movs	r3, #0
	}
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <AddCrc16Checksumm>:

void AddCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b084      	sub	sp, #16
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	807b      	strh	r3, [r7, #2]
	uint16_t crc = GetCrc16Checksumm(pcBlock, len);
 8000f72:	887b      	ldrh	r3, [r7, #2]
 8000f74:	4619      	mov	r1, r3
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ff96 	bl	8000ea8 <GetCrc16Checksumm>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	81fb      	strh	r3, [r7, #14]
	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 8000f80:	887b      	ldrh	r3, [r7, #2]
 8000f82:	3b02      	subs	r3, #2
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	4413      	add	r3, r2
 8000f88:	60bb      	str	r3, [r7, #8]
	*crc_pointer = crc;
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	89fa      	ldrh	r2, [r7, #14]
 8000f8e:	801a      	strh	r2, [r3, #0]
}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <IsChecksumm8bCorrectVma>:

	msg[length-1] = crc;
}

bool IsChecksumm8bCorrectVma(uint8_t *msg, uint16_t length)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
	uint8_t crcGot, crc = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	75fb      	strb	r3, [r7, #23]
	int i;

	crcGot = msg[length-1] ;
 8000fa8:	887b      	ldrh	r3, [r7, #2]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	73fb      	strb	r3, [r7, #15]

	for (i = 1; i < length - 1; ++i) {
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	e009      	b.n	8000fce <IsChecksumm8bCorrectVma+0x36>
		crc ^= msg[i];
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781a      	ldrb	r2, [r3, #0]
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
 8000fc4:	4053      	eors	r3, r2
 8000fc6:	75fb      	strb	r3, [r7, #23]
	for (i = 1; i < length - 1; ++i) {
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	887b      	ldrh	r3, [r7, #2]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	dbf0      	blt.n	8000fba <IsChecksumm8bCorrectVma+0x22>
	}

	if (crc == crcGot) {
 8000fd8:	7dfa      	ldrb	r2, [r7, #23]
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d101      	bne.n	8000fe4 <IsChecksumm8bCorrectVma+0x4c>
		return 1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <IsChecksumm8bCorrectVma+0x4e>
	}
	else {
		return 0;
 8000fe4:	2300      	movs	r3, #0
	}
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	371c      	adds	r7, #28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <AddChecksumm8bVma>:

void AddChecksumm8bVma(uint8_t *msg, uint16_t length)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b085      	sub	sp, #20
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]

	for(int i = 1; i < length - 1; i++) {
 8001002:	2301      	movs	r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	e009      	b.n	800101c <AddChecksumm8bVma+0x2a>
		crc ^= msg[i];
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	781a      	ldrb	r2, [r3, #0]
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	4053      	eors	r3, r2
 8001014:	73fb      	strb	r3, [r7, #15]
	for(int i = 1; i < length - 1; i++) {
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	3301      	adds	r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	887b      	ldrh	r3, [r7, #2]
 800101e:	3b01      	subs	r3, #1
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	429a      	cmp	r2, r3
 8001024:	dbf0      	blt.n	8001008 <AddChecksumm8bVma+0x16>
	}

	msg[length-1] = crc;
 8001026:	887b      	ldrh	r3, [r7, #2]
 8001028:	3b01      	subs	r3, #1
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	701a      	strb	r2, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <PickBit>:
        array[i] = 0x00;
    }
}

bool PickBit(uint8_t input, uint8_t bit)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	460a      	mov	r2, r1
 800104a:	71fb      	strb	r3, [r7, #7]
 800104c:	4613      	mov	r3, r2
 800104e:	71bb      	strb	r3, [r7, #6]
	//return (bool) ((input << (7 - bit)) >> 7);

	switch(bit) {
 8001050:	79bb      	ldrb	r3, [r7, #6]
 8001052:	2b07      	cmp	r3, #7
 8001054:	d857      	bhi.n	8001106 <PickBit+0xc6>
 8001056:	a201      	add	r2, pc, #4	; (adr r2, 800105c <PickBit+0x1c>)
 8001058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105c:	0800107d 	.word	0x0800107d
 8001060:	0800108f 	.word	0x0800108f
 8001064:	080010a1 	.word	0x080010a1
 8001068:	080010b3 	.word	0x080010b3
 800106c:	080010c5 	.word	0x080010c5
 8001070:	080010d7 	.word	0x080010d7
 8001074:	080010e9 	.word	0x080010e9
 8001078:	080010fb 	.word	0x080010fb
	case 0:
			return (bool) (input & 0b00000001);
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	bf14      	ite	ne
 8001086:	2301      	movne	r3, #1
 8001088:	2300      	moveq	r3, #0
 800108a:	b2db      	uxtb	r3, r3
 800108c:	e03c      	b.n	8001108 <PickBit+0xc8>
	case 1:
			return (bool) (input & 0b00000010);
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	bf14      	ite	ne
 8001098:	2301      	movne	r3, #1
 800109a:	2300      	moveq	r3, #0
 800109c:	b2db      	uxtb	r3, r3
 800109e:	e033      	b.n	8001108 <PickBit+0xc8>
	case 2:
			return (bool) (input & 0b00000100);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	bf14      	ite	ne
 80010aa:	2301      	movne	r3, #1
 80010ac:	2300      	moveq	r3, #0
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	e02a      	b.n	8001108 <PickBit+0xc8>
	case 3:
			return (bool) (input & 0b00001000);
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	bf14      	ite	ne
 80010bc:	2301      	movne	r3, #1
 80010be:	2300      	moveq	r3, #0
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	e021      	b.n	8001108 <PickBit+0xc8>
	case 4:
			return (bool) (input & 0b00010000);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	f003 0310 	and.w	r3, r3, #16
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	bf14      	ite	ne
 80010ce:	2301      	movne	r3, #1
 80010d0:	2300      	moveq	r3, #0
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	e018      	b.n	8001108 <PickBit+0xc8>
	case 5:
			return (bool) (input & 0b00100000);
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	f003 0320 	and.w	r3, r3, #32
 80010dc:	2b00      	cmp	r3, #0
 80010de:	bf14      	ite	ne
 80010e0:	2301      	movne	r3, #1
 80010e2:	2300      	moveq	r3, #0
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	e00f      	b.n	8001108 <PickBit+0xc8>
	case 6:
			return (bool) (input & 0b01000000);
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	bf14      	ite	ne
 80010f2:	2301      	movne	r3, #1
 80010f4:	2300      	moveq	r3, #0
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	e006      	b.n	8001108 <PickBit+0xc8>
	case 7:
			return (bool) (input & 0b10000000);
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	09db      	lsrs	r3, r3, #7
 8001102:	b2db      	uxtb	r3, r3
 8001104:	e000      	b.n	8001108 <PickBit+0xc8>
	}
	return false;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <variableInit>:
bool i2c1PackageTransmit = false;
bool i2c1PackageReceived = false;


void variableInit()
{
 8001114:	b580      	push	{r7, lr}
 8001116:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 800111a:	af00      	add	r7, sp, #0
	rComputer.reset = 0;
 800111c:	4b47      	ldr	r3, [pc, #284]	; (800123c <variableInit+0x128>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]

	rState.cameraNum = 0;
 8001122:	4b47      	ldr	r3, [pc, #284]	; (8001240 <variableInit+0x12c>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
	rState.contourSelected = 0;
 8001128:	4b45      	ldr	r3, [pc, #276]	; (8001240 <variableInit+0x12c>)
 800112a:	2200      	movs	r2, #0
 800112c:	705a      	strb	r2, [r3, #1]
	rState.flash = 0;
 800112e:	4b44      	ldr	r3, [pc, #272]	; (8001240 <variableInit+0x12c>)
 8001130:	2200      	movs	r2, #0
 8001132:	709a      	strb	r2, [r3, #2]
	rState.operationMode = 0;
 8001134:	4b42      	ldr	r3, [pc, #264]	; (8001240 <variableInit+0x12c>)
 8001136:	2200      	movs	r2, #0
 8001138:	70da      	strb	r2, [r3, #3]
	rState.pcCounter = 0;
 800113a:	4b41      	ldr	r3, [pc, #260]	; (8001240 <variableInit+0x12c>)
 800113c:	2200      	movs	r2, #0
 800113e:	711a      	strb	r2, [r3, #4]
	rState.lag_error = 0;
 8001140:	4b3f      	ldr	r3, [pc, #252]	; (8001240 <variableInit+0x12c>)
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	609a      	str	r2, [r3, #8]

	rSensors.yaw = 0;
 8001148:	4b3e      	ldr	r3, [pc, #248]	; (8001244 <variableInit+0x130>)
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
	rSensors.raw_yaw = 0;
 8001150:	4b3c      	ldr	r3, [pc, #240]	; (8001244 <variableInit+0x130>)
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
	rSensors.roll =  0;
 8001158:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <variableInit+0x130>)
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
	rSensors.pitch =  0;
 8001160:	4b38      	ldr	r3, [pc, #224]	; (8001244 <variableInit+0x130>)
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	605a      	str	r2, [r3, #4]

	rSensors.old_yaw = 0;
 8001168:	4b36      	ldr	r3, [pc, #216]	; (8001244 <variableInit+0x130>)
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
	rSensors.spins = 0;
 8001170:	4b34      	ldr	r3, [pc, #208]	; (8001244 <variableInit+0x130>)
 8001172:	2200      	movs	r2, #0
 8001174:	831a      	strh	r2, [r3, #24]

	rSensors.pressure = 0;
 8001176:	4b33      	ldr	r3, [pc, #204]	; (8001244 <variableInit+0x130>)
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	655a      	str	r2, [r3, #84]	; 0x54
	rSensors.pressure_null = 0;
 800117e:	4b31      	ldr	r3, [pc, #196]	; (8001244 <variableInit+0x130>)
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	659a      	str	r2, [r3, #88]	; 0x58

	rSensors.rollSpeed = 0;
 8001186:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <variableInit+0x130>)
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
	rSensors.pitchSpeed = 0;
 800118e:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <variableInit+0x130>)
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	621a      	str	r2, [r3, #32]
	rSensors.yawSpeed = 0;
 8001196:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <variableInit+0x130>)
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	; 0x24

	rSensors.accelX = 0;
 800119e:	4b29      	ldr	r3, [pc, #164]	; (8001244 <variableInit+0x130>)
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	629a      	str	r2, [r3, #40]	; 0x28
	rSensors.accelY = 0;
 80011a6:	4b27      	ldr	r3, [pc, #156]	; (8001244 <variableInit+0x130>)
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	62da      	str	r2, [r3, #44]	; 0x2c
	rSensors.accelZ = 0;
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <variableInit+0x130>)
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	631a      	str	r2, [r3, #48]	; 0x30

	rSensors.magX = 0;
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <variableInit+0x130>)
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34
	rSensors.magY = 0;
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <variableInit+0x130>)
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	639a      	str	r2, [r3, #56]	; 0x38
	rSensors.magZ = 0;
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <variableInit+0x130>)
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	63da      	str	r2, [r3, #60]	; 0x3c

	rSensors.quatA = 0;
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <variableInit+0x130>)
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	641a      	str	r2, [r3, #64]	; 0x40
	rSensors.quatB = 0;
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <variableInit+0x130>)
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	645a      	str	r2, [r3, #68]	; 0x44
	rSensors.quatC = 0;
 80011de:	4b19      	ldr	r3, [pc, #100]	; (8001244 <variableInit+0x130>)
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	649a      	str	r2, [r3, #72]	; 0x48
	rSensors.quatD = 0;
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <variableInit+0x130>)
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	64da      	str	r2, [r3, #76]	; 0x4c

    rDevice[DEV1].address = 0x03;
 80011ee:	4b16      	ldr	r3, [pc, #88]	; (8001248 <variableInit+0x134>)
 80011f0:	2203      	movs	r2, #3
 80011f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    rDevice[DEV2].address = 0x05;
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <variableInit+0x134>)
 80011f8:	2205      	movs	r2, #5
 80011fa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    rDevice[GRAB].address = 0x02;
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <variableInit+0x134>)
 8001200:	2202      	movs	r2, #2
 8001202:	729a      	strb	r2, [r3, #10]
    rDevice[GRAB_ROTATION].address = 0x06;
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <variableInit+0x134>)
 8001206:	2206      	movs	r2, #6
 8001208:	751a      	strb	r2, [r3, #20]
    rDevice[TILT].address = 0x01;
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <variableInit+0x134>)
 800120c:	2201      	movs	r2, #1
 800120e:	779a      	strb	r2, [r3, #30]

	rSensors.resetIMU = true;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <variableInit+0x130>)
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	thrustersInit();
 8001218:	f002 fcca 	bl	8003bb0 <thrustersInit>

	// Flash reading
	struct flashConfiguration_s config;
	flashReadSettings(&config);
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fde4 	bl	8001dec <flashReadSettings>
	flashReadStructure(&config);
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	4618      	mov	r0, r3
 8001228:	f000 ffae 	bl	8002188 <flashReadStructure>

	// Thrusters initialization
	if(rState.flash) {
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <variableInit+0x12c>)
 800122e:	789b      	ldrb	r3, [r3, #2]
 8001230:	2b00      	cmp	r3, #0
		return;
	}
}
 8001232:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200015c8 	.word	0x200015c8
 8001240:	20001494 	.word	0x20001494
 8001244:	20001560 	.word	0x20001560
 8001248:	200015e4 	.word	0x200015e4

0800124c <uartBusesInit>:

void uartBusesInit()
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
	// Shore UART configuration
	uartBus[SHORE_UART].huart = &huart3; // Link to huart will be set before receiving
 8001252:	4b75      	ldr	r3, [pc, #468]	; (8001428 <uartBusesInit+0x1dc>)
 8001254:	4a75      	ldr	r2, [pc, #468]	; (800142c <uartBusesInit+0x1e0>)
 8001256:	631a      	str	r2, [r3, #48]	; 0x30
	uartBus[SHORE_UART].rxBuffer = ShoreRequestBuffer;
 8001258:	4b73      	ldr	r3, [pc, #460]	; (8001428 <uartBusesInit+0x1dc>)
 800125a:	4a75      	ldr	r2, [pc, #468]	; (8001430 <uartBusesInit+0x1e4>)
 800125c:	601a      	str	r2, [r3, #0]
	uartBus[SHORE_UART].txBuffer = ShoreResponseBuffer;
 800125e:	4b72      	ldr	r3, [pc, #456]	; (8001428 <uartBusesInit+0x1dc>)
 8001260:	4a74      	ldr	r2, [pc, #464]	; (8001434 <uartBusesInit+0x1e8>)
 8001262:	605a      	str	r2, [r3, #4]
	uartBus[SHORE_UART].rxLength = 0; // Length of the received message will be determined when first byte will be received
 8001264:	4b70      	ldr	r3, [pc, #448]	; (8001428 <uartBusesInit+0x1dc>)
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	uartBus[SHORE_UART].txLength = 0; // Length of the transmitted message will be determined before transmit
 800126c:	4b6e      	ldr	r3, [pc, #440]	; (8001428 <uartBusesInit+0x1dc>)
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	uartBus[SHORE_UART].brokenRxTolerance = 20;
 8001274:	4b6c      	ldr	r3, [pc, #432]	; (8001428 <uartBusesInit+0x1dc>)
 8001276:	2214      	movs	r2, #20
 8001278:	771a      	strb	r2, [r3, #28]
	uartBus[SHORE_UART].timeoutRxTolerance = 500;
 800127a:	4b6b      	ldr	r3, [pc, #428]	; (8001428 <uartBusesInit+0x1dc>)
 800127c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001280:	621a      	str	r2, [r3, #32]
	uartBus[SHORE_UART].receiveTimeout = 200;
 8001282:	4b69      	ldr	r3, [pc, #420]	; (8001428 <uartBusesInit+0x1dc>)
 8001284:	22c8      	movs	r2, #200	; 0xc8
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
	uartBus[SHORE_UART].transmitTimeout = 200;
 8001288:	4b67      	ldr	r3, [pc, #412]	; (8001428 <uartBusesInit+0x1dc>)
 800128a:	22c8      	movs	r2, #200	; 0xc8
 800128c:	62da      	str	r2, [r3, #44]	; 0x2c
	uartBus[SHORE_UART].txrxType = TXRX_IT;
 800128e:	4b66      	ldr	r3, [pc, #408]	; (8001428 <uartBusesInit+0x1dc>)
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	// Thrusters UART configuration
	uartBus[THRUSTERS_UART].huart = &huart1;
 8001296:	4b64      	ldr	r3, [pc, #400]	; (8001428 <uartBusesInit+0x1dc>)
 8001298:	4a67      	ldr	r2, [pc, #412]	; (8001438 <uartBusesInit+0x1ec>)
 800129a:	669a      	str	r2, [r3, #104]	; 0x68
	uartBus[THRUSTERS_UART].rxBuffer = 0; // Receive bugger will be set before receive
 800129c:	4b62      	ldr	r3, [pc, #392]	; (8001428 <uartBusesInit+0x1dc>)
 800129e:	2200      	movs	r2, #0
 80012a0:	639a      	str	r2, [r3, #56]	; 0x38
	uartBus[THRUSTERS_UART].txBuffer = 0; // Transmit bugger will be set before transmit
 80012a2:	4b61      	ldr	r3, [pc, #388]	; (8001428 <uartBusesInit+0x1dc>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	63da      	str	r2, [r3, #60]	; 0x3c
	uartBus[THRUSTERS_UART].rxLength = 0; // Receive length will be set before transmit
 80012a8:	4b5f      	ldr	r3, [pc, #380]	; (8001428 <uartBusesInit+0x1dc>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	uartBus[THRUSTERS_UART].txLength = 0; // Transmit length will be set before transmit
 80012b0:	4b5d      	ldr	r3, [pc, #372]	; (8001428 <uartBusesInit+0x1dc>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	uartBus[THRUSTERS_UART].brokenRxTolerance = 0; // There is no special event on this bus
 80012b8:	4b5b      	ldr	r3, [pc, #364]	; (8001428 <uartBusesInit+0x1dc>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	uartBus[THRUSTERS_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 80012c0:	4b59      	ldr	r3, [pc, #356]	; (8001428 <uartBusesInit+0x1dc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	659a      	str	r2, [r3, #88]	; 0x58
	uartBus[THRUSTERS_UART].receiveTimeout = 100;
 80012c6:	4b58      	ldr	r3, [pc, #352]	; (8001428 <uartBusesInit+0x1dc>)
 80012c8:	2264      	movs	r2, #100	; 0x64
 80012ca:	661a      	str	r2, [r3, #96]	; 0x60
	uartBus[THRUSTERS_UART].transmitTimeout = 100;
 80012cc:	4b56      	ldr	r3, [pc, #344]	; (8001428 <uartBusesInit+0x1dc>)
 80012ce:	2264      	movs	r2, #100	; 0x64
 80012d0:	665a      	str	r2, [r3, #100]	; 0x64
	uartBus[THRUSTERS_UART].txrxType = TXRX_DMA;
 80012d2:	4b55      	ldr	r3, [pc, #340]	; (8001428 <uartBusesInit+0x1dc>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	// Devices UART configuration
	uartBus[DEVICES_UART].huart = &huart4;
 80012da:	4b53      	ldr	r3, [pc, #332]	; (8001428 <uartBusesInit+0x1dc>)
 80012dc:	4a57      	ldr	r2, [pc, #348]	; (800143c <uartBusesInit+0x1f0>)
 80012de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	uartBus[DEVICES_UART].rxBuffer = 0; // Receive bugger will be set before receive
 80012e2:	4b51      	ldr	r3, [pc, #324]	; (8001428 <uartBusesInit+0x1dc>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	671a      	str	r2, [r3, #112]	; 0x70
	uartBus[DEVICES_UART].txBuffer = 0; // Transmit bugger will be set before transmit
 80012e8:	4b4f      	ldr	r3, [pc, #316]	; (8001428 <uartBusesInit+0x1dc>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	675a      	str	r2, [r3, #116]	; 0x74
	uartBus[DEVICES_UART].rxLength = DEVICES_REQUEST_LENGTH;
 80012ee:	4b4e      	ldr	r3, [pc, #312]	; (8001428 <uartBusesInit+0x1dc>)
 80012f0:	2207      	movs	r2, #7
 80012f2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	uartBus[DEVICES_UART].txLength = DEVICES_RESPONSE_LENGTH;
 80012f6:	4b4c      	ldr	r3, [pc, #304]	; (8001428 <uartBusesInit+0x1dc>)
 80012f8:	220a      	movs	r2, #10
 80012fa:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	uartBus[DEVICES_UART].brokenRxTolerance = 0; // There is no special event on this bus
 80012fe:	4b4a      	ldr	r3, [pc, #296]	; (8001428 <uartBusesInit+0x1dc>)
 8001300:	2200      	movs	r2, #0
 8001302:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	uartBus[DEVICES_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001306:	4b48      	ldr	r3, [pc, #288]	; (8001428 <uartBusesInit+0x1dc>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	uartBus[DEVICES_UART].receiveTimeout = 100;
 800130e:	4b46      	ldr	r3, [pc, #280]	; (8001428 <uartBusesInit+0x1dc>)
 8001310:	2264      	movs	r2, #100	; 0x64
 8001312:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	uartBus[DEVICES_UART].transmitTimeout = 100;
 8001316:	4b44      	ldr	r3, [pc, #272]	; (8001428 <uartBusesInit+0x1dc>)
 8001318:	2264      	movs	r2, #100	; 0x64
 800131a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	uartBus[DEVICES_UART].txrxType = TXRX_DMA;
 800131e:	4b42      	ldr	r3, [pc, #264]	; (8001428 <uartBusesInit+0x1dc>)
 8001320:	2201      	movs	r2, #1
 8001322:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

	// IMU UART configuration
	uartBus[IMU_UART].huart = &huart2;
 8001326:	4b40      	ldr	r3, [pc, #256]	; (8001428 <uartBusesInit+0x1dc>)
 8001328:	4a45      	ldr	r2, [pc, #276]	; (8001440 <uartBusesInit+0x1f4>)
 800132a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
 800132e:	4b3e      	ldr	r3, [pc, #248]	; (8001428 <uartBusesInit+0x1dc>)
 8001330:	4a44      	ldr	r2, [pc, #272]	; (8001444 <uartBusesInit+0x1f8>)
 8001332:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	uartBus[IMU_UART].txBuffer = 0; // Buffer will be set before transmit
 8001336:	4b3c      	ldr	r3, [pc, #240]	; (8001428 <uartBusesInit+0x1dc>)
 8001338:	2200      	movs	r2, #0
 800133a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uartBus[IMU_UART].rxLength = 0; // Receive length will be set before transmit
 800133e:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <uartBusesInit+0x1dc>)
 8001340:	2200      	movs	r2, #0
 8001342:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	uartBus[IMU_UART].txLength = 0; // Transmit length will be set before transmit
 8001346:	4b38      	ldr	r3, [pc, #224]	; (8001428 <uartBusesInit+0x1dc>)
 8001348:	2200      	movs	r2, #0
 800134a:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	uartBus[IMU_UART].brokenRxTolerance = 0; // There is no special event on this bus
 800134e:	4b36      	ldr	r3, [pc, #216]	; (8001428 <uartBusesInit+0x1dc>)
 8001350:	2200      	movs	r2, #0
 8001352:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	uartBus[IMU_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001356:	4b34      	ldr	r3, [pc, #208]	; (8001428 <uartBusesInit+0x1dc>)
 8001358:	2200      	movs	r2, #0
 800135a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	uartBus[IMU_UART].receiveTimeout = 100;
 800135e:	4b32      	ldr	r3, [pc, #200]	; (8001428 <uartBusesInit+0x1dc>)
 8001360:	2264      	movs	r2, #100	; 0x64
 8001362:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	uartBus[IMU_UART].transmitTimeout = 100;
 8001366:	4b30      	ldr	r3, [pc, #192]	; (8001428 <uartBusesInit+0x1dc>)
 8001368:	2264      	movs	r2, #100	; 0x64
 800136a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	uartBus[IMU_UART].txrxType = TXRX_IT;
 800136e:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <uartBusesInit+0x1dc>)
 8001370:	2200      	movs	r2, #0
 8001372:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001376:	2300      	movs	r3, #0
 8001378:	71fb      	strb	r3, [r7, #7]
 800137a:	e04a      	b.n	8001412 <uartBusesInit+0x1c6>
		uartBus[i].packageReceived = false;
 800137c:	79fa      	ldrb	r2, [r7, #7]
 800137e:	492a      	ldr	r1, [pc, #168]	; (8001428 <uartBusesInit+0x1dc>)
 8001380:	4613      	mov	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	1a9b      	subs	r3, r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	440b      	add	r3, r1
 800138a:	3308      	adds	r3, #8
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
		uartBus[i].packageTransmitted = false;
 8001390:	79fa      	ldrb	r2, [r7, #7]
 8001392:	4925      	ldr	r1, [pc, #148]	; (8001428 <uartBusesInit+0x1dc>)
 8001394:	4613      	mov	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	1a9b      	subs	r3, r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	440b      	add	r3, r1
 800139e:	3309      	adds	r3, #9
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
		uartBus[i].successRxCounter = 0;
 80013a4:	79fa      	ldrb	r2, [r7, #7]
 80013a6:	4920      	ldr	r1, [pc, #128]	; (8001428 <uartBusesInit+0x1dc>)
 80013a8:	4613      	mov	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	1a9b      	subs	r3, r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	440b      	add	r3, r1
 80013b2:	330a      	adds	r3, #10
 80013b4:	2200      	movs	r2, #0
 80013b6:	801a      	strh	r2, [r3, #0]
		uartBus[i].brokenRxCounter = 0;
 80013b8:	79fa      	ldrb	r2, [r7, #7]
 80013ba:	491b      	ldr	r1, [pc, #108]	; (8001428 <uartBusesInit+0x1dc>)
 80013bc:	4613      	mov	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	1a9b      	subs	r3, r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	440b      	add	r3, r1
 80013c6:	330c      	adds	r3, #12
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
		uartBus[i].outdatedRxCounter = 0;
 80013cc:	79fa      	ldrb	r2, [r7, #7]
 80013ce:	4916      	ldr	r1, [pc, #88]	; (8001428 <uartBusesInit+0x1dc>)
 80013d0:	4613      	mov	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	1a9b      	subs	r3, r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	440b      	add	r3, r1
 80013da:	3310      	adds	r3, #16
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
		uartBus[i].timeoutCounter = 0;
 80013e0:	79fa      	ldrb	r2, [r7, #7]
 80013e2:	4911      	ldr	r1, [pc, #68]	; (8001428 <uartBusesInit+0x1dc>)
 80013e4:	4613      	mov	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	1a9b      	subs	r3, r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	440b      	add	r3, r1
 80013ee:	3314      	adds	r3, #20
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
		uartBus[i].lastMessage = 0;
 80013f6:	79fa      	ldrb	r2, [r7, #7]
 80013f8:	490b      	ldr	r1, [pc, #44]	; (8001428 <uartBusesInit+0x1dc>)
 80013fa:	4613      	mov	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	1a9b      	subs	r3, r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	440b      	add	r3, r1
 8001404:	3318      	adds	r3, #24
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	3301      	adds	r3, #1
 8001410:	71fb      	strb	r3, [r7, #7]
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d9b1      	bls.n	800137c <uartBusesInit+0x130>
	}
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	200000c4 	.word	0x200000c4
 800142c:	20001cd4 	.word	0x20001cd4
 8001430:	200019e0 	.word	0x200019e0
 8001434:	20001a34 	.word	0x20001a34
 8001438:	20001c4c 	.word	0x20001c4c
 800143c:	20001c08 	.word	0x20001c08
 8001440:	20001c90 	.word	0x20001c90
 8001444:	20001a98 	.word	0x20001a98

08001448 <transmitPackage>:

bool transmitPackage(struct uartBus_s *bus, bool isrMode)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	70fb      	strb	r3, [r7, #3]
    bus->packageTransmitted = false;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	725a      	strb	r2, [r3, #9]

    HAL_UART_AbortTransmit_IT(bus->huart);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4618      	mov	r0, r3
 8001460:	f007 fade 	bl	8008a20 <HAL_UART_AbortTransmit_IT>
    switch(bus->txrxType) {
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00d      	beq.n	800148a <transmitPackage+0x42>
 800146e:	2b01      	cmp	r3, #1
 8001470:	d117      	bne.n	80014a2 <transmitPackage+0x5a>
        case TXRX_DMA:
            HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6859      	ldr	r1, [r3, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001480:	b29b      	uxth	r3, r3
 8001482:	461a      	mov	r2, r3
 8001484:	f007 fa1e 	bl	80088c4 <HAL_UART_Transmit_DMA>
            break;
 8001488:	e00d      	b.n	80014a6 <transmitPackage+0x5e>
        case TXRX_IT:
        	HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6859      	ldr	r1, [r3, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001498:	b29b      	uxth	r3, r3
 800149a:	461a      	mov	r2, r3
 800149c:	f007 f99d 	bl	80087da <HAL_UART_Transmit_IT>
            break;
 80014a0:	e001      	b.n	80014a6 <transmitPackage+0x5e>
        default:
            return false;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e036      	b.n	8001514 <transmitPackage+0xcc>
    }

    bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 80014a6:	f00a f8ad 	bl	800b604 <xTaskGetTickCount>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fcdf 	bl	8000e70 <fromTickToMs>
 80014b2:	eef0 7a40 	vmov.f32	s15, s0
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	edc3 7a05 	vstr	s15, [r3, #20]
    while (!bus->packageTransmitted && !isrMode) {
 80014bc:	e01c      	b.n	80014f8 <transmitPackage+0xb0>
    	if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 80014be:	f00a f8a1 	bl	800b604 <xTaskGetTickCount>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fcd3 	bl	8000e70 <fromTickToMs>
 80014ca:	eeb0 7a40 	vmov.f32	s14, s0
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	edd3 7a05 	vldr	s15, [r3, #20]
 80014d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ec:	dd01      	ble.n	80014f2 <transmitPackage+0xaa>
    		return false;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e010      	b.n	8001514 <transmitPackage+0xcc>
    	}
    	osDelay(DELAY_UART_TIMEOUT);
 80014f2:	2032      	movs	r0, #50	; 0x32
 80014f4:	f008 fda7 	bl	800a046 <osDelay>
    while (!bus->packageTransmitted && !isrMode) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7a5b      	ldrb	r3, [r3, #9]
 80014fc:	f083 0301 	eor.w	r3, r3, #1
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <transmitPackage+0xca>
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	f083 0301 	eor.w	r3, r3, #1
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1d5      	bne.n	80014be <transmitPackage+0x76>
    }
    return true;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <transmitAndReceive>:
	}
	return true;
}

bool transmitAndReceive(struct uartBus_s *bus, bool isrMode)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	70fb      	strb	r3, [r7, #3]
	bus->packageReceived = false;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	721a      	strb	r2, [r3, #8]
	bus->packageTransmitted = false;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	725a      	strb	r2, [r3, #9]

	HAL_UART_AbortReceive_IT(bus->huart);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	4618      	mov	r0, r3
 800153a:	f007 fae5 	bl	8008b08 <HAL_UART_AbortReceive_IT>
	HAL_UART_AbortTransmit_IT(bus->huart);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4618      	mov	r0, r3
 8001544:	f007 fa6c 	bl	8008a20 <HAL_UART_AbortTransmit_IT>
	switch(bus->txrxType) {
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800154e:	2b00      	cmp	r3, #0
 8001550:	d018      	beq.n	8001584 <transmitAndReceive+0x68>
 8001552:	2b01      	cmp	r3, #1
 8001554:	d12d      	bne.n	80015b2 <transmitAndReceive+0x96>
		case TXRX_DMA:
			HAL_UART_Receive_DMA(bus->huart, bus->rxBuffer, bus->rxLength);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6819      	ldr	r1, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001564:	b29b      	uxth	r3, r3
 8001566:	461a      	mov	r2, r3
 8001568:	f007 fa2a 	bl	80089c0 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6859      	ldr	r1, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800157a:	b29b      	uxth	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	f007 f9a1 	bl	80088c4 <HAL_UART_Transmit_DMA>
			break;
 8001582:	e018      	b.n	80015b6 <transmitAndReceive+0x9a>
		case TXRX_IT:
			HAL_UART_Receive_IT(bus->huart, bus->rxBuffer, bus->rxLength);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6819      	ldr	r1, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001592:	b29b      	uxth	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	f007 f965 	bl	8008864 <HAL_UART_Receive_IT>
			HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6859      	ldr	r1, [r3, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	461a      	mov	r2, r3
 80015ac:	f007 f915 	bl	80087da <HAL_UART_Transmit_IT>
			break;
 80015b0:	e001      	b.n	80015b6 <transmitAndReceive+0x9a>
		default:
			return false;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e03d      	b.n	8001632 <transmitAndReceive+0x116>
	}

	bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 80015b6:	f00a f825 	bl	800b604 <xTaskGetTickCount>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fc57 	bl	8000e70 <fromTickToMs>
 80015c2:	eef0 7a40 	vmov.f32	s15, s0
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	edc3 7a05 	vstr	s15, [r3, #20]
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 80015cc:	e01c      	b.n	8001608 <transmitAndReceive+0xec>
		if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 80015ce:	f00a f819 	bl	800b604 <xTaskGetTickCount>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fc4b 	bl	8000e70 <fromTickToMs>
 80015da:	eeb0 7a40 	vmov.f32	s14, s0
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80015e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	ee07 3a90 	vmov	s15, r3
 80015f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fc:	dd01      	ble.n	8001602 <transmitAndReceive+0xe6>
			return false;
 80015fe:	2300      	movs	r3, #0
 8001600:	e017      	b.n	8001632 <transmitAndReceive+0x116>
		}
		osDelay(DELAY_UART_TIMEOUT);
 8001602:	2032      	movs	r0, #50	; 0x32
 8001604:	f008 fd1f 	bl	800a046 <osDelay>
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	7a5b      	ldrb	r3, [r3, #9]
 800160c:	f083 0301 	eor.w	r3, r3, #1
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00c      	beq.n	8001630 <transmitAndReceive+0x114>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	7a1b      	ldrb	r3, [r3, #8]
 800161a:	f083 0301 	eor.w	r3, r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <transmitAndReceive+0x114>
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	f083 0301 	eor.w	r3, r3, #1
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1ce      	bne.n	80015ce <transmitAndReceive+0xb2>
	}
	return true;
 8001630:	2301      	movs	r3, #1
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 8001644:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <HAL_UART_TxCpltCallback+0x6c>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	429a      	cmp	r2, r3
 800164c:	d103      	bne.n	8001656 <HAL_UART_TxCpltCallback+0x1a>
		uartBus[SHORE_UART].packageTransmitted = true;
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <HAL_UART_TxCpltCallback+0x6c>)
 8001650:	2201      	movs	r2, #1
 8001652:	725a      	strb	r2, [r3, #9]
		return;
 8001654:	e022      	b.n	800169c <HAL_UART_TxCpltCallback+0x60>
	}

	struct uartBus_s *bus = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 800165a:	2300      	movs	r3, #0
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	e01a      	b.n	8001696 <HAL_UART_TxCpltCallback+0x5a>
		if(uartBus[i].huart == huart) {
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	4911      	ldr	r1, [pc, #68]	; (80016a8 <HAL_UART_TxCpltCallback+0x6c>)
 8001664:	4613      	mov	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	1a9b      	subs	r3, r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	440b      	add	r3, r1
 800166e:	3330      	adds	r3, #48	; 0x30
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	d10b      	bne.n	8001690 <HAL_UART_TxCpltCallback+0x54>
			bus = &uartBus[i];
 8001678:	7bfa      	ldrb	r2, [r7, #15]
 800167a:	4613      	mov	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	1a9b      	subs	r3, r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	4a09      	ldr	r2, [pc, #36]	; (80016a8 <HAL_UART_TxCpltCallback+0x6c>)
 8001684:	4413      	add	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
			bus->packageTransmitted = true;
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2201      	movs	r2, #1
 800168c:	725a      	strb	r2, [r3, #9]
			break;
 800168e:	e005      	b.n	800169c <HAL_UART_TxCpltCallback+0x60>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	3301      	adds	r3, #1
 8001694:	73fb      	strb	r3, [r7, #15]
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d9e1      	bls.n	8001660 <HAL_UART_TxCpltCallback+0x24>
		}
	}
}
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	200000c4 	.word	0x200000c4

080016ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 80016b4:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <HAL_UART_RxCpltCallback+0x7c>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d102      	bne.n	80016c4 <HAL_UART_RxCpltCallback+0x18>
		ShoreReceive();
 80016be:	f000 f861 	bl	8001784 <ShoreReceive>
		return;
 80016c2:	e02d      	b.n	8001720 <HAL_UART_RxCpltCallback+0x74>
	}

	struct uartBus_s *bus = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 80016c8:	2300      	movs	r3, #0
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	e025      	b.n	800171a <HAL_UART_RxCpltCallback+0x6e>
		if(uartBus[i].huart == huart) {
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	4915      	ldr	r1, [pc, #84]	; (8001728 <HAL_UART_RxCpltCallback+0x7c>)
 80016d2:	4613      	mov	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	1a9b      	subs	r3, r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	440b      	add	r3, r1
 80016dc:	3330      	adds	r3, #48	; 0x30
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d116      	bne.n	8001714 <HAL_UART_RxCpltCallback+0x68>
			bus = &uartBus[i];
 80016e6:	7bfa      	ldrb	r2, [r7, #15]
 80016e8:	4613      	mov	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	1a9b      	subs	r3, r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	4a0d      	ldr	r2, [pc, #52]	; (8001728 <HAL_UART_RxCpltCallback+0x7c>)
 80016f2:	4413      	add	r3, r2
 80016f4:	60bb      	str	r3, [r7, #8]
			bus->packageReceived = true;
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	2201      	movs	r2, #1
 80016fa:	721a      	strb	r2, [r3, #8]
			bus->lastMessage = fromTickToMs(xTaskGetTickCount());
 80016fc:	f009 ff82 	bl	800b604 <xTaskGetTickCount>
 8001700:	4603      	mov	r3, r0
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fbb4 	bl	8000e70 <fromTickToMs>
 8001708:	eef0 7a40 	vmov.f32	s15, s0
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	edc3 7a06 	vstr	s15, [r3, #24]
			break;
 8001712:	e005      	b.n	8001720 <HAL_UART_RxCpltCallback+0x74>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	3301      	adds	r3, #1
 8001718:	73fb      	strb	r3, [r7, #15]
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d9d6      	bls.n	80016ce <HAL_UART_RxCpltCallback+0x22>
		}
	}
}
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200000c4 	.word	0x200000c4

0800172c <HAL_I2C_MasterRxCpltCallback>:
	}
}


void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1) {
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a06      	ldr	r2, [pc, #24]	; (8001750 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d102      	bne.n	8001742 <HAL_I2C_MasterRxCpltCallback+0x16>
		i2c1PackageReceived = true;
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_I2C_MasterRxCpltCallback+0x28>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
	}
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20001b24 	.word	0x20001b24
 8001754:	2000016d 	.word	0x2000016d

08001758 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1) {
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a06      	ldr	r2, [pc, #24]	; (800177c <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d102      	bne.n	800176e <HAL_I2C_MasterTxCpltCallback+0x16>
		i2c1PackageTransmit = true;
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_I2C_MasterTxCpltCallback+0x28>)
 800176a:	2201      	movs	r2, #1
 800176c:	701a      	strb	r2, [r3, #0]
	}
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20001b24 	.word	0x20001b24
 8001780:	2000016c 	.word	0x2000016c

08001784 <ShoreReceive>:
		break;
	}
}

void ShoreReceive()
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
	static portBASE_TYPE xHigherPriorityTaskWoken1;
	xHigherPriorityTaskWoken1 = pdFALSE;
 800178a:	4b40      	ldr	r3, [pc, #256]	; (800188c <ShoreReceive+0x108>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
	if(counterRx == 0) {
 8001790:	4b3f      	ldr	r3, [pc, #252]	; (8001890 <ShoreReceive+0x10c>)
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d136      	bne.n	8001806 <ShoreReceive+0x82>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 8001798:	2300      	movs	r3, #0
 800179a:	71fb      	strb	r3, [r7, #7]
 800179c:	e02f      	b.n	80017fe <ShoreReceive+0x7a>
			if(uartBus[SHORE_UART].rxBuffer[0] == ShoreCodes[i]) {
 800179e:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <ShoreReceive+0x110>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	781a      	ldrb	r2, [r3, #0]
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	493c      	ldr	r1, [pc, #240]	; (8001898 <ShoreReceive+0x114>)
 80017a8:	5ccb      	ldrb	r3, [r1, r3]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d119      	bne.n	80017e2 <ShoreReceive+0x5e>
				counterRx = 1;
 80017ae:	4b38      	ldr	r3, [pc, #224]	; (8001890 <ShoreReceive+0x10c>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	801a      	strh	r2, [r3, #0]
				uartBus[SHORE_UART].rxLength = ShoreLength[i]-1;
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	4a39      	ldr	r2, [pc, #228]	; (800189c <ShoreReceive+0x118>)
 80017b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	3b01      	subs	r3, #1
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b34      	ldr	r3, [pc, #208]	; (8001894 <ShoreReceive+0x110>)
 80017c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer+1, uartBus[SHORE_UART].rxLength);
 80017c8:	4b32      	ldr	r3, [pc, #200]	; (8001894 <ShoreReceive+0x110>)
 80017ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80017cc:	4b31      	ldr	r3, [pc, #196]	; (8001894 <ShoreReceive+0x110>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	3301      	adds	r3, #1
 80017d2:	4a30      	ldr	r2, [pc, #192]	; (8001894 <ShoreReceive+0x110>)
 80017d4:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80017d8:	b292      	uxth	r2, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	f007 f842 	bl	8008864 <HAL_UART_Receive_IT>

				//xTimerStartFromISR(UARTTimer, NULL);
//				xTimerStart(UARTTimer,1000);
				break;
 80017e0:	e047      	b.n	8001872 <ShoreReceive+0xee>
			}

			if(i == SHORE_REQUEST_MODES_NUMBER-1) {
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d107      	bne.n	80017f8 <ShoreReceive+0x74>
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 80017e8:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <ShoreReceive+0x110>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	4a29      	ldr	r2, [pc, #164]	; (8001894 <ShoreReceive+0x110>)
 80017ee:	6811      	ldr	r1, [r2, #0]
 80017f0:	2201      	movs	r2, #1
 80017f2:	4618      	mov	r0, r3
 80017f4:	f007 f836 	bl	8008864 <HAL_UART_Receive_IT>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	3301      	adds	r3, #1
 80017fc:	71fb      	strb	r3, [r7, #7]
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d9cc      	bls.n	800179e <ShoreReceive+0x1a>
 8001804:	e035      	b.n	8001872 <ShoreReceive+0xee>
			}
		}
	}
	else if(counterRx == 1) {
 8001806:	4b22      	ldr	r3, [pc, #136]	; (8001890 <ShoreReceive+0x10c>)
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d131      	bne.n	8001872 <ShoreReceive+0xee>
		uartBus[SHORE_UART].packageReceived = true;
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <ShoreReceive+0x110>)
 8001810:	2201      	movs	r2, #1
 8001812:	721a      	strb	r2, [r3, #8]
		uartBus[SHORE_UART].lastMessage = fromTickToMs(xTaskGetTickCount());
 8001814:	f009 fef6 	bl	800b604 <xTaskGetTickCount>
 8001818:	4603      	mov	r3, r0
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fb28 	bl	8000e70 <fromTickToMs>
 8001820:	eef0 7a40 	vmov.f32	s15, s0
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <ShoreReceive+0x110>)
 8001826:	edc3 7a06 	vstr	s15, [r3, #24]
		ShoreRequest(uartBus[SHORE_UART].rxBuffer);
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <ShoreReceive+0x110>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f838 	bl	80018a4 <ShoreRequest>
		ShoreResponse(uartBus[SHORE_UART].txBuffer);
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <ShoreReceive+0x110>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	4618      	mov	r0, r3
 800183a:	f000 f9d5 	bl	8001be8 <ShoreResponse>
		uartBus[SHORE_UART].txLength = SHORE_RESPONSE_LENGTH;
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <ShoreReceive+0x110>)
 8001840:	2246      	movs	r2, #70	; 0x46
 8001842:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		HAL_UART_Transmit_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].txBuffer, uartBus[SHORE_UART].txLength);
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <ShoreReceive+0x110>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <ShoreReceive+0x110>)
 800184c:	6851      	ldr	r1, [r2, #4]
 800184e:	4a11      	ldr	r2, [pc, #68]	; (8001894 <ShoreReceive+0x110>)
 8001850:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8001854:	b292      	uxth	r2, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f006 ffbf 	bl	80087da <HAL_UART_Transmit_IT>
		counterRx = 0;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <ShoreReceive+0x10c>)
 800185e:	2200      	movs	r2, #0
 8001860:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <ShoreReceive+0x110>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <ShoreReceive+0x110>)
 8001868:	6811      	ldr	r1, [r2, #0]
 800186a:	2201      	movs	r2, #1
 800186c:	4618      	mov	r0, r3
 800186e:	f006 fff9 	bl	8008864 <HAL_UART_Receive_IT>
//		xTimerStart(UARTTimer,10);
	}

//	if (xHigherPriorityTaskWoken == pdTRUE) {
//		xHigherPriorityTaskWoken = pdFALSE;
		taskYIELD();
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <ShoreReceive+0x11c>)
 8001874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	f3bf 8f4f 	dsb	sy
 800187e:	f3bf 8f6f 	isb	sy
//	}
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000170 	.word	0x20000170
 8001890:	20000174 	.word	0x20000174
 8001894:	200000c4 	.word	0x200000c4
 8001898:	0800d548 	.word	0x0800d548
 800189c:	0800d540 	.word	0x0800d540
 80018a0:	e000ed04 	.word	0xe000ed04

080018a4 <ShoreRequest>:
    	++uartBus[DEVICES_UART].brokenRxCounter;
    }
}

void ShoreRequest(uint8_t *requestBuf)
{
 80018a4:	b5b0      	push	{r4, r5, r7, lr}
 80018a6:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80018b0:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80018b4:	6018      	str	r0, [r3, #0]
    if (IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_LENGTH)) {
 80018b6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80018ba:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80018be:	211e      	movs	r1, #30
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	f7ff fb30 	bl	8000f26 <IsCrc16ChecksummCorrect>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 8174 	beq.w	8001bb6 <ShoreRequest+0x312>
    	struct shoreRequest_s req;
    	memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_LENGTH);
 80018ce:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80018d2:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f507 740d 	add.w	r4, r7, #564	; 0x234
 80018dc:	461d      	mov	r5, r3
 80018de:	6828      	ldr	r0, [r5, #0]
 80018e0:	6869      	ldr	r1, [r5, #4]
 80018e2:	68aa      	ldr	r2, [r5, #8]
 80018e4:	68eb      	ldr	r3, [r5, #12]
 80018e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018e8:	6928      	ldr	r0, [r5, #16]
 80018ea:	6969      	ldr	r1, [r5, #20]
 80018ec:	69aa      	ldr	r2, [r5, #24]
 80018ee:	c407      	stmia	r4!, {r0, r1, r2}
 80018f0:	8bab      	ldrh	r3, [r5, #28]
 80018f2:	8023      	strh	r3, [r4, #0]

    	uint8_t tempCameraNum = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257

        rJoySpeed.march = req.march;
 80018fa:	f9b7 3236 	ldrsh.w	r3, [r7, #566]	; 0x236
 80018fe:	ee07 3a90 	vmov	s15, r3
 8001902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001906:	4bb1      	ldr	r3, [pc, #708]	; (8001bcc <ShoreRequest+0x328>)
 8001908:	edc3 7a00 	vstr	s15, [r3]
        rJoySpeed.lag = req.lag;
 800190c:	f9b7 3238 	ldrsh.w	r3, [r7, #568]	; 0x238
 8001910:	ee07 3a90 	vmov	s15, r3
 8001914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001918:	4bac      	ldr	r3, [pc, #688]	; (8001bcc <ShoreRequest+0x328>)
 800191a:	edc3 7a01 	vstr	s15, [r3, #4]
        rJoySpeed.depth = req.depth;
 800191e:	f9b7 323a 	ldrsh.w	r3, [r7, #570]	; 0x23a
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192a:	4ba8      	ldr	r3, [pc, #672]	; (8001bcc <ShoreRequest+0x328>)
 800192c:	edc3 7a02 	vstr	s15, [r3, #8]
        rJoySpeed.roll = req.roll;
 8001930:	f9b7 323c 	ldrsh.w	r3, [r7, #572]	; 0x23c
 8001934:	ee07 3a90 	vmov	s15, r3
 8001938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193c:	4ba3      	ldr	r3, [pc, #652]	; (8001bcc <ShoreRequest+0x328>)
 800193e:	edc3 7a03 	vstr	s15, [r3, #12]
        rJoySpeed.pitch = req.pitch;
 8001942:	f9b7 323e 	ldrsh.w	r3, [r7, #574]	; 0x23e
 8001946:	ee07 3a90 	vmov	s15, r3
 800194a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800194e:	4b9f      	ldr	r3, [pc, #636]	; (8001bcc <ShoreRequest+0x328>)
 8001950:	edc3 7a04 	vstr	s15, [r3, #16]
        rJoySpeed.yaw = req.yaw;
 8001954:	f9b7 3240 	ldrsh.w	r3, [r7, #576]	; 0x240
 8001958:	ee07 3a90 	vmov	s15, r3
 800195c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001960:	4b9a      	ldr	r3, [pc, #616]	; (8001bcc <ShoreRequest+0x328>)
 8001962:	edc3 7a05 	vstr	s15, [r3, #20]

        rDevice[GRAB].force = req.grab;
 8001966:	f997 2243 	ldrsb.w	r2, [r7, #579]	; 0x243
 800196a:	4b99      	ldr	r3, [pc, #612]	; (8001bd0 <ShoreRequest+0x32c>)
 800196c:	731a      	strb	r2, [r3, #12]
        if (rDevice[GRAB].force < -127) {
 800196e:	4b98      	ldr	r3, [pc, #608]	; (8001bd0 <ShoreRequest+0x32c>)
 8001970:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001974:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001978:	d102      	bne.n	8001980 <ShoreRequest+0xdc>
            rDevice[GRAB].force = -127;
 800197a:	4b95      	ldr	r3, [pc, #596]	; (8001bd0 <ShoreRequest+0x32c>)
 800197c:	2281      	movs	r2, #129	; 0x81
 800197e:	731a      	strb	r2, [r3, #12]
        }
        rDevice[TILT].force = req.tilt;
 8001980:	f997 2244 	ldrsb.w	r2, [r7, #580]	; 0x244
 8001984:	4b92      	ldr	r3, [pc, #584]	; (8001bd0 <ShoreRequest+0x32c>)
 8001986:	f883 2020 	strb.w	r2, [r3, #32]
        if (rDevice[TILT].force < -127) {
 800198a:	4b91      	ldr	r3, [pc, #580]	; (8001bd0 <ShoreRequest+0x32c>)
 800198c:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8001990:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001994:	d103      	bne.n	800199e <ShoreRequest+0xfa>
        	rDevice[TILT].force = -127;
 8001996:	4b8e      	ldr	r3, [pc, #568]	; (8001bd0 <ShoreRequest+0x32c>)
 8001998:	2281      	movs	r2, #129	; 0x81
 800199a:	f883 2020 	strb.w	r2, [r3, #32]
        }
        rDevice[GRAB_ROTATION].force  = req.grab_rotate;
 800199e:	f997 2245 	ldrsb.w	r2, [r7, #581]	; 0x245
 80019a2:	4b8b      	ldr	r3, [pc, #556]	; (8001bd0 <ShoreRequest+0x32c>)
 80019a4:	759a      	strb	r2, [r3, #22]
        if (rDevice[GRAB_ROTATION].force < -127) {
 80019a6:	4b8a      	ldr	r3, [pc, #552]	; (8001bd0 <ShoreRequest+0x32c>)
 80019a8:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80019ac:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80019b0:	d102      	bne.n	80019b8 <ShoreRequest+0x114>
            rDevice[GRAB_ROTATION].force = -127;
 80019b2:	4b87      	ldr	r3, [pc, #540]	; (8001bd0 <ShoreRequest+0x32c>)
 80019b4:	2281      	movs	r2, #129	; 0x81
 80019b6:	759a      	strb	r2, [r3, #22]
        }

        rDevice[DEV1].force = req.dev1;
 80019b8:	f997 2246 	ldrsb.w	r2, [r7, #582]	; 0x246
 80019bc:	4b84      	ldr	r3, [pc, #528]	; (8001bd0 <ShoreRequest+0x32c>)
 80019be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        rDevice[DEV2].force = req.dev2;
 80019c2:	f997 2247 	ldrsb.w	r2, [r7, #583]	; 0x247
 80019c6:	4b82      	ldr	r3, [pc, #520]	; (8001bd0 <ShoreRequest+0x32c>)
 80019c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        rState.lag_error = (float) req.lag_error;
 80019cc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80019d0:	ee07 3a90 	vmov	s15, r3
 80019d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d8:	4b7e      	ldr	r3, [pc, #504]	; (8001bd4 <ShoreRequest+0x330>)
 80019da:	edc3 7a02 	vstr	s15, [r3, #8]

        rSensors.resetIMU = PickBit(req.stabilize_flags, SHORE_STABILIZE_IMU_BIT);
 80019de:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 80019e2:	2106      	movs	r1, #6
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fb2b 	bl	8001040 <PickBit>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b7a      	ldr	r3, [pc, #488]	; (8001bd8 <ShoreRequest+0x334>)
 80019f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(PickBit(req.stabilize_flags, SHORE_STABILIZE_SAVE_BIT)) {
 80019f4:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 80019f8:	2107      	movs	r1, #7
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fb20 	bl	8001040 <PickBit>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <ShoreRequest+0x176>
        	struct flashConfiguration_s config;
        	flashFillStructure(&config);
 8001a06:	f107 0308 	add.w	r3, r7, #8
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 fa50 	bl	8001eb0 <flashFillStructure>
        	flashWriteSettings(&config);
 8001a10:	f107 0308 	add.w	r3, r7, #8
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 fa0d 	bl	8001e34 <flashWriteSettings>
        }

        tempCameraNum = req.cameras;
 8001a1a:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
 8001a1e:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257

        uint8_t old_reset = rComputer.reset;
 8001a22:	4b6e      	ldr	r3, [pc, #440]	; (8001bdc <ShoreRequest+0x338>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256
        if(old_reset != req.pc_reset) {
 8001a2a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8001a2e:	f897 2256 	ldrb.w	r2, [r7, #598]	; 0x256
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d002      	beq.n	8001a3c <ShoreRequest+0x198>
            if(req.pc_reset == PC_ON_CODE) {
 8001a36:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8001a3a:	2baa      	cmp	r3, #170	; 0xaa
            else if(req.pc_reset == PC_OFF_CODE) {
           // 	HAL_GPIO_WritePin(PC_CONTROL1_GPIO_Port, PC_CONTROL1_Pin, GPIO_PIN_SET); // RESET
           //	HAL_GPIO_WritePin(PC_CONTROL2_GPIO_Port, PC_CONTROL2_Pin, GPIO_PIN_SET); // ONOFF
            }
        }
        rComputer.reset = req.pc_reset;
 8001a3c:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 8001a40:	4b66      	ldr	r3, [pc, #408]	; (8001bdc <ShoreRequest+0x338>)
 8001a42:	701a      	strb	r2, [r3, #0]

        bool wasEnabled = rStabConstants[STAB_YAW].enable;
 8001a44:	4b66      	ldr	r3, [pc, #408]	; (8001be0 <ShoreRequest+0x33c>)
 8001a46:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001a4a:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_YAW].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_YAW_BIT);
 8001a4e:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001a52:	2103      	movs	r1, #3
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff faf3 	bl	8001040 <PickBit>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b60      	ldr	r3, [pc, #384]	; (8001be0 <ShoreRequest+0x33c>)
 8001a60:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
        if(wasEnabled == false && rStabConstants[STAB_YAW].enable == true) {
 8001a64:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001a68:	f083 0301 	eor.w	r3, r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d007      	beq.n	8001a82 <ShoreRequest+0x1de>
 8001a72:	4b5b      	ldr	r3, [pc, #364]	; (8001be0 <ShoreRequest+0x33c>)
 8001a74:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <ShoreRequest+0x1de>
        	stabilizationStart(STAB_YAW);
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	f001 fbaf 	bl	80031e0 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_ROLL].enable;
 8001a82:	4b57      	ldr	r3, [pc, #348]	; (8001be0 <ShoreRequest+0x33c>)
 8001a84:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001a88:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_ROLL].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_ROLL_BIT);
 8001a8c:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001a90:	2101      	movs	r1, #1
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fad4 	bl	8001040 <PickBit>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b50      	ldr	r3, [pc, #320]	; (8001be0 <ShoreRequest+0x33c>)
 8001a9e:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
        if(wasEnabled == false && rStabConstants[STAB_ROLL].enable == true) {
 8001aa2:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001aa6:	f083 0301 	eor.w	r3, r3, #1
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d007      	beq.n	8001ac0 <ShoreRequest+0x21c>
 8001ab0:	4b4b      	ldr	r3, [pc, #300]	; (8001be0 <ShoreRequest+0x33c>)
 8001ab2:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <ShoreRequest+0x21c>
        	stabilizationStart(STAB_ROLL);
 8001aba:	2004      	movs	r0, #4
 8001abc:	f001 fb90 	bl	80031e0 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_PITCH].enable;
 8001ac0:	4b47      	ldr	r3, [pc, #284]	; (8001be0 <ShoreRequest+0x33c>)
 8001ac2:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8001ac6:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_PITCH].enable = true; //PickBit(req.stabilize_flags, SHORE_STABILIZE_PITCH_BIT);
 8001aca:	4b45      	ldr	r3, [pc, #276]	; (8001be0 <ShoreRequest+0x33c>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
        if(wasEnabled == false && rStabConstants[STAB_PITCH].enable == true) {
 8001ad2:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001ad6:	f083 0301 	eor.w	r3, r3, #1
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d007      	beq.n	8001af0 <ShoreRequest+0x24c>
 8001ae0:	4b3f      	ldr	r3, [pc, #252]	; (8001be0 <ShoreRequest+0x33c>)
 8001ae2:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <ShoreRequest+0x24c>
        	stabilizationStart(STAB_PITCH);
 8001aea:	2005      	movs	r0, #5
 8001aec:	f001 fb78 	bl	80031e0 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_DEPTH].enable;
 8001af0:	4b3b      	ldr	r3, [pc, #236]	; (8001be0 <ShoreRequest+0x33c>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_DEPTH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_DEPTH_BIT);
 8001af8:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fa9e 	bl	8001040 <PickBit>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <ShoreRequest+0x33c>)
 8001b0a:	701a      	strb	r2, [r3, #0]
        if(wasEnabled == false && rStabConstants[STAB_DEPTH].enable == true) {
 8001b0c:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001b10:	f083 0301 	eor.w	r3, r3, #1
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d006      	beq.n	8001b28 <ShoreRequest+0x284>
 8001b1a:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <ShoreRequest+0x33c>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <ShoreRequest+0x284>
        	stabilizationStart(STAB_DEPTH);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f001 fb5c 	bl	80031e0 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_LAG].enable;
 8001b28:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <ShoreRequest+0x33c>)
 8001b2a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001b2e:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_LAG].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_LAG_BIT);
 8001b32:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001b36:	2104      	movs	r1, #4
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fa81 	bl	8001040 <PickBit>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <ShoreRequest+0x33c>)
 8001b44:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        if(wasEnabled == false && rStabConstants[STAB_LAG].enable == true) {
 8001b48:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001b4c:	f083 0301 	eor.w	r3, r3, #1
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <ShoreRequest+0x2c2>
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <ShoreRequest+0x33c>)
 8001b58:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <ShoreRequest+0x2c2>
        	stabilizationStart(STAB_LAG);
 8001b60:	2002      	movs	r0, #2
 8001b62:	f001 fb3d 	bl	80031e0 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_MARCH].enable;
 8001b66:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <ShoreRequest+0x33c>)
 8001b68:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b6c:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_MARCH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_MARCH_BIT);
 8001b70:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001b74:	2105      	movs	r1, #5
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fa62 	bl	8001040 <PickBit>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <ShoreRequest+0x33c>)
 8001b82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        if(wasEnabled == false && rStabConstants[STAB_MARCH].enable == true) {
 8001b86:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001b8a:	f083 0301 	eor.w	r3, r3, #1
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d007      	beq.n	8001ba4 <ShoreRequest+0x300>
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <ShoreRequest+0x33c>)
 8001b96:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <ShoreRequest+0x300>
        	stabilizationStart(STAB_MARCH);
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f001 fb1e 	bl	80031e0 <stabilizationStart>
//        		break;
//        	}
//        }

        // TODO tuuuupoooo
        formThrustVectors();
 8001ba4:	f002 f972 	bl	8003e8c <formThrustVectors>

        ++uartBus[SHORE_UART].successRxCounter;
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <ShoreRequest+0x340>)
 8001baa:	895b      	ldrh	r3, [r3, #10]
 8001bac:	3301      	adds	r3, #1
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <ShoreRequest+0x340>)
 8001bb2:	815a      	strh	r2, [r3, #10]

        	brokenRxTolerance = 0;
        }
        */
    }
}
 8001bb4:	e004      	b.n	8001bc0 <ShoreRequest+0x31c>
    	++uartBus[SHORE_UART].brokenRxCounter;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <ShoreRequest+0x340>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	4a09      	ldr	r2, [pc, #36]	; (8001be4 <ShoreRequest+0x340>)
 8001bbe:	60d3      	str	r3, [r2, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200015cc 	.word	0x200015cc
 8001bd0:	200015e4 	.word	0x200015e4
 8001bd4:	20001494 	.word	0x20001494
 8001bd8:	20001560 	.word	0x20001560
 8001bdc:	200015c8 	.word	0x200015c8
 8001be0:	20001620 	.word	0x20001620
 8001be4:	200000c4 	.word	0x200000c4

08001be8 <ShoreResponse>:
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}

void ShoreResponse(uint8_t *responseBuf)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b094      	sub	sp, #80	; 0x50
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	struct shoreResponse_s res;

    res.roll = rSensors.roll;
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <ShoreResponse+0x78>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60bb      	str	r3, [r7, #8]
    res.pitch = rSensors.pitch;
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <ShoreResponse+0x78>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	60fb      	str	r3, [r7, #12]
    res.yaw =  rSensors.yaw;//*rStabState[STAB_YAW].posSignal;//rSensors.yaw;
 8001bfc:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <ShoreResponse+0x78>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	613b      	str	r3, [r7, #16]
    res.rollSpeed = rSensors.rollSpeed;
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <ShoreResponse+0x78>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	617b      	str	r3, [r7, #20]
    res.pitchSpeed = rSensors.pitchSpeed;
 8001c08:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <ShoreResponse+0x78>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	61bb      	str	r3, [r7, #24]
    res.yawSpeed = rSensors.yawSpeed;
 8001c0e:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <ShoreResponse+0x78>)
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	61fb      	str	r3, [r7, #28]

    res.pressure = rSensors.pressure;
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <ShoreResponse+0x78>)
 8001c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c18:	623b      	str	r3, [r7, #32]

    res.vma_errors = 0x55;         //!!!!!TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8001c20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001c24:	2300      	movs	r3, #0
 8001c26:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    // TODO do this properly pls
    res.dev_errors = 0;//robot->device.errors;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8001c30:	2300      	movs	r3, #0
 8001c32:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    res.pc_errors = rComputer.errors;
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <ShoreResponse+0x7c>)
 8001c38:	785b      	ldrb	r3, [r3, #1]
 8001c3a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

    memcpy((void*)responseBuf, (void*)&res, SHORE_RESPONSE_LENGTH);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f107 0308 	add.w	r3, r7, #8
 8001c46:	2246      	movs	r2, #70	; 0x46
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f00b f9d1 	bl	800cff0 <memcpy>
    AddCrc16Checksumm(responseBuf, SHORE_RESPONSE_LENGTH);
 8001c4e:	2146      	movs	r1, #70	; 0x46
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff f988 	bl	8000f66 <AddCrc16Checksumm>
}
 8001c56:	bf00      	nop
 8001c58:	3750      	adds	r7, #80	; 0x50
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20001560 	.word	0x20001560
 8001c64:	200015c8 	.word	0x200015c8

08001c68 <ImuReceive>:
		crc ^= (crc & 0x00ff) << 5; }
	return crc;
}

void ImuReceive(uint8_t *ReceiveBuf)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	 // Check sync byte
	 if ((ReceiveBuf[0] != 0xFA)&&(ReceiveBuf[1] != 0x01)&&(ReceiveBuf[2] != 0x29)&&(ReceiveBuf[3] != 0x01))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2bfa      	cmp	r3, #250	; 0xfa
 8001c76:	d00e      	beq.n	8001c96 <ImuReceive+0x2e>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d009      	beq.n	8001c96 <ImuReceive+0x2e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3302      	adds	r3, #2
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b29      	cmp	r3, #41	; 0x29
 8001c8a:	d004      	beq.n	8001c96 <ImuReceive+0x2e>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3303      	adds	r3, #3
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d13c      	bne.n	8001d10 <ImuReceive+0xa8>
//            ++uartBus[IMU_UART].brokenRxCounter;
//            return;
//        }
//    }

  	  memcpy(&rSensors.yaw, ReceiveBuf + 12, sizeof(rSensors.yaw));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	330c      	adds	r3, #12
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <ImuReceive+0xb0>)
 8001ca0:	609a      	str	r2, [r3, #8]
  	  memcpy(&rSensors.pitch, ReceiveBuf + 16, sizeof(rSensors.pitch));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3310      	adds	r3, #16
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <ImuReceive+0xb0>)
 8001cac:	605a      	str	r2, [r3, #4]
  	  memcpy(&rSensors.roll, ReceiveBuf + 20, sizeof(rSensors.roll));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3314      	adds	r3, #20
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <ImuReceive+0xb0>)
 8001cb8:	601a      	str	r2, [r3, #0]

  	  memcpy(&rSensors.accelX, ReceiveBuf + 36, sizeof(rSensors.accelX));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3324      	adds	r3, #36	; 0x24
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <ImuReceive+0xb0>)
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28
  	  memcpy(&rSensors.accelY, ReceiveBuf + 40, sizeof(rSensors.accelY));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3328      	adds	r3, #40	; 0x28
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <ImuReceive+0xb0>)
 8001cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  	  memcpy(&rSensors.accelZ, ReceiveBuf + 44, sizeof(rSensors.accelZ));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	332c      	adds	r3, #44	; 0x2c
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <ImuReceive+0xb0>)
 8001cdc:	631a      	str	r2, [r3, #48]	; 0x30
  	  memcpy(&rSensors.crc, ReceiveBuf + 48, sizeof(rSensors.crc));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3330      	adds	r3, #48	; 0x30
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <ImuReceive+0xb0>)
 8001ce8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52


//	float diffTime = fromTickToMs(xTaskGetTickCount() - rSensors.LastTick) / 1000.0f;
    rSensors.LastTick = xTaskGetTickCount();
 8001cec:	f009 fc8a 	bl	800b604 <xTaskGetTickCount>
 8001cf0:	ee07 0a90 	vmov	s15, r0
 8001cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <ImuReceive+0xb0>)
 8001cfa:	edc3 7a05 	vstr	s15, [r3, #20]


    ++uartBus[IMU_UART].successRxCounter;
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <ImuReceive+0xb4>)
 8001d00:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8001d04:	3301      	adds	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <ImuReceive+0xb4>)
 8001d0a:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8001d0e:	e000      	b.n	8001d12 <ImuReceive+0xaa>
		 return;
 8001d10:	bf00      	nop
}
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20001560 	.word	0x20001560
 8001d1c:	200000c4 	.word	0x200000c4

08001d20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <MX_DMA_Init+0xc8>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a2e      	ldr	r2, [pc, #184]	; (8001de8 <MX_DMA_Init+0xc8>)
 8001d30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b2c      	ldr	r3, [pc, #176]	; (8001de8 <MX_DMA_Init+0xc8>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	4b28      	ldr	r3, [pc, #160]	; (8001de8 <MX_DMA_Init+0xc8>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a27      	ldr	r2, [pc, #156]	; (8001de8 <MX_DMA_Init+0xc8>)
 8001d4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <MX_DMA_Init+0xc8>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2105      	movs	r1, #5
 8001d62:	200c      	movs	r0, #12
 8001d64:	f002 ff6a 	bl	8004c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d68:	200c      	movs	r0, #12
 8001d6a:	f002 ff83 	bl	8004c74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2105      	movs	r1, #5
 8001d72:	200d      	movs	r0, #13
 8001d74:	f002 ff62 	bl	8004c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001d78:	200d      	movs	r0, #13
 8001d7a:	f002 ff7b 	bl	8004c74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2105      	movs	r1, #5
 8001d82:	200e      	movs	r0, #14
 8001d84:	f002 ff5a 	bl	8004c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001d88:	200e      	movs	r0, #14
 8001d8a:	f002 ff73 	bl	8004c74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2105      	movs	r1, #5
 8001d92:	200f      	movs	r0, #15
 8001d94:	f002 ff52 	bl	8004c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001d98:	200f      	movs	r0, #15
 8001d9a:	f002 ff6b 	bl	8004c74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2105      	movs	r1, #5
 8001da2:	2010      	movs	r0, #16
 8001da4:	f002 ff4a 	bl	8004c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001da8:	2010      	movs	r0, #16
 8001daa:	f002 ff63 	bl	8004c74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2105      	movs	r1, #5
 8001db2:	2011      	movs	r0, #17
 8001db4:	f002 ff42 	bl	8004c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001db8:	2011      	movs	r0, #17
 8001dba:	f002 ff5b 	bl	8004c74 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2105      	movs	r1, #5
 8001dc2:	203a      	movs	r0, #58	; 0x3a
 8001dc4:	f002 ff3a 	bl	8004c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001dc8:	203a      	movs	r0, #58	; 0x3a
 8001dca:	f002 ff53 	bl	8004c74 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2105      	movs	r1, #5
 8001dd2:	2046      	movs	r0, #70	; 0x46
 8001dd4:	f002 ff32 	bl	8004c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001dd8:	2046      	movs	r0, #70	; 0x46
 8001dda:	f002 ff4b 	bl	8004c74 <HAL_NVIC_EnableIRQ>

}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800

08001dec <flashReadSettings>:
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
	HAL_FLASH_Lock();
}

void flashReadSettings(struct flashConfiguration_s *config)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	uint32_t *source_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 8001df4:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <flashReadSettings+0x44>)
 8001df6:	617b      	str	r3, [r7, #20]
	uint32_t *dest_addr = (void *)config;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	613b      	str	r3, [r7, #16]

	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	81fb      	strh	r3, [r7, #14]
 8001e00:	e00c      	b.n	8001e1c <flashReadSettings+0x30>
		*dest_addr = *(__IO uint32_t*)source_addr;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	601a      	str	r2, [r3, #0]
		source_addr++;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	617b      	str	r3, [r7, #20]
		dest_addr++;
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	3304      	adds	r3, #4
 8001e14:	613b      	str	r3, [r7, #16]
	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 8001e16:	89fb      	ldrh	r3, [r7, #14]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	81fb      	strh	r3, [r7, #14]
 8001e1c:	89fb      	ldrh	r3, [r7, #14]
 8001e1e:	2b89      	cmp	r3, #137	; 0x89
 8001e20:	d9ef      	bls.n	8001e02 <flashReadSettings+0x16>
	}
}
 8001e22:	bf00      	nop
 8001e24:	bf00      	nop
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	0803f800 	.word	0x0803f800

08001e34 <flashWriteSettings>:

void flashWriteSettings(struct flashConfiguration_s *config)
{
 8001e34:	b5b0      	push	{r4, r5, r7, lr}
 8001e36:	b08c      	sub	sp, #48	; 0x30
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	// Write settings
	HAL_FLASH_Unlock();
 8001e3c:	f003 fb8c 	bl	8005558 <HAL_FLASH_Unlock>

	// erase page
	FLASH_EraseInitTypeDef erase_conf;
	erase_conf.TypeErase = FLASH_TYPEERASE_SECTORS; // erase 1 page
 8001e40:	2300      	movs	r3, #0
 8001e42:	613b      	str	r3, [r7, #16]
	erase_conf.Sector = (uint32_t)(CONFIG_PAGE_ADDR);
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <flashWriteSettings+0x78>)
 8001e46:	61bb      	str	r3, [r7, #24]
	erase_conf.NbSectors = 1;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	61fb      	str	r3, [r7, #28]

	uint32_t page_error;
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
 8001e4c:	f107 020c 	add.w	r2, r7, #12
 8001e50:	f107 0310 	add.w	r3, r7, #16
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f003 fce0 	bl	800581c <HAL_FLASHEx_Erase>

	// write page
	uint32_t *source_addr = (void *)config;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t *dest_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 8001e60:	4b12      	ldr	r3, [pc, #72]	; (8001eac <flashWriteSettings+0x78>)
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 8001e64:	2300      	movs	r3, #0
 8001e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e6a:	e015      	b.n	8001e98 <flashWriteSettings+0x64>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)dest_addr, *source_addr);
 8001e6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2200      	movs	r2, #0
 8001e74:	461c      	mov	r4, r3
 8001e76:	4615      	mov	r5, r2
 8001e78:	4622      	mov	r2, r4
 8001e7a:	462b      	mov	r3, r5
 8001e7c:	2002      	movs	r0, #2
 8001e7e:	f003 fb17 	bl	80054b0 <HAL_FLASH_Program>
		source_addr++;
 8001e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e84:	3304      	adds	r3, #4
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
		dest_addr++;
 8001e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 8001e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e92:	3301      	adds	r3, #1
 8001e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e9c:	2b89      	cmp	r3, #137	; 0x89
 8001e9e:	d9e5      	bls.n	8001e6c <flashWriteSettings+0x38>
	}

	HAL_FLASH_Lock();
 8001ea0:	f003 fb7c 	bl	800559c <HAL_FLASH_Lock>
}
 8001ea4:	bf00      	nop
 8001ea6:	3730      	adds	r7, #48	; 0x30
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8001eac:	0803f800 	.word	0x0803f800

08001eb0 <flashFillStructure>:

void flashFillStructure(struct flashConfiguration_s *config)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	config->writeFlag = 0xAA;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	22aa      	movs	r2, #170	; 0xaa
 8001ebc:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
 8001ec2:	e154      	b.n	800216e <flashFillStructure+0x2be>
		config->stabConstants[i].pJoyUnitCast = rStabConstants[i].pJoyUnitCast;
 8001ec4:	7bf9      	ldrb	r1, [r7, #15]
 8001ec6:	7bfa      	ldrb	r2, [r7, #15]
 8001ec8:	48ae      	ldr	r0, [pc, #696]	; (8002184 <flashFillStructure+0x2d4>)
 8001eca:	460b      	mov	r3, r1
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4403      	add	r3, r0
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	4413      	add	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pSpeedDyn = rStabConstants[i].pSpeedDyn;
 8001eea:	7bf9      	ldrb	r1, [r7, #15]
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	48a5      	ldr	r0, [pc, #660]	; (8002184 <flashFillStructure+0x2d4>)
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	440b      	add	r3, r1
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4403      	add	r3, r0
 8001efa:	3308      	adds	r3, #8
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	4413      	add	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	3305      	adds	r3, #5
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pErrGain = rStabConstants[i].pErrGain;
 8001f10:	7bf9      	ldrb	r1, [r7, #15]
 8001f12:	7bfa      	ldrb	r2, [r7, #15]
 8001f14:	489b      	ldr	r0, [pc, #620]	; (8002184 <flashFillStructure+0x2d4>)
 8001f16:	460b      	mov	r3, r1
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	440b      	add	r3, r1
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4403      	add	r3, r0
 8001f20:	330c      	adds	r3, #12
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	011b      	lsls	r3, r3, #4
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	3308      	adds	r3, #8
 8001f32:	3301      	adds	r3, #1
 8001f34:	4602      	mov	r2, r0
 8001f36:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T1 = rStabConstants[i].aFilter[POS_FILTER].T;
 8001f38:	7bf9      	ldrb	r1, [r7, #15]
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	4891      	ldr	r0, [pc, #580]	; (8002184 <flashFillStructure+0x2d4>)
 8001f3e:	460b      	mov	r3, r1
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	440b      	add	r3, r1
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4403      	add	r3, r0
 8001f48:	3310      	adds	r3, #16
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	3308      	adds	r3, #8
 8001f5a:	3305      	adds	r3, #5
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T2 = rStabConstants[i].aFilter[SPEED_FILTER].T;
 8001f60:	7bf9      	ldrb	r1, [r7, #15]
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	4887      	ldr	r0, [pc, #540]	; (8002184 <flashFillStructure+0x2d4>)
 8001f66:	460b      	mov	r3, r1
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4403      	add	r3, r0
 8001f70:	3318      	adds	r3, #24
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	4413      	add	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	3310      	adds	r3, #16
 8001f82:	3301      	adds	r3, #1
 8001f84:	4602      	mov	r2, r0
 8001f86:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K1 = rStabConstants[i].aFilter[POS_FILTER].K;
 8001f88:	7bf9      	ldrb	r1, [r7, #15]
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	487d      	ldr	r0, [pc, #500]	; (8002184 <flashFillStructure+0x2d4>)
 8001f8e:	460b      	mov	r3, r1
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	440b      	add	r3, r1
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4403      	add	r3, r0
 8001f98:	3314      	adds	r3, #20
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	3310      	adds	r3, #16
 8001faa:	3305      	adds	r3, #5
 8001fac:	4602      	mov	r2, r0
 8001fae:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K2 = rStabConstants[i].aFilter[SPEED_FILTER].K;
 8001fb0:	7bf9      	ldrb	r1, [r7, #15]
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	4873      	ldr	r0, [pc, #460]	; (8002184 <flashFillStructure+0x2d4>)
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	440b      	add	r3, r1
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4403      	add	r3, r0
 8001fc0:	331c      	adds	r3, #28
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	3318      	adds	r3, #24
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_pGain = rStabConstants[i].pid.pGain;
 8001fd8:	7bf9      	ldrb	r1, [r7, #15]
 8001fda:	7bfa      	ldrb	r2, [r7, #15]
 8001fdc:	4869      	ldr	r0, [pc, #420]	; (8002184 <flashFillStructure+0x2d4>)
 8001fde:	460b      	mov	r3, r1
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	440b      	add	r3, r1
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4403      	add	r3, r0
 8001fe8:	3328      	adds	r3, #40	; 0x28
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	3318      	adds	r3, #24
 8001ffa:	3305      	adds	r3, #5
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iGain = rStabConstants[i].pid.iGain;
 8002000:	7bf9      	ldrb	r1, [r7, #15]
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	485f      	ldr	r0, [pc, #380]	; (8002184 <flashFillStructure+0x2d4>)
 8002006:	460b      	mov	r3, r1
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	440b      	add	r3, r1
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4403      	add	r3, r0
 8002010:	332c      	adds	r3, #44	; 0x2c
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	3320      	adds	r3, #32
 8002022:	3301      	adds	r3, #1
 8002024:	4602      	mov	r2, r0
 8002026:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMax = rStabConstants[i].pid.iMax;
 8002028:	7bf9      	ldrb	r1, [r7, #15]
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	4855      	ldr	r0, [pc, #340]	; (8002184 <flashFillStructure+0x2d4>)
 800202e:	460b      	mov	r3, r1
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	440b      	add	r3, r1
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4403      	add	r3, r0
 8002038:	3330      	adds	r3, #48	; 0x30
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	3320      	adds	r3, #32
 800204a:	3305      	adds	r3, #5
 800204c:	4602      	mov	r2, r0
 800204e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMin = rStabConstants[i].pid.iMin;
 8002050:	7bf9      	ldrb	r1, [r7, #15]
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	484b      	ldr	r0, [pc, #300]	; (8002184 <flashFillStructure+0x2d4>)
 8002056:	460b      	mov	r3, r1
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	440b      	add	r3, r1
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4403      	add	r3, r0
 8002060:	3334      	adds	r3, #52	; 0x34
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	3328      	adds	r3, #40	; 0x28
 8002072:	3301      	adds	r3, #1
 8002074:	4602      	mov	r2, r0
 8002076:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMin = rStabConstants[i].pThrustersMin;
 8002078:	7bf9      	ldrb	r1, [r7, #15]
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	4841      	ldr	r0, [pc, #260]	; (8002184 <flashFillStructure+0x2d4>)
 800207e:	460b      	mov	r3, r1
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4403      	add	r3, r0
 8002088:	3338      	adds	r3, #56	; 0x38
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	3328      	adds	r3, #40	; 0x28
 800209a:	3305      	adds	r3, #5
 800209c:	4602      	mov	r2, r0
 800209e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMax = rStabConstants[i].pThrustersMax;
 80020a0:	7bf9      	ldrb	r1, [r7, #15]
 80020a2:	7bfa      	ldrb	r2, [r7, #15]
 80020a4:	4837      	ldr	r0, [pc, #220]	; (8002184 <flashFillStructure+0x2d4>)
 80020a6:	460b      	mov	r3, r1
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	440b      	add	r3, r1
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4403      	add	r3, r0
 80020b0:	333c      	adds	r3, #60	; 0x3c
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	3330      	adds	r3, #48	; 0x30
 80020c2:	3301      	adds	r3, #1
 80020c4:	4602      	mov	r2, r0
 80020c6:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_T = rStabConstants[i].aFilter[THRUSTERS_FILTER].T;
 80020c8:	7bf9      	ldrb	r1, [r7, #15]
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	482d      	ldr	r0, [pc, #180]	; (8002184 <flashFillStructure+0x2d4>)
 80020ce:	460b      	mov	r3, r1
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	440b      	add	r3, r1
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4403      	add	r3, r0
 80020d8:	3320      	adds	r3, #32
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	3330      	adds	r3, #48	; 0x30
 80020ea:	3305      	adds	r3, #5
 80020ec:	4602      	mov	r2, r0
 80020ee:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_K = rStabConstants[i].aFilter[THRUSTERS_FILTER].K;
 80020f0:	7bf9      	ldrb	r1, [r7, #15]
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	4823      	ldr	r0, [pc, #140]	; (8002184 <flashFillStructure+0x2d4>)
 80020f6:	460b      	mov	r3, r1
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	440b      	add	r3, r1
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4403      	add	r3, r0
 8002100:	3324      	adds	r3, #36	; 0x24
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	3338      	adds	r3, #56	; 0x38
 8002112:	3301      	adds	r3, #1
 8002114:	4602      	mov	r2, r0
 8002116:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMax = rStabConstants[i].sOutSummatorMax;
 8002118:	7bf9      	ldrb	r1, [r7, #15]
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	4819      	ldr	r0, [pc, #100]	; (8002184 <flashFillStructure+0x2d4>)
 800211e:	460b      	mov	r3, r1
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	440b      	add	r3, r1
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4403      	add	r3, r0
 8002128:	3340      	adds	r3, #64	; 0x40
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	3338      	adds	r3, #56	; 0x38
 800213a:	3305      	adds	r3, #5
 800213c:	4602      	mov	r2, r0
 800213e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMin = rStabConstants[i].sOutSummatorMin;
 8002140:	7bf9      	ldrb	r1, [r7, #15]
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	480f      	ldr	r0, [pc, #60]	; (8002184 <flashFillStructure+0x2d4>)
 8002146:	460b      	mov	r3, r1
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	440b      	add	r3, r1
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4403      	add	r3, r0
 8002150:	3344      	adds	r3, #68	; 0x44
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	3340      	adds	r3, #64	; 0x40
 8002162:	3301      	adds	r3, #1
 8002164:	4602      	mov	r2, r0
 8002166:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	3301      	adds	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	2b05      	cmp	r3, #5
 8002172:	f67f aea7 	bls.w	8001ec4 <flashFillStructure+0x14>
//		config->thrusters[i].kBackward = rThrusters[i].kBackward;
//		config->thrusters[i].sForward = rThrusters[i].sForward;
//		config->thrusters[i].sBackward = rThrusters[i].sBackward;
//		config->thrusters[i].inverse = rThrusters[i].inverse;
//	}
}
 8002176:	bf00      	nop
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	20001620 	.word	0x20001620

08002188 <flashReadStructure>:

void flashReadStructure(struct flashConfiguration_s *config)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]
 8002194:	e165      	b.n	8002462 <flashReadStructure+0x2da>
		rStabConstants[i].pJoyUnitCast = config->stabConstants[i].pJoyUnitCast;
 8002196:	7bfa      	ldrb	r2, [r7, #15]
 8002198:	7bf9      	ldrb	r1, [r7, #15]
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4403      	add	r3, r0
 80021a6:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80021aa:	4613      	mov	r3, r2
 80021ac:	461a      	mov	r2, r3
 80021ae:	48b7      	ldr	r0, [pc, #732]	; (800248c <flashReadStructure+0x304>)
 80021b0:	460b      	mov	r3, r1
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	440b      	add	r3, r1
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4403      	add	r3, r0
 80021ba:	3304      	adds	r3, #4
 80021bc:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pSpeedDyn = config->stabConstants[i].pSpeedDyn;
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	7bf9      	ldrb	r1, [r7, #15]
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4403      	add	r3, r0
 80021ce:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80021d2:	4613      	mov	r3, r2
 80021d4:	461a      	mov	r2, r3
 80021d6:	48ad      	ldr	r0, [pc, #692]	; (800248c <flashReadStructure+0x304>)
 80021d8:	460b      	mov	r3, r1
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	440b      	add	r3, r1
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4403      	add	r3, r0
 80021e2:	3308      	adds	r3, #8
 80021e4:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pErrGain = config->stabConstants[i].pErrGain;
 80021e6:	7bfa      	ldrb	r2, [r7, #15]
 80021e8:	7bf9      	ldrb	r1, [r7, #15]
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4403      	add	r3, r0
 80021f6:	3308      	adds	r3, #8
 80021f8:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80021fc:	4613      	mov	r3, r2
 80021fe:	461a      	mov	r2, r3
 8002200:	48a2      	ldr	r0, [pc, #648]	; (800248c <flashReadStructure+0x304>)
 8002202:	460b      	mov	r3, r1
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	440b      	add	r3, r1
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4403      	add	r3, r0
 800220c:	330c      	adds	r3, #12
 800220e:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[POS_FILTER].T = config->stabConstants[i].aFilter_T1;
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	7bf9      	ldrb	r1, [r7, #15]
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4403      	add	r3, r0
 8002220:	3308      	adds	r3, #8
 8002222:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002226:	4613      	mov	r3, r2
 8002228:	461a      	mov	r2, r3
 800222a:	4898      	ldr	r0, [pc, #608]	; (800248c <flashReadStructure+0x304>)
 800222c:	460b      	mov	r3, r1
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4403      	add	r3, r0
 8002236:	3310      	adds	r3, #16
 8002238:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].T = config->stabConstants[i].aFilter_T2;
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	7bf9      	ldrb	r1, [r7, #15]
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4403      	add	r3, r0
 800224a:	3310      	adds	r3, #16
 800224c:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002250:	4613      	mov	r3, r2
 8002252:	461a      	mov	r2, r3
 8002254:	488d      	ldr	r0, [pc, #564]	; (800248c <flashReadStructure+0x304>)
 8002256:	460b      	mov	r3, r1
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	440b      	add	r3, r1
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4403      	add	r3, r0
 8002260:	3318      	adds	r3, #24
 8002262:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[POS_FILTER].K = config->stabConstants[i].aFilter_K1;
 8002264:	7bfa      	ldrb	r2, [r7, #15]
 8002266:	7bf9      	ldrb	r1, [r7, #15]
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	4413      	add	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4403      	add	r3, r0
 8002274:	3310      	adds	r3, #16
 8002276:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800227a:	4613      	mov	r3, r2
 800227c:	461a      	mov	r2, r3
 800227e:	4883      	ldr	r0, [pc, #524]	; (800248c <flashReadStructure+0x304>)
 8002280:	460b      	mov	r3, r1
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4403      	add	r3, r0
 800228a:	3314      	adds	r3, #20
 800228c:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].K = config->stabConstants[i].aFilter_K2;
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	7bf9      	ldrb	r1, [r7, #15]
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4403      	add	r3, r0
 800229e:	3318      	adds	r3, #24
 80022a0:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80022a4:	4613      	mov	r3, r2
 80022a6:	461a      	mov	r2, r3
 80022a8:	4878      	ldr	r0, [pc, #480]	; (800248c <flashReadStructure+0x304>)
 80022aa:	460b      	mov	r3, r1
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	440b      	add	r3, r1
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4403      	add	r3, r0
 80022b4:	331c      	adds	r3, #28
 80022b6:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.pGain = config->stabConstants[i].pid_pGain;
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	7bf9      	ldrb	r1, [r7, #15]
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4403      	add	r3, r0
 80022c8:	3318      	adds	r3, #24
 80022ca:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80022ce:	4613      	mov	r3, r2
 80022d0:	461a      	mov	r2, r3
 80022d2:	486e      	ldr	r0, [pc, #440]	; (800248c <flashReadStructure+0x304>)
 80022d4:	460b      	mov	r3, r1
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	440b      	add	r3, r1
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4403      	add	r3, r0
 80022de:	3328      	adds	r3, #40	; 0x28
 80022e0:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.iGain = config->stabConstants[i].pid_iGain;
 80022e2:	7bfa      	ldrb	r2, [r7, #15]
 80022e4:	7bf9      	ldrb	r1, [r7, #15]
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4403      	add	r3, r0
 80022f2:	3320      	adds	r3, #32
 80022f4:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80022f8:	4613      	mov	r3, r2
 80022fa:	461a      	mov	r2, r3
 80022fc:	4863      	ldr	r0, [pc, #396]	; (800248c <flashReadStructure+0x304>)
 80022fe:	460b      	mov	r3, r1
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	440b      	add	r3, r1
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4403      	add	r3, r0
 8002308:	332c      	adds	r3, #44	; 0x2c
 800230a:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.iMax = config->stabConstants[i].pid_iMax;
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	7bf9      	ldrb	r1, [r7, #15]
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4403      	add	r3, r0
 800231c:	3320      	adds	r3, #32
 800231e:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002322:	4613      	mov	r3, r2
 8002324:	461a      	mov	r2, r3
 8002326:	4859      	ldr	r0, [pc, #356]	; (800248c <flashReadStructure+0x304>)
 8002328:	460b      	mov	r3, r1
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	440b      	add	r3, r1
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4403      	add	r3, r0
 8002332:	3330      	adds	r3, #48	; 0x30
 8002334:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.iMin = config->stabConstants[i].pid_iMin;
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	7bf9      	ldrb	r1, [r7, #15]
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4403      	add	r3, r0
 8002346:	3328      	adds	r3, #40	; 0x28
 8002348:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800234c:	4613      	mov	r3, r2
 800234e:	461a      	mov	r2, r3
 8002350:	484e      	ldr	r0, [pc, #312]	; (800248c <flashReadStructure+0x304>)
 8002352:	460b      	mov	r3, r1
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	440b      	add	r3, r1
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4403      	add	r3, r0
 800235c:	3334      	adds	r3, #52	; 0x34
 800235e:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pThrustersMin = config->stabConstants[i].pThrustersMin;
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	7bf9      	ldrb	r1, [r7, #15]
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4403      	add	r3, r0
 8002370:	3328      	adds	r3, #40	; 0x28
 8002372:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002376:	4613      	mov	r3, r2
 8002378:	461a      	mov	r2, r3
 800237a:	4844      	ldr	r0, [pc, #272]	; (800248c <flashReadStructure+0x304>)
 800237c:	460b      	mov	r3, r1
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4403      	add	r3, r0
 8002386:	3338      	adds	r3, #56	; 0x38
 8002388:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pThrustersMax = config->stabConstants[i].pThrustersMax;
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	7bf9      	ldrb	r1, [r7, #15]
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4403      	add	r3, r0
 800239a:	3330      	adds	r3, #48	; 0x30
 800239c:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80023a0:	4613      	mov	r3, r2
 80023a2:	461a      	mov	r2, r3
 80023a4:	4839      	ldr	r0, [pc, #228]	; (800248c <flashReadStructure+0x304>)
 80023a6:	460b      	mov	r3, r1
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	440b      	add	r3, r1
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4403      	add	r3, r0
 80023b0:	333c      	adds	r3, #60	; 0x3c
 80023b2:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].T = config->stabConstants[i].aFilter_thrusters_T;
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	7bf9      	ldrb	r1, [r7, #15]
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4403      	add	r3, r0
 80023c4:	3330      	adds	r3, #48	; 0x30
 80023c6:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80023ca:	4613      	mov	r3, r2
 80023cc:	461a      	mov	r2, r3
 80023ce:	482f      	ldr	r0, [pc, #188]	; (800248c <flashReadStructure+0x304>)
 80023d0:	460b      	mov	r3, r1
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	440b      	add	r3, r1
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4403      	add	r3, r0
 80023da:	3320      	adds	r3, #32
 80023dc:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].K = config->stabConstants[i].aFilter_thrusters_K;
 80023de:	7bfa      	ldrb	r2, [r7, #15]
 80023e0:	7bf9      	ldrb	r1, [r7, #15]
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4403      	add	r3, r0
 80023ee:	3338      	adds	r3, #56	; 0x38
 80023f0:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80023f4:	4613      	mov	r3, r2
 80023f6:	461a      	mov	r2, r3
 80023f8:	4824      	ldr	r0, [pc, #144]	; (800248c <flashReadStructure+0x304>)
 80023fa:	460b      	mov	r3, r1
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4403      	add	r3, r0
 8002404:	3324      	adds	r3, #36	; 0x24
 8002406:	601a      	str	r2, [r3, #0]
		rStabConstants[i].sOutSummatorMax = config->stabConstants[i].sOutSummatorMax;
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	7bf9      	ldrb	r1, [r7, #15]
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4403      	add	r3, r0
 8002418:	3338      	adds	r3, #56	; 0x38
 800241a:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800241e:	4613      	mov	r3, r2
 8002420:	461a      	mov	r2, r3
 8002422:	481a      	ldr	r0, [pc, #104]	; (800248c <flashReadStructure+0x304>)
 8002424:	460b      	mov	r3, r1
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	440b      	add	r3, r1
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4403      	add	r3, r0
 800242e:	3340      	adds	r3, #64	; 0x40
 8002430:	601a      	str	r2, [r3, #0]
		rStabConstants[i].sOutSummatorMin = config->stabConstants[i].sOutSummatorMin;
 8002432:	7bfa      	ldrb	r2, [r7, #15]
 8002434:	7bf9      	ldrb	r1, [r7, #15]
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4403      	add	r3, r0
 8002442:	3340      	adds	r3, #64	; 0x40
 8002444:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002448:	4613      	mov	r3, r2
 800244a:	461a      	mov	r2, r3
 800244c:	480f      	ldr	r0, [pc, #60]	; (800248c <flashReadStructure+0x304>)
 800244e:	460b      	mov	r3, r1
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	440b      	add	r3, r1
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4403      	add	r3, r0
 8002458:	3344      	adds	r3, #68	; 0x44
 800245a:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	3301      	adds	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	2b05      	cmp	r3, #5
 8002466:	f67f ae96 	bls.w	8002196 <flashReadStructure+0xe>
//		rThrusters[i].sForward = config->thrusters[i].sForward;
//		rThrusters[i].sBackward = config->thrusters[i].sBackward;
//		rThrusters[i].inverse = config->thrusters[i].inverse;
//	}

	if(config->writeFlag == 0xAA) {
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2baa      	cmp	r3, #170	; 0xaa
 8002470:	d103      	bne.n	800247a <flashReadStructure+0x2f2>
		rState.flash = true;
 8002472:	4b07      	ldr	r3, [pc, #28]	; (8002490 <flashReadStructure+0x308>)
 8002474:	2201      	movs	r2, #1
 8002476:	709a      	strb	r2, [r3, #2]
	}
	else {
		rState.flash = false;
	}
}
 8002478:	e002      	b.n	8002480 <flashReadStructure+0x2f8>
		rState.flash = false;
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <flashReadStructure+0x308>)
 800247c:	2200      	movs	r2, #0
 800247e:	709a      	strb	r2, [r3, #2]
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	20001620 	.word	0x20001620
 8002490:	20001494 	.word	0x20001494

08002494 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4a07      	ldr	r2, [pc, #28]	; (80024c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80024a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4a06      	ldr	r2, [pc, #24]	; (80024c4 <vApplicationGetIdleTaskMemory+0x30>)
 80024aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2280      	movs	r2, #128	; 0x80
 80024b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000dcc 	.word	0x20000dcc
 80024c4:	20000e30 	.word	0x20000e30

080024c8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4a07      	ldr	r2, [pc, #28]	; (80024f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80024d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	4a06      	ldr	r2, [pc, #24]	; (80024f8 <vApplicationGetTimerTaskMemory+0x30>)
 80024de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024e6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80024e8:	bf00      	nop
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	20001030 	.word	0x20001030
 80024f8:	20001094 	.word	0x20001094

080024fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80024fc:	b5b0      	push	{r4, r5, r7, lr}
 80024fe:	b0a6      	sub	sp, #152	; 0x98
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
    uartBusesInit();
 8002502:	f7fe fea3 	bl	800124c <uartBusesInit>
    variableInit();
 8002506:	f7fe fe05 	bl	8001114 <variableInit>
    stabilizationInit();
 800250a:	f000 fb71 	bl	8002bf0 <stabilizationInit>

    HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 800250e:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <MX_FREERTOS_Init+0x100>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	4a3a      	ldr	r2, [pc, #232]	; (80025fc <MX_FREERTOS_Init+0x100>)
 8002514:	6811      	ldr	r1, [r2, #0]
 8002516:	2201      	movs	r2, #1
 8002518:	4618      	mov	r0, r3
 800251a:	f006 f9a3 	bl	8008864 <HAL_UART_Receive_IT>


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of mutData */
  osMutexStaticDef(mutData, &mutDataControlBlock);
 800251e:	2300      	movs	r3, #0
 8002520:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002524:	4b36      	ldr	r3, [pc, #216]	; (8002600 <MX_FREERTOS_Init+0x104>)
 8002526:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  mutDataHandle = osMutexCreate(osMutex(mutData));
 800252a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800252e:	4618      	mov	r0, r3
 8002530:	f007 fd9d 	bl	800a06e <osMutexCreate>
 8002534:	4603      	mov	r3, r0
 8002536:	4a33      	ldr	r2, [pc, #204]	; (8002604 <MX_FREERTOS_Init+0x108>)
 8002538:	6013      	str	r3, [r2, #0]
  /* definition and creation of defaultTask */
//  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* definition and creation of tLedBlinkingTask */
  osThreadStaticDef(tLedBlinkingTask, func_tLedBlinkingTask, osPriorityLow, 0, 128, tLedBlinkingTaskBuffer, &tLedBlinkingTaskControlBlock);
 800253a:	4b33      	ldr	r3, [pc, #204]	; (8002608 <MX_FREERTOS_Init+0x10c>)
 800253c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8002540:	461d      	mov	r5, r3
 8002542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002546:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800254a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tLedBlinkingTaskHandle = osThreadCreate(osThread(tLedBlinkingTask), NULL);
 800254e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f007 fd2a 	bl	8009fae <osThreadCreate>
 800255a:	4603      	mov	r3, r0
 800255c:	4a2b      	ldr	r2, [pc, #172]	; (800260c <MX_FREERTOS_Init+0x110>)
 800255e:	6013      	str	r3, [r2, #0]

  /* definition and creation of tVmaCommTask */
  osThreadStaticDef(tVmaCommTask, func_tVmaCommTask, osPriorityBelowNormal, 0, 128, tVmaCommTaskBuffer, &tVmaCommTaskControlBlock);
 8002560:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <MX_FREERTOS_Init+0x114>)
 8002562:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002566:	461d      	mov	r5, r3
 8002568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800256a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800256c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002570:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tVmaCommTaskHandle = osThreadCreate(osThread(tVmaCommTask), NULL);
 8002574:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f007 fd17 	bl	8009fae <osThreadCreate>
 8002580:	4603      	mov	r3, r0
 8002582:	4a24      	ldr	r2, [pc, #144]	; (8002614 <MX_FREERTOS_Init+0x118>)
 8002584:	6013      	str	r3, [r2, #0]

  /* definition and creation of tImuCommTask */
  osThreadStaticDef(tImuCommTask, func_tImuCommTask, osPriorityBelowNormal, 0, 128, tImuCommTaskBuffer, &tImuCommTaskControlBlock);
 8002586:	4b24      	ldr	r3, [pc, #144]	; (8002618 <MX_FREERTOS_Init+0x11c>)
 8002588:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800258c:	461d      	mov	r5, r3
 800258e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002592:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002596:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tImuCommTaskHandle = osThreadCreate(osThread(tImuCommTask), NULL);
 800259a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f007 fd04 	bl	8009fae <osThreadCreate>
 80025a6:	4603      	mov	r3, r0
 80025a8:	4a1c      	ldr	r2, [pc, #112]	; (800261c <MX_FREERTOS_Init+0x120>)
 80025aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of tStabilizationTask */
  osThreadStaticDef(tStabilizationTask, func_tStabilizationTask, osPriorityBelowNormal, 0, 128, tStabilizationTaskBuffer, &tStabilizationTaskControlBlock);
 80025ac:	4b1c      	ldr	r3, [pc, #112]	; (8002620 <MX_FREERTOS_Init+0x124>)
 80025ae:	f107 0420 	add.w	r4, r7, #32
 80025b2:	461d      	mov	r5, r3
 80025b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tStabilizationTaskHandle = osThreadCreate(osThread(tStabilizationTask), NULL);
 80025c0:	f107 0320 	add.w	r3, r7, #32
 80025c4:	2100      	movs	r1, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f007 fcf1 	bl	8009fae <osThreadCreate>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4a15      	ldr	r2, [pc, #84]	; (8002624 <MX_FREERTOS_Init+0x128>)
 80025d0:	6013      	str	r3, [r2, #0]
  /* definition and creation of tSensCommTask */
//  osThreadStaticDef(tSensCommTask, func_tSensCommTask, osPriorityBelowNormal, 0, 128, tSensCommTaskBuffer, &tSensCommTaskControlBlock);
//  tSensCommTaskHandle = osThreadCreate(osThread(tSensCommTask), NULL);

  /* definition and creation of tPcCommTask */
  osThreadStaticDef(tPcCommTask, func_tPcCommTask, osPriorityBelowNormal, 0, 128, tPcCommTaskBuffer, &tPcCommTaskControlBlock);
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <MX_FREERTOS_Init+0x12c>)
 80025d4:	1d3c      	adds	r4, r7, #4
 80025d6:	461d      	mov	r5, r3
 80025d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tPcCommTaskHandle = osThreadCreate(osThread(tPcCommTask), NULL);
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f007 fce0 	bl	8009fae <osThreadCreate>
 80025ee:	4603      	mov	r3, r0
 80025f0:	4a0e      	ldr	r2, [pc, #56]	; (800262c <MX_FREERTOS_Init+0x130>)
 80025f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80025f4:	bf00      	nop
 80025f6:	3798      	adds	r7, #152	; 0x98
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bdb0      	pop	{r4, r5, r7, pc}
 80025fc:	200000c4 	.word	0x200000c4
 8002600:	20000d84 	.word	0x20000d84
 8002604:	20000d80 	.word	0x20000d80
 8002608:	0800d49c 	.word	0x0800d49c
 800260c:	20000178 	.word	0x20000178
 8002610:	0800d4b8 	.word	0x0800d4b8
 8002614:	200003e0 	.word	0x200003e0
 8002618:	0800d4d4 	.word	0x0800d4d4
 800261c:	20000648 	.word	0x20000648
 8002620:	0800d4f0 	.word	0x0800d4f0
 8002624:	200008b0 	.word	0x200008b0
 8002628:	0800d50c 	.word	0x0800d50c
 800262c:	20000b18 	.word	0x20000b18

08002630 <func_tLedBlinkingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_func_tLedBlinkingTask */
void func_tLedBlinkingTask(void const * argument)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tLedBlinkingTask */
    uint32_t sysTime = osKernelSysTick();
 8002638:	f007 fca9 	bl	8009f8e <osKernelSysTick>
 800263c:	4603      	mov	r3, r0
 800263e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
        HAL_GPIO_TogglePin(GPIOB, led1_Pin);
 8002640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002644:	4811      	ldr	r0, [pc, #68]	; (800268c <func_tLedBlinkingTask+0x5c>)
 8002646:	f003 fbc0 	bl	8005dca <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 800264a:	f107 030c 	add.w	r3, r7, #12
 800264e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002652:	4618      	mov	r0, r3
 8002654:	f007 fd23 	bl	800a09e <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led2_Pin);
 8002658:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800265c:	480b      	ldr	r0, [pc, #44]	; (800268c <func_tLedBlinkingTask+0x5c>)
 800265e:	f003 fbb4 	bl	8005dca <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 8002662:	f107 030c 	add.w	r3, r7, #12
 8002666:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800266a:	4618      	mov	r0, r3
 800266c:	f007 fd17 	bl	800a09e <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led3_Pin);
 8002670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002674:	4805      	ldr	r0, [pc, #20]	; (800268c <func_tLedBlinkingTask+0x5c>)
 8002676:	f003 fba8 	bl	8005dca <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 800267a:	f107 030c 	add.w	r3, r7, #12
 800267e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002682:	4618      	mov	r0, r3
 8002684:	f007 fd0b 	bl	800a09e <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led1_Pin);
 8002688:	e7da      	b.n	8002640 <func_tLedBlinkingTask+0x10>
 800268a:	bf00      	nop
 800268c:	40020400 	.word	0x40020400

08002690 <func_tVmaCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tVmaCommTask */
void func_tVmaCommTask(void const * argument)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tVmaCommTask */
	uint32_t sysTime = osKernelSysTick();
 8002698:	f007 fc79 	bl	8009f8e <osKernelSysTick>
 800269c:	4603      	mov	r3, r0
 800269e:	60bb      	str	r3, [r7, #8]
	uint8_t transaction = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RE_DE_GPIO_Port, RE_DE_Pin, GPIO_PIN_SET);
 80026a4:	2201      	movs	r2, #1
 80026a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026aa:	482d      	ldr	r0, [pc, #180]	; (8002760 <func_tVmaCommTask+0xd0>)
 80026ac:	f003 fb74 	bl	8005d98 <HAL_GPIO_WritePin>
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 80026b0:	4b2c      	ldr	r3, [pc, #176]	; (8002764 <func_tVmaCommTask+0xd4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2114      	movs	r1, #20
 80026b6:	4618      	mov	r0, r3
 80026b8:	f008 f9bc 	bl	800aa34 <xQueueSemaphoreTake>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d10b      	bne.n	80026da <func_tVmaCommTask+0x4a>
			fillThrustersRequest(ThrustersRequestBuffer, transaction);
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	4619      	mov	r1, r3
 80026c6:	4828      	ldr	r0, [pc, #160]	; (8002768 <func_tVmaCommTask+0xd8>)
 80026c8:	f001 fb22 	bl	8003d10 <fillThrustersRequest>
			xSemaphoreGive(mutDataHandle);
 80026cc:	4b25      	ldr	r3, [pc, #148]	; (8002764 <func_tVmaCommTask+0xd4>)
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	2300      	movs	r3, #0
 80026d2:	2200      	movs	r2, #0
 80026d4:	2100      	movs	r1, #0
 80026d6:	f007 ff33 	bl	800a540 <xQueueGenericSend>
		}

		uartBus[THRUSTERS_UART].txBuffer = ThrustersRequestBuffer;
 80026da:	4b24      	ldr	r3, [pc, #144]	; (800276c <func_tVmaCommTask+0xdc>)
 80026dc:	4a22      	ldr	r2, [pc, #136]	; (8002768 <func_tVmaCommTask+0xd8>)
 80026de:	63da      	str	r2, [r3, #60]	; 0x3c
		uartBus[THRUSTERS_UART].txLength = THRUSTERS_REQUEST_LENGTH;
 80026e0:	4b22      	ldr	r3, [pc, #136]	; (800276c <func_tVmaCommTask+0xdc>)
 80026e2:	220d      	movs	r2, #13
 80026e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

		uartBus[THRUSTERS_UART].rxBuffer = ThrustersResponseBuffer[transaction];
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	4a1f      	ldr	r2, [pc, #124]	; (8002770 <func_tVmaCommTask+0xe0>)
 80026f2:	4413      	add	r3, r2
 80026f4:	4a1d      	ldr	r2, [pc, #116]	; (800276c <func_tVmaCommTask+0xdc>)
 80026f6:	6393      	str	r3, [r2, #56]	; 0x38
		uartBus[THRUSTERS_UART].rxLength = THRUSTERS_RESPONSE_LENGTH;
 80026f8:	4b1c      	ldr	r3, [pc, #112]	; (800276c <func_tVmaCommTask+0xdc>)
 80026fa:	2209      	movs	r2, #9
 80026fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		transmitAndReceive(&uartBus[THRUSTERS_UART], false);
 8002700:	2100      	movs	r1, #0
 8002702:	481c      	ldr	r0, [pc, #112]	; (8002774 <func_tVmaCommTask+0xe4>)
 8002704:	f7fe ff0a 	bl	800151c <transmitAndReceive>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <func_tVmaCommTask+0xd4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2114      	movs	r1, #20
 800270e:	4618      	mov	r0, r3
 8002710:	f008 f990 	bl	800aa34 <xQueueSemaphoreTake>
 8002714:	4603      	mov	r3, r0
 8002716:	2b01      	cmp	r3, #1
 8002718:	d111      	bne.n	800273e <func_tVmaCommTask+0xae>
			fillThrustersResponse(ThrustersResponseBuffer[transaction], transaction);
 800271a:	7bfa      	ldrb	r2, [r7, #15]
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4413      	add	r3, r2
 8002722:	4a13      	ldr	r2, [pc, #76]	; (8002770 <func_tVmaCommTask+0xe0>)
 8002724:	4413      	add	r3, r2
 8002726:	7bfa      	ldrb	r2, [r7, #15]
 8002728:	4611      	mov	r1, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f001 fb72 	bl	8003e14 <fillThrustersResponse>
			xSemaphoreGive(mutDataHandle);
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <func_tVmaCommTask+0xd4>)
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	2300      	movs	r3, #0
 8002736:	2200      	movs	r2, #0
 8002738:	2100      	movs	r1, #0
 800273a:	f007 ff01 	bl	800a540 <xQueueGenericSend>
		}

		transaction = (transaction + 1) % THRUSTERS_NUMBER;
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	3301      	adds	r3, #1
 8002742:	425a      	negs	r2, r3
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	f002 0207 	and.w	r2, r2, #7
 800274c:	bf58      	it	pl
 800274e:	4253      	negpl	r3, r2
 8002750:	73fb      	strb	r3, [r7, #15]
		osDelayUntil(&sysTime, DELAY_THRUSTERS_TASK);
 8002752:	f107 0308 	add.w	r3, r7, #8
 8002756:	2114      	movs	r1, #20
 8002758:	4618      	mov	r0, r3
 800275a:	f007 fca0 	bl	800a09e <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 800275e:	e7a7      	b.n	80026b0 <func_tVmaCommTask+0x20>
 8002760:	40020000 	.word	0x40020000
 8002764:	20000d80 	.word	0x20000d80
 8002768:	20001acc 	.word	0x20001acc
 800276c:	200000c4 	.word	0x200000c4
 8002770:	20001adc 	.word	0x20001adc
 8002774:	200000fc 	.word	0x200000fc

08002778 <func_tImuCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tImuCommTask */
void func_tImuCommTask(void const * argument)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tImuCommTask */
  uint32_t sysTime = osKernelSysTick();
 8002780:	f007 fc05 	bl	8009f8e <osKernelSysTick>
 8002784:	4603      	mov	r3, r0
 8002786:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  	if(rSensors.resetIMU) {
 8002788:	4b2d      	ldr	r3, [pc, #180]	; (8002840 <func_tImuCommTask+0xc8>)
 800278a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800278e:	2b00      	cmp	r3, #0
 8002790:	d020      	beq.n	80027d4 <func_tImuCommTask+0x5c>
			uartBus[IMU_UART].txBuffer = ImuResetRequestBuffer;
 8002792:	4b2c      	ldr	r3, [pc, #176]	; (8002844 <func_tImuCommTask+0xcc>)
 8002794:	4a2c      	ldr	r2, [pc, #176]	; (8002848 <func_tImuCommTask+0xd0>)
 8002796:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH_AC;
 800279a:	4b2a      	ldr	r3, [pc, #168]	; (8002844 <func_tImuCommTask+0xcc>)
 800279c:	2214      	movs	r2, #20
 800279e:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 80027a2:	2100      	movs	r1, #0
 80027a4:	4829      	ldr	r0, [pc, #164]	; (800284c <func_tImuCommTask+0xd4>)
 80027a6:	f7fe fe4f 	bl	8001448 <transmitPackage>

			uartBus[IMU_UART].txBuffer = ImuRequestBuffer;
 80027aa:	4b26      	ldr	r3, [pc, #152]	; (8002844 <func_tImuCommTask+0xcc>)
 80027ac:	4a28      	ldr	r2, [pc, #160]	; (8002850 <func_tImuCommTask+0xd8>)
 80027ae:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH;
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <func_tImuCommTask+0xcc>)
 80027b4:	221f      	movs	r2, #31
 80027b6:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 80027ba:	2100      	movs	r1, #0
 80027bc:	4823      	ldr	r0, [pc, #140]	; (800284c <func_tImuCommTask+0xd4>)
 80027be:	f7fe fe43 	bl	8001448 <transmitPackage>

//			uartBus[IMU_UART].txBuffer = ImuRequestBuffer;
//			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH;
//	  		transmitPackage(&uartBus[IMU_UART], false);

	  		rSensors.pressure_null = rSensors.pressure;
 80027c2:	4b1f      	ldr	r3, [pc, #124]	; (8002840 <func_tImuCommTask+0xc8>)
 80027c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c6:	4a1e      	ldr	r2, [pc, #120]	; (8002840 <func_tImuCommTask+0xc8>)
 80027c8:	6593      	str	r3, [r2, #88]	; 0x58
	  		rSensors.resetIMU = false;
 80027ca:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <func_tImuCommTask+0xc8>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80027d2:	e02d      	b.n	8002830 <func_tImuCommTask+0xb8>
	  	}
	  	else {
//	  		uartBus[IMU_UART].txBuffer = ImuRequestBuffer;
//	  		uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH;

	  		uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <func_tImuCommTask+0xcc>)
 80027d6:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <func_tImuCommTask+0xdc>)
 80027d8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  		uartBus[IMU_UART].rxLength = IMU_RESPONSE_LENGTH;
 80027dc:	4b19      	ldr	r3, [pc, #100]	; (8002844 <func_tImuCommTask+0xcc>)
 80027de:	2232      	movs	r2, #50	; 0x32
 80027e0:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

	  		HAL_UART_Receive_IT(uartBus[IMU_UART].huart, uartBus[IMU_UART].rxBuffer, uartBus[IMU_UART].rxLength);
 80027e4:	4b17      	ldr	r3, [pc, #92]	; (8002844 <func_tImuCommTask+0xcc>)
 80027e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027ea:	4a16      	ldr	r2, [pc, #88]	; (8002844 <func_tImuCommTask+0xcc>)
 80027ec:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 80027f0:	4a14      	ldr	r2, [pc, #80]	; (8002844 <func_tImuCommTask+0xcc>)
 80027f2:	f892 20cc 	ldrb.w	r2, [r2, #204]	; 0xcc
 80027f6:	b292      	uxth	r2, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f006 f833 	bl	8008864 <HAL_UART_Receive_IT>
	  		//HAL_UART_Transmit_IT(uartBus[IMU_UART].huart, uartBus[IMU_UART].txBuffer, uartBus[IMU_UART].txLength);
	  		osDelayUntil(&sysTime, DELAY_IMU_TASK);
 80027fe:	f107 030c 	add.w	r3, r7, #12
 8002802:	210a      	movs	r1, #10
 8002804:	4618      	mov	r0, r3
 8002806:	f007 fc4a 	bl	800a09e <osDelayUntil>

	  		//if(transmitAndReceive(&uartBus[IMU_UART], false)) {
	  			if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_IMU_TASK) == pdTRUE) {
 800280a:	4b13      	ldr	r3, [pc, #76]	; (8002858 <func_tImuCommTask+0xe0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	210a      	movs	r1, #10
 8002810:	4618      	mov	r0, r3
 8002812:	f008 f90f 	bl	800aa34 <xQueueSemaphoreTake>
 8002816:	4603      	mov	r3, r0
 8002818:	2b01      	cmp	r3, #1
 800281a:	d109      	bne.n	8002830 <func_tImuCommTask+0xb8>
	  				ImuReceive(ImuResponseBuffer);
 800281c:	480d      	ldr	r0, [pc, #52]	; (8002854 <func_tImuCommTask+0xdc>)
 800281e:	f7ff fa23 	bl	8001c68 <ImuReceive>
	  				xSemaphoreGive(mutDataHandle);
 8002822:	4b0d      	ldr	r3, [pc, #52]	; (8002858 <func_tImuCommTask+0xe0>)
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	2300      	movs	r3, #0
 8002828:	2200      	movs	r2, #0
 800282a:	2100      	movs	r1, #0
 800282c:	f007 fe88 	bl	800a540 <xQueueGenericSend>
	  			}
	  		//}

	  	}

	  	osDelayUntil(&sysTime, DELAY_IMU_TASK);
 8002830:	f107 030c 	add.w	r3, r7, #12
 8002834:	210a      	movs	r1, #10
 8002836:	4618      	mov	r0, r3
 8002838:	f007 fc31 	bl	800a09e <osDelayUntil>
	  	if(rSensors.resetIMU) {
 800283c:	e7a4      	b.n	8002788 <func_tImuCommTask+0x10>
 800283e:	bf00      	nop
 8002840:	20001560 	.word	0x20001560
 8002844:	200000c4 	.word	0x200000c4
 8002848:	20000020 	.word	0x20000020
 800284c:	2000016c 	.word	0x2000016c
 8002850:	20000000 	.word	0x20000000
 8002854:	20001a98 	.word	0x20001a98
 8002858:	20000d80 	.word	0x20000d80

0800285c <func_tStabilizationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tStabilizationTask */
void func_tStabilizationTask(void const * argument)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tStabilizationTask */
	uint32_t sysTime = osKernelSysTick();
 8002864:	f007 fb93 	bl	8009f8e <osKernelSysTick>
 8002868:	4603      	mov	r3, r0
 800286a:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 800286c:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <func_tStabilizationTask+0x6c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	210a      	movs	r1, #10
 8002872:	4618      	mov	r0, r3
 8002874:	f008 f8de 	bl	800aa34 <xQueueSemaphoreTake>
 8002878:	4603      	mov	r3, r0
 800287a:	2b01      	cmp	r3, #1
 800287c:	d11d      	bne.n	80028ba <func_tStabilizationTask+0x5e>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800287e:	2300      	movs	r3, #0
 8002880:	73fb      	strb	r3, [r7, #15]
 8002882:	e010      	b.n	80028a6 <func_tStabilizationTask+0x4a>
				if (rStabConstants[i].enable) {
 8002884:	7bfa      	ldrb	r2, [r7, #15]
 8002886:	4911      	ldr	r1, [pc, #68]	; (80028cc <func_tStabilizationTask+0x70>)
 8002888:	4613      	mov	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4413      	add	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	440b      	add	r3, r1
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <func_tStabilizationTask+0x44>
					stabilizationUpdate(i);
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fd8e 	bl	80033bc <stabilizationUpdate>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	3301      	adds	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	2b05      	cmp	r3, #5
 80028aa:	d9eb      	bls.n	8002884 <func_tStabilizationTask+0x28>
				}
			}
			//formThrustVectors();
			xSemaphoreGive(mutDataHandle);
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <func_tStabilizationTask+0x6c>)
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	2300      	movs	r3, #0
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	f007 fe43 	bl	800a540 <xQueueGenericSend>
		}

		osDelayUntil(&sysTime, DELAY_STABILIZATION_TASK);
 80028ba:	f107 0308 	add.w	r3, r7, #8
 80028be:	210a      	movs	r1, #10
 80028c0:	4618      	mov	r0, r3
 80028c2:	f007 fbec 	bl	800a09e <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 80028c6:	e7d1      	b.n	800286c <func_tStabilizationTask+0x10>
 80028c8:	20000d80 	.word	0x20000d80
 80028cc:	20001620 	.word	0x20001620

080028d0 <func_tPcCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tPcCommTask */
void func_tPcCommTask(void const * argument)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tPcCommTask */
	uint32_t sysTime = osKernelSysTick();
 80028d8:	f007 fb59 	bl	8009f8e <osKernelSysTick>
 80028dc:	4603      	mov	r3, r0
 80028de:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  osDelayUntil(&sysTime, DELAY_PC_TASK);
 80028e0:	f107 030c 	add.w	r3, r7, #12
 80028e4:	210a      	movs	r1, #10
 80028e6:	4618      	mov	r0, r3
 80028e8:	f007 fbd9 	bl	800a09e <osDelayUntil>
 80028ec:	e7f8      	b.n	80028e0 <func_tPcCommTask+0x10>
	...

080028f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f6:	f107 030c 	add.w	r3, r7, #12
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	609a      	str	r2, [r3, #8]
 8002902:	60da      	str	r2, [r3, #12]
 8002904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	4b2b      	ldr	r3, [pc, #172]	; (80029b8 <MX_GPIO_Init+0xc8>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	4a2a      	ldr	r2, [pc, #168]	; (80029b8 <MX_GPIO_Init+0xc8>)
 8002910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002914:	6313      	str	r3, [r2, #48]	; 0x30
 8002916:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <MX_GPIO_Init+0xc8>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	607b      	str	r3, [r7, #4]
 8002926:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <MX_GPIO_Init+0xc8>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a23      	ldr	r2, [pc, #140]	; (80029b8 <MX_GPIO_Init+0xc8>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <MX_GPIO_Init+0xc8>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	607b      	str	r3, [r7, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <MX_GPIO_Init+0xc8>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	4a1c      	ldr	r2, [pc, #112]	; (80029b8 <MX_GPIO_Init+0xc8>)
 8002948:	f043 0302 	orr.w	r3, r3, #2
 800294c:	6313      	str	r3, [r2, #48]	; 0x30
 800294e:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <MX_GPIO_Init+0xc8>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led1_Pin|led2_Pin|led3_Pin, GPIO_PIN_RESET);
 800295a:	2200      	movs	r2, #0
 800295c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002960:	4816      	ldr	r0, [pc, #88]	; (80029bc <MX_GPIO_Init+0xcc>)
 8002962:	f003 fa19 	bl	8005d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_DE_GPIO_Port, RE_DE_Pin, GPIO_PIN_RESET);
 8002966:	2200      	movs	r2, #0
 8002968:	f44f 7180 	mov.w	r1, #256	; 0x100
 800296c:	4814      	ldr	r0, [pc, #80]	; (80029c0 <MX_GPIO_Init+0xd0>)
 800296e:	f003 fa13 	bl	8005d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin;
 8002972:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002976:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002978:	2301      	movs	r3, #1
 800297a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002980:	2300      	movs	r3, #0
 8002982:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002984:	f107 030c 	add.w	r3, r7, #12
 8002988:	4619      	mov	r1, r3
 800298a:	480c      	ldr	r0, [pc, #48]	; (80029bc <MX_GPIO_Init+0xcc>)
 800298c:	f003 f868 	bl	8005a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RE_DE_Pin;
 8002990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002994:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002996:	2301      	movs	r3, #1
 8002998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299e:	2300      	movs	r3, #0
 80029a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RE_DE_GPIO_Port, &GPIO_InitStruct);
 80029a2:	f107 030c 	add.w	r3, r7, #12
 80029a6:	4619      	mov	r1, r3
 80029a8:	4805      	ldr	r0, [pc, #20]	; (80029c0 <MX_GPIO_Init+0xd0>)
 80029aa:	f003 f859 	bl	8005a60 <HAL_GPIO_Init>

}
 80029ae:	bf00      	nop
 80029b0:	3720      	adds	r7, #32
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40020400 	.word	0x40020400
 80029c0:	40020000 	.word	0x40020000

080029c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <MX_I2C1_Init+0x50>)
 80029ca:	4a13      	ldr	r2, [pc, #76]	; (8002a18 <MX_I2C1_Init+0x54>)
 80029cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <MX_I2C1_Init+0x50>)
 80029d0:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <MX_I2C1_Init+0x58>)
 80029d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029d4:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <MX_I2C1_Init+0x50>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <MX_I2C1_Init+0x50>)
 80029dc:	2200      	movs	r2, #0
 80029de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <MX_I2C1_Init+0x50>)
 80029e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029e8:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <MX_I2C1_Init+0x50>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <MX_I2C1_Init+0x50>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029f4:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <MX_I2C1_Init+0x50>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <MX_I2C1_Init+0x50>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a00:	4804      	ldr	r0, [pc, #16]	; (8002a14 <MX_I2C1_Init+0x50>)
 8002a02:	f003 f9fd 	bl	8005e00 <HAL_I2C_Init>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a0c:	f000 f8eb 	bl	8002be6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a10:	bf00      	nop
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20001b24 	.word	0x20001b24
 8002a18:	40005400 	.word	0x40005400
 8002a1c:	000186a0 	.word	0x000186a0

08002a20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08a      	sub	sp, #40	; 0x28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a1d      	ldr	r2, [pc, #116]	; (8002ab4 <HAL_I2C_MspInit+0x94>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d133      	bne.n	8002aaa <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <HAL_I2C_MspInit+0x98>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	4a1b      	ldr	r2, [pc, #108]	; (8002ab8 <HAL_I2C_MspInit+0x98>)
 8002a4c:	f043 0302 	orr.w	r3, r3, #2
 8002a50:	6313      	str	r3, [r2, #48]	; 0x30
 8002a52:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_I2C_MspInit+0x98>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a5e:	23c0      	movs	r3, #192	; 0xc0
 8002a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a62:	2312      	movs	r3, #18
 8002a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a6e:	2304      	movs	r3, #4
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a72:	f107 0314 	add.w	r3, r7, #20
 8002a76:	4619      	mov	r1, r3
 8002a78:	4810      	ldr	r0, [pc, #64]	; (8002abc <HAL_I2C_MspInit+0x9c>)
 8002a7a:	f002 fff1 	bl	8005a60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <HAL_I2C_MspInit+0x98>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	4a0c      	ldr	r2, [pc, #48]	; (8002ab8 <HAL_I2C_MspInit+0x98>)
 8002a88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <HAL_I2C_MspInit+0x98>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2105      	movs	r1, #5
 8002a9e:	201f      	movs	r0, #31
 8002aa0:	f002 f8cc 	bl	8004c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002aa4:	201f      	movs	r0, #31
 8002aa6:	f002 f8e5 	bl	8004c74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002aaa:	bf00      	nop
 8002aac:	3728      	adds	r7, #40	; 0x28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40005400 	.word	0x40005400
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40020400 	.word	0x40020400

08002ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ac4:	f001 ffc0 	bl	8004a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ac8:	f000 f816 	bl	8002af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002acc:	f7ff ff10 	bl	80028f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ad0:	f7ff f926 	bl	8001d20 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002ad4:	f001 fc6a 	bl	80043ac <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002ad8:	f001 fcbc 	bl	8004454 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002adc:	f7ff ff72 	bl	80029c4 <MX_I2C1_Init>
  MX_TIM7_Init();
 8002ae0:	f001 fbe4 	bl	80042ac <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8002ae4:	f001 fc8c 	bl	8004400 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8002ae8:	f001 fc36 	bl	8004358 <MX_UART4_Init>
//	HAL_GPIO_WritePin(GPIOB, led3_Pin, GPIO_PIN_RESET);
//	HAL_Delay(500);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002aec:	f7ff fd06 	bl	80024fc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002af0:	f007 fa46 	bl	8009f80 <osKernelStart>
	//uint8_t buf[31]="$VNWRG,75,2,10,01,0129*XX\r\n";
	//uint8_t recbuf[10] ={0};
//	HAL_UART_Receive_IT(&huart2,recbuf, sizeof(buf));
//	HAL_UART_Transmit_IT(&huart2,buf,sizeof(buf));

  while (1)
 8002af4:	e7fe      	b.n	8002af4 <main+0x34>
	...

08002af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b094      	sub	sp, #80	; 0x50
 8002afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002afe:	f107 0320 	add.w	r3, r7, #32
 8002b02:	2230      	movs	r2, #48	; 0x30
 8002b04:	2100      	movs	r1, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f00a fa80 	bl	800d00c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b0c:	f107 030c 	add.w	r3, r7, #12
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	4b27      	ldr	r3, [pc, #156]	; (8002bc0 <SystemClock_Config+0xc8>)
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	4a26      	ldr	r2, [pc, #152]	; (8002bc0 <SystemClock_Config+0xc8>)
 8002b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2c:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <SystemClock_Config+0xc8>)
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b38:	2300      	movs	r3, #0
 8002b3a:	607b      	str	r3, [r7, #4]
 8002b3c:	4b21      	ldr	r3, [pc, #132]	; (8002bc4 <SystemClock_Config+0xcc>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a20      	ldr	r2, [pc, #128]	; (8002bc4 <SystemClock_Config+0xcc>)
 8002b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <SystemClock_Config+0xcc>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b50:	607b      	str	r3, [r7, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b54:	2302      	movs	r3, #2
 8002b56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b5c:	2310      	movs	r3, #16
 8002b5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b60:	2302      	movs	r3, #2
 8002b62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b64:	2300      	movs	r3, #0
 8002b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b68:	2308      	movs	r3, #8
 8002b6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002b6c:	2348      	movs	r3, #72	; 0x48
 8002b6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b70:	2302      	movs	r3, #2
 8002b72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b74:	2304      	movs	r3, #4
 8002b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b78:	f107 0320 	add.w	r3, r7, #32
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f004 fe35 	bl	80077ec <HAL_RCC_OscConfig>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002b88:	f000 f82d 	bl	8002be6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b8c:	230f      	movs	r3, #15
 8002b8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b90:	2302      	movs	r3, #2
 8002b92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ba2:	f107 030c 	add.w	r3, r7, #12
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f005 f897 	bl	8007cdc <HAL_RCC_ClockConfig>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002bb4:	f000 f817 	bl	8002be6 <Error_Handler>
  }
}
 8002bb8:	bf00      	nop
 8002bba:	3750      	adds	r7, #80	; 0x50
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40007000 	.word	0x40007000

08002bc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd8:	d101      	bne.n	8002bde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002bda:	f001 ff57 	bl	8004a8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bea:	b672      	cpsid	i
}
 8002bec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bee:	e7fe      	b.n	8002bee <Error_Handler+0x8>

08002bf0 <stabilizationInit>:
#include "FreeRTOSTick.h"
#include "math.h"
#include "robot.h"

void stabilizationInit()
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	71fb      	strb	r3, [r7, #7]
 8002bfa:	e16d      	b.n	8002ed8 <stabilizationInit+0x2e8>
		rStabConstants[i].enable = false;
 8002bfc:	79fa      	ldrb	r2, [r7, #7]
 8002bfe:	49c1      	ldr	r1, [pc, #772]	; (8002f04 <stabilizationInit+0x314>)
 8002c00:	4613      	mov	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	440b      	add	r3, r1
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]

		rStabState[i].speedIntegral = 0;
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	4abd      	ldr	r2, [pc, #756]	; (8002f08 <stabilizationInit+0x318>)
 8002c12:	2158      	movs	r1, #88	; 0x58
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	330c      	adds	r3, #12
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
		rStabState[i].posDerivative = 0;
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	4ab8      	ldr	r2, [pc, #736]	; (8002f08 <stabilizationInit+0x318>)
 8002c26:	2158      	movs	r1, #88	; 0x58
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3310      	adds	r3, #16
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeed = 0;
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	4ab3      	ldr	r2, [pc, #716]	; (8002f08 <stabilizationInit+0x318>)
 8002c3a:	2158      	movs	r1, #88	; 0x58
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	3314      	adds	r3, #20
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPos = 0;
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	4aae      	ldr	r2, [pc, #696]	; (8002f08 <stabilizationInit+0x318>)
 8002c4e:	2158      	movs	r1, #88	; 0x58
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	3318      	adds	r3, #24
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]

		rStabState[i].joyUnitCasted = 0;
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	4aa9      	ldr	r2, [pc, #676]	; (8002f08 <stabilizationInit+0x318>)
 8002c62:	2158      	movs	r1, #88	; 0x58
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	331c      	adds	r3, #28
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
		rStabState[i].joy_iValue = 0;
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	4aa4      	ldr	r2, [pc, #656]	; (8002f08 <stabilizationInit+0x318>)
 8002c76:	2158      	movs	r1, #88	; 0x58
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3320      	adds	r3, #32
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
		rStabState[i].posError = 0;
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	4a9f      	ldr	r2, [pc, #636]	; (8002f08 <stabilizationInit+0x318>)
 8002c8a:	2158      	movs	r1, #88	; 0x58
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	3324      	adds	r3, #36	; 0x24
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
		rStabState[i].speedError = 0;
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	4a9a      	ldr	r2, [pc, #616]	; (8002f08 <stabilizationInit+0x318>)
 8002c9e:	2158      	movs	r1, #88	; 0x58
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3328      	adds	r3, #40	; 0x28
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
		rStabState[i].dynSummator = 0;
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	4a95      	ldr	r2, [pc, #596]	; (8002f08 <stabilizationInit+0x318>)
 8002cb2:	2158      	movs	r1, #88	; 0x58
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	332c      	adds	r3, #44	; 0x2c
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
		rStabState[i].pidValue = 0;
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	4a90      	ldr	r2, [pc, #576]	; (8002f08 <stabilizationInit+0x318>)
 8002cc6:	2158      	movs	r1, #88	; 0x58
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	3330      	adds	r3, #48	; 0x30
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
		rStabState[i].pid_iValue = 0;
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	4a8b      	ldr	r2, [pc, #556]	; (8002f08 <stabilizationInit+0x318>)
 8002cda:	2158      	movs	r1, #88	; 0x58
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3334      	adds	r3, #52	; 0x34
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
		rStabState[i].posErrorAmp = 0;
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	4a86      	ldr	r2, [pc, #536]	; (8002f08 <stabilizationInit+0x318>)
 8002cee:	2158      	movs	r1, #88	; 0x58
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3338      	adds	r3, #56	; 0x38
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
		rStabState[i].speedFiltered = 0;
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	4a81      	ldr	r2, [pc, #516]	; (8002f08 <stabilizationInit+0x318>)
 8002d02:	2158      	movs	r1, #88	; 0x58
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	333c      	adds	r3, #60	; 0x3c
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
		rStabState[i].posFiltered = 0;
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	4a7c      	ldr	r2, [pc, #496]	; (8002f08 <stabilizationInit+0x318>)
 8002d16:	2158      	movs	r1, #88	; 0x58
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3340      	adds	r3, #64	; 0x40
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPosFiltered = 0;
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	4a77      	ldr	r2, [pc, #476]	; (8002f08 <stabilizationInit+0x318>)
 8002d2a:	2158      	movs	r1, #88	; 0x58
 8002d2c:	fb01 f303 	mul.w	r3, r1, r3
 8002d30:	4413      	add	r3, r2
 8002d32:	3344      	adds	r3, #68	; 0x44
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeedError = 0;
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	4a72      	ldr	r2, [pc, #456]	; (8002f08 <stabilizationInit+0x318>)
 8002d3e:	2158      	movs	r1, #88	; 0x58
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	3348      	adds	r3, #72	; 0x48
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
		rStabState[i].thrustersFiltered = 0;
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	4a6d      	ldr	r2, [pc, #436]	; (8002f08 <stabilizationInit+0x318>)
 8002d52:	2158      	movs	r1, #88	; 0x58
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	334c      	adds	r3, #76	; 0x4c
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
		rStabState[i].outputSignal = 0;
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	4a68      	ldr	r2, [pc, #416]	; (8002f08 <stabilizationInit+0x318>)
 8002d66:	2158      	movs	r1, #88	; 0x58
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3350      	adds	r3, #80	; 0x50
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]

		rStabState[i].LastTick = 0;
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	4a63      	ldr	r2, [pc, #396]	; (8002f08 <stabilizationInit+0x318>)
 8002d7a:	2158      	movs	r1, #88	; 0x58
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	3354      	adds	r3, #84	; 0x54
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]

		if(!rState.flash) {
 8002d8a:	4b60      	ldr	r3, [pc, #384]	; (8002f0c <stabilizationInit+0x31c>)
 8002d8c:	789b      	ldrb	r3, [r3, #2]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f040 809f 	bne.w	8002ed2 <stabilizationInit+0x2e2>
			rStabConstants[i].pJoyUnitCast = 1;
 8002d94:	79fa      	ldrb	r2, [r7, #7]
 8002d96:	495b      	ldr	r1, [pc, #364]	; (8002f04 <stabilizationInit+0x314>)
 8002d98:	4613      	mov	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	440b      	add	r3, r1
 8002da2:	3304      	adds	r3, #4
 8002da4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002da8:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pSpeedDyn = 1;
 8002daa:	79fa      	ldrb	r2, [r7, #7]
 8002dac:	4955      	ldr	r1, [pc, #340]	; (8002f04 <stabilizationInit+0x314>)
 8002dae:	4613      	mov	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4413      	add	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	440b      	add	r3, r1
 8002db8:	3308      	adds	r3, #8
 8002dba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002dbe:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pErrGain = 1;
 8002dc0:	79fa      	ldrb	r2, [r7, #7]
 8002dc2:	4950      	ldr	r1, [pc, #320]	; (8002f04 <stabilizationInit+0x314>)
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4413      	add	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	440b      	add	r3, r1
 8002dce:	330c      	adds	r3, #12
 8002dd0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002dd4:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].T = 0;
 8002dd6:	79fa      	ldrb	r2, [r7, #7]
 8002dd8:	494a      	ldr	r1, [pc, #296]	; (8002f04 <stabilizationInit+0x314>)
 8002dda:	4613      	mov	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	4413      	add	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	440b      	add	r3, r1
 8002de4:	3318      	adds	r3, #24
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].K = 1;
 8002dec:	79fa      	ldrb	r2, [r7, #7]
 8002dee:	4945      	ldr	r1, [pc, #276]	; (8002f04 <stabilizationInit+0x314>)
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	440b      	add	r3, r1
 8002dfa:	331c      	adds	r3, #28
 8002dfc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e00:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].T = 0;
 8002e02:	79fa      	ldrb	r2, [r7, #7]
 8002e04:	493f      	ldr	r1, [pc, #252]	; (8002f04 <stabilizationInit+0x314>)
 8002e06:	4613      	mov	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	440b      	add	r3, r1
 8002e10:	3310      	adds	r3, #16
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].K = 1;
 8002e18:	79fa      	ldrb	r2, [r7, #7]
 8002e1a:	493a      	ldr	r1, [pc, #232]	; (8002f04 <stabilizationInit+0x314>)
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	440b      	add	r3, r1
 8002e26:	3314      	adds	r3, #20
 8002e28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e2c:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.pGain = 1;
 8002e2e:	79fa      	ldrb	r2, [r7, #7]
 8002e30:	4934      	ldr	r1, [pc, #208]	; (8002f04 <stabilizationInit+0x314>)
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	440b      	add	r3, r1
 8002e3c:	3328      	adds	r3, #40	; 0x28
 8002e3e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e42:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iGain = 1;
 8002e44:	79fa      	ldrb	r2, [r7, #7]
 8002e46:	492f      	ldr	r1, [pc, #188]	; (8002f04 <stabilizationInit+0x314>)
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	440b      	add	r3, r1
 8002e52:	332c      	adds	r3, #44	; 0x2c
 8002e54:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e58:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMax = -1000;
 8002e5a:	79fa      	ldrb	r2, [r7, #7]
 8002e5c:	4929      	ldr	r1, [pc, #164]	; (8002f04 <stabilizationInit+0x314>)
 8002e5e:	4613      	mov	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	440b      	add	r3, r1
 8002e68:	3330      	adds	r3, #48	; 0x30
 8002e6a:	4a29      	ldr	r2, [pc, #164]	; (8002f10 <stabilizationInit+0x320>)
 8002e6c:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMin = 1000;
 8002e6e:	79fa      	ldrb	r2, [r7, #7]
 8002e70:	4924      	ldr	r1, [pc, #144]	; (8002f04 <stabilizationInit+0x314>)
 8002e72:	4613      	mov	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4413      	add	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	440b      	add	r3, r1
 8002e7c:	3334      	adds	r3, #52	; 0x34
 8002e7e:	4a25      	ldr	r2, [pc, #148]	; (8002f14 <stabilizationInit+0x324>)
 8002e80:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMax = 5000;
 8002e82:	79fa      	ldrb	r2, [r7, #7]
 8002e84:	491f      	ldr	r1, [pc, #124]	; (8002f04 <stabilizationInit+0x314>)
 8002e86:	4613      	mov	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	440b      	add	r3, r1
 8002e90:	333c      	adds	r3, #60	; 0x3c
 8002e92:	4a21      	ldr	r2, [pc, #132]	; (8002f18 <stabilizationInit+0x328>)
 8002e94:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMin = -5000;
 8002e96:	79fa      	ldrb	r2, [r7, #7]
 8002e98:	491a      	ldr	r1, [pc, #104]	; (8002f04 <stabilizationInit+0x314>)
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	440b      	add	r3, r1
 8002ea4:	3338      	adds	r3, #56	; 0x38
 8002ea6:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <stabilizationInit+0x32c>)
 8002ea8:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMax = 32000;
 8002eaa:	79fa      	ldrb	r2, [r7, #7]
 8002eac:	4915      	ldr	r1, [pc, #84]	; (8002f04 <stabilizationInit+0x314>)
 8002eae:	4613      	mov	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	440b      	add	r3, r1
 8002eb8:	3340      	adds	r3, #64	; 0x40
 8002eba:	4a19      	ldr	r2, [pc, #100]	; (8002f20 <stabilizationInit+0x330>)
 8002ebc:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMin = -32000;
 8002ebe:	79fa      	ldrb	r2, [r7, #7]
 8002ec0:	4910      	ldr	r1, [pc, #64]	; (8002f04 <stabilizationInit+0x314>)
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	440b      	add	r3, r1
 8002ecc:	3344      	adds	r3, #68	; 0x44
 8002ece:	4a15      	ldr	r2, [pc, #84]	; (8002f24 <stabilizationInit+0x334>)
 8002ed0:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	71fb      	strb	r3, [r7, #7]
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	2b05      	cmp	r3, #5
 8002edc:	f67f ae8e 	bls.w	8002bfc <stabilizationInit+0xc>




	/////////////////////////////////////////////////////////////
    rStabState[STAB_ROLL].inputSignal = &rJoySpeed.roll;
 8002ee0:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <stabilizationInit+0x318>)
 8002ee2:	4a11      	ldr	r2, [pc, #68]	; (8002f28 <stabilizationInit+0x338>)
 8002ee4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    rStabState[STAB_ROLL].speedSignal = &rSensors.rollSpeed;
 8002ee8:	4b07      	ldr	r3, [pc, #28]	; (8002f08 <stabilizationInit+0x318>)
 8002eea:	4a10      	ldr	r2, [pc, #64]	; (8002f2c <stabilizationInit+0x33c>)
 8002eec:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    rStabState[STAB_ROLL].posSignal = &rSensors.roll;
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <stabilizationInit+0x318>)
 8002ef2:	4a0f      	ldr	r2, [pc, #60]	; (8002f30 <stabilizationInit+0x340>)
 8002ef4:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    rStabConstants[STAB_ROLL].joyIntegration = false;
 8002ef8:	4b02      	ldr	r3, [pc, #8]	; (8002f04 <stabilizationInit+0x314>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
 8002f00:	e018      	b.n	8002f34 <stabilizationInit+0x344>
 8002f02:	bf00      	nop
 8002f04:	20001620 	.word	0x20001620
 8002f08:	200017d0 	.word	0x200017d0
 8002f0c:	20001494 	.word	0x20001494
 8002f10:	c47a0000 	.word	0xc47a0000
 8002f14:	447a0000 	.word	0x447a0000
 8002f18:	459c4000 	.word	0x459c4000
 8002f1c:	c59c4000 	.word	0xc59c4000
 8002f20:	46fa0000 	.word	0x46fa0000
 8002f24:	c6fa0000 	.word	0xc6fa0000
 8002f28:	200015d8 	.word	0x200015d8
 8002f2c:	2000157c 	.word	0x2000157c
 8002f30:	20001560 	.word	0x20001560
    /////////////////////////////////////////////////////////////
    rStabState[STAB_PITCH].inputSignal = &rJoySpeed.pitch;
 8002f34:	4b86      	ldr	r3, [pc, #536]	; (8003150 <stabilizationInit+0x560>)
 8002f36:	4a87      	ldr	r2, [pc, #540]	; (8003154 <stabilizationInit+0x564>)
 8002f38:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    rStabState[STAB_PITCH].speedSignal = &rSensors.pitchSpeed;
 8002f3c:	4b84      	ldr	r3, [pc, #528]	; (8003150 <stabilizationInit+0x560>)
 8002f3e:	4a86      	ldr	r2, [pc, #536]	; (8003158 <stabilizationInit+0x568>)
 8002f40:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    rStabState[STAB_PITCH].posSignal = &rSensors.pitch;
 8002f44:	4b82      	ldr	r3, [pc, #520]	; (8003150 <stabilizationInit+0x560>)
 8002f46:	4a85      	ldr	r2, [pc, #532]	; (800315c <stabilizationInit+0x56c>)
 8002f48:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    rStabConstants[STAB_PITCH].joyIntegration = true;
 8002f4c:	4b84      	ldr	r3, [pc, #528]	; (8003160 <stabilizationInit+0x570>)
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    /////////////////////////////////////////////////////////////
    rStabState[STAB_YAW].inputSignal = &rJoySpeed.yaw;
 8002f54:	4b7e      	ldr	r3, [pc, #504]	; (8003150 <stabilizationInit+0x560>)
 8002f56:	4a83      	ldr	r2, [pc, #524]	; (8003164 <stabilizationInit+0x574>)
 8002f58:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    rStabState[STAB_YAW].speedSignal = &rSensors.yawSpeed;
 8002f5c:	4b7c      	ldr	r3, [pc, #496]	; (8003150 <stabilizationInit+0x560>)
 8002f5e:	4a82      	ldr	r2, [pc, #520]	; (8003168 <stabilizationInit+0x578>)
 8002f60:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    rStabState[STAB_YAW].posSignal = &rSensors.yaw;//&rStabState[STAB_YAW].speedIntegral;
 8002f64:	4b7a      	ldr	r3, [pc, #488]	; (8003150 <stabilizationInit+0x560>)
 8002f66:	4a81      	ldr	r2, [pc, #516]	; (800316c <stabilizationInit+0x57c>)
 8002f68:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    rStabConstants[STAB_YAW].joyIntegration = true;
 8002f6c:	4b7c      	ldr	r3, [pc, #496]	; (8003160 <stabilizationInit+0x570>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
    /////////////////////////////////////////////////////////////
    rStabState[STAB_DEPTH].inputSignal = &rJoySpeed.depth;
 8002f74:	4b76      	ldr	r3, [pc, #472]	; (8003150 <stabilizationInit+0x560>)
 8002f76:	4a7e      	ldr	r2, [pc, #504]	; (8003170 <stabilizationInit+0x580>)
 8002f78:	601a      	str	r2, [r3, #0]
    rStabState[STAB_DEPTH].speedSignal = &rSensors.velocity_pressure;//&rStabState[STAB_DEPTH].posDerivative;
 8002f7a:	4b75      	ldr	r3, [pc, #468]	; (8003150 <stabilizationInit+0x560>)
 8002f7c:	4a7d      	ldr	r2, [pc, #500]	; (8003174 <stabilizationInit+0x584>)
 8002f7e:	605a      	str	r2, [r3, #4]
    rStabState[STAB_DEPTH].posSignal = &rSensors.pressure;
 8002f80:	4b73      	ldr	r3, [pc, #460]	; (8003150 <stabilizationInit+0x560>)
 8002f82:	4a7d      	ldr	r2, [pc, #500]	; (8003178 <stabilizationInit+0x588>)
 8002f84:	609a      	str	r2, [r3, #8]
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 8002f86:	4b76      	ldr	r3, [pc, #472]	; (8003160 <stabilizationInit+0x570>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	705a      	strb	r2, [r3, #1]
    /////////////////////////////////////////////////////////////
    rStabState[STAB_LAG].inputSignal = &rJoySpeed.lag;
 8002f8c:	4b70      	ldr	r3, [pc, #448]	; (8003150 <stabilizationInit+0x560>)
 8002f8e:	4a7b      	ldr	r2, [pc, #492]	; (800317c <stabilizationInit+0x58c>)
 8002f90:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    rStabState[STAB_LAG].speedSignal = &rStabState[STAB_LAG].posDerivative;
 8002f94:	4b6e      	ldr	r3, [pc, #440]	; (8003150 <stabilizationInit+0x560>)
 8002f96:	4a7a      	ldr	r2, [pc, #488]	; (8003180 <stabilizationInit+0x590>)
 8002f98:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    rStabState[STAB_LAG].posSignal = &rState.lag_error;
 8002f9c:	4b6c      	ldr	r3, [pc, #432]	; (8003150 <stabilizationInit+0x560>)
 8002f9e:	4a79      	ldr	r2, [pc, #484]	; (8003184 <stabilizationInit+0x594>)
 8002fa0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    rStabConstants[STAB_LAG].joyIntegration = false;
 8002fa4:	4b6e      	ldr	r3, [pc, #440]	; (8003160 <stabilizationInit+0x570>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    /////////////////////////////////////////////////////////////
    rStabState[STAB_MARCH].inputSignal = &rJoySpeed.march;
 8002fac:	4b68      	ldr	r3, [pc, #416]	; (8003150 <stabilizationInit+0x560>)
 8002fae:	4a76      	ldr	r2, [pc, #472]	; (8003188 <stabilizationInit+0x598>)
 8002fb0:	659a      	str	r2, [r3, #88]	; 0x58
    rStabState[STAB_MARCH].speedSignal = &rStabState[STAB_MARCH].posDerivative;
 8002fb2:	4b67      	ldr	r3, [pc, #412]	; (8003150 <stabilizationInit+0x560>)
 8002fb4:	4a75      	ldr	r2, [pc, #468]	; (800318c <stabilizationInit+0x59c>)
 8002fb6:	65da      	str	r2, [r3, #92]	; 0x5c
    rStabState[STAB_MARCH].posSignal = &rJoySpeed.march;
 8002fb8:	4b65      	ldr	r3, [pc, #404]	; (8003150 <stabilizationInit+0x560>)
 8002fba:	4a73      	ldr	r2, [pc, #460]	; (8003188 <stabilizationInit+0x598>)
 8002fbc:	661a      	str	r2, [r3, #96]	; 0x60
    rStabConstants[STAB_MARCH].joyIntegration = false;
 8002fbe:	4b68      	ldr	r3, [pc, #416]	; (8003160 <stabilizationInit+0x570>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49


    //upload coef
	//rStabConstants[STAB_YAW].enable = true;

	rStabConstants[STAB_YAW].pJoyUnitCast = 1;
 8002fc6:	4b66      	ldr	r3, [pc, #408]	; (8003160 <stabilizationInit+0x570>)
 8002fc8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002fcc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	rStabConstants[STAB_YAW].pSpeedDyn = 0;
 8002fd0:	4b63      	ldr	r3, [pc, #396]	; (8003160 <stabilizationInit+0x570>)
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	rStabConstants[STAB_YAW].pErrGain = 70;
 8002fda:	4b61      	ldr	r3, [pc, #388]	; (8003160 <stabilizationInit+0x570>)
 8002fdc:	4a6c      	ldr	r2, [pc, #432]	; (8003190 <stabilizationInit+0x5a0>)
 8002fde:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].T = 0;
 8002fe2:	4b5f      	ldr	r3, [pc, #380]	; (8003160 <stabilizationInit+0x570>)
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].K = 120;
 8002fec:	4b5c      	ldr	r3, [pc, #368]	; (8003160 <stabilizationInit+0x570>)
 8002fee:	4a69      	ldr	r2, [pc, #420]	; (8003194 <stabilizationInit+0x5a4>)
 8002ff0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].T = 0;
 8002ff4:	4b5a      	ldr	r3, [pc, #360]	; (8003160 <stabilizationInit+0x570>)
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].K = 1;
 8002ffe:	4b58      	ldr	r3, [pc, #352]	; (8003160 <stabilizationInit+0x570>)
 8003000:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003004:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	rStabConstants[STAB_YAW].pid.pGain = 25;
 8003008:	4b55      	ldr	r3, [pc, #340]	; (8003160 <stabilizationInit+0x570>)
 800300a:	4a63      	ldr	r2, [pc, #396]	; (8003198 <stabilizationInit+0x5a8>)
 800300c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	rStabConstants[STAB_YAW].pid.iGain = 0;
 8003010:	4b53      	ldr	r3, [pc, #332]	; (8003160 <stabilizationInit+0x570>)
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	rStabConstants[STAB_YAW].pid.iMax = 3000;
 800301a:	4b51      	ldr	r3, [pc, #324]	; (8003160 <stabilizationInit+0x570>)
 800301c:	4a5f      	ldr	r2, [pc, #380]	; (800319c <stabilizationInit+0x5ac>)
 800301e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	rStabConstants[STAB_YAW].pid.iMin = -3000;
 8003022:	4b4f      	ldr	r3, [pc, #316]	; (8003160 <stabilizationInit+0x570>)
 8003024:	4a5e      	ldr	r2, [pc, #376]	; (80031a0 <stabilizationInit+0x5b0>)
 8003026:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	rStabConstants[STAB_YAW].pThrustersMax = 20000;
 800302a:	4b4d      	ldr	r3, [pc, #308]	; (8003160 <stabilizationInit+0x570>)
 800302c:	4a5d      	ldr	r2, [pc, #372]	; (80031a4 <stabilizationInit+0x5b4>)
 800302e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	rStabConstants[STAB_YAW].pThrustersMin = -20000;
 8003032:	4b4b      	ldr	r3, [pc, #300]	; (8003160 <stabilizationInit+0x570>)
 8003034:	4a5c      	ldr	r2, [pc, #368]	; (80031a8 <stabilizationInit+0x5b8>)
 8003036:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	rStabConstants[STAB_YAW].sOutSummatorMax = 32000;
 800303a:	4b49      	ldr	r3, [pc, #292]	; (8003160 <stabilizationInit+0x570>)
 800303c:	4a5b      	ldr	r2, [pc, #364]	; (80031ac <stabilizationInit+0x5bc>)
 800303e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	rStabConstants[STAB_YAW].sOutSummatorMin = -32000;
 8003042:	4b47      	ldr	r3, [pc, #284]	; (8003160 <stabilizationInit+0x570>)
 8003044:	4a5a      	ldr	r2, [pc, #360]	; (80031b0 <stabilizationInit+0x5c0>)
 8003046:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    rStabConstants[STAB_YAW].joyIntegration = false;
 800304a:	4b45      	ldr	r3, [pc, #276]	; (8003160 <stabilizationInit+0x570>)
 800304c:	2200      	movs	r2, #0
 800304e:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9

	//rStabConstants[STAB_DEPTH].enable = true;

	rStabConstants[STAB_DEPTH].pJoyUnitCast = -1;
 8003052:	4b43      	ldr	r3, [pc, #268]	; (8003160 <stabilizationInit+0x570>)
 8003054:	4a57      	ldr	r2, [pc, #348]	; (80031b4 <stabilizationInit+0x5c4>)
 8003056:	605a      	str	r2, [r3, #4]
	rStabConstants[STAB_DEPTH].pSpeedDyn = 1;
 8003058:	4b41      	ldr	r3, [pc, #260]	; (8003160 <stabilizationInit+0x570>)
 800305a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800305e:	609a      	str	r2, [r3, #8]
	rStabConstants[STAB_DEPTH].pErrGain = 1;
 8003060:	4b3f      	ldr	r3, [pc, #252]	; (8003160 <stabilizationInit+0x570>)
 8003062:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003066:	60da      	str	r2, [r3, #12]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].T = 80;
 8003068:	4b3d      	ldr	r3, [pc, #244]	; (8003160 <stabilizationInit+0x570>)
 800306a:	4a53      	ldr	r2, [pc, #332]	; (80031b8 <stabilizationInit+0x5c8>)
 800306c:	619a      	str	r2, [r3, #24]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].K = -15;
 800306e:	4b3c      	ldr	r3, [pc, #240]	; (8003160 <stabilizationInit+0x570>)
 8003070:	4a52      	ldr	r2, [pc, #328]	; (80031bc <stabilizationInit+0x5cc>)
 8003072:	61da      	str	r2, [r3, #28]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].T = 0;
 8003074:	4b3a      	ldr	r3, [pc, #232]	; (8003160 <stabilizationInit+0x570>)
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	611a      	str	r2, [r3, #16]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].K = -1;
 800307c:	4b38      	ldr	r3, [pc, #224]	; (8003160 <stabilizationInit+0x570>)
 800307e:	4a4d      	ldr	r2, [pc, #308]	; (80031b4 <stabilizationInit+0x5c4>)
 8003080:	615a      	str	r2, [r3, #20]
	rStabConstants[STAB_DEPTH].pid.pGain = 30;
 8003082:	4b37      	ldr	r3, [pc, #220]	; (8003160 <stabilizationInit+0x570>)
 8003084:	4a4e      	ldr	r2, [pc, #312]	; (80031c0 <stabilizationInit+0x5d0>)
 8003086:	629a      	str	r2, [r3, #40]	; 0x28
	rStabConstants[STAB_DEPTH].pid.iGain = 5;
 8003088:	4b35      	ldr	r3, [pc, #212]	; (8003160 <stabilizationInit+0x570>)
 800308a:	4a4e      	ldr	r2, [pc, #312]	; (80031c4 <stabilizationInit+0x5d4>)
 800308c:	62da      	str	r2, [r3, #44]	; 0x2c
	rStabConstants[STAB_DEPTH].pid.iMax = 40;
 800308e:	4b34      	ldr	r3, [pc, #208]	; (8003160 <stabilizationInit+0x570>)
 8003090:	4a4d      	ldr	r2, [pc, #308]	; (80031c8 <stabilizationInit+0x5d8>)
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
	rStabConstants[STAB_DEPTH].pid.iMin = -40;
 8003094:	4b32      	ldr	r3, [pc, #200]	; (8003160 <stabilizationInit+0x570>)
 8003096:	4a4d      	ldr	r2, [pc, #308]	; (80031cc <stabilizationInit+0x5dc>)
 8003098:	635a      	str	r2, [r3, #52]	; 0x34
	rStabConstants[STAB_DEPTH].pThrustersMax = 32000;
 800309a:	4b31      	ldr	r3, [pc, #196]	; (8003160 <stabilizationInit+0x570>)
 800309c:	4a43      	ldr	r2, [pc, #268]	; (80031ac <stabilizationInit+0x5bc>)
 800309e:	63da      	str	r2, [r3, #60]	; 0x3c
	rStabConstants[STAB_DEPTH].pThrustersMin = -32000;
 80030a0:	4b2f      	ldr	r3, [pc, #188]	; (8003160 <stabilizationInit+0x570>)
 80030a2:	4a43      	ldr	r2, [pc, #268]	; (80031b0 <stabilizationInit+0x5c0>)
 80030a4:	639a      	str	r2, [r3, #56]	; 0x38
	rStabConstants[STAB_DEPTH].sOutSummatorMax = 32000;
 80030a6:	4b2e      	ldr	r3, [pc, #184]	; (8003160 <stabilizationInit+0x570>)
 80030a8:	4a40      	ldr	r2, [pc, #256]	; (80031ac <stabilizationInit+0x5bc>)
 80030aa:	641a      	str	r2, [r3, #64]	; 0x40
	rStabConstants[STAB_DEPTH].sOutSummatorMin = -32000;
 80030ac:	4b2c      	ldr	r3, [pc, #176]	; (8003160 <stabilizationInit+0x570>)
 80030ae:	4a40      	ldr	r2, [pc, #256]	; (80031b0 <stabilizationInit+0x5c0>)
 80030b0:	645a      	str	r2, [r3, #68]	; 0x44
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 80030b2:	4b2b      	ldr	r3, [pc, #172]	; (8003160 <stabilizationInit+0x570>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	705a      	strb	r2, [r3, #1]

	rStabConstants[STAB_PITCH].pJoyUnitCast = -1;
 80030b8:	4b29      	ldr	r3, [pc, #164]	; (8003160 <stabilizationInit+0x570>)
 80030ba:	4a3e      	ldr	r2, [pc, #248]	; (80031b4 <stabilizationInit+0x5c4>)
 80030bc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	rStabConstants[STAB_PITCH].pSpeedDyn = 0;
 80030c0:	4b27      	ldr	r3, [pc, #156]	; (8003160 <stabilizationInit+0x570>)
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	rStabConstants[STAB_PITCH].pErrGain = 1;
 80030ca:	4b25      	ldr	r3, [pc, #148]	; (8003160 <stabilizationInit+0x570>)
 80030cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80030d0:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	rStabConstants[STAB_PITCH].aFilter[SPEED_FILTER].T = 0;
 80030d4:	4b22      	ldr	r3, [pc, #136]	; (8003160 <stabilizationInit+0x570>)
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rStabConstants[STAB_PITCH].aFilter[SPEED_FILTER].K = 1;
 80030de:	4b20      	ldr	r3, [pc, #128]	; (8003160 <stabilizationInit+0x570>)
 80030e0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80030e4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	rStabConstants[STAB_PITCH].aFilter[POS_FILTER].T = 0;
 80030e8:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <stabilizationInit+0x570>)
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	rStabConstants[STAB_PITCH].aFilter[POS_FILTER].K = -100;
 80030f2:	4b1b      	ldr	r3, [pc, #108]	; (8003160 <stabilizationInit+0x570>)
 80030f4:	4a36      	ldr	r2, [pc, #216]	; (80031d0 <stabilizationInit+0x5e0>)
 80030f6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
	rStabConstants[STAB_PITCH].pid.pGain = 25;
 80030fa:	4b19      	ldr	r3, [pc, #100]	; (8003160 <stabilizationInit+0x570>)
 80030fc:	4a26      	ldr	r2, [pc, #152]	; (8003198 <stabilizationInit+0x5a8>)
 80030fe:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	rStabConstants[STAB_PITCH].pid.iGain = 60;
 8003102:	4b17      	ldr	r3, [pc, #92]	; (8003160 <stabilizationInit+0x570>)
 8003104:	4a33      	ldr	r2, [pc, #204]	; (80031d4 <stabilizationInit+0x5e4>)
 8003106:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	rStabConstants[STAB_PITCH].pid.iMax = 50;
 800310a:	4b15      	ldr	r3, [pc, #84]	; (8003160 <stabilizationInit+0x570>)
 800310c:	4a32      	ldr	r2, [pc, #200]	; (80031d8 <stabilizationInit+0x5e8>)
 800310e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	rStabConstants[STAB_PITCH].pid.iMin = -50;
 8003112:	4b13      	ldr	r3, [pc, #76]	; (8003160 <stabilizationInit+0x570>)
 8003114:	4a31      	ldr	r2, [pc, #196]	; (80031dc <stabilizationInit+0x5ec>)
 8003116:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	rStabConstants[STAB_PITCH].pThrustersMax = 32000;
 800311a:	4b11      	ldr	r3, [pc, #68]	; (8003160 <stabilizationInit+0x570>)
 800311c:	4a23      	ldr	r2, [pc, #140]	; (80031ac <stabilizationInit+0x5bc>)
 800311e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	rStabConstants[STAB_PITCH].pThrustersMin = -32000;
 8003122:	4b0f      	ldr	r3, [pc, #60]	; (8003160 <stabilizationInit+0x570>)
 8003124:	4a22      	ldr	r2, [pc, #136]	; (80031b0 <stabilizationInit+0x5c0>)
 8003126:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	rStabConstants[STAB_PITCH].sOutSummatorMax = 32000;
 800312a:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <stabilizationInit+0x570>)
 800312c:	4a1f      	ldr	r2, [pc, #124]	; (80031ac <stabilizationInit+0x5bc>)
 800312e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	rStabConstants[STAB_PITCH].sOutSummatorMin = -32000;
 8003132:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <stabilizationInit+0x570>)
 8003134:	4a1e      	ldr	r2, [pc, #120]	; (80031b0 <stabilizationInit+0x5c0>)
 8003136:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    rStabConstants[STAB_PITCH].joyIntegration = false;
 800313a:	4b09      	ldr	r3, [pc, #36]	; (8003160 <stabilizationInit+0x570>)
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169


}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	200017d0 	.word	0x200017d0
 8003154:	200015dc 	.word	0x200015dc
 8003158:	20001580 	.word	0x20001580
 800315c:	20001564 	.word	0x20001564
 8003160:	20001620 	.word	0x20001620
 8003164:	200015e0 	.word	0x200015e0
 8003168:	20001584 	.word	0x20001584
 800316c:	20001568 	.word	0x20001568
 8003170:	200015d4 	.word	0x200015d4
 8003174:	200015bc 	.word	0x200015bc
 8003178:	200015b4 	.word	0x200015b4
 800317c:	200015d0 	.word	0x200015d0
 8003180:	20001890 	.word	0x20001890
 8003184:	2000149c 	.word	0x2000149c
 8003188:	200015cc 	.word	0x200015cc
 800318c:	20001838 	.word	0x20001838
 8003190:	428c0000 	.word	0x428c0000
 8003194:	42f00000 	.word	0x42f00000
 8003198:	41c80000 	.word	0x41c80000
 800319c:	453b8000 	.word	0x453b8000
 80031a0:	c53b8000 	.word	0xc53b8000
 80031a4:	469c4000 	.word	0x469c4000
 80031a8:	c69c4000 	.word	0xc69c4000
 80031ac:	46fa0000 	.word	0x46fa0000
 80031b0:	c6fa0000 	.word	0xc6fa0000
 80031b4:	bf800000 	.word	0xbf800000
 80031b8:	42a00000 	.word	0x42a00000
 80031bc:	c1700000 	.word	0xc1700000
 80031c0:	41f00000 	.word	0x41f00000
 80031c4:	40a00000 	.word	0x40a00000
 80031c8:	42200000 	.word	0x42200000
 80031cc:	c2200000 	.word	0xc2200000
 80031d0:	c2c80000 	.word	0xc2c80000
 80031d4:	42700000 	.word	0x42700000
 80031d8:	42480000 	.word	0x42480000
 80031dc:	c2480000 	.word	0xc2480000

080031e0 <stabilizationStart>:

void stabilizationStart(uint8_t contour)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	71fb      	strb	r3, [r7, #7]
	rStabConstants[contour].enable = true;
 80031ea:	79fa      	ldrb	r2, [r7, #7]
 80031ec:	4970      	ldr	r1, [pc, #448]	; (80033b0 <stabilizationStart+0x1d0>)
 80031ee:	4613      	mov	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4413      	add	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	440b      	add	r3, r1
 80031f8:	2201      	movs	r2, #1
 80031fa:	701a      	strb	r2, [r3, #0]

	rStabState[contour].oldSpeed = *rStabState[contour].speedSignal;
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	4a6d      	ldr	r2, [pc, #436]	; (80033b4 <stabilizationStart+0x1d4>)
 8003200:	2158      	movs	r1, #88	; 0x58
 8003202:	fb01 f303 	mul.w	r3, r1, r3
 8003206:	4413      	add	r3, r2
 8003208:	3304      	adds	r3, #4
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	4968      	ldr	r1, [pc, #416]	; (80033b4 <stabilizationStart+0x1d4>)
 8003212:	2058      	movs	r0, #88	; 0x58
 8003214:	fb00 f303 	mul.w	r3, r0, r3
 8003218:	440b      	add	r3, r1
 800321a:	3314      	adds	r3, #20
 800321c:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPos = *rStabState[contour].posSignal;
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	4a64      	ldr	r2, [pc, #400]	; (80033b4 <stabilizationStart+0x1d4>)
 8003222:	2158      	movs	r1, #88	; 0x58
 8003224:	fb01 f303 	mul.w	r3, r1, r3
 8003228:	4413      	add	r3, r2
 800322a:	3308      	adds	r3, #8
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	4960      	ldr	r1, [pc, #384]	; (80033b4 <stabilizationStart+0x1d4>)
 8003234:	2058      	movs	r0, #88	; 0x58
 8003236:	fb00 f303 	mul.w	r3, r0, r3
 800323a:	440b      	add	r3, r1
 800323c:	3318      	adds	r3, #24
 800323e:	601a      	str	r2, [r3, #0]
	rStabState[contour].posDerivative = 0;
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	4a5c      	ldr	r2, [pc, #368]	; (80033b4 <stabilizationStart+0x1d4>)
 8003244:	2158      	movs	r1, #88	; 0x58
 8003246:	fb01 f303 	mul.w	r3, r1, r3
 800324a:	4413      	add	r3, r2
 800324c:	3310      	adds	r3, #16
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
	//rStabState[contour].speedIntegral = 0;
if(contour==STAB_YAW)
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	2b03      	cmp	r3, #3
 8003258:	d103      	bne.n	8003262 <stabilizationStart+0x82>
{
	rSensors.yaw =0;
 800325a:	4b57      	ldr	r3, [pc, #348]	; (80033b8 <stabilizationStart+0x1d8>)
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	609a      	str	r2, [r3, #8]
}
	rStabState[contour].joyUnitCasted = 0;
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	4a53      	ldr	r2, [pc, #332]	; (80033b4 <stabilizationStart+0x1d4>)
 8003266:	2158      	movs	r1, #88	; 0x58
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	4413      	add	r3, r2
 800326e:	331c      	adds	r3, #28
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
	rStabState[contour].joy_iValue = *rStabState[contour].posSignal;
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	4a4e      	ldr	r2, [pc, #312]	; (80033b4 <stabilizationStart+0x1d4>)
 800327a:	2158      	movs	r1, #88	; 0x58
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	4413      	add	r3, r2
 8003282:	3308      	adds	r3, #8
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	6812      	ldr	r2, [r2, #0]
 800328a:	494a      	ldr	r1, [pc, #296]	; (80033b4 <stabilizationStart+0x1d4>)
 800328c:	2058      	movs	r0, #88	; 0x58
 800328e:	fb00 f303 	mul.w	r3, r0, r3
 8003292:	440b      	add	r3, r1
 8003294:	3320      	adds	r3, #32
 8003296:	601a      	str	r2, [r3, #0]
	rStabState[contour].posError = 0;
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	4a46      	ldr	r2, [pc, #280]	; (80033b4 <stabilizationStart+0x1d4>)
 800329c:	2158      	movs	r1, #88	; 0x58
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	3324      	adds	r3, #36	; 0x24
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedError = 0;
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	4a41      	ldr	r2, [pc, #260]	; (80033b4 <stabilizationStart+0x1d4>)
 80032b0:	2158      	movs	r1, #88	; 0x58
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	3328      	adds	r3, #40	; 0x28
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
	rStabState[contour].dynSummator = 0;
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	4a3c      	ldr	r2, [pc, #240]	; (80033b4 <stabilizationStart+0x1d4>)
 80032c4:	2158      	movs	r1, #88	; 0x58
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	332c      	adds	r3, #44	; 0x2c
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
	rStabState[contour].pidValue = 0;
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	4a37      	ldr	r2, [pc, #220]	; (80033b4 <stabilizationStart+0x1d4>)
 80032d8:	2158      	movs	r1, #88	; 0x58
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	4413      	add	r3, r2
 80032e0:	3330      	adds	r3, #48	; 0x30
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
	rStabState[contour].pid_iValue = 0;
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	4a32      	ldr	r2, [pc, #200]	; (80033b4 <stabilizationStart+0x1d4>)
 80032ec:	2158      	movs	r1, #88	; 0x58
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	4413      	add	r3, r2
 80032f4:	3334      	adds	r3, #52	; 0x34
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
	rStabState[contour].posErrorAmp = 0;
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	4a2d      	ldr	r2, [pc, #180]	; (80033b4 <stabilizationStart+0x1d4>)
 8003300:	2158      	movs	r1, #88	; 0x58
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	4413      	add	r3, r2
 8003308:	3338      	adds	r3, #56	; 0x38
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedFiltered = 0;
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	4a28      	ldr	r2, [pc, #160]	; (80033b4 <stabilizationStart+0x1d4>)
 8003314:	2158      	movs	r1, #88	; 0x58
 8003316:	fb01 f303 	mul.w	r3, r1, r3
 800331a:	4413      	add	r3, r2
 800331c:	333c      	adds	r3, #60	; 0x3c
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
	rStabState[contour].posFiltered = 0;
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	4a23      	ldr	r2, [pc, #140]	; (80033b4 <stabilizationStart+0x1d4>)
 8003328:	2158      	movs	r1, #88	; 0x58
 800332a:	fb01 f303 	mul.w	r3, r1, r3
 800332e:	4413      	add	r3, r2
 8003330:	3340      	adds	r3, #64	; 0x40
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPosFiltered = 0;
 8003338:	79fb      	ldrb	r3, [r7, #7]
 800333a:	4a1e      	ldr	r2, [pc, #120]	; (80033b4 <stabilizationStart+0x1d4>)
 800333c:	2158      	movs	r1, #88	; 0x58
 800333e:	fb01 f303 	mul.w	r3, r1, r3
 8003342:	4413      	add	r3, r2
 8003344:	3344      	adds	r3, #68	; 0x44
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldSpeedError = 0;
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	4a19      	ldr	r2, [pc, #100]	; (80033b4 <stabilizationStart+0x1d4>)
 8003350:	2158      	movs	r1, #88	; 0x58
 8003352:	fb01 f303 	mul.w	r3, r1, r3
 8003356:	4413      	add	r3, r2
 8003358:	3348      	adds	r3, #72	; 0x48
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
	rStabState[contour].thrustersFiltered = 0;
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	4a14      	ldr	r2, [pc, #80]	; (80033b4 <stabilizationStart+0x1d4>)
 8003364:	2158      	movs	r1, #88	; 0x58
 8003366:	fb01 f303 	mul.w	r3, r1, r3
 800336a:	4413      	add	r3, r2
 800336c:	334c      	adds	r3, #76	; 0x4c
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
	rStabState[contour].outputSignal = 0;
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	4a0f      	ldr	r2, [pc, #60]	; (80033b4 <stabilizationStart+0x1d4>)
 8003378:	2158      	movs	r1, #88	; 0x58
 800337a:	fb01 f303 	mul.w	r3, r1, r3
 800337e:	4413      	add	r3, r2
 8003380:	3350      	adds	r3, #80	; 0x50
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
	rStabState[contour].LastTick = xTaskGetTickCount();
 8003388:	f008 f93c 	bl	800b604 <xTaskGetTickCount>
 800338c:	ee07 0a90 	vmov	s15, r0
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003396:	4a07      	ldr	r2, [pc, #28]	; (80033b4 <stabilizationStart+0x1d4>)
 8003398:	2158      	movs	r1, #88	; 0x58
 800339a:	fb01 f303 	mul.w	r3, r1, r3
 800339e:	4413      	add	r3, r2
 80033a0:	3354      	adds	r3, #84	; 0x54
 80033a2:	edc3 7a00 	vstr	s15, [r3]
}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20001620 	.word	0x20001620
 80033b4:	200017d0 	.word	0x200017d0
 80033b8:	20001560 	.word	0x20001560

080033bc <stabilizationUpdate>:

void stabilizationUpdate(uint8_t contour)
{
 80033bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033c0:	b086      	sub	sp, #24
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	4603      	mov	r3, r0
 80033c6:	71fb      	strb	r3, [r7, #7]
	struct robotStabilizationConstants_s *constants = &rStabConstants[contour];
 80033c8:	79fa      	ldrb	r2, [r7, #7]
 80033ca:	4613      	mov	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4413      	add	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4aa6      	ldr	r2, [pc, #664]	; (800366c <stabilizationUpdate+0x2b0>)
 80033d4:	4413      	add	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
	struct robotStabilizationState_s *state = &rStabState[contour];
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	2258      	movs	r2, #88	; 0x58
 80033dc:	fb02 f303 	mul.w	r3, r2, r3
 80033e0:	4aa3      	ldr	r2, [pc, #652]	; (8003670 <stabilizationUpdate+0x2b4>)
 80033e2:	4413      	add	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
	float diffTime = fromTickToMs(xTaskGetTickCount() - state->LastTick) / 1000.0f;
 80033e6:	f008 f90d 	bl	800b604 <xTaskGetTickCount>
 80033ea:	ee07 0a90 	vmov	s15, r0
 80033ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80033f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003400:	ee17 0a90 	vmov	r0, s15
 8003404:	f7fd fd34 	bl	8000e70 <fromTickToMs>
 8003408:	eeb0 7a40 	vmov.f32	s14, s0
 800340c:	eddf 6a99 	vldr	s13, [pc, #612]	; 8003674 <stabilizationUpdate+0x2b8>
 8003410:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003414:	edc7 7a03 	vstr	s15, [r7, #12]
	state->LastTick = xTaskGetTickCount();
 8003418:	f008 f8f4 	bl	800b604 <xTaskGetTickCount>
 800341c:	ee07 0a90 	vmov	s15, r0
 8003420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	// Speed feedback filtering
	struct AperiodicFilter *filter = &constants->aFilter[SPEED_FILTER];
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	3318      	adds	r3, #24
 800342e:	60bb      	str	r3, [r7, #8]

	if(filter->T != 0) {
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	edd3 7a00 	vldr	s15, [r3]
 8003436:	eef5 7a40 	vcmp.f32	s15, #0.0
 800343a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343e:	d02b      	beq.n	8003498 <stabilizationUpdate+0xdc>
		//state->speedFiltered = state->speedFiltered*exp(-diffTime/filter->T/1e5) + state->oldSpeed*filter->K*80*(1-exp(-diffTime/filter->T/1e5));
		state->speedFiltered = state->oldSpeed + diffTime * (1/filter->T*100) * (*state->speedSignal * filter->K*70 - state->oldSpeed);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	ed93 7a05 	vldr	s14, [r3, #20]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	edd3 6a00 	vldr	s13, [r3]
 800344c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003450:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003454:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8003684 <stabilizationUpdate+0x2c8>
 8003458:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800345c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003460:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	ed93 6a00 	vldr	s12, [r3]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003472:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003476:	ed9f 6a80 	vldr	s12, [pc, #512]	; 8003678 <stabilizationUpdate+0x2bc>
 800347a:	ee27 6a86 	vmul.f32	s12, s15, s12
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	edd3 7a05 	vldr	s15, [r3, #20]
 8003484:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003488:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800348c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8003496:	e023      	b.n	80034e0 <stabilizationUpdate+0x124>
	}
	else {
		if(contour==STAB_PITCH)
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	2b05      	cmp	r3, #5
 800349c:	d110      	bne.n	80034c0 <stabilizationUpdate+0x104>
		{
			state->speedFiltered = *state->speedSignal*filter->K*250;
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	ed93 7a00 	vldr	s14, [r3]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80034ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b0:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800367c <stabilizationUpdate+0x2c0>
 80034b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 80034be:	e00f      	b.n	80034e0 <stabilizationUpdate+0x124>
		}
		else
		state->speedFiltered = *state->speedSignal*filter->K*10;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	ed93 7a00 	vldr	s14, [r3]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80034ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80034d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	//state->oldSpeed = *state->speedSignal;
	state->oldSpeed = state->speedFiltered;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	615a      	str	r2, [r3, #20]

	// Position feedback filtering
	filter = &constants->aFilter[POS_FILTER];
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	3310      	adds	r3, #16
 80034ec:	60bb      	str	r3, [r7, #8]
	if(filter->T != 0) {
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	edd3 7a00 	vldr	s15, [r3]
 80034f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80034f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fc:	d061      	beq.n	80035c2 <stabilizationUpdate+0x206>
		state->posFiltered = state->posFiltered*exp(-diffTime/filter->T) + state->oldPos*filter->K*(1-exp(-diffTime/filter->T));
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	4618      	mov	r0, r3
 8003504:	f7fc ffc8 	bl	8000498 <__aeabi_f2d>
 8003508:	4604      	mov	r4, r0
 800350a:	460d      	mov	r5, r1
 800350c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003510:	eeb1 7a67 	vneg.f32	s14, s15
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	edd3 7a00 	vldr	s15, [r3]
 800351a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800351e:	ee16 0a90 	vmov	r0, s13
 8003522:	f7fc ffb9 	bl	8000498 <__aeabi_f2d>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	ec43 2b10 	vmov	d0, r2, r3
 800352e:	f009 fd77 	bl	800d020 <exp>
 8003532:	ec53 2b10 	vmov	r2, r3, d0
 8003536:	4620      	mov	r0, r4
 8003538:	4629      	mov	r1, r5
 800353a:	f7fd f805 	bl	8000548 <__aeabi_dmul>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	4690      	mov	r8, r2
 8003544:	4699      	mov	r9, r3
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	ed93 7a06 	vldr	s14, [r3, #24]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003556:	ee17 0a90 	vmov	r0, s15
 800355a:	f7fc ff9d 	bl	8000498 <__aeabi_f2d>
 800355e:	4604      	mov	r4, r0
 8003560:	460d      	mov	r5, r1
 8003562:	edd7 7a03 	vldr	s15, [r7, #12]
 8003566:	eeb1 7a67 	vneg.f32	s14, s15
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	edd3 7a00 	vldr	s15, [r3]
 8003570:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003574:	ee16 0a90 	vmov	r0, s13
 8003578:	f7fc ff8e 	bl	8000498 <__aeabi_f2d>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	ec43 2b10 	vmov	d0, r2, r3
 8003584:	f009 fd4c 	bl	800d020 <exp>
 8003588:	ec53 2b10 	vmov	r2, r3, d0
 800358c:	f04f 0000 	mov.w	r0, #0
 8003590:	493b      	ldr	r1, [pc, #236]	; (8003680 <stabilizationUpdate+0x2c4>)
 8003592:	f7fc fe21 	bl	80001d8 <__aeabi_dsub>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4620      	mov	r0, r4
 800359c:	4629      	mov	r1, r5
 800359e:	f7fc ffd3 	bl	8000548 <__aeabi_dmul>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4640      	mov	r0, r8
 80035a8:	4649      	mov	r1, r9
 80035aa:	f7fc fe17 	bl	80001dc <__adddf3>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4610      	mov	r0, r2
 80035b4:	4619      	mov	r1, r3
 80035b6:	f7fd fa89 	bl	8000acc <__aeabi_d2f>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	641a      	str	r2, [r3, #64]	; 0x40
 80035c0:	e00b      	b.n	80035da <stabilizationUpdate+0x21e>
	}
	else {
		state->posFiltered = *state->posSignal*filter->K;
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	ed93 7a00 	vldr	s14, [r3]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80035d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	}
	state->oldPos = *state->posSignal;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	619a      	str	r2, [r3, #24]

	// Speed integration calculation
	state->speedIntegral += (*state->speedSignal * diffTime);
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	edd3 6a00 	vldr	s13, [r3]
 80035f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80035f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	edc3 7a03 	vstr	s15, [r3, #12]

    // Position derivative calculation
    state->posDerivative = (state->posFiltered - state->oldPosFiltered) / diffTime;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003610:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003614:	ed97 7a03 	vldr	s14, [r7, #12]
 8003618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	edc3 7a04 	vstr	s15, [r3, #16]
    state->oldPosFiltered = state->posFiltered;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	645a      	str	r2, [r3, #68]	; 0x44

	// Input signal unit cast
	state->joyUnitCasted = constants->pJoyUnitCast * *state->inputSignal;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	edd3 7a00 	vldr	s15, [r3]
 8003638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	edc3 7a07 	vstr	s15, [r3, #28]

    // Casted input signal integration
	if(constants->joyIntegration) {
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	785b      	ldrb	r3, [r3, #1]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d01e      	beq.n	8003688 <stabilizationUpdate+0x2cc>
		state->joy_iValue += state->joyUnitCasted * diffTime;
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	ed93 7a08 	vldr	s14, [r3, #32]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	edd3 6a07 	vldr	s13, [r3, #28]
 8003656:	edd7 7a03 	vldr	s15, [r7, #12]
 800365a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800365e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	edc3 7a08 	vstr	s15, [r3, #32]
 8003668:	e012      	b.n	8003690 <stabilizationUpdate+0x2d4>
 800366a:	bf00      	nop
 800366c:	20001620 	.word	0x20001620
 8003670:	200017d0 	.word	0x200017d0
 8003674:	447a0000 	.word	0x447a0000
 8003678:	428c0000 	.word	0x428c0000
 800367c:	437a0000 	.word	0x437a0000
 8003680:	3ff00000 	.word	0x3ff00000
 8003684:	42c80000 	.word	0x42c80000
	}
	else {
		state->joy_iValue = state->joyUnitCasted;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	621a      	str	r2, [r3, #32]
	}

    // Position feedback summator
    state->posError = state->joy_iValue - state->posFiltered;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	ed93 7a08 	vldr	s14, [r3, #32]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800369c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Feedback amplifiers
    state->posErrorAmp = state->posError * constants->pErrGain;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80036b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    // PI integration
    state->pid_iValue += (state->posErrorAmp * diffTime) * constants->pid.iGain;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80036c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80036cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80036d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // PI integration saturation
    if(state->pid_iValue > constants->pid.iMax*100) {
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80036f0:	ed5f 6a1c 	vldr	s13, [pc, #-112]	; 8003684 <stabilizationUpdate+0x2c8>
 80036f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80036f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003700:	dd0a      	ble.n	8003718 <stabilizationUpdate+0x35c>
    	state->pid_iValue = constants->pid.iMax*100;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003708:	ed1f 7a22 	vldr	s14, [pc, #-136]	; 8003684 <stabilizationUpdate+0x2c8>
 800370c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8003716:	e018      	b.n	800374a <stabilizationUpdate+0x38e>
    }
    else if(state->pid_iValue < constants->pid.iMin*100) {
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003724:	ed5f 6a29 	vldr	s13, [pc, #-164]	; 8003684 <stabilizationUpdate+0x2c8>
 8003728:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800372c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003734:	d509      	bpl.n	800374a <stabilizationUpdate+0x38e>
    	state->pid_iValue = constants->pid.iMin*100;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800373c:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 8003684 <stabilizationUpdate+0x2c8>
 8003740:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    }

    // PI summator
    state->pidValue =  state->pid_iValue + (state->posErrorAmp * constants->pid.pGain);
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800375c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    // Dynamic summator
    state->dynSummator = state->pidValue + *state->inputSignal * constants->pSpeedDyn;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	edd3 6a00 	vldr	s13, [r3]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	edd3 7a02 	vldr	s15, [r3, #8]
 800377e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    // Speed feedback
    state->speedError = state->dynSummator - state->speedFiltered;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    // Out filtering
    filter = &constants->aFilter[THRUSTERS_FILTER];
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	3320      	adds	r3, #32
 80037a6:	60bb      	str	r3, [r7, #8]
    if(filter->T != 0) {
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	edd3 7a00 	vldr	s15, [r3]
 80037ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80037b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b6:	d061      	beq.n	800387c <stabilizationUpdate+0x4c0>
    	state->thrustersFiltered = state->thrustersFiltered*exp(-diffTime/filter->T) + state->oldSpeedError*filter->K*(1-exp(-diffTime/filter->T));
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fc fe6b 	bl	8000498 <__aeabi_f2d>
 80037c2:	4604      	mov	r4, r0
 80037c4:	460d      	mov	r5, r1
 80037c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80037ca:	eeb1 7a67 	vneg.f32	s14, s15
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	edd3 7a00 	vldr	s15, [r3]
 80037d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80037d8:	ee16 0a90 	vmov	r0, s13
 80037dc:	f7fc fe5c 	bl	8000498 <__aeabi_f2d>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	ec43 2b10 	vmov	d0, r2, r3
 80037e8:	f009 fc1a 	bl	800d020 <exp>
 80037ec:	ec53 2b10 	vmov	r2, r3, d0
 80037f0:	4620      	mov	r0, r4
 80037f2:	4629      	mov	r1, r5
 80037f4:	f7fc fea8 	bl	8000548 <__aeabi_dmul>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4690      	mov	r8, r2
 80037fe:	4699      	mov	r9, r3
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	edd3 7a01 	vldr	s15, [r3, #4]
 800380c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003810:	ee17 0a90 	vmov	r0, s15
 8003814:	f7fc fe40 	bl	8000498 <__aeabi_f2d>
 8003818:	4604      	mov	r4, r0
 800381a:	460d      	mov	r5, r1
 800381c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003820:	eeb1 7a67 	vneg.f32	s14, s15
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	edd3 7a00 	vldr	s15, [r3]
 800382a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800382e:	ee16 0a90 	vmov	r0, s13
 8003832:	f7fc fe31 	bl	8000498 <__aeabi_f2d>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	ec43 2b10 	vmov	d0, r2, r3
 800383e:	f009 fbef 	bl	800d020 <exp>
 8003842:	ec53 2b10 	vmov	r2, r3, d0
 8003846:	f04f 0000 	mov.w	r0, #0
 800384a:	492a      	ldr	r1, [pc, #168]	; (80038f4 <stabilizationUpdate+0x538>)
 800384c:	f7fc fcc4 	bl	80001d8 <__aeabi_dsub>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4620      	mov	r0, r4
 8003856:	4629      	mov	r1, r5
 8003858:	f7fc fe76 	bl	8000548 <__aeabi_dmul>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4640      	mov	r0, r8
 8003862:	4649      	mov	r1, r9
 8003864:	f7fc fcba 	bl	80001dc <__adddf3>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4610      	mov	r0, r2
 800386e:	4619      	mov	r1, r3
 8003870:	f7fd f92c 	bl	8000acc <__aeabi_d2f>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	64da      	str	r2, [r3, #76]	; 0x4c
 800387a:	e00a      	b.n	8003892 <stabilizationUpdate+0x4d6>
    }
    else {
    	state->thrustersFiltered = state->speedError*filter->K;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	edd3 7a01 	vldr	s15, [r3, #4]
 8003888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    }
    state->oldSpeedError = state->speedError;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	649a      	str	r2, [r3, #72]	; 0x48

    if(state->thrustersFiltered > constants->pThrustersMax) {
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80038a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ae:	dd04      	ble.n	80038ba <stabilizationUpdate+0x4fe>
    	state->thrustersFiltered = constants->pThrustersMax;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80038b8:	e00e      	b.n	80038d8 <stabilizationUpdate+0x51c>
    }
    else if(state->thrustersFiltered < constants->pThrustersMin) {
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80038c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ce:	d503      	bpl.n	80038d8 <stabilizationUpdate+0x51c>
    	state->thrustersFiltered = constants->pThrustersMin;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    state->outputSignal = -1*state->speedError;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80038de:	eef1 7a67 	vneg.f32	s15, s15
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 80038e8:	bf00      	nop
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038f2:	bf00      	nop
 80038f4:	3ff00000 	.word	0x3ff00000

080038f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	607b      	str	r3, [r7, #4]
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <HAL_MspInit+0x54>)
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	4a11      	ldr	r2, [pc, #68]	; (800394c <HAL_MspInit+0x54>)
 8003908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800390c:	6453      	str	r3, [r2, #68]	; 0x44
 800390e:	4b0f      	ldr	r3, [pc, #60]	; (800394c <HAL_MspInit+0x54>)
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003916:	607b      	str	r3, [r7, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	603b      	str	r3, [r7, #0]
 800391e:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_MspInit+0x54>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	4a0a      	ldr	r2, [pc, #40]	; (800394c <HAL_MspInit+0x54>)
 8003924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003928:	6413      	str	r3, [r2, #64]	; 0x40
 800392a:	4b08      	ldr	r3, [pc, #32]	; (800394c <HAL_MspInit+0x54>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003936:	2200      	movs	r2, #0
 8003938:	210f      	movs	r1, #15
 800393a:	f06f 0001 	mvn.w	r0, #1
 800393e:	f001 f97d 	bl	8004c3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40023800 	.word	0x40023800

08003950 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08e      	sub	sp, #56	; 0x38
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003960:	2300      	movs	r3, #0
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	4b34      	ldr	r3, [pc, #208]	; (8003a38 <HAL_InitTick+0xe8>)
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	4a33      	ldr	r2, [pc, #204]	; (8003a38 <HAL_InitTick+0xe8>)
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	6413      	str	r3, [r2, #64]	; 0x40
 8003970:	4b31      	ldr	r3, [pc, #196]	; (8003a38 <HAL_InitTick+0xe8>)
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800397c:	f107 0210 	add.w	r2, r7, #16
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	4611      	mov	r1, r2
 8003986:	4618      	mov	r0, r3
 8003988:	f004 fb88 	bl	800809c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003992:	2b00      	cmp	r3, #0
 8003994:	d103      	bne.n	800399e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003996:	f004 fb59 	bl	800804c <HAL_RCC_GetPCLK1Freq>
 800399a:	6378      	str	r0, [r7, #52]	; 0x34
 800399c:	e004      	b.n	80039a8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800399e:	f004 fb55 	bl	800804c <HAL_RCC_GetPCLK1Freq>
 80039a2:	4603      	mov	r3, r0
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80039a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039aa:	4a24      	ldr	r2, [pc, #144]	; (8003a3c <HAL_InitTick+0xec>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	0c9b      	lsrs	r3, r3, #18
 80039b2:	3b01      	subs	r3, #1
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80039b6:	4b22      	ldr	r3, [pc, #136]	; (8003a40 <HAL_InitTick+0xf0>)
 80039b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80039be:	4b20      	ldr	r3, [pc, #128]	; (8003a40 <HAL_InitTick+0xf0>)
 80039c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80039c4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80039c6:	4a1e      	ldr	r2, [pc, #120]	; (8003a40 <HAL_InitTick+0xf0>)
 80039c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ca:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80039cc:	4b1c      	ldr	r3, [pc, #112]	; (8003a40 <HAL_InitTick+0xf0>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039d2:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <HAL_InitTick+0xf0>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039d8:	4b19      	ldr	r3, [pc, #100]	; (8003a40 <HAL_InitTick+0xf0>)
 80039da:	2200      	movs	r2, #0
 80039dc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80039de:	4818      	ldr	r0, [pc, #96]	; (8003a40 <HAL_InitTick+0xf0>)
 80039e0:	f004 fb8e 	bl	8008100 <HAL_TIM_Base_Init>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80039ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d11b      	bne.n	8003a2a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80039f2:	4813      	ldr	r0, [pc, #76]	; (8003a40 <HAL_InitTick+0xf0>)
 80039f4:	f004 fbd4 	bl	80081a0 <HAL_TIM_Base_Start_IT>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80039fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d111      	bne.n	8003a2a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a06:	201c      	movs	r0, #28
 8003a08:	f001 f934 	bl	8004c74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b0f      	cmp	r3, #15
 8003a10:	d808      	bhi.n	8003a24 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8003a12:	2200      	movs	r2, #0
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	201c      	movs	r0, #28
 8003a18:	f001 f910 	bl	8004c3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a1c:	4a09      	ldr	r2, [pc, #36]	; (8003a44 <HAL_InitTick+0xf4>)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	e002      	b.n	8003a2a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003a2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3738      	adds	r7, #56	; 0x38
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	431bde83 	.word	0x431bde83
 8003a40:	20001b78 	.word	0x20001b78
 8003a44:	20000038 	.word	0x20000038

08003a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a4c:	e7fe      	b.n	8003a4c <NMI_Handler+0x4>

08003a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a52:	e7fe      	b.n	8003a52 <HardFault_Handler+0x4>

08003a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a58:	e7fe      	b.n	8003a58 <MemManage_Handler+0x4>

08003a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a5e:	e7fe      	b.n	8003a5e <BusFault_Handler+0x4>

08003a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a64:	e7fe      	b.n	8003a64 <UsageFault_Handler+0x4>

08003a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a66:	b480      	push	{r7}
 8003a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a6a:	bf00      	nop
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003a78:	4802      	ldr	r0, [pc, #8]	; (8003a84 <DMA1_Stream1_IRQHandler+0x10>)
 8003a7a:	f001 faa1 	bl	8004fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20001f58 	.word	0x20001f58

08003a88 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003a8c:	4802      	ldr	r0, [pc, #8]	; (8003a98 <DMA1_Stream2_IRQHandler+0x10>)
 8003a8e:	f001 fa97 	bl	8004fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20001d18 	.word	0x20001d18

08003a9c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003aa0:	4802      	ldr	r0, [pc, #8]	; (8003aac <DMA1_Stream3_IRQHandler+0x10>)
 8003aa2:	f001 fa8d 	bl	8004fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20001fb8 	.word	0x20001fb8

08003ab0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003ab4:	4802      	ldr	r0, [pc, #8]	; (8003ac0 <DMA1_Stream4_IRQHandler+0x10>)
 8003ab6:	f001 fa83 	bl	8004fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20001d78 	.word	0x20001d78

08003ac4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003ac8:	4802      	ldr	r0, [pc, #8]	; (8003ad4 <DMA1_Stream5_IRQHandler+0x10>)
 8003aca:	f001 fa79 	bl	8004fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20001e98 	.word	0x20001e98

08003ad8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003adc:	4802      	ldr	r0, [pc, #8]	; (8003ae8 <DMA1_Stream6_IRQHandler+0x10>)
 8003ade:	f001 fa6f 	bl	8004fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20001ef8 	.word	0x20001ef8

08003aec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003af0:	4802      	ldr	r0, [pc, #8]	; (8003afc <TIM2_IRQHandler+0x10>)
 8003af2:	f004 fbc5 	bl	8008280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20001b78 	.word	0x20001b78

08003b00 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003b04:	4802      	ldr	r0, [pc, #8]	; (8003b10 <I2C1_EV_IRQHandler+0x10>)
 8003b06:	f002 fabf 	bl	8006088 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20001b24 	.word	0x20001b24

08003b14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b18:	4802      	ldr	r0, [pc, #8]	; (8003b24 <USART1_IRQHandler+0x10>)
 8003b1a:	f005 f8a7 	bl	8008c6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	20001c4c 	.word	0x20001c4c

08003b28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b2c:	4802      	ldr	r0, [pc, #8]	; (8003b38 <USART2_IRQHandler+0x10>)
 8003b2e:	f005 f89d 	bl	8008c6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20001c90 	.word	0x20001c90

08003b3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003b40:	4802      	ldr	r0, [pc, #8]	; (8003b4c <USART3_IRQHandler+0x10>)
 8003b42:	f005 f893 	bl	8008c6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20001cd4 	.word	0x20001cd4

08003b50 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003b54:	4802      	ldr	r0, [pc, #8]	; (8003b60 <UART4_IRQHandler+0x10>)
 8003b56:	f005 f889 	bl	8008c6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20001c08 	.word	0x20001c08

08003b64 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003b68:	4802      	ldr	r0, [pc, #8]	; (8003b74 <DMA2_Stream2_IRQHandler+0x10>)
 8003b6a:	f001 fa29 	bl	8004fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20001dd8 	.word	0x20001dd8

08003b78 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003b7c:	4802      	ldr	r0, [pc, #8]	; (8003b88 <DMA2_Stream7_IRQHandler+0x10>)
 8003b7e:	f001 fa1f 	bl	8004fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20001e38 	.word	0x20001e38

08003b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b90:	4b06      	ldr	r3, [pc, #24]	; (8003bac <SystemInit+0x20>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b96:	4a05      	ldr	r2, [pc, #20]	; (8003bac <SystemInit+0x20>)
 8003b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ba0:	bf00      	nop
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	e000ed00 	.word	0xe000ed00

08003bb0 <thrustersInit>:
void addPitchToSumm(float *velocity);

uint8_t resizeFloatToUint8(float input);

void thrustersInit()
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
	rThrusters[Lag1st].address = 1;
 8003bb6:	4b52      	ldr	r3, [pc, #328]	; (8003d00 <thrustersInit+0x150>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rThrusters[Lag2nd].address = 7;
 8003bbe:	4b50      	ldr	r3, [pc, #320]	; (8003d00 <thrustersInit+0x150>)
 8003bc0:	2207      	movs	r2, #7
 8003bc2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

	rThrusters[MarshLEFT].address = 3;
 8003bc6:	4b4e      	ldr	r3, [pc, #312]	; (8003d00 <thrustersInit+0x150>)
 8003bc8:	2203      	movs	r2, #3
 8003bca:	701a      	strb	r2, [r3, #0]
	rThrusters[MarshRIGHT].address = 2;
 8003bcc:	4b4c      	ldr	r3, [pc, #304]	; (8003d00 <thrustersInit+0x150>)
 8003bce:	2202      	movs	r2, #2
 8003bd0:	761a      	strb	r2, [r3, #24]

	rThrusters[MarshDown].address = 5;//xer
 8003bd2:	4b4b      	ldr	r3, [pc, #300]	; (8003d00 <thrustersInit+0x150>)
 8003bd4:	2205      	movs	r2, #5
 8003bd6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

	rThrusters[VertBACK].address 	= 6;
 8003bda:	4b49      	ldr	r3, [pc, #292]	; (8003d00 <thrustersInit+0x150>)
 8003bdc:	2206      	movs	r2, #6
 8003bde:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

	rThrusters[VertLEFT].address 	= 8;
 8003be2:	4b47      	ldr	r3, [pc, #284]	; (8003d00 <thrustersInit+0x150>)
 8003be4:	2208      	movs	r2, #8
 8003be6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	rThrusters[VertRIGHT].address 	= 4;
 8003bea:	4b45      	ldr	r3, [pc, #276]	; (8003d00 <thrustersInit+0x150>)
 8003bec:	2204      	movs	r2, #4
 8003bee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48


	rThrusters[Lag1st].inverse = true;
 8003bf2:	4b43      	ldr	r3, [pc, #268]	; (8003d00 <thrustersInit+0x150>)
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rThrusters[Lag2nd].inverse = true;
 8003bfa:	4b41      	ldr	r3, [pc, #260]	; (8003d00 <thrustersInit+0x150>)
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	rThrusters[MarshLEFT].inverse = true;
 8003c02:	4b3f      	ldr	r3, [pc, #252]	; (8003d00 <thrustersInit+0x150>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	759a      	strb	r2, [r3, #22]
	rThrusters[MarshRIGHT].inverse = true;
 8003c08:	4b3d      	ldr	r3, [pc, #244]	; (8003d00 <thrustersInit+0x150>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	rThrusters[MarshDown].inverse = true;
 8003c10:	4b3b      	ldr	r3, [pc, #236]	; (8003d00 <thrustersInit+0x150>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe

	rThrusters[VertBACK].inverse 	= false;
 8003c18:	4b39      	ldr	r3, [pc, #228]	; (8003d00 <thrustersInit+0x150>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	rThrusters[VertLEFT].inverse 	= false;
 8003c20:	4b37      	ldr	r3, [pc, #220]	; (8003d00 <thrustersInit+0x150>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rThrusters[VertRIGHT].inverse 	= true;
 8003c28:	4b35      	ldr	r3, [pc, #212]	; (8003d00 <thrustersInit+0x150>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

	for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8003c30:	2300      	movs	r3, #0
 8003c32:	71fb      	strb	r3, [r7, #7]
 8003c34:	e034      	b.n	8003ca0 <thrustersInit+0xf0>
		rThrusters[i].desiredSpeed = 0;
 8003c36:	79fa      	ldrb	r2, [r7, #7]
 8003c38:	4931      	ldr	r1, [pc, #196]	; (8003d00 <thrustersInit+0x150>)
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	4413      	add	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	440b      	add	r3, r1
 8003c44:	3302      	adds	r3, #2
 8003c46:	2200      	movs	r2, #0
 8003c48:	701a      	strb	r2, [r3, #0]
		rThrusters[i].kForward = 0.4;
 8003c4a:	79fa      	ldrb	r2, [r7, #7]
 8003c4c:	492c      	ldr	r1, [pc, #176]	; (8003d00 <thrustersInit+0x150>)
 8003c4e:	4613      	mov	r3, r2
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	4413      	add	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	440b      	add	r3, r1
 8003c58:	330c      	adds	r3, #12
 8003c5a:	4a2a      	ldr	r2, [pc, #168]	; (8003d04 <thrustersInit+0x154>)
 8003c5c:	601a      	str	r2, [r3, #0]
		rThrusters[i].kBackward = 0.4;
 8003c5e:	79fa      	ldrb	r2, [r7, #7]
 8003c60:	4927      	ldr	r1, [pc, #156]	; (8003d00 <thrustersInit+0x150>)
 8003c62:	4613      	mov	r3, r2
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	4413      	add	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	440b      	add	r3, r1
 8003c6c:	3310      	adds	r3, #16
 8003c6e:	4a25      	ldr	r2, [pc, #148]	; (8003d04 <thrustersInit+0x154>)
 8003c70:	601a      	str	r2, [r3, #0]
		rThrusters[i].sForward = 127;
 8003c72:	79fa      	ldrb	r2, [r7, #7]
 8003c74:	4922      	ldr	r1, [pc, #136]	; (8003d00 <thrustersInit+0x150>)
 8003c76:	4613      	mov	r3, r2
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	4413      	add	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	440b      	add	r3, r1
 8003c80:	3314      	adds	r3, #20
 8003c82:	227f      	movs	r2, #127	; 0x7f
 8003c84:	701a      	strb	r2, [r3, #0]
		rThrusters[i].sBackward = 127;
 8003c86:	79fa      	ldrb	r2, [r7, #7]
 8003c88:	491d      	ldr	r1, [pc, #116]	; (8003d00 <thrustersInit+0x150>)
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	4413      	add	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	440b      	add	r3, r1
 8003c94:	3315      	adds	r3, #21
 8003c96:	227f      	movs	r2, #127	; 0x7f
 8003c98:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	71fb      	strb	r3, [r7, #7]
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	2b07      	cmp	r3, #7
 8003ca4:	d9c7      	bls.n	8003c36 <thrustersInit+0x86>
	}

	rThrusters[VertBACK].kForward = 0.4;
 8003ca6:	4b16      	ldr	r3, [pc, #88]	; (8003d00 <thrustersInit+0x150>)
 8003ca8:	4a16      	ldr	r2, [pc, #88]	; (8003d04 <thrustersInit+0x154>)
 8003caa:	66da      	str	r2, [r3, #108]	; 0x6c
	rThrusters[VertBACK].kBackward = 0.4;
 8003cac:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <thrustersInit+0x150>)
 8003cae:	4a15      	ldr	r2, [pc, #84]	; (8003d04 <thrustersInit+0x154>)
 8003cb0:	671a      	str	r2, [r3, #112]	; 0x70
	rThrusters[VertLEFT].kForward = 0.7;
 8003cb2:	4b13      	ldr	r3, [pc, #76]	; (8003d00 <thrustersInit+0x150>)
 8003cb4:	4a14      	ldr	r2, [pc, #80]	; (8003d08 <thrustersInit+0x158>)
 8003cb6:	63da      	str	r2, [r3, #60]	; 0x3c
	rThrusters[VertLEFT].kBackward = 0.7;
 8003cb8:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <thrustersInit+0x150>)
 8003cba:	4a13      	ldr	r2, [pc, #76]	; (8003d08 <thrustersInit+0x158>)
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
	rThrusters[VertRIGHT].kForward = 0.7;
 8003cbe:	4b10      	ldr	r3, [pc, #64]	; (8003d00 <thrustersInit+0x150>)
 8003cc0:	4a11      	ldr	r2, [pc, #68]	; (8003d08 <thrustersInit+0x158>)
 8003cc2:	655a      	str	r2, [r3, #84]	; 0x54
	rThrusters[VertRIGHT].kBackward = 0.7;
 8003cc4:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <thrustersInit+0x150>)
 8003cc6:	4a10      	ldr	r2, [pc, #64]	; (8003d08 <thrustersInit+0x158>)
 8003cc8:	659a      	str	r2, [r3, #88]	; 0x58

	rThrusters[MarshLEFT].kForward = 0.9;
 8003cca:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <thrustersInit+0x150>)
 8003ccc:	4a0f      	ldr	r2, [pc, #60]	; (8003d0c <thrustersInit+0x15c>)
 8003cce:	60da      	str	r2, [r3, #12]
	rThrusters[MarshLEFT].kBackward = 0.9;
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <thrustersInit+0x150>)
 8003cd2:	4a0e      	ldr	r2, [pc, #56]	; (8003d0c <thrustersInit+0x15c>)
 8003cd4:	611a      	str	r2, [r3, #16]
	rThrusters[MarshRIGHT].kForward = 0.9;
 8003cd6:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <thrustersInit+0x150>)
 8003cd8:	4a0c      	ldr	r2, [pc, #48]	; (8003d0c <thrustersInit+0x15c>)
 8003cda:	625a      	str	r2, [r3, #36]	; 0x24
	rThrusters[MarshRIGHT].kBackward = 0.9;
 8003cdc:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <thrustersInit+0x150>)
 8003cde:	4a0b      	ldr	r2, [pc, #44]	; (8003d0c <thrustersInit+0x15c>)
 8003ce0:	629a      	str	r2, [r3, #40]	; 0x28

	rThrusters[MarshDown].kForward = 0.7;
 8003ce2:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <thrustersInit+0x150>)
 8003ce4:	4a08      	ldr	r2, [pc, #32]	; (8003d08 <thrustersInit+0x158>)
 8003ce6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	rThrusters[MarshDown].kBackward = 0.7;
 8003cea:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <thrustersInit+0x150>)
 8003cec:	4a06      	ldr	r2, [pc, #24]	; (8003d08 <thrustersInit+0x158>)
 8003cee:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	200014a0 	.word	0x200014a0
 8003d04:	3ecccccd 	.word	0x3ecccccd
 8003d08:	3f333333 	.word	0x3f333333
 8003d0c:	3f666666 	.word	0x3f666666

08003d10 <fillThrustersRequest>:
	rThrusters[VertRIGHT].desiredSpeed = 0;
	rThrusters[MarshDown].desiredSpeed = 0;
}

void fillThrustersRequest(uint8_t *buf, uint8_t thruster)
{
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	b089      	sub	sp, #36	; 0x24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	70fb      	strb	r3, [r7, #3]
    struct thrustersRequest_s res;

    res.AA = 0xAA;
 8003d1c:	23aa      	movs	r3, #170	; 0xaa
 8003d1e:	733b      	strb	r3, [r7, #12]
    res.type = 0x01;
 8003d20:	2301      	movs	r3, #1
 8003d22:	737b      	strb	r3, [r7, #13]
    res.address =0xAF;
 8003d24:	23af      	movs	r3, #175	; 0xaf
 8003d26:	73bb      	strb	r3, [r7, #14]
    for(int i =0;i<8;i++){
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61fb      	str	r3, [r7, #28]
 8003d2c:	e05b      	b.n	8003de6 <fillThrustersRequest+0xd6>


    int16_t velocity = rThrusters[i].desiredSpeed;
 8003d2e:	4938      	ldr	r1, [pc, #224]	; (8003e10 <fillThrustersRequest+0x100>)
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	4613      	mov	r3, r2
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	4413      	add	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	440b      	add	r3, r1
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	f993 3000 	ldrsb.w	r3, [r3]
 8003d42:	837b      	strh	r3, [r7, #26]

    // Inverting
    if(rThrusters[i].inverse) {
 8003d44:	4932      	ldr	r1, [pc, #200]	; (8003e10 <fillThrustersRequest+0x100>)
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	4413      	add	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	440b      	add	r3, r1
 8003d52:	3316      	adds	r3, #22
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <fillThrustersRequest+0x52>
    	velocity *= -1;
 8003d5a:	8b7b      	ldrh	r3, [r7, #26]
 8003d5c:	425b      	negs	r3, r3
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	837b      	strh	r3, [r7, #26]
    }

    // Multiplier constants
    if(velocity > 0) {
 8003d62:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	dd17      	ble.n	8003d9a <fillThrustersRequest+0x8a>
    	velocity = (int16_t) ( (float) (velocity) * rThrusters[i].kForward);
 8003d6a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003d6e:	ee07 3a90 	vmov	s15, r3
 8003d72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d76:	4926      	ldr	r1, [pc, #152]	; (8003e10 <fillThrustersRequest+0x100>)
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	4413      	add	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	440b      	add	r3, r1
 8003d84:	330c      	adds	r3, #12
 8003d86:	edd3 7a00 	vldr	s15, [r3]
 8003d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d92:	ee17 3a90 	vmov	r3, s15
 8003d96:	837b      	strh	r3, [r7, #26]
 8003d98:	e01a      	b.n	8003dd0 <fillThrustersRequest+0xc0>
    }
    else if(velocity < 0) {
 8003d9a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	da16      	bge.n	8003dd0 <fillThrustersRequest+0xc0>
    	velocity = (int16_t) ((float) (velocity) * rThrusters[i].kBackward);
 8003da2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003da6:	ee07 3a90 	vmov	s15, r3
 8003daa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dae:	4918      	ldr	r1, [pc, #96]	; (8003e10 <fillThrustersRequest+0x100>)
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	4613      	mov	r3, r2
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	4413      	add	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	440b      	add	r3, r1
 8003dbc:	3310      	adds	r3, #16
 8003dbe:	edd3 7a00 	vldr	s15, [r3]
 8003dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dca:	ee17 3a90 	vmov	r3, s15
 8003dce:	837b      	strh	r3, [r7, #26]
//    }
//    else if(velocity < -rThrusters[thruster].sBackward) {
//    	velocity = -rThrusters[thruster].sBackward;
//    }

    res.velocity[i] = velocity;
 8003dd0:	8b7b      	ldrh	r3, [r7, #26]
 8003dd2:	b259      	sxtb	r1, r3
 8003dd4:	f107 020f 	add.w	r2, r7, #15
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	4413      	add	r3, r2
 8003ddc:	460a      	mov	r2, r1
 8003dde:	701a      	strb	r2, [r3, #0]
    for(int i =0;i<8;i++){
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	3301      	adds	r3, #1
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	2b07      	cmp	r3, #7
 8003dea:	dda0      	ble.n	8003d2e <fillThrustersRequest+0x1e>
    }

    memcpy((void*)buf, (void*)&res, THRUSTERS_REQUEST_LENGTH);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	461c      	mov	r4, r3
 8003df0:	f107 030c 	add.w	r3, r7, #12
 8003df4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003df6:	6020      	str	r0, [r4, #0]
 8003df8:	6061      	str	r1, [r4, #4]
 8003dfa:	60a2      	str	r2, [r4, #8]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	7323      	strb	r3, [r4, #12]

    AddChecksumm8bVma(buf, THRUSTERS_REQUEST_LENGTH);
 8003e00:	210d      	movs	r1, #13
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fd f8f5 	bl	8000ff2 <AddChecksumm8bVma>
}
 8003e08:	bf00      	nop
 8003e0a:	3724      	adds	r7, #36	; 0x24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd90      	pop	{r4, r7, pc}
 8003e10:	200014a0 	.word	0x200014a0

08003e14 <fillThrustersResponse>:

void fillThrustersResponse(uint8_t *buf, uint8_t thruster)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	70fb      	strb	r3, [r7, #3]
	//TODO errors parsing! and what is all this new stuff means
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 8003e20:	2109      	movs	r1, #9
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fd f8b8 	bl	8000f98 <IsChecksumm8bCorrectVma>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d01f      	beq.n	8003e6e <fillThrustersResponse+0x5a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d01b      	beq.n	8003e6e <fillThrustersResponse+0x5a>
    	struct thrustersResponse_s res;
    	memcpy((void*)&res, (void*)buf, THRUSTERS_RESPONSE_LENGTH);
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	f107 030c 	add.w	r3, r7, #12
 8003e3c:	6810      	ldr	r0, [r2, #0]
 8003e3e:	6851      	ldr	r1, [r2, #4]
 8003e40:	c303      	stmia	r3!, {r0, r1}
 8003e42:	7a12      	ldrb	r2, [r2, #8]
 8003e44:	701a      	strb	r2, [r3, #0]

        rThrusters[thruster].current = res.current;
 8003e46:	78fa      	ldrb	r2, [r7, #3]
 8003e48:	8a38      	ldrh	r0, [r7, #16]
 8003e4a:	490e      	ldr	r1, [pc, #56]	; (8003e84 <fillThrustersResponse+0x70>)
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	4413      	add	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	440b      	add	r3, r1
 8003e56:	3304      	adds	r3, #4
 8003e58:	4602      	mov	r2, r0
 8003e5a:	801a      	strh	r2, [r3, #0]

        ++uartBus[THRUSTERS_UART].successRxCounter;
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <fillThrustersResponse+0x74>)
 8003e5e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003e62:	3301      	adds	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <fillThrustersResponse+0x74>)
 8003e68:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 8003e6c:	e005      	b.n	8003e7a <fillThrustersResponse+0x66>
    }
    else {
    	++uartBus[THRUSTERS_UART].brokenRxCounter;
 8003e6e:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <fillThrustersResponse+0x74>)
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	3301      	adds	r3, #1
 8003e74:	4a04      	ldr	r2, [pc, #16]	; (8003e88 <fillThrustersResponse+0x74>)
 8003e76:	6453      	str	r3, [r2, #68]	; 0x44
    }
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	200014a0 	.word	0x200014a0
 8003e88:	200000c4 	.word	0x200000c4

08003e8c <formThrustVectors>:

void formThrustVectors()
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08a      	sub	sp, #40	; 0x28
 8003e90:	af00      	add	r7, sp, #0
	float velocity[THRUSTERS_NUMBER];
	for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8003e92:	2300      	movs	r3, #0
 8003e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e98:	e00d      	b.n	8003eb6 <formThrustVectors+0x2a>
		velocity[i] = 0;
 8003e9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	3328      	adds	r3, #40	; 0x28
 8003ea2:	443b      	add	r3, r7
 8003ea4:	3b24      	subs	r3, #36	; 0x24
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8003eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003eba:	2b07      	cmp	r3, #7
 8003ebc:	d9ed      	bls.n	8003e9a <formThrustVectors+0xe>
	}
	// March thrusters1
	addMarchToSumm(velocity);
 8003ebe:	1d3b      	adds	r3, r7, #4
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 f841 	bl	8003f48 <addMarchToSumm>
	// Lag Thrusters
	addYawToSumm(velocity);
 8003ec6:	1d3b      	adds	r3, r7, #4
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 f8ed 	bl	80040a8 <addYawToSumm>
	addLagToSumm(velocity);
 8003ece:	1d3b      	adds	r3, r7, #4
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 f87b 	bl	8003fcc <addLagToSumm>
	// Two vertical thrusters
	addDepthToSumm(velocity);
 8003ed6:	1d3b      	adds	r3, r7, #4
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 f8af 	bl	800403c <addDepthToSumm>
	addRollToSumm(velocity);
 8003ede:	1d3b      	adds	r3, r7, #4
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 f919 	bl	8004118 <addRollToSumm>
	// One vertical corrective thruster
	addPitchToSumm(velocity);
 8003ee6:	1d3b      	adds	r3, r7, #4
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 f941 	bl	8004170 <addPitchToSumm>

	for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i) {
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003ef4:	e01d      	b.n	8003f32 <formThrustVectors+0xa6>
		rThrusters[i].desiredSpeed = resizeFloatToUint8(velocity[i]);
 8003ef6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	3328      	adds	r3, #40	; 0x28
 8003efe:	443b      	add	r3, r7
 8003f00:	3b24      	subs	r3, #36	; 0x24
 8003f02:	edd3 7a00 	vldr	s15, [r3]
 8003f06:	eeb0 0a67 	vmov.f32	s0, s15
 8003f0a:	f000 f9a3 	bl	8004254 <resizeFloatToUint8>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003f14:	b258      	sxtb	r0, r3
 8003f16:	490b      	ldr	r1, [pc, #44]	; (8003f44 <formThrustVectors+0xb8>)
 8003f18:	4613      	mov	r3, r2
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	4413      	add	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	440b      	add	r3, r1
 8003f22:	3302      	adds	r3, #2
 8003f24:	4602      	mov	r2, r0
 8003f26:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i) {
 8003f28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003f32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f36:	2b07      	cmp	r3, #7
 8003f38:	d9dd      	bls.n	8003ef6 <formThrustVectors+0x6a>
	}
}
 8003f3a:	bf00      	nop
 8003f3c:	bf00      	nop
 8003f3e:	3728      	adds	r7, #40	; 0x28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	200014a0 	.word	0x200014a0

08003f48 <addMarchToSumm>:

void addMarchToSumm(float *velocity)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
	float value = 0;
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_MARCH].enable) {
 8003f56:	4b1a      	ldr	r3, [pc, #104]	; (8003fc0 <addMarchToSumm+0x78>)
 8003f58:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d004      	beq.n	8003f6a <addMarchToSumm+0x22>
		value = rStabState[STAB_MARCH].outputSignal;
 8003f60:	4b18      	ldr	r3, [pc, #96]	; (8003fc4 <addMarchToSumm+0x7c>)
 8003f62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	e002      	b.n	8003f70 <addMarchToSumm+0x28>
	}
	else {
		value = rJoySpeed.march;
 8003f6a:	4b17      	ldr	r3, [pc, #92]	; (8003fc8 <addMarchToSumm+0x80>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60fb      	str	r3, [r7, #12]
	}
	// March contour summ
	velocity[MarshLEFT] += value;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	ed93 7a00 	vldr	s14, [r3]
 8003f76:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	edc3 7a00 	vstr	s15, [r3]
	velocity[MarshRIGHT] += value;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3304      	adds	r3, #4
 8003f88:	ed93 7a00 	vldr	s14, [r3]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f98:	edc3 7a00 	vstr	s15, [r3]
	velocity[MarshDown] += value;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	331c      	adds	r3, #28
 8003fa0:	ed93 7a00 	vldr	s14, [r3]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	331c      	adds	r3, #28
 8003fa8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fb0:	edc3 7a00 	vstr	s15, [r3]
//		}
//		else if(velocity[i] < rStabConstants[STAB_MARCH].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_MARCH].sOutSummatorMin;
//		}
//	}
}
 8003fb4:	bf00      	nop
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	20001620 	.word	0x20001620
 8003fc4:	200017d0 	.word	0x200017d0
 8003fc8:	200015cc 	.word	0x200015cc

08003fcc <addLagToSumm>:

void addLagToSumm(float *velocity)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
	float value = 0;
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_LAG].enable) {
 8003fda:	4b15      	ldr	r3, [pc, #84]	; (8004030 <addLagToSumm+0x64>)
 8003fdc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d004      	beq.n	8003fee <addLagToSumm+0x22>
		value = rStabState[STAB_LAG].outputSignal;
 8003fe4:	4b13      	ldr	r3, [pc, #76]	; (8004034 <addLagToSumm+0x68>)
 8003fe6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	e002      	b.n	8003ff4 <addLagToSumm+0x28>
	}
	else {
		value = rJoySpeed.lag;
 8003fee:	4b12      	ldr	r3, [pc, #72]	; (8004038 <addLagToSumm+0x6c>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	60fb      	str	r3, [r7, #12]
	}
	// Lag contour summ
	velocity[Lag1st] += value;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3314      	adds	r3, #20
 8003ff8:	ed93 7a00 	vldr	s14, [r3]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3314      	adds	r3, #20
 8004000:	edd7 7a03 	vldr	s15, [r7, #12]
 8004004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004008:	edc3 7a00 	vstr	s15, [r3]
	velocity[Lag2nd] += value;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3318      	adds	r3, #24
 8004010:	ed93 7a00 	vldr	s14, [r3]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3318      	adds	r3, #24
 8004018:	edd7 7a03 	vldr	s15, [r7, #12]
 800401c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004020:	edc3 7a00 	vstr	s15, [r3]
//		}
//		else if(velocity[i] < rStabConstants[STAB_LAG].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_LAG].sOutSummatorMin;
//		}
//	}
}
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	20001620 	.word	0x20001620
 8004034:	200017d0 	.word	0x200017d0
 8004038:	200015cc 	.word	0x200015cc

0800403c <addDepthToSumm>:

void addDepthToSumm(float *velocity)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
	float value = 0;
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_DEPTH].enable) {
 800404a:	4b14      	ldr	r3, [pc, #80]	; (800409c <addDepthToSumm+0x60>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <addDepthToSumm+0x1e>
		value = rStabState[STAB_DEPTH].outputSignal;
 8004052:	4b13      	ldr	r3, [pc, #76]	; (80040a0 <addDepthToSumm+0x64>)
 8004054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	e002      	b.n	8004060 <addDepthToSumm+0x24>
	}
	else {
		value = rJoySpeed.depth;
 800405a:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <addDepthToSumm+0x68>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	60fb      	str	r3, [r7, #12]
	}
	// Depth contour summ
	//velocity[VertBACK] -= value;
	velocity[VertLEFT] -= value;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3308      	adds	r3, #8
 8004064:	ed93 7a00 	vldr	s14, [r3]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3308      	adds	r3, #8
 800406c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004074:	edc3 7a00 	vstr	s15, [r3]
	velocity[VertRIGHT] -= value;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	330c      	adds	r3, #12
 800407c:	ed93 7a00 	vldr	s14, [r3]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	330c      	adds	r3, #12
 8004084:	edd7 7a03 	vldr	s15, [r7, #12]
 8004088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800408c:	edc3 7a00 	vstr	s15, [r3]
//		}
//		else if(velocity[i] < rStabConstants[STAB_DEPTH].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_DEPTH].sOutSummatorMin;
//		}
//	}
}
 8004090:	bf00      	nop
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	20001620 	.word	0x20001620
 80040a0:	200017d0 	.word	0x200017d0
 80040a4:	200015cc 	.word	0x200015cc

080040a8 <addYawToSumm>:

void addYawToSumm(float *velocity)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
	float value = 0;
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_YAW].enable) {
 80040b6:	4b15      	ldr	r3, [pc, #84]	; (800410c <addYawToSumm+0x64>)
 80040b8:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d004      	beq.n	80040ca <addYawToSumm+0x22>
		value = rStabState[STAB_YAW].outputSignal;
 80040c0:	4b13      	ldr	r3, [pc, #76]	; (8004110 <addYawToSumm+0x68>)
 80040c2:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	e002      	b.n	80040d0 <addYawToSumm+0x28>
	}
	else {
		value = rJoySpeed.yaw;
 80040ca:	4b12      	ldr	r3, [pc, #72]	; (8004114 <addYawToSumm+0x6c>)
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	60fb      	str	r3, [r7, #12]
	}
	// Yaw contour summ
//	velocity[MarshLEFT] += value;
//	velocity[MarshRIGHT] -= value;
	velocity[Lag1st] += value;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3314      	adds	r3, #20
 80040d4:	ed93 7a00 	vldr	s14, [r3]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3314      	adds	r3, #20
 80040dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80040e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040e4:	edc3 7a00 	vstr	s15, [r3]
	velocity[Lag2nd] -= value;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3318      	adds	r3, #24
 80040ec:	ed93 7a00 	vldr	s14, [r3]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3318      	adds	r3, #24
 80040f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80040f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040fc:	edc3 7a00 	vstr	s15, [r3]
//		}
//		else if(velocity[i] < rStabConstants[STAB_YAW].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_YAW].sOutSummatorMin;
//		}
//	}
}
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	20001620 	.word	0x20001620
 8004110:	200017d0 	.word	0x200017d0
 8004114:	200015cc 	.word	0x200015cc

08004118 <addRollToSumm>:

void addRollToSumm(float *velocity)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	float value = 0;
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_ROLL].enable) {
 8004126:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <addRollToSumm+0x4c>)
 8004128:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800412c:	2b00      	cmp	r3, #0
 800412e:	d004      	beq.n	800413a <addRollToSumm+0x22>
		value = rStabState[STAB_ROLL].outputSignal;
 8004130:	4b0d      	ldr	r3, [pc, #52]	; (8004168 <addRollToSumm+0x50>)
 8004132:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	e002      	b.n	8004140 <addRollToSumm+0x28>
	}
	else {
		value = rJoySpeed.roll;
 800413a:	4b0c      	ldr	r3, [pc, #48]	; (800416c <addRollToSumm+0x54>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	60fb      	str	r3, [r7, #12]
	}
	// Yaw contour summ
	velocity[VertBACK] += value;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3310      	adds	r3, #16
 8004144:	ed93 7a00 	vldr	s14, [r3]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3310      	adds	r3, #16
 800414c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004154:	edc3 7a00 	vstr	s15, [r3]
//		}
//		else if(velocity[i] < rStabConstants[STAB_ROLL].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_ROLL].sOutSummatorMin;
//		}
//	}
}
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	20001620 	.word	0x20001620
 8004168:	200017d0 	.word	0x200017d0
 800416c:	200015cc 	.word	0x200015cc

08004170 <addPitchToSumm>:

void addPitchToSumm(float *velocity)
{
 8004170:	b5b0      	push	{r4, r5, r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
	float value = 0;
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
	// Choosing source of the signal
	if(rStabConstants[STAB_PITCH].enable) {
 800417e:	4b32      	ldr	r3, [pc, #200]	; (8004248 <addPitchToSumm+0xd8>)
 8004180:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8004184:	2b00      	cmp	r3, #0
 8004186:	d004      	beq.n	8004192 <addPitchToSumm+0x22>
		value = rStabState[STAB_PITCH].outputSignal;
 8004188:	4b30      	ldr	r3, [pc, #192]	; (800424c <addPitchToSumm+0xdc>)
 800418a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e002      	b.n	8004198 <addPitchToSumm+0x28>
	}
	else {
		value = rJoySpeed.pitch;
 8004192:	4b2f      	ldr	r3, [pc, #188]	; (8004250 <addPitchToSumm+0xe0>)
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	60fb      	str	r3, [r7, #12]
	}
	velocity[VertBACK] += value;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3310      	adds	r3, #16
 800419c:	ed93 7a00 	vldr	s14, [r3]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3310      	adds	r3, #16
 80041a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80041a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ac:	edc3 7a00 	vstr	s15, [r3]

	velocity[VertLEFT] -= 0.4*value;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3308      	adds	r3, #8
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fc f96e 	bl	8000498 <__aeabi_f2d>
 80041bc:	4604      	mov	r4, r0
 80041be:	460d      	mov	r5, r1
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f7fc f969 	bl	8000498 <__aeabi_f2d>
 80041c6:	a31e      	add	r3, pc, #120	; (adr r3, 8004240 <addPitchToSumm+0xd0>)
 80041c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041cc:	f7fc f9bc 	bl	8000548 <__aeabi_dmul>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	4620      	mov	r0, r4
 80041d6:	4629      	mov	r1, r5
 80041d8:	f7fb fffe 	bl	80001d8 <__aeabi_dsub>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4610      	mov	r0, r2
 80041e2:	4619      	mov	r1, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f103 0408 	add.w	r4, r3, #8
 80041ea:	f7fc fc6f 	bl	8000acc <__aeabi_d2f>
 80041ee:	4603      	mov	r3, r0
 80041f0:	6023      	str	r3, [r4, #0]
	velocity[VertRIGHT] -= 0.4*value;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	330c      	adds	r3, #12
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fc f94d 	bl	8000498 <__aeabi_f2d>
 80041fe:	4604      	mov	r4, r0
 8004200:	460d      	mov	r5, r1
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f7fc f948 	bl	8000498 <__aeabi_f2d>
 8004208:	a30d      	add	r3, pc, #52	; (adr r3, 8004240 <addPitchToSumm+0xd0>)
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	f7fc f99b 	bl	8000548 <__aeabi_dmul>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	4620      	mov	r0, r4
 8004218:	4629      	mov	r1, r5
 800421a:	f7fb ffdd 	bl	80001d8 <__aeabi_dsub>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4610      	mov	r0, r2
 8004224:	4619      	mov	r1, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f103 040c 	add.w	r4, r3, #12
 800422c:	f7fc fc4e 	bl	8000acc <__aeabi_d2f>
 8004230:	4603      	mov	r3, r0
 8004232:	6023      	str	r3, [r4, #0]
//		}
//		else if(velocity[i] < rStabConstants[STAB_PITCH].sOutSummatorMin) {
//			velocity[i] = rStabConstants[STAB_PITCH].sOutSummatorMin;
//		}
//	}
}
 8004234:	bf00      	nop
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bdb0      	pop	{r4, r5, r7, pc}
 800423c:	f3af 8000 	nop.w
 8004240:	9999999a 	.word	0x9999999a
 8004244:	3fd99999 	.word	0x3fd99999
 8004248:	20001620 	.word	0x20001620
 800424c:	200017d0 	.word	0x200017d0
 8004250:	200015cc 	.word	0x200015cc

08004254 <resizeFloatToUint8>:

uint8_t resizeFloatToUint8(float input)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	ed87 0a01 	vstr	s0, [r7, #4]
	int32_t cast = (int32_t) input;
 800425e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004266:	ee17 3a90 	vmov	r3, s15
 800426a:	60fb      	str	r3, [r7, #12]
	cast = cast / 0xFF;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a0e      	ldr	r2, [pc, #56]	; (80042a8 <resizeFloatToUint8+0x54>)
 8004270:	fb82 1203 	smull	r1, r2, r2, r3
 8004274:	441a      	add	r2, r3
 8004276:	11d2      	asrs	r2, r2, #7
 8004278:	17db      	asrs	r3, r3, #31
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	60fb      	str	r3, [r7, #12]
	if (cast > 127) {
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b7f      	cmp	r3, #127	; 0x7f
 8004282:	dd02      	ble.n	800428a <resizeFloatToUint8+0x36>
		cast = 127;
 8004284:	237f      	movs	r3, #127	; 0x7f
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	e006      	b.n	8004298 <resizeFloatToUint8+0x44>
	}
	else if(cast < -127) {
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8004290:	da02      	bge.n	8004298 <resizeFloatToUint8+0x44>
		cast = -127;
 8004292:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8004296:	60fb      	str	r3, [r7, #12]
	}
	return (int8_t) cast;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	b2db      	uxtb	r3, r3
}
 800429c:	4618      	mov	r0, r3
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	80808081 	.word	0x80808081

080042ac <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042b2:	463b      	mov	r3, r7
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80042ba:	4b14      	ldr	r3, [pc, #80]	; (800430c <MX_TIM7_Init+0x60>)
 80042bc:	4a14      	ldr	r2, [pc, #80]	; (8004310 <MX_TIM7_Init+0x64>)
 80042be:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80042c0:	4b12      	ldr	r3, [pc, #72]	; (800430c <MX_TIM7_Init+0x60>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042c6:	4b11      	ldr	r3, [pc, #68]	; (800430c <MX_TIM7_Init+0x60>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 80042cc:	4b0f      	ldr	r3, [pc, #60]	; (800430c <MX_TIM7_Init+0x60>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042d2:	4b0e      	ldr	r3, [pc, #56]	; (800430c <MX_TIM7_Init+0x60>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80042d8:	480c      	ldr	r0, [pc, #48]	; (800430c <MX_TIM7_Init+0x60>)
 80042da:	f003 ff11 	bl	8008100 <HAL_TIM_Base_Init>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80042e4:	f7fe fc7f 	bl	8002be6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042e8:	2300      	movs	r3, #0
 80042ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042ec:	2300      	movs	r3, #0
 80042ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80042f0:	463b      	mov	r3, r7
 80042f2:	4619      	mov	r1, r3
 80042f4:	4805      	ldr	r0, [pc, #20]	; (800430c <MX_TIM7_Init+0x60>)
 80042f6:	f004 f993 	bl	8008620 <HAL_TIMEx_MasterConfigSynchronization>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004300:	f7fe fc71 	bl	8002be6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004304:	bf00      	nop
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20001bc0 	.word	0x20001bc0
 8004310:	40001400 	.word	0x40001400

08004314 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a0b      	ldr	r2, [pc, #44]	; (8004350 <HAL_TIM_Base_MspInit+0x3c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d10d      	bne.n	8004342 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <HAL_TIM_Base_MspInit+0x40>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	4a09      	ldr	r2, [pc, #36]	; (8004354 <HAL_TIM_Base_MspInit+0x40>)
 8004330:	f043 0320 	orr.w	r3, r3, #32
 8004334:	6413      	str	r3, [r2, #64]	; 0x40
 8004336:	4b07      	ldr	r3, [pc, #28]	; (8004354 <HAL_TIM_Base_MspInit+0x40>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004342:	bf00      	nop
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40001400 	.word	0x40001400
 8004354:	40023800 	.word	0x40023800

08004358 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800435c:	4b11      	ldr	r3, [pc, #68]	; (80043a4 <MX_UART4_Init+0x4c>)
 800435e:	4a12      	ldr	r2, [pc, #72]	; (80043a8 <MX_UART4_Init+0x50>)
 8004360:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004362:	4b10      	ldr	r3, [pc, #64]	; (80043a4 <MX_UART4_Init+0x4c>)
 8004364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004368:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800436a:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <MX_UART4_Init+0x4c>)
 800436c:	2200      	movs	r2, #0
 800436e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004370:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <MX_UART4_Init+0x4c>)
 8004372:	2200      	movs	r2, #0
 8004374:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <MX_UART4_Init+0x4c>)
 8004378:	2200      	movs	r2, #0
 800437a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800437c:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <MX_UART4_Init+0x4c>)
 800437e:	220c      	movs	r2, #12
 8004380:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004382:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <MX_UART4_Init+0x4c>)
 8004384:	2200      	movs	r2, #0
 8004386:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004388:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <MX_UART4_Init+0x4c>)
 800438a:	2200      	movs	r2, #0
 800438c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800438e:	4805      	ldr	r0, [pc, #20]	; (80043a4 <MX_UART4_Init+0x4c>)
 8004390:	f004 f9d6 	bl	8008740 <HAL_UART_Init>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800439a:	f7fe fc24 	bl	8002be6 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800439e:	bf00      	nop
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20001c08 	.word	0x20001c08
 80043a8:	40004c00 	.word	0x40004c00

080043ac <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80043b0:	4b11      	ldr	r3, [pc, #68]	; (80043f8 <MX_USART1_UART_Init+0x4c>)
 80043b2:	4a12      	ldr	r2, [pc, #72]	; (80043fc <MX_USART1_UART_Init+0x50>)
 80043b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80043b6:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <MX_USART1_UART_Init+0x4c>)
 80043b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043be:	4b0e      	ldr	r3, [pc, #56]	; (80043f8 <MX_USART1_UART_Init+0x4c>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043c4:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <MX_USART1_UART_Init+0x4c>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80043ca:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <MX_USART1_UART_Init+0x4c>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043d0:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <MX_USART1_UART_Init+0x4c>)
 80043d2:	220c      	movs	r2, #12
 80043d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043d6:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <MX_USART1_UART_Init+0x4c>)
 80043d8:	2200      	movs	r2, #0
 80043da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043dc:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <MX_USART1_UART_Init+0x4c>)
 80043de:	2200      	movs	r2, #0
 80043e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043e2:	4805      	ldr	r0, [pc, #20]	; (80043f8 <MX_USART1_UART_Init+0x4c>)
 80043e4:	f004 f9ac 	bl	8008740 <HAL_UART_Init>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80043ee:	f7fe fbfa 	bl	8002be6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80043f2:	bf00      	nop
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20001c4c 	.word	0x20001c4c
 80043fc:	40011000 	.word	0x40011000

08004400 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004404:	4b11      	ldr	r3, [pc, #68]	; (800444c <MX_USART2_UART_Init+0x4c>)
 8004406:	4a12      	ldr	r2, [pc, #72]	; (8004450 <MX_USART2_UART_Init+0x50>)
 8004408:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800440a:	4b10      	ldr	r3, [pc, #64]	; (800444c <MX_USART2_UART_Init+0x4c>)
 800440c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004410:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004412:	4b0e      	ldr	r3, [pc, #56]	; (800444c <MX_USART2_UART_Init+0x4c>)
 8004414:	2200      	movs	r2, #0
 8004416:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004418:	4b0c      	ldr	r3, [pc, #48]	; (800444c <MX_USART2_UART_Init+0x4c>)
 800441a:	2200      	movs	r2, #0
 800441c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800441e:	4b0b      	ldr	r3, [pc, #44]	; (800444c <MX_USART2_UART_Init+0x4c>)
 8004420:	2200      	movs	r2, #0
 8004422:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004424:	4b09      	ldr	r3, [pc, #36]	; (800444c <MX_USART2_UART_Init+0x4c>)
 8004426:	220c      	movs	r2, #12
 8004428:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800442a:	4b08      	ldr	r3, [pc, #32]	; (800444c <MX_USART2_UART_Init+0x4c>)
 800442c:	2200      	movs	r2, #0
 800442e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004430:	4b06      	ldr	r3, [pc, #24]	; (800444c <MX_USART2_UART_Init+0x4c>)
 8004432:	2200      	movs	r2, #0
 8004434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004436:	4805      	ldr	r0, [pc, #20]	; (800444c <MX_USART2_UART_Init+0x4c>)
 8004438:	f004 f982 	bl	8008740 <HAL_UART_Init>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004442:	f7fe fbd0 	bl	8002be6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004446:	bf00      	nop
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	20001c90 	.word	0x20001c90
 8004450:	40004400 	.word	0x40004400

08004454 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004458:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <MX_USART3_UART_Init+0x4c>)
 800445a:	4a12      	ldr	r2, [pc, #72]	; (80044a4 <MX_USART3_UART_Init+0x50>)
 800445c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 800445e:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <MX_USART3_UART_Init+0x4c>)
 8004460:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8004464:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004466:	4b0e      	ldr	r3, [pc, #56]	; (80044a0 <MX_USART3_UART_Init+0x4c>)
 8004468:	2200      	movs	r2, #0
 800446a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800446c:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <MX_USART3_UART_Init+0x4c>)
 800446e:	2200      	movs	r2, #0
 8004470:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004472:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <MX_USART3_UART_Init+0x4c>)
 8004474:	2200      	movs	r2, #0
 8004476:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004478:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <MX_USART3_UART_Init+0x4c>)
 800447a:	220c      	movs	r2, #12
 800447c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800447e:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <MX_USART3_UART_Init+0x4c>)
 8004480:	2200      	movs	r2, #0
 8004482:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004484:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <MX_USART3_UART_Init+0x4c>)
 8004486:	2200      	movs	r2, #0
 8004488:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800448a:	4805      	ldr	r0, [pc, #20]	; (80044a0 <MX_USART3_UART_Init+0x4c>)
 800448c:	f004 f958 	bl	8008740 <HAL_UART_Init>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004496:	f7fe fba6 	bl	8002be6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800449a:	bf00      	nop
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20001cd4 	.word	0x20001cd4
 80044a4:	40004800 	.word	0x40004800

080044a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b090      	sub	sp, #64	; 0x40
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	605a      	str	r2, [r3, #4]
 80044ba:	609a      	str	r2, [r3, #8]
 80044bc:	60da      	str	r2, [r3, #12]
 80044be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a97      	ldr	r2, [pc, #604]	; (8004724 <HAL_UART_MspInit+0x27c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	f040 8091 	bne.w	80045ee <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80044cc:	2300      	movs	r3, #0
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80044d0:	4b95      	ldr	r3, [pc, #596]	; (8004728 <HAL_UART_MspInit+0x280>)
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	4a94      	ldr	r2, [pc, #592]	; (8004728 <HAL_UART_MspInit+0x280>)
 80044d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044da:	6413      	str	r3, [r2, #64]	; 0x40
 80044dc:	4b92      	ldr	r3, [pc, #584]	; (8004728 <HAL_UART_MspInit+0x280>)
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044e8:	2300      	movs	r3, #0
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
 80044ec:	4b8e      	ldr	r3, [pc, #568]	; (8004728 <HAL_UART_MspInit+0x280>)
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	4a8d      	ldr	r2, [pc, #564]	; (8004728 <HAL_UART_MspInit+0x280>)
 80044f2:	f043 0301 	orr.w	r3, r3, #1
 80044f6:	6313      	str	r3, [r2, #48]	; 0x30
 80044f8:	4b8b      	ldr	r3, [pc, #556]	; (8004728 <HAL_UART_MspInit+0x280>)
 80044fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	627b      	str	r3, [r7, #36]	; 0x24
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004504:	2303      	movs	r3, #3
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004508:	2302      	movs	r3, #2
 800450a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450c:	2300      	movs	r3, #0
 800450e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004510:	2303      	movs	r3, #3
 8004512:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004514:	2308      	movs	r3, #8
 8004516:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800451c:	4619      	mov	r1, r3
 800451e:	4883      	ldr	r0, [pc, #524]	; (800472c <HAL_UART_MspInit+0x284>)
 8004520:	f001 fa9e 	bl	8005a60 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8004524:	4b82      	ldr	r3, [pc, #520]	; (8004730 <HAL_UART_MspInit+0x288>)
 8004526:	4a83      	ldr	r2, [pc, #524]	; (8004734 <HAL_UART_MspInit+0x28c>)
 8004528:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800452a:	4b81      	ldr	r3, [pc, #516]	; (8004730 <HAL_UART_MspInit+0x288>)
 800452c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004530:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004532:	4b7f      	ldr	r3, [pc, #508]	; (8004730 <HAL_UART_MspInit+0x288>)
 8004534:	2200      	movs	r2, #0
 8004536:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004538:	4b7d      	ldr	r3, [pc, #500]	; (8004730 <HAL_UART_MspInit+0x288>)
 800453a:	2200      	movs	r2, #0
 800453c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800453e:	4b7c      	ldr	r3, [pc, #496]	; (8004730 <HAL_UART_MspInit+0x288>)
 8004540:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004544:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004546:	4b7a      	ldr	r3, [pc, #488]	; (8004730 <HAL_UART_MspInit+0x288>)
 8004548:	2200      	movs	r2, #0
 800454a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800454c:	4b78      	ldr	r3, [pc, #480]	; (8004730 <HAL_UART_MspInit+0x288>)
 800454e:	2200      	movs	r2, #0
 8004550:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004552:	4b77      	ldr	r3, [pc, #476]	; (8004730 <HAL_UART_MspInit+0x288>)
 8004554:	2200      	movs	r2, #0
 8004556:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004558:	4b75      	ldr	r3, [pc, #468]	; (8004730 <HAL_UART_MspInit+0x288>)
 800455a:	2200      	movs	r2, #0
 800455c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800455e:	4b74      	ldr	r3, [pc, #464]	; (8004730 <HAL_UART_MspInit+0x288>)
 8004560:	2200      	movs	r2, #0
 8004562:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004564:	4872      	ldr	r0, [pc, #456]	; (8004730 <HAL_UART_MspInit+0x288>)
 8004566:	f000 fb93 	bl	8004c90 <HAL_DMA_Init>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004570:	f7fe fb39 	bl	8002be6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a6e      	ldr	r2, [pc, #440]	; (8004730 <HAL_UART_MspInit+0x288>)
 8004578:	639a      	str	r2, [r3, #56]	; 0x38
 800457a:	4a6d      	ldr	r2, [pc, #436]	; (8004730 <HAL_UART_MspInit+0x288>)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8004580:	4b6d      	ldr	r3, [pc, #436]	; (8004738 <HAL_UART_MspInit+0x290>)
 8004582:	4a6e      	ldr	r2, [pc, #440]	; (800473c <HAL_UART_MspInit+0x294>)
 8004584:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8004586:	4b6c      	ldr	r3, [pc, #432]	; (8004738 <HAL_UART_MspInit+0x290>)
 8004588:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800458c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800458e:	4b6a      	ldr	r3, [pc, #424]	; (8004738 <HAL_UART_MspInit+0x290>)
 8004590:	2240      	movs	r2, #64	; 0x40
 8004592:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004594:	4b68      	ldr	r3, [pc, #416]	; (8004738 <HAL_UART_MspInit+0x290>)
 8004596:	2200      	movs	r2, #0
 8004598:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800459a:	4b67      	ldr	r3, [pc, #412]	; (8004738 <HAL_UART_MspInit+0x290>)
 800459c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045a0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045a2:	4b65      	ldr	r3, [pc, #404]	; (8004738 <HAL_UART_MspInit+0x290>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045a8:	4b63      	ldr	r3, [pc, #396]	; (8004738 <HAL_UART_MspInit+0x290>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80045ae:	4b62      	ldr	r3, [pc, #392]	; (8004738 <HAL_UART_MspInit+0x290>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80045b4:	4b60      	ldr	r3, [pc, #384]	; (8004738 <HAL_UART_MspInit+0x290>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045ba:	4b5f      	ldr	r3, [pc, #380]	; (8004738 <HAL_UART_MspInit+0x290>)
 80045bc:	2200      	movs	r2, #0
 80045be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80045c0:	485d      	ldr	r0, [pc, #372]	; (8004738 <HAL_UART_MspInit+0x290>)
 80045c2:	f000 fb65 	bl	8004c90 <HAL_DMA_Init>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80045cc:	f7fe fb0b 	bl	8002be6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a59      	ldr	r2, [pc, #356]	; (8004738 <HAL_UART_MspInit+0x290>)
 80045d4:	635a      	str	r2, [r3, #52]	; 0x34
 80045d6:	4a58      	ldr	r2, [pc, #352]	; (8004738 <HAL_UART_MspInit+0x290>)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80045dc:	2200      	movs	r2, #0
 80045de:	2105      	movs	r1, #5
 80045e0:	2034      	movs	r0, #52	; 0x34
 80045e2:	f000 fb2b 	bl	8004c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80045e6:	2034      	movs	r0, #52	; 0x34
 80045e8:	f000 fb44 	bl	8004c74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80045ec:	e1e4      	b.n	80049b8 <HAL_UART_MspInit+0x510>
  else if(uartHandle->Instance==USART1)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a53      	ldr	r2, [pc, #332]	; (8004740 <HAL_UART_MspInit+0x298>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	f040 80ad 	bne.w	8004754 <HAL_UART_MspInit+0x2ac>
    __HAL_RCC_USART1_CLK_ENABLE();
 80045fa:	2300      	movs	r3, #0
 80045fc:	623b      	str	r3, [r7, #32]
 80045fe:	4b4a      	ldr	r3, [pc, #296]	; (8004728 <HAL_UART_MspInit+0x280>)
 8004600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004602:	4a49      	ldr	r2, [pc, #292]	; (8004728 <HAL_UART_MspInit+0x280>)
 8004604:	f043 0310 	orr.w	r3, r3, #16
 8004608:	6453      	str	r3, [r2, #68]	; 0x44
 800460a:	4b47      	ldr	r3, [pc, #284]	; (8004728 <HAL_UART_MspInit+0x280>)
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	f003 0310 	and.w	r3, r3, #16
 8004612:	623b      	str	r3, [r7, #32]
 8004614:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	4b43      	ldr	r3, [pc, #268]	; (8004728 <HAL_UART_MspInit+0x280>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	4a42      	ldr	r2, [pc, #264]	; (8004728 <HAL_UART_MspInit+0x280>)
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	6313      	str	r3, [r2, #48]	; 0x30
 8004626:	4b40      	ldr	r3, [pc, #256]	; (8004728 <HAL_UART_MspInit+0x280>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	61fb      	str	r3, [r7, #28]
 8004630:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004632:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004636:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004638:	2302      	movs	r3, #2
 800463a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463c:	2300      	movs	r3, #0
 800463e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004640:	2303      	movs	r3, #3
 8004642:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004644:	2307      	movs	r3, #7
 8004646:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800464c:	4619      	mov	r1, r3
 800464e:	4837      	ldr	r0, [pc, #220]	; (800472c <HAL_UART_MspInit+0x284>)
 8004650:	f001 fa06 	bl	8005a60 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004654:	4b3b      	ldr	r3, [pc, #236]	; (8004744 <HAL_UART_MspInit+0x29c>)
 8004656:	4a3c      	ldr	r2, [pc, #240]	; (8004748 <HAL_UART_MspInit+0x2a0>)
 8004658:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800465a:	4b3a      	ldr	r3, [pc, #232]	; (8004744 <HAL_UART_MspInit+0x29c>)
 800465c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004660:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004662:	4b38      	ldr	r3, [pc, #224]	; (8004744 <HAL_UART_MspInit+0x29c>)
 8004664:	2200      	movs	r2, #0
 8004666:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004668:	4b36      	ldr	r3, [pc, #216]	; (8004744 <HAL_UART_MspInit+0x29c>)
 800466a:	2200      	movs	r2, #0
 800466c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800466e:	4b35      	ldr	r3, [pc, #212]	; (8004744 <HAL_UART_MspInit+0x29c>)
 8004670:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004674:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004676:	4b33      	ldr	r3, [pc, #204]	; (8004744 <HAL_UART_MspInit+0x29c>)
 8004678:	2200      	movs	r2, #0
 800467a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800467c:	4b31      	ldr	r3, [pc, #196]	; (8004744 <HAL_UART_MspInit+0x29c>)
 800467e:	2200      	movs	r2, #0
 8004680:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004682:	4b30      	ldr	r3, [pc, #192]	; (8004744 <HAL_UART_MspInit+0x29c>)
 8004684:	2200      	movs	r2, #0
 8004686:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004688:	4b2e      	ldr	r3, [pc, #184]	; (8004744 <HAL_UART_MspInit+0x29c>)
 800468a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800468e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004690:	4b2c      	ldr	r3, [pc, #176]	; (8004744 <HAL_UART_MspInit+0x29c>)
 8004692:	2200      	movs	r2, #0
 8004694:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004696:	482b      	ldr	r0, [pc, #172]	; (8004744 <HAL_UART_MspInit+0x29c>)
 8004698:	f000 fafa 	bl	8004c90 <HAL_DMA_Init>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 80046a2:	f7fe faa0 	bl	8002be6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a26      	ldr	r2, [pc, #152]	; (8004744 <HAL_UART_MspInit+0x29c>)
 80046aa:	639a      	str	r2, [r3, #56]	; 0x38
 80046ac:	4a25      	ldr	r2, [pc, #148]	; (8004744 <HAL_UART_MspInit+0x29c>)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80046b2:	4b26      	ldr	r3, [pc, #152]	; (800474c <HAL_UART_MspInit+0x2a4>)
 80046b4:	4a26      	ldr	r2, [pc, #152]	; (8004750 <HAL_UART_MspInit+0x2a8>)
 80046b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80046b8:	4b24      	ldr	r3, [pc, #144]	; (800474c <HAL_UART_MspInit+0x2a4>)
 80046ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046be:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046c0:	4b22      	ldr	r3, [pc, #136]	; (800474c <HAL_UART_MspInit+0x2a4>)
 80046c2:	2240      	movs	r2, #64	; 0x40
 80046c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046c6:	4b21      	ldr	r3, [pc, #132]	; (800474c <HAL_UART_MspInit+0x2a4>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046cc:	4b1f      	ldr	r3, [pc, #124]	; (800474c <HAL_UART_MspInit+0x2a4>)
 80046ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046d4:	4b1d      	ldr	r3, [pc, #116]	; (800474c <HAL_UART_MspInit+0x2a4>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046da:	4b1c      	ldr	r3, [pc, #112]	; (800474c <HAL_UART_MspInit+0x2a4>)
 80046dc:	2200      	movs	r2, #0
 80046de:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80046e0:	4b1a      	ldr	r3, [pc, #104]	; (800474c <HAL_UART_MspInit+0x2a4>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80046e6:	4b19      	ldr	r3, [pc, #100]	; (800474c <HAL_UART_MspInit+0x2a4>)
 80046e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046ec:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046ee:	4b17      	ldr	r3, [pc, #92]	; (800474c <HAL_UART_MspInit+0x2a4>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80046f4:	4815      	ldr	r0, [pc, #84]	; (800474c <HAL_UART_MspInit+0x2a4>)
 80046f6:	f000 facb 	bl	8004c90 <HAL_DMA_Init>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8004700:	f7fe fa71 	bl	8002be6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a11      	ldr	r2, [pc, #68]	; (800474c <HAL_UART_MspInit+0x2a4>)
 8004708:	635a      	str	r2, [r3, #52]	; 0x34
 800470a:	4a10      	ldr	r2, [pc, #64]	; (800474c <HAL_UART_MspInit+0x2a4>)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004710:	2200      	movs	r2, #0
 8004712:	2105      	movs	r1, #5
 8004714:	2025      	movs	r0, #37	; 0x25
 8004716:	f000 fa91 	bl	8004c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800471a:	2025      	movs	r0, #37	; 0x25
 800471c:	f000 faaa 	bl	8004c74 <HAL_NVIC_EnableIRQ>
}
 8004720:	e14a      	b.n	80049b8 <HAL_UART_MspInit+0x510>
 8004722:	bf00      	nop
 8004724:	40004c00 	.word	0x40004c00
 8004728:	40023800 	.word	0x40023800
 800472c:	40020000 	.word	0x40020000
 8004730:	20001d18 	.word	0x20001d18
 8004734:	40026040 	.word	0x40026040
 8004738:	20001d78 	.word	0x20001d78
 800473c:	40026070 	.word	0x40026070
 8004740:	40011000 	.word	0x40011000
 8004744:	20001dd8 	.word	0x20001dd8
 8004748:	40026440 	.word	0x40026440
 800474c:	20001e38 	.word	0x20001e38
 8004750:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a99      	ldr	r2, [pc, #612]	; (80049c0 <HAL_UART_MspInit+0x518>)
 800475a:	4293      	cmp	r3, r2
 800475c:	f040 8093 	bne.w	8004886 <HAL_UART_MspInit+0x3de>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004760:	2300      	movs	r3, #0
 8004762:	61bb      	str	r3, [r7, #24]
 8004764:	4b97      	ldr	r3, [pc, #604]	; (80049c4 <HAL_UART_MspInit+0x51c>)
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	4a96      	ldr	r2, [pc, #600]	; (80049c4 <HAL_UART_MspInit+0x51c>)
 800476a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800476e:	6413      	str	r3, [r2, #64]	; 0x40
 8004770:	4b94      	ldr	r3, [pc, #592]	; (80049c4 <HAL_UART_MspInit+0x51c>)
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004778:	61bb      	str	r3, [r7, #24]
 800477a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800477c:	2300      	movs	r3, #0
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	4b90      	ldr	r3, [pc, #576]	; (80049c4 <HAL_UART_MspInit+0x51c>)
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	4a8f      	ldr	r2, [pc, #572]	; (80049c4 <HAL_UART_MspInit+0x51c>)
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	6313      	str	r3, [r2, #48]	; 0x30
 800478c:	4b8d      	ldr	r3, [pc, #564]	; (80049c4 <HAL_UART_MspInit+0x51c>)
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004798:	230c      	movs	r3, #12
 800479a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479c:	2302      	movs	r3, #2
 800479e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047a4:	2303      	movs	r3, #3
 80047a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80047a8:	2307      	movs	r3, #7
 80047aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047b0:	4619      	mov	r1, r3
 80047b2:	4885      	ldr	r0, [pc, #532]	; (80049c8 <HAL_UART_MspInit+0x520>)
 80047b4:	f001 f954 	bl	8005a60 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80047b8:	4b84      	ldr	r3, [pc, #528]	; (80049cc <HAL_UART_MspInit+0x524>)
 80047ba:	4a85      	ldr	r2, [pc, #532]	; (80049d0 <HAL_UART_MspInit+0x528>)
 80047bc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80047be:	4b83      	ldr	r3, [pc, #524]	; (80049cc <HAL_UART_MspInit+0x524>)
 80047c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047c6:	4b81      	ldr	r3, [pc, #516]	; (80049cc <HAL_UART_MspInit+0x524>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047cc:	4b7f      	ldr	r3, [pc, #508]	; (80049cc <HAL_UART_MspInit+0x524>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047d2:	4b7e      	ldr	r3, [pc, #504]	; (80049cc <HAL_UART_MspInit+0x524>)
 80047d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047da:	4b7c      	ldr	r3, [pc, #496]	; (80049cc <HAL_UART_MspInit+0x524>)
 80047dc:	2200      	movs	r2, #0
 80047de:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047e0:	4b7a      	ldr	r3, [pc, #488]	; (80049cc <HAL_UART_MspInit+0x524>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80047e6:	4b79      	ldr	r3, [pc, #484]	; (80049cc <HAL_UART_MspInit+0x524>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80047ec:	4b77      	ldr	r3, [pc, #476]	; (80049cc <HAL_UART_MspInit+0x524>)
 80047ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047f2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047f4:	4b75      	ldr	r3, [pc, #468]	; (80049cc <HAL_UART_MspInit+0x524>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80047fa:	4874      	ldr	r0, [pc, #464]	; (80049cc <HAL_UART_MspInit+0x524>)
 80047fc:	f000 fa48 	bl	8004c90 <HAL_DMA_Init>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_UART_MspInit+0x362>
      Error_Handler();
 8004806:	f7fe f9ee 	bl	8002be6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a6f      	ldr	r2, [pc, #444]	; (80049cc <HAL_UART_MspInit+0x524>)
 800480e:	639a      	str	r2, [r3, #56]	; 0x38
 8004810:	4a6e      	ldr	r2, [pc, #440]	; (80049cc <HAL_UART_MspInit+0x524>)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004816:	4b6f      	ldr	r3, [pc, #444]	; (80049d4 <HAL_UART_MspInit+0x52c>)
 8004818:	4a6f      	ldr	r2, [pc, #444]	; (80049d8 <HAL_UART_MspInit+0x530>)
 800481a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800481c:	4b6d      	ldr	r3, [pc, #436]	; (80049d4 <HAL_UART_MspInit+0x52c>)
 800481e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004822:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004824:	4b6b      	ldr	r3, [pc, #428]	; (80049d4 <HAL_UART_MspInit+0x52c>)
 8004826:	2240      	movs	r2, #64	; 0x40
 8004828:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800482a:	4b6a      	ldr	r3, [pc, #424]	; (80049d4 <HAL_UART_MspInit+0x52c>)
 800482c:	2200      	movs	r2, #0
 800482e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004830:	4b68      	ldr	r3, [pc, #416]	; (80049d4 <HAL_UART_MspInit+0x52c>)
 8004832:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004836:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004838:	4b66      	ldr	r3, [pc, #408]	; (80049d4 <HAL_UART_MspInit+0x52c>)
 800483a:	2200      	movs	r2, #0
 800483c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800483e:	4b65      	ldr	r3, [pc, #404]	; (80049d4 <HAL_UART_MspInit+0x52c>)
 8004840:	2200      	movs	r2, #0
 8004842:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004844:	4b63      	ldr	r3, [pc, #396]	; (80049d4 <HAL_UART_MspInit+0x52c>)
 8004846:	2200      	movs	r2, #0
 8004848:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800484a:	4b62      	ldr	r3, [pc, #392]	; (80049d4 <HAL_UART_MspInit+0x52c>)
 800484c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004850:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004852:	4b60      	ldr	r3, [pc, #384]	; (80049d4 <HAL_UART_MspInit+0x52c>)
 8004854:	2200      	movs	r2, #0
 8004856:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004858:	485e      	ldr	r0, [pc, #376]	; (80049d4 <HAL_UART_MspInit+0x52c>)
 800485a:	f000 fa19 	bl	8004c90 <HAL_DMA_Init>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <HAL_UART_MspInit+0x3c0>
      Error_Handler();
 8004864:	f7fe f9bf 	bl	8002be6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a5a      	ldr	r2, [pc, #360]	; (80049d4 <HAL_UART_MspInit+0x52c>)
 800486c:	635a      	str	r2, [r3, #52]	; 0x34
 800486e:	4a59      	ldr	r2, [pc, #356]	; (80049d4 <HAL_UART_MspInit+0x52c>)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004874:	2200      	movs	r2, #0
 8004876:	2105      	movs	r1, #5
 8004878:	2026      	movs	r0, #38	; 0x26
 800487a:	f000 f9df 	bl	8004c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800487e:	2026      	movs	r0, #38	; 0x26
 8004880:	f000 f9f8 	bl	8004c74 <HAL_NVIC_EnableIRQ>
}
 8004884:	e098      	b.n	80049b8 <HAL_UART_MspInit+0x510>
  else if(uartHandle->Instance==USART3)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a54      	ldr	r2, [pc, #336]	; (80049dc <HAL_UART_MspInit+0x534>)
 800488c:	4293      	cmp	r3, r2
 800488e:	f040 8093 	bne.w	80049b8 <HAL_UART_MspInit+0x510>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	4b4b      	ldr	r3, [pc, #300]	; (80049c4 <HAL_UART_MspInit+0x51c>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	4a4a      	ldr	r2, [pc, #296]	; (80049c4 <HAL_UART_MspInit+0x51c>)
 800489c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048a0:	6413      	str	r3, [r2, #64]	; 0x40
 80048a2:	4b48      	ldr	r3, [pc, #288]	; (80049c4 <HAL_UART_MspInit+0x51c>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	4b44      	ldr	r3, [pc, #272]	; (80049c4 <HAL_UART_MspInit+0x51c>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	4a43      	ldr	r2, [pc, #268]	; (80049c4 <HAL_UART_MspInit+0x51c>)
 80048b8:	f043 0302 	orr.w	r3, r3, #2
 80048bc:	6313      	str	r3, [r2, #48]	; 0x30
 80048be:	4b41      	ldr	r3, [pc, #260]	; (80049c4 <HAL_UART_MspInit+0x51c>)
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80048ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80048ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d0:	2302      	movs	r3, #2
 80048d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048d8:	2303      	movs	r3, #3
 80048da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80048dc:	2307      	movs	r3, #7
 80048de:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048e4:	4619      	mov	r1, r3
 80048e6:	483e      	ldr	r0, [pc, #248]	; (80049e0 <HAL_UART_MspInit+0x538>)
 80048e8:	f001 f8ba 	bl	8005a60 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80048ec:	4b3d      	ldr	r3, [pc, #244]	; (80049e4 <HAL_UART_MspInit+0x53c>)
 80048ee:	4a3e      	ldr	r2, [pc, #248]	; (80049e8 <HAL_UART_MspInit+0x540>)
 80048f0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80048f2:	4b3c      	ldr	r3, [pc, #240]	; (80049e4 <HAL_UART_MspInit+0x53c>)
 80048f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80048f8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048fa:	4b3a      	ldr	r3, [pc, #232]	; (80049e4 <HAL_UART_MspInit+0x53c>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004900:	4b38      	ldr	r3, [pc, #224]	; (80049e4 <HAL_UART_MspInit+0x53c>)
 8004902:	2200      	movs	r2, #0
 8004904:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004906:	4b37      	ldr	r3, [pc, #220]	; (80049e4 <HAL_UART_MspInit+0x53c>)
 8004908:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800490c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800490e:	4b35      	ldr	r3, [pc, #212]	; (80049e4 <HAL_UART_MspInit+0x53c>)
 8004910:	2200      	movs	r2, #0
 8004912:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004914:	4b33      	ldr	r3, [pc, #204]	; (80049e4 <HAL_UART_MspInit+0x53c>)
 8004916:	2200      	movs	r2, #0
 8004918:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800491a:	4b32      	ldr	r3, [pc, #200]	; (80049e4 <HAL_UART_MspInit+0x53c>)
 800491c:	2200      	movs	r2, #0
 800491e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004920:	4b30      	ldr	r3, [pc, #192]	; (80049e4 <HAL_UART_MspInit+0x53c>)
 8004922:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004926:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004928:	4b2e      	ldr	r3, [pc, #184]	; (80049e4 <HAL_UART_MspInit+0x53c>)
 800492a:	2200      	movs	r2, #0
 800492c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800492e:	482d      	ldr	r0, [pc, #180]	; (80049e4 <HAL_UART_MspInit+0x53c>)
 8004930:	f000 f9ae 	bl	8004c90 <HAL_DMA_Init>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_UART_MspInit+0x496>
      Error_Handler();
 800493a:	f7fe f954 	bl	8002be6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a28      	ldr	r2, [pc, #160]	; (80049e4 <HAL_UART_MspInit+0x53c>)
 8004942:	639a      	str	r2, [r3, #56]	; 0x38
 8004944:	4a27      	ldr	r2, [pc, #156]	; (80049e4 <HAL_UART_MspInit+0x53c>)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800494a:	4b28      	ldr	r3, [pc, #160]	; (80049ec <HAL_UART_MspInit+0x544>)
 800494c:	4a28      	ldr	r2, [pc, #160]	; (80049f0 <HAL_UART_MspInit+0x548>)
 800494e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004950:	4b26      	ldr	r3, [pc, #152]	; (80049ec <HAL_UART_MspInit+0x544>)
 8004952:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004956:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004958:	4b24      	ldr	r3, [pc, #144]	; (80049ec <HAL_UART_MspInit+0x544>)
 800495a:	2240      	movs	r2, #64	; 0x40
 800495c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800495e:	4b23      	ldr	r3, [pc, #140]	; (80049ec <HAL_UART_MspInit+0x544>)
 8004960:	2200      	movs	r2, #0
 8004962:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004964:	4b21      	ldr	r3, [pc, #132]	; (80049ec <HAL_UART_MspInit+0x544>)
 8004966:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800496a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800496c:	4b1f      	ldr	r3, [pc, #124]	; (80049ec <HAL_UART_MspInit+0x544>)
 800496e:	2200      	movs	r2, #0
 8004970:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004972:	4b1e      	ldr	r3, [pc, #120]	; (80049ec <HAL_UART_MspInit+0x544>)
 8004974:	2200      	movs	r2, #0
 8004976:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004978:	4b1c      	ldr	r3, [pc, #112]	; (80049ec <HAL_UART_MspInit+0x544>)
 800497a:	2200      	movs	r2, #0
 800497c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800497e:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <HAL_UART_MspInit+0x544>)
 8004980:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004984:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004986:	4b19      	ldr	r3, [pc, #100]	; (80049ec <HAL_UART_MspInit+0x544>)
 8004988:	2200      	movs	r2, #0
 800498a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800498c:	4817      	ldr	r0, [pc, #92]	; (80049ec <HAL_UART_MspInit+0x544>)
 800498e:	f000 f97f 	bl	8004c90 <HAL_DMA_Init>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <HAL_UART_MspInit+0x4f4>
      Error_Handler();
 8004998:	f7fe f925 	bl	8002be6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a13      	ldr	r2, [pc, #76]	; (80049ec <HAL_UART_MspInit+0x544>)
 80049a0:	635a      	str	r2, [r3, #52]	; 0x34
 80049a2:	4a12      	ldr	r2, [pc, #72]	; (80049ec <HAL_UART_MspInit+0x544>)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80049a8:	2200      	movs	r2, #0
 80049aa:	2105      	movs	r1, #5
 80049ac:	2027      	movs	r0, #39	; 0x27
 80049ae:	f000 f945 	bl	8004c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80049b2:	2027      	movs	r0, #39	; 0x27
 80049b4:	f000 f95e 	bl	8004c74 <HAL_NVIC_EnableIRQ>
}
 80049b8:	bf00      	nop
 80049ba:	3740      	adds	r7, #64	; 0x40
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40004400 	.word	0x40004400
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40020000 	.word	0x40020000
 80049cc:	20001e98 	.word	0x20001e98
 80049d0:	40026088 	.word	0x40026088
 80049d4:	20001ef8 	.word	0x20001ef8
 80049d8:	400260a0 	.word	0x400260a0
 80049dc:	40004800 	.word	0x40004800
 80049e0:	40020400 	.word	0x40020400
 80049e4:	20001f58 	.word	0x20001f58
 80049e8:	40026028 	.word	0x40026028
 80049ec:	20001fb8 	.word	0x20001fb8
 80049f0:	40026058 	.word	0x40026058

080049f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80049f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049f8:	480d      	ldr	r0, [pc, #52]	; (8004a30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80049fa:	490e      	ldr	r1, [pc, #56]	; (8004a34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80049fc:	4a0e      	ldr	r2, [pc, #56]	; (8004a38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80049fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a00:	e002      	b.n	8004a08 <LoopCopyDataInit>

08004a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a06:	3304      	adds	r3, #4

08004a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a0c:	d3f9      	bcc.n	8004a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a0e:	4a0b      	ldr	r2, [pc, #44]	; (8004a3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004a10:	4c0b      	ldr	r4, [pc, #44]	; (8004a40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a14:	e001      	b.n	8004a1a <LoopFillZerobss>

08004a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a18:	3204      	adds	r2, #4

08004a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a1c:	d3fb      	bcc.n	8004a16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004a1e:	f7ff f8b5 	bl	8003b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a22:	f008 fac1 	bl	800cfa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a26:	f7fe f84b 	bl	8002ac0 <main>
  bx  lr    
 8004a2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004a2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a34:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8004a38:	0800d5b0 	.word	0x0800d5b0
  ldr r2, =_sbss
 8004a3c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8004a40:	20002a90 	.word	0x20002a90

08004a44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a44:	e7fe      	b.n	8004a44 <ADC_IRQHandler>
	...

08004a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a4c:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <HAL_Init+0x40>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a0d      	ldr	r2, [pc, #52]	; (8004a88 <HAL_Init+0x40>)
 8004a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a58:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <HAL_Init+0x40>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a0a      	ldr	r2, [pc, #40]	; (8004a88 <HAL_Init+0x40>)
 8004a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a64:	4b08      	ldr	r3, [pc, #32]	; (8004a88 <HAL_Init+0x40>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a07      	ldr	r2, [pc, #28]	; (8004a88 <HAL_Init+0x40>)
 8004a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a70:	2003      	movs	r0, #3
 8004a72:	f000 f8d8 	bl	8004c26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a76:	200f      	movs	r0, #15
 8004a78:	f7fe ff6a 	bl	8003950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a7c:	f7fe ff3c 	bl	80038f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40023c00 	.word	0x40023c00

08004a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <HAL_IncTick+0x20>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <HAL_IncTick+0x24>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	4a04      	ldr	r2, [pc, #16]	; (8004ab0 <HAL_IncTick+0x24>)
 8004a9e:	6013      	str	r3, [r2, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	2000003c 	.word	0x2000003c
 8004ab0:	20002018 	.word	0x20002018

08004ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ab8:	4b03      	ldr	r3, [pc, #12]	; (8004ac8 <HAL_GetTick+0x14>)
 8004aba:	681b      	ldr	r3, [r3, #0]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20002018 	.word	0x20002018

08004acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004adc:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <__NVIC_SetPriorityGrouping+0x44>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ae8:	4013      	ands	r3, r2
 8004aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004afe:	4a04      	ldr	r2, [pc, #16]	; (8004b10 <__NVIC_SetPriorityGrouping+0x44>)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	60d3      	str	r3, [r2, #12]
}
 8004b04:	bf00      	nop
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	e000ed00 	.word	0xe000ed00

08004b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b18:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <__NVIC_GetPriorityGrouping+0x18>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	0a1b      	lsrs	r3, r3, #8
 8004b1e:	f003 0307 	and.w	r3, r3, #7
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	e000ed00 	.word	0xe000ed00

08004b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	db0b      	blt.n	8004b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b42:	79fb      	ldrb	r3, [r7, #7]
 8004b44:	f003 021f 	and.w	r2, r3, #31
 8004b48:	4907      	ldr	r1, [pc, #28]	; (8004b68 <__NVIC_EnableIRQ+0x38>)
 8004b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	2001      	movs	r0, #1
 8004b52:	fa00 f202 	lsl.w	r2, r0, r2
 8004b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	e000e100 	.word	0xe000e100

08004b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	6039      	str	r1, [r7, #0]
 8004b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	db0a      	blt.n	8004b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	490c      	ldr	r1, [pc, #48]	; (8004bb8 <__NVIC_SetPriority+0x4c>)
 8004b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b8a:	0112      	lsls	r2, r2, #4
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	440b      	add	r3, r1
 8004b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b94:	e00a      	b.n	8004bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	4908      	ldr	r1, [pc, #32]	; (8004bbc <__NVIC_SetPriority+0x50>)
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	3b04      	subs	r3, #4
 8004ba4:	0112      	lsls	r2, r2, #4
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	440b      	add	r3, r1
 8004baa:	761a      	strb	r2, [r3, #24]
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	e000e100 	.word	0xe000e100
 8004bbc:	e000ed00 	.word	0xe000ed00

08004bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b089      	sub	sp, #36	; 0x24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f1c3 0307 	rsb	r3, r3, #7
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	bf28      	it	cs
 8004bde:	2304      	movcs	r3, #4
 8004be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	3304      	adds	r3, #4
 8004be6:	2b06      	cmp	r3, #6
 8004be8:	d902      	bls.n	8004bf0 <NVIC_EncodePriority+0x30>
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	3b03      	subs	r3, #3
 8004bee:	e000      	b.n	8004bf2 <NVIC_EncodePriority+0x32>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43da      	mvns	r2, r3
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	401a      	ands	r2, r3
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c12:	43d9      	mvns	r1, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c18:	4313      	orrs	r3, r2
         );
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3724      	adds	r7, #36	; 0x24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff ff4c 	bl	8004acc <__NVIC_SetPriorityGrouping>
}
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c4e:	f7ff ff61 	bl	8004b14 <__NVIC_GetPriorityGrouping>
 8004c52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	68b9      	ldr	r1, [r7, #8]
 8004c58:	6978      	ldr	r0, [r7, #20]
 8004c5a:	f7ff ffb1 	bl	8004bc0 <NVIC_EncodePriority>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c64:	4611      	mov	r1, r2
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff ff80 	bl	8004b6c <__NVIC_SetPriority>
}
 8004c6c:	bf00      	nop
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff ff54 	bl	8004b30 <__NVIC_EnableIRQ>
}
 8004c88:	bf00      	nop
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c9c:	f7ff ff0a 	bl	8004ab4 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e099      	b.n	8004de0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0201 	bic.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ccc:	e00f      	b.n	8004cee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cce:	f7ff fef1 	bl	8004ab4 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b05      	cmp	r3, #5
 8004cda:	d908      	bls.n	8004cee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2203      	movs	r2, #3
 8004ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e078      	b.n	8004de0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e8      	bne.n	8004cce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	4b38      	ldr	r3, [pc, #224]	; (8004de8 <HAL_DMA_Init+0x158>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	2b04      	cmp	r3, #4
 8004d46:	d107      	bne.n	8004d58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d50:	4313      	orrs	r3, r2
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f023 0307 	bic.w	r3, r3, #7
 8004d6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d117      	bne.n	8004db2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00e      	beq.n	8004db2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 fb0f 	bl	80053b8 <DMA_CheckFifoParam>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d008      	beq.n	8004db2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2240      	movs	r2, #64	; 0x40
 8004da4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004dae:	2301      	movs	r3, #1
 8004db0:	e016      	b.n	8004de0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 fac6 	bl	800534c <DMA_CalcBaseAndBitshift>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc8:	223f      	movs	r2, #63	; 0x3f
 8004dca:	409a      	lsls	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	f010803f 	.word	0xf010803f

08004dec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_DMA_Start_IT+0x26>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e040      	b.n	8004e94 <HAL_DMA_Start_IT+0xa8>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d12f      	bne.n	8004e86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	68b9      	ldr	r1, [r7, #8]
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 fa58 	bl	80052f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e44:	223f      	movs	r2, #63	; 0x3f
 8004e46:	409a      	lsls	r2, r3
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0216 	orr.w	r2, r2, #22
 8004e5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d007      	beq.n	8004e74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0208 	orr.w	r2, r2, #8
 8004e72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	e005      	b.n	8004e92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e8e:	2302      	movs	r3, #2
 8004e90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004eaa:	f7ff fe03 	bl	8004ab4 <HAL_GetTick>
 8004eae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d008      	beq.n	8004ece <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2280      	movs	r2, #128	; 0x80
 8004ec0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e052      	b.n	8004f74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0216 	bic.w	r2, r2, #22
 8004edc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695a      	ldr	r2, [r3, #20]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004eec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d103      	bne.n	8004efe <HAL_DMA_Abort+0x62>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0208 	bic.w	r2, r2, #8
 8004f0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0201 	bic.w	r2, r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f1e:	e013      	b.n	8004f48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f20:	f7ff fdc8 	bl	8004ab4 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b05      	cmp	r3, #5
 8004f2c:	d90c      	bls.n	8004f48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2203      	movs	r2, #3
 8004f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e015      	b.n	8004f74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e4      	bne.n	8004f20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f5a:	223f      	movs	r2, #63	; 0x3f
 8004f5c:	409a      	lsls	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d004      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2280      	movs	r2, #128	; 0x80
 8004f94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e00c      	b.n	8004fb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2205      	movs	r2, #5
 8004f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0201 	bic.w	r2, r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004fcc:	4b8e      	ldr	r3, [pc, #568]	; (8005208 <HAL_DMA_IRQHandler+0x248>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a8e      	ldr	r2, [pc, #568]	; (800520c <HAL_DMA_IRQHandler+0x24c>)
 8004fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd6:	0a9b      	lsrs	r3, r3, #10
 8004fd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fea:	2208      	movs	r2, #8
 8004fec:	409a      	lsls	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d01a      	beq.n	800502c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b00      	cmp	r3, #0
 8005002:	d013      	beq.n	800502c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0204 	bic.w	r2, r2, #4
 8005012:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005018:	2208      	movs	r2, #8
 800501a:	409a      	lsls	r2, r3
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005024:	f043 0201 	orr.w	r2, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005030:	2201      	movs	r2, #1
 8005032:	409a      	lsls	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4013      	ands	r3, r2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d012      	beq.n	8005062 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504e:	2201      	movs	r2, #1
 8005050:	409a      	lsls	r2, r3
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505a:	f043 0202 	orr.w	r2, r3, #2
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005066:	2204      	movs	r2, #4
 8005068:	409a      	lsls	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4013      	ands	r3, r2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d012      	beq.n	8005098 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00b      	beq.n	8005098 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005084:	2204      	movs	r2, #4
 8005086:	409a      	lsls	r2, r3
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005090:	f043 0204 	orr.w	r2, r3, #4
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800509c:	2210      	movs	r2, #16
 800509e:	409a      	lsls	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4013      	ands	r3, r2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d043      	beq.n	8005130 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d03c      	beq.n	8005130 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ba:	2210      	movs	r2, #16
 80050bc:	409a      	lsls	r2, r3
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d018      	beq.n	8005102 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d108      	bne.n	80050f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d024      	beq.n	8005130 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	4798      	blx	r3
 80050ee:	e01f      	b.n	8005130 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01b      	beq.n	8005130 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	4798      	blx	r3
 8005100:	e016      	b.n	8005130 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510c:	2b00      	cmp	r3, #0
 800510e:	d107      	bne.n	8005120 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0208 	bic.w	r2, r2, #8
 800511e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005134:	2220      	movs	r2, #32
 8005136:	409a      	lsls	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4013      	ands	r3, r2
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 808f 	beq.w	8005260 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0310 	and.w	r3, r3, #16
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 8087 	beq.w	8005260 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005156:	2220      	movs	r2, #32
 8005158:	409a      	lsls	r2, r3
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b05      	cmp	r3, #5
 8005168:	d136      	bne.n	80051d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0216 	bic.w	r2, r2, #22
 8005178:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695a      	ldr	r2, [r3, #20]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005188:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d103      	bne.n	800519a <HAL_DMA_IRQHandler+0x1da>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0208 	bic.w	r2, r2, #8
 80051a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ae:	223f      	movs	r2, #63	; 0x3f
 80051b0:	409a      	lsls	r2, r3
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d07e      	beq.n	80052cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	4798      	blx	r3
        }
        return;
 80051d6:	e079      	b.n	80052cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d01d      	beq.n	8005222 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10d      	bne.n	8005210 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d031      	beq.n	8005260 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	4798      	blx	r3
 8005204:	e02c      	b.n	8005260 <HAL_DMA_IRQHandler+0x2a0>
 8005206:	bf00      	nop
 8005208:	20000034 	.word	0x20000034
 800520c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005214:	2b00      	cmp	r3, #0
 8005216:	d023      	beq.n	8005260 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	4798      	blx	r3
 8005220:	e01e      	b.n	8005260 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10f      	bne.n	8005250 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0210 	bic.w	r2, r2, #16
 800523e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005264:	2b00      	cmp	r3, #0
 8005266:	d032      	beq.n	80052ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d022      	beq.n	80052ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2205      	movs	r2, #5
 8005278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0201 	bic.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	3301      	adds	r3, #1
 8005290:	60bb      	str	r3, [r7, #8]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	429a      	cmp	r2, r3
 8005296:	d307      	bcc.n	80052a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1f2      	bne.n	800528c <HAL_DMA_IRQHandler+0x2cc>
 80052a6:	e000      	b.n	80052aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80052a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d005      	beq.n	80052ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	4798      	blx	r3
 80052ca:	e000      	b.n	80052ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80052cc:	bf00      	nop
    }
  }
}
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052e2:	b2db      	uxtb	r3, r3
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800530c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	2b40      	cmp	r3, #64	; 0x40
 800531c:	d108      	bne.n	8005330 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800532e:	e007      	b.n	8005340 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	60da      	str	r2, [r3, #12]
}
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	b2db      	uxtb	r3, r3
 800535a:	3b10      	subs	r3, #16
 800535c:	4a14      	ldr	r2, [pc, #80]	; (80053b0 <DMA_CalcBaseAndBitshift+0x64>)
 800535e:	fba2 2303 	umull	r2, r3, r2, r3
 8005362:	091b      	lsrs	r3, r3, #4
 8005364:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005366:	4a13      	ldr	r2, [pc, #76]	; (80053b4 <DMA_CalcBaseAndBitshift+0x68>)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b03      	cmp	r3, #3
 8005378:	d909      	bls.n	800538e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005382:	f023 0303 	bic.w	r3, r3, #3
 8005386:	1d1a      	adds	r2, r3, #4
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	659a      	str	r2, [r3, #88]	; 0x58
 800538c:	e007      	b.n	800539e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005396:	f023 0303 	bic.w	r3, r3, #3
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	aaaaaaab 	.word	0xaaaaaaab
 80053b4:	0800d564 	.word	0x0800d564

080053b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c0:	2300      	movs	r3, #0
 80053c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d11f      	bne.n	8005412 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	d856      	bhi.n	8005486 <DMA_CheckFifoParam+0xce>
 80053d8:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <DMA_CheckFifoParam+0x28>)
 80053da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053de:	bf00      	nop
 80053e0:	080053f1 	.word	0x080053f1
 80053e4:	08005403 	.word	0x08005403
 80053e8:	080053f1 	.word	0x080053f1
 80053ec:	08005487 	.word	0x08005487
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d046      	beq.n	800548a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005400:	e043      	b.n	800548a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800540a:	d140      	bne.n	800548e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005410:	e03d      	b.n	800548e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800541a:	d121      	bne.n	8005460 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b03      	cmp	r3, #3
 8005420:	d837      	bhi.n	8005492 <DMA_CheckFifoParam+0xda>
 8005422:	a201      	add	r2, pc, #4	; (adr r2, 8005428 <DMA_CheckFifoParam+0x70>)
 8005424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005428:	08005439 	.word	0x08005439
 800542c:	0800543f 	.word	0x0800543f
 8005430:	08005439 	.word	0x08005439
 8005434:	08005451 	.word	0x08005451
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	73fb      	strb	r3, [r7, #15]
      break;
 800543c:	e030      	b.n	80054a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005442:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d025      	beq.n	8005496 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800544e:	e022      	b.n	8005496 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005458:	d11f      	bne.n	800549a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800545e:	e01c      	b.n	800549a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b02      	cmp	r3, #2
 8005464:	d903      	bls.n	800546e <DMA_CheckFifoParam+0xb6>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b03      	cmp	r3, #3
 800546a:	d003      	beq.n	8005474 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800546c:	e018      	b.n	80054a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	73fb      	strb	r3, [r7, #15]
      break;
 8005472:	e015      	b.n	80054a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00e      	beq.n	800549e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	73fb      	strb	r3, [r7, #15]
      break;
 8005484:	e00b      	b.n	800549e <DMA_CheckFifoParam+0xe6>
      break;
 8005486:	bf00      	nop
 8005488:	e00a      	b.n	80054a0 <DMA_CheckFifoParam+0xe8>
      break;
 800548a:	bf00      	nop
 800548c:	e008      	b.n	80054a0 <DMA_CheckFifoParam+0xe8>
      break;
 800548e:	bf00      	nop
 8005490:	e006      	b.n	80054a0 <DMA_CheckFifoParam+0xe8>
      break;
 8005492:	bf00      	nop
 8005494:	e004      	b.n	80054a0 <DMA_CheckFifoParam+0xe8>
      break;
 8005496:	bf00      	nop
 8005498:	e002      	b.n	80054a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800549a:	bf00      	nop
 800549c:	e000      	b.n	80054a0 <DMA_CheckFifoParam+0xe8>
      break;
 800549e:	bf00      	nop
    }
  } 
  
  return status; 
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop

080054b0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80054c2:	4b23      	ldr	r3, [pc, #140]	; (8005550 <HAL_FLASH_Program+0xa0>)
 80054c4:	7e1b      	ldrb	r3, [r3, #24]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d101      	bne.n	80054ce <HAL_FLASH_Program+0x1e>
 80054ca:	2302      	movs	r3, #2
 80054cc:	e03b      	b.n	8005546 <HAL_FLASH_Program+0x96>
 80054ce:	4b20      	ldr	r3, [pc, #128]	; (8005550 <HAL_FLASH_Program+0xa0>)
 80054d0:	2201      	movs	r2, #1
 80054d2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80054d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80054d8:	f000 f870 	bl	80055bc <FLASH_WaitForLastOperation>
 80054dc:	4603      	mov	r3, r0
 80054de:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80054e0:	7dfb      	ldrb	r3, [r7, #23]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d12b      	bne.n	800553e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d105      	bne.n	80054f8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80054ec:	783b      	ldrb	r3, [r7, #0]
 80054ee:	4619      	mov	r1, r3
 80054f0:	68b8      	ldr	r0, [r7, #8]
 80054f2:	f000 f91b 	bl	800572c <FLASH_Program_Byte>
 80054f6:	e016      	b.n	8005526 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d105      	bne.n	800550a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80054fe:	883b      	ldrh	r3, [r7, #0]
 8005500:	4619      	mov	r1, r3
 8005502:	68b8      	ldr	r0, [r7, #8]
 8005504:	f000 f8ee 	bl	80056e4 <FLASH_Program_HalfWord>
 8005508:	e00d      	b.n	8005526 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b02      	cmp	r3, #2
 800550e:	d105      	bne.n	800551c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	4619      	mov	r1, r3
 8005514:	68b8      	ldr	r0, [r7, #8]
 8005516:	f000 f8c3 	bl	80056a0 <FLASH_Program_Word>
 800551a:	e004      	b.n	8005526 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800551c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005520:	68b8      	ldr	r0, [r7, #8]
 8005522:	f000 f88b 	bl	800563c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005526:	f24c 3050 	movw	r0, #50000	; 0xc350
 800552a:	f000 f847 	bl	80055bc <FLASH_WaitForLastOperation>
 800552e:	4603      	mov	r3, r0
 8005530:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005532:	4b08      	ldr	r3, [pc, #32]	; (8005554 <HAL_FLASH_Program+0xa4>)
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	4a07      	ldr	r2, [pc, #28]	; (8005554 <HAL_FLASH_Program+0xa4>)
 8005538:	f023 0301 	bic.w	r3, r3, #1
 800553c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800553e:	4b04      	ldr	r3, [pc, #16]	; (8005550 <HAL_FLASH_Program+0xa0>)
 8005540:	2200      	movs	r2, #0
 8005542:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005544:	7dfb      	ldrb	r3, [r7, #23]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	2000201c 	.word	0x2000201c
 8005554:	40023c00 	.word	0x40023c00

08005558 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005562:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <HAL_FLASH_Unlock+0x38>)
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	da0b      	bge.n	8005582 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800556a:	4b09      	ldr	r3, [pc, #36]	; (8005590 <HAL_FLASH_Unlock+0x38>)
 800556c:	4a09      	ldr	r2, [pc, #36]	; (8005594 <HAL_FLASH_Unlock+0x3c>)
 800556e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005570:	4b07      	ldr	r3, [pc, #28]	; (8005590 <HAL_FLASH_Unlock+0x38>)
 8005572:	4a09      	ldr	r2, [pc, #36]	; (8005598 <HAL_FLASH_Unlock+0x40>)
 8005574:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005576:	4b06      	ldr	r3, [pc, #24]	; (8005590 <HAL_FLASH_Unlock+0x38>)
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	da01      	bge.n	8005582 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005582:	79fb      	ldrb	r3, [r7, #7]
}
 8005584:	4618      	mov	r0, r3
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	40023c00 	.word	0x40023c00
 8005594:	45670123 	.word	0x45670123
 8005598:	cdef89ab 	.word	0xcdef89ab

0800559c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80055a0:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <HAL_FLASH_Lock+0x1c>)
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	4a04      	ldr	r2, [pc, #16]	; (80055b8 <HAL_FLASH_Lock+0x1c>)
 80055a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055aa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	40023c00 	.word	0x40023c00

080055bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80055c8:	4b1a      	ldr	r3, [pc, #104]	; (8005634 <FLASH_WaitForLastOperation+0x78>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80055ce:	f7ff fa71 	bl	8004ab4 <HAL_GetTick>
 80055d2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80055d4:	e010      	b.n	80055f8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055dc:	d00c      	beq.n	80055f8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d007      	beq.n	80055f4 <FLASH_WaitForLastOperation+0x38>
 80055e4:	f7ff fa66 	bl	8004ab4 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d201      	bcs.n	80055f8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e019      	b.n	800562c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80055f8:	4b0f      	ldr	r3, [pc, #60]	; (8005638 <FLASH_WaitForLastOperation+0x7c>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e8      	bne.n	80055d6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005604:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <FLASH_WaitForLastOperation+0x7c>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005610:	4b09      	ldr	r3, [pc, #36]	; (8005638 <FLASH_WaitForLastOperation+0x7c>)
 8005612:	2201      	movs	r2, #1
 8005614:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005616:	4b08      	ldr	r3, [pc, #32]	; (8005638 <FLASH_WaitForLastOperation+0x7c>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005622:	f000 f8a5 	bl	8005770 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e000      	b.n	800562c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800562a:	2300      	movs	r3, #0
  
}  
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	2000201c 	.word	0x2000201c
 8005638:	40023c00 	.word	0x40023c00

0800563c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005648:	4b14      	ldr	r3, [pc, #80]	; (800569c <FLASH_Program_DoubleWord+0x60>)
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	4a13      	ldr	r2, [pc, #76]	; (800569c <FLASH_Program_DoubleWord+0x60>)
 800564e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005652:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005654:	4b11      	ldr	r3, [pc, #68]	; (800569c <FLASH_Program_DoubleWord+0x60>)
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	4a10      	ldr	r2, [pc, #64]	; (800569c <FLASH_Program_DoubleWord+0x60>)
 800565a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800565e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005660:	4b0e      	ldr	r3, [pc, #56]	; (800569c <FLASH_Program_DoubleWord+0x60>)
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	4a0d      	ldr	r2, [pc, #52]	; (800569c <FLASH_Program_DoubleWord+0x60>)
 8005666:	f043 0301 	orr.w	r3, r3, #1
 800566a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005672:	f3bf 8f6f 	isb	sy
}
 8005676:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005678:	e9d7 0100 	ldrd	r0, r1, [r7]
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	000a      	movs	r2, r1
 8005686:	2300      	movs	r3, #0
 8005688:	68f9      	ldr	r1, [r7, #12]
 800568a:	3104      	adds	r1, #4
 800568c:	4613      	mov	r3, r2
 800568e:	600b      	str	r3, [r1, #0]
}
 8005690:	bf00      	nop
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	40023c00 	.word	0x40023c00

080056a0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80056aa:	4b0d      	ldr	r3, [pc, #52]	; (80056e0 <FLASH_Program_Word+0x40>)
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	4a0c      	ldr	r2, [pc, #48]	; (80056e0 <FLASH_Program_Word+0x40>)
 80056b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80056b6:	4b0a      	ldr	r3, [pc, #40]	; (80056e0 <FLASH_Program_Word+0x40>)
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	4a09      	ldr	r2, [pc, #36]	; (80056e0 <FLASH_Program_Word+0x40>)
 80056bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80056c2:	4b07      	ldr	r3, [pc, #28]	; (80056e0 <FLASH_Program_Word+0x40>)
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	4a06      	ldr	r2, [pc, #24]	; (80056e0 <FLASH_Program_Word+0x40>)
 80056c8:	f043 0301 	orr.w	r3, r3, #1
 80056cc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	601a      	str	r2, [r3, #0]
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	40023c00 	.word	0x40023c00

080056e4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	460b      	mov	r3, r1
 80056ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80056f0:	4b0d      	ldr	r3, [pc, #52]	; (8005728 <FLASH_Program_HalfWord+0x44>)
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	4a0c      	ldr	r2, [pc, #48]	; (8005728 <FLASH_Program_HalfWord+0x44>)
 80056f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80056fc:	4b0a      	ldr	r3, [pc, #40]	; (8005728 <FLASH_Program_HalfWord+0x44>)
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	4a09      	ldr	r2, [pc, #36]	; (8005728 <FLASH_Program_HalfWord+0x44>)
 8005702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005706:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005708:	4b07      	ldr	r3, [pc, #28]	; (8005728 <FLASH_Program_HalfWord+0x44>)
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	4a06      	ldr	r2, [pc, #24]	; (8005728 <FLASH_Program_HalfWord+0x44>)
 800570e:	f043 0301 	orr.w	r3, r3, #1
 8005712:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	887a      	ldrh	r2, [r7, #2]
 8005718:	801a      	strh	r2, [r3, #0]
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40023c00 	.word	0x40023c00

0800572c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005738:	4b0c      	ldr	r3, [pc, #48]	; (800576c <FLASH_Program_Byte+0x40>)
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	4a0b      	ldr	r2, [pc, #44]	; (800576c <FLASH_Program_Byte+0x40>)
 800573e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005742:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005744:	4b09      	ldr	r3, [pc, #36]	; (800576c <FLASH_Program_Byte+0x40>)
 8005746:	4a09      	ldr	r2, [pc, #36]	; (800576c <FLASH_Program_Byte+0x40>)
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800574c:	4b07      	ldr	r3, [pc, #28]	; (800576c <FLASH_Program_Byte+0x40>)
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	4a06      	ldr	r2, [pc, #24]	; (800576c <FLASH_Program_Byte+0x40>)
 8005752:	f043 0301 	orr.w	r3, r3, #1
 8005756:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	78fa      	ldrb	r2, [r7, #3]
 800575c:	701a      	strb	r2, [r3, #0]
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	40023c00 	.word	0x40023c00

08005770 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005774:	4b27      	ldr	r3, [pc, #156]	; (8005814 <FLASH_SetErrorCode+0xa4>)
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2b00      	cmp	r3, #0
 800577e:	d008      	beq.n	8005792 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005780:	4b25      	ldr	r3, [pc, #148]	; (8005818 <FLASH_SetErrorCode+0xa8>)
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	f043 0310 	orr.w	r3, r3, #16
 8005788:	4a23      	ldr	r2, [pc, #140]	; (8005818 <FLASH_SetErrorCode+0xa8>)
 800578a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800578c:	4b21      	ldr	r3, [pc, #132]	; (8005814 <FLASH_SetErrorCode+0xa4>)
 800578e:	2210      	movs	r2, #16
 8005790:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005792:	4b20      	ldr	r3, [pc, #128]	; (8005814 <FLASH_SetErrorCode+0xa4>)
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b00      	cmp	r3, #0
 800579c:	d008      	beq.n	80057b0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800579e:	4b1e      	ldr	r3, [pc, #120]	; (8005818 <FLASH_SetErrorCode+0xa8>)
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	f043 0308 	orr.w	r3, r3, #8
 80057a6:	4a1c      	ldr	r2, [pc, #112]	; (8005818 <FLASH_SetErrorCode+0xa8>)
 80057a8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80057aa:	4b1a      	ldr	r3, [pc, #104]	; (8005814 <FLASH_SetErrorCode+0xa4>)
 80057ac:	2220      	movs	r2, #32
 80057ae:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80057b0:	4b18      	ldr	r3, [pc, #96]	; (8005814 <FLASH_SetErrorCode+0xa4>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d008      	beq.n	80057ce <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80057bc:	4b16      	ldr	r3, [pc, #88]	; (8005818 <FLASH_SetErrorCode+0xa8>)
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	f043 0304 	orr.w	r3, r3, #4
 80057c4:	4a14      	ldr	r2, [pc, #80]	; (8005818 <FLASH_SetErrorCode+0xa8>)
 80057c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80057c8:	4b12      	ldr	r3, [pc, #72]	; (8005814 <FLASH_SetErrorCode+0xa4>)
 80057ca:	2240      	movs	r2, #64	; 0x40
 80057cc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80057ce:	4b11      	ldr	r3, [pc, #68]	; (8005814 <FLASH_SetErrorCode+0xa4>)
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d008      	beq.n	80057ec <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80057da:	4b0f      	ldr	r3, [pc, #60]	; (8005818 <FLASH_SetErrorCode+0xa8>)
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	f043 0302 	orr.w	r3, r3, #2
 80057e2:	4a0d      	ldr	r2, [pc, #52]	; (8005818 <FLASH_SetErrorCode+0xa8>)
 80057e4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80057e6:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <FLASH_SetErrorCode+0xa4>)
 80057e8:	2280      	movs	r2, #128	; 0x80
 80057ea:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80057ec:	4b09      	ldr	r3, [pc, #36]	; (8005814 <FLASH_SetErrorCode+0xa4>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d008      	beq.n	800580a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80057f8:	4b07      	ldr	r3, [pc, #28]	; (8005818 <FLASH_SetErrorCode+0xa8>)
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	f043 0320 	orr.w	r3, r3, #32
 8005800:	4a05      	ldr	r2, [pc, #20]	; (8005818 <FLASH_SetErrorCode+0xa8>)
 8005802:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005804:	4b03      	ldr	r3, [pc, #12]	; (8005814 <FLASH_SetErrorCode+0xa4>)
 8005806:	2202      	movs	r2, #2
 8005808:	60da      	str	r2, [r3, #12]
  }
}
 800580a:	bf00      	nop
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	40023c00 	.word	0x40023c00
 8005818:	2000201c 	.word	0x2000201c

0800581c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800582e:	4b31      	ldr	r3, [pc, #196]	; (80058f4 <HAL_FLASHEx_Erase+0xd8>)
 8005830:	7e1b      	ldrb	r3, [r3, #24]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d101      	bne.n	800583a <HAL_FLASHEx_Erase+0x1e>
 8005836:	2302      	movs	r3, #2
 8005838:	e058      	b.n	80058ec <HAL_FLASHEx_Erase+0xd0>
 800583a:	4b2e      	ldr	r3, [pc, #184]	; (80058f4 <HAL_FLASHEx_Erase+0xd8>)
 800583c:	2201      	movs	r2, #1
 800583e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005840:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005844:	f7ff feba 	bl	80055bc <FLASH_WaitForLastOperation>
 8005848:	4603      	mov	r3, r0
 800584a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d148      	bne.n	80058e4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005858:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d115      	bne.n	800588e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	b2da      	uxtb	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	4619      	mov	r1, r3
 800586e:	4610      	mov	r0, r2
 8005870:	f000 f844 	bl	80058fc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005874:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005878:	f7ff fea0 	bl	80055bc <FLASH_WaitForLastOperation>
 800587c:	4603      	mov	r3, r0
 800587e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005880:	4b1d      	ldr	r3, [pc, #116]	; (80058f8 <HAL_FLASHEx_Erase+0xdc>)
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	4a1c      	ldr	r2, [pc, #112]	; (80058f8 <HAL_FLASHEx_Erase+0xdc>)
 8005886:	f023 0304 	bic.w	r3, r3, #4
 800588a:	6113      	str	r3, [r2, #16]
 800588c:	e028      	b.n	80058e0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	60bb      	str	r3, [r7, #8]
 8005894:	e01c      	b.n	80058d0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	b2db      	uxtb	r3, r3
 800589c:	4619      	mov	r1, r3
 800589e:	68b8      	ldr	r0, [r7, #8]
 80058a0:	f000 f850 	bl	8005944 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80058a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80058a8:	f7ff fe88 	bl	80055bc <FLASH_WaitForLastOperation>
 80058ac:	4603      	mov	r3, r0
 80058ae:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80058b0:	4b11      	ldr	r3, [pc, #68]	; (80058f8 <HAL_FLASHEx_Erase+0xdc>)
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	4a10      	ldr	r2, [pc, #64]	; (80058f8 <HAL_FLASHEx_Erase+0xdc>)
 80058b6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80058ba:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	601a      	str	r2, [r3, #0]
          break;
 80058c8:	e00a      	b.n	80058e0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	3301      	adds	r3, #1
 80058ce:	60bb      	str	r3, [r7, #8]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68da      	ldr	r2, [r3, #12]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	4413      	add	r3, r2
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d3da      	bcc.n	8005896 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80058e0:	f000 f878 	bl	80059d4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80058e4:	4b03      	ldr	r3, [pc, #12]	; (80058f4 <HAL_FLASHEx_Erase+0xd8>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	761a      	strb	r2, [r3, #24]

  return status;
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	2000201c 	.word	0x2000201c
 80058f8:	40023c00 	.word	0x40023c00

080058fc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	4603      	mov	r3, r0
 8005904:	6039      	str	r1, [r7, #0]
 8005906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005908:	4b0d      	ldr	r3, [pc, #52]	; (8005940 <FLASH_MassErase+0x44>)
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	4a0c      	ldr	r2, [pc, #48]	; (8005940 <FLASH_MassErase+0x44>)
 800590e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005912:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005914:	4b0a      	ldr	r3, [pc, #40]	; (8005940 <FLASH_MassErase+0x44>)
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	4a09      	ldr	r2, [pc, #36]	; (8005940 <FLASH_MassErase+0x44>)
 800591a:	f043 0304 	orr.w	r3, r3, #4
 800591e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005920:	4b07      	ldr	r3, [pc, #28]	; (8005940 <FLASH_MassErase+0x44>)
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	79fb      	ldrb	r3, [r7, #7]
 8005926:	021b      	lsls	r3, r3, #8
 8005928:	4313      	orrs	r3, r2
 800592a:	4a05      	ldr	r2, [pc, #20]	; (8005940 <FLASH_MassErase+0x44>)
 800592c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005930:	6113      	str	r3, [r2, #16]
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	40023c00 	.word	0x40023c00

08005944 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005954:	78fb      	ldrb	r3, [r7, #3]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d102      	bne.n	8005960 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	e010      	b.n	8005982 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d103      	bne.n	800596e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	e009      	b.n	8005982 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800596e:	78fb      	ldrb	r3, [r7, #3]
 8005970:	2b02      	cmp	r3, #2
 8005972:	d103      	bne.n	800597c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	e002      	b.n	8005982 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800597c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005980:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005982:	4b13      	ldr	r3, [pc, #76]	; (80059d0 <FLASH_Erase_Sector+0x8c>)
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	4a12      	ldr	r2, [pc, #72]	; (80059d0 <FLASH_Erase_Sector+0x8c>)
 8005988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800598e:	4b10      	ldr	r3, [pc, #64]	; (80059d0 <FLASH_Erase_Sector+0x8c>)
 8005990:	691a      	ldr	r2, [r3, #16]
 8005992:	490f      	ldr	r1, [pc, #60]	; (80059d0 <FLASH_Erase_Sector+0x8c>)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800599a:	4b0d      	ldr	r3, [pc, #52]	; (80059d0 <FLASH_Erase_Sector+0x8c>)
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	4a0c      	ldr	r2, [pc, #48]	; (80059d0 <FLASH_Erase_Sector+0x8c>)
 80059a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80059a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80059a6:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <FLASH_Erase_Sector+0x8c>)
 80059a8:	691a      	ldr	r2, [r3, #16]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	4313      	orrs	r3, r2
 80059b0:	4a07      	ldr	r2, [pc, #28]	; (80059d0 <FLASH_Erase_Sector+0x8c>)
 80059b2:	f043 0302 	orr.w	r3, r3, #2
 80059b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80059b8:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <FLASH_Erase_Sector+0x8c>)
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	4a04      	ldr	r2, [pc, #16]	; (80059d0 <FLASH_Erase_Sector+0x8c>)
 80059be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c2:	6113      	str	r3, [r2, #16]
}
 80059c4:	bf00      	nop
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	40023c00 	.word	0x40023c00

080059d4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80059d8:	4b20      	ldr	r3, [pc, #128]	; (8005a5c <FLASH_FlushCaches+0x88>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d017      	beq.n	8005a14 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80059e4:	4b1d      	ldr	r3, [pc, #116]	; (8005a5c <FLASH_FlushCaches+0x88>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a1c      	ldr	r2, [pc, #112]	; (8005a5c <FLASH_FlushCaches+0x88>)
 80059ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059ee:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80059f0:	4b1a      	ldr	r3, [pc, #104]	; (8005a5c <FLASH_FlushCaches+0x88>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a19      	ldr	r2, [pc, #100]	; (8005a5c <FLASH_FlushCaches+0x88>)
 80059f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	4b17      	ldr	r3, [pc, #92]	; (8005a5c <FLASH_FlushCaches+0x88>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a16      	ldr	r2, [pc, #88]	; (8005a5c <FLASH_FlushCaches+0x88>)
 8005a02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a06:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005a08:	4b14      	ldr	r3, [pc, #80]	; (8005a5c <FLASH_FlushCaches+0x88>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a13      	ldr	r2, [pc, #76]	; (8005a5c <FLASH_FlushCaches+0x88>)
 8005a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a12:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005a14:	4b11      	ldr	r3, [pc, #68]	; (8005a5c <FLASH_FlushCaches+0x88>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d017      	beq.n	8005a50 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005a20:	4b0e      	ldr	r3, [pc, #56]	; (8005a5c <FLASH_FlushCaches+0x88>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a0d      	ldr	r2, [pc, #52]	; (8005a5c <FLASH_FlushCaches+0x88>)
 8005a26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a2a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005a2c:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <FLASH_FlushCaches+0x88>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a0a      	ldr	r2, [pc, #40]	; (8005a5c <FLASH_FlushCaches+0x88>)
 8005a32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	4b08      	ldr	r3, [pc, #32]	; (8005a5c <FLASH_FlushCaches+0x88>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a07      	ldr	r2, [pc, #28]	; (8005a5c <FLASH_FlushCaches+0x88>)
 8005a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a42:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005a44:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <FLASH_FlushCaches+0x88>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a04      	ldr	r2, [pc, #16]	; (8005a5c <FLASH_FlushCaches+0x88>)
 8005a4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a4e:	6013      	str	r3, [r2, #0]
  }
}
 8005a50:	bf00      	nop
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	40023c00 	.word	0x40023c00

08005a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b089      	sub	sp, #36	; 0x24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a76:	2300      	movs	r3, #0
 8005a78:	61fb      	str	r3, [r7, #28]
 8005a7a:	e16b      	b.n	8005d54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	fa02 f303 	lsl.w	r3, r2, r3
 8005a84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	f040 815a 	bne.w	8005d4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d005      	beq.n	8005ab2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d130      	bne.n	8005b14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	2203      	movs	r2, #3
 8005abe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac2:	43db      	mvns	r3, r3
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ae8:	2201      	movs	r2, #1
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	fa02 f303 	lsl.w	r3, r2, r3
 8005af0:	43db      	mvns	r3, r3
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	4013      	ands	r3, r2
 8005af6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	091b      	lsrs	r3, r3, #4
 8005afe:	f003 0201 	and.w	r2, r3, #1
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	fa02 f303 	lsl.w	r3, r2, r3
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f003 0303 	and.w	r3, r3, #3
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d017      	beq.n	8005b50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	2203      	movs	r2, #3
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	43db      	mvns	r3, r3
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	4013      	ands	r3, r2
 8005b36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	fa02 f303 	lsl.w	r3, r2, r3
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f003 0303 	and.w	r3, r3, #3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d123      	bne.n	8005ba4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	08da      	lsrs	r2, r3, #3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3208      	adds	r2, #8
 8005b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	220f      	movs	r2, #15
 8005b74:	fa02 f303 	lsl.w	r3, r2, r3
 8005b78:	43db      	mvns	r3, r3
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	691a      	ldr	r2, [r3, #16]
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	08da      	lsrs	r2, r3, #3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	3208      	adds	r2, #8
 8005b9e:	69b9      	ldr	r1, [r7, #24]
 8005ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	2203      	movs	r2, #3
 8005bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb4:	43db      	mvns	r3, r3
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f003 0203 	and.w	r2, r3, #3
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 80b4 	beq.w	8005d4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	4b60      	ldr	r3, [pc, #384]	; (8005d6c <HAL_GPIO_Init+0x30c>)
 8005bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bee:	4a5f      	ldr	r2, [pc, #380]	; (8005d6c <HAL_GPIO_Init+0x30c>)
 8005bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8005bf6:	4b5d      	ldr	r3, [pc, #372]	; (8005d6c <HAL_GPIO_Init+0x30c>)
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c02:	4a5b      	ldr	r2, [pc, #364]	; (8005d70 <HAL_GPIO_Init+0x310>)
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	089b      	lsrs	r3, r3, #2
 8005c08:	3302      	adds	r3, #2
 8005c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	220f      	movs	r2, #15
 8005c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1e:	43db      	mvns	r3, r3
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	4013      	ands	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a52      	ldr	r2, [pc, #328]	; (8005d74 <HAL_GPIO_Init+0x314>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d02b      	beq.n	8005c86 <HAL_GPIO_Init+0x226>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a51      	ldr	r2, [pc, #324]	; (8005d78 <HAL_GPIO_Init+0x318>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d025      	beq.n	8005c82 <HAL_GPIO_Init+0x222>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a50      	ldr	r2, [pc, #320]	; (8005d7c <HAL_GPIO_Init+0x31c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d01f      	beq.n	8005c7e <HAL_GPIO_Init+0x21e>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a4f      	ldr	r2, [pc, #316]	; (8005d80 <HAL_GPIO_Init+0x320>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d019      	beq.n	8005c7a <HAL_GPIO_Init+0x21a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a4e      	ldr	r2, [pc, #312]	; (8005d84 <HAL_GPIO_Init+0x324>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d013      	beq.n	8005c76 <HAL_GPIO_Init+0x216>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a4d      	ldr	r2, [pc, #308]	; (8005d88 <HAL_GPIO_Init+0x328>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00d      	beq.n	8005c72 <HAL_GPIO_Init+0x212>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a4c      	ldr	r2, [pc, #304]	; (8005d8c <HAL_GPIO_Init+0x32c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d007      	beq.n	8005c6e <HAL_GPIO_Init+0x20e>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a4b      	ldr	r2, [pc, #300]	; (8005d90 <HAL_GPIO_Init+0x330>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d101      	bne.n	8005c6a <HAL_GPIO_Init+0x20a>
 8005c66:	2307      	movs	r3, #7
 8005c68:	e00e      	b.n	8005c88 <HAL_GPIO_Init+0x228>
 8005c6a:	2308      	movs	r3, #8
 8005c6c:	e00c      	b.n	8005c88 <HAL_GPIO_Init+0x228>
 8005c6e:	2306      	movs	r3, #6
 8005c70:	e00a      	b.n	8005c88 <HAL_GPIO_Init+0x228>
 8005c72:	2305      	movs	r3, #5
 8005c74:	e008      	b.n	8005c88 <HAL_GPIO_Init+0x228>
 8005c76:	2304      	movs	r3, #4
 8005c78:	e006      	b.n	8005c88 <HAL_GPIO_Init+0x228>
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e004      	b.n	8005c88 <HAL_GPIO_Init+0x228>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e002      	b.n	8005c88 <HAL_GPIO_Init+0x228>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <HAL_GPIO_Init+0x228>
 8005c86:	2300      	movs	r3, #0
 8005c88:	69fa      	ldr	r2, [r7, #28]
 8005c8a:	f002 0203 	and.w	r2, r2, #3
 8005c8e:	0092      	lsls	r2, r2, #2
 8005c90:	4093      	lsls	r3, r2
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c98:	4935      	ldr	r1, [pc, #212]	; (8005d70 <HAL_GPIO_Init+0x310>)
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	089b      	lsrs	r3, r3, #2
 8005c9e:	3302      	adds	r3, #2
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ca6:	4b3b      	ldr	r3, [pc, #236]	; (8005d94 <HAL_GPIO_Init+0x334>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	43db      	mvns	r3, r3
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cca:	4a32      	ldr	r2, [pc, #200]	; (8005d94 <HAL_GPIO_Init+0x334>)
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cd0:	4b30      	ldr	r3, [pc, #192]	; (8005d94 <HAL_GPIO_Init+0x334>)
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005cf4:	4a27      	ldr	r2, [pc, #156]	; (8005d94 <HAL_GPIO_Init+0x334>)
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005cfa:	4b26      	ldr	r3, [pc, #152]	; (8005d94 <HAL_GPIO_Init+0x334>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	43db      	mvns	r3, r3
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	4013      	ands	r3, r2
 8005d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d1e:	4a1d      	ldr	r2, [pc, #116]	; (8005d94 <HAL_GPIO_Init+0x334>)
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d24:	4b1b      	ldr	r3, [pc, #108]	; (8005d94 <HAL_GPIO_Init+0x334>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	43db      	mvns	r3, r3
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	4013      	ands	r3, r2
 8005d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d48:	4a12      	ldr	r2, [pc, #72]	; (8005d94 <HAL_GPIO_Init+0x334>)
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	3301      	adds	r3, #1
 8005d52:	61fb      	str	r3, [r7, #28]
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	2b0f      	cmp	r3, #15
 8005d58:	f67f ae90 	bls.w	8005a7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d5c:	bf00      	nop
 8005d5e:	bf00      	nop
 8005d60:	3724      	adds	r7, #36	; 0x24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	40013800 	.word	0x40013800
 8005d74:	40020000 	.word	0x40020000
 8005d78:	40020400 	.word	0x40020400
 8005d7c:	40020800 	.word	0x40020800
 8005d80:	40020c00 	.word	0x40020c00
 8005d84:	40021000 	.word	0x40021000
 8005d88:	40021400 	.word	0x40021400
 8005d8c:	40021800 	.word	0x40021800
 8005d90:	40021c00 	.word	0x40021c00
 8005d94:	40013c00 	.word	0x40013c00

08005d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	807b      	strh	r3, [r7, #2]
 8005da4:	4613      	mov	r3, r2
 8005da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005da8:	787b      	ldrb	r3, [r7, #1]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005dae:	887a      	ldrh	r2, [r7, #2]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005db4:	e003      	b.n	8005dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005db6:	887b      	ldrh	r3, [r7, #2]
 8005db8:	041a      	lsls	r2, r3, #16
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	619a      	str	r2, [r3, #24]
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b085      	sub	sp, #20
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ddc:	887a      	ldrh	r2, [r7, #2]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4013      	ands	r3, r2
 8005de2:	041a      	lsls	r2, r3, #16
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	43d9      	mvns	r1, r3
 8005de8:	887b      	ldrh	r3, [r7, #2]
 8005dea:	400b      	ands	r3, r1
 8005dec:	431a      	orrs	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	619a      	str	r2, [r3, #24]
}
 8005df2:	bf00      	nop
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
	...

08005e00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e12b      	b.n	800606a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fc fdfa 	bl	8002a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2224      	movs	r2, #36	; 0x24
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0201 	bic.w	r2, r2, #1
 8005e42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e64:	f002 f8f2 	bl	800804c <HAL_RCC_GetPCLK1Freq>
 8005e68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	4a81      	ldr	r2, [pc, #516]	; (8006074 <HAL_I2C_Init+0x274>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d807      	bhi.n	8005e84 <HAL_I2C_Init+0x84>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4a80      	ldr	r2, [pc, #512]	; (8006078 <HAL_I2C_Init+0x278>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	bf94      	ite	ls
 8005e7c:	2301      	movls	r3, #1
 8005e7e:	2300      	movhi	r3, #0
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	e006      	b.n	8005e92 <HAL_I2C_Init+0x92>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4a7d      	ldr	r2, [pc, #500]	; (800607c <HAL_I2C_Init+0x27c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	bf94      	ite	ls
 8005e8c:	2301      	movls	r3, #1
 8005e8e:	2300      	movhi	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e0e7      	b.n	800606a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4a78      	ldr	r2, [pc, #480]	; (8006080 <HAL_I2C_Init+0x280>)
 8005e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea2:	0c9b      	lsrs	r3, r3, #18
 8005ea4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	4a6a      	ldr	r2, [pc, #424]	; (8006074 <HAL_I2C_Init+0x274>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d802      	bhi.n	8005ed4 <HAL_I2C_Init+0xd4>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	e009      	b.n	8005ee8 <HAL_I2C_Init+0xe8>
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005eda:	fb02 f303 	mul.w	r3, r2, r3
 8005ede:	4a69      	ldr	r2, [pc, #420]	; (8006084 <HAL_I2C_Init+0x284>)
 8005ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee4:	099b      	lsrs	r3, r3, #6
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	6812      	ldr	r2, [r2, #0]
 8005eec:	430b      	orrs	r3, r1
 8005eee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005efa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	495c      	ldr	r1, [pc, #368]	; (8006074 <HAL_I2C_Init+0x274>)
 8005f04:	428b      	cmp	r3, r1
 8005f06:	d819      	bhi.n	8005f3c <HAL_I2C_Init+0x13c>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	1e59      	subs	r1, r3, #1
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f16:	1c59      	adds	r1, r3, #1
 8005f18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005f1c:	400b      	ands	r3, r1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00a      	beq.n	8005f38 <HAL_I2C_Init+0x138>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	1e59      	subs	r1, r3, #1
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f30:	3301      	adds	r3, #1
 8005f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f36:	e051      	b.n	8005fdc <HAL_I2C_Init+0x1dc>
 8005f38:	2304      	movs	r3, #4
 8005f3a:	e04f      	b.n	8005fdc <HAL_I2C_Init+0x1dc>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d111      	bne.n	8005f68 <HAL_I2C_Init+0x168>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	1e58      	subs	r0, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6859      	ldr	r1, [r3, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	440b      	add	r3, r1
 8005f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f56:	3301      	adds	r3, #1
 8005f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	bf0c      	ite	eq
 8005f60:	2301      	moveq	r3, #1
 8005f62:	2300      	movne	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	e012      	b.n	8005f8e <HAL_I2C_Init+0x18e>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	1e58      	subs	r0, r3, #1
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6859      	ldr	r1, [r3, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	440b      	add	r3, r1
 8005f76:	0099      	lsls	r1, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f7e:	3301      	adds	r3, #1
 8005f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	bf0c      	ite	eq
 8005f88:	2301      	moveq	r3, #1
 8005f8a:	2300      	movne	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <HAL_I2C_Init+0x196>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e022      	b.n	8005fdc <HAL_I2C_Init+0x1dc>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10e      	bne.n	8005fbc <HAL_I2C_Init+0x1bc>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	1e58      	subs	r0, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6859      	ldr	r1, [r3, #4]
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	440b      	add	r3, r1
 8005fac:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fba:	e00f      	b.n	8005fdc <HAL_I2C_Init+0x1dc>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	1e58      	subs	r0, r3, #1
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6859      	ldr	r1, [r3, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	0099      	lsls	r1, r3, #2
 8005fcc:	440b      	add	r3, r1
 8005fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	6809      	ldr	r1, [r1, #0]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	69da      	ldr	r2, [r3, #28]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800600a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	6911      	ldr	r1, [r2, #16]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	68d2      	ldr	r2, [r2, #12]
 8006016:	4311      	orrs	r1, r2
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6812      	ldr	r2, [r2, #0]
 800601c:	430b      	orrs	r3, r1
 800601e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	695a      	ldr	r2, [r3, #20]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0201 	orr.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2220      	movs	r2, #32
 8006056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	000186a0 	.word	0x000186a0
 8006078:	001e847f 	.word	0x001e847f
 800607c:	003d08ff 	.word	0x003d08ff
 8006080:	431bde83 	.word	0x431bde83
 8006084:	10624dd3 	.word	0x10624dd3

08006088 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b088      	sub	sp, #32
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
 80060b4:	2b10      	cmp	r3, #16
 80060b6:	d003      	beq.n	80060c0 <HAL_I2C_EV_IRQHandler+0x38>
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
 80060ba:	2b40      	cmp	r3, #64	; 0x40
 80060bc:	f040 80c1 	bne.w	8006242 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10d      	bne.n	80060f6 <HAL_I2C_EV_IRQHandler+0x6e>
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80060e0:	d003      	beq.n	80060ea <HAL_I2C_EV_IRQHandler+0x62>
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80060e8:	d101      	bne.n	80060ee <HAL_I2C_EV_IRQHandler+0x66>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <HAL_I2C_EV_IRQHandler+0x68>
 80060ee:	2300      	movs	r3, #0
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	f000 8132 	beq.w	800635a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00c      	beq.n	800611a <HAL_I2C_EV_IRQHandler+0x92>
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	0a5b      	lsrs	r3, r3, #9
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d006      	beq.n	800611a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f001 fb51 	bl	80077b4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fcc8 	bl	8006aa8 <I2C_Master_SB>
 8006118:	e092      	b.n	8006240 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	08db      	lsrs	r3, r3, #3
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d009      	beq.n	800613a <HAL_I2C_EV_IRQHandler+0xb2>
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	0a5b      	lsrs	r3, r3, #9
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fd3e 	bl	8006bb4 <I2C_Master_ADD10>
 8006138:	e082      	b.n	8006240 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	085b      	lsrs	r3, r3, #1
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d009      	beq.n	800615a <HAL_I2C_EV_IRQHandler+0xd2>
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	0a5b      	lsrs	r3, r3, #9
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fd58 	bl	8006c08 <I2C_Master_ADDR>
 8006158:	e072      	b.n	8006240 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	089b      	lsrs	r3, r3, #2
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d03b      	beq.n	80061de <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006174:	f000 80f3 	beq.w	800635e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	09db      	lsrs	r3, r3, #7
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00f      	beq.n	80061a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	0a9b      	lsrs	r3, r3, #10
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d009      	beq.n	80061a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	089b      	lsrs	r3, r3, #2
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d103      	bne.n	80061a4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f938 	bl	8006412 <I2C_MasterTransmit_TXE>
 80061a2:	e04d      	b.n	8006240 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	089b      	lsrs	r3, r3, #2
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 80d6 	beq.w	800635e <HAL_I2C_EV_IRQHandler+0x2d6>
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	0a5b      	lsrs	r3, r3, #9
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f000 80cf 	beq.w	800635e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80061c0:	7bbb      	ldrb	r3, [r7, #14]
 80061c2:	2b21      	cmp	r3, #33	; 0x21
 80061c4:	d103      	bne.n	80061ce <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f9bf 	bl	800654a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061cc:	e0c7      	b.n	800635e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
 80061d0:	2b40      	cmp	r3, #64	; 0x40
 80061d2:	f040 80c4 	bne.w	800635e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fa2d 	bl	8006636 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061dc:	e0bf      	b.n	800635e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ec:	f000 80b7 	beq.w	800635e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	099b      	lsrs	r3, r3, #6
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00f      	beq.n	800621c <HAL_I2C_EV_IRQHandler+0x194>
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	0a9b      	lsrs	r3, r3, #10
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d009      	beq.n	800621c <HAL_I2C_EV_IRQHandler+0x194>
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	089b      	lsrs	r3, r3, #2
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d103      	bne.n	800621c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 faa2 	bl	800675e <I2C_MasterReceive_RXNE>
 800621a:	e011      	b.n	8006240 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	089b      	lsrs	r3, r3, #2
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 809a 	beq.w	800635e <HAL_I2C_EV_IRQHandler+0x2d6>
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	0a5b      	lsrs	r3, r3, #9
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 8093 	beq.w	800635e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fb4b 	bl	80068d4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800623e:	e08e      	b.n	800635e <HAL_I2C_EV_IRQHandler+0x2d6>
 8006240:	e08d      	b.n	800635e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d004      	beq.n	8006254 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	61fb      	str	r3, [r7, #28]
 8006252:	e007      	b.n	8006264 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	085b      	lsrs	r3, r3, #1
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b00      	cmp	r3, #0
 800626e:	d012      	beq.n	8006296 <HAL_I2C_EV_IRQHandler+0x20e>
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	0a5b      	lsrs	r3, r3, #9
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00c      	beq.n	8006296 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800628c:	69b9      	ldr	r1, [r7, #24]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 ff09 	bl	80070a6 <I2C_Slave_ADDR>
 8006294:	e066      	b.n	8006364 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	091b      	lsrs	r3, r3, #4
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d009      	beq.n	80062b6 <HAL_I2C_EV_IRQHandler+0x22e>
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	0a5b      	lsrs	r3, r3, #9
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 ff44 	bl	800713c <I2C_Slave_STOPF>
 80062b4:	e056      	b.n	8006364 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80062b6:	7bbb      	ldrb	r3, [r7, #14]
 80062b8:	2b21      	cmp	r3, #33	; 0x21
 80062ba:	d002      	beq.n	80062c2 <HAL_I2C_EV_IRQHandler+0x23a>
 80062bc:	7bbb      	ldrb	r3, [r7, #14]
 80062be:	2b29      	cmp	r3, #41	; 0x29
 80062c0:	d125      	bne.n	800630e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	09db      	lsrs	r3, r3, #7
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00f      	beq.n	80062ee <HAL_I2C_EV_IRQHandler+0x266>
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	0a9b      	lsrs	r3, r3, #10
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d009      	beq.n	80062ee <HAL_I2C_EV_IRQHandler+0x266>
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	089b      	lsrs	r3, r3, #2
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d103      	bne.n	80062ee <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fe1f 	bl	8006f2a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062ec:	e039      	b.n	8006362 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	089b      	lsrs	r3, r3, #2
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d033      	beq.n	8006362 <HAL_I2C_EV_IRQHandler+0x2da>
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	0a5b      	lsrs	r3, r3, #9
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d02d      	beq.n	8006362 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fe4c 	bl	8006fa4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800630c:	e029      	b.n	8006362 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	099b      	lsrs	r3, r3, #6
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00f      	beq.n	800633a <HAL_I2C_EV_IRQHandler+0x2b2>
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	0a9b      	lsrs	r3, r3, #10
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d009      	beq.n	800633a <HAL_I2C_EV_IRQHandler+0x2b2>
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	089b      	lsrs	r3, r3, #2
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d103      	bne.n	800633a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fe57 	bl	8006fe6 <I2C_SlaveReceive_RXNE>
 8006338:	e014      	b.n	8006364 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	089b      	lsrs	r3, r3, #2
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00e      	beq.n	8006364 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	0a5b      	lsrs	r3, r3, #9
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d008      	beq.n	8006364 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fe85 	bl	8007062 <I2C_SlaveReceive_BTF>
 8006358:	e004      	b.n	8006364 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800635a:	bf00      	nop
 800635c:	e002      	b.n	8006364 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800635e:	bf00      	nop
 8006360:	e000      	b.n	8006364 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006362:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006364:	3720      	adds	r7, #32
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	460b      	mov	r3, r1
 800639c:	70fb      	strb	r3, [r7, #3]
 800639e:	4613      	mov	r3, r2
 80063a0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80063ca:	bf00      	nop
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006420:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006428:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006434:	2b00      	cmp	r3, #0
 8006436:	d150      	bne.n	80064da <I2C_MasterTransmit_TXE+0xc8>
 8006438:	7bfb      	ldrb	r3, [r7, #15]
 800643a:	2b21      	cmp	r3, #33	; 0x21
 800643c:	d14d      	bne.n	80064da <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2b08      	cmp	r3, #8
 8006442:	d01d      	beq.n	8006480 <I2C_MasterTransmit_TXE+0x6e>
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b20      	cmp	r3, #32
 8006448:	d01a      	beq.n	8006480 <I2C_MasterTransmit_TXE+0x6e>
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006450:	d016      	beq.n	8006480 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006460:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2211      	movs	r2, #17
 8006466:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2220      	movs	r2, #32
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7fb f96d 	bl	8001758 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800647e:	e060      	b.n	8006542 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800648e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800649e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b40      	cmp	r3, #64	; 0x40
 80064b8:	d107      	bne.n	80064ca <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff ff7d 	bl	80063c2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80064c8:	e03b      	b.n	8006542 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7fb f940 	bl	8001758 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80064d8:	e033      	b.n	8006542 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80064da:	7bfb      	ldrb	r3, [r7, #15]
 80064dc:	2b21      	cmp	r3, #33	; 0x21
 80064de:	d005      	beq.n	80064ec <I2C_MasterTransmit_TXE+0xda>
 80064e0:	7bbb      	ldrb	r3, [r7, #14]
 80064e2:	2b40      	cmp	r3, #64	; 0x40
 80064e4:	d12d      	bne.n	8006542 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
 80064e8:	2b22      	cmp	r3, #34	; 0x22
 80064ea:	d12a      	bne.n	8006542 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d108      	bne.n	8006508 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006504:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006506:	e01c      	b.n	8006542 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b40      	cmp	r3, #64	; 0x40
 8006512:	d103      	bne.n	800651c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f88e 	bl	8006636 <I2C_MemoryTransmit_TXE_BTF>
}
 800651a:	e012      	b.n	8006542 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006520:	781a      	ldrb	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	1c5a      	adds	r2, r3, #1
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006536:	b29b      	uxth	r3, r3
 8006538:	3b01      	subs	r3, #1
 800653a:	b29a      	uxth	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006540:	e7ff      	b.n	8006542 <I2C_MasterTransmit_TXE+0x130>
 8006542:	bf00      	nop
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b21      	cmp	r3, #33	; 0x21
 8006562:	d164      	bne.n	800662e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d012      	beq.n	8006594 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006572:	781a      	ldrb	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006588:	b29b      	uxth	r3, r3
 800658a:	3b01      	subs	r3, #1
 800658c:	b29a      	uxth	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006592:	e04c      	b.n	800662e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b08      	cmp	r3, #8
 8006598:	d01d      	beq.n	80065d6 <I2C_MasterTransmit_BTF+0x8c>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b20      	cmp	r3, #32
 800659e:	d01a      	beq.n	80065d6 <I2C_MasterTransmit_BTF+0x8c>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065a6:	d016      	beq.n	80065d6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065b6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2211      	movs	r2, #17
 80065bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7fb f8c2 	bl	8001758 <HAL_I2C_MasterTxCpltCallback>
}
 80065d4:	e02b      	b.n	800662e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065e4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065f4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b40      	cmp	r3, #64	; 0x40
 800660e:	d107      	bne.n	8006620 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7ff fed2 	bl	80063c2 <HAL_I2C_MemTxCpltCallback>
}
 800661e:	e006      	b.n	800662e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7fb f895 	bl	8001758 <HAL_I2C_MasterTxCpltCallback>
}
 800662e:	bf00      	nop
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006644:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800664a:	2b00      	cmp	r3, #0
 800664c:	d11d      	bne.n	800668a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006652:	2b01      	cmp	r3, #1
 8006654:	d10b      	bne.n	800666e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800665a:	b2da      	uxtb	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006666:	1c9a      	adds	r2, r3, #2
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800666c:	e073      	b.n	8006756 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006672:	b29b      	uxth	r3, r3
 8006674:	121b      	asrs	r3, r3, #8
 8006676:	b2da      	uxtb	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006688:	e065      	b.n	8006756 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800668e:	2b01      	cmp	r3, #1
 8006690:	d10b      	bne.n	80066aa <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006696:	b2da      	uxtb	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80066a8:	e055      	b.n	8006756 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d151      	bne.n	8006756 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	2b22      	cmp	r3, #34	; 0x22
 80066b6:	d10d      	bne.n	80066d4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066c6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066cc:	1c5a      	adds	r2, r3, #1
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80066d2:	e040      	b.n	8006756 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d8:	b29b      	uxth	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d015      	beq.n	800670a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80066de:	7bfb      	ldrb	r3, [r7, #15]
 80066e0:	2b21      	cmp	r3, #33	; 0x21
 80066e2:	d112      	bne.n	800670a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	781a      	ldrb	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fe:	b29b      	uxth	r3, r3
 8006700:	3b01      	subs	r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006708:	e025      	b.n	8006756 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670e:	b29b      	uxth	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	d120      	bne.n	8006756 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006714:	7bfb      	ldrb	r3, [r7, #15]
 8006716:	2b21      	cmp	r3, #33	; 0x21
 8006718:	d11d      	bne.n	8006756 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006728:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006738:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7ff fe36 	bl	80063c2 <HAL_I2C_MemTxCpltCallback>
}
 8006756:	bf00      	nop
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b084      	sub	sp, #16
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b22      	cmp	r3, #34	; 0x22
 8006770:	f040 80ac 	bne.w	80068cc <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006778:	b29b      	uxth	r3, r3
 800677a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2b03      	cmp	r3, #3
 8006780:	d921      	bls.n	80067c6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	691a      	ldr	r2, [r3, #16]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	b2d2      	uxtb	r2, r2
 800678e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	1c5a      	adds	r2, r3, #1
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679e:	b29b      	uxth	r3, r3
 80067a0:	3b01      	subs	r3, #1
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	f040 808c 	bne.w	80068cc <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067c2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80067c4:	e082      	b.n	80068cc <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d075      	beq.n	80068ba <I2C_MasterReceive_RXNE+0x15c>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d002      	beq.n	80067da <I2C_MasterReceive_RXNE+0x7c>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d16f      	bne.n	80068ba <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 ffb8 	bl	8007750 <I2C_WaitOnSTOPRequestThroughIT>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d142      	bne.n	800686c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067f4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006804:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	691a      	ldr	r2, [r3, #16]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	b2d2      	uxtb	r2, r2
 8006812:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006822:	b29b      	uxth	r3, r3
 8006824:	3b01      	subs	r3, #1
 8006826:	b29a      	uxth	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2220      	movs	r2, #32
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b40      	cmp	r3, #64	; 0x40
 800683e:	d10a      	bne.n	8006856 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff fdc1 	bl	80063d6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006854:	e03a      	b.n	80068cc <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2212      	movs	r2, #18
 8006862:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7fa ff61 	bl	800172c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800686a:	e02f      	b.n	80068cc <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800687a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691a      	ldr	r2, [r3, #16]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006886:	b2d2      	uxtb	r2, r2
 8006888:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006898:	b29b      	uxth	r3, r3
 800689a:	3b01      	subs	r3, #1
 800689c:	b29a      	uxth	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2220      	movs	r2, #32
 80068a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7ff fd99 	bl	80063ea <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80068b8:	e008      	b.n	80068cc <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068c8:	605a      	str	r2, [r3, #4]
}
 80068ca:	e7ff      	b.n	80068cc <I2C_MasterReceive_RXNE+0x16e>
 80068cc:	bf00      	nop
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	d11b      	bne.n	8006924 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068fa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691a      	ldr	r2, [r3, #16]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006906:	b2d2      	uxtb	r2, r2
 8006908:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006918:	b29b      	uxth	r3, r3
 800691a:	3b01      	subs	r3, #1
 800691c:	b29a      	uxth	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006922:	e0bd      	b.n	8006aa0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006928:	b29b      	uxth	r3, r3
 800692a:	2b03      	cmp	r3, #3
 800692c:	d129      	bne.n	8006982 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800693c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b04      	cmp	r3, #4
 8006942:	d00a      	beq.n	800695a <I2C_MasterReceive_BTF+0x86>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b02      	cmp	r3, #2
 8006948:	d007      	beq.n	800695a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006958:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	691a      	ldr	r2, [r3, #16]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	b2d2      	uxtb	r2, r2
 8006966:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	1c5a      	adds	r2, r3, #1
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006976:	b29b      	uxth	r3, r3
 8006978:	3b01      	subs	r3, #1
 800697a:	b29a      	uxth	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006980:	e08e      	b.n	8006aa0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006986:	b29b      	uxth	r3, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d176      	bne.n	8006a7a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d002      	beq.n	8006998 <I2C_MasterReceive_BTF+0xc4>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b10      	cmp	r3, #16
 8006996:	d108      	bne.n	80069aa <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	e019      	b.n	80069de <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d002      	beq.n	80069b6 <I2C_MasterReceive_BTF+0xe2>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d108      	bne.n	80069c8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	e00a      	b.n	80069de <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b10      	cmp	r3, #16
 80069cc:	d007      	beq.n	80069de <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069dc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	691a      	ldr	r2, [r3, #16]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	b2d2      	uxtb	r2, r2
 80069ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	3b01      	subs	r3, #1
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	691a      	ldr	r2, [r3, #16]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	b2d2      	uxtb	r2, r2
 8006a10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	3b01      	subs	r3, #1
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006a38:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b40      	cmp	r3, #64	; 0x40
 8006a4c:	d10a      	bne.n	8006a64 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7ff fcba 	bl	80063d6 <HAL_I2C_MemRxCpltCallback>
}
 8006a62:	e01d      	b.n	8006aa0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2212      	movs	r2, #18
 8006a70:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7fa fe5a 	bl	800172c <HAL_I2C_MasterRxCpltCallback>
}
 8006a78:	e012      	b.n	8006aa0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	691a      	ldr	r2, [r3, #16]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	b2d2      	uxtb	r2, r2
 8006a86:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006aa0:	bf00      	nop
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b40      	cmp	r3, #64	; 0x40
 8006aba:	d117      	bne.n	8006aec <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d109      	bne.n	8006ad8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	461a      	mov	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ad4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006ad6:	e067      	b.n	8006ba8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	f043 0301 	orr.w	r3, r3, #1
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	611a      	str	r2, [r3, #16]
}
 8006aea:	e05d      	b.n	8006ba8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006af4:	d133      	bne.n	8006b5e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b21      	cmp	r3, #33	; 0x21
 8006b00:	d109      	bne.n	8006b16 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	461a      	mov	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b12:	611a      	str	r2, [r3, #16]
 8006b14:	e008      	b.n	8006b28 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	f043 0301 	orr.w	r3, r3, #1
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d004      	beq.n	8006b3a <I2C_Master_SB+0x92>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d108      	bne.n	8006b4c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d032      	beq.n	8006ba8 <I2C_Master_SB+0x100>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d02d      	beq.n	8006ba8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b5a:	605a      	str	r2, [r3, #4]
}
 8006b5c:	e024      	b.n	8006ba8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10e      	bne.n	8006b84 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	11db      	asrs	r3, r3, #7
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	f003 0306 	and.w	r3, r3, #6
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	f063 030f 	orn	r3, r3, #15
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	611a      	str	r2, [r3, #16]
}
 8006b82:	e011      	b.n	8006ba8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d10d      	bne.n	8006ba8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	11db      	asrs	r3, r3, #7
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	f003 0306 	and.w	r3, r3, #6
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	f063 030e 	orn	r3, r3, #14
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	611a      	str	r2, [r3, #16]
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d004      	beq.n	8006bda <I2C_Master_ADD10+0x26>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d108      	bne.n	8006bec <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00c      	beq.n	8006bfc <I2C_Master_ADD10+0x48>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d007      	beq.n	8006bfc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bfa:	605a      	str	r2, [r3, #4]
  }
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b091      	sub	sp, #68	; 0x44
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c24:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b22      	cmp	r3, #34	; 0x22
 8006c30:	f040 8169 	bne.w	8006f06 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10f      	bne.n	8006c5c <I2C_Master_ADDR+0x54>
 8006c3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c40:	2b40      	cmp	r3, #64	; 0x40
 8006c42:	d10b      	bne.n	8006c5c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c44:	2300      	movs	r3, #0
 8006c46:	633b      	str	r3, [r7, #48]	; 0x30
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	633b      	str	r3, [r7, #48]	; 0x30
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	633b      	str	r3, [r7, #48]	; 0x30
 8006c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5a:	e160      	b.n	8006f1e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d11d      	bne.n	8006ca0 <I2C_Master_ADDR+0x98>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c6c:	d118      	bne.n	8006ca0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c6e:	2300      	movs	r3, #0
 8006c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c92:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	651a      	str	r2, [r3, #80]	; 0x50
 8006c9e:	e13e      	b.n	8006f1e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d113      	bne.n	8006cd2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006caa:	2300      	movs	r3, #0
 8006cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	e115      	b.n	8006efe <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	f040 808a 	bne.w	8006df2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ce4:	d137      	bne.n	8006d56 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cf4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d04:	d113      	bne.n	8006d2e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d14:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d16:	2300      	movs	r3, #0
 8006d18:	627b      	str	r3, [r7, #36]	; 0x24
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	e0e7      	b.n	8006efe <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d2e:	2300      	movs	r3, #0
 8006d30:	623b      	str	r3, [r7, #32]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	623b      	str	r3, [r7, #32]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	623b      	str	r3, [r7, #32]
 8006d42:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	e0d3      	b.n	8006efe <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d58:	2b08      	cmp	r3, #8
 8006d5a:	d02e      	beq.n	8006dba <I2C_Master_ADDR+0x1b2>
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	d02b      	beq.n	8006dba <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d64:	2b12      	cmp	r3, #18
 8006d66:	d102      	bne.n	8006d6e <I2C_Master_ADDR+0x166>
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d125      	bne.n	8006dba <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d70:	2b04      	cmp	r3, #4
 8006d72:	d00e      	beq.n	8006d92 <I2C_Master_ADDR+0x18a>
 8006d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d00b      	beq.n	8006d92 <I2C_Master_ADDR+0x18a>
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7c:	2b10      	cmp	r3, #16
 8006d7e:	d008      	beq.n	8006d92 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	e007      	b.n	8006da2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006da0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006da2:	2300      	movs	r3, #0
 8006da4:	61fb      	str	r3, [r7, #28]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	61fb      	str	r3, [r7, #28]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	61fb      	str	r3, [r7, #28]
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	e0a1      	b.n	8006efe <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dc8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dca:	2300      	movs	r3, #0
 8006dcc:	61bb      	str	r3, [r7, #24]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	61bb      	str	r3, [r7, #24]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	61bb      	str	r3, [r7, #24]
 8006dde:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	e085      	b.n	8006efe <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d14d      	bne.n	8006e98 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d016      	beq.n	8006e30 <I2C_Master_ADDR+0x228>
 8006e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d013      	beq.n	8006e30 <I2C_Master_ADDR+0x228>
 8006e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0a:	2b10      	cmp	r3, #16
 8006e0c:	d010      	beq.n	8006e30 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e1c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	e007      	b.n	8006e40 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e3e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e4e:	d117      	bne.n	8006e80 <I2C_Master_ADDR+0x278>
 8006e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e56:	d00b      	beq.n	8006e70 <I2C_Master_ADDR+0x268>
 8006e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d008      	beq.n	8006e70 <I2C_Master_ADDR+0x268>
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	d005      	beq.n	8006e70 <I2C_Master_ADDR+0x268>
 8006e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e66:	2b10      	cmp	r3, #16
 8006e68:	d002      	beq.n	8006e70 <I2C_Master_ADDR+0x268>
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6c:	2b20      	cmp	r3, #32
 8006e6e:	d107      	bne.n	8006e80 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e7e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e80:	2300      	movs	r3, #0
 8006e82:	617b      	str	r3, [r7, #20]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	617b      	str	r3, [r7, #20]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	e032      	b.n	8006efe <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ea6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eb6:	d117      	bne.n	8006ee8 <I2C_Master_ADDR+0x2e0>
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ebe:	d00b      	beq.n	8006ed8 <I2C_Master_ADDR+0x2d0>
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d008      	beq.n	8006ed8 <I2C_Master_ADDR+0x2d0>
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	d005      	beq.n	8006ed8 <I2C_Master_ADDR+0x2d0>
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	2b10      	cmp	r3, #16
 8006ed0:	d002      	beq.n	8006ed8 <I2C_Master_ADDR+0x2d0>
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed4:	2b20      	cmp	r3, #32
 8006ed6:	d107      	bne.n	8006ee8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685a      	ldr	r2, [r3, #4]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ee6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ee8:	2300      	movs	r3, #0
 8006eea:	613b      	str	r3, [r7, #16]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	613b      	str	r3, [r7, #16]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	613b      	str	r3, [r7, #16]
 8006efc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006f04:	e00b      	b.n	8006f1e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f06:	2300      	movs	r3, #0
 8006f08:	60fb      	str	r3, [r7, #12]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	60fb      	str	r3, [r7, #12]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
}
 8006f1c:	e7ff      	b.n	8006f1e <I2C_Master_ADDR+0x316>
 8006f1e:	bf00      	nop
 8006f20:	3744      	adds	r7, #68	; 0x44
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f38:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d02b      	beq.n	8006f9c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	781a      	ldrb	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f54:	1c5a      	adds	r2, r3, #1
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	3b01      	subs	r3, #1
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d114      	bne.n	8006f9c <I2C_SlaveTransmit_TXE+0x72>
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
 8006f74:	2b29      	cmp	r3, #41	; 0x29
 8006f76:	d111      	bne.n	8006f9c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f86:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2221      	movs	r2, #33	; 0x21
 8006f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2228      	movs	r2, #40	; 0x28
 8006f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7ff f9e7 	bl	800636a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006f9c:	bf00      	nop
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d011      	beq.n	8006fda <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	781a      	ldrb	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006fda:	bf00      	nop
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d02c      	beq.n	800705a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	691a      	ldr	r2, [r3, #16]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700a:	b2d2      	uxtb	r2, r2
 800700c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007012:	1c5a      	adds	r2, r3, #1
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800701c:	b29b      	uxth	r3, r3
 800701e:	3b01      	subs	r3, #1
 8007020:	b29a      	uxth	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800702a:	b29b      	uxth	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d114      	bne.n	800705a <I2C_SlaveReceive_RXNE+0x74>
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	2b2a      	cmp	r3, #42	; 0x2a
 8007034:	d111      	bne.n	800705a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007044:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2222      	movs	r2, #34	; 0x22
 800704a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2228      	movs	r2, #40	; 0x28
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7ff f992 	bl	800637e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800705a:	bf00      	nop
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007062:	b480      	push	{r7}
 8007064:	b083      	sub	sp, #12
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800706e:	b29b      	uxth	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	d012      	beq.n	800709a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	691a      	ldr	r2, [r3, #16]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	b2d2      	uxtb	r2, r2
 8007080:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007090:	b29b      	uxth	r3, r3
 8007092:	3b01      	subs	r3, #1
 8007094:	b29a      	uxth	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800709a:	bf00      	nop
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80070b0:	2300      	movs	r3, #0
 80070b2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80070c0:	2b28      	cmp	r3, #40	; 0x28
 80070c2:	d127      	bne.n	8007114 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070d2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	089b      	lsrs	r3, r3, #2
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80070e0:	2301      	movs	r3, #1
 80070e2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	09db      	lsrs	r3, r3, #7
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d103      	bne.n	80070f8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	81bb      	strh	r3, [r7, #12]
 80070f6:	e002      	b.n	80070fe <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007106:	89ba      	ldrh	r2, [r7, #12]
 8007108:	7bfb      	ldrb	r3, [r7, #15]
 800710a:	4619      	mov	r1, r3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f7ff f940 	bl	8006392 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007112:	e00e      	b.n	8007132 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007114:	2300      	movs	r3, #0
 8007116:	60bb      	str	r3, [r7, #8]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	60bb      	str	r3, [r7, #8]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	60bb      	str	r3, [r7, #8]
 8007128:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007132:	bf00      	nop
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
	...

0800713c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800714a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800715a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800715c:	2300      	movs	r3, #0
 800715e:	60bb      	str	r3, [r7, #8]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	60bb      	str	r3, [r7, #8]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0201 	orr.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007188:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007198:	d172      	bne.n	8007280 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800719a:	7bfb      	ldrb	r3, [r7, #15]
 800719c:	2b22      	cmp	r3, #34	; 0x22
 800719e:	d002      	beq.n	80071a6 <I2C_Slave_STOPF+0x6a>
 80071a0:	7bfb      	ldrb	r3, [r7, #15]
 80071a2:	2b2a      	cmp	r3, #42	; 0x2a
 80071a4:	d135      	bne.n	8007212 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d005      	beq.n	80071ca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	f043 0204 	orr.w	r2, r3, #4
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe f878 	bl	80052d4 <HAL_DMA_GetState>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d049      	beq.n	800727e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	4a69      	ldr	r2, [pc, #420]	; (8007394 <I2C_Slave_STOPF+0x258>)
 80071f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fd fec0 	bl	8004f7c <HAL_DMA_Abort_IT>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d03d      	beq.n	800727e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800720c:	4610      	mov	r0, r2
 800720e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007210:	e035      	b.n	800727e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	b29a      	uxth	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007224:	b29b      	uxth	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d005      	beq.n	8007236 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	f043 0204 	orr.w	r2, r3, #4
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007244:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800724a:	4618      	mov	r0, r3
 800724c:	f7fe f842 	bl	80052d4 <HAL_DMA_GetState>
 8007250:	4603      	mov	r3, r0
 8007252:	2b01      	cmp	r3, #1
 8007254:	d014      	beq.n	8007280 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725a:	4a4e      	ldr	r2, [pc, #312]	; (8007394 <I2C_Slave_STOPF+0x258>)
 800725c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007262:	4618      	mov	r0, r3
 8007264:	f7fd fe8a 	bl	8004f7c <HAL_DMA_Abort_IT>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d008      	beq.n	8007280 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007278:	4610      	mov	r0, r2
 800727a:	4798      	blx	r3
 800727c:	e000      	b.n	8007280 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800727e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007284:	b29b      	uxth	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d03e      	beq.n	8007308 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	695b      	ldr	r3, [r3, #20]
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b04      	cmp	r3, #4
 8007296:	d112      	bne.n	80072be <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	691a      	ldr	r2, [r3, #16]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a2:	b2d2      	uxtb	r2, r2
 80072a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072aa:	1c5a      	adds	r2, r3, #1
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	3b01      	subs	r3, #1
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c8:	2b40      	cmp	r3, #64	; 0x40
 80072ca:	d112      	bne.n	80072f2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	691a      	ldr	r2, [r3, #16]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d6:	b2d2      	uxtb	r2, r2
 80072d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	3b01      	subs	r3, #1
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d005      	beq.n	8007308 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007300:	f043 0204 	orr.w	r2, r3, #4
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730c:	2b00      	cmp	r3, #0
 800730e:	d003      	beq.n	8007318 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f843 	bl	800739c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007316:	e039      	b.n	800738c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	2b2a      	cmp	r3, #42	; 0x2a
 800731c:	d109      	bne.n	8007332 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2228      	movs	r2, #40	; 0x28
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7ff f826 	bl	800637e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b28      	cmp	r3, #40	; 0x28
 800733c:	d111      	bne.n	8007362 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a15      	ldr	r2, [pc, #84]	; (8007398 <I2C_Slave_STOPF+0x25c>)
 8007342:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2220      	movs	r2, #32
 800734e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff f827 	bl	80063ae <HAL_I2C_ListenCpltCallback>
}
 8007360:	e014      	b.n	800738c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007366:	2b22      	cmp	r3, #34	; 0x22
 8007368:	d002      	beq.n	8007370 <I2C_Slave_STOPF+0x234>
 800736a:	7bfb      	ldrb	r3, [r7, #15]
 800736c:	2b22      	cmp	r3, #34	; 0x22
 800736e:	d10d      	bne.n	800738c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2220      	movs	r2, #32
 800737a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7fe fff9 	bl	800637e <HAL_I2C_SlaveRxCpltCallback>
}
 800738c:	bf00      	nop
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	08007601 	.word	0x08007601
 8007398:	ffff0000 	.word	0xffff0000

0800739c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
 80073b6:	2b10      	cmp	r3, #16
 80073b8:	d002      	beq.n	80073c0 <I2C_ITError+0x24>
 80073ba:	7bbb      	ldrb	r3, [r7, #14]
 80073bc:	2b40      	cmp	r3, #64	; 0x40
 80073be:	d10a      	bne.n	80073d6 <I2C_ITError+0x3a>
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	2b22      	cmp	r3, #34	; 0x22
 80073c4:	d107      	bne.n	80073d6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073d4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80073dc:	2b28      	cmp	r3, #40	; 0x28
 80073de:	d107      	bne.n	80073f0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2228      	movs	r2, #40	; 0x28
 80073ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80073ee:	e015      	b.n	800741c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073fe:	d00a      	beq.n	8007416 <I2C_ITError+0x7a>
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	2b60      	cmp	r3, #96	; 0x60
 8007404:	d007      	beq.n	8007416 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2220      	movs	r2, #32
 800740a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800742a:	d162      	bne.n	80074f2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	685a      	ldr	r2, [r3, #4]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800743a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b01      	cmp	r3, #1
 8007448:	d020      	beq.n	800748c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800744e:	4a6a      	ldr	r2, [pc, #424]	; (80075f8 <I2C_ITError+0x25c>)
 8007450:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007456:	4618      	mov	r0, r3
 8007458:	f7fd fd90 	bl	8004f7c <HAL_DMA_Abort_IT>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 8089 	beq.w	8007576 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0201 	bic.w	r2, r2, #1
 8007472:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2220      	movs	r2, #32
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007486:	4610      	mov	r0, r2
 8007488:	4798      	blx	r3
 800748a:	e074      	b.n	8007576 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007490:	4a59      	ldr	r2, [pc, #356]	; (80075f8 <I2C_ITError+0x25c>)
 8007492:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007498:	4618      	mov	r0, r3
 800749a:	f7fd fd6f 	bl	8004f7c <HAL_DMA_Abort_IT>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d068      	beq.n	8007576 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ae:	2b40      	cmp	r3, #64	; 0x40
 80074b0:	d10b      	bne.n	80074ca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	691a      	ldr	r2, [r3, #16]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	b2d2      	uxtb	r2, r2
 80074be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	1c5a      	adds	r2, r3, #1
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 0201 	bic.w	r2, r2, #1
 80074d8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2220      	movs	r2, #32
 80074de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074ec:	4610      	mov	r0, r2
 80074ee:	4798      	blx	r3
 80074f0:	e041      	b.n	8007576 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b60      	cmp	r3, #96	; 0x60
 80074fc:	d125      	bne.n	800754a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2220      	movs	r2, #32
 8007502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007516:	2b40      	cmp	r3, #64	; 0x40
 8007518:	d10b      	bne.n	8007532 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	691a      	ldr	r2, [r3, #16]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	b2d2      	uxtb	r2, r2
 8007526:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 0201 	bic.w	r2, r2, #1
 8007540:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7fe ff5b 	bl	80063fe <HAL_I2C_AbortCpltCallback>
 8007548:	e015      	b.n	8007576 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007554:	2b40      	cmp	r3, #64	; 0x40
 8007556:	d10b      	bne.n	8007570 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	691a      	ldr	r2, [r3, #16]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	b2d2      	uxtb	r2, r2
 8007564:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756a:	1c5a      	adds	r2, r3, #1
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7fe ff3a 	bl	80063ea <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10e      	bne.n	80075a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800758c:	2b00      	cmp	r3, #0
 800758e:	d109      	bne.n	80075a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007596:	2b00      	cmp	r3, #0
 8007598:	d104      	bne.n	80075a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d007      	beq.n	80075b4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c0:	f003 0304 	and.w	r3, r3, #4
 80075c4:	2b04      	cmp	r3, #4
 80075c6:	d113      	bne.n	80075f0 <I2C_ITError+0x254>
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	2b28      	cmp	r3, #40	; 0x28
 80075cc:	d110      	bne.n	80075f0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a0a      	ldr	r2, [pc, #40]	; (80075fc <I2C_ITError+0x260>)
 80075d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2220      	movs	r2, #32
 80075de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7fe fedf 	bl	80063ae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075f0:	bf00      	nop
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	08007601 	.word	0x08007601
 80075fc:	ffff0000 	.word	0xffff0000

08007600 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007608:	2300      	movs	r3, #0
 800760a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007610:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007618:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800761a:	4b4b      	ldr	r3, [pc, #300]	; (8007748 <I2C_DMAAbort+0x148>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	08db      	lsrs	r3, r3, #3
 8007620:	4a4a      	ldr	r2, [pc, #296]	; (800774c <I2C_DMAAbort+0x14c>)
 8007622:	fba2 2303 	umull	r2, r3, r2, r3
 8007626:	0a1a      	lsrs	r2, r3, #8
 8007628:	4613      	mov	r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	4413      	add	r3, r2
 800762e:	00da      	lsls	r2, r3, #3
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d106      	bne.n	8007648 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763e:	f043 0220 	orr.w	r2, r3, #32
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007646:	e00a      	b.n	800765e <I2C_DMAAbort+0x5e>
    }
    count--;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	3b01      	subs	r3, #1
 800764c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800765c:	d0ea      	beq.n	8007634 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800766a:	2200      	movs	r2, #0
 800766c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767a:	2200      	movs	r2, #0
 800767c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800768c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2200      	movs	r2, #0
 8007692:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007698:	2b00      	cmp	r3, #0
 800769a:	d003      	beq.n	80076a4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a0:	2200      	movs	r2, #0
 80076a2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d003      	beq.n	80076b4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b0:	2200      	movs	r2, #0
 80076b2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 0201 	bic.w	r2, r2, #1
 80076c2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b60      	cmp	r3, #96	; 0x60
 80076ce:	d10e      	bne.n	80076ee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	2220      	movs	r2, #32
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	2200      	movs	r2, #0
 80076e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80076e6:	6978      	ldr	r0, [r7, #20]
 80076e8:	f7fe fe89 	bl	80063fe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80076ec:	e027      	b.n	800773e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80076ee:	7cfb      	ldrb	r3, [r7, #19]
 80076f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80076f4:	2b28      	cmp	r3, #40	; 0x28
 80076f6:	d117      	bne.n	8007728 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f042 0201 	orr.w	r2, r2, #1
 8007706:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007716:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	2200      	movs	r2, #0
 800771c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2228      	movs	r2, #40	; 0x28
 8007722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007726:	e007      	b.n	8007738 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	2220      	movs	r2, #32
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007738:	6978      	ldr	r0, [r7, #20]
 800773a:	f7fe fe56 	bl	80063ea <HAL_I2C_ErrorCallback>
}
 800773e:	bf00      	nop
 8007740:	3718      	adds	r7, #24
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	20000034 	.word	0x20000034
 800774c:	14f8b589 	.word	0x14f8b589

08007750 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800775c:	4b13      	ldr	r3, [pc, #76]	; (80077ac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	08db      	lsrs	r3, r3, #3
 8007762:	4a13      	ldr	r2, [pc, #76]	; (80077b0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007764:	fba2 2303 	umull	r2, r3, r2, r3
 8007768:	0a1a      	lsrs	r2, r3, #8
 800776a:	4613      	mov	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4413      	add	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3b01      	subs	r3, #1
 8007776:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d107      	bne.n	800778e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007782:	f043 0220 	orr.w	r2, r3, #32
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e008      	b.n	80077a0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800779c:	d0e9      	beq.n	8007772 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	20000034 	.word	0x20000034
 80077b0:	14f8b589 	.word	0x14f8b589

080077b4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80077c4:	d103      	bne.n	80077ce <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80077cc:	e007      	b.n	80077de <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80077d6:	d102      	bne.n	80077de <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2208      	movs	r2, #8
 80077dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80077de:	bf00      	nop
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
	...

080077ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e267      	b.n	8007cce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	d075      	beq.n	80078f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800780a:	4b88      	ldr	r3, [pc, #544]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f003 030c 	and.w	r3, r3, #12
 8007812:	2b04      	cmp	r3, #4
 8007814:	d00c      	beq.n	8007830 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007816:	4b85      	ldr	r3, [pc, #532]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800781e:	2b08      	cmp	r3, #8
 8007820:	d112      	bne.n	8007848 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007822:	4b82      	ldr	r3, [pc, #520]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800782a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800782e:	d10b      	bne.n	8007848 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007830:	4b7e      	ldr	r3, [pc, #504]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d05b      	beq.n	80078f4 <HAL_RCC_OscConfig+0x108>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d157      	bne.n	80078f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e242      	b.n	8007cce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007850:	d106      	bne.n	8007860 <HAL_RCC_OscConfig+0x74>
 8007852:	4b76      	ldr	r3, [pc, #472]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a75      	ldr	r2, [pc, #468]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 8007858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800785c:	6013      	str	r3, [r2, #0]
 800785e:	e01d      	b.n	800789c <HAL_RCC_OscConfig+0xb0>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007868:	d10c      	bne.n	8007884 <HAL_RCC_OscConfig+0x98>
 800786a:	4b70      	ldr	r3, [pc, #448]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a6f      	ldr	r2, [pc, #444]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 8007870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007874:	6013      	str	r3, [r2, #0]
 8007876:	4b6d      	ldr	r3, [pc, #436]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a6c      	ldr	r2, [pc, #432]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 800787c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007880:	6013      	str	r3, [r2, #0]
 8007882:	e00b      	b.n	800789c <HAL_RCC_OscConfig+0xb0>
 8007884:	4b69      	ldr	r3, [pc, #420]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a68      	ldr	r2, [pc, #416]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 800788a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800788e:	6013      	str	r3, [r2, #0]
 8007890:	4b66      	ldr	r3, [pc, #408]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a65      	ldr	r2, [pc, #404]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 8007896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800789a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d013      	beq.n	80078cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078a4:	f7fd f906 	bl	8004ab4 <HAL_GetTick>
 80078a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078aa:	e008      	b.n	80078be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078ac:	f7fd f902 	bl	8004ab4 <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	2b64      	cmp	r3, #100	; 0x64
 80078b8:	d901      	bls.n	80078be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e207      	b.n	8007cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078be:	4b5b      	ldr	r3, [pc, #364]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0f0      	beq.n	80078ac <HAL_RCC_OscConfig+0xc0>
 80078ca:	e014      	b.n	80078f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078cc:	f7fd f8f2 	bl	8004ab4 <HAL_GetTick>
 80078d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078d2:	e008      	b.n	80078e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078d4:	f7fd f8ee 	bl	8004ab4 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	2b64      	cmp	r3, #100	; 0x64
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e1f3      	b.n	8007cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078e6:	4b51      	ldr	r3, [pc, #324]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1f0      	bne.n	80078d4 <HAL_RCC_OscConfig+0xe8>
 80078f2:	e000      	b.n	80078f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d063      	beq.n	80079ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007902:	4b4a      	ldr	r3, [pc, #296]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f003 030c 	and.w	r3, r3, #12
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00b      	beq.n	8007926 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800790e:	4b47      	ldr	r3, [pc, #284]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007916:	2b08      	cmp	r3, #8
 8007918:	d11c      	bne.n	8007954 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800791a:	4b44      	ldr	r3, [pc, #272]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d116      	bne.n	8007954 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007926:	4b41      	ldr	r3, [pc, #260]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0302 	and.w	r3, r3, #2
 800792e:	2b00      	cmp	r3, #0
 8007930:	d005      	beq.n	800793e <HAL_RCC_OscConfig+0x152>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d001      	beq.n	800793e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e1c7      	b.n	8007cce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800793e:	4b3b      	ldr	r3, [pc, #236]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	00db      	lsls	r3, r3, #3
 800794c:	4937      	ldr	r1, [pc, #220]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 800794e:	4313      	orrs	r3, r2
 8007950:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007952:	e03a      	b.n	80079ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d020      	beq.n	800799e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800795c:	4b34      	ldr	r3, [pc, #208]	; (8007a30 <HAL_RCC_OscConfig+0x244>)
 800795e:	2201      	movs	r2, #1
 8007960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007962:	f7fd f8a7 	bl	8004ab4 <HAL_GetTick>
 8007966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007968:	e008      	b.n	800797c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800796a:	f7fd f8a3 	bl	8004ab4 <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	2b02      	cmp	r3, #2
 8007976:	d901      	bls.n	800797c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e1a8      	b.n	8007cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800797c:	4b2b      	ldr	r3, [pc, #172]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0302 	and.w	r3, r3, #2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d0f0      	beq.n	800796a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007988:	4b28      	ldr	r3, [pc, #160]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	00db      	lsls	r3, r3, #3
 8007996:	4925      	ldr	r1, [pc, #148]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 8007998:	4313      	orrs	r3, r2
 800799a:	600b      	str	r3, [r1, #0]
 800799c:	e015      	b.n	80079ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800799e:	4b24      	ldr	r3, [pc, #144]	; (8007a30 <HAL_RCC_OscConfig+0x244>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a4:	f7fd f886 	bl	8004ab4 <HAL_GetTick>
 80079a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079aa:	e008      	b.n	80079be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079ac:	f7fd f882 	bl	8004ab4 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d901      	bls.n	80079be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e187      	b.n	8007cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079be:	4b1b      	ldr	r3, [pc, #108]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0302 	and.w	r3, r3, #2
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1f0      	bne.n	80079ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 0308 	and.w	r3, r3, #8
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d036      	beq.n	8007a44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d016      	beq.n	8007a0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079de:	4b15      	ldr	r3, [pc, #84]	; (8007a34 <HAL_RCC_OscConfig+0x248>)
 80079e0:	2201      	movs	r2, #1
 80079e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079e4:	f7fd f866 	bl	8004ab4 <HAL_GetTick>
 80079e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079ea:	e008      	b.n	80079fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079ec:	f7fd f862 	bl	8004ab4 <HAL_GetTick>
 80079f0:	4602      	mov	r2, r0
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d901      	bls.n	80079fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e167      	b.n	8007cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079fe:	4b0b      	ldr	r3, [pc, #44]	; (8007a2c <HAL_RCC_OscConfig+0x240>)
 8007a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d0f0      	beq.n	80079ec <HAL_RCC_OscConfig+0x200>
 8007a0a:	e01b      	b.n	8007a44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a0c:	4b09      	ldr	r3, [pc, #36]	; (8007a34 <HAL_RCC_OscConfig+0x248>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a12:	f7fd f84f 	bl	8004ab4 <HAL_GetTick>
 8007a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a18:	e00e      	b.n	8007a38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a1a:	f7fd f84b 	bl	8004ab4 <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d907      	bls.n	8007a38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e150      	b.n	8007cce <HAL_RCC_OscConfig+0x4e2>
 8007a2c:	40023800 	.word	0x40023800
 8007a30:	42470000 	.word	0x42470000
 8007a34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a38:	4b88      	ldr	r3, [pc, #544]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a3c:	f003 0302 	and.w	r3, r3, #2
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1ea      	bne.n	8007a1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0304 	and.w	r3, r3, #4
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f000 8097 	beq.w	8007b80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a52:	2300      	movs	r3, #0
 8007a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a56:	4b81      	ldr	r3, [pc, #516]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10f      	bne.n	8007a82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a62:	2300      	movs	r3, #0
 8007a64:	60bb      	str	r3, [r7, #8]
 8007a66:	4b7d      	ldr	r3, [pc, #500]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6a:	4a7c      	ldr	r2, [pc, #496]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a70:	6413      	str	r3, [r2, #64]	; 0x40
 8007a72:	4b7a      	ldr	r3, [pc, #488]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a7a:	60bb      	str	r3, [r7, #8]
 8007a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a82:	4b77      	ldr	r3, [pc, #476]	; (8007c60 <HAL_RCC_OscConfig+0x474>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d118      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a8e:	4b74      	ldr	r3, [pc, #464]	; (8007c60 <HAL_RCC_OscConfig+0x474>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a73      	ldr	r2, [pc, #460]	; (8007c60 <HAL_RCC_OscConfig+0x474>)
 8007a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a9a:	f7fd f80b 	bl	8004ab4 <HAL_GetTick>
 8007a9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aa0:	e008      	b.n	8007ab4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aa2:	f7fd f807 	bl	8004ab4 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d901      	bls.n	8007ab4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e10c      	b.n	8007cce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ab4:	4b6a      	ldr	r3, [pc, #424]	; (8007c60 <HAL_RCC_OscConfig+0x474>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d0f0      	beq.n	8007aa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d106      	bne.n	8007ad6 <HAL_RCC_OscConfig+0x2ea>
 8007ac8:	4b64      	ldr	r3, [pc, #400]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007acc:	4a63      	ldr	r2, [pc, #396]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007ace:	f043 0301 	orr.w	r3, r3, #1
 8007ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ad4:	e01c      	b.n	8007b10 <HAL_RCC_OscConfig+0x324>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	2b05      	cmp	r3, #5
 8007adc:	d10c      	bne.n	8007af8 <HAL_RCC_OscConfig+0x30c>
 8007ade:	4b5f      	ldr	r3, [pc, #380]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae2:	4a5e      	ldr	r2, [pc, #376]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007ae4:	f043 0304 	orr.w	r3, r3, #4
 8007ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8007aea:	4b5c      	ldr	r3, [pc, #368]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aee:	4a5b      	ldr	r2, [pc, #364]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007af0:	f043 0301 	orr.w	r3, r3, #1
 8007af4:	6713      	str	r3, [r2, #112]	; 0x70
 8007af6:	e00b      	b.n	8007b10 <HAL_RCC_OscConfig+0x324>
 8007af8:	4b58      	ldr	r3, [pc, #352]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afc:	4a57      	ldr	r2, [pc, #348]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007afe:	f023 0301 	bic.w	r3, r3, #1
 8007b02:	6713      	str	r3, [r2, #112]	; 0x70
 8007b04:	4b55      	ldr	r3, [pc, #340]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b08:	4a54      	ldr	r2, [pc, #336]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007b0a:	f023 0304 	bic.w	r3, r3, #4
 8007b0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d015      	beq.n	8007b44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b18:	f7fc ffcc 	bl	8004ab4 <HAL_GetTick>
 8007b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b1e:	e00a      	b.n	8007b36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b20:	f7fc ffc8 	bl	8004ab4 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d901      	bls.n	8007b36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e0cb      	b.n	8007cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b36:	4b49      	ldr	r3, [pc, #292]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3a:	f003 0302 	and.w	r3, r3, #2
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d0ee      	beq.n	8007b20 <HAL_RCC_OscConfig+0x334>
 8007b42:	e014      	b.n	8007b6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b44:	f7fc ffb6 	bl	8004ab4 <HAL_GetTick>
 8007b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b4a:	e00a      	b.n	8007b62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b4c:	f7fc ffb2 	bl	8004ab4 <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d901      	bls.n	8007b62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e0b5      	b.n	8007cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b62:	4b3e      	ldr	r3, [pc, #248]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1ee      	bne.n	8007b4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d105      	bne.n	8007b80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b74:	4b39      	ldr	r3, [pc, #228]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b78:	4a38      	ldr	r2, [pc, #224]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 80a1 	beq.w	8007ccc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b8a:	4b34      	ldr	r3, [pc, #208]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	f003 030c 	and.w	r3, r3, #12
 8007b92:	2b08      	cmp	r3, #8
 8007b94:	d05c      	beq.n	8007c50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d141      	bne.n	8007c22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b9e:	4b31      	ldr	r3, [pc, #196]	; (8007c64 <HAL_RCC_OscConfig+0x478>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ba4:	f7fc ff86 	bl	8004ab4 <HAL_GetTick>
 8007ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007baa:	e008      	b.n	8007bbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bac:	f7fc ff82 	bl	8004ab4 <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d901      	bls.n	8007bbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e087      	b.n	8007cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bbe:	4b27      	ldr	r3, [pc, #156]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1f0      	bne.n	8007bac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	69da      	ldr	r2, [r3, #28]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd8:	019b      	lsls	r3, r3, #6
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be0:	085b      	lsrs	r3, r3, #1
 8007be2:	3b01      	subs	r3, #1
 8007be4:	041b      	lsls	r3, r3, #16
 8007be6:	431a      	orrs	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bec:	061b      	lsls	r3, r3, #24
 8007bee:	491b      	ldr	r1, [pc, #108]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bf4:	4b1b      	ldr	r3, [pc, #108]	; (8007c64 <HAL_RCC_OscConfig+0x478>)
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bfa:	f7fc ff5b 	bl	8004ab4 <HAL_GetTick>
 8007bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c00:	e008      	b.n	8007c14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c02:	f7fc ff57 	bl	8004ab4 <HAL_GetTick>
 8007c06:	4602      	mov	r2, r0
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d901      	bls.n	8007c14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e05c      	b.n	8007cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c14:	4b11      	ldr	r3, [pc, #68]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d0f0      	beq.n	8007c02 <HAL_RCC_OscConfig+0x416>
 8007c20:	e054      	b.n	8007ccc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c22:	4b10      	ldr	r3, [pc, #64]	; (8007c64 <HAL_RCC_OscConfig+0x478>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c28:	f7fc ff44 	bl	8004ab4 <HAL_GetTick>
 8007c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c2e:	e008      	b.n	8007c42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c30:	f7fc ff40 	bl	8004ab4 <HAL_GetTick>
 8007c34:	4602      	mov	r2, r0
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d901      	bls.n	8007c42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e045      	b.n	8007cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c42:	4b06      	ldr	r3, [pc, #24]	; (8007c5c <HAL_RCC_OscConfig+0x470>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1f0      	bne.n	8007c30 <HAL_RCC_OscConfig+0x444>
 8007c4e:	e03d      	b.n	8007ccc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d107      	bne.n	8007c68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e038      	b.n	8007cce <HAL_RCC_OscConfig+0x4e2>
 8007c5c:	40023800 	.word	0x40023800
 8007c60:	40007000 	.word	0x40007000
 8007c64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c68:	4b1b      	ldr	r3, [pc, #108]	; (8007cd8 <HAL_RCC_OscConfig+0x4ec>)
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d028      	beq.n	8007cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d121      	bne.n	8007cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d11a      	bne.n	8007cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c98:	4013      	ands	r3, r2
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d111      	bne.n	8007cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cae:	085b      	lsrs	r3, r3, #1
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d107      	bne.n	8007cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d001      	beq.n	8007ccc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e000      	b.n	8007cce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3718      	adds	r7, #24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	40023800 	.word	0x40023800

08007cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e0cc      	b.n	8007e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cf0:	4b68      	ldr	r3, [pc, #416]	; (8007e94 <HAL_RCC_ClockConfig+0x1b8>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0307 	and.w	r3, r3, #7
 8007cf8:	683a      	ldr	r2, [r7, #0]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d90c      	bls.n	8007d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cfe:	4b65      	ldr	r3, [pc, #404]	; (8007e94 <HAL_RCC_ClockConfig+0x1b8>)
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	b2d2      	uxtb	r2, r2
 8007d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d06:	4b63      	ldr	r3, [pc, #396]	; (8007e94 <HAL_RCC_ClockConfig+0x1b8>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 0307 	and.w	r3, r3, #7
 8007d0e:	683a      	ldr	r2, [r7, #0]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d001      	beq.n	8007d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e0b8      	b.n	8007e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0302 	and.w	r3, r3, #2
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d020      	beq.n	8007d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0304 	and.w	r3, r3, #4
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d005      	beq.n	8007d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d30:	4b59      	ldr	r3, [pc, #356]	; (8007e98 <HAL_RCC_ClockConfig+0x1bc>)
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	4a58      	ldr	r2, [pc, #352]	; (8007e98 <HAL_RCC_ClockConfig+0x1bc>)
 8007d36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0308 	and.w	r3, r3, #8
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d005      	beq.n	8007d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d48:	4b53      	ldr	r3, [pc, #332]	; (8007e98 <HAL_RCC_ClockConfig+0x1bc>)
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	4a52      	ldr	r2, [pc, #328]	; (8007e98 <HAL_RCC_ClockConfig+0x1bc>)
 8007d4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d54:	4b50      	ldr	r3, [pc, #320]	; (8007e98 <HAL_RCC_ClockConfig+0x1bc>)
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	494d      	ldr	r1, [pc, #308]	; (8007e98 <HAL_RCC_ClockConfig+0x1bc>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0301 	and.w	r3, r3, #1
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d044      	beq.n	8007dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d107      	bne.n	8007d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d7a:	4b47      	ldr	r3, [pc, #284]	; (8007e98 <HAL_RCC_ClockConfig+0x1bc>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d119      	bne.n	8007dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e07f      	b.n	8007e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d003      	beq.n	8007d9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	d107      	bne.n	8007daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d9a:	4b3f      	ldr	r3, [pc, #252]	; (8007e98 <HAL_RCC_ClockConfig+0x1bc>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d109      	bne.n	8007dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e06f      	b.n	8007e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007daa:	4b3b      	ldr	r3, [pc, #236]	; (8007e98 <HAL_RCC_ClockConfig+0x1bc>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e067      	b.n	8007e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007dba:	4b37      	ldr	r3, [pc, #220]	; (8007e98 <HAL_RCC_ClockConfig+0x1bc>)
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f023 0203 	bic.w	r2, r3, #3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	4934      	ldr	r1, [pc, #208]	; (8007e98 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007dcc:	f7fc fe72 	bl	8004ab4 <HAL_GetTick>
 8007dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dd2:	e00a      	b.n	8007dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dd4:	f7fc fe6e 	bl	8004ab4 <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d901      	bls.n	8007dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e04f      	b.n	8007e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dea:	4b2b      	ldr	r3, [pc, #172]	; (8007e98 <HAL_RCC_ClockConfig+0x1bc>)
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f003 020c 	and.w	r2, r3, #12
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d1eb      	bne.n	8007dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007dfc:	4b25      	ldr	r3, [pc, #148]	; (8007e94 <HAL_RCC_ClockConfig+0x1b8>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 0307 	and.w	r3, r3, #7
 8007e04:	683a      	ldr	r2, [r7, #0]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d20c      	bcs.n	8007e24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e0a:	4b22      	ldr	r3, [pc, #136]	; (8007e94 <HAL_RCC_ClockConfig+0x1b8>)
 8007e0c:	683a      	ldr	r2, [r7, #0]
 8007e0e:	b2d2      	uxtb	r2, r2
 8007e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e12:	4b20      	ldr	r3, [pc, #128]	; (8007e94 <HAL_RCC_ClockConfig+0x1b8>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0307 	and.w	r3, r3, #7
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d001      	beq.n	8007e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e032      	b.n	8007e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0304 	and.w	r3, r3, #4
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d008      	beq.n	8007e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e30:	4b19      	ldr	r3, [pc, #100]	; (8007e98 <HAL_RCC_ClockConfig+0x1bc>)
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	4916      	ldr	r1, [pc, #88]	; (8007e98 <HAL_RCC_ClockConfig+0x1bc>)
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0308 	and.w	r3, r3, #8
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d009      	beq.n	8007e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e4e:	4b12      	ldr	r3, [pc, #72]	; (8007e98 <HAL_RCC_ClockConfig+0x1bc>)
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	00db      	lsls	r3, r3, #3
 8007e5c:	490e      	ldr	r1, [pc, #56]	; (8007e98 <HAL_RCC_ClockConfig+0x1bc>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e62:	f000 f821 	bl	8007ea8 <HAL_RCC_GetSysClockFreq>
 8007e66:	4602      	mov	r2, r0
 8007e68:	4b0b      	ldr	r3, [pc, #44]	; (8007e98 <HAL_RCC_ClockConfig+0x1bc>)
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	091b      	lsrs	r3, r3, #4
 8007e6e:	f003 030f 	and.w	r3, r3, #15
 8007e72:	490a      	ldr	r1, [pc, #40]	; (8007e9c <HAL_RCC_ClockConfig+0x1c0>)
 8007e74:	5ccb      	ldrb	r3, [r1, r3]
 8007e76:	fa22 f303 	lsr.w	r3, r2, r3
 8007e7a:	4a09      	ldr	r2, [pc, #36]	; (8007ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8007e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e7e:	4b09      	ldr	r3, [pc, #36]	; (8007ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fb fd64 	bl	8003950 <HAL_InitTick>

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	40023c00 	.word	0x40023c00
 8007e98:	40023800 	.word	0x40023800
 8007e9c:	0800d54c 	.word	0x0800d54c
 8007ea0:	20000034 	.word	0x20000034
 8007ea4:	20000038 	.word	0x20000038

08007ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007eac:	b090      	sub	sp, #64	; 0x40
 8007eae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eb8:	2300      	movs	r3, #0
 8007eba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ec0:	4b59      	ldr	r3, [pc, #356]	; (8008028 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f003 030c 	and.w	r3, r3, #12
 8007ec8:	2b08      	cmp	r3, #8
 8007eca:	d00d      	beq.n	8007ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8007ecc:	2b08      	cmp	r3, #8
 8007ece:	f200 80a1 	bhi.w	8008014 <HAL_RCC_GetSysClockFreq+0x16c>
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d002      	beq.n	8007edc <HAL_RCC_GetSysClockFreq+0x34>
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	d003      	beq.n	8007ee2 <HAL_RCC_GetSysClockFreq+0x3a>
 8007eda:	e09b      	b.n	8008014 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007edc:	4b53      	ldr	r3, [pc, #332]	; (800802c <HAL_RCC_GetSysClockFreq+0x184>)
 8007ede:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007ee0:	e09b      	b.n	800801a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ee2:	4b53      	ldr	r3, [pc, #332]	; (8008030 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ee4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007ee6:	e098      	b.n	800801a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ee8:	4b4f      	ldr	r3, [pc, #316]	; (8008028 <HAL_RCC_GetSysClockFreq+0x180>)
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ef0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ef2:	4b4d      	ldr	r3, [pc, #308]	; (8008028 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d028      	beq.n	8007f50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007efe:	4b4a      	ldr	r3, [pc, #296]	; (8008028 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	099b      	lsrs	r3, r3, #6
 8007f04:	2200      	movs	r2, #0
 8007f06:	623b      	str	r3, [r7, #32]
 8007f08:	627a      	str	r2, [r7, #36]	; 0x24
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007f10:	2100      	movs	r1, #0
 8007f12:	4b47      	ldr	r3, [pc, #284]	; (8008030 <HAL_RCC_GetSysClockFreq+0x188>)
 8007f14:	fb03 f201 	mul.w	r2, r3, r1
 8007f18:	2300      	movs	r3, #0
 8007f1a:	fb00 f303 	mul.w	r3, r0, r3
 8007f1e:	4413      	add	r3, r2
 8007f20:	4a43      	ldr	r2, [pc, #268]	; (8008030 <HAL_RCC_GetSysClockFreq+0x188>)
 8007f22:	fba0 1202 	umull	r1, r2, r0, r2
 8007f26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f28:	460a      	mov	r2, r1
 8007f2a:	62ba      	str	r2, [r7, #40]	; 0x28
 8007f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f2e:	4413      	add	r3, r2
 8007f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f34:	2200      	movs	r2, #0
 8007f36:	61bb      	str	r3, [r7, #24]
 8007f38:	61fa      	str	r2, [r7, #28]
 8007f3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007f42:	f7f8 fe13 	bl	8000b6c <__aeabi_uldivmod>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f4e:	e053      	b.n	8007ff8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f50:	4b35      	ldr	r3, [pc, #212]	; (8008028 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	099b      	lsrs	r3, r3, #6
 8007f56:	2200      	movs	r2, #0
 8007f58:	613b      	str	r3, [r7, #16]
 8007f5a:	617a      	str	r2, [r7, #20]
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007f62:	f04f 0b00 	mov.w	fp, #0
 8007f66:	4652      	mov	r2, sl
 8007f68:	465b      	mov	r3, fp
 8007f6a:	f04f 0000 	mov.w	r0, #0
 8007f6e:	f04f 0100 	mov.w	r1, #0
 8007f72:	0159      	lsls	r1, r3, #5
 8007f74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f78:	0150      	lsls	r0, r2, #5
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	ebb2 080a 	subs.w	r8, r2, sl
 8007f82:	eb63 090b 	sbc.w	r9, r3, fp
 8007f86:	f04f 0200 	mov.w	r2, #0
 8007f8a:	f04f 0300 	mov.w	r3, #0
 8007f8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007f92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007f96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007f9a:	ebb2 0408 	subs.w	r4, r2, r8
 8007f9e:	eb63 0509 	sbc.w	r5, r3, r9
 8007fa2:	f04f 0200 	mov.w	r2, #0
 8007fa6:	f04f 0300 	mov.w	r3, #0
 8007faa:	00eb      	lsls	r3, r5, #3
 8007fac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fb0:	00e2      	lsls	r2, r4, #3
 8007fb2:	4614      	mov	r4, r2
 8007fb4:	461d      	mov	r5, r3
 8007fb6:	eb14 030a 	adds.w	r3, r4, sl
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	eb45 030b 	adc.w	r3, r5, fp
 8007fc0:	607b      	str	r3, [r7, #4]
 8007fc2:	f04f 0200 	mov.w	r2, #0
 8007fc6:	f04f 0300 	mov.w	r3, #0
 8007fca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007fce:	4629      	mov	r1, r5
 8007fd0:	028b      	lsls	r3, r1, #10
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007fd8:	4621      	mov	r1, r4
 8007fda:	028a      	lsls	r2, r1, #10
 8007fdc:	4610      	mov	r0, r2
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	60bb      	str	r3, [r7, #8]
 8007fe6:	60fa      	str	r2, [r7, #12]
 8007fe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fec:	f7f8 fdbe 	bl	8000b6c <__aeabi_uldivmod>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ff8:	4b0b      	ldr	r3, [pc, #44]	; (8008028 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	0c1b      	lsrs	r3, r3, #16
 8007ffe:	f003 0303 	and.w	r3, r3, #3
 8008002:	3301      	adds	r3, #1
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008008:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008010:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008012:	e002      	b.n	800801a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008014:	4b05      	ldr	r3, [pc, #20]	; (800802c <HAL_RCC_GetSysClockFreq+0x184>)
 8008016:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800801a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800801c:	4618      	mov	r0, r3
 800801e:	3740      	adds	r7, #64	; 0x40
 8008020:	46bd      	mov	sp, r7
 8008022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008026:	bf00      	nop
 8008028:	40023800 	.word	0x40023800
 800802c:	00f42400 	.word	0x00f42400
 8008030:	016e3600 	.word	0x016e3600

08008034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008034:	b480      	push	{r7}
 8008036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008038:	4b03      	ldr	r3, [pc, #12]	; (8008048 <HAL_RCC_GetHCLKFreq+0x14>)
 800803a:	681b      	ldr	r3, [r3, #0]
}
 800803c:	4618      	mov	r0, r3
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	20000034 	.word	0x20000034

0800804c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008050:	f7ff fff0 	bl	8008034 <HAL_RCC_GetHCLKFreq>
 8008054:	4602      	mov	r2, r0
 8008056:	4b05      	ldr	r3, [pc, #20]	; (800806c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	0a9b      	lsrs	r3, r3, #10
 800805c:	f003 0307 	and.w	r3, r3, #7
 8008060:	4903      	ldr	r1, [pc, #12]	; (8008070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008062:	5ccb      	ldrb	r3, [r1, r3]
 8008064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008068:	4618      	mov	r0, r3
 800806a:	bd80      	pop	{r7, pc}
 800806c:	40023800 	.word	0x40023800
 8008070:	0800d55c 	.word	0x0800d55c

08008074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008078:	f7ff ffdc 	bl	8008034 <HAL_RCC_GetHCLKFreq>
 800807c:	4602      	mov	r2, r0
 800807e:	4b05      	ldr	r3, [pc, #20]	; (8008094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	0b5b      	lsrs	r3, r3, #13
 8008084:	f003 0307 	and.w	r3, r3, #7
 8008088:	4903      	ldr	r1, [pc, #12]	; (8008098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800808a:	5ccb      	ldrb	r3, [r1, r3]
 800808c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008090:	4618      	mov	r0, r3
 8008092:	bd80      	pop	{r7, pc}
 8008094:	40023800 	.word	0x40023800
 8008098:	0800d55c 	.word	0x0800d55c

0800809c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	220f      	movs	r2, #15
 80080aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80080ac:	4b12      	ldr	r3, [pc, #72]	; (80080f8 <HAL_RCC_GetClockConfig+0x5c>)
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	f003 0203 	and.w	r2, r3, #3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80080b8:	4b0f      	ldr	r3, [pc, #60]	; (80080f8 <HAL_RCC_GetClockConfig+0x5c>)
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80080c4:	4b0c      	ldr	r3, [pc, #48]	; (80080f8 <HAL_RCC_GetClockConfig+0x5c>)
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80080d0:	4b09      	ldr	r3, [pc, #36]	; (80080f8 <HAL_RCC_GetClockConfig+0x5c>)
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	08db      	lsrs	r3, r3, #3
 80080d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80080de:	4b07      	ldr	r3, [pc, #28]	; (80080fc <HAL_RCC_GetClockConfig+0x60>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 0207 	and.w	r2, r3, #7
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	601a      	str	r2, [r3, #0]
}
 80080ea:	bf00      	nop
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	40023800 	.word	0x40023800
 80080fc:	40023c00 	.word	0x40023c00

08008100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d101      	bne.n	8008112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e041      	b.n	8008196 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d106      	bne.n	800812c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7fc f8f4 	bl	8004314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2202      	movs	r2, #2
 8008130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	3304      	adds	r3, #4
 800813c:	4619      	mov	r1, r3
 800813e:	4610      	mov	r0, r2
 8008140:	f000 f9ce 	bl	80084e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
	...

080081a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d001      	beq.n	80081b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e04e      	b.n	8008256 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68da      	ldr	r2, [r3, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f042 0201 	orr.w	r2, r2, #1
 80081ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a23      	ldr	r2, [pc, #140]	; (8008264 <HAL_TIM_Base_Start_IT+0xc4>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d022      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x80>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081e2:	d01d      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x80>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a1f      	ldr	r2, [pc, #124]	; (8008268 <HAL_TIM_Base_Start_IT+0xc8>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d018      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x80>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a1e      	ldr	r2, [pc, #120]	; (800826c <HAL_TIM_Base_Start_IT+0xcc>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d013      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x80>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a1c      	ldr	r2, [pc, #112]	; (8008270 <HAL_TIM_Base_Start_IT+0xd0>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d00e      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x80>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a1b      	ldr	r2, [pc, #108]	; (8008274 <HAL_TIM_Base_Start_IT+0xd4>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d009      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x80>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a19      	ldr	r2, [pc, #100]	; (8008278 <HAL_TIM_Base_Start_IT+0xd8>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d004      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x80>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a18      	ldr	r2, [pc, #96]	; (800827c <HAL_TIM_Base_Start_IT+0xdc>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d111      	bne.n	8008244 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f003 0307 	and.w	r3, r3, #7
 800822a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2b06      	cmp	r3, #6
 8008230:	d010      	beq.n	8008254 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f042 0201 	orr.w	r2, r2, #1
 8008240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008242:	e007      	b.n	8008254 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f042 0201 	orr.w	r2, r2, #1
 8008252:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	40010000 	.word	0x40010000
 8008268:	40000400 	.word	0x40000400
 800826c:	40000800 	.word	0x40000800
 8008270:	40000c00 	.word	0x40000c00
 8008274:	40010400 	.word	0x40010400
 8008278:	40014000 	.word	0x40014000
 800827c:	40001800 	.word	0x40001800

08008280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	f003 0302 	and.w	r3, r3, #2
 8008292:	2b02      	cmp	r3, #2
 8008294:	d122      	bne.n	80082dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	f003 0302 	and.w	r3, r3, #2
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d11b      	bne.n	80082dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f06f 0202 	mvn.w	r2, #2
 80082ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	f003 0303 	and.w	r3, r3, #3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f8ee 	bl	80084a4 <HAL_TIM_IC_CaptureCallback>
 80082c8:	e005      	b.n	80082d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f8e0 	bl	8008490 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f8f1 	bl	80084b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	f003 0304 	and.w	r3, r3, #4
 80082e6:	2b04      	cmp	r3, #4
 80082e8:	d122      	bne.n	8008330 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b04      	cmp	r3, #4
 80082f6:	d11b      	bne.n	8008330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f06f 0204 	mvn.w	r2, #4
 8008300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2202      	movs	r2, #2
 8008306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f8c4 	bl	80084a4 <HAL_TIM_IC_CaptureCallback>
 800831c:	e005      	b.n	800832a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f8b6 	bl	8008490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f8c7 	bl	80084b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	f003 0308 	and.w	r3, r3, #8
 800833a:	2b08      	cmp	r3, #8
 800833c:	d122      	bne.n	8008384 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	f003 0308 	and.w	r3, r3, #8
 8008348:	2b08      	cmp	r3, #8
 800834a:	d11b      	bne.n	8008384 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f06f 0208 	mvn.w	r2, #8
 8008354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2204      	movs	r2, #4
 800835a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	69db      	ldr	r3, [r3, #28]
 8008362:	f003 0303 	and.w	r3, r3, #3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f89a 	bl	80084a4 <HAL_TIM_IC_CaptureCallback>
 8008370:	e005      	b.n	800837e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f88c 	bl	8008490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f89d 	bl	80084b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	f003 0310 	and.w	r3, r3, #16
 800838e:	2b10      	cmp	r3, #16
 8008390:	d122      	bne.n	80083d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	f003 0310 	and.w	r3, r3, #16
 800839c:	2b10      	cmp	r3, #16
 800839e:	d11b      	bne.n	80083d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f06f 0210 	mvn.w	r2, #16
 80083a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2208      	movs	r2, #8
 80083ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f870 	bl	80084a4 <HAL_TIM_IC_CaptureCallback>
 80083c4:	e005      	b.n	80083d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f862 	bl	8008490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f873 	bl	80084b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d10e      	bne.n	8008404 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	f003 0301 	and.w	r3, r3, #1
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d107      	bne.n	8008404 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f06f 0201 	mvn.w	r2, #1
 80083fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7fa fbe2 	bl	8002bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800840e:	2b80      	cmp	r3, #128	; 0x80
 8008410:	d10e      	bne.n	8008430 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800841c:	2b80      	cmp	r3, #128	; 0x80
 800841e:	d107      	bne.n	8008430 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f97e 	bl	800872c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800843a:	2b40      	cmp	r3, #64	; 0x40
 800843c:	d10e      	bne.n	800845c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008448:	2b40      	cmp	r3, #64	; 0x40
 800844a:	d107      	bne.n	800845c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f838 	bl	80084cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	f003 0320 	and.w	r3, r3, #32
 8008466:	2b20      	cmp	r3, #32
 8008468:	d10e      	bne.n	8008488 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	f003 0320 	and.w	r3, r3, #32
 8008474:	2b20      	cmp	r3, #32
 8008476:	d107      	bne.n	8008488 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f06f 0220 	mvn.w	r2, #32
 8008480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f948 	bl	8008718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a40      	ldr	r2, [pc, #256]	; (80085f4 <TIM_Base_SetConfig+0x114>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d013      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084fe:	d00f      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a3d      	ldr	r2, [pc, #244]	; (80085f8 <TIM_Base_SetConfig+0x118>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d00b      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a3c      	ldr	r2, [pc, #240]	; (80085fc <TIM_Base_SetConfig+0x11c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d007      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a3b      	ldr	r2, [pc, #236]	; (8008600 <TIM_Base_SetConfig+0x120>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d003      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a3a      	ldr	r2, [pc, #232]	; (8008604 <TIM_Base_SetConfig+0x124>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d108      	bne.n	8008532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	4313      	orrs	r3, r2
 8008530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a2f      	ldr	r2, [pc, #188]	; (80085f4 <TIM_Base_SetConfig+0x114>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d02b      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008540:	d027      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a2c      	ldr	r2, [pc, #176]	; (80085f8 <TIM_Base_SetConfig+0x118>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d023      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a2b      	ldr	r2, [pc, #172]	; (80085fc <TIM_Base_SetConfig+0x11c>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d01f      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a2a      	ldr	r2, [pc, #168]	; (8008600 <TIM_Base_SetConfig+0x120>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d01b      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a29      	ldr	r2, [pc, #164]	; (8008604 <TIM_Base_SetConfig+0x124>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d017      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a28      	ldr	r2, [pc, #160]	; (8008608 <TIM_Base_SetConfig+0x128>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d013      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a27      	ldr	r2, [pc, #156]	; (800860c <TIM_Base_SetConfig+0x12c>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d00f      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a26      	ldr	r2, [pc, #152]	; (8008610 <TIM_Base_SetConfig+0x130>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d00b      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a25      	ldr	r2, [pc, #148]	; (8008614 <TIM_Base_SetConfig+0x134>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d007      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a24      	ldr	r2, [pc, #144]	; (8008618 <TIM_Base_SetConfig+0x138>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d003      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a23      	ldr	r2, [pc, #140]	; (800861c <TIM_Base_SetConfig+0x13c>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d108      	bne.n	80085a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	689a      	ldr	r2, [r3, #8]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a0a      	ldr	r2, [pc, #40]	; (80085f4 <TIM_Base_SetConfig+0x114>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d003      	beq.n	80085d8 <TIM_Base_SetConfig+0xf8>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a0c      	ldr	r2, [pc, #48]	; (8008604 <TIM_Base_SetConfig+0x124>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d103      	bne.n	80085e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	691a      	ldr	r2, [r3, #16]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	615a      	str	r2, [r3, #20]
}
 80085e6:	bf00      	nop
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	40010000 	.word	0x40010000
 80085f8:	40000400 	.word	0x40000400
 80085fc:	40000800 	.word	0x40000800
 8008600:	40000c00 	.word	0x40000c00
 8008604:	40010400 	.word	0x40010400
 8008608:	40014000 	.word	0x40014000
 800860c:	40014400 	.word	0x40014400
 8008610:	40014800 	.word	0x40014800
 8008614:	40001800 	.word	0x40001800
 8008618:	40001c00 	.word	0x40001c00
 800861c:	40002000 	.word	0x40002000

08008620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008630:	2b01      	cmp	r3, #1
 8008632:	d101      	bne.n	8008638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008634:	2302      	movs	r3, #2
 8008636:	e05a      	b.n	80086ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2202      	movs	r2, #2
 8008644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800865e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	4313      	orrs	r3, r2
 8008668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a21      	ldr	r2, [pc, #132]	; (80086fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d022      	beq.n	80086c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008684:	d01d      	beq.n	80086c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a1d      	ldr	r2, [pc, #116]	; (8008700 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d018      	beq.n	80086c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a1b      	ldr	r2, [pc, #108]	; (8008704 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d013      	beq.n	80086c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a1a      	ldr	r2, [pc, #104]	; (8008708 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d00e      	beq.n	80086c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a18      	ldr	r2, [pc, #96]	; (800870c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d009      	beq.n	80086c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a17      	ldr	r2, [pc, #92]	; (8008710 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d004      	beq.n	80086c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a15      	ldr	r2, [pc, #84]	; (8008714 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d10c      	bne.n	80086dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	40010000 	.word	0x40010000
 8008700:	40000400 	.word	0x40000400
 8008704:	40000800 	.word	0x40000800
 8008708:	40000c00 	.word	0x40000c00
 800870c:	40010400 	.word	0x40010400
 8008710:	40014000 	.word	0x40014000
 8008714:	40001800 	.word	0x40001800

08008718 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e03f      	b.n	80087d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d106      	bne.n	800876c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7fb fe9e 	bl	80044a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2224      	movs	r2, #36	; 0x24
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68da      	ldr	r2, [r3, #12]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008782:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f001 f95d 	bl	8009a44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	691a      	ldr	r2, [r3, #16]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008798:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	695a      	ldr	r2, [r3, #20]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68da      	ldr	r2, [r3, #12]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2220      	movs	r2, #32
 80087c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2220      	movs	r2, #32
 80087cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80087da:	b480      	push	{r7}
 80087dc:	b085      	sub	sp, #20
 80087de:	af00      	add	r7, sp, #0
 80087e0:	60f8      	str	r0, [r7, #12]
 80087e2:	60b9      	str	r1, [r7, #8]
 80087e4:	4613      	mov	r3, r2
 80087e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b20      	cmp	r3, #32
 80087f2:	d130      	bne.n	8008856 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d002      	beq.n	8008800 <HAL_UART_Transmit_IT+0x26>
 80087fa:	88fb      	ldrh	r3, [r7, #6]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d101      	bne.n	8008804 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e029      	b.n	8008858 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800880a:	2b01      	cmp	r3, #1
 800880c:	d101      	bne.n	8008812 <HAL_UART_Transmit_IT+0x38>
 800880e:	2302      	movs	r3, #2
 8008810:	e022      	b.n	8008858 <HAL_UART_Transmit_IT+0x7e>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2201      	movs	r2, #1
 8008816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	88fa      	ldrh	r2, [r7, #6]
 8008824:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	88fa      	ldrh	r2, [r7, #6]
 800882a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2221      	movs	r2, #33	; 0x21
 8008836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68da      	ldr	r2, [r3, #12]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008850:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	e000      	b.n	8008858 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008856:	2302      	movs	r3, #2
  }
}
 8008858:	4618      	mov	r0, r3
 800885a:	3714      	adds	r7, #20
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	4613      	mov	r3, r2
 8008870:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b20      	cmp	r3, #32
 800887c:	d11d      	bne.n	80088ba <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d002      	beq.n	800888a <HAL_UART_Receive_IT+0x26>
 8008884:	88fb      	ldrh	r3, [r7, #6]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d101      	bne.n	800888e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e016      	b.n	80088bc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008894:	2b01      	cmp	r3, #1
 8008896:	d101      	bne.n	800889c <HAL_UART_Receive_IT+0x38>
 8008898:	2302      	movs	r3, #2
 800889a:	e00f      	b.n	80088bc <HAL_UART_Receive_IT+0x58>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80088aa:	88fb      	ldrh	r3, [r7, #6]
 80088ac:	461a      	mov	r2, r3
 80088ae:	68b9      	ldr	r1, [r7, #8]
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 fdfa 	bl	80094aa <UART_Start_Receive_IT>
 80088b6:	4603      	mov	r3, r0
 80088b8:	e000      	b.n	80088bc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80088ba:	2302      	movs	r3, #2
  }
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b08c      	sub	sp, #48	; 0x30
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	4613      	mov	r3, r2
 80088d0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b20      	cmp	r3, #32
 80088dc:	d165      	bne.n	80089aa <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d002      	beq.n	80088ea <HAL_UART_Transmit_DMA+0x26>
 80088e4:	88fb      	ldrh	r3, [r7, #6]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d101      	bne.n	80088ee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e05e      	b.n	80089ac <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d101      	bne.n	80088fc <HAL_UART_Transmit_DMA+0x38>
 80088f8:	2302      	movs	r3, #2
 80088fa:	e057      	b.n	80089ac <HAL_UART_Transmit_DMA+0xe8>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	88fa      	ldrh	r2, [r7, #6]
 800890e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	88fa      	ldrh	r2, [r7, #6]
 8008914:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2221      	movs	r2, #33	; 0x21
 8008920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008928:	4a22      	ldr	r2, [pc, #136]	; (80089b4 <HAL_UART_Transmit_DMA+0xf0>)
 800892a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008930:	4a21      	ldr	r2, [pc, #132]	; (80089b8 <HAL_UART_Transmit_DMA+0xf4>)
 8008932:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008938:	4a20      	ldr	r2, [pc, #128]	; (80089bc <HAL_UART_Transmit_DMA+0xf8>)
 800893a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008940:	2200      	movs	r2, #0
 8008942:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008944:	f107 0308 	add.w	r3, r7, #8
 8008948:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800894e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008950:	6819      	ldr	r1, [r3, #0]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	3304      	adds	r3, #4
 8008958:	461a      	mov	r2, r3
 800895a:	88fb      	ldrh	r3, [r7, #6]
 800895c:	f7fc fa46 	bl	8004dec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008968:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3314      	adds	r3, #20
 8008978:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	e853 3f00 	ldrex	r3, [r3]
 8008980:	617b      	str	r3, [r7, #20]
   return(result);
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008988:	62bb      	str	r3, [r7, #40]	; 0x28
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	3314      	adds	r3, #20
 8008990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008992:	627a      	str	r2, [r7, #36]	; 0x24
 8008994:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008996:	6a39      	ldr	r1, [r7, #32]
 8008998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800899a:	e841 2300 	strex	r3, r2, [r1]
 800899e:	61fb      	str	r3, [r7, #28]
   return(result);
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1e5      	bne.n	8008972 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	e000      	b.n	80089ac <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80089aa:	2302      	movs	r3, #2
  }
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3730      	adds	r7, #48	; 0x30
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	08009205 	.word	0x08009205
 80089b8:	0800929f 	.word	0x0800929f
 80089bc:	08009417 	.word	0x08009417

080089c0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	4613      	mov	r3, r2
 80089cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b20      	cmp	r3, #32
 80089d8:	d11d      	bne.n	8008a16 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <HAL_UART_Receive_DMA+0x26>
 80089e0:	88fb      	ldrh	r3, [r7, #6]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e016      	b.n	8008a18 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d101      	bne.n	80089f8 <HAL_UART_Receive_DMA+0x38>
 80089f4:	2302      	movs	r3, #2
 80089f6:	e00f      	b.n	8008a18 <HAL_UART_Receive_DMA+0x58>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008a06:	88fb      	ldrh	r3, [r7, #6]
 8008a08:	461a      	mov	r2, r3
 8008a0a:	68b9      	ldr	r1, [r7, #8]
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f000 fd8b 	bl	8009528 <UART_Start_Receive_DMA>
 8008a12:	4603      	mov	r3, r0
 8008a14:	e000      	b.n	8008a18 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008a16:	2302      	movs	r3, #2
  }
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b08e      	sub	sp, #56	; 0x38
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	330c      	adds	r3, #12
 8008a2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	330c      	adds	r3, #12
 8008a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a50:	e841 2300 	strex	r3, r2, [r1]
 8008a54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e5      	bne.n	8008a28 <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a66:	2b80      	cmp	r3, #128	; 0x80
 8008a68:	d13c      	bne.n	8008ae4 <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	3314      	adds	r3, #20
 8008a70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	e853 3f00 	ldrex	r3, [r3]
 8008a78:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a80:	633b      	str	r3, [r7, #48]	; 0x30
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	3314      	adds	r3, #20
 8008a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a8a:	61ba      	str	r2, [r7, #24]
 8008a8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8e:	6979      	ldr	r1, [r7, #20]
 8008a90:	69ba      	ldr	r2, [r7, #24]
 8008a92:	e841 2300 	strex	r3, r2, [r1]
 8008a96:	613b      	str	r3, [r7, #16]
   return(result);
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1e5      	bne.n	8008a6a <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d013      	beq.n	8008ace <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aaa:	4a16      	ldr	r2, [pc, #88]	; (8008b04 <HAL_UART_AbortTransmit_IT+0xe4>)
 8008aac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7fc fa62 	bl	8004f7c <HAL_DMA_Abort_IT>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d01c      	beq.n	8008af8 <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008ac8:	4610      	mov	r0, r2
 8008aca:	4798      	blx	r3
 8008acc:	e014      	b.n	8008af8 <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2220      	movs	r2, #32
 8008ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 fb71 	bl	80091c4 <HAL_UART_AbortTransmitCpltCallback>
 8008ae2:	e009      	b.n	8008af8 <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fb66 	bl	80091c4 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3738      	adds	r7, #56	; 0x38
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	080097a3 	.word	0x080097a3

08008b08 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b09a      	sub	sp, #104	; 0x68
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	330c      	adds	r3, #12
 8008b16:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b1a:	e853 3f00 	ldrex	r3, [r3]
 8008b1e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b26:	667b      	str	r3, [r7, #100]	; 0x64
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	330c      	adds	r3, #12
 8008b2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008b30:	657a      	str	r2, [r7, #84]	; 0x54
 8008b32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b34:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b38:	e841 2300 	strex	r3, r2, [r1]
 8008b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1e5      	bne.n	8008b10 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	3314      	adds	r3, #20
 8008b4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4e:	e853 3f00 	ldrex	r3, [r3]
 8008b52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b56:	f023 0301 	bic.w	r3, r3, #1
 8008b5a:	663b      	str	r3, [r7, #96]	; 0x60
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	3314      	adds	r3, #20
 8008b62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b64:	643a      	str	r2, [r7, #64]	; 0x40
 8008b66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b6c:	e841 2300 	strex	r3, r2, [r1]
 8008b70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1e5      	bne.n	8008b44 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d119      	bne.n	8008bb4 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	330c      	adds	r3, #12
 8008b86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b88:	6a3b      	ldr	r3, [r7, #32]
 8008b8a:	e853 3f00 	ldrex	r3, [r3]
 8008b8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	f023 0310 	bic.w	r3, r3, #16
 8008b96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	330c      	adds	r3, #12
 8008b9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ba0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ba2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ba8:	e841 2300 	strex	r3, r2, [r1]
 8008bac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1e5      	bne.n	8008b80 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bbe:	2b40      	cmp	r3, #64	; 0x40
 8008bc0:	d13f      	bne.n	8008c42 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3314      	adds	r3, #20
 8008bc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	e853 3f00 	ldrex	r3, [r3]
 8008bd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	3314      	adds	r3, #20
 8008be0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008be2:	61ba      	str	r2, [r7, #24]
 8008be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be6:	6979      	ldr	r1, [r7, #20]
 8008be8:	69ba      	ldr	r2, [r7, #24]
 8008bea:	e841 2300 	strex	r3, r2, [r1]
 8008bee:	613b      	str	r3, [r7, #16]
   return(result);
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1e5      	bne.n	8008bc2 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d013      	beq.n	8008c26 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c02:	4a19      	ldr	r2, [pc, #100]	; (8008c68 <HAL_UART_AbortReceive_IT+0x160>)
 8008c04:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fc f9b6 	bl	8004f7c <HAL_DMA_Abort_IT>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d022      	beq.n	8008c5c <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c20:	4610      	mov	r0, r2
 8008c22:	4798      	blx	r3
 8008c24:	e01a      	b.n	8008c5c <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2220      	movs	r2, #32
 8008c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 facc 	bl	80091d8 <HAL_UART_AbortReceiveCpltCallback>
 8008c40:	e00c      	b.n	8008c5c <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2220      	movs	r2, #32
 8008c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fabe 	bl	80091d8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3768      	adds	r7, #104	; 0x68
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	080097cd 	.word	0x080097cd

08008c6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b0ba      	sub	sp, #232	; 0xe8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	695b      	ldr	r3, [r3, #20]
 8008c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008c92:	2300      	movs	r3, #0
 8008c94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ca2:	f003 030f 	and.w	r3, r3, #15
 8008ca6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008caa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10f      	bne.n	8008cd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cb6:	f003 0320 	and.w	r3, r3, #32
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d009      	beq.n	8008cd2 <HAL_UART_IRQHandler+0x66>
 8008cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cc2:	f003 0320 	and.w	r3, r3, #32
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fdfe 	bl	80098cc <UART_Receive_IT>
      return;
 8008cd0:	e256      	b.n	8009180 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008cd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 80de 	beq.w	8008e98 <HAL_UART_IRQHandler+0x22c>
 8008cdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ce0:	f003 0301 	and.w	r3, r3, #1
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d106      	bne.n	8008cf6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 80d1 	beq.w	8008e98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00b      	beq.n	8008d1a <HAL_UART_IRQHandler+0xae>
 8008d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d005      	beq.n	8008d1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d12:	f043 0201 	orr.w	r2, r3, #1
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d1e:	f003 0304 	and.w	r3, r3, #4
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00b      	beq.n	8008d3e <HAL_UART_IRQHandler+0xd2>
 8008d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d005      	beq.n	8008d3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d36:	f043 0202 	orr.w	r2, r3, #2
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d42:	f003 0302 	and.w	r3, r3, #2
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00b      	beq.n	8008d62 <HAL_UART_IRQHandler+0xf6>
 8008d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d4e:	f003 0301 	and.w	r3, r3, #1
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d005      	beq.n	8008d62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5a:	f043 0204 	orr.w	r2, r3, #4
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d66:	f003 0308 	and.w	r3, r3, #8
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d011      	beq.n	8008d92 <HAL_UART_IRQHandler+0x126>
 8008d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d72:	f003 0320 	and.w	r3, r3, #32
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d105      	bne.n	8008d86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d005      	beq.n	8008d92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8a:	f043 0208 	orr.w	r2, r3, #8
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f000 81ed 	beq.w	8009176 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008da0:	f003 0320 	and.w	r3, r3, #32
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d008      	beq.n	8008dba <HAL_UART_IRQHandler+0x14e>
 8008da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dac:	f003 0320 	and.w	r3, r3, #32
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d002      	beq.n	8008dba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fd89 	bl	80098cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc4:	2b40      	cmp	r3, #64	; 0x40
 8008dc6:	bf0c      	ite	eq
 8008dc8:	2301      	moveq	r3, #1
 8008dca:	2300      	movne	r3, #0
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd6:	f003 0308 	and.w	r3, r3, #8
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d103      	bne.n	8008de6 <HAL_UART_IRQHandler+0x17a>
 8008dde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d04f      	beq.n	8008e86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fc64 	bl	80096b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	695b      	ldr	r3, [r3, #20]
 8008df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df6:	2b40      	cmp	r3, #64	; 0x40
 8008df8:	d141      	bne.n	8008e7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	3314      	adds	r3, #20
 8008e00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e08:	e853 3f00 	ldrex	r3, [r3]
 8008e0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008e10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	3314      	adds	r3, #20
 8008e22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008e26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008e32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008e36:	e841 2300 	strex	r3, r2, [r1]
 8008e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008e3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1d9      	bne.n	8008dfa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d013      	beq.n	8008e76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e52:	4a7d      	ldr	r2, [pc, #500]	; (8009048 <HAL_UART_IRQHandler+0x3dc>)
 8008e54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fc f88e 	bl	8004f7c <HAL_DMA_Abort_IT>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d016      	beq.n	8008e94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e70:	4610      	mov	r0, r2
 8008e72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e74:	e00e      	b.n	8008e94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f99a 	bl	80091b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e7c:	e00a      	b.n	8008e94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f996 	bl	80091b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e84:	e006      	b.n	8008e94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f992 	bl	80091b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008e92:	e170      	b.n	8009176 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e94:	bf00      	nop
    return;
 8008e96:	e16e      	b.n	8009176 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	f040 814a 	bne.w	8009136 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ea6:	f003 0310 	and.w	r3, r3, #16
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f000 8143 	beq.w	8009136 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eb4:	f003 0310 	and.w	r3, r3, #16
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 813c 	beq.w	8009136 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60bb      	str	r3, [r7, #8]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	60bb      	str	r3, [r7, #8]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	60bb      	str	r3, [r7, #8]
 8008ed2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	695b      	ldr	r3, [r3, #20]
 8008eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ede:	2b40      	cmp	r3, #64	; 0x40
 8008ee0:	f040 80b4 	bne.w	800904c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ef0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f000 8140 	beq.w	800917a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008efe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f02:	429a      	cmp	r2, r3
 8008f04:	f080 8139 	bcs.w	800917a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f1a:	f000 8088 	beq.w	800902e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	330c      	adds	r3, #12
 8008f24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f2c:	e853 3f00 	ldrex	r3, [r3]
 8008f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008f34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	330c      	adds	r3, #12
 8008f46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008f4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008f56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008f5a:	e841 2300 	strex	r3, r2, [r1]
 8008f5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008f62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1d9      	bne.n	8008f1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	3314      	adds	r3, #20
 8008f70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f74:	e853 3f00 	ldrex	r3, [r3]
 8008f78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f7c:	f023 0301 	bic.w	r3, r3, #1
 8008f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	3314      	adds	r3, #20
 8008f8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008f8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008f92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008f96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008f9a:	e841 2300 	strex	r3, r2, [r1]
 8008f9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008fa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1e1      	bne.n	8008f6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3314      	adds	r3, #20
 8008fac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fb0:	e853 3f00 	ldrex	r3, [r3]
 8008fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	3314      	adds	r3, #20
 8008fc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008fca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008fcc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008fd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008fd2:	e841 2300 	strex	r3, r2, [r1]
 8008fd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008fd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1e3      	bne.n	8008fa6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2220      	movs	r2, #32
 8008fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	330c      	adds	r3, #12
 8008ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ff6:	e853 3f00 	ldrex	r3, [r3]
 8008ffa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ffe:	f023 0310 	bic.w	r3, r3, #16
 8009002:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	330c      	adds	r3, #12
 800900c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009010:	65ba      	str	r2, [r7, #88]	; 0x58
 8009012:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009014:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009016:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009018:	e841 2300 	strex	r3, r2, [r1]
 800901c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800901e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1e3      	bne.n	8008fec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009028:	4618      	mov	r0, r3
 800902a:	f7fb ff37 	bl	8004e9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009036:	b29b      	uxth	r3, r3
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	b29b      	uxth	r3, r3
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f8d4 	bl	80091ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009044:	e099      	b.n	800917a <HAL_UART_IRQHandler+0x50e>
 8009046:	bf00      	nop
 8009048:	0800977b 	.word	0x0800977b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009054:	b29b      	uxth	r3, r3
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009060:	b29b      	uxth	r3, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	f000 808b 	beq.w	800917e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800906c:	2b00      	cmp	r3, #0
 800906e:	f000 8086 	beq.w	800917e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	330c      	adds	r3, #12
 8009078:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907c:	e853 3f00 	ldrex	r3, [r3]
 8009080:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009084:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009088:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	330c      	adds	r3, #12
 8009092:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009096:	647a      	str	r2, [r7, #68]	; 0x44
 8009098:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800909c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1e3      	bne.n	8009072 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3314      	adds	r3, #20
 80090b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b4:	e853 3f00 	ldrex	r3, [r3]
 80090b8:	623b      	str	r3, [r7, #32]
   return(result);
 80090ba:	6a3b      	ldr	r3, [r7, #32]
 80090bc:	f023 0301 	bic.w	r3, r3, #1
 80090c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3314      	adds	r3, #20
 80090ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80090ce:	633a      	str	r2, [r7, #48]	; 0x30
 80090d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090d6:	e841 2300 	strex	r3, r2, [r1]
 80090da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1e3      	bne.n	80090aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2220      	movs	r2, #32
 80090e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	330c      	adds	r3, #12
 80090f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	e853 3f00 	ldrex	r3, [r3]
 80090fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f023 0310 	bic.w	r3, r3, #16
 8009106:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	330c      	adds	r3, #12
 8009110:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009114:	61fa      	str	r2, [r7, #28]
 8009116:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009118:	69b9      	ldr	r1, [r7, #24]
 800911a:	69fa      	ldr	r2, [r7, #28]
 800911c:	e841 2300 	strex	r3, r2, [r1]
 8009120:	617b      	str	r3, [r7, #20]
   return(result);
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1e3      	bne.n	80090f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009128:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f85c 	bl	80091ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009134:	e023      	b.n	800917e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800913a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800913e:	2b00      	cmp	r3, #0
 8009140:	d009      	beq.n	8009156 <HAL_UART_IRQHandler+0x4ea>
 8009142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800914a:	2b00      	cmp	r3, #0
 800914c:	d003      	beq.n	8009156 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fb54 	bl	80097fc <UART_Transmit_IT>
    return;
 8009154:	e014      	b.n	8009180 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800915a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00e      	beq.n	8009180 <HAL_UART_IRQHandler+0x514>
 8009162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800916a:	2b00      	cmp	r3, #0
 800916c:	d008      	beq.n	8009180 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fb94 	bl	800989c <UART_EndTransmit_IT>
    return;
 8009174:	e004      	b.n	8009180 <HAL_UART_IRQHandler+0x514>
    return;
 8009176:	bf00      	nop
 8009178:	e002      	b.n	8009180 <HAL_UART_IRQHandler+0x514>
      return;
 800917a:	bf00      	nop
 800917c:	e000      	b.n	8009180 <HAL_UART_IRQHandler+0x514>
      return;
 800917e:	bf00      	nop
  }
}
 8009180:	37e8      	adds	r7, #232	; 0xe8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop

08009188 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80091a4:	bf00      	nop
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	460b      	mov	r3, r1
 80091f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091f8:	bf00      	nop
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b090      	sub	sp, #64	; 0x40
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009210:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800921c:	2b00      	cmp	r3, #0
 800921e:	d137      	bne.n	8009290 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009222:	2200      	movs	r2, #0
 8009224:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3314      	adds	r3, #20
 800922c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009230:	e853 3f00 	ldrex	r3, [r3]
 8009234:	623b      	str	r3, [r7, #32]
   return(result);
 8009236:	6a3b      	ldr	r3, [r7, #32]
 8009238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800923c:	63bb      	str	r3, [r7, #56]	; 0x38
 800923e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	3314      	adds	r3, #20
 8009244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009246:	633a      	str	r2, [r7, #48]	; 0x30
 8009248:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800924c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800924e:	e841 2300 	strex	r3, r2, [r1]
 8009252:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1e5      	bne.n	8009226 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800925a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	330c      	adds	r3, #12
 8009260:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	e853 3f00 	ldrex	r3, [r3]
 8009268:	60fb      	str	r3, [r7, #12]
   return(result);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009270:	637b      	str	r3, [r7, #52]	; 0x34
 8009272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	330c      	adds	r3, #12
 8009278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800927a:	61fa      	str	r2, [r7, #28]
 800927c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927e:	69b9      	ldr	r1, [r7, #24]
 8009280:	69fa      	ldr	r2, [r7, #28]
 8009282:	e841 2300 	strex	r3, r2, [r1]
 8009286:	617b      	str	r3, [r7, #20]
   return(result);
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1e5      	bne.n	800925a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800928e:	e002      	b.n	8009296 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009290:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009292:	f7f8 f9d3 	bl	800163c <HAL_UART_TxCpltCallback>
}
 8009296:	bf00      	nop
 8009298:	3740      	adds	r7, #64	; 0x40
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b084      	sub	sp, #16
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f7ff ff6b 	bl	8009188 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092b2:	bf00      	nop
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b09c      	sub	sp, #112	; 0x70
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d172      	bne.n	80093bc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80092d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092d8:	2200      	movs	r2, #0
 80092da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	330c      	adds	r3, #12
 80092e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092e6:	e853 3f00 	ldrex	r3, [r3]
 80092ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80092f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	330c      	adds	r3, #12
 80092fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80092fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80092fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009300:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009302:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009304:	e841 2300 	strex	r3, r2, [r1]
 8009308:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800930a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1e5      	bne.n	80092dc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	3314      	adds	r3, #20
 8009316:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931a:	e853 3f00 	ldrex	r3, [r3]
 800931e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009322:	f023 0301 	bic.w	r3, r3, #1
 8009326:	667b      	str	r3, [r7, #100]	; 0x64
 8009328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	3314      	adds	r3, #20
 800932e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009330:	647a      	str	r2, [r7, #68]	; 0x44
 8009332:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009334:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009336:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009338:	e841 2300 	strex	r3, r2, [r1]
 800933c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800933e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1e5      	bne.n	8009310 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3314      	adds	r3, #20
 800934a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	e853 3f00 	ldrex	r3, [r3]
 8009352:	623b      	str	r3, [r7, #32]
   return(result);
 8009354:	6a3b      	ldr	r3, [r7, #32]
 8009356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800935a:	663b      	str	r3, [r7, #96]	; 0x60
 800935c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	3314      	adds	r3, #20
 8009362:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009364:	633a      	str	r2, [r7, #48]	; 0x30
 8009366:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009368:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800936a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800936c:	e841 2300 	strex	r3, r2, [r1]
 8009370:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1e5      	bne.n	8009344 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800937a:	2220      	movs	r2, #32
 800937c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009384:	2b01      	cmp	r3, #1
 8009386:	d119      	bne.n	80093bc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	330c      	adds	r3, #12
 800938e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	e853 3f00 	ldrex	r3, [r3]
 8009396:	60fb      	str	r3, [r7, #12]
   return(result);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 0310 	bic.w	r3, r3, #16
 800939e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	330c      	adds	r3, #12
 80093a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80093a8:	61fa      	str	r2, [r7, #28]
 80093aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ac:	69b9      	ldr	r1, [r7, #24]
 80093ae:	69fa      	ldr	r2, [r7, #28]
 80093b0:	e841 2300 	strex	r3, r2, [r1]
 80093b4:	617b      	str	r3, [r7, #20]
   return(result);
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1e5      	bne.n	8009388 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d106      	bne.n	80093d2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80093c8:	4619      	mov	r1, r3
 80093ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80093cc:	f7ff ff0e 	bl	80091ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093d0:	e002      	b.n	80093d8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80093d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80093d4:	f7f8 f96a 	bl	80016ac <HAL_UART_RxCpltCallback>
}
 80093d8:	bf00      	nop
 80093da:	3770      	adds	r7, #112	; 0x70
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ec:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d108      	bne.n	8009408 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80093fa:	085b      	lsrs	r3, r3, #1
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	4619      	mov	r1, r3
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f7ff fef3 	bl	80091ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009406:	e002      	b.n	800940e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f7ff fec7 	bl	800919c <HAL_UART_RxHalfCpltCallback>
}
 800940e:	bf00      	nop
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b084      	sub	sp, #16
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800941e:	2300      	movs	r3, #0
 8009420:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009426:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009432:	2b80      	cmp	r3, #128	; 0x80
 8009434:	bf0c      	ite	eq
 8009436:	2301      	moveq	r3, #1
 8009438:	2300      	movne	r3, #0
 800943a:	b2db      	uxtb	r3, r3
 800943c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2b21      	cmp	r3, #33	; 0x21
 8009448:	d108      	bne.n	800945c <UART_DMAError+0x46>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d005      	beq.n	800945c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	2200      	movs	r2, #0
 8009454:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009456:	68b8      	ldr	r0, [r7, #8]
 8009458:	f000 f904 	bl	8009664 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009466:	2b40      	cmp	r3, #64	; 0x40
 8009468:	bf0c      	ite	eq
 800946a:	2301      	moveq	r3, #1
 800946c:	2300      	movne	r3, #0
 800946e:	b2db      	uxtb	r3, r3
 8009470:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b22      	cmp	r3, #34	; 0x22
 800947c:	d108      	bne.n	8009490 <UART_DMAError+0x7a>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d005      	beq.n	8009490 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2200      	movs	r2, #0
 8009488:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800948a:	68b8      	ldr	r0, [r7, #8]
 800948c:	f000 f912 	bl	80096b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009494:	f043 0210 	orr.w	r2, r3, #16
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800949c:	68b8      	ldr	r0, [r7, #8]
 800949e:	f7ff fe87 	bl	80091b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094a2:	bf00      	nop
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b085      	sub	sp, #20
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	60f8      	str	r0, [r7, #12]
 80094b2:	60b9      	str	r1, [r7, #8]
 80094b4:	4613      	mov	r3, r2
 80094b6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	88fa      	ldrh	r2, [r7, #6]
 80094c2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	88fa      	ldrh	r2, [r7, #6]
 80094c8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2222      	movs	r2, #34	; 0x22
 80094d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d007      	beq.n	80094f8 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68da      	ldr	r2, [r3, #12]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094f6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	695a      	ldr	r2, [r3, #20]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f042 0201 	orr.w	r2, r2, #1
 8009506:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68da      	ldr	r2, [r3, #12]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f042 0220 	orr.w	r2, r2, #32
 8009516:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
	...

08009528 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b098      	sub	sp, #96	; 0x60
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	4613      	mov	r3, r2
 8009534:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009536:	68ba      	ldr	r2, [r7, #8]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	88fa      	ldrh	r2, [r7, #6]
 8009540:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2222      	movs	r2, #34	; 0x22
 800954c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009554:	4a40      	ldr	r2, [pc, #256]	; (8009658 <UART_Start_Receive_DMA+0x130>)
 8009556:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955c:	4a3f      	ldr	r2, [pc, #252]	; (800965c <UART_Start_Receive_DMA+0x134>)
 800955e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009564:	4a3e      	ldr	r2, [pc, #248]	; (8009660 <UART_Start_Receive_DMA+0x138>)
 8009566:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956c:	2200      	movs	r2, #0
 800956e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009570:	f107 0308 	add.w	r3, r7, #8
 8009574:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3304      	adds	r3, #4
 8009580:	4619      	mov	r1, r3
 8009582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	88fb      	ldrh	r3, [r7, #6]
 8009588:	f7fb fc30 	bl	8004dec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800958c:	2300      	movs	r3, #0
 800958e:	613b      	str	r3, [r7, #16]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	613b      	str	r3, [r7, #16]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	613b      	str	r3, [r7, #16]
 80095a0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d019      	beq.n	80095e6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	330c      	adds	r3, #12
 80095b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095bc:	e853 3f00 	ldrex	r3, [r3]
 80095c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	330c      	adds	r3, #12
 80095d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80095d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80095d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095da:	e841 2300 	strex	r3, r2, [r1]
 80095de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80095e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1e5      	bne.n	80095b2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3314      	adds	r3, #20
 80095ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f0:	e853 3f00 	ldrex	r3, [r3]
 80095f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f8:	f043 0301 	orr.w	r3, r3, #1
 80095fc:	657b      	str	r3, [r7, #84]	; 0x54
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	3314      	adds	r3, #20
 8009604:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009606:	63ba      	str	r2, [r7, #56]	; 0x38
 8009608:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800960c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800960e:	e841 2300 	strex	r3, r2, [r1]
 8009612:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1e5      	bne.n	80095e6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	3314      	adds	r3, #20
 8009620:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	e853 3f00 	ldrex	r3, [r3]
 8009628:	617b      	str	r3, [r7, #20]
   return(result);
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009630:	653b      	str	r3, [r7, #80]	; 0x50
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	3314      	adds	r3, #20
 8009638:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800963a:	627a      	str	r2, [r7, #36]	; 0x24
 800963c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963e:	6a39      	ldr	r1, [r7, #32]
 8009640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009642:	e841 2300 	strex	r3, r2, [r1]
 8009646:	61fb      	str	r3, [r7, #28]
   return(result);
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d1e5      	bne.n	800961a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3760      	adds	r7, #96	; 0x60
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	080092bb 	.word	0x080092bb
 800965c:	080093e1 	.word	0x080093e1
 8009660:	08009417 	.word	0x08009417

08009664 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009664:	b480      	push	{r7}
 8009666:	b089      	sub	sp, #36	; 0x24
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	330c      	adds	r3, #12
 8009672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	e853 3f00 	ldrex	r3, [r3]
 800967a:	60bb      	str	r3, [r7, #8]
   return(result);
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009682:	61fb      	str	r3, [r7, #28]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	330c      	adds	r3, #12
 800968a:	69fa      	ldr	r2, [r7, #28]
 800968c:	61ba      	str	r2, [r7, #24]
 800968e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009690:	6979      	ldr	r1, [r7, #20]
 8009692:	69ba      	ldr	r2, [r7, #24]
 8009694:	e841 2300 	strex	r3, r2, [r1]
 8009698:	613b      	str	r3, [r7, #16]
   return(result);
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1e5      	bne.n	800966c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2220      	movs	r2, #32
 80096a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80096a8:	bf00      	nop
 80096aa:	3724      	adds	r7, #36	; 0x24
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b095      	sub	sp, #84	; 0x54
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	330c      	adds	r3, #12
 80096c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c6:	e853 3f00 	ldrex	r3, [r3]
 80096ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80096cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	330c      	adds	r3, #12
 80096da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096dc:	643a      	str	r2, [r7, #64]	; 0x40
 80096de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096e4:	e841 2300 	strex	r3, r2, [r1]
 80096e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1e5      	bne.n	80096bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3314      	adds	r3, #20
 80096f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f8:	6a3b      	ldr	r3, [r7, #32]
 80096fa:	e853 3f00 	ldrex	r3, [r3]
 80096fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	f023 0301 	bic.w	r3, r3, #1
 8009706:	64bb      	str	r3, [r7, #72]	; 0x48
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	3314      	adds	r3, #20
 800970e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009710:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009718:	e841 2300 	strex	r3, r2, [r1]
 800971c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800971e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1e5      	bne.n	80096f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009728:	2b01      	cmp	r3, #1
 800972a:	d119      	bne.n	8009760 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	330c      	adds	r3, #12
 8009732:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	e853 3f00 	ldrex	r3, [r3]
 800973a:	60bb      	str	r3, [r7, #8]
   return(result);
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	f023 0310 	bic.w	r3, r3, #16
 8009742:	647b      	str	r3, [r7, #68]	; 0x44
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	330c      	adds	r3, #12
 800974a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800974c:	61ba      	str	r2, [r7, #24]
 800974e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009750:	6979      	ldr	r1, [r7, #20]
 8009752:	69ba      	ldr	r2, [r7, #24]
 8009754:	e841 2300 	strex	r3, r2, [r1]
 8009758:	613b      	str	r3, [r7, #16]
   return(result);
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1e5      	bne.n	800972c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2220      	movs	r2, #32
 8009764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800976e:	bf00      	nop
 8009770:	3754      	adds	r7, #84	; 0x54
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b084      	sub	sp, #16
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009786:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f7ff fd0b 	bl	80091b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800979a:	bf00      	nop
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b084      	sub	sp, #16
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ae:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2220      	movs	r2, #32
 80097ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f7ff fd00 	bl	80091c4 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097c4:	bf00      	nop
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d8:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2220      	movs	r2, #32
 80097e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	f7ff fcf2 	bl	80091d8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097f4:	bf00      	nop
 80097f6:	3710      	adds	r7, #16
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b085      	sub	sp, #20
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800980a:	b2db      	uxtb	r3, r3
 800980c:	2b21      	cmp	r3, #33	; 0x21
 800980e:	d13e      	bne.n	800988e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009818:	d114      	bne.n	8009844 <UART_Transmit_IT+0x48>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d110      	bne.n	8009844 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	881b      	ldrh	r3, [r3, #0]
 800982c:	461a      	mov	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009836:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a1b      	ldr	r3, [r3, #32]
 800983c:	1c9a      	adds	r2, r3, #2
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	621a      	str	r2, [r3, #32]
 8009842:	e008      	b.n	8009856 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a1b      	ldr	r3, [r3, #32]
 8009848:	1c59      	adds	r1, r3, #1
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	6211      	str	r1, [r2, #32]
 800984e:	781a      	ldrb	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800985a:	b29b      	uxth	r3, r3
 800985c:	3b01      	subs	r3, #1
 800985e:	b29b      	uxth	r3, r3
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	4619      	mov	r1, r3
 8009864:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009866:	2b00      	cmp	r3, #0
 8009868:	d10f      	bne.n	800988a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	68da      	ldr	r2, [r3, #12]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009878:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68da      	ldr	r2, [r3, #12]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009888:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800988a:	2300      	movs	r3, #0
 800988c:	e000      	b.n	8009890 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800988e:	2302      	movs	r3, #2
  }
}
 8009890:	4618      	mov	r0, r3
 8009892:	3714      	adds	r7, #20
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	68da      	ldr	r2, [r3, #12]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2220      	movs	r2, #32
 80098b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7f7 febd 	bl	800163c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b08c      	sub	sp, #48	; 0x30
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	2b22      	cmp	r3, #34	; 0x22
 80098de:	f040 80ab 	bne.w	8009a38 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098ea:	d117      	bne.n	800991c <UART_Receive_IT+0x50>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d113      	bne.n	800991c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80098f4:	2300      	movs	r3, #0
 80098f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098fc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	b29b      	uxth	r3, r3
 8009906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800990a:	b29a      	uxth	r2, r3
 800990c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009914:	1c9a      	adds	r2, r3, #2
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	629a      	str	r2, [r3, #40]	; 0x28
 800991a:	e026      	b.n	800996a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009920:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009922:	2300      	movs	r3, #0
 8009924:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800992e:	d007      	beq.n	8009940 <UART_Receive_IT+0x74>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10a      	bne.n	800994e <UART_Receive_IT+0x82>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d106      	bne.n	800994e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	b2da      	uxtb	r2, r3
 8009948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994a:	701a      	strb	r2, [r3, #0]
 800994c:	e008      	b.n	8009960 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	b2db      	uxtb	r3, r3
 8009956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800995a:	b2da      	uxtb	r2, r3
 800995c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009964:	1c5a      	adds	r2, r3, #1
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800996e:	b29b      	uxth	r3, r3
 8009970:	3b01      	subs	r3, #1
 8009972:	b29b      	uxth	r3, r3
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	4619      	mov	r1, r3
 8009978:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800997a:	2b00      	cmp	r3, #0
 800997c:	d15a      	bne.n	8009a34 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	68da      	ldr	r2, [r3, #12]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f022 0220 	bic.w	r2, r2, #32
 800998c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68da      	ldr	r2, [r3, #12]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800999c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	695a      	ldr	r2, [r3, #20]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f022 0201 	bic.w	r2, r2, #1
 80099ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2220      	movs	r2, #32
 80099b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d135      	bne.n	8009a2a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	330c      	adds	r3, #12
 80099ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	e853 3f00 	ldrex	r3, [r3]
 80099d2:	613b      	str	r3, [r7, #16]
   return(result);
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	f023 0310 	bic.w	r3, r3, #16
 80099da:	627b      	str	r3, [r7, #36]	; 0x24
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	330c      	adds	r3, #12
 80099e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099e4:	623a      	str	r2, [r7, #32]
 80099e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e8:	69f9      	ldr	r1, [r7, #28]
 80099ea:	6a3a      	ldr	r2, [r7, #32]
 80099ec:	e841 2300 	strex	r3, r2, [r1]
 80099f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1e5      	bne.n	80099c4 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 0310 	and.w	r3, r3, #16
 8009a02:	2b10      	cmp	r3, #16
 8009a04:	d10a      	bne.n	8009a1c <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a06:	2300      	movs	r3, #0
 8009a08:	60fb      	str	r3, [r7, #12]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	60fb      	str	r3, [r7, #12]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	60fb      	str	r3, [r7, #12]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f7ff fbe2 	bl	80091ec <HAL_UARTEx_RxEventCallback>
 8009a28:	e002      	b.n	8009a30 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f7f7 fe3e 	bl	80016ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	e002      	b.n	8009a3a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009a34:	2300      	movs	r3, #0
 8009a36:	e000      	b.n	8009a3a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009a38:	2302      	movs	r3, #2
  }
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3730      	adds	r7, #48	; 0x30
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
	...

08009a44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a48:	b0c0      	sub	sp, #256	; 0x100
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a60:	68d9      	ldr	r1, [r3, #12]
 8009a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	ea40 0301 	orr.w	r3, r0, r1
 8009a6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a72:	689a      	ldr	r2, [r3, #8]
 8009a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	431a      	orrs	r2, r3
 8009a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	431a      	orrs	r2, r3
 8009a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a88:	69db      	ldr	r3, [r3, #28]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009a9c:	f021 010c 	bic.w	r1, r1, #12
 8009aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009aaa:	430b      	orrs	r3, r1
 8009aac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	695b      	ldr	r3, [r3, #20]
 8009ab6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009abe:	6999      	ldr	r1, [r3, #24]
 8009ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	ea40 0301 	orr.w	r3, r0, r1
 8009aca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	4b8f      	ldr	r3, [pc, #572]	; (8009d10 <UART_SetConfig+0x2cc>)
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d005      	beq.n	8009ae4 <UART_SetConfig+0xa0>
 8009ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	4b8d      	ldr	r3, [pc, #564]	; (8009d14 <UART_SetConfig+0x2d0>)
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d104      	bne.n	8009aee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ae4:	f7fe fac6 	bl	8008074 <HAL_RCC_GetPCLK2Freq>
 8009ae8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009aec:	e003      	b.n	8009af6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009aee:	f7fe faad 	bl	800804c <HAL_RCC_GetPCLK1Freq>
 8009af2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009afa:	69db      	ldr	r3, [r3, #28]
 8009afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b00:	f040 810c 	bne.w	8009d1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009b04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009b0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009b12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009b16:	4622      	mov	r2, r4
 8009b18:	462b      	mov	r3, r5
 8009b1a:	1891      	adds	r1, r2, r2
 8009b1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8009b1e:	415b      	adcs	r3, r3
 8009b20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009b26:	4621      	mov	r1, r4
 8009b28:	eb12 0801 	adds.w	r8, r2, r1
 8009b2c:	4629      	mov	r1, r5
 8009b2e:	eb43 0901 	adc.w	r9, r3, r1
 8009b32:	f04f 0200 	mov.w	r2, #0
 8009b36:	f04f 0300 	mov.w	r3, #0
 8009b3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009b3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009b42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009b46:	4690      	mov	r8, r2
 8009b48:	4699      	mov	r9, r3
 8009b4a:	4623      	mov	r3, r4
 8009b4c:	eb18 0303 	adds.w	r3, r8, r3
 8009b50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b54:	462b      	mov	r3, r5
 8009b56:	eb49 0303 	adc.w	r3, r9, r3
 8009b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009b6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009b6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009b72:	460b      	mov	r3, r1
 8009b74:	18db      	adds	r3, r3, r3
 8009b76:	653b      	str	r3, [r7, #80]	; 0x50
 8009b78:	4613      	mov	r3, r2
 8009b7a:	eb42 0303 	adc.w	r3, r2, r3
 8009b7e:	657b      	str	r3, [r7, #84]	; 0x54
 8009b80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009b84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009b88:	f7f6 fff0 	bl	8000b6c <__aeabi_uldivmod>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4b61      	ldr	r3, [pc, #388]	; (8009d18 <UART_SetConfig+0x2d4>)
 8009b92:	fba3 2302 	umull	r2, r3, r3, r2
 8009b96:	095b      	lsrs	r3, r3, #5
 8009b98:	011c      	lsls	r4, r3, #4
 8009b9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ba4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009ba8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009bac:	4642      	mov	r2, r8
 8009bae:	464b      	mov	r3, r9
 8009bb0:	1891      	adds	r1, r2, r2
 8009bb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8009bb4:	415b      	adcs	r3, r3
 8009bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009bbc:	4641      	mov	r1, r8
 8009bbe:	eb12 0a01 	adds.w	sl, r2, r1
 8009bc2:	4649      	mov	r1, r9
 8009bc4:	eb43 0b01 	adc.w	fp, r3, r1
 8009bc8:	f04f 0200 	mov.w	r2, #0
 8009bcc:	f04f 0300 	mov.w	r3, #0
 8009bd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009bd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009bd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009bdc:	4692      	mov	sl, r2
 8009bde:	469b      	mov	fp, r3
 8009be0:	4643      	mov	r3, r8
 8009be2:	eb1a 0303 	adds.w	r3, sl, r3
 8009be6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009bea:	464b      	mov	r3, r9
 8009bec:	eb4b 0303 	adc.w	r3, fp, r3
 8009bf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009c04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009c08:	460b      	mov	r3, r1
 8009c0a:	18db      	adds	r3, r3, r3
 8009c0c:	643b      	str	r3, [r7, #64]	; 0x40
 8009c0e:	4613      	mov	r3, r2
 8009c10:	eb42 0303 	adc.w	r3, r2, r3
 8009c14:	647b      	str	r3, [r7, #68]	; 0x44
 8009c16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009c1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009c1e:	f7f6 ffa5 	bl	8000b6c <__aeabi_uldivmod>
 8009c22:	4602      	mov	r2, r0
 8009c24:	460b      	mov	r3, r1
 8009c26:	4611      	mov	r1, r2
 8009c28:	4b3b      	ldr	r3, [pc, #236]	; (8009d18 <UART_SetConfig+0x2d4>)
 8009c2a:	fba3 2301 	umull	r2, r3, r3, r1
 8009c2e:	095b      	lsrs	r3, r3, #5
 8009c30:	2264      	movs	r2, #100	; 0x64
 8009c32:	fb02 f303 	mul.w	r3, r2, r3
 8009c36:	1acb      	subs	r3, r1, r3
 8009c38:	00db      	lsls	r3, r3, #3
 8009c3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009c3e:	4b36      	ldr	r3, [pc, #216]	; (8009d18 <UART_SetConfig+0x2d4>)
 8009c40:	fba3 2302 	umull	r2, r3, r3, r2
 8009c44:	095b      	lsrs	r3, r3, #5
 8009c46:	005b      	lsls	r3, r3, #1
 8009c48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009c4c:	441c      	add	r4, r3
 8009c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c52:	2200      	movs	r2, #0
 8009c54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009c5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009c60:	4642      	mov	r2, r8
 8009c62:	464b      	mov	r3, r9
 8009c64:	1891      	adds	r1, r2, r2
 8009c66:	63b9      	str	r1, [r7, #56]	; 0x38
 8009c68:	415b      	adcs	r3, r3
 8009c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009c70:	4641      	mov	r1, r8
 8009c72:	1851      	adds	r1, r2, r1
 8009c74:	6339      	str	r1, [r7, #48]	; 0x30
 8009c76:	4649      	mov	r1, r9
 8009c78:	414b      	adcs	r3, r1
 8009c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8009c7c:	f04f 0200 	mov.w	r2, #0
 8009c80:	f04f 0300 	mov.w	r3, #0
 8009c84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009c88:	4659      	mov	r1, fp
 8009c8a:	00cb      	lsls	r3, r1, #3
 8009c8c:	4651      	mov	r1, sl
 8009c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c92:	4651      	mov	r1, sl
 8009c94:	00ca      	lsls	r2, r1, #3
 8009c96:	4610      	mov	r0, r2
 8009c98:	4619      	mov	r1, r3
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	4642      	mov	r2, r8
 8009c9e:	189b      	adds	r3, r3, r2
 8009ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ca4:	464b      	mov	r3, r9
 8009ca6:	460a      	mov	r2, r1
 8009ca8:	eb42 0303 	adc.w	r3, r2, r3
 8009cac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009cbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009cc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	18db      	adds	r3, r3, r3
 8009cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009cca:	4613      	mov	r3, r2
 8009ccc:	eb42 0303 	adc.w	r3, r2, r3
 8009cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009cd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009cda:	f7f6 ff47 	bl	8000b6c <__aeabi_uldivmod>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	4b0d      	ldr	r3, [pc, #52]	; (8009d18 <UART_SetConfig+0x2d4>)
 8009ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8009ce8:	095b      	lsrs	r3, r3, #5
 8009cea:	2164      	movs	r1, #100	; 0x64
 8009cec:	fb01 f303 	mul.w	r3, r1, r3
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	00db      	lsls	r3, r3, #3
 8009cf4:	3332      	adds	r3, #50	; 0x32
 8009cf6:	4a08      	ldr	r2, [pc, #32]	; (8009d18 <UART_SetConfig+0x2d4>)
 8009cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8009cfc:	095b      	lsrs	r3, r3, #5
 8009cfe:	f003 0207 	and.w	r2, r3, #7
 8009d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4422      	add	r2, r4
 8009d0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009d0c:	e105      	b.n	8009f1a <UART_SetConfig+0x4d6>
 8009d0e:	bf00      	nop
 8009d10:	40011000 	.word	0x40011000
 8009d14:	40011400 	.word	0x40011400
 8009d18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009d1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d20:	2200      	movs	r2, #0
 8009d22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009d26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009d2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009d2e:	4642      	mov	r2, r8
 8009d30:	464b      	mov	r3, r9
 8009d32:	1891      	adds	r1, r2, r2
 8009d34:	6239      	str	r1, [r7, #32]
 8009d36:	415b      	adcs	r3, r3
 8009d38:	627b      	str	r3, [r7, #36]	; 0x24
 8009d3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009d3e:	4641      	mov	r1, r8
 8009d40:	1854      	adds	r4, r2, r1
 8009d42:	4649      	mov	r1, r9
 8009d44:	eb43 0501 	adc.w	r5, r3, r1
 8009d48:	f04f 0200 	mov.w	r2, #0
 8009d4c:	f04f 0300 	mov.w	r3, #0
 8009d50:	00eb      	lsls	r3, r5, #3
 8009d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d56:	00e2      	lsls	r2, r4, #3
 8009d58:	4614      	mov	r4, r2
 8009d5a:	461d      	mov	r5, r3
 8009d5c:	4643      	mov	r3, r8
 8009d5e:	18e3      	adds	r3, r4, r3
 8009d60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009d64:	464b      	mov	r3, r9
 8009d66:	eb45 0303 	adc.w	r3, r5, r3
 8009d6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009d7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009d7e:	f04f 0200 	mov.w	r2, #0
 8009d82:	f04f 0300 	mov.w	r3, #0
 8009d86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009d8a:	4629      	mov	r1, r5
 8009d8c:	008b      	lsls	r3, r1, #2
 8009d8e:	4621      	mov	r1, r4
 8009d90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d94:	4621      	mov	r1, r4
 8009d96:	008a      	lsls	r2, r1, #2
 8009d98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009d9c:	f7f6 fee6 	bl	8000b6c <__aeabi_uldivmod>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	4b60      	ldr	r3, [pc, #384]	; (8009f28 <UART_SetConfig+0x4e4>)
 8009da6:	fba3 2302 	umull	r2, r3, r3, r2
 8009daa:	095b      	lsrs	r3, r3, #5
 8009dac:	011c      	lsls	r4, r3, #4
 8009dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009db2:	2200      	movs	r2, #0
 8009db4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009db8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009dbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009dc0:	4642      	mov	r2, r8
 8009dc2:	464b      	mov	r3, r9
 8009dc4:	1891      	adds	r1, r2, r2
 8009dc6:	61b9      	str	r1, [r7, #24]
 8009dc8:	415b      	adcs	r3, r3
 8009dca:	61fb      	str	r3, [r7, #28]
 8009dcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009dd0:	4641      	mov	r1, r8
 8009dd2:	1851      	adds	r1, r2, r1
 8009dd4:	6139      	str	r1, [r7, #16]
 8009dd6:	4649      	mov	r1, r9
 8009dd8:	414b      	adcs	r3, r1
 8009dda:	617b      	str	r3, [r7, #20]
 8009ddc:	f04f 0200 	mov.w	r2, #0
 8009de0:	f04f 0300 	mov.w	r3, #0
 8009de4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009de8:	4659      	mov	r1, fp
 8009dea:	00cb      	lsls	r3, r1, #3
 8009dec:	4651      	mov	r1, sl
 8009dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009df2:	4651      	mov	r1, sl
 8009df4:	00ca      	lsls	r2, r1, #3
 8009df6:	4610      	mov	r0, r2
 8009df8:	4619      	mov	r1, r3
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	4642      	mov	r2, r8
 8009dfe:	189b      	adds	r3, r3, r2
 8009e00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009e04:	464b      	mov	r3, r9
 8009e06:	460a      	mov	r2, r1
 8009e08:	eb42 0303 	adc.w	r3, r2, r3
 8009e0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	67bb      	str	r3, [r7, #120]	; 0x78
 8009e1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009e1c:	f04f 0200 	mov.w	r2, #0
 8009e20:	f04f 0300 	mov.w	r3, #0
 8009e24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009e28:	4649      	mov	r1, r9
 8009e2a:	008b      	lsls	r3, r1, #2
 8009e2c:	4641      	mov	r1, r8
 8009e2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e32:	4641      	mov	r1, r8
 8009e34:	008a      	lsls	r2, r1, #2
 8009e36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009e3a:	f7f6 fe97 	bl	8000b6c <__aeabi_uldivmod>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	460b      	mov	r3, r1
 8009e42:	4b39      	ldr	r3, [pc, #228]	; (8009f28 <UART_SetConfig+0x4e4>)
 8009e44:	fba3 1302 	umull	r1, r3, r3, r2
 8009e48:	095b      	lsrs	r3, r3, #5
 8009e4a:	2164      	movs	r1, #100	; 0x64
 8009e4c:	fb01 f303 	mul.w	r3, r1, r3
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	011b      	lsls	r3, r3, #4
 8009e54:	3332      	adds	r3, #50	; 0x32
 8009e56:	4a34      	ldr	r2, [pc, #208]	; (8009f28 <UART_SetConfig+0x4e4>)
 8009e58:	fba2 2303 	umull	r2, r3, r2, r3
 8009e5c:	095b      	lsrs	r3, r3, #5
 8009e5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e62:	441c      	add	r4, r3
 8009e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e68:	2200      	movs	r2, #0
 8009e6a:	673b      	str	r3, [r7, #112]	; 0x70
 8009e6c:	677a      	str	r2, [r7, #116]	; 0x74
 8009e6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009e72:	4642      	mov	r2, r8
 8009e74:	464b      	mov	r3, r9
 8009e76:	1891      	adds	r1, r2, r2
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	415b      	adcs	r3, r3
 8009e7c:	60fb      	str	r3, [r7, #12]
 8009e7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e82:	4641      	mov	r1, r8
 8009e84:	1851      	adds	r1, r2, r1
 8009e86:	6039      	str	r1, [r7, #0]
 8009e88:	4649      	mov	r1, r9
 8009e8a:	414b      	adcs	r3, r1
 8009e8c:	607b      	str	r3, [r7, #4]
 8009e8e:	f04f 0200 	mov.w	r2, #0
 8009e92:	f04f 0300 	mov.w	r3, #0
 8009e96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009e9a:	4659      	mov	r1, fp
 8009e9c:	00cb      	lsls	r3, r1, #3
 8009e9e:	4651      	mov	r1, sl
 8009ea0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ea4:	4651      	mov	r1, sl
 8009ea6:	00ca      	lsls	r2, r1, #3
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	4619      	mov	r1, r3
 8009eac:	4603      	mov	r3, r0
 8009eae:	4642      	mov	r2, r8
 8009eb0:	189b      	adds	r3, r3, r2
 8009eb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009eb4:	464b      	mov	r3, r9
 8009eb6:	460a      	mov	r2, r1
 8009eb8:	eb42 0303 	adc.w	r3, r2, r3
 8009ebc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	663b      	str	r3, [r7, #96]	; 0x60
 8009ec8:	667a      	str	r2, [r7, #100]	; 0x64
 8009eca:	f04f 0200 	mov.w	r2, #0
 8009ece:	f04f 0300 	mov.w	r3, #0
 8009ed2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009ed6:	4649      	mov	r1, r9
 8009ed8:	008b      	lsls	r3, r1, #2
 8009eda:	4641      	mov	r1, r8
 8009edc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ee0:	4641      	mov	r1, r8
 8009ee2:	008a      	lsls	r2, r1, #2
 8009ee4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009ee8:	f7f6 fe40 	bl	8000b6c <__aeabi_uldivmod>
 8009eec:	4602      	mov	r2, r0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	4b0d      	ldr	r3, [pc, #52]	; (8009f28 <UART_SetConfig+0x4e4>)
 8009ef2:	fba3 1302 	umull	r1, r3, r3, r2
 8009ef6:	095b      	lsrs	r3, r3, #5
 8009ef8:	2164      	movs	r1, #100	; 0x64
 8009efa:	fb01 f303 	mul.w	r3, r1, r3
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	011b      	lsls	r3, r3, #4
 8009f02:	3332      	adds	r3, #50	; 0x32
 8009f04:	4a08      	ldr	r2, [pc, #32]	; (8009f28 <UART_SetConfig+0x4e4>)
 8009f06:	fba2 2303 	umull	r2, r3, r2, r3
 8009f0a:	095b      	lsrs	r3, r3, #5
 8009f0c:	f003 020f 	and.w	r2, r3, #15
 8009f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4422      	add	r2, r4
 8009f18:	609a      	str	r2, [r3, #8]
}
 8009f1a:	bf00      	nop
 8009f1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009f20:	46bd      	mov	sp, r7
 8009f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f26:	bf00      	nop
 8009f28:	51eb851f 	.word	0x51eb851f

08009f2c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	4603      	mov	r3, r0
 8009f34:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009f36:	2300      	movs	r3, #0
 8009f38:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009f3e:	2b84      	cmp	r3, #132	; 0x84
 8009f40:	d005      	beq.n	8009f4e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009f42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	4413      	add	r3, r2
 8009f4a:	3303      	adds	r3, #3
 8009f4c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3714      	adds	r7, #20
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f62:	f3ef 8305 	mrs	r3, IPSR
 8009f66:	607b      	str	r3, [r7, #4]
  return(result);
 8009f68:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	bf14      	ite	ne
 8009f6e:	2301      	movne	r3, #1
 8009f70:	2300      	moveq	r3, #0
 8009f72:	b2db      	uxtb	r3, r3
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009f84:	f001 fa2e 	bl	800b3e4 <vTaskStartScheduler>
  
  return osOK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009f92:	f7ff ffe3 	bl	8009f5c <inHandlerMode>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d003      	beq.n	8009fa4 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009f9c:	f001 fb42 	bl	800b624 <xTaskGetTickCountFromISR>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	e002      	b.n	8009faa <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009fa4:	f001 fb2e 	bl	800b604 <xTaskGetTickCount>
 8009fa8:	4603      	mov	r3, r0
  }
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	bd80      	pop	{r7, pc}

08009fae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009fae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fb0:	b089      	sub	sp, #36	; 0x24
 8009fb2:	af04      	add	r7, sp, #16
 8009fb4:	6078      	str	r0, [r7, #4]
 8009fb6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	695b      	ldr	r3, [r3, #20]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d020      	beq.n	800a002 <osThreadCreate+0x54>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d01c      	beq.n	800a002 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	685c      	ldr	r4, [r3, #4]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681d      	ldr	r5, [r3, #0]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	691e      	ldr	r6, [r3, #16]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7ff ffa6 	bl	8009f2c <makeFreeRtosPriority>
 8009fe0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	695b      	ldr	r3, [r3, #20]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009fea:	9202      	str	r2, [sp, #8]
 8009fec:	9301      	str	r3, [sp, #4]
 8009fee:	9100      	str	r1, [sp, #0]
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	4632      	mov	r2, r6
 8009ff4:	4629      	mov	r1, r5
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f000 ffae 	bl	800af58 <xTaskCreateStatic>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	60fb      	str	r3, [r7, #12]
 800a000:	e01c      	b.n	800a03c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	685c      	ldr	r4, [r3, #4]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a00e:	b29e      	uxth	r6, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a016:	4618      	mov	r0, r3
 800a018:	f7ff ff88 	bl	8009f2c <makeFreeRtosPriority>
 800a01c:	4602      	mov	r2, r0
 800a01e:	f107 030c 	add.w	r3, r7, #12
 800a022:	9301      	str	r3, [sp, #4]
 800a024:	9200      	str	r2, [sp, #0]
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	4632      	mov	r2, r6
 800a02a:	4629      	mov	r1, r5
 800a02c:	4620      	mov	r0, r4
 800a02e:	f000 fff0 	bl	800b012 <xTaskCreate>
 800a032:	4603      	mov	r3, r0
 800a034:	2b01      	cmp	r3, #1
 800a036:	d001      	beq.n	800a03c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a038:	2300      	movs	r3, #0
 800a03a:	e000      	b.n	800a03e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a03c:	68fb      	ldr	r3, [r7, #12]
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3714      	adds	r7, #20
 800a042:	46bd      	mov	sp, r7
 800a044:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a046 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b084      	sub	sp, #16
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d001      	beq.n	800a05c <osDelay+0x16>
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	e000      	b.n	800a05e <osDelay+0x18>
 800a05c:	2301      	movs	r3, #1
 800a05e:	4618      	mov	r0, r3
 800a060:	f001 f98c 	bl	800b37c <vTaskDelay>
  
  return osOK;
 800a064:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a066:	4618      	mov	r0, r3
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b082      	sub	sp, #8
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d007      	beq.n	800a08e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	4619      	mov	r1, r3
 800a084:	2001      	movs	r0, #1
 800a086:	f000 fa40 	bl	800a50a <xQueueCreateMutexStatic>
 800a08a:	4603      	mov	r3, r0
 800a08c:	e003      	b.n	800a096 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a08e:	2001      	movs	r0, #1
 800a090:	f000 fa23 	bl	800a4da <xQueueCreateMutex>
 800a094:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a096:	4618      	mov	r0, r3
 800a098:	3708      	adds	r7, #8
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b084      	sub	sp, #16
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
 800a0a6:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d001      	beq.n	800a0b6 <osDelayUntil+0x18>
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	e000      	b.n	800a0b8 <osDelayUntil+0x1a>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f001 f8e0 	bl	800b280 <vTaskDelayUntil>
  
  return osOK;
 800a0c0:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a0ca:	b480      	push	{r7}
 800a0cc:	b083      	sub	sp, #12
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f103 0208 	add.w	r2, r3, #8
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0e2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f103 0208 	add.w	r2, r3, #8
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f103 0208 	add.w	r2, r3, #8
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a0fe:	bf00      	nop
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a10a:	b480      	push	{r7}
 800a10c:	b083      	sub	sp, #12
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	68fa      	ldr	r2, [r7, #12]
 800a138:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	689a      	ldr	r2, [r3, #8]
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	683a      	ldr	r2, [r7, #0]
 800a14e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	1c5a      	adds	r2, r3, #1
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	601a      	str	r2, [r3, #0]
}
 800a160:	bf00      	nop
 800a162:	3714      	adds	r7, #20
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a182:	d103      	bne.n	800a18c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	60fb      	str	r3, [r7, #12]
 800a18a:	e00c      	b.n	800a1a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	3308      	adds	r3, #8
 800a190:	60fb      	str	r3, [r7, #12]
 800a192:	e002      	b.n	800a19a <vListInsert+0x2e>
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	60fb      	str	r3, [r7, #12]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d2f6      	bcs.n	800a194 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	685a      	ldr	r2, [r3, #4]
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	683a      	ldr	r2, [r7, #0]
 800a1b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	1c5a      	adds	r2, r3, #1
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	601a      	str	r2, [r3, #0]
}
 800a1d2:	bf00      	nop
 800a1d4:	3714      	adds	r7, #20
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr

0800a1de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a1de:	b480      	push	{r7}
 800a1e0:	b085      	sub	sp, #20
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	691b      	ldr	r3, [r3, #16]
 800a1ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	6892      	ldr	r2, [r2, #8]
 800a1f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	6852      	ldr	r2, [r2, #4]
 800a1fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	429a      	cmp	r2, r3
 800a208:	d103      	bne.n	800a212 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	689a      	ldr	r2, [r3, #8]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	1e5a      	subs	r2, r3, #1
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
}
 800a226:	4618      	mov	r0, r3
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
	...

0800a234 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10a      	bne.n	800a25e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24c:	f383 8811 	msr	BASEPRI, r3
 800a250:	f3bf 8f6f 	isb	sy
 800a254:	f3bf 8f4f 	dsb	sy
 800a258:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a25a:	bf00      	nop
 800a25c:	e7fe      	b.n	800a25c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a25e:	f002 fb91 	bl	800c984 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a26a:	68f9      	ldr	r1, [r7, #12]
 800a26c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a26e:	fb01 f303 	mul.w	r3, r1, r3
 800a272:	441a      	add	r2, r3
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2200      	movs	r2, #0
 800a27c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a28e:	3b01      	subs	r3, #1
 800a290:	68f9      	ldr	r1, [r7, #12]
 800a292:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a294:	fb01 f303 	mul.w	r3, r1, r3
 800a298:	441a      	add	r2, r3
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	22ff      	movs	r2, #255	; 0xff
 800a2a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	22ff      	movs	r2, #255	; 0xff
 800a2aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d114      	bne.n	800a2de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d01a      	beq.n	800a2f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	3310      	adds	r3, #16
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f001 fb25 	bl	800b910 <xTaskRemoveFromEventList>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d012      	beq.n	800a2f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a2cc:	4b0c      	ldr	r3, [pc, #48]	; (800a300 <xQueueGenericReset+0xcc>)
 800a2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2d2:	601a      	str	r2, [r3, #0]
 800a2d4:	f3bf 8f4f 	dsb	sy
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	e009      	b.n	800a2f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	3310      	adds	r3, #16
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7ff fef1 	bl	800a0ca <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	3324      	adds	r3, #36	; 0x24
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7ff feec 	bl	800a0ca <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a2f2:	f002 fb77 	bl	800c9e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a2f6:	2301      	movs	r3, #1
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3710      	adds	r7, #16
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	e000ed04 	.word	0xe000ed04

0800a304 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a304:	b580      	push	{r7, lr}
 800a306:	b08e      	sub	sp, #56	; 0x38
 800a308:	af02      	add	r7, sp, #8
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	607a      	str	r2, [r7, #4]
 800a310:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d10a      	bne.n	800a32e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a32a:	bf00      	nop
 800a32c:	e7fe      	b.n	800a32c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10a      	bne.n	800a34a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a338:	f383 8811 	msr	BASEPRI, r3
 800a33c:	f3bf 8f6f 	isb	sy
 800a340:	f3bf 8f4f 	dsb	sy
 800a344:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a346:	bf00      	nop
 800a348:	e7fe      	b.n	800a348 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d002      	beq.n	800a356 <xQueueGenericCreateStatic+0x52>
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d001      	beq.n	800a35a <xQueueGenericCreateStatic+0x56>
 800a356:	2301      	movs	r3, #1
 800a358:	e000      	b.n	800a35c <xQueueGenericCreateStatic+0x58>
 800a35a:	2300      	movs	r3, #0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10a      	bne.n	800a376 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	623b      	str	r3, [r7, #32]
}
 800a372:	bf00      	nop
 800a374:	e7fe      	b.n	800a374 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d102      	bne.n	800a382 <xQueueGenericCreateStatic+0x7e>
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d101      	bne.n	800a386 <xQueueGenericCreateStatic+0x82>
 800a382:	2301      	movs	r3, #1
 800a384:	e000      	b.n	800a388 <xQueueGenericCreateStatic+0x84>
 800a386:	2300      	movs	r3, #0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10a      	bne.n	800a3a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a390:	f383 8811 	msr	BASEPRI, r3
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	61fb      	str	r3, [r7, #28]
}
 800a39e:	bf00      	nop
 800a3a0:	e7fe      	b.n	800a3a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a3a2:	2348      	movs	r3, #72	; 0x48
 800a3a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	2b48      	cmp	r3, #72	; 0x48
 800a3aa:	d00a      	beq.n	800a3c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b0:	f383 8811 	msr	BASEPRI, r3
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	61bb      	str	r3, [r7, #24]
}
 800a3be:	bf00      	nop
 800a3c0:	e7fe      	b.n	800a3c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a3c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00d      	beq.n	800a3ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a3d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	4613      	mov	r3, r2
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	68b9      	ldr	r1, [r7, #8]
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f000 f83f 	bl	800a468 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3730      	adds	r7, #48	; 0x30
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b08a      	sub	sp, #40	; 0x28
 800a3f8:	af02      	add	r7, sp, #8
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	4613      	mov	r3, r2
 800a400:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d10a      	bne.n	800a41e <xQueueGenericCreate+0x2a>
	__asm volatile
 800a408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	613b      	str	r3, [r7, #16]
}
 800a41a:	bf00      	nop
 800a41c:	e7fe      	b.n	800a41c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	68ba      	ldr	r2, [r7, #8]
 800a422:	fb02 f303 	mul.w	r3, r2, r3
 800a426:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a428:	69fb      	ldr	r3, [r7, #28]
 800a42a:	3348      	adds	r3, #72	; 0x48
 800a42c:	4618      	mov	r0, r3
 800a42e:	f002 fbcb 	bl	800cbc8 <pvPortMalloc>
 800a432:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d011      	beq.n	800a45e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	3348      	adds	r3, #72	; 0x48
 800a442:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a444:	69bb      	ldr	r3, [r7, #24]
 800a446:	2200      	movs	r2, #0
 800a448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a44c:	79fa      	ldrb	r2, [r7, #7]
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	9300      	str	r3, [sp, #0]
 800a452:	4613      	mov	r3, r2
 800a454:	697a      	ldr	r2, [r7, #20]
 800a456:	68b9      	ldr	r1, [r7, #8]
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f000 f805 	bl	800a468 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a45e:	69bb      	ldr	r3, [r7, #24]
	}
 800a460:	4618      	mov	r0, r3
 800a462:	3720      	adds	r7, #32
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	607a      	str	r2, [r7, #4]
 800a474:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d103      	bne.n	800a484 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	69ba      	ldr	r2, [r7, #24]
 800a480:	601a      	str	r2, [r3, #0]
 800a482:	e002      	b.n	800a48a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	68fa      	ldr	r2, [r7, #12]
 800a48e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a496:	2101      	movs	r1, #1
 800a498:	69b8      	ldr	r0, [r7, #24]
 800a49a:	f7ff fecb 	bl	800a234 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a49e:	bf00      	nop
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b082      	sub	sp, #8
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00e      	beq.n	800a4d2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	2100      	movs	r1, #0
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f837 	bl	800a540 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a4d2:	bf00      	nop
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b086      	sub	sp, #24
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	617b      	str	r3, [r7, #20]
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a4ec:	79fb      	ldrb	r3, [r7, #7]
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	6939      	ldr	r1, [r7, #16]
 800a4f2:	6978      	ldr	r0, [r7, #20]
 800a4f4:	f7ff ff7e 	bl	800a3f4 <xQueueGenericCreate>
 800a4f8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	f7ff ffd3 	bl	800a4a6 <prvInitialiseMutex>

		return xNewQueue;
 800a500:	68fb      	ldr	r3, [r7, #12]
	}
 800a502:	4618      	mov	r0, r3
 800a504:	3718      	adds	r7, #24
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b088      	sub	sp, #32
 800a50e:	af02      	add	r7, sp, #8
 800a510:	4603      	mov	r3, r0
 800a512:	6039      	str	r1, [r7, #0]
 800a514:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a516:	2301      	movs	r3, #1
 800a518:	617b      	str	r3, [r7, #20]
 800a51a:	2300      	movs	r3, #0
 800a51c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a51e:	79fb      	ldrb	r3, [r7, #7]
 800a520:	9300      	str	r3, [sp, #0]
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	2200      	movs	r2, #0
 800a526:	6939      	ldr	r1, [r7, #16]
 800a528:	6978      	ldr	r0, [r7, #20]
 800a52a:	f7ff feeb 	bl	800a304 <xQueueGenericCreateStatic>
 800a52e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	f7ff ffb8 	bl	800a4a6 <prvInitialiseMutex>

		return xNewQueue;
 800a536:	68fb      	ldr	r3, [r7, #12]
	}
 800a538:	4618      	mov	r0, r3
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b08e      	sub	sp, #56	; 0x38
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]
 800a54c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a54e:	2300      	movs	r3, #0
 800a550:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10a      	bne.n	800a572 <xQueueGenericSend+0x32>
	__asm volatile
 800a55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a560:	f383 8811 	msr	BASEPRI, r3
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	f3bf 8f4f 	dsb	sy
 800a56c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a56e:	bf00      	nop
 800a570:	e7fe      	b.n	800a570 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d103      	bne.n	800a580 <xQueueGenericSend+0x40>
 800a578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d101      	bne.n	800a584 <xQueueGenericSend+0x44>
 800a580:	2301      	movs	r3, #1
 800a582:	e000      	b.n	800a586 <xQueueGenericSend+0x46>
 800a584:	2300      	movs	r3, #0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d10a      	bne.n	800a5a0 <xQueueGenericSend+0x60>
	__asm volatile
 800a58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a59c:	bf00      	nop
 800a59e:	e7fe      	b.n	800a59e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d103      	bne.n	800a5ae <xQueueGenericSend+0x6e>
 800a5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d101      	bne.n	800a5b2 <xQueueGenericSend+0x72>
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e000      	b.n	800a5b4 <xQueueGenericSend+0x74>
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10a      	bne.n	800a5ce <xQueueGenericSend+0x8e>
	__asm volatile
 800a5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	623b      	str	r3, [r7, #32]
}
 800a5ca:	bf00      	nop
 800a5cc:	e7fe      	b.n	800a5cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5ce:	f001 fb5b 	bl	800bc88 <xTaskGetSchedulerState>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d102      	bne.n	800a5de <xQueueGenericSend+0x9e>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d101      	bne.n	800a5e2 <xQueueGenericSend+0xa2>
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e000      	b.n	800a5e4 <xQueueGenericSend+0xa4>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d10a      	bne.n	800a5fe <xQueueGenericSend+0xbe>
	__asm volatile
 800a5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ec:	f383 8811 	msr	BASEPRI, r3
 800a5f0:	f3bf 8f6f 	isb	sy
 800a5f4:	f3bf 8f4f 	dsb	sy
 800a5f8:	61fb      	str	r3, [r7, #28]
}
 800a5fa:	bf00      	nop
 800a5fc:	e7fe      	b.n	800a5fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5fe:	f002 f9c1 	bl	800c984 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d302      	bcc.n	800a614 <xQueueGenericSend+0xd4>
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	2b02      	cmp	r3, #2
 800a612:	d129      	bne.n	800a668 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a614:	683a      	ldr	r2, [r7, #0]
 800a616:	68b9      	ldr	r1, [r7, #8]
 800a618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a61a:	f000 fb2f 	bl	800ac7c <prvCopyDataToQueue>
 800a61e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a624:	2b00      	cmp	r3, #0
 800a626:	d010      	beq.n	800a64a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62a:	3324      	adds	r3, #36	; 0x24
 800a62c:	4618      	mov	r0, r3
 800a62e:	f001 f96f 	bl	800b910 <xTaskRemoveFromEventList>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d013      	beq.n	800a660 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a638:	4b3f      	ldr	r3, [pc, #252]	; (800a738 <xQueueGenericSend+0x1f8>)
 800a63a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a63e:	601a      	str	r2, [r3, #0]
 800a640:	f3bf 8f4f 	dsb	sy
 800a644:	f3bf 8f6f 	isb	sy
 800a648:	e00a      	b.n	800a660 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d007      	beq.n	800a660 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a650:	4b39      	ldr	r3, [pc, #228]	; (800a738 <xQueueGenericSend+0x1f8>)
 800a652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a656:	601a      	str	r2, [r3, #0]
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a660:	f002 f9c0 	bl	800c9e4 <vPortExitCritical>
				return pdPASS;
 800a664:	2301      	movs	r3, #1
 800a666:	e063      	b.n	800a730 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d103      	bne.n	800a676 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a66e:	f002 f9b9 	bl	800c9e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a672:	2300      	movs	r3, #0
 800a674:	e05c      	b.n	800a730 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d106      	bne.n	800a68a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a67c:	f107 0314 	add.w	r3, r7, #20
 800a680:	4618      	mov	r0, r3
 800a682:	f001 f9a7 	bl	800b9d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a686:	2301      	movs	r3, #1
 800a688:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a68a:	f002 f9ab 	bl	800c9e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a68e:	f000 ff0f 	bl	800b4b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a692:	f002 f977 	bl	800c984 <vPortEnterCritical>
 800a696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a698:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a69c:	b25b      	sxtb	r3, r3
 800a69e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6a2:	d103      	bne.n	800a6ac <xQueueGenericSend+0x16c>
 800a6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6b2:	b25b      	sxtb	r3, r3
 800a6b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6b8:	d103      	bne.n	800a6c2 <xQueueGenericSend+0x182>
 800a6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6c2:	f002 f98f 	bl	800c9e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6c6:	1d3a      	adds	r2, r7, #4
 800a6c8:	f107 0314 	add.w	r3, r7, #20
 800a6cc:	4611      	mov	r1, r2
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f001 f996 	bl	800ba00 <xTaskCheckForTimeOut>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d124      	bne.n	800a724 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a6da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6dc:	f000 fbc6 	bl	800ae6c <prvIsQueueFull>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d018      	beq.n	800a718 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e8:	3310      	adds	r3, #16
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	4611      	mov	r1, r2
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f001 f8be 	bl	800b870 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a6f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6f6:	f000 fb51 	bl	800ad9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a6fa:	f000 fee7 	bl	800b4cc <xTaskResumeAll>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	f47f af7c 	bne.w	800a5fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a706:	4b0c      	ldr	r3, [pc, #48]	; (800a738 <xQueueGenericSend+0x1f8>)
 800a708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a70c:	601a      	str	r2, [r3, #0]
 800a70e:	f3bf 8f4f 	dsb	sy
 800a712:	f3bf 8f6f 	isb	sy
 800a716:	e772      	b.n	800a5fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a71a:	f000 fb3f 	bl	800ad9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a71e:	f000 fed5 	bl	800b4cc <xTaskResumeAll>
 800a722:	e76c      	b.n	800a5fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a726:	f000 fb39 	bl	800ad9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a72a:	f000 fecf 	bl	800b4cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a72e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a730:	4618      	mov	r0, r3
 800a732:	3738      	adds	r7, #56	; 0x38
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	e000ed04 	.word	0xe000ed04

0800a73c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b090      	sub	sp, #64	; 0x40
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	607a      	str	r2, [r7, #4]
 800a748:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a750:	2b00      	cmp	r3, #0
 800a752:	d10a      	bne.n	800a76a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a758:	f383 8811 	msr	BASEPRI, r3
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a766:	bf00      	nop
 800a768:	e7fe      	b.n	800a768 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d103      	bne.n	800a778 <xQueueGenericSendFromISR+0x3c>
 800a770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a774:	2b00      	cmp	r3, #0
 800a776:	d101      	bne.n	800a77c <xQueueGenericSendFromISR+0x40>
 800a778:	2301      	movs	r3, #1
 800a77a:	e000      	b.n	800a77e <xQueueGenericSendFromISR+0x42>
 800a77c:	2300      	movs	r3, #0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d10a      	bne.n	800a798 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a794:	bf00      	nop
 800a796:	e7fe      	b.n	800a796 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d103      	bne.n	800a7a6 <xQueueGenericSendFromISR+0x6a>
 800a79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d101      	bne.n	800a7aa <xQueueGenericSendFromISR+0x6e>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e000      	b.n	800a7ac <xQueueGenericSendFromISR+0x70>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10a      	bne.n	800a7c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	623b      	str	r3, [r7, #32]
}
 800a7c2:	bf00      	nop
 800a7c4:	e7fe      	b.n	800a7c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7c6:	f002 f9bf 	bl	800cb48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a7ca:	f3ef 8211 	mrs	r2, BASEPRI
 800a7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	61fa      	str	r2, [r7, #28]
 800a7e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a7e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a7e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d302      	bcc.n	800a7f8 <xQueueGenericSendFromISR+0xbc>
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d12f      	bne.n	800a858 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a806:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	68b9      	ldr	r1, [r7, #8]
 800a80c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a80e:	f000 fa35 	bl	800ac7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a812:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a816:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a81a:	d112      	bne.n	800a842 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a820:	2b00      	cmp	r3, #0
 800a822:	d016      	beq.n	800a852 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a826:	3324      	adds	r3, #36	; 0x24
 800a828:	4618      	mov	r0, r3
 800a82a:	f001 f871 	bl	800b910 <xTaskRemoveFromEventList>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00e      	beq.n	800a852 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00b      	beq.n	800a852 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2201      	movs	r2, #1
 800a83e:	601a      	str	r2, [r3, #0]
 800a840:	e007      	b.n	800a852 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a842:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a846:	3301      	adds	r3, #1
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	b25a      	sxtb	r2, r3
 800a84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a852:	2301      	movs	r3, #1
 800a854:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a856:	e001      	b.n	800a85c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a858:	2300      	movs	r3, #0
 800a85a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a85c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a85e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a866:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3740      	adds	r7, #64	; 0x40
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
	...

0800a874 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b08c      	sub	sp, #48	; 0x30
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a880:	2300      	movs	r3, #0
 800a882:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d10a      	bne.n	800a8a4 <xQueueReceive+0x30>
	__asm volatile
 800a88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a892:	f383 8811 	msr	BASEPRI, r3
 800a896:	f3bf 8f6f 	isb	sy
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	623b      	str	r3, [r7, #32]
}
 800a8a0:	bf00      	nop
 800a8a2:	e7fe      	b.n	800a8a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d103      	bne.n	800a8b2 <xQueueReceive+0x3e>
 800a8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d101      	bne.n	800a8b6 <xQueueReceive+0x42>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e000      	b.n	800a8b8 <xQueueReceive+0x44>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d10a      	bne.n	800a8d2 <xQueueReceive+0x5e>
	__asm volatile
 800a8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	61fb      	str	r3, [r7, #28]
}
 800a8ce:	bf00      	nop
 800a8d0:	e7fe      	b.n	800a8d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8d2:	f001 f9d9 	bl	800bc88 <xTaskGetSchedulerState>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d102      	bne.n	800a8e2 <xQueueReceive+0x6e>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d101      	bne.n	800a8e6 <xQueueReceive+0x72>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e000      	b.n	800a8e8 <xQueueReceive+0x74>
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10a      	bne.n	800a902 <xQueueReceive+0x8e>
	__asm volatile
 800a8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f0:	f383 8811 	msr	BASEPRI, r3
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	61bb      	str	r3, [r7, #24]
}
 800a8fe:	bf00      	nop
 800a900:	e7fe      	b.n	800a900 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a902:	f002 f83f 	bl	800c984 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d01f      	beq.n	800a952 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a912:	68b9      	ldr	r1, [r7, #8]
 800a914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a916:	f000 fa1b 	bl	800ad50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91c:	1e5a      	subs	r2, r3, #1
 800a91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a920:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00f      	beq.n	800a94a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92c:	3310      	adds	r3, #16
 800a92e:	4618      	mov	r0, r3
 800a930:	f000 ffee 	bl	800b910 <xTaskRemoveFromEventList>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d007      	beq.n	800a94a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a93a:	4b3d      	ldr	r3, [pc, #244]	; (800aa30 <xQueueReceive+0x1bc>)
 800a93c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a940:	601a      	str	r2, [r3, #0]
 800a942:	f3bf 8f4f 	dsb	sy
 800a946:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a94a:	f002 f84b 	bl	800c9e4 <vPortExitCritical>
				return pdPASS;
 800a94e:	2301      	movs	r3, #1
 800a950:	e069      	b.n	800aa26 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d103      	bne.n	800a960 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a958:	f002 f844 	bl	800c9e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a95c:	2300      	movs	r3, #0
 800a95e:	e062      	b.n	800aa26 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a962:	2b00      	cmp	r3, #0
 800a964:	d106      	bne.n	800a974 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a966:	f107 0310 	add.w	r3, r7, #16
 800a96a:	4618      	mov	r0, r3
 800a96c:	f001 f832 	bl	800b9d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a970:	2301      	movs	r3, #1
 800a972:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a974:	f002 f836 	bl	800c9e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a978:	f000 fd9a 	bl	800b4b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a97c:	f002 f802 	bl	800c984 <vPortEnterCritical>
 800a980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a982:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a986:	b25b      	sxtb	r3, r3
 800a988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a98c:	d103      	bne.n	800a996 <xQueueReceive+0x122>
 800a98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a990:	2200      	movs	r2, #0
 800a992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a998:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a99c:	b25b      	sxtb	r3, r3
 800a99e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9a2:	d103      	bne.n	800a9ac <xQueueReceive+0x138>
 800a9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9ac:	f002 f81a 	bl	800c9e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9b0:	1d3a      	adds	r2, r7, #4
 800a9b2:	f107 0310 	add.w	r3, r7, #16
 800a9b6:	4611      	mov	r1, r2
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f001 f821 	bl	800ba00 <xTaskCheckForTimeOut>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d123      	bne.n	800aa0c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9c6:	f000 fa3b 	bl	800ae40 <prvIsQueueEmpty>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d017      	beq.n	800aa00 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d2:	3324      	adds	r3, #36	; 0x24
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	4611      	mov	r1, r2
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f000 ff49 	bl	800b870 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a9de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9e0:	f000 f9dc 	bl	800ad9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a9e4:	f000 fd72 	bl	800b4cc <xTaskResumeAll>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d189      	bne.n	800a902 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a9ee:	4b10      	ldr	r3, [pc, #64]	; (800aa30 <xQueueReceive+0x1bc>)
 800a9f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9f4:	601a      	str	r2, [r3, #0]
 800a9f6:	f3bf 8f4f 	dsb	sy
 800a9fa:	f3bf 8f6f 	isb	sy
 800a9fe:	e780      	b.n	800a902 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa02:	f000 f9cb 	bl	800ad9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa06:	f000 fd61 	bl	800b4cc <xTaskResumeAll>
 800aa0a:	e77a      	b.n	800a902 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa0e:	f000 f9c5 	bl	800ad9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa12:	f000 fd5b 	bl	800b4cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa18:	f000 fa12 	bl	800ae40 <prvIsQueueEmpty>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f43f af6f 	beq.w	800a902 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3730      	adds	r7, #48	; 0x30
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	e000ed04 	.word	0xe000ed04

0800aa34 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b08e      	sub	sp, #56	; 0x38
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800aa46:	2300      	movs	r3, #0
 800aa48:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d10a      	bne.n	800aa66 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800aa50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa54:	f383 8811 	msr	BASEPRI, r3
 800aa58:	f3bf 8f6f 	isb	sy
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	623b      	str	r3, [r7, #32]
}
 800aa62:	bf00      	nop
 800aa64:	e7fe      	b.n	800aa64 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aa66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00a      	beq.n	800aa84 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800aa6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa72:	f383 8811 	msr	BASEPRI, r3
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	61fb      	str	r3, [r7, #28]
}
 800aa80:	bf00      	nop
 800aa82:	e7fe      	b.n	800aa82 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa84:	f001 f900 	bl	800bc88 <xTaskGetSchedulerState>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d102      	bne.n	800aa94 <xQueueSemaphoreTake+0x60>
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d101      	bne.n	800aa98 <xQueueSemaphoreTake+0x64>
 800aa94:	2301      	movs	r3, #1
 800aa96:	e000      	b.n	800aa9a <xQueueSemaphoreTake+0x66>
 800aa98:	2300      	movs	r3, #0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d10a      	bne.n	800aab4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800aa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa2:	f383 8811 	msr	BASEPRI, r3
 800aaa6:	f3bf 8f6f 	isb	sy
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	61bb      	str	r3, [r7, #24]
}
 800aab0:	bf00      	nop
 800aab2:	e7fe      	b.n	800aab2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aab4:	f001 ff66 	bl	800c984 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d024      	beq.n	800ab0e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac6:	1e5a      	subs	r2, r3, #1
 800aac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d104      	bne.n	800aade <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800aad4:	f001 fa80 	bl	800bfd8 <pvTaskIncrementMutexHeldCount>
 800aad8:	4602      	mov	r2, r0
 800aada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aadc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00f      	beq.n	800ab06 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae8:	3310      	adds	r3, #16
 800aaea:	4618      	mov	r0, r3
 800aaec:	f000 ff10 	bl	800b910 <xTaskRemoveFromEventList>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d007      	beq.n	800ab06 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aaf6:	4b54      	ldr	r3, [pc, #336]	; (800ac48 <xQueueSemaphoreTake+0x214>)
 800aaf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aafc:	601a      	str	r2, [r3, #0]
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab06:	f001 ff6d 	bl	800c9e4 <vPortExitCritical>
				return pdPASS;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e097      	b.n	800ac3e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d111      	bne.n	800ab38 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ab14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00a      	beq.n	800ab30 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ab1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1e:	f383 8811 	msr	BASEPRI, r3
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	f3bf 8f4f 	dsb	sy
 800ab2a:	617b      	str	r3, [r7, #20]
}
 800ab2c:	bf00      	nop
 800ab2e:	e7fe      	b.n	800ab2e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ab30:	f001 ff58 	bl	800c9e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab34:	2300      	movs	r3, #0
 800ab36:	e082      	b.n	800ac3e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d106      	bne.n	800ab4c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab3e:	f107 030c 	add.w	r3, r7, #12
 800ab42:	4618      	mov	r0, r3
 800ab44:	f000 ff46 	bl	800b9d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab4c:	f001 ff4a 	bl	800c9e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab50:	f000 fcae 	bl	800b4b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab54:	f001 ff16 	bl	800c984 <vPortEnterCritical>
 800ab58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab5e:	b25b      	sxtb	r3, r3
 800ab60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab64:	d103      	bne.n	800ab6e <xQueueSemaphoreTake+0x13a>
 800ab66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab74:	b25b      	sxtb	r3, r3
 800ab76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab7a:	d103      	bne.n	800ab84 <xQueueSemaphoreTake+0x150>
 800ab7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab84:	f001 ff2e 	bl	800c9e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab88:	463a      	mov	r2, r7
 800ab8a:	f107 030c 	add.w	r3, r7, #12
 800ab8e:	4611      	mov	r1, r2
 800ab90:	4618      	mov	r0, r3
 800ab92:	f000 ff35 	bl	800ba00 <xTaskCheckForTimeOut>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d132      	bne.n	800ac02 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab9e:	f000 f94f 	bl	800ae40 <prvIsQueueEmpty>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d026      	beq.n	800abf6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d109      	bne.n	800abc4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800abb0:	f001 fee8 	bl	800c984 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800abb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	4618      	mov	r0, r3
 800abba:	f001 f883 	bl	800bcc4 <xTaskPriorityInherit>
 800abbe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800abc0:	f001 ff10 	bl	800c9e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc6:	3324      	adds	r3, #36	; 0x24
 800abc8:	683a      	ldr	r2, [r7, #0]
 800abca:	4611      	mov	r1, r2
 800abcc:	4618      	mov	r0, r3
 800abce:	f000 fe4f 	bl	800b870 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800abd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abd4:	f000 f8e2 	bl	800ad9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abd8:	f000 fc78 	bl	800b4cc <xTaskResumeAll>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f47f af68 	bne.w	800aab4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800abe4:	4b18      	ldr	r3, [pc, #96]	; (800ac48 <xQueueSemaphoreTake+0x214>)
 800abe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abea:	601a      	str	r2, [r3, #0]
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	f3bf 8f6f 	isb	sy
 800abf4:	e75e      	b.n	800aab4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800abf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abf8:	f000 f8d0 	bl	800ad9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abfc:	f000 fc66 	bl	800b4cc <xTaskResumeAll>
 800ac00:	e758      	b.n	800aab4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ac02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac04:	f000 f8ca 	bl	800ad9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac08:	f000 fc60 	bl	800b4cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac0e:	f000 f917 	bl	800ae40 <prvIsQueueEmpty>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	f43f af4d 	beq.w	800aab4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00d      	beq.n	800ac3c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ac20:	f001 feb0 	bl	800c984 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ac24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac26:	f000 f811 	bl	800ac4c <prvGetDisinheritPriorityAfterTimeout>
 800ac2a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ac2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac32:	4618      	mov	r0, r3
 800ac34:	f001 f942 	bl	800bebc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ac38:	f001 fed4 	bl	800c9e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3738      	adds	r7, #56	; 0x38
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	e000ed04 	.word	0xe000ed04

0800ac4c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d006      	beq.n	800ac6a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f1c3 0304 	rsb	r3, r3, #4
 800ac66:	60fb      	str	r3, [r7, #12]
 800ac68:	e001      	b.n	800ac6e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
	}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3714      	adds	r7, #20
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b086      	sub	sp, #24
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d10d      	bne.n	800acb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d14d      	bne.n	800ad3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f001 f882 	bl	800bdb0 <xTaskPriorityDisinherit>
 800acac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	609a      	str	r2, [r3, #8]
 800acb4:	e043      	b.n	800ad3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d119      	bne.n	800acf0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6858      	ldr	r0, [r3, #4]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc4:	461a      	mov	r2, r3
 800acc6:	68b9      	ldr	r1, [r7, #8]
 800acc8:	f002 f992 	bl	800cff0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	685a      	ldr	r2, [r3, #4]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd4:	441a      	add	r2, r3
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	685a      	ldr	r2, [r3, #4]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d32b      	bcc.n	800ad3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	605a      	str	r2, [r3, #4]
 800acee:	e026      	b.n	800ad3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	68d8      	ldr	r0, [r3, #12]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf8:	461a      	mov	r2, r3
 800acfa:	68b9      	ldr	r1, [r7, #8]
 800acfc:	f002 f978 	bl	800cff0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	68da      	ldr	r2, [r3, #12]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad08:	425b      	negs	r3, r3
 800ad0a:	441a      	add	r2, r3
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	68da      	ldr	r2, [r3, #12]
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d207      	bcs.n	800ad2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	689a      	ldr	r2, [r3, #8]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad24:	425b      	negs	r3, r3
 800ad26:	441a      	add	r2, r3
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	d105      	bne.n	800ad3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d002      	beq.n	800ad3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	1c5a      	adds	r2, r3, #1
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ad46:	697b      	ldr	r3, [r7, #20]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3718      	adds	r7, #24
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d018      	beq.n	800ad94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	68da      	ldr	r2, [r3, #12]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad6a:	441a      	add	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	68da      	ldr	r2, [r3, #12]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d303      	bcc.n	800ad84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	68d9      	ldr	r1, [r3, #12]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	6838      	ldr	r0, [r7, #0]
 800ad90:	f002 f92e 	bl	800cff0 <memcpy>
	}
}
 800ad94:	bf00      	nop
 800ad96:	3708      	adds	r7, #8
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ada4:	f001 fdee 	bl	800c984 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800adb0:	e011      	b.n	800add6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d012      	beq.n	800ade0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	3324      	adds	r3, #36	; 0x24
 800adbe:	4618      	mov	r0, r3
 800adc0:	f000 fda6 	bl	800b910 <xTaskRemoveFromEventList>
 800adc4:	4603      	mov	r3, r0
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d001      	beq.n	800adce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800adca:	f000 fe7b 	bl	800bac4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800adce:	7bfb      	ldrb	r3, [r7, #15]
 800add0:	3b01      	subs	r3, #1
 800add2:	b2db      	uxtb	r3, r3
 800add4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800add6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adda:	2b00      	cmp	r3, #0
 800addc:	dce9      	bgt.n	800adb2 <prvUnlockQueue+0x16>
 800adde:	e000      	b.n	800ade2 <prvUnlockQueue+0x46>
					break;
 800ade0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	22ff      	movs	r2, #255	; 0xff
 800ade6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800adea:	f001 fdfb 	bl	800c9e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800adee:	f001 fdc9 	bl	800c984 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adf8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800adfa:	e011      	b.n	800ae20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	691b      	ldr	r3, [r3, #16]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d012      	beq.n	800ae2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	3310      	adds	r3, #16
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f000 fd81 	bl	800b910 <xTaskRemoveFromEventList>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d001      	beq.n	800ae18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ae14:	f000 fe56 	bl	800bac4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ae18:	7bbb      	ldrb	r3, [r7, #14]
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	dce9      	bgt.n	800adfc <prvUnlockQueue+0x60>
 800ae28:	e000      	b.n	800ae2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ae2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	22ff      	movs	r2, #255	; 0xff
 800ae30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ae34:	f001 fdd6 	bl	800c9e4 <vPortExitCritical>
}
 800ae38:	bf00      	nop
 800ae3a:	3710      	adds	r7, #16
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae48:	f001 fd9c 	bl	800c984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d102      	bne.n	800ae5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ae54:	2301      	movs	r3, #1
 800ae56:	60fb      	str	r3, [r7, #12]
 800ae58:	e001      	b.n	800ae5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae5e:	f001 fdc1 	bl	800c9e4 <vPortExitCritical>

	return xReturn;
 800ae62:	68fb      	ldr	r3, [r7, #12]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae74:	f001 fd86 	bl	800c984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d102      	bne.n	800ae8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae84:	2301      	movs	r3, #1
 800ae86:	60fb      	str	r3, [r7, #12]
 800ae88:	e001      	b.n	800ae8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae8e:	f001 fda9 	bl	800c9e4 <vPortExitCritical>

	return xReturn;
 800ae92:	68fb      	ldr	r3, [r7, #12]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aea6:	2300      	movs	r3, #0
 800aea8:	60fb      	str	r3, [r7, #12]
 800aeaa:	e014      	b.n	800aed6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aeac:	4a0f      	ldr	r2, [pc, #60]	; (800aeec <vQueueAddToRegistry+0x50>)
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d10b      	bne.n	800aed0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aeb8:	490c      	ldr	r1, [pc, #48]	; (800aeec <vQueueAddToRegistry+0x50>)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	683a      	ldr	r2, [r7, #0]
 800aebe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aec2:	4a0a      	ldr	r2, [pc, #40]	; (800aeec <vQueueAddToRegistry+0x50>)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	00db      	lsls	r3, r3, #3
 800aec8:	4413      	add	r3, r2
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aece:	e006      	b.n	800aede <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	3301      	adds	r3, #1
 800aed4:	60fb      	str	r3, [r7, #12]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2b07      	cmp	r3, #7
 800aeda:	d9e7      	bls.n	800aeac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aedc:	bf00      	nop
 800aede:	bf00      	nop
 800aee0:	3714      	adds	r7, #20
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	2000203c 	.word	0x2000203c

0800aef0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	60b9      	str	r1, [r7, #8]
 800aefa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800af00:	f001 fd40 	bl	800c984 <vPortEnterCritical>
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af0a:	b25b      	sxtb	r3, r3
 800af0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af10:	d103      	bne.n	800af1a <vQueueWaitForMessageRestricted+0x2a>
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af20:	b25b      	sxtb	r3, r3
 800af22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af26:	d103      	bne.n	800af30 <vQueueWaitForMessageRestricted+0x40>
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af30:	f001 fd58 	bl	800c9e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d106      	bne.n	800af4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	3324      	adds	r3, #36	; 0x24
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	68b9      	ldr	r1, [r7, #8]
 800af44:	4618      	mov	r0, r3
 800af46:	f000 fcb7 	bl	800b8b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800af4a:	6978      	ldr	r0, [r7, #20]
 800af4c:	f7ff ff26 	bl	800ad9c <prvUnlockQueue>
	}
 800af50:	bf00      	nop
 800af52:	3718      	adds	r7, #24
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b08e      	sub	sp, #56	; 0x38
 800af5c:	af04      	add	r7, sp, #16
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
 800af64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d10a      	bne.n	800af82 <xTaskCreateStatic+0x2a>
	__asm volatile
 800af6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af70:	f383 8811 	msr	BASEPRI, r3
 800af74:	f3bf 8f6f 	isb	sy
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	623b      	str	r3, [r7, #32]
}
 800af7e:	bf00      	nop
 800af80:	e7fe      	b.n	800af80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800af82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10a      	bne.n	800af9e <xTaskCreateStatic+0x46>
	__asm volatile
 800af88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8c:	f383 8811 	msr	BASEPRI, r3
 800af90:	f3bf 8f6f 	isb	sy
 800af94:	f3bf 8f4f 	dsb	sy
 800af98:	61fb      	str	r3, [r7, #28]
}
 800af9a:	bf00      	nop
 800af9c:	e7fe      	b.n	800af9c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800af9e:	2364      	movs	r3, #100	; 0x64
 800afa0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	2b64      	cmp	r3, #100	; 0x64
 800afa6:	d00a      	beq.n	800afbe <xTaskCreateStatic+0x66>
	__asm volatile
 800afa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afac:	f383 8811 	msr	BASEPRI, r3
 800afb0:	f3bf 8f6f 	isb	sy
 800afb4:	f3bf 8f4f 	dsb	sy
 800afb8:	61bb      	str	r3, [r7, #24]
}
 800afba:	bf00      	nop
 800afbc:	e7fe      	b.n	800afbc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800afbe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800afc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d01e      	beq.n	800b004 <xTaskCreateStatic+0xac>
 800afc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d01b      	beq.n	800b004 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800afcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800afd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afd4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800afd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd8:	2202      	movs	r2, #2
 800afda:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800afde:	2300      	movs	r3, #0
 800afe0:	9303      	str	r3, [sp, #12]
 800afe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe4:	9302      	str	r3, [sp, #8]
 800afe6:	f107 0314 	add.w	r3, r7, #20
 800afea:	9301      	str	r3, [sp, #4]
 800afec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afee:	9300      	str	r3, [sp, #0]
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	68b9      	ldr	r1, [r7, #8]
 800aff6:	68f8      	ldr	r0, [r7, #12]
 800aff8:	f000 f850 	bl	800b09c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800affc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800affe:	f000 f8d5 	bl	800b1ac <prvAddNewTaskToReadyList>
 800b002:	e001      	b.n	800b008 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b004:	2300      	movs	r3, #0
 800b006:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b008:	697b      	ldr	r3, [r7, #20]
	}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3728      	adds	r7, #40	; 0x28
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b012:	b580      	push	{r7, lr}
 800b014:	b08c      	sub	sp, #48	; 0x30
 800b016:	af04      	add	r7, sp, #16
 800b018:	60f8      	str	r0, [r7, #12]
 800b01a:	60b9      	str	r1, [r7, #8]
 800b01c:	603b      	str	r3, [r7, #0]
 800b01e:	4613      	mov	r3, r2
 800b020:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b022:	88fb      	ldrh	r3, [r7, #6]
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	4618      	mov	r0, r3
 800b028:	f001 fdce 	bl	800cbc8 <pvPortMalloc>
 800b02c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d00e      	beq.n	800b052 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b034:	2064      	movs	r0, #100	; 0x64
 800b036:	f001 fdc7 	bl	800cbc8 <pvPortMalloc>
 800b03a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d003      	beq.n	800b04a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b042:	69fb      	ldr	r3, [r7, #28]
 800b044:	697a      	ldr	r2, [r7, #20]
 800b046:	631a      	str	r2, [r3, #48]	; 0x30
 800b048:	e005      	b.n	800b056 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b04a:	6978      	ldr	r0, [r7, #20]
 800b04c:	f001 fe88 	bl	800cd60 <vPortFree>
 800b050:	e001      	b.n	800b056 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b052:	2300      	movs	r3, #0
 800b054:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b056:	69fb      	ldr	r3, [r7, #28]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d017      	beq.n	800b08c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	2200      	movs	r2, #0
 800b060:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b064:	88fa      	ldrh	r2, [r7, #6]
 800b066:	2300      	movs	r3, #0
 800b068:	9303      	str	r3, [sp, #12]
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	9302      	str	r3, [sp, #8]
 800b06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b070:	9301      	str	r3, [sp, #4]
 800b072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	68b9      	ldr	r1, [r7, #8]
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f000 f80e 	bl	800b09c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b080:	69f8      	ldr	r0, [r7, #28]
 800b082:	f000 f893 	bl	800b1ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b086:	2301      	movs	r3, #1
 800b088:	61bb      	str	r3, [r7, #24]
 800b08a:	e002      	b.n	800b092 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b08c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b090:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b092:	69bb      	ldr	r3, [r7, #24]
	}
 800b094:	4618      	mov	r0, r3
 800b096:	3720      	adds	r7, #32
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b088      	sub	sp, #32
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
 800b0a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b0b4:	3b01      	subs	r3, #1
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	4413      	add	r3, r2
 800b0ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	f023 0307 	bic.w	r3, r3, #7
 800b0c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b0c4:	69bb      	ldr	r3, [r7, #24]
 800b0c6:	f003 0307 	and.w	r3, r3, #7
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00a      	beq.n	800b0e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	617b      	str	r3, [r7, #20]
}
 800b0e0:	bf00      	nop
 800b0e2:	e7fe      	b.n	800b0e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d01f      	beq.n	800b12a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	61fb      	str	r3, [r7, #28]
 800b0ee:	e012      	b.n	800b116 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	4413      	add	r3, r2
 800b0f6:	7819      	ldrb	r1, [r3, #0]
 800b0f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	3334      	adds	r3, #52	; 0x34
 800b100:	460a      	mov	r2, r1
 800b102:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b104:	68ba      	ldr	r2, [r7, #8]
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	4413      	add	r3, r2
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d006      	beq.n	800b11e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b110:	69fb      	ldr	r3, [r7, #28]
 800b112:	3301      	adds	r3, #1
 800b114:	61fb      	str	r3, [r7, #28]
 800b116:	69fb      	ldr	r3, [r7, #28]
 800b118:	2b1f      	cmp	r3, #31
 800b11a:	d9e9      	bls.n	800b0f0 <prvInitialiseNewTask+0x54>
 800b11c:	e000      	b.n	800b120 <prvInitialiseNewTask+0x84>
			{
				break;
 800b11e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b122:	2200      	movs	r2, #0
 800b124:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800b128:	e003      	b.n	800b132 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12c:	2200      	movs	r2, #0
 800b12e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b134:	2b03      	cmp	r3, #3
 800b136:	d901      	bls.n	800b13c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b138:	2303      	movs	r3, #3
 800b13a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b140:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b146:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 800b148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14a:	2200      	movs	r2, #0
 800b14c:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b150:	3304      	adds	r3, #4
 800b152:	4618      	mov	r0, r3
 800b154:	f7fe ffd9 	bl	800a10a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15a:	3318      	adds	r3, #24
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fe ffd4 	bl	800a10a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b166:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16a:	f1c3 0204 	rsb	r2, r3, #4
 800b16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b170:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b176:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17a:	2200      	movs	r2, #0
 800b17c:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b180:	2200      	movs	r2, #0
 800b182:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b186:	683a      	ldr	r2, [r7, #0]
 800b188:	68f9      	ldr	r1, [r7, #12]
 800b18a:	69b8      	ldr	r0, [r7, #24]
 800b18c:	f001 fad0 	bl	800c730 <pxPortInitialiseStack>
 800b190:	4602      	mov	r2, r0
 800b192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b194:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d002      	beq.n	800b1a2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b19e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1a2:	bf00      	nop
 800b1a4:	3720      	adds	r7, #32
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
	...

0800b1ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b1b4:	f001 fbe6 	bl	800c984 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b1b8:	4b2a      	ldr	r3, [pc, #168]	; (800b264 <prvAddNewTaskToReadyList+0xb8>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	3301      	adds	r3, #1
 800b1be:	4a29      	ldr	r2, [pc, #164]	; (800b264 <prvAddNewTaskToReadyList+0xb8>)
 800b1c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b1c2:	4b29      	ldr	r3, [pc, #164]	; (800b268 <prvAddNewTaskToReadyList+0xbc>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d109      	bne.n	800b1de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b1ca:	4a27      	ldr	r2, [pc, #156]	; (800b268 <prvAddNewTaskToReadyList+0xbc>)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b1d0:	4b24      	ldr	r3, [pc, #144]	; (800b264 <prvAddNewTaskToReadyList+0xb8>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d110      	bne.n	800b1fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b1d8:	f000 fc98 	bl	800bb0c <prvInitialiseTaskLists>
 800b1dc:	e00d      	b.n	800b1fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b1de:	4b23      	ldr	r3, [pc, #140]	; (800b26c <prvAddNewTaskToReadyList+0xc0>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d109      	bne.n	800b1fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b1e6:	4b20      	ldr	r3, [pc, #128]	; (800b268 <prvAddNewTaskToReadyList+0xbc>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d802      	bhi.n	800b1fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b1f4:	4a1c      	ldr	r2, [pc, #112]	; (800b268 <prvAddNewTaskToReadyList+0xbc>)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b1fa:	4b1d      	ldr	r3, [pc, #116]	; (800b270 <prvAddNewTaskToReadyList+0xc4>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	3301      	adds	r3, #1
 800b200:	4a1b      	ldr	r2, [pc, #108]	; (800b270 <prvAddNewTaskToReadyList+0xc4>)
 800b202:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b208:	2201      	movs	r2, #1
 800b20a:	409a      	lsls	r2, r3
 800b20c:	4b19      	ldr	r3, [pc, #100]	; (800b274 <prvAddNewTaskToReadyList+0xc8>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4313      	orrs	r3, r2
 800b212:	4a18      	ldr	r2, [pc, #96]	; (800b274 <prvAddNewTaskToReadyList+0xc8>)
 800b214:	6013      	str	r3, [r2, #0]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b21a:	4613      	mov	r3, r2
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	4413      	add	r3, r2
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	4a15      	ldr	r2, [pc, #84]	; (800b278 <prvAddNewTaskToReadyList+0xcc>)
 800b224:	441a      	add	r2, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	3304      	adds	r3, #4
 800b22a:	4619      	mov	r1, r3
 800b22c:	4610      	mov	r0, r2
 800b22e:	f7fe ff79 	bl	800a124 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b232:	f001 fbd7 	bl	800c9e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b236:	4b0d      	ldr	r3, [pc, #52]	; (800b26c <prvAddNewTaskToReadyList+0xc0>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00e      	beq.n	800b25c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b23e:	4b0a      	ldr	r3, [pc, #40]	; (800b268 <prvAddNewTaskToReadyList+0xbc>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b248:	429a      	cmp	r2, r3
 800b24a:	d207      	bcs.n	800b25c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b24c:	4b0b      	ldr	r3, [pc, #44]	; (800b27c <prvAddNewTaskToReadyList+0xd0>)
 800b24e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b252:	601a      	str	r2, [r3, #0]
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b25c:	bf00      	nop
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	20002140 	.word	0x20002140
 800b268:	2000207c 	.word	0x2000207c
 800b26c:	2000214c 	.word	0x2000214c
 800b270:	2000215c 	.word	0x2000215c
 800b274:	20002148 	.word	0x20002148
 800b278:	20002080 	.word	0x20002080
 800b27c:	e000ed04 	.word	0xe000ed04

0800b280 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b280:	b580      	push	{r7, lr}
 800b282:	b08a      	sub	sp, #40	; 0x28
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b28a:	2300      	movs	r3, #0
 800b28c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d10a      	bne.n	800b2aa <vTaskDelayUntil+0x2a>
	__asm volatile
 800b294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b298:	f383 8811 	msr	BASEPRI, r3
 800b29c:	f3bf 8f6f 	isb	sy
 800b2a0:	f3bf 8f4f 	dsb	sy
 800b2a4:	617b      	str	r3, [r7, #20]
}
 800b2a6:	bf00      	nop
 800b2a8:	e7fe      	b.n	800b2a8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d10a      	bne.n	800b2c6 <vTaskDelayUntil+0x46>
	__asm volatile
 800b2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	613b      	str	r3, [r7, #16]
}
 800b2c2:	bf00      	nop
 800b2c4:	e7fe      	b.n	800b2c4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b2c6:	4b2a      	ldr	r3, [pc, #168]	; (800b370 <vTaskDelayUntil+0xf0>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00a      	beq.n	800b2e4 <vTaskDelayUntil+0x64>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	60fb      	str	r3, [r7, #12]
}
 800b2e0:	bf00      	nop
 800b2e2:	e7fe      	b.n	800b2e2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b2e4:	f000 f8e4 	bl	800b4b0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b2e8:	4b22      	ldr	r3, [pc, #136]	; (800b374 <vTaskDelayUntil+0xf4>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	683a      	ldr	r2, [r7, #0]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	6a3a      	ldr	r2, [r7, #32]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d20b      	bcs.n	800b31a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	69fa      	ldr	r2, [r7, #28]
 800b308:	429a      	cmp	r2, r3
 800b30a:	d211      	bcs.n	800b330 <vTaskDelayUntil+0xb0>
 800b30c:	69fa      	ldr	r2, [r7, #28]
 800b30e:	6a3b      	ldr	r3, [r7, #32]
 800b310:	429a      	cmp	r2, r3
 800b312:	d90d      	bls.n	800b330 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b314:	2301      	movs	r3, #1
 800b316:	627b      	str	r3, [r7, #36]	; 0x24
 800b318:	e00a      	b.n	800b330 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	69fa      	ldr	r2, [r7, #28]
 800b320:	429a      	cmp	r2, r3
 800b322:	d303      	bcc.n	800b32c <vTaskDelayUntil+0xac>
 800b324:	69fa      	ldr	r2, [r7, #28]
 800b326:	6a3b      	ldr	r3, [r7, #32]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d901      	bls.n	800b330 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b32c:	2301      	movs	r3, #1
 800b32e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	69fa      	ldr	r2, [r7, #28]
 800b334:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d006      	beq.n	800b34a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b33c:	69fa      	ldr	r2, [r7, #28]
 800b33e:	6a3b      	ldr	r3, [r7, #32]
 800b340:	1ad3      	subs	r3, r2, r3
 800b342:	2100      	movs	r1, #0
 800b344:	4618      	mov	r0, r3
 800b346:	f000 fe5b 	bl	800c000 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b34a:	f000 f8bf 	bl	800b4cc <xTaskResumeAll>
 800b34e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d107      	bne.n	800b366 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b356:	4b08      	ldr	r3, [pc, #32]	; (800b378 <vTaskDelayUntil+0xf8>)
 800b358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b35c:	601a      	str	r2, [r3, #0]
 800b35e:	f3bf 8f4f 	dsb	sy
 800b362:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b366:	bf00      	nop
 800b368:	3728      	adds	r7, #40	; 0x28
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	20002168 	.word	0x20002168
 800b374:	20002144 	.word	0x20002144
 800b378:	e000ed04 	.word	0xe000ed04

0800b37c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b384:	2300      	movs	r3, #0
 800b386:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d017      	beq.n	800b3be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b38e:	4b13      	ldr	r3, [pc, #76]	; (800b3dc <vTaskDelay+0x60>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00a      	beq.n	800b3ac <vTaskDelay+0x30>
	__asm volatile
 800b396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39a:	f383 8811 	msr	BASEPRI, r3
 800b39e:	f3bf 8f6f 	isb	sy
 800b3a2:	f3bf 8f4f 	dsb	sy
 800b3a6:	60bb      	str	r3, [r7, #8]
}
 800b3a8:	bf00      	nop
 800b3aa:	e7fe      	b.n	800b3aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b3ac:	f000 f880 	bl	800b4b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 fe24 	bl	800c000 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b3b8:	f000 f888 	bl	800b4cc <xTaskResumeAll>
 800b3bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d107      	bne.n	800b3d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b3c4:	4b06      	ldr	r3, [pc, #24]	; (800b3e0 <vTaskDelay+0x64>)
 800b3c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3ca:	601a      	str	r2, [r3, #0]
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3d4:	bf00      	nop
 800b3d6:	3710      	adds	r7, #16
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	20002168 	.word	0x20002168
 800b3e0:	e000ed04 	.word	0xe000ed04

0800b3e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b08a      	sub	sp, #40	; 0x28
 800b3e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b3f2:	463a      	mov	r2, r7
 800b3f4:	1d39      	adds	r1, r7, #4
 800b3f6:	f107 0308 	add.w	r3, r7, #8
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7f7 f84a 	bl	8002494 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b400:	6839      	ldr	r1, [r7, #0]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	68ba      	ldr	r2, [r7, #8]
 800b406:	9202      	str	r2, [sp, #8]
 800b408:	9301      	str	r3, [sp, #4]
 800b40a:	2300      	movs	r3, #0
 800b40c:	9300      	str	r3, [sp, #0]
 800b40e:	2300      	movs	r3, #0
 800b410:	460a      	mov	r2, r1
 800b412:	4921      	ldr	r1, [pc, #132]	; (800b498 <vTaskStartScheduler+0xb4>)
 800b414:	4821      	ldr	r0, [pc, #132]	; (800b49c <vTaskStartScheduler+0xb8>)
 800b416:	f7ff fd9f 	bl	800af58 <xTaskCreateStatic>
 800b41a:	4603      	mov	r3, r0
 800b41c:	4a20      	ldr	r2, [pc, #128]	; (800b4a0 <vTaskStartScheduler+0xbc>)
 800b41e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b420:	4b1f      	ldr	r3, [pc, #124]	; (800b4a0 <vTaskStartScheduler+0xbc>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b428:	2301      	movs	r3, #1
 800b42a:	617b      	str	r3, [r7, #20]
 800b42c:	e001      	b.n	800b432 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b42e:	2300      	movs	r3, #0
 800b430:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	2b01      	cmp	r3, #1
 800b436:	d102      	bne.n	800b43e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b438:	f000 fe48 	bl	800c0cc <xTimerCreateTimerTask>
 800b43c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	2b01      	cmp	r3, #1
 800b442:	d116      	bne.n	800b472 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b448:	f383 8811 	msr	BASEPRI, r3
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	f3bf 8f4f 	dsb	sy
 800b454:	613b      	str	r3, [r7, #16]
}
 800b456:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b458:	4b12      	ldr	r3, [pc, #72]	; (800b4a4 <vTaskStartScheduler+0xc0>)
 800b45a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b45e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b460:	4b11      	ldr	r3, [pc, #68]	; (800b4a8 <vTaskStartScheduler+0xc4>)
 800b462:	2201      	movs	r2, #1
 800b464:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b466:	4b11      	ldr	r3, [pc, #68]	; (800b4ac <vTaskStartScheduler+0xc8>)
 800b468:	2200      	movs	r2, #0
 800b46a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b46c:	f001 f9e8 	bl	800c840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b470:	e00e      	b.n	800b490 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b478:	d10a      	bne.n	800b490 <vTaskStartScheduler+0xac>
	__asm volatile
 800b47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	60fb      	str	r3, [r7, #12]
}
 800b48c:	bf00      	nop
 800b48e:	e7fe      	b.n	800b48e <vTaskStartScheduler+0xaa>
}
 800b490:	bf00      	nop
 800b492:	3718      	adds	r7, #24
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	0800d528 	.word	0x0800d528
 800b49c:	0800badd 	.word	0x0800badd
 800b4a0:	20002164 	.word	0x20002164
 800b4a4:	20002160 	.word	0x20002160
 800b4a8:	2000214c 	.word	0x2000214c
 800b4ac:	20002144 	.word	0x20002144

0800b4b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b4b4:	4b04      	ldr	r3, [pc, #16]	; (800b4c8 <vTaskSuspendAll+0x18>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	4a03      	ldr	r2, [pc, #12]	; (800b4c8 <vTaskSuspendAll+0x18>)
 800b4bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b4be:	bf00      	nop
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr
 800b4c8:	20002168 	.word	0x20002168

0800b4cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b4da:	4b41      	ldr	r3, [pc, #260]	; (800b5e0 <xTaskResumeAll+0x114>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d10a      	bne.n	800b4f8 <xTaskResumeAll+0x2c>
	__asm volatile
 800b4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e6:	f383 8811 	msr	BASEPRI, r3
 800b4ea:	f3bf 8f6f 	isb	sy
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	603b      	str	r3, [r7, #0]
}
 800b4f4:	bf00      	nop
 800b4f6:	e7fe      	b.n	800b4f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b4f8:	f001 fa44 	bl	800c984 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b4fc:	4b38      	ldr	r3, [pc, #224]	; (800b5e0 <xTaskResumeAll+0x114>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	3b01      	subs	r3, #1
 800b502:	4a37      	ldr	r2, [pc, #220]	; (800b5e0 <xTaskResumeAll+0x114>)
 800b504:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b506:	4b36      	ldr	r3, [pc, #216]	; (800b5e0 <xTaskResumeAll+0x114>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d161      	bne.n	800b5d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b50e:	4b35      	ldr	r3, [pc, #212]	; (800b5e4 <xTaskResumeAll+0x118>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d05d      	beq.n	800b5d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b516:	e02e      	b.n	800b576 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b518:	4b33      	ldr	r3, [pc, #204]	; (800b5e8 <xTaskResumeAll+0x11c>)
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	3318      	adds	r3, #24
 800b524:	4618      	mov	r0, r3
 800b526:	f7fe fe5a 	bl	800a1de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	3304      	adds	r3, #4
 800b52e:	4618      	mov	r0, r3
 800b530:	f7fe fe55 	bl	800a1de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b538:	2201      	movs	r2, #1
 800b53a:	409a      	lsls	r2, r3
 800b53c:	4b2b      	ldr	r3, [pc, #172]	; (800b5ec <xTaskResumeAll+0x120>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4313      	orrs	r3, r2
 800b542:	4a2a      	ldr	r2, [pc, #168]	; (800b5ec <xTaskResumeAll+0x120>)
 800b544:	6013      	str	r3, [r2, #0]
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b54a:	4613      	mov	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4413      	add	r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	4a27      	ldr	r2, [pc, #156]	; (800b5f0 <xTaskResumeAll+0x124>)
 800b554:	441a      	add	r2, r3
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	3304      	adds	r3, #4
 800b55a:	4619      	mov	r1, r3
 800b55c:	4610      	mov	r0, r2
 800b55e:	f7fe fde1 	bl	800a124 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b566:	4b23      	ldr	r3, [pc, #140]	; (800b5f4 <xTaskResumeAll+0x128>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d302      	bcc.n	800b576 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b570:	4b21      	ldr	r3, [pc, #132]	; (800b5f8 <xTaskResumeAll+0x12c>)
 800b572:	2201      	movs	r2, #1
 800b574:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b576:	4b1c      	ldr	r3, [pc, #112]	; (800b5e8 <xTaskResumeAll+0x11c>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1cc      	bne.n	800b518 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d001      	beq.n	800b588 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b584:	f000 fb60 	bl	800bc48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b588:	4b1c      	ldr	r3, [pc, #112]	; (800b5fc <xTaskResumeAll+0x130>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d010      	beq.n	800b5b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b594:	f000 f858 	bl	800b648 <xTaskIncrementTick>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d002      	beq.n	800b5a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b59e:	4b16      	ldr	r3, [pc, #88]	; (800b5f8 <xTaskResumeAll+0x12c>)
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1f1      	bne.n	800b594 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b5b0:	4b12      	ldr	r3, [pc, #72]	; (800b5fc <xTaskResumeAll+0x130>)
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b5b6:	4b10      	ldr	r3, [pc, #64]	; (800b5f8 <xTaskResumeAll+0x12c>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d009      	beq.n	800b5d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b5c2:	4b0f      	ldr	r3, [pc, #60]	; (800b600 <xTaskResumeAll+0x134>)
 800b5c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5c8:	601a      	str	r2, [r3, #0]
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5d2:	f001 fa07 	bl	800c9e4 <vPortExitCritical>

	return xAlreadyYielded;
 800b5d6:	68bb      	ldr	r3, [r7, #8]
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3710      	adds	r7, #16
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	20002168 	.word	0x20002168
 800b5e4:	20002140 	.word	0x20002140
 800b5e8:	20002100 	.word	0x20002100
 800b5ec:	20002148 	.word	0x20002148
 800b5f0:	20002080 	.word	0x20002080
 800b5f4:	2000207c 	.word	0x2000207c
 800b5f8:	20002154 	.word	0x20002154
 800b5fc:	20002150 	.word	0x20002150
 800b600:	e000ed04 	.word	0xe000ed04

0800b604 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b60a:	4b05      	ldr	r3, [pc, #20]	; (800b620 <xTaskGetTickCount+0x1c>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b610:	687b      	ldr	r3, [r7, #4]
}
 800b612:	4618      	mov	r0, r3
 800b614:	370c      	adds	r7, #12
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	20002144 	.word	0x20002144

0800b624 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b62a:	f001 fa8d 	bl	800cb48 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b62e:	2300      	movs	r3, #0
 800b630:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b632:	4b04      	ldr	r3, [pc, #16]	; (800b644 <xTaskGetTickCountFromISR+0x20>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b638:	683b      	ldr	r3, [r7, #0]
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3708      	adds	r7, #8
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	20002144 	.word	0x20002144

0800b648 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b086      	sub	sp, #24
 800b64c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b64e:	2300      	movs	r3, #0
 800b650:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b652:	4b4e      	ldr	r3, [pc, #312]	; (800b78c <xTaskIncrementTick+0x144>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	f040 808e 	bne.w	800b778 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b65c:	4b4c      	ldr	r3, [pc, #304]	; (800b790 <xTaskIncrementTick+0x148>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	3301      	adds	r3, #1
 800b662:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b664:	4a4a      	ldr	r2, [pc, #296]	; (800b790 <xTaskIncrementTick+0x148>)
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d120      	bne.n	800b6b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b670:	4b48      	ldr	r3, [pc, #288]	; (800b794 <xTaskIncrementTick+0x14c>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d00a      	beq.n	800b690 <xTaskIncrementTick+0x48>
	__asm volatile
 800b67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67e:	f383 8811 	msr	BASEPRI, r3
 800b682:	f3bf 8f6f 	isb	sy
 800b686:	f3bf 8f4f 	dsb	sy
 800b68a:	603b      	str	r3, [r7, #0]
}
 800b68c:	bf00      	nop
 800b68e:	e7fe      	b.n	800b68e <xTaskIncrementTick+0x46>
 800b690:	4b40      	ldr	r3, [pc, #256]	; (800b794 <xTaskIncrementTick+0x14c>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	60fb      	str	r3, [r7, #12]
 800b696:	4b40      	ldr	r3, [pc, #256]	; (800b798 <xTaskIncrementTick+0x150>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a3e      	ldr	r2, [pc, #248]	; (800b794 <xTaskIncrementTick+0x14c>)
 800b69c:	6013      	str	r3, [r2, #0]
 800b69e:	4a3e      	ldr	r2, [pc, #248]	; (800b798 <xTaskIncrementTick+0x150>)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6013      	str	r3, [r2, #0]
 800b6a4:	4b3d      	ldr	r3, [pc, #244]	; (800b79c <xTaskIncrementTick+0x154>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	4a3c      	ldr	r2, [pc, #240]	; (800b79c <xTaskIncrementTick+0x154>)
 800b6ac:	6013      	str	r3, [r2, #0]
 800b6ae:	f000 facb 	bl	800bc48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b6b2:	4b3b      	ldr	r3, [pc, #236]	; (800b7a0 <xTaskIncrementTick+0x158>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	693a      	ldr	r2, [r7, #16]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d348      	bcc.n	800b74e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6bc:	4b35      	ldr	r3, [pc, #212]	; (800b794 <xTaskIncrementTick+0x14c>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d104      	bne.n	800b6d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6c6:	4b36      	ldr	r3, [pc, #216]	; (800b7a0 <xTaskIncrementTick+0x158>)
 800b6c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6cc:	601a      	str	r2, [r3, #0]
					break;
 800b6ce:	e03e      	b.n	800b74e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6d0:	4b30      	ldr	r3, [pc, #192]	; (800b794 <xTaskIncrementTick+0x14c>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	68db      	ldr	r3, [r3, #12]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b6e0:	693a      	ldr	r2, [r7, #16]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d203      	bcs.n	800b6f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b6e8:	4a2d      	ldr	r2, [pc, #180]	; (800b7a0 <xTaskIncrementTick+0x158>)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b6ee:	e02e      	b.n	800b74e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	3304      	adds	r3, #4
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7fe fd72 	bl	800a1de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d004      	beq.n	800b70c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	3318      	adds	r3, #24
 800b706:	4618      	mov	r0, r3
 800b708:	f7fe fd69 	bl	800a1de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b710:	2201      	movs	r2, #1
 800b712:	409a      	lsls	r2, r3
 800b714:	4b23      	ldr	r3, [pc, #140]	; (800b7a4 <xTaskIncrementTick+0x15c>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4313      	orrs	r3, r2
 800b71a:	4a22      	ldr	r2, [pc, #136]	; (800b7a4 <xTaskIncrementTick+0x15c>)
 800b71c:	6013      	str	r3, [r2, #0]
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b722:	4613      	mov	r3, r2
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	4413      	add	r3, r2
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	4a1f      	ldr	r2, [pc, #124]	; (800b7a8 <xTaskIncrementTick+0x160>)
 800b72c:	441a      	add	r2, r3
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	3304      	adds	r3, #4
 800b732:	4619      	mov	r1, r3
 800b734:	4610      	mov	r0, r2
 800b736:	f7fe fcf5 	bl	800a124 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b73e:	4b1b      	ldr	r3, [pc, #108]	; (800b7ac <xTaskIncrementTick+0x164>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b744:	429a      	cmp	r2, r3
 800b746:	d3b9      	bcc.n	800b6bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b748:	2301      	movs	r3, #1
 800b74a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b74c:	e7b6      	b.n	800b6bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b74e:	4b17      	ldr	r3, [pc, #92]	; (800b7ac <xTaskIncrementTick+0x164>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b754:	4914      	ldr	r1, [pc, #80]	; (800b7a8 <xTaskIncrementTick+0x160>)
 800b756:	4613      	mov	r3, r2
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	4413      	add	r3, r2
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	440b      	add	r3, r1
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	2b01      	cmp	r3, #1
 800b764:	d901      	bls.n	800b76a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b766:	2301      	movs	r3, #1
 800b768:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b76a:	4b11      	ldr	r3, [pc, #68]	; (800b7b0 <xTaskIncrementTick+0x168>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d007      	beq.n	800b782 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b772:	2301      	movs	r3, #1
 800b774:	617b      	str	r3, [r7, #20]
 800b776:	e004      	b.n	800b782 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b778:	4b0e      	ldr	r3, [pc, #56]	; (800b7b4 <xTaskIncrementTick+0x16c>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	3301      	adds	r3, #1
 800b77e:	4a0d      	ldr	r2, [pc, #52]	; (800b7b4 <xTaskIncrementTick+0x16c>)
 800b780:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b782:	697b      	ldr	r3, [r7, #20]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3718      	adds	r7, #24
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	20002168 	.word	0x20002168
 800b790:	20002144 	.word	0x20002144
 800b794:	200020f8 	.word	0x200020f8
 800b798:	200020fc 	.word	0x200020fc
 800b79c:	20002158 	.word	0x20002158
 800b7a0:	20002160 	.word	0x20002160
 800b7a4:	20002148 	.word	0x20002148
 800b7a8:	20002080 	.word	0x20002080
 800b7ac:	2000207c 	.word	0x2000207c
 800b7b0:	20002154 	.word	0x20002154
 800b7b4:	20002150 	.word	0x20002150

0800b7b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b087      	sub	sp, #28
 800b7bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b7be:	4b27      	ldr	r3, [pc, #156]	; (800b85c <vTaskSwitchContext+0xa4>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d003      	beq.n	800b7ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b7c6:	4b26      	ldr	r3, [pc, #152]	; (800b860 <vTaskSwitchContext+0xa8>)
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b7cc:	e03f      	b.n	800b84e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b7ce:	4b24      	ldr	r3, [pc, #144]	; (800b860 <vTaskSwitchContext+0xa8>)
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7d4:	4b23      	ldr	r3, [pc, #140]	; (800b864 <vTaskSwitchContext+0xac>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	fab3 f383 	clz	r3, r3
 800b7e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b7e2:	7afb      	ldrb	r3, [r7, #11]
 800b7e4:	f1c3 031f 	rsb	r3, r3, #31
 800b7e8:	617b      	str	r3, [r7, #20]
 800b7ea:	491f      	ldr	r1, [pc, #124]	; (800b868 <vTaskSwitchContext+0xb0>)
 800b7ec:	697a      	ldr	r2, [r7, #20]
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	4413      	add	r3, r2
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	440b      	add	r3, r1
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10a      	bne.n	800b814 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	607b      	str	r3, [r7, #4]
}
 800b810:	bf00      	nop
 800b812:	e7fe      	b.n	800b812 <vTaskSwitchContext+0x5a>
 800b814:	697a      	ldr	r2, [r7, #20]
 800b816:	4613      	mov	r3, r2
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	4413      	add	r3, r2
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	4a12      	ldr	r2, [pc, #72]	; (800b868 <vTaskSwitchContext+0xb0>)
 800b820:	4413      	add	r3, r2
 800b822:	613b      	str	r3, [r7, #16]
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	685a      	ldr	r2, [r3, #4]
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	605a      	str	r2, [r3, #4]
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	685a      	ldr	r2, [r3, #4]
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	3308      	adds	r3, #8
 800b836:	429a      	cmp	r2, r3
 800b838:	d104      	bne.n	800b844 <vTaskSwitchContext+0x8c>
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	685a      	ldr	r2, [r3, #4]
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	605a      	str	r2, [r3, #4]
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	4a08      	ldr	r2, [pc, #32]	; (800b86c <vTaskSwitchContext+0xb4>)
 800b84c:	6013      	str	r3, [r2, #0]
}
 800b84e:	bf00      	nop
 800b850:	371c      	adds	r7, #28
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	20002168 	.word	0x20002168
 800b860:	20002154 	.word	0x20002154
 800b864:	20002148 	.word	0x20002148
 800b868:	20002080 	.word	0x20002080
 800b86c:	2000207c 	.word	0x2000207c

0800b870 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d10a      	bne.n	800b896 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b884:	f383 8811 	msr	BASEPRI, r3
 800b888:	f3bf 8f6f 	isb	sy
 800b88c:	f3bf 8f4f 	dsb	sy
 800b890:	60fb      	str	r3, [r7, #12]
}
 800b892:	bf00      	nop
 800b894:	e7fe      	b.n	800b894 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b896:	4b07      	ldr	r3, [pc, #28]	; (800b8b4 <vTaskPlaceOnEventList+0x44>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	3318      	adds	r3, #24
 800b89c:	4619      	mov	r1, r3
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f7fe fc64 	bl	800a16c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8a4:	2101      	movs	r1, #1
 800b8a6:	6838      	ldr	r0, [r7, #0]
 800b8a8:	f000 fbaa 	bl	800c000 <prvAddCurrentTaskToDelayedList>
}
 800b8ac:	bf00      	nop
 800b8ae:	3710      	adds	r7, #16
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	2000207c 	.word	0x2000207c

0800b8b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b086      	sub	sp, #24
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d10a      	bne.n	800b8e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ce:	f383 8811 	msr	BASEPRI, r3
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	617b      	str	r3, [r7, #20]
}
 800b8dc:	bf00      	nop
 800b8de:	e7fe      	b.n	800b8de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8e0:	4b0a      	ldr	r3, [pc, #40]	; (800b90c <vTaskPlaceOnEventListRestricted+0x54>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	3318      	adds	r3, #24
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f7fe fc1b 	bl	800a124 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d002      	beq.n	800b8fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b8f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b8fa:	6879      	ldr	r1, [r7, #4]
 800b8fc:	68b8      	ldr	r0, [r7, #8]
 800b8fe:	f000 fb7f 	bl	800c000 <prvAddCurrentTaskToDelayedList>
	}
 800b902:	bf00      	nop
 800b904:	3718      	adds	r7, #24
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop
 800b90c:	2000207c 	.word	0x2000207c

0800b910 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b086      	sub	sp, #24
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d10a      	bne.n	800b93c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92a:	f383 8811 	msr	BASEPRI, r3
 800b92e:	f3bf 8f6f 	isb	sy
 800b932:	f3bf 8f4f 	dsb	sy
 800b936:	60fb      	str	r3, [r7, #12]
}
 800b938:	bf00      	nop
 800b93a:	e7fe      	b.n	800b93a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	3318      	adds	r3, #24
 800b940:	4618      	mov	r0, r3
 800b942:	f7fe fc4c 	bl	800a1de <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b946:	4b1d      	ldr	r3, [pc, #116]	; (800b9bc <xTaskRemoveFromEventList+0xac>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d11c      	bne.n	800b988 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	3304      	adds	r3, #4
 800b952:	4618      	mov	r0, r3
 800b954:	f7fe fc43 	bl	800a1de <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95c:	2201      	movs	r2, #1
 800b95e:	409a      	lsls	r2, r3
 800b960:	4b17      	ldr	r3, [pc, #92]	; (800b9c0 <xTaskRemoveFromEventList+0xb0>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4313      	orrs	r3, r2
 800b966:	4a16      	ldr	r2, [pc, #88]	; (800b9c0 <xTaskRemoveFromEventList+0xb0>)
 800b968:	6013      	str	r3, [r2, #0]
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b96e:	4613      	mov	r3, r2
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	4413      	add	r3, r2
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	4a13      	ldr	r2, [pc, #76]	; (800b9c4 <xTaskRemoveFromEventList+0xb4>)
 800b978:	441a      	add	r2, r3
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	3304      	adds	r3, #4
 800b97e:	4619      	mov	r1, r3
 800b980:	4610      	mov	r0, r2
 800b982:	f7fe fbcf 	bl	800a124 <vListInsertEnd>
 800b986:	e005      	b.n	800b994 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	3318      	adds	r3, #24
 800b98c:	4619      	mov	r1, r3
 800b98e:	480e      	ldr	r0, [pc, #56]	; (800b9c8 <xTaskRemoveFromEventList+0xb8>)
 800b990:	f7fe fbc8 	bl	800a124 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b998:	4b0c      	ldr	r3, [pc, #48]	; (800b9cc <xTaskRemoveFromEventList+0xbc>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d905      	bls.n	800b9ae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b9a6:	4b0a      	ldr	r3, [pc, #40]	; (800b9d0 <xTaskRemoveFromEventList+0xc0>)
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	601a      	str	r2, [r3, #0]
 800b9ac:	e001      	b.n	800b9b2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b9b2:	697b      	ldr	r3, [r7, #20]
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3718      	adds	r7, #24
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	20002168 	.word	0x20002168
 800b9c0:	20002148 	.word	0x20002148
 800b9c4:	20002080 	.word	0x20002080
 800b9c8:	20002100 	.word	0x20002100
 800b9cc:	2000207c 	.word	0x2000207c
 800b9d0:	20002154 	.word	0x20002154

0800b9d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b9dc:	4b06      	ldr	r3, [pc, #24]	; (800b9f8 <vTaskInternalSetTimeOutState+0x24>)
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b9e4:	4b05      	ldr	r3, [pc, #20]	; (800b9fc <vTaskInternalSetTimeOutState+0x28>)
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	605a      	str	r2, [r3, #4]
}
 800b9ec:	bf00      	nop
 800b9ee:	370c      	adds	r7, #12
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr
 800b9f8:	20002158 	.word	0x20002158
 800b9fc:	20002144 	.word	0x20002144

0800ba00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b088      	sub	sp, #32
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d10a      	bne.n	800ba26 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ba10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	613b      	str	r3, [r7, #16]
}
 800ba22:	bf00      	nop
 800ba24:	e7fe      	b.n	800ba24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d10a      	bne.n	800ba42 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ba2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba30:	f383 8811 	msr	BASEPRI, r3
 800ba34:	f3bf 8f6f 	isb	sy
 800ba38:	f3bf 8f4f 	dsb	sy
 800ba3c:	60fb      	str	r3, [r7, #12]
}
 800ba3e:	bf00      	nop
 800ba40:	e7fe      	b.n	800ba40 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ba42:	f000 ff9f 	bl	800c984 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba46:	4b1d      	ldr	r3, [pc, #116]	; (800babc <xTaskCheckForTimeOut+0xbc>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	69ba      	ldr	r2, [r7, #24]
 800ba52:	1ad3      	subs	r3, r2, r3
 800ba54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba5e:	d102      	bne.n	800ba66 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba60:	2300      	movs	r3, #0
 800ba62:	61fb      	str	r3, [r7, #28]
 800ba64:	e023      	b.n	800baae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	4b15      	ldr	r3, [pc, #84]	; (800bac0 <xTaskCheckForTimeOut+0xc0>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d007      	beq.n	800ba82 <xTaskCheckForTimeOut+0x82>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	69ba      	ldr	r2, [r7, #24]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d302      	bcc.n	800ba82 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	61fb      	str	r3, [r7, #28]
 800ba80:	e015      	b.n	800baae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	697a      	ldr	r2, [r7, #20]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d20b      	bcs.n	800baa4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	1ad2      	subs	r2, r2, r3
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f7ff ff9b 	bl	800b9d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	61fb      	str	r3, [r7, #28]
 800baa2:	e004      	b.n	800baae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	2200      	movs	r2, #0
 800baa8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800baaa:	2301      	movs	r3, #1
 800baac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800baae:	f000 ff99 	bl	800c9e4 <vPortExitCritical>

	return xReturn;
 800bab2:	69fb      	ldr	r3, [r7, #28]
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3720      	adds	r7, #32
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	20002144 	.word	0x20002144
 800bac0:	20002158 	.word	0x20002158

0800bac4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bac4:	b480      	push	{r7}
 800bac6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bac8:	4b03      	ldr	r3, [pc, #12]	; (800bad8 <vTaskMissedYield+0x14>)
 800baca:	2201      	movs	r2, #1
 800bacc:	601a      	str	r2, [r3, #0]
}
 800bace:	bf00      	nop
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr
 800bad8:	20002154 	.word	0x20002154

0800badc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bae4:	f000 f852 	bl	800bb8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bae8:	4b06      	ldr	r3, [pc, #24]	; (800bb04 <prvIdleTask+0x28>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2b01      	cmp	r3, #1
 800baee:	d9f9      	bls.n	800bae4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800baf0:	4b05      	ldr	r3, [pc, #20]	; (800bb08 <prvIdleTask+0x2c>)
 800baf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baf6:	601a      	str	r2, [r3, #0]
 800baf8:	f3bf 8f4f 	dsb	sy
 800bafc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb00:	e7f0      	b.n	800bae4 <prvIdleTask+0x8>
 800bb02:	bf00      	nop
 800bb04:	20002080 	.word	0x20002080
 800bb08:	e000ed04 	.word	0xe000ed04

0800bb0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb12:	2300      	movs	r3, #0
 800bb14:	607b      	str	r3, [r7, #4]
 800bb16:	e00c      	b.n	800bb32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	4613      	mov	r3, r2
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	4413      	add	r3, r2
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	4a12      	ldr	r2, [pc, #72]	; (800bb6c <prvInitialiseTaskLists+0x60>)
 800bb24:	4413      	add	r3, r2
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7fe facf 	bl	800a0ca <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	607b      	str	r3, [r7, #4]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2b03      	cmp	r3, #3
 800bb36:	d9ef      	bls.n	800bb18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb38:	480d      	ldr	r0, [pc, #52]	; (800bb70 <prvInitialiseTaskLists+0x64>)
 800bb3a:	f7fe fac6 	bl	800a0ca <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb3e:	480d      	ldr	r0, [pc, #52]	; (800bb74 <prvInitialiseTaskLists+0x68>)
 800bb40:	f7fe fac3 	bl	800a0ca <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb44:	480c      	ldr	r0, [pc, #48]	; (800bb78 <prvInitialiseTaskLists+0x6c>)
 800bb46:	f7fe fac0 	bl	800a0ca <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb4a:	480c      	ldr	r0, [pc, #48]	; (800bb7c <prvInitialiseTaskLists+0x70>)
 800bb4c:	f7fe fabd 	bl	800a0ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb50:	480b      	ldr	r0, [pc, #44]	; (800bb80 <prvInitialiseTaskLists+0x74>)
 800bb52:	f7fe faba 	bl	800a0ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb56:	4b0b      	ldr	r3, [pc, #44]	; (800bb84 <prvInitialiseTaskLists+0x78>)
 800bb58:	4a05      	ldr	r2, [pc, #20]	; (800bb70 <prvInitialiseTaskLists+0x64>)
 800bb5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb5c:	4b0a      	ldr	r3, [pc, #40]	; (800bb88 <prvInitialiseTaskLists+0x7c>)
 800bb5e:	4a05      	ldr	r2, [pc, #20]	; (800bb74 <prvInitialiseTaskLists+0x68>)
 800bb60:	601a      	str	r2, [r3, #0]
}
 800bb62:	bf00      	nop
 800bb64:	3708      	adds	r7, #8
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	20002080 	.word	0x20002080
 800bb70:	200020d0 	.word	0x200020d0
 800bb74:	200020e4 	.word	0x200020e4
 800bb78:	20002100 	.word	0x20002100
 800bb7c:	20002114 	.word	0x20002114
 800bb80:	2000212c 	.word	0x2000212c
 800bb84:	200020f8 	.word	0x200020f8
 800bb88:	200020fc 	.word	0x200020fc

0800bb8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb92:	e019      	b.n	800bbc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bb94:	f000 fef6 	bl	800c984 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb98:	4b10      	ldr	r3, [pc, #64]	; (800bbdc <prvCheckTasksWaitingTermination+0x50>)
 800bb9a:	68db      	ldr	r3, [r3, #12]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	3304      	adds	r3, #4
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7fe fb1a 	bl	800a1de <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bbaa:	4b0d      	ldr	r3, [pc, #52]	; (800bbe0 <prvCheckTasksWaitingTermination+0x54>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	4a0b      	ldr	r2, [pc, #44]	; (800bbe0 <prvCheckTasksWaitingTermination+0x54>)
 800bbb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bbb4:	4b0b      	ldr	r3, [pc, #44]	; (800bbe4 <prvCheckTasksWaitingTermination+0x58>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	3b01      	subs	r3, #1
 800bbba:	4a0a      	ldr	r2, [pc, #40]	; (800bbe4 <prvCheckTasksWaitingTermination+0x58>)
 800bbbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bbbe:	f000 ff11 	bl	800c9e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 f810 	bl	800bbe8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbc8:	4b06      	ldr	r3, [pc, #24]	; (800bbe4 <prvCheckTasksWaitingTermination+0x58>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d1e1      	bne.n	800bb94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bbd0:	bf00      	nop
 800bbd2:	bf00      	nop
 800bbd4:	3708      	adds	r7, #8
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	20002114 	.word	0x20002114
 800bbe0:	20002140 	.word	0x20002140
 800bbe4:	20002128 	.word	0x20002128

0800bbe8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d108      	bne.n	800bc0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f001 f8ae 	bl	800cd60 <vPortFree>
				vPortFree( pxTCB );
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f001 f8ab 	bl	800cd60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc0a:	e018      	b.n	800bc3e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d103      	bne.n	800bc1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f001 f8a2 	bl	800cd60 <vPortFree>
	}
 800bc1c:	e00f      	b.n	800bc3e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800bc24:	2b02      	cmp	r3, #2
 800bc26:	d00a      	beq.n	800bc3e <prvDeleteTCB+0x56>
	__asm volatile
 800bc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2c:	f383 8811 	msr	BASEPRI, r3
 800bc30:	f3bf 8f6f 	isb	sy
 800bc34:	f3bf 8f4f 	dsb	sy
 800bc38:	60fb      	str	r3, [r7, #12]
}
 800bc3a:	bf00      	nop
 800bc3c:	e7fe      	b.n	800bc3c <prvDeleteTCB+0x54>
	}
 800bc3e:	bf00      	nop
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
	...

0800bc48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc4e:	4b0c      	ldr	r3, [pc, #48]	; (800bc80 <prvResetNextTaskUnblockTime+0x38>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d104      	bne.n	800bc62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc58:	4b0a      	ldr	r3, [pc, #40]	; (800bc84 <prvResetNextTaskUnblockTime+0x3c>)
 800bc5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc60:	e008      	b.n	800bc74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc62:	4b07      	ldr	r3, [pc, #28]	; (800bc80 <prvResetNextTaskUnblockTime+0x38>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	68db      	ldr	r3, [r3, #12]
 800bc6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	4a04      	ldr	r2, [pc, #16]	; (800bc84 <prvResetNextTaskUnblockTime+0x3c>)
 800bc72:	6013      	str	r3, [r2, #0]
}
 800bc74:	bf00      	nop
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr
 800bc80:	200020f8 	.word	0x200020f8
 800bc84:	20002160 	.word	0x20002160

0800bc88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc8e:	4b0b      	ldr	r3, [pc, #44]	; (800bcbc <xTaskGetSchedulerState+0x34>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d102      	bne.n	800bc9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc96:	2301      	movs	r3, #1
 800bc98:	607b      	str	r3, [r7, #4]
 800bc9a:	e008      	b.n	800bcae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc9c:	4b08      	ldr	r3, [pc, #32]	; (800bcc0 <xTaskGetSchedulerState+0x38>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d102      	bne.n	800bcaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bca4:	2302      	movs	r3, #2
 800bca6:	607b      	str	r3, [r7, #4]
 800bca8:	e001      	b.n	800bcae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bcae:	687b      	ldr	r3, [r7, #4]
	}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr
 800bcbc:	2000214c 	.word	0x2000214c
 800bcc0:	20002168 	.word	0x20002168

0800bcc4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d05e      	beq.n	800bd98 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcde:	4b31      	ldr	r3, [pc, #196]	; (800bda4 <xTaskPriorityInherit+0xe0>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d24e      	bcs.n	800bd86 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	699b      	ldr	r3, [r3, #24]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	db06      	blt.n	800bcfe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcf0:	4b2c      	ldr	r3, [pc, #176]	; (800bda4 <xTaskPriorityInherit+0xe0>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf6:	f1c3 0204 	rsb	r2, r3, #4
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	6959      	ldr	r1, [r3, #20]
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd06:	4613      	mov	r3, r2
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	4413      	add	r3, r2
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	4a26      	ldr	r2, [pc, #152]	; (800bda8 <xTaskPriorityInherit+0xe4>)
 800bd10:	4413      	add	r3, r2
 800bd12:	4299      	cmp	r1, r3
 800bd14:	d12f      	bne.n	800bd76 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	3304      	adds	r3, #4
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7fe fa5f 	bl	800a1de <uxListRemove>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d10a      	bne.n	800bd3c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd30:	43da      	mvns	r2, r3
 800bd32:	4b1e      	ldr	r3, [pc, #120]	; (800bdac <xTaskPriorityInherit+0xe8>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4013      	ands	r3, r2
 800bd38:	4a1c      	ldr	r2, [pc, #112]	; (800bdac <xTaskPriorityInherit+0xe8>)
 800bd3a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd3c:	4b19      	ldr	r3, [pc, #100]	; (800bda4 <xTaskPriorityInherit+0xe0>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	409a      	lsls	r2, r3
 800bd4e:	4b17      	ldr	r3, [pc, #92]	; (800bdac <xTaskPriorityInherit+0xe8>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4313      	orrs	r3, r2
 800bd54:	4a15      	ldr	r2, [pc, #84]	; (800bdac <xTaskPriorityInherit+0xe8>)
 800bd56:	6013      	str	r3, [r2, #0]
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd5c:	4613      	mov	r3, r2
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	4413      	add	r3, r2
 800bd62:	009b      	lsls	r3, r3, #2
 800bd64:	4a10      	ldr	r2, [pc, #64]	; (800bda8 <xTaskPriorityInherit+0xe4>)
 800bd66:	441a      	add	r2, r3
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	3304      	adds	r3, #4
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	4610      	mov	r0, r2
 800bd70:	f7fe f9d8 	bl	800a124 <vListInsertEnd>
 800bd74:	e004      	b.n	800bd80 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd76:	4b0b      	ldr	r3, [pc, #44]	; (800bda4 <xTaskPriorityInherit+0xe0>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bd80:	2301      	movs	r3, #1
 800bd82:	60fb      	str	r3, [r7, #12]
 800bd84:	e008      	b.n	800bd98 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd8a:	4b06      	ldr	r3, [pc, #24]	; (800bda4 <xTaskPriorityInherit+0xe0>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d201      	bcs.n	800bd98 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bd94:	2301      	movs	r3, #1
 800bd96:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd98:	68fb      	ldr	r3, [r7, #12]
	}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	2000207c 	.word	0x2000207c
 800bda8:	20002080 	.word	0x20002080
 800bdac:	20002148 	.word	0x20002148

0800bdb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b086      	sub	sp, #24
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d06e      	beq.n	800bea4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bdc6:	4b3a      	ldr	r3, [pc, #232]	; (800beb0 <xTaskPriorityDisinherit+0x100>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	693a      	ldr	r2, [r7, #16]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d00a      	beq.n	800bde6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd4:	f383 8811 	msr	BASEPRI, r3
 800bdd8:	f3bf 8f6f 	isb	sy
 800bddc:	f3bf 8f4f 	dsb	sy
 800bde0:	60fb      	str	r3, [r7, #12]
}
 800bde2:	bf00      	nop
 800bde4:	e7fe      	b.n	800bde4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d10a      	bne.n	800be04 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf2:	f383 8811 	msr	BASEPRI, r3
 800bdf6:	f3bf 8f6f 	isb	sy
 800bdfa:	f3bf 8f4f 	dsb	sy
 800bdfe:	60bb      	str	r3, [r7, #8]
}
 800be00:	bf00      	nop
 800be02:	e7fe      	b.n	800be02 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be08:	1e5a      	subs	r2, r3, #1
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be16:	429a      	cmp	r2, r3
 800be18:	d044      	beq.n	800bea4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d140      	bne.n	800bea4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	3304      	adds	r3, #4
 800be26:	4618      	mov	r0, r3
 800be28:	f7fe f9d9 	bl	800a1de <uxListRemove>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d115      	bne.n	800be5e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be36:	491f      	ldr	r1, [pc, #124]	; (800beb4 <xTaskPriorityDisinherit+0x104>)
 800be38:	4613      	mov	r3, r2
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	4413      	add	r3, r2
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	440b      	add	r3, r1
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d10a      	bne.n	800be5e <xTaskPriorityDisinherit+0xae>
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be4c:	2201      	movs	r2, #1
 800be4e:	fa02 f303 	lsl.w	r3, r2, r3
 800be52:	43da      	mvns	r2, r3
 800be54:	4b18      	ldr	r3, [pc, #96]	; (800beb8 <xTaskPriorityDisinherit+0x108>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4013      	ands	r3, r2
 800be5a:	4a17      	ldr	r2, [pc, #92]	; (800beb8 <xTaskPriorityDisinherit+0x108>)
 800be5c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be6a:	f1c3 0204 	rsb	r2, r3, #4
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be76:	2201      	movs	r2, #1
 800be78:	409a      	lsls	r2, r3
 800be7a:	4b0f      	ldr	r3, [pc, #60]	; (800beb8 <xTaskPriorityDisinherit+0x108>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4313      	orrs	r3, r2
 800be80:	4a0d      	ldr	r2, [pc, #52]	; (800beb8 <xTaskPriorityDisinherit+0x108>)
 800be82:	6013      	str	r3, [r2, #0]
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be88:	4613      	mov	r3, r2
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	4413      	add	r3, r2
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	4a08      	ldr	r2, [pc, #32]	; (800beb4 <xTaskPriorityDisinherit+0x104>)
 800be92:	441a      	add	r2, r3
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	3304      	adds	r3, #4
 800be98:	4619      	mov	r1, r3
 800be9a:	4610      	mov	r0, r2
 800be9c:	f7fe f942 	bl	800a124 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bea0:	2301      	movs	r3, #1
 800bea2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bea4:	697b      	ldr	r3, [r7, #20]
	}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3718      	adds	r7, #24
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	2000207c 	.word	0x2000207c
 800beb4:	20002080 	.word	0x20002080
 800beb8:	20002148 	.word	0x20002148

0800bebc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b088      	sub	sp, #32
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800beca:	2301      	movs	r3, #1
 800becc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d077      	beq.n	800bfc4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d10a      	bne.n	800bef2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee0:	f383 8811 	msr	BASEPRI, r3
 800bee4:	f3bf 8f6f 	isb	sy
 800bee8:	f3bf 8f4f 	dsb	sy
 800beec:	60fb      	str	r3, [r7, #12]
}
 800beee:	bf00      	nop
 800bef0:	e7fe      	b.n	800bef0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bef6:	683a      	ldr	r2, [r7, #0]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d902      	bls.n	800bf02 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	61fb      	str	r3, [r7, #28]
 800bf00:	e002      	b.n	800bf08 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bf02:	69bb      	ldr	r3, [r7, #24]
 800bf04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf06:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf0c:	69fa      	ldr	r2, [r7, #28]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d058      	beq.n	800bfc4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf16:	697a      	ldr	r2, [r7, #20]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d153      	bne.n	800bfc4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bf1c:	4b2b      	ldr	r3, [pc, #172]	; (800bfcc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	69ba      	ldr	r2, [r7, #24]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d10a      	bne.n	800bf3c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bf26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2a:	f383 8811 	msr	BASEPRI, r3
 800bf2e:	f3bf 8f6f 	isb	sy
 800bf32:	f3bf 8f4f 	dsb	sy
 800bf36:	60bb      	str	r3, [r7, #8]
}
 800bf38:	bf00      	nop
 800bf3a:	e7fe      	b.n	800bf3a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf40:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	69fa      	ldr	r2, [r7, #28]
 800bf46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	699b      	ldr	r3, [r3, #24]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	db04      	blt.n	800bf5a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	f1c3 0204 	rsb	r2, r3, #4
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	6959      	ldr	r1, [r3, #20]
 800bf5e:	693a      	ldr	r2, [r7, #16]
 800bf60:	4613      	mov	r3, r2
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	4413      	add	r3, r2
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	4a19      	ldr	r2, [pc, #100]	; (800bfd0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bf6a:	4413      	add	r3, r2
 800bf6c:	4299      	cmp	r1, r3
 800bf6e:	d129      	bne.n	800bfc4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	3304      	adds	r3, #4
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7fe f932 	bl	800a1de <uxListRemove>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d10a      	bne.n	800bf96 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf84:	2201      	movs	r2, #1
 800bf86:	fa02 f303 	lsl.w	r3, r2, r3
 800bf8a:	43da      	mvns	r2, r3
 800bf8c:	4b11      	ldr	r3, [pc, #68]	; (800bfd4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4013      	ands	r3, r2
 800bf92:	4a10      	ldr	r2, [pc, #64]	; (800bfd4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bf94:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	409a      	lsls	r2, r3
 800bf9e:	4b0d      	ldr	r3, [pc, #52]	; (800bfd4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	4a0b      	ldr	r2, [pc, #44]	; (800bfd4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bfa6:	6013      	str	r3, [r2, #0]
 800bfa8:	69bb      	ldr	r3, [r7, #24]
 800bfaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfac:	4613      	mov	r3, r2
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	4413      	add	r3, r2
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	4a06      	ldr	r2, [pc, #24]	; (800bfd0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bfb6:	441a      	add	r2, r3
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	3304      	adds	r3, #4
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	4610      	mov	r0, r2
 800bfc0:	f7fe f8b0 	bl	800a124 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bfc4:	bf00      	nop
 800bfc6:	3720      	adds	r7, #32
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	2000207c 	.word	0x2000207c
 800bfd0:	20002080 	.word	0x20002080
 800bfd4:	20002148 	.word	0x20002148

0800bfd8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bfd8:	b480      	push	{r7}
 800bfda:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bfdc:	4b07      	ldr	r3, [pc, #28]	; (800bffc <pvTaskIncrementMutexHeldCount+0x24>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d004      	beq.n	800bfee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bfe4:	4b05      	ldr	r3, [pc, #20]	; (800bffc <pvTaskIncrementMutexHeldCount+0x24>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bfea:	3201      	adds	r2, #1
 800bfec:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 800bfee:	4b03      	ldr	r3, [pc, #12]	; (800bffc <pvTaskIncrementMutexHeldCount+0x24>)
 800bff0:	681b      	ldr	r3, [r3, #0]
	}
 800bff2:	4618      	mov	r0, r3
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr
 800bffc:	2000207c 	.word	0x2000207c

0800c000 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c00a:	4b29      	ldr	r3, [pc, #164]	; (800c0b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c010:	4b28      	ldr	r3, [pc, #160]	; (800c0b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	3304      	adds	r3, #4
 800c016:	4618      	mov	r0, r3
 800c018:	f7fe f8e1 	bl	800a1de <uxListRemove>
 800c01c:	4603      	mov	r3, r0
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d10b      	bne.n	800c03a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c022:	4b24      	ldr	r3, [pc, #144]	; (800c0b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c028:	2201      	movs	r2, #1
 800c02a:	fa02 f303 	lsl.w	r3, r2, r3
 800c02e:	43da      	mvns	r2, r3
 800c030:	4b21      	ldr	r3, [pc, #132]	; (800c0b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4013      	ands	r3, r2
 800c036:	4a20      	ldr	r2, [pc, #128]	; (800c0b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c038:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c040:	d10a      	bne.n	800c058 <prvAddCurrentTaskToDelayedList+0x58>
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d007      	beq.n	800c058 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c048:	4b1a      	ldr	r3, [pc, #104]	; (800c0b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	3304      	adds	r3, #4
 800c04e:	4619      	mov	r1, r3
 800c050:	481a      	ldr	r0, [pc, #104]	; (800c0bc <prvAddCurrentTaskToDelayedList+0xbc>)
 800c052:	f7fe f867 	bl	800a124 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c056:	e026      	b.n	800c0a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	4413      	add	r3, r2
 800c05e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c060:	4b14      	ldr	r3, [pc, #80]	; (800c0b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	68ba      	ldr	r2, [r7, #8]
 800c066:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c068:	68ba      	ldr	r2, [r7, #8]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d209      	bcs.n	800c084 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c070:	4b13      	ldr	r3, [pc, #76]	; (800c0c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	4b0f      	ldr	r3, [pc, #60]	; (800c0b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	3304      	adds	r3, #4
 800c07a:	4619      	mov	r1, r3
 800c07c:	4610      	mov	r0, r2
 800c07e:	f7fe f875 	bl	800a16c <vListInsert>
}
 800c082:	e010      	b.n	800c0a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c084:	4b0f      	ldr	r3, [pc, #60]	; (800c0c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	4b0a      	ldr	r3, [pc, #40]	; (800c0b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	3304      	adds	r3, #4
 800c08e:	4619      	mov	r1, r3
 800c090:	4610      	mov	r0, r2
 800c092:	f7fe f86b 	bl	800a16c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c096:	4b0c      	ldr	r3, [pc, #48]	; (800c0c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	68ba      	ldr	r2, [r7, #8]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d202      	bcs.n	800c0a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c0a0:	4a09      	ldr	r2, [pc, #36]	; (800c0c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	6013      	str	r3, [r2, #0]
}
 800c0a6:	bf00      	nop
 800c0a8:	3710      	adds	r7, #16
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	20002144 	.word	0x20002144
 800c0b4:	2000207c 	.word	0x2000207c
 800c0b8:	20002148 	.word	0x20002148
 800c0bc:	2000212c 	.word	0x2000212c
 800c0c0:	200020fc 	.word	0x200020fc
 800c0c4:	200020f8 	.word	0x200020f8
 800c0c8:	20002160 	.word	0x20002160

0800c0cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b08a      	sub	sp, #40	; 0x28
 800c0d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c0d6:	f000 faeb 	bl	800c6b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c0da:	4b1c      	ldr	r3, [pc, #112]	; (800c14c <xTimerCreateTimerTask+0x80>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d021      	beq.n	800c126 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c0ea:	1d3a      	adds	r2, r7, #4
 800c0ec:	f107 0108 	add.w	r1, r7, #8
 800c0f0:	f107 030c 	add.w	r3, r7, #12
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7f6 f9e7 	bl	80024c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c0fa:	6879      	ldr	r1, [r7, #4]
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	68fa      	ldr	r2, [r7, #12]
 800c100:	9202      	str	r2, [sp, #8]
 800c102:	9301      	str	r3, [sp, #4]
 800c104:	2302      	movs	r3, #2
 800c106:	9300      	str	r3, [sp, #0]
 800c108:	2300      	movs	r3, #0
 800c10a:	460a      	mov	r2, r1
 800c10c:	4910      	ldr	r1, [pc, #64]	; (800c150 <xTimerCreateTimerTask+0x84>)
 800c10e:	4811      	ldr	r0, [pc, #68]	; (800c154 <xTimerCreateTimerTask+0x88>)
 800c110:	f7fe ff22 	bl	800af58 <xTaskCreateStatic>
 800c114:	4603      	mov	r3, r0
 800c116:	4a10      	ldr	r2, [pc, #64]	; (800c158 <xTimerCreateTimerTask+0x8c>)
 800c118:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c11a:	4b0f      	ldr	r3, [pc, #60]	; (800c158 <xTimerCreateTimerTask+0x8c>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d001      	beq.n	800c126 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c122:	2301      	movs	r3, #1
 800c124:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d10a      	bne.n	800c142 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c130:	f383 8811 	msr	BASEPRI, r3
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	613b      	str	r3, [r7, #16]
}
 800c13e:	bf00      	nop
 800c140:	e7fe      	b.n	800c140 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c142:	697b      	ldr	r3, [r7, #20]
}
 800c144:	4618      	mov	r0, r3
 800c146:	3718      	adds	r7, #24
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}
 800c14c:	2000219c 	.word	0x2000219c
 800c150:	0800d530 	.word	0x0800d530
 800c154:	0800c291 	.word	0x0800c291
 800c158:	200021a0 	.word	0x200021a0

0800c15c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b08a      	sub	sp, #40	; 0x28
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	607a      	str	r2, [r7, #4]
 800c168:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c16a:	2300      	movs	r3, #0
 800c16c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d10a      	bne.n	800c18a <xTimerGenericCommand+0x2e>
	__asm volatile
 800c174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c178:	f383 8811 	msr	BASEPRI, r3
 800c17c:	f3bf 8f6f 	isb	sy
 800c180:	f3bf 8f4f 	dsb	sy
 800c184:	623b      	str	r3, [r7, #32]
}
 800c186:	bf00      	nop
 800c188:	e7fe      	b.n	800c188 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c18a:	4b1a      	ldr	r3, [pc, #104]	; (800c1f4 <xTimerGenericCommand+0x98>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d02a      	beq.n	800c1e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	2b05      	cmp	r3, #5
 800c1a2:	dc18      	bgt.n	800c1d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c1a4:	f7ff fd70 	bl	800bc88 <xTaskGetSchedulerState>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b02      	cmp	r3, #2
 800c1ac:	d109      	bne.n	800c1c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c1ae:	4b11      	ldr	r3, [pc, #68]	; (800c1f4 <xTimerGenericCommand+0x98>)
 800c1b0:	6818      	ldr	r0, [r3, #0]
 800c1b2:	f107 0114 	add.w	r1, r7, #20
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1ba:	f7fe f9c1 	bl	800a540 <xQueueGenericSend>
 800c1be:	6278      	str	r0, [r7, #36]	; 0x24
 800c1c0:	e012      	b.n	800c1e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c1c2:	4b0c      	ldr	r3, [pc, #48]	; (800c1f4 <xTimerGenericCommand+0x98>)
 800c1c4:	6818      	ldr	r0, [r3, #0]
 800c1c6:	f107 0114 	add.w	r1, r7, #20
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f7fe f9b7 	bl	800a540 <xQueueGenericSend>
 800c1d2:	6278      	str	r0, [r7, #36]	; 0x24
 800c1d4:	e008      	b.n	800c1e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c1d6:	4b07      	ldr	r3, [pc, #28]	; (800c1f4 <xTimerGenericCommand+0x98>)
 800c1d8:	6818      	ldr	r0, [r3, #0]
 800c1da:	f107 0114 	add.w	r1, r7, #20
 800c1de:	2300      	movs	r3, #0
 800c1e0:	683a      	ldr	r2, [r7, #0]
 800c1e2:	f7fe faab 	bl	800a73c <xQueueGenericSendFromISR>
 800c1e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3728      	adds	r7, #40	; 0x28
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	2000219c 	.word	0x2000219c

0800c1f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b088      	sub	sp, #32
 800c1fc:	af02      	add	r7, sp, #8
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c202:	4b22      	ldr	r3, [pc, #136]	; (800c28c <prvProcessExpiredTimer+0x94>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	68db      	ldr	r3, [r3, #12]
 800c20a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	3304      	adds	r3, #4
 800c210:	4618      	mov	r0, r3
 800c212:	f7fd ffe4 	bl	800a1de <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c21c:	f003 0304 	and.w	r3, r3, #4
 800c220:	2b00      	cmp	r3, #0
 800c222:	d022      	beq.n	800c26a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	699a      	ldr	r2, [r3, #24]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	18d1      	adds	r1, r2, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	683a      	ldr	r2, [r7, #0]
 800c230:	6978      	ldr	r0, [r7, #20]
 800c232:	f000 f8d1 	bl	800c3d8 <prvInsertTimerInActiveList>
 800c236:	4603      	mov	r3, r0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d01f      	beq.n	800c27c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c23c:	2300      	movs	r3, #0
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	2300      	movs	r3, #0
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	2100      	movs	r1, #0
 800c246:	6978      	ldr	r0, [r7, #20]
 800c248:	f7ff ff88 	bl	800c15c <xTimerGenericCommand>
 800c24c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d113      	bne.n	800c27c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c258:	f383 8811 	msr	BASEPRI, r3
 800c25c:	f3bf 8f6f 	isb	sy
 800c260:	f3bf 8f4f 	dsb	sy
 800c264:	60fb      	str	r3, [r7, #12]
}
 800c266:	bf00      	nop
 800c268:	e7fe      	b.n	800c268 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c270:	f023 0301 	bic.w	r3, r3, #1
 800c274:	b2da      	uxtb	r2, r3
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	6a1b      	ldr	r3, [r3, #32]
 800c280:	6978      	ldr	r0, [r7, #20]
 800c282:	4798      	blx	r3
}
 800c284:	bf00      	nop
 800c286:	3718      	adds	r7, #24
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	20002194 	.word	0x20002194

0800c290 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c298:	f107 0308 	add.w	r3, r7, #8
 800c29c:	4618      	mov	r0, r3
 800c29e:	f000 f857 	bl	800c350 <prvGetNextExpireTime>
 800c2a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	68f8      	ldr	r0, [r7, #12]
 800c2aa:	f000 f803 	bl	800c2b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c2ae:	f000 f8d5 	bl	800c45c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c2b2:	e7f1      	b.n	800c298 <prvTimerTask+0x8>

0800c2b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c2be:	f7ff f8f7 	bl	800b4b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c2c2:	f107 0308 	add.w	r3, r7, #8
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f000 f866 	bl	800c398 <prvSampleTimeNow>
 800c2cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d130      	bne.n	800c336 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d10a      	bne.n	800c2f0 <prvProcessTimerOrBlockTask+0x3c>
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d806      	bhi.n	800c2f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c2e2:	f7ff f8f3 	bl	800b4cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c2e6:	68f9      	ldr	r1, [r7, #12]
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f7ff ff85 	bl	800c1f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c2ee:	e024      	b.n	800c33a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d008      	beq.n	800c308 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c2f6:	4b13      	ldr	r3, [pc, #76]	; (800c344 <prvProcessTimerOrBlockTask+0x90>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d101      	bne.n	800c304 <prvProcessTimerOrBlockTask+0x50>
 800c300:	2301      	movs	r3, #1
 800c302:	e000      	b.n	800c306 <prvProcessTimerOrBlockTask+0x52>
 800c304:	2300      	movs	r3, #0
 800c306:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c308:	4b0f      	ldr	r3, [pc, #60]	; (800c348 <prvProcessTimerOrBlockTask+0x94>)
 800c30a:	6818      	ldr	r0, [r3, #0]
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	1ad3      	subs	r3, r2, r3
 800c312:	683a      	ldr	r2, [r7, #0]
 800c314:	4619      	mov	r1, r3
 800c316:	f7fe fdeb 	bl	800aef0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c31a:	f7ff f8d7 	bl	800b4cc <xTaskResumeAll>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d10a      	bne.n	800c33a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c324:	4b09      	ldr	r3, [pc, #36]	; (800c34c <prvProcessTimerOrBlockTask+0x98>)
 800c326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c32a:	601a      	str	r2, [r3, #0]
 800c32c:	f3bf 8f4f 	dsb	sy
 800c330:	f3bf 8f6f 	isb	sy
}
 800c334:	e001      	b.n	800c33a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c336:	f7ff f8c9 	bl	800b4cc <xTaskResumeAll>
}
 800c33a:	bf00      	nop
 800c33c:	3710      	adds	r7, #16
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	20002198 	.word	0x20002198
 800c348:	2000219c 	.word	0x2000219c
 800c34c:	e000ed04 	.word	0xe000ed04

0800c350 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c358:	4b0e      	ldr	r3, [pc, #56]	; (800c394 <prvGetNextExpireTime+0x44>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d101      	bne.n	800c366 <prvGetNextExpireTime+0x16>
 800c362:	2201      	movs	r2, #1
 800c364:	e000      	b.n	800c368 <prvGetNextExpireTime+0x18>
 800c366:	2200      	movs	r2, #0
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d105      	bne.n	800c380 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c374:	4b07      	ldr	r3, [pc, #28]	; (800c394 <prvGetNextExpireTime+0x44>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	68db      	ldr	r3, [r3, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	60fb      	str	r3, [r7, #12]
 800c37e:	e001      	b.n	800c384 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c380:	2300      	movs	r3, #0
 800c382:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c384:	68fb      	ldr	r3, [r7, #12]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3714      	adds	r7, #20
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	20002194 	.word	0x20002194

0800c398 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c3a0:	f7ff f930 	bl	800b604 <xTaskGetTickCount>
 800c3a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c3a6:	4b0b      	ldr	r3, [pc, #44]	; (800c3d4 <prvSampleTimeNow+0x3c>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	68fa      	ldr	r2, [r7, #12]
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d205      	bcs.n	800c3bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c3b0:	f000 f91a 	bl	800c5e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	601a      	str	r2, [r3, #0]
 800c3ba:	e002      	b.n	800c3c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c3c2:	4a04      	ldr	r2, [pc, #16]	; (800c3d4 <prvSampleTimeNow+0x3c>)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	200021a4 	.word	0x200021a4

0800c3d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b086      	sub	sp, #24
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	607a      	str	r2, [r7, #4]
 800c3e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	68ba      	ldr	r2, [r7, #8]
 800c3ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	68fa      	ldr	r2, [r7, #12]
 800c3f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c3f6:	68ba      	ldr	r2, [r7, #8]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d812      	bhi.n	800c424 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	1ad2      	subs	r2, r2, r3
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	699b      	ldr	r3, [r3, #24]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d302      	bcc.n	800c412 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c40c:	2301      	movs	r3, #1
 800c40e:	617b      	str	r3, [r7, #20]
 800c410:	e01b      	b.n	800c44a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c412:	4b10      	ldr	r3, [pc, #64]	; (800c454 <prvInsertTimerInActiveList+0x7c>)
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	3304      	adds	r3, #4
 800c41a:	4619      	mov	r1, r3
 800c41c:	4610      	mov	r0, r2
 800c41e:	f7fd fea5 	bl	800a16c <vListInsert>
 800c422:	e012      	b.n	800c44a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d206      	bcs.n	800c43a <prvInsertTimerInActiveList+0x62>
 800c42c:	68ba      	ldr	r2, [r7, #8]
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	429a      	cmp	r2, r3
 800c432:	d302      	bcc.n	800c43a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c434:	2301      	movs	r3, #1
 800c436:	617b      	str	r3, [r7, #20]
 800c438:	e007      	b.n	800c44a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c43a:	4b07      	ldr	r3, [pc, #28]	; (800c458 <prvInsertTimerInActiveList+0x80>)
 800c43c:	681a      	ldr	r2, [r3, #0]
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	3304      	adds	r3, #4
 800c442:	4619      	mov	r1, r3
 800c444:	4610      	mov	r0, r2
 800c446:	f7fd fe91 	bl	800a16c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c44a:	697b      	ldr	r3, [r7, #20]
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3718      	adds	r7, #24
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	20002198 	.word	0x20002198
 800c458:	20002194 	.word	0x20002194

0800c45c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b08c      	sub	sp, #48	; 0x30
 800c460:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c462:	e0ae      	b.n	800c5c2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	2b00      	cmp	r3, #0
 800c468:	f2c0 80aa 	blt.w	800c5c0 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c472:	695b      	ldr	r3, [r3, #20]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d004      	beq.n	800c482 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47a:	3304      	adds	r3, #4
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7fd feae 	bl	800a1de <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c482:	1d3b      	adds	r3, r7, #4
 800c484:	4618      	mov	r0, r3
 800c486:	f7ff ff87 	bl	800c398 <prvSampleTimeNow>
 800c48a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	2b09      	cmp	r3, #9
 800c490:	f200 8097 	bhi.w	800c5c2 <prvProcessReceivedCommands+0x166>
 800c494:	a201      	add	r2, pc, #4	; (adr r2, 800c49c <prvProcessReceivedCommands+0x40>)
 800c496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c49a:	bf00      	nop
 800c49c:	0800c4c5 	.word	0x0800c4c5
 800c4a0:	0800c4c5 	.word	0x0800c4c5
 800c4a4:	0800c4c5 	.word	0x0800c4c5
 800c4a8:	0800c539 	.word	0x0800c539
 800c4ac:	0800c54d 	.word	0x0800c54d
 800c4b0:	0800c597 	.word	0x0800c597
 800c4b4:	0800c4c5 	.word	0x0800c4c5
 800c4b8:	0800c4c5 	.word	0x0800c4c5
 800c4bc:	0800c539 	.word	0x0800c539
 800c4c0:	0800c54d 	.word	0x0800c54d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c4ca:	f043 0301 	orr.w	r3, r3, #1
 800c4ce:	b2da      	uxtb	r2, r3
 800c4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c4d6:	68fa      	ldr	r2, [r7, #12]
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4da:	699b      	ldr	r3, [r3, #24]
 800c4dc:	18d1      	adds	r1, r2, r3
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	6a3a      	ldr	r2, [r7, #32]
 800c4e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c4e4:	f7ff ff78 	bl	800c3d8 <prvInsertTimerInActiveList>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d069      	beq.n	800c5c2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f0:	6a1b      	ldr	r3, [r3, #32]
 800c4f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c4f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c4fc:	f003 0304 	and.w	r3, r3, #4
 800c500:	2b00      	cmp	r3, #0
 800c502:	d05e      	beq.n	800c5c2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c504:	68fa      	ldr	r2, [r7, #12]
 800c506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c508:	699b      	ldr	r3, [r3, #24]
 800c50a:	441a      	add	r2, r3
 800c50c:	2300      	movs	r3, #0
 800c50e:	9300      	str	r3, [sp, #0]
 800c510:	2300      	movs	r3, #0
 800c512:	2100      	movs	r1, #0
 800c514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c516:	f7ff fe21 	bl	800c15c <xTimerGenericCommand>
 800c51a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800c51c:	69fb      	ldr	r3, [r7, #28]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d14f      	bne.n	800c5c2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800c522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c526:	f383 8811 	msr	BASEPRI, r3
 800c52a:	f3bf 8f6f 	isb	sy
 800c52e:	f3bf 8f4f 	dsb	sy
 800c532:	61bb      	str	r3, [r7, #24]
}
 800c534:	bf00      	nop
 800c536:	e7fe      	b.n	800c536 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c53e:	f023 0301 	bic.w	r3, r3, #1
 800c542:	b2da      	uxtb	r2, r3
 800c544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800c54a:	e03a      	b.n	800c5c2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c54e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c552:	f043 0301 	orr.w	r3, r3, #1
 800c556:	b2da      	uxtb	r2, r3
 800c558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c55e:	68fa      	ldr	r2, [r7, #12]
 800c560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c562:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c566:	699b      	ldr	r3, [r3, #24]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d10a      	bne.n	800c582 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800c56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c570:	f383 8811 	msr	BASEPRI, r3
 800c574:	f3bf 8f6f 	isb	sy
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	617b      	str	r3, [r7, #20]
}
 800c57e:	bf00      	nop
 800c580:	e7fe      	b.n	800c580 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c584:	699a      	ldr	r2, [r3, #24]
 800c586:	6a3b      	ldr	r3, [r7, #32]
 800c588:	18d1      	adds	r1, r2, r3
 800c58a:	6a3b      	ldr	r3, [r7, #32]
 800c58c:	6a3a      	ldr	r2, [r7, #32]
 800c58e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c590:	f7ff ff22 	bl	800c3d8 <prvInsertTimerInActiveList>
					break;
 800c594:	e015      	b.n	800c5c2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c598:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c59c:	f003 0302 	and.w	r3, r3, #2
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d103      	bne.n	800c5ac <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800c5a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c5a6:	f000 fbdb 	bl	800cd60 <vPortFree>
 800c5aa:	e00a      	b.n	800c5c2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c5b2:	f023 0301 	bic.w	r3, r3, #1
 800c5b6:	b2da      	uxtb	r2, r3
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c5be:	e000      	b.n	800c5c2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c5c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5c2:	4b08      	ldr	r3, [pc, #32]	; (800c5e4 <prvProcessReceivedCommands+0x188>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f107 0108 	add.w	r1, r7, #8
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7fe f951 	bl	800a874 <xQueueReceive>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	f47f af45 	bne.w	800c464 <prvProcessReceivedCommands+0x8>
	}
}
 800c5da:	bf00      	nop
 800c5dc:	bf00      	nop
 800c5de:	3728      	adds	r7, #40	; 0x28
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	2000219c 	.word	0x2000219c

0800c5e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b088      	sub	sp, #32
 800c5ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c5ee:	e048      	b.n	800c682 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5f0:	4b2d      	ldr	r3, [pc, #180]	; (800c6a8 <prvSwitchTimerLists+0xc0>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	68db      	ldr	r3, [r3, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5fa:	4b2b      	ldr	r3, [pc, #172]	; (800c6a8 <prvSwitchTimerLists+0xc0>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	68db      	ldr	r3, [r3, #12]
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	3304      	adds	r3, #4
 800c608:	4618      	mov	r0, r3
 800c60a:	f7fd fde8 	bl	800a1de <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	6a1b      	ldr	r3, [r3, #32]
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c61c:	f003 0304 	and.w	r3, r3, #4
 800c620:	2b00      	cmp	r3, #0
 800c622:	d02e      	beq.n	800c682 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	699b      	ldr	r3, [r3, #24]
 800c628:	693a      	ldr	r2, [r7, #16]
 800c62a:	4413      	add	r3, r2
 800c62c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c62e:	68ba      	ldr	r2, [r7, #8]
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	429a      	cmp	r2, r3
 800c634:	d90e      	bls.n	800c654 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	68ba      	ldr	r2, [r7, #8]
 800c63a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	68fa      	ldr	r2, [r7, #12]
 800c640:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c642:	4b19      	ldr	r3, [pc, #100]	; (800c6a8 <prvSwitchTimerLists+0xc0>)
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	3304      	adds	r3, #4
 800c64a:	4619      	mov	r1, r3
 800c64c:	4610      	mov	r0, r2
 800c64e:	f7fd fd8d 	bl	800a16c <vListInsert>
 800c652:	e016      	b.n	800c682 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c654:	2300      	movs	r3, #0
 800c656:	9300      	str	r3, [sp, #0]
 800c658:	2300      	movs	r3, #0
 800c65a:	693a      	ldr	r2, [r7, #16]
 800c65c:	2100      	movs	r1, #0
 800c65e:	68f8      	ldr	r0, [r7, #12]
 800c660:	f7ff fd7c 	bl	800c15c <xTimerGenericCommand>
 800c664:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d10a      	bne.n	800c682 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c670:	f383 8811 	msr	BASEPRI, r3
 800c674:	f3bf 8f6f 	isb	sy
 800c678:	f3bf 8f4f 	dsb	sy
 800c67c:	603b      	str	r3, [r7, #0]
}
 800c67e:	bf00      	nop
 800c680:	e7fe      	b.n	800c680 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c682:	4b09      	ldr	r3, [pc, #36]	; (800c6a8 <prvSwitchTimerLists+0xc0>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d1b1      	bne.n	800c5f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c68c:	4b06      	ldr	r3, [pc, #24]	; (800c6a8 <prvSwitchTimerLists+0xc0>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c692:	4b06      	ldr	r3, [pc, #24]	; (800c6ac <prvSwitchTimerLists+0xc4>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a04      	ldr	r2, [pc, #16]	; (800c6a8 <prvSwitchTimerLists+0xc0>)
 800c698:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c69a:	4a04      	ldr	r2, [pc, #16]	; (800c6ac <prvSwitchTimerLists+0xc4>)
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	6013      	str	r3, [r2, #0]
}
 800c6a0:	bf00      	nop
 800c6a2:	3718      	adds	r7, #24
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	20002194 	.word	0x20002194
 800c6ac:	20002198 	.word	0x20002198

0800c6b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c6b6:	f000 f965 	bl	800c984 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c6ba:	4b15      	ldr	r3, [pc, #84]	; (800c710 <prvCheckForValidListAndQueue+0x60>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d120      	bne.n	800c704 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c6c2:	4814      	ldr	r0, [pc, #80]	; (800c714 <prvCheckForValidListAndQueue+0x64>)
 800c6c4:	f7fd fd01 	bl	800a0ca <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c6c8:	4813      	ldr	r0, [pc, #76]	; (800c718 <prvCheckForValidListAndQueue+0x68>)
 800c6ca:	f7fd fcfe 	bl	800a0ca <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c6ce:	4b13      	ldr	r3, [pc, #76]	; (800c71c <prvCheckForValidListAndQueue+0x6c>)
 800c6d0:	4a10      	ldr	r2, [pc, #64]	; (800c714 <prvCheckForValidListAndQueue+0x64>)
 800c6d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c6d4:	4b12      	ldr	r3, [pc, #72]	; (800c720 <prvCheckForValidListAndQueue+0x70>)
 800c6d6:	4a10      	ldr	r2, [pc, #64]	; (800c718 <prvCheckForValidListAndQueue+0x68>)
 800c6d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c6da:	2300      	movs	r3, #0
 800c6dc:	9300      	str	r3, [sp, #0]
 800c6de:	4b11      	ldr	r3, [pc, #68]	; (800c724 <prvCheckForValidListAndQueue+0x74>)
 800c6e0:	4a11      	ldr	r2, [pc, #68]	; (800c728 <prvCheckForValidListAndQueue+0x78>)
 800c6e2:	210c      	movs	r1, #12
 800c6e4:	200a      	movs	r0, #10
 800c6e6:	f7fd fe0d 	bl	800a304 <xQueueGenericCreateStatic>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	4a08      	ldr	r2, [pc, #32]	; (800c710 <prvCheckForValidListAndQueue+0x60>)
 800c6ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c6f0:	4b07      	ldr	r3, [pc, #28]	; (800c710 <prvCheckForValidListAndQueue+0x60>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d005      	beq.n	800c704 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c6f8:	4b05      	ldr	r3, [pc, #20]	; (800c710 <prvCheckForValidListAndQueue+0x60>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	490b      	ldr	r1, [pc, #44]	; (800c72c <prvCheckForValidListAndQueue+0x7c>)
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7fe fbcc 	bl	800ae9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c704:	f000 f96e 	bl	800c9e4 <vPortExitCritical>
}
 800c708:	bf00      	nop
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	2000219c 	.word	0x2000219c
 800c714:	2000216c 	.word	0x2000216c
 800c718:	20002180 	.word	0x20002180
 800c71c:	20002194 	.word	0x20002194
 800c720:	20002198 	.word	0x20002198
 800c724:	20002220 	.word	0x20002220
 800c728:	200021a8 	.word	0x200021a8
 800c72c:	0800d538 	.word	0x0800d538

0800c730 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c730:	b480      	push	{r7}
 800c732:	b085      	sub	sp, #20
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	3b04      	subs	r3, #4
 800c740:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c748:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	3b04      	subs	r3, #4
 800c74e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	f023 0201 	bic.w	r2, r3, #1
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	3b04      	subs	r3, #4
 800c75e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c760:	4a0c      	ldr	r2, [pc, #48]	; (800c794 <pxPortInitialiseStack+0x64>)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	3b14      	subs	r3, #20
 800c76a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	3b04      	subs	r3, #4
 800c776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f06f 0202 	mvn.w	r2, #2
 800c77e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	3b20      	subs	r3, #32
 800c784:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c786:	68fb      	ldr	r3, [r7, #12]
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3714      	adds	r7, #20
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr
 800c794:	0800c799 	.word	0x0800c799

0800c798 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c7a2:	4b12      	ldr	r3, [pc, #72]	; (800c7ec <prvTaskExitError+0x54>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7aa:	d00a      	beq.n	800c7c2 <prvTaskExitError+0x2a>
	__asm volatile
 800c7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b0:	f383 8811 	msr	BASEPRI, r3
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	60fb      	str	r3, [r7, #12]
}
 800c7be:	bf00      	nop
 800c7c0:	e7fe      	b.n	800c7c0 <prvTaskExitError+0x28>
	__asm volatile
 800c7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c6:	f383 8811 	msr	BASEPRI, r3
 800c7ca:	f3bf 8f6f 	isb	sy
 800c7ce:	f3bf 8f4f 	dsb	sy
 800c7d2:	60bb      	str	r3, [r7, #8]
}
 800c7d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c7d6:	bf00      	nop
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d0fc      	beq.n	800c7d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c7de:	bf00      	nop
 800c7e0:	bf00      	nop
 800c7e2:	3714      	adds	r7, #20
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr
 800c7ec:	20000040 	.word	0x20000040

0800c7f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c7f0:	4b07      	ldr	r3, [pc, #28]	; (800c810 <pxCurrentTCBConst2>)
 800c7f2:	6819      	ldr	r1, [r3, #0]
 800c7f4:	6808      	ldr	r0, [r1, #0]
 800c7f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7fa:	f380 8809 	msr	PSP, r0
 800c7fe:	f3bf 8f6f 	isb	sy
 800c802:	f04f 0000 	mov.w	r0, #0
 800c806:	f380 8811 	msr	BASEPRI, r0
 800c80a:	4770      	bx	lr
 800c80c:	f3af 8000 	nop.w

0800c810 <pxCurrentTCBConst2>:
 800c810:	2000207c 	.word	0x2000207c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c814:	bf00      	nop
 800c816:	bf00      	nop

0800c818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c818:	4808      	ldr	r0, [pc, #32]	; (800c83c <prvPortStartFirstTask+0x24>)
 800c81a:	6800      	ldr	r0, [r0, #0]
 800c81c:	6800      	ldr	r0, [r0, #0]
 800c81e:	f380 8808 	msr	MSP, r0
 800c822:	f04f 0000 	mov.w	r0, #0
 800c826:	f380 8814 	msr	CONTROL, r0
 800c82a:	b662      	cpsie	i
 800c82c:	b661      	cpsie	f
 800c82e:	f3bf 8f4f 	dsb	sy
 800c832:	f3bf 8f6f 	isb	sy
 800c836:	df00      	svc	0
 800c838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c83a:	bf00      	nop
 800c83c:	e000ed08 	.word	0xe000ed08

0800c840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b086      	sub	sp, #24
 800c844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c846:	4b46      	ldr	r3, [pc, #280]	; (800c960 <xPortStartScheduler+0x120>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4a46      	ldr	r2, [pc, #280]	; (800c964 <xPortStartScheduler+0x124>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d10a      	bne.n	800c866 <xPortStartScheduler+0x26>
	__asm volatile
 800c850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c854:	f383 8811 	msr	BASEPRI, r3
 800c858:	f3bf 8f6f 	isb	sy
 800c85c:	f3bf 8f4f 	dsb	sy
 800c860:	613b      	str	r3, [r7, #16]
}
 800c862:	bf00      	nop
 800c864:	e7fe      	b.n	800c864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c866:	4b3e      	ldr	r3, [pc, #248]	; (800c960 <xPortStartScheduler+0x120>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4a3f      	ldr	r2, [pc, #252]	; (800c968 <xPortStartScheduler+0x128>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d10a      	bne.n	800c886 <xPortStartScheduler+0x46>
	__asm volatile
 800c870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	60fb      	str	r3, [r7, #12]
}
 800c882:	bf00      	nop
 800c884:	e7fe      	b.n	800c884 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c886:	4b39      	ldr	r3, [pc, #228]	; (800c96c <xPortStartScheduler+0x12c>)
 800c888:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	22ff      	movs	r2, #255	; 0xff
 800c896:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c8a0:	78fb      	ldrb	r3, [r7, #3]
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c8a8:	b2da      	uxtb	r2, r3
 800c8aa:	4b31      	ldr	r3, [pc, #196]	; (800c970 <xPortStartScheduler+0x130>)
 800c8ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c8ae:	4b31      	ldr	r3, [pc, #196]	; (800c974 <xPortStartScheduler+0x134>)
 800c8b0:	2207      	movs	r2, #7
 800c8b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8b4:	e009      	b.n	800c8ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c8b6:	4b2f      	ldr	r3, [pc, #188]	; (800c974 <xPortStartScheduler+0x134>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	4a2d      	ldr	r2, [pc, #180]	; (800c974 <xPortStartScheduler+0x134>)
 800c8be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c8c0:	78fb      	ldrb	r3, [r7, #3]
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	005b      	lsls	r3, r3, #1
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8ca:	78fb      	ldrb	r3, [r7, #3]
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8d2:	2b80      	cmp	r3, #128	; 0x80
 800c8d4:	d0ef      	beq.n	800c8b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c8d6:	4b27      	ldr	r3, [pc, #156]	; (800c974 <xPortStartScheduler+0x134>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f1c3 0307 	rsb	r3, r3, #7
 800c8de:	2b04      	cmp	r3, #4
 800c8e0:	d00a      	beq.n	800c8f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e6:	f383 8811 	msr	BASEPRI, r3
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	60bb      	str	r3, [r7, #8]
}
 800c8f4:	bf00      	nop
 800c8f6:	e7fe      	b.n	800c8f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c8f8:	4b1e      	ldr	r3, [pc, #120]	; (800c974 <xPortStartScheduler+0x134>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	021b      	lsls	r3, r3, #8
 800c8fe:	4a1d      	ldr	r2, [pc, #116]	; (800c974 <xPortStartScheduler+0x134>)
 800c900:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c902:	4b1c      	ldr	r3, [pc, #112]	; (800c974 <xPortStartScheduler+0x134>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c90a:	4a1a      	ldr	r2, [pc, #104]	; (800c974 <xPortStartScheduler+0x134>)
 800c90c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	b2da      	uxtb	r2, r3
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c916:	4b18      	ldr	r3, [pc, #96]	; (800c978 <xPortStartScheduler+0x138>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4a17      	ldr	r2, [pc, #92]	; (800c978 <xPortStartScheduler+0x138>)
 800c91c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c920:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c922:	4b15      	ldr	r3, [pc, #84]	; (800c978 <xPortStartScheduler+0x138>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4a14      	ldr	r2, [pc, #80]	; (800c978 <xPortStartScheduler+0x138>)
 800c928:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c92c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c92e:	f000 f8dd 	bl	800caec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c932:	4b12      	ldr	r3, [pc, #72]	; (800c97c <xPortStartScheduler+0x13c>)
 800c934:	2200      	movs	r2, #0
 800c936:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c938:	f000 f8fc 	bl	800cb34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c93c:	4b10      	ldr	r3, [pc, #64]	; (800c980 <xPortStartScheduler+0x140>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4a0f      	ldr	r2, [pc, #60]	; (800c980 <xPortStartScheduler+0x140>)
 800c942:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c946:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c948:	f7ff ff66 	bl	800c818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c94c:	f7fe ff34 	bl	800b7b8 <vTaskSwitchContext>
	prvTaskExitError();
 800c950:	f7ff ff22 	bl	800c798 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c954:	2300      	movs	r3, #0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3718      	adds	r7, #24
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	e000ed00 	.word	0xe000ed00
 800c964:	410fc271 	.word	0x410fc271
 800c968:	410fc270 	.word	0x410fc270
 800c96c:	e000e400 	.word	0xe000e400
 800c970:	20002268 	.word	0x20002268
 800c974:	2000226c 	.word	0x2000226c
 800c978:	e000ed20 	.word	0xe000ed20
 800c97c:	20000040 	.word	0x20000040
 800c980:	e000ef34 	.word	0xe000ef34

0800c984 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c984:	b480      	push	{r7}
 800c986:	b083      	sub	sp, #12
 800c988:	af00      	add	r7, sp, #0
	__asm volatile
 800c98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98e:	f383 8811 	msr	BASEPRI, r3
 800c992:	f3bf 8f6f 	isb	sy
 800c996:	f3bf 8f4f 	dsb	sy
 800c99a:	607b      	str	r3, [r7, #4]
}
 800c99c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c99e:	4b0f      	ldr	r3, [pc, #60]	; (800c9dc <vPortEnterCritical+0x58>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	4a0d      	ldr	r2, [pc, #52]	; (800c9dc <vPortEnterCritical+0x58>)
 800c9a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c9a8:	4b0c      	ldr	r3, [pc, #48]	; (800c9dc <vPortEnterCritical+0x58>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d10f      	bne.n	800c9d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c9b0:	4b0b      	ldr	r3, [pc, #44]	; (800c9e0 <vPortEnterCritical+0x5c>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d00a      	beq.n	800c9d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9be:	f383 8811 	msr	BASEPRI, r3
 800c9c2:	f3bf 8f6f 	isb	sy
 800c9c6:	f3bf 8f4f 	dsb	sy
 800c9ca:	603b      	str	r3, [r7, #0]
}
 800c9cc:	bf00      	nop
 800c9ce:	e7fe      	b.n	800c9ce <vPortEnterCritical+0x4a>
	}
}
 800c9d0:	bf00      	nop
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr
 800c9dc:	20000040 	.word	0x20000040
 800c9e0:	e000ed04 	.word	0xe000ed04

0800c9e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b083      	sub	sp, #12
 800c9e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c9ea:	4b12      	ldr	r3, [pc, #72]	; (800ca34 <vPortExitCritical+0x50>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d10a      	bne.n	800ca08 <vPortExitCritical+0x24>
	__asm volatile
 800c9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f6:	f383 8811 	msr	BASEPRI, r3
 800c9fa:	f3bf 8f6f 	isb	sy
 800c9fe:	f3bf 8f4f 	dsb	sy
 800ca02:	607b      	str	r3, [r7, #4]
}
 800ca04:	bf00      	nop
 800ca06:	e7fe      	b.n	800ca06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ca08:	4b0a      	ldr	r3, [pc, #40]	; (800ca34 <vPortExitCritical+0x50>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	3b01      	subs	r3, #1
 800ca0e:	4a09      	ldr	r2, [pc, #36]	; (800ca34 <vPortExitCritical+0x50>)
 800ca10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca12:	4b08      	ldr	r3, [pc, #32]	; (800ca34 <vPortExitCritical+0x50>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d105      	bne.n	800ca26 <vPortExitCritical+0x42>
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	f383 8811 	msr	BASEPRI, r3
}
 800ca24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca26:	bf00      	nop
 800ca28:	370c      	adds	r7, #12
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	20000040 	.word	0x20000040
	...

0800ca40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca40:	f3ef 8009 	mrs	r0, PSP
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	4b15      	ldr	r3, [pc, #84]	; (800caa0 <pxCurrentTCBConst>)
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	f01e 0f10 	tst.w	lr, #16
 800ca50:	bf08      	it	eq
 800ca52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca5a:	6010      	str	r0, [r2, #0]
 800ca5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ca64:	f380 8811 	msr	BASEPRI, r0
 800ca68:	f3bf 8f4f 	dsb	sy
 800ca6c:	f3bf 8f6f 	isb	sy
 800ca70:	f7fe fea2 	bl	800b7b8 <vTaskSwitchContext>
 800ca74:	f04f 0000 	mov.w	r0, #0
 800ca78:	f380 8811 	msr	BASEPRI, r0
 800ca7c:	bc09      	pop	{r0, r3}
 800ca7e:	6819      	ldr	r1, [r3, #0]
 800ca80:	6808      	ldr	r0, [r1, #0]
 800ca82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca86:	f01e 0f10 	tst.w	lr, #16
 800ca8a:	bf08      	it	eq
 800ca8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ca90:	f380 8809 	msr	PSP, r0
 800ca94:	f3bf 8f6f 	isb	sy
 800ca98:	4770      	bx	lr
 800ca9a:	bf00      	nop
 800ca9c:	f3af 8000 	nop.w

0800caa0 <pxCurrentTCBConst>:
 800caa0:	2000207c 	.word	0x2000207c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800caa4:	bf00      	nop
 800caa6:	bf00      	nop

0800caa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
	__asm volatile
 800caae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab2:	f383 8811 	msr	BASEPRI, r3
 800cab6:	f3bf 8f6f 	isb	sy
 800caba:	f3bf 8f4f 	dsb	sy
 800cabe:	607b      	str	r3, [r7, #4]
}
 800cac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cac2:	f7fe fdc1 	bl	800b648 <xTaskIncrementTick>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d003      	beq.n	800cad4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cacc:	4b06      	ldr	r3, [pc, #24]	; (800cae8 <SysTick_Handler+0x40>)
 800cace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cad2:	601a      	str	r2, [r3, #0]
 800cad4:	2300      	movs	r3, #0
 800cad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	f383 8811 	msr	BASEPRI, r3
}
 800cade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cae0:	bf00      	nop
 800cae2:	3708      	adds	r7, #8
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	e000ed04 	.word	0xe000ed04

0800caec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800caec:	b480      	push	{r7}
 800caee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800caf0:	4b0b      	ldr	r3, [pc, #44]	; (800cb20 <vPortSetupTimerInterrupt+0x34>)
 800caf2:	2200      	movs	r2, #0
 800caf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800caf6:	4b0b      	ldr	r3, [pc, #44]	; (800cb24 <vPortSetupTimerInterrupt+0x38>)
 800caf8:	2200      	movs	r2, #0
 800cafa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cafc:	4b0a      	ldr	r3, [pc, #40]	; (800cb28 <vPortSetupTimerInterrupt+0x3c>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a0a      	ldr	r2, [pc, #40]	; (800cb2c <vPortSetupTimerInterrupt+0x40>)
 800cb02:	fba2 2303 	umull	r2, r3, r2, r3
 800cb06:	099b      	lsrs	r3, r3, #6
 800cb08:	4a09      	ldr	r2, [pc, #36]	; (800cb30 <vPortSetupTimerInterrupt+0x44>)
 800cb0a:	3b01      	subs	r3, #1
 800cb0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb0e:	4b04      	ldr	r3, [pc, #16]	; (800cb20 <vPortSetupTimerInterrupt+0x34>)
 800cb10:	2207      	movs	r2, #7
 800cb12:	601a      	str	r2, [r3, #0]
}
 800cb14:	bf00      	nop
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr
 800cb1e:	bf00      	nop
 800cb20:	e000e010 	.word	0xe000e010
 800cb24:	e000e018 	.word	0xe000e018
 800cb28:	20000034 	.word	0x20000034
 800cb2c:	10624dd3 	.word	0x10624dd3
 800cb30:	e000e014 	.word	0xe000e014

0800cb34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cb44 <vPortEnableVFP+0x10>
 800cb38:	6801      	ldr	r1, [r0, #0]
 800cb3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cb3e:	6001      	str	r1, [r0, #0]
 800cb40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb42:	bf00      	nop
 800cb44:	e000ed88 	.word	0xe000ed88

0800cb48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb4e:	f3ef 8305 	mrs	r3, IPSR
 800cb52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2b0f      	cmp	r3, #15
 800cb58:	d914      	bls.n	800cb84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb5a:	4a17      	ldr	r2, [pc, #92]	; (800cbb8 <vPortValidateInterruptPriority+0x70>)
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	4413      	add	r3, r2
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb64:	4b15      	ldr	r3, [pc, #84]	; (800cbbc <vPortValidateInterruptPriority+0x74>)
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	7afa      	ldrb	r2, [r7, #11]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d20a      	bcs.n	800cb84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb72:	f383 8811 	msr	BASEPRI, r3
 800cb76:	f3bf 8f6f 	isb	sy
 800cb7a:	f3bf 8f4f 	dsb	sy
 800cb7e:	607b      	str	r3, [r7, #4]
}
 800cb80:	bf00      	nop
 800cb82:	e7fe      	b.n	800cb82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb84:	4b0e      	ldr	r3, [pc, #56]	; (800cbc0 <vPortValidateInterruptPriority+0x78>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cb8c:	4b0d      	ldr	r3, [pc, #52]	; (800cbc4 <vPortValidateInterruptPriority+0x7c>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d90a      	bls.n	800cbaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb98:	f383 8811 	msr	BASEPRI, r3
 800cb9c:	f3bf 8f6f 	isb	sy
 800cba0:	f3bf 8f4f 	dsb	sy
 800cba4:	603b      	str	r3, [r7, #0]
}
 800cba6:	bf00      	nop
 800cba8:	e7fe      	b.n	800cba8 <vPortValidateInterruptPriority+0x60>
	}
 800cbaa:	bf00      	nop
 800cbac:	3714      	adds	r7, #20
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr
 800cbb6:	bf00      	nop
 800cbb8:	e000e3f0 	.word	0xe000e3f0
 800cbbc:	20002268 	.word	0x20002268
 800cbc0:	e000ed0c 	.word	0xe000ed0c
 800cbc4:	2000226c 	.word	0x2000226c

0800cbc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b08a      	sub	sp, #40	; 0x28
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cbd4:	f7fe fc6c 	bl	800b4b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cbd8:	4b5b      	ldr	r3, [pc, #364]	; (800cd48 <pvPortMalloc+0x180>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d101      	bne.n	800cbe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cbe0:	f000 f920 	bl	800ce24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cbe4:	4b59      	ldr	r3, [pc, #356]	; (800cd4c <pvPortMalloc+0x184>)
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	4013      	ands	r3, r2
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f040 8093 	bne.w	800cd18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d01d      	beq.n	800cc34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cbf8:	2208      	movs	r2, #8
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4413      	add	r3, r2
 800cbfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f003 0307 	and.w	r3, r3, #7
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d014      	beq.n	800cc34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f023 0307 	bic.w	r3, r3, #7
 800cc10:	3308      	adds	r3, #8
 800cc12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f003 0307 	and.w	r3, r3, #7
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d00a      	beq.n	800cc34 <pvPortMalloc+0x6c>
	__asm volatile
 800cc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc22:	f383 8811 	msr	BASEPRI, r3
 800cc26:	f3bf 8f6f 	isb	sy
 800cc2a:	f3bf 8f4f 	dsb	sy
 800cc2e:	617b      	str	r3, [r7, #20]
}
 800cc30:	bf00      	nop
 800cc32:	e7fe      	b.n	800cc32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d06e      	beq.n	800cd18 <pvPortMalloc+0x150>
 800cc3a:	4b45      	ldr	r3, [pc, #276]	; (800cd50 <pvPortMalloc+0x188>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d869      	bhi.n	800cd18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cc44:	4b43      	ldr	r3, [pc, #268]	; (800cd54 <pvPortMalloc+0x18c>)
 800cc46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cc48:	4b42      	ldr	r3, [pc, #264]	; (800cd54 <pvPortMalloc+0x18c>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc4e:	e004      	b.n	800cc5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d903      	bls.n	800cc6c <pvPortMalloc+0xa4>
 800cc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d1f1      	bne.n	800cc50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cc6c:	4b36      	ldr	r3, [pc, #216]	; (800cd48 <pvPortMalloc+0x180>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d050      	beq.n	800cd18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cc76:	6a3b      	ldr	r3, [r7, #32]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	2208      	movs	r2, #8
 800cc7c:	4413      	add	r3, r2
 800cc7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc82:	681a      	ldr	r2, [r3, #0]
 800cc84:	6a3b      	ldr	r3, [r7, #32]
 800cc86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8a:	685a      	ldr	r2, [r3, #4]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	1ad2      	subs	r2, r2, r3
 800cc90:	2308      	movs	r3, #8
 800cc92:	005b      	lsls	r3, r3, #1
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d91f      	bls.n	800ccd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cc98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	4413      	add	r3, r2
 800cc9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cca0:	69bb      	ldr	r3, [r7, #24]
 800cca2:	f003 0307 	and.w	r3, r3, #7
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d00a      	beq.n	800ccc0 <pvPortMalloc+0xf8>
	__asm volatile
 800ccaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccae:	f383 8811 	msr	BASEPRI, r3
 800ccb2:	f3bf 8f6f 	isb	sy
 800ccb6:	f3bf 8f4f 	dsb	sy
 800ccba:	613b      	str	r3, [r7, #16]
}
 800ccbc:	bf00      	nop
 800ccbe:	e7fe      	b.n	800ccbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ccc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc2:	685a      	ldr	r2, [r3, #4]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	1ad2      	subs	r2, r2, r3
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ccd2:	69b8      	ldr	r0, [r7, #24]
 800ccd4:	f000 f908 	bl	800cee8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ccd8:	4b1d      	ldr	r3, [pc, #116]	; (800cd50 <pvPortMalloc+0x188>)
 800ccda:	681a      	ldr	r2, [r3, #0]
 800ccdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	1ad3      	subs	r3, r2, r3
 800cce2:	4a1b      	ldr	r2, [pc, #108]	; (800cd50 <pvPortMalloc+0x188>)
 800cce4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cce6:	4b1a      	ldr	r3, [pc, #104]	; (800cd50 <pvPortMalloc+0x188>)
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	4b1b      	ldr	r3, [pc, #108]	; (800cd58 <pvPortMalloc+0x190>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d203      	bcs.n	800ccfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ccf2:	4b17      	ldr	r3, [pc, #92]	; (800cd50 <pvPortMalloc+0x188>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a18      	ldr	r2, [pc, #96]	; (800cd58 <pvPortMalloc+0x190>)
 800ccf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ccfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccfc:	685a      	ldr	r2, [r3, #4]
 800ccfe:	4b13      	ldr	r3, [pc, #76]	; (800cd4c <pvPortMalloc+0x184>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	431a      	orrs	r2, r3
 800cd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cd0e:	4b13      	ldr	r3, [pc, #76]	; (800cd5c <pvPortMalloc+0x194>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	3301      	adds	r3, #1
 800cd14:	4a11      	ldr	r2, [pc, #68]	; (800cd5c <pvPortMalloc+0x194>)
 800cd16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cd18:	f7fe fbd8 	bl	800b4cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	f003 0307 	and.w	r3, r3, #7
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d00a      	beq.n	800cd3c <pvPortMalloc+0x174>
	__asm volatile
 800cd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2a:	f383 8811 	msr	BASEPRI, r3
 800cd2e:	f3bf 8f6f 	isb	sy
 800cd32:	f3bf 8f4f 	dsb	sy
 800cd36:	60fb      	str	r3, [r7, #12]
}
 800cd38:	bf00      	nop
 800cd3a:	e7fe      	b.n	800cd3a <pvPortMalloc+0x172>
	return pvReturn;
 800cd3c:	69fb      	ldr	r3, [r7, #28]
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3728      	adds	r7, #40	; 0x28
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	20002a78 	.word	0x20002a78
 800cd4c:	20002a8c 	.word	0x20002a8c
 800cd50:	20002a7c 	.word	0x20002a7c
 800cd54:	20002a70 	.word	0x20002a70
 800cd58:	20002a80 	.word	0x20002a80
 800cd5c:	20002a84 	.word	0x20002a84

0800cd60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b086      	sub	sp, #24
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d04d      	beq.n	800ce0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cd72:	2308      	movs	r3, #8
 800cd74:	425b      	negs	r3, r3
 800cd76:	697a      	ldr	r2, [r7, #20]
 800cd78:	4413      	add	r3, r2
 800cd7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	685a      	ldr	r2, [r3, #4]
 800cd84:	4b24      	ldr	r3, [pc, #144]	; (800ce18 <vPortFree+0xb8>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4013      	ands	r3, r2
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d10a      	bne.n	800cda4 <vPortFree+0x44>
	__asm volatile
 800cd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd92:	f383 8811 	msr	BASEPRI, r3
 800cd96:	f3bf 8f6f 	isb	sy
 800cd9a:	f3bf 8f4f 	dsb	sy
 800cd9e:	60fb      	str	r3, [r7, #12]
}
 800cda0:	bf00      	nop
 800cda2:	e7fe      	b.n	800cda2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d00a      	beq.n	800cdc2 <vPortFree+0x62>
	__asm volatile
 800cdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb0:	f383 8811 	msr	BASEPRI, r3
 800cdb4:	f3bf 8f6f 	isb	sy
 800cdb8:	f3bf 8f4f 	dsb	sy
 800cdbc:	60bb      	str	r3, [r7, #8]
}
 800cdbe:	bf00      	nop
 800cdc0:	e7fe      	b.n	800cdc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	685a      	ldr	r2, [r3, #4]
 800cdc6:	4b14      	ldr	r3, [pc, #80]	; (800ce18 <vPortFree+0xb8>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4013      	ands	r3, r2
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d01e      	beq.n	800ce0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d11a      	bne.n	800ce0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	685a      	ldr	r2, [r3, #4]
 800cddc:	4b0e      	ldr	r3, [pc, #56]	; (800ce18 <vPortFree+0xb8>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	43db      	mvns	r3, r3
 800cde2:	401a      	ands	r2, r3
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cde8:	f7fe fb62 	bl	800b4b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	685a      	ldr	r2, [r3, #4]
 800cdf0:	4b0a      	ldr	r3, [pc, #40]	; (800ce1c <vPortFree+0xbc>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	4a09      	ldr	r2, [pc, #36]	; (800ce1c <vPortFree+0xbc>)
 800cdf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cdfa:	6938      	ldr	r0, [r7, #16]
 800cdfc:	f000 f874 	bl	800cee8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ce00:	4b07      	ldr	r3, [pc, #28]	; (800ce20 <vPortFree+0xc0>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	3301      	adds	r3, #1
 800ce06:	4a06      	ldr	r2, [pc, #24]	; (800ce20 <vPortFree+0xc0>)
 800ce08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ce0a:	f7fe fb5f 	bl	800b4cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ce0e:	bf00      	nop
 800ce10:	3718      	adds	r7, #24
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	20002a8c 	.word	0x20002a8c
 800ce1c:	20002a7c 	.word	0x20002a7c
 800ce20:	20002a88 	.word	0x20002a88

0800ce24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ce24:	b480      	push	{r7}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ce2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ce2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ce30:	4b27      	ldr	r3, [pc, #156]	; (800ced0 <prvHeapInit+0xac>)
 800ce32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f003 0307 	and.w	r3, r3, #7
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d00c      	beq.n	800ce58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	3307      	adds	r3, #7
 800ce42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f023 0307 	bic.w	r3, r3, #7
 800ce4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce4c:	68ba      	ldr	r2, [r7, #8]
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	1ad3      	subs	r3, r2, r3
 800ce52:	4a1f      	ldr	r2, [pc, #124]	; (800ced0 <prvHeapInit+0xac>)
 800ce54:	4413      	add	r3, r2
 800ce56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce5c:	4a1d      	ldr	r2, [pc, #116]	; (800ced4 <prvHeapInit+0xb0>)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ce62:	4b1c      	ldr	r3, [pc, #112]	; (800ced4 <prvHeapInit+0xb0>)
 800ce64:	2200      	movs	r2, #0
 800ce66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	68ba      	ldr	r2, [r7, #8]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ce70:	2208      	movs	r2, #8
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	1a9b      	subs	r3, r3, r2
 800ce76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f023 0307 	bic.w	r3, r3, #7
 800ce7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	4a15      	ldr	r2, [pc, #84]	; (800ced8 <prvHeapInit+0xb4>)
 800ce84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ce86:	4b14      	ldr	r3, [pc, #80]	; (800ced8 <prvHeapInit+0xb4>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ce8e:	4b12      	ldr	r3, [pc, #72]	; (800ced8 <prvHeapInit+0xb4>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	2200      	movs	r2, #0
 800ce94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	68fa      	ldr	r2, [r7, #12]
 800ce9e:	1ad2      	subs	r2, r2, r3
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cea4:	4b0c      	ldr	r3, [pc, #48]	; (800ced8 <prvHeapInit+0xb4>)
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	4a0a      	ldr	r2, [pc, #40]	; (800cedc <prvHeapInit+0xb8>)
 800ceb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	4a09      	ldr	r2, [pc, #36]	; (800cee0 <prvHeapInit+0xbc>)
 800ceba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cebc:	4b09      	ldr	r3, [pc, #36]	; (800cee4 <prvHeapInit+0xc0>)
 800cebe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cec2:	601a      	str	r2, [r3, #0]
}
 800cec4:	bf00      	nop
 800cec6:	3714      	adds	r7, #20
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr
 800ced0:	20002270 	.word	0x20002270
 800ced4:	20002a70 	.word	0x20002a70
 800ced8:	20002a78 	.word	0x20002a78
 800cedc:	20002a80 	.word	0x20002a80
 800cee0:	20002a7c 	.word	0x20002a7c
 800cee4:	20002a8c 	.word	0x20002a8c

0800cee8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cee8:	b480      	push	{r7}
 800ceea:	b085      	sub	sp, #20
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cef0:	4b28      	ldr	r3, [pc, #160]	; (800cf94 <prvInsertBlockIntoFreeList+0xac>)
 800cef2:	60fb      	str	r3, [r7, #12]
 800cef4:	e002      	b.n	800cefc <prvInsertBlockIntoFreeList+0x14>
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	60fb      	str	r3, [r7, #12]
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d8f7      	bhi.n	800cef6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	68ba      	ldr	r2, [r7, #8]
 800cf10:	4413      	add	r3, r2
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d108      	bne.n	800cf2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	685a      	ldr	r2, [r3, #4]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	441a      	add	r2, r3
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	68ba      	ldr	r2, [r7, #8]
 800cf34:	441a      	add	r2, r3
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d118      	bne.n	800cf70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681a      	ldr	r2, [r3, #0]
 800cf42:	4b15      	ldr	r3, [pc, #84]	; (800cf98 <prvInsertBlockIntoFreeList+0xb0>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d00d      	beq.n	800cf66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	685a      	ldr	r2, [r3, #4]
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	441a      	add	r2, r3
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	601a      	str	r2, [r3, #0]
 800cf64:	e008      	b.n	800cf78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cf66:	4b0c      	ldr	r3, [pc, #48]	; (800cf98 <prvInsertBlockIntoFreeList+0xb0>)
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	601a      	str	r2, [r3, #0]
 800cf6e:	e003      	b.n	800cf78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cf78:	68fa      	ldr	r2, [r7, #12]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d002      	beq.n	800cf86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf86:	bf00      	nop
 800cf88:	3714      	adds	r7, #20
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr
 800cf92:	bf00      	nop
 800cf94:	20002a70 	.word	0x20002a70
 800cf98:	20002a78 	.word	0x20002a78

0800cf9c <__errno>:
 800cf9c:	4b01      	ldr	r3, [pc, #4]	; (800cfa4 <__errno+0x8>)
 800cf9e:	6818      	ldr	r0, [r3, #0]
 800cfa0:	4770      	bx	lr
 800cfa2:	bf00      	nop
 800cfa4:	20000044 	.word	0x20000044

0800cfa8 <__libc_init_array>:
 800cfa8:	b570      	push	{r4, r5, r6, lr}
 800cfaa:	4d0d      	ldr	r5, [pc, #52]	; (800cfe0 <__libc_init_array+0x38>)
 800cfac:	4c0d      	ldr	r4, [pc, #52]	; (800cfe4 <__libc_init_array+0x3c>)
 800cfae:	1b64      	subs	r4, r4, r5
 800cfb0:	10a4      	asrs	r4, r4, #2
 800cfb2:	2600      	movs	r6, #0
 800cfb4:	42a6      	cmp	r6, r4
 800cfb6:	d109      	bne.n	800cfcc <__libc_init_array+0x24>
 800cfb8:	4d0b      	ldr	r5, [pc, #44]	; (800cfe8 <__libc_init_array+0x40>)
 800cfba:	4c0c      	ldr	r4, [pc, #48]	; (800cfec <__libc_init_array+0x44>)
 800cfbc:	f000 fa36 	bl	800d42c <_init>
 800cfc0:	1b64      	subs	r4, r4, r5
 800cfc2:	10a4      	asrs	r4, r4, #2
 800cfc4:	2600      	movs	r6, #0
 800cfc6:	42a6      	cmp	r6, r4
 800cfc8:	d105      	bne.n	800cfd6 <__libc_init_array+0x2e>
 800cfca:	bd70      	pop	{r4, r5, r6, pc}
 800cfcc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfd0:	4798      	blx	r3
 800cfd2:	3601      	adds	r6, #1
 800cfd4:	e7ee      	b.n	800cfb4 <__libc_init_array+0xc>
 800cfd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfda:	4798      	blx	r3
 800cfdc:	3601      	adds	r6, #1
 800cfde:	e7f2      	b.n	800cfc6 <__libc_init_array+0x1e>
 800cfe0:	0800d5a8 	.word	0x0800d5a8
 800cfe4:	0800d5a8 	.word	0x0800d5a8
 800cfe8:	0800d5a8 	.word	0x0800d5a8
 800cfec:	0800d5ac 	.word	0x0800d5ac

0800cff0 <memcpy>:
 800cff0:	440a      	add	r2, r1
 800cff2:	4291      	cmp	r1, r2
 800cff4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cff8:	d100      	bne.n	800cffc <memcpy+0xc>
 800cffa:	4770      	bx	lr
 800cffc:	b510      	push	{r4, lr}
 800cffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d002:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d006:	4291      	cmp	r1, r2
 800d008:	d1f9      	bne.n	800cffe <memcpy+0xe>
 800d00a:	bd10      	pop	{r4, pc}

0800d00c <memset>:
 800d00c:	4402      	add	r2, r0
 800d00e:	4603      	mov	r3, r0
 800d010:	4293      	cmp	r3, r2
 800d012:	d100      	bne.n	800d016 <memset+0xa>
 800d014:	4770      	bx	lr
 800d016:	f803 1b01 	strb.w	r1, [r3], #1
 800d01a:	e7f9      	b.n	800d010 <memset+0x4>
 800d01c:	0000      	movs	r0, r0
	...

0800d020 <exp>:
 800d020:	b538      	push	{r3, r4, r5, lr}
 800d022:	ed2d 8b02 	vpush	{d8}
 800d026:	ec55 4b10 	vmov	r4, r5, d0
 800d02a:	f000 f841 	bl	800d0b0 <__ieee754_exp>
 800d02e:	eeb0 8a40 	vmov.f32	s16, s0
 800d032:	eef0 8a60 	vmov.f32	s17, s1
 800d036:	ec45 4b10 	vmov	d0, r4, r5
 800d03a:	f000 f9eb 	bl	800d414 <finite>
 800d03e:	b168      	cbz	r0, 800d05c <exp+0x3c>
 800d040:	a317      	add	r3, pc, #92	; (adr r3, 800d0a0 <exp+0x80>)
 800d042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d046:	4620      	mov	r0, r4
 800d048:	4629      	mov	r1, r5
 800d04a:	f7f3 fd0d 	bl	8000a68 <__aeabi_dcmpgt>
 800d04e:	b160      	cbz	r0, 800d06a <exp+0x4a>
 800d050:	f7ff ffa4 	bl	800cf9c <__errno>
 800d054:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800d090 <exp+0x70>
 800d058:	2322      	movs	r3, #34	; 0x22
 800d05a:	6003      	str	r3, [r0, #0]
 800d05c:	eeb0 0a48 	vmov.f32	s0, s16
 800d060:	eef0 0a68 	vmov.f32	s1, s17
 800d064:	ecbd 8b02 	vpop	{d8}
 800d068:	bd38      	pop	{r3, r4, r5, pc}
 800d06a:	a30f      	add	r3, pc, #60	; (adr r3, 800d0a8 <exp+0x88>)
 800d06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d070:	4620      	mov	r0, r4
 800d072:	4629      	mov	r1, r5
 800d074:	f7f3 fcda 	bl	8000a2c <__aeabi_dcmplt>
 800d078:	2800      	cmp	r0, #0
 800d07a:	d0ef      	beq.n	800d05c <exp+0x3c>
 800d07c:	f7ff ff8e 	bl	800cf9c <__errno>
 800d080:	2322      	movs	r3, #34	; 0x22
 800d082:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800d098 <exp+0x78>
 800d086:	6003      	str	r3, [r0, #0]
 800d088:	e7e8      	b.n	800d05c <exp+0x3c>
 800d08a:	bf00      	nop
 800d08c:	f3af 8000 	nop.w
 800d090:	00000000 	.word	0x00000000
 800d094:	7ff00000 	.word	0x7ff00000
	...
 800d0a0:	fefa39ef 	.word	0xfefa39ef
 800d0a4:	40862e42 	.word	0x40862e42
 800d0a8:	d52d3051 	.word	0xd52d3051
 800d0ac:	c0874910 	.word	0xc0874910

0800d0b0 <__ieee754_exp>:
 800d0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0b4:	ec55 4b10 	vmov	r4, r5, d0
 800d0b8:	49b5      	ldr	r1, [pc, #724]	; (800d390 <__ieee754_exp+0x2e0>)
 800d0ba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d0be:	428b      	cmp	r3, r1
 800d0c0:	ed2d 8b04 	vpush	{d8-d9}
 800d0c4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800d0c8:	d93d      	bls.n	800d146 <__ieee754_exp+0x96>
 800d0ca:	49b2      	ldr	r1, [pc, #712]	; (800d394 <__ieee754_exp+0x2e4>)
 800d0cc:	428b      	cmp	r3, r1
 800d0ce:	d918      	bls.n	800d102 <__ieee754_exp+0x52>
 800d0d0:	ee10 3a10 	vmov	r3, s0
 800d0d4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800d0d8:	4313      	orrs	r3, r2
 800d0da:	d009      	beq.n	800d0f0 <__ieee754_exp+0x40>
 800d0dc:	ee10 2a10 	vmov	r2, s0
 800d0e0:	462b      	mov	r3, r5
 800d0e2:	4620      	mov	r0, r4
 800d0e4:	4629      	mov	r1, r5
 800d0e6:	f7f3 f879 	bl	80001dc <__adddf3>
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	460d      	mov	r5, r1
 800d0ee:	e002      	b.n	800d0f6 <__ieee754_exp+0x46>
 800d0f0:	b10e      	cbz	r6, 800d0f6 <__ieee754_exp+0x46>
 800d0f2:	2400      	movs	r4, #0
 800d0f4:	2500      	movs	r5, #0
 800d0f6:	ecbd 8b04 	vpop	{d8-d9}
 800d0fa:	ec45 4b10 	vmov	d0, r4, r5
 800d0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d102:	a38d      	add	r3, pc, #564	; (adr r3, 800d338 <__ieee754_exp+0x288>)
 800d104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d108:	ee10 0a10 	vmov	r0, s0
 800d10c:	4629      	mov	r1, r5
 800d10e:	f7f3 fcab 	bl	8000a68 <__aeabi_dcmpgt>
 800d112:	4607      	mov	r7, r0
 800d114:	b130      	cbz	r0, 800d124 <__ieee754_exp+0x74>
 800d116:	ecbd 8b04 	vpop	{d8-d9}
 800d11a:	2000      	movs	r0, #0
 800d11c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d120:	f000 b96f 	b.w	800d402 <__math_oflow>
 800d124:	a386      	add	r3, pc, #536	; (adr r3, 800d340 <__ieee754_exp+0x290>)
 800d126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12a:	4620      	mov	r0, r4
 800d12c:	4629      	mov	r1, r5
 800d12e:	f7f3 fc7d 	bl	8000a2c <__aeabi_dcmplt>
 800d132:	2800      	cmp	r0, #0
 800d134:	f000 808b 	beq.w	800d24e <__ieee754_exp+0x19e>
 800d138:	ecbd 8b04 	vpop	{d8-d9}
 800d13c:	4638      	mov	r0, r7
 800d13e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d142:	f000 b955 	b.w	800d3f0 <__math_uflow>
 800d146:	4a94      	ldr	r2, [pc, #592]	; (800d398 <__ieee754_exp+0x2e8>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	f240 80ac 	bls.w	800d2a6 <__ieee754_exp+0x1f6>
 800d14e:	4a93      	ldr	r2, [pc, #588]	; (800d39c <__ieee754_exp+0x2ec>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d87c      	bhi.n	800d24e <__ieee754_exp+0x19e>
 800d154:	4b92      	ldr	r3, [pc, #584]	; (800d3a0 <__ieee754_exp+0x2f0>)
 800d156:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15e:	ee10 0a10 	vmov	r0, s0
 800d162:	4629      	mov	r1, r5
 800d164:	f7f3 f838 	bl	80001d8 <__aeabi_dsub>
 800d168:	4b8e      	ldr	r3, [pc, #568]	; (800d3a4 <__ieee754_exp+0x2f4>)
 800d16a:	00f7      	lsls	r7, r6, #3
 800d16c:	443b      	add	r3, r7
 800d16e:	ed93 7b00 	vldr	d7, [r3]
 800d172:	f1c6 0a01 	rsb	sl, r6, #1
 800d176:	4680      	mov	r8, r0
 800d178:	4689      	mov	r9, r1
 800d17a:	ebaa 0a06 	sub.w	sl, sl, r6
 800d17e:	eeb0 8a47 	vmov.f32	s16, s14
 800d182:	eef0 8a67 	vmov.f32	s17, s15
 800d186:	ec53 2b18 	vmov	r2, r3, d8
 800d18a:	4640      	mov	r0, r8
 800d18c:	4649      	mov	r1, r9
 800d18e:	f7f3 f823 	bl	80001d8 <__aeabi_dsub>
 800d192:	4604      	mov	r4, r0
 800d194:	460d      	mov	r5, r1
 800d196:	4622      	mov	r2, r4
 800d198:	462b      	mov	r3, r5
 800d19a:	4620      	mov	r0, r4
 800d19c:	4629      	mov	r1, r5
 800d19e:	f7f3 f9d3 	bl	8000548 <__aeabi_dmul>
 800d1a2:	a369      	add	r3, pc, #420	; (adr r3, 800d348 <__ieee754_exp+0x298>)
 800d1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a8:	4606      	mov	r6, r0
 800d1aa:	460f      	mov	r7, r1
 800d1ac:	f7f3 f9cc 	bl	8000548 <__aeabi_dmul>
 800d1b0:	a367      	add	r3, pc, #412	; (adr r3, 800d350 <__ieee754_exp+0x2a0>)
 800d1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b6:	f7f3 f80f 	bl	80001d8 <__aeabi_dsub>
 800d1ba:	4632      	mov	r2, r6
 800d1bc:	463b      	mov	r3, r7
 800d1be:	f7f3 f9c3 	bl	8000548 <__aeabi_dmul>
 800d1c2:	a365      	add	r3, pc, #404	; (adr r3, 800d358 <__ieee754_exp+0x2a8>)
 800d1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c8:	f7f3 f808 	bl	80001dc <__adddf3>
 800d1cc:	4632      	mov	r2, r6
 800d1ce:	463b      	mov	r3, r7
 800d1d0:	f7f3 f9ba 	bl	8000548 <__aeabi_dmul>
 800d1d4:	a362      	add	r3, pc, #392	; (adr r3, 800d360 <__ieee754_exp+0x2b0>)
 800d1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1da:	f7f2 fffd 	bl	80001d8 <__aeabi_dsub>
 800d1de:	4632      	mov	r2, r6
 800d1e0:	463b      	mov	r3, r7
 800d1e2:	f7f3 f9b1 	bl	8000548 <__aeabi_dmul>
 800d1e6:	a360      	add	r3, pc, #384	; (adr r3, 800d368 <__ieee754_exp+0x2b8>)
 800d1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ec:	f7f2 fff6 	bl	80001dc <__adddf3>
 800d1f0:	4632      	mov	r2, r6
 800d1f2:	463b      	mov	r3, r7
 800d1f4:	f7f3 f9a8 	bl	8000548 <__aeabi_dmul>
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	460b      	mov	r3, r1
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	4629      	mov	r1, r5
 800d200:	f7f2 ffea 	bl	80001d8 <__aeabi_dsub>
 800d204:	4602      	mov	r2, r0
 800d206:	460b      	mov	r3, r1
 800d208:	4606      	mov	r6, r0
 800d20a:	460f      	mov	r7, r1
 800d20c:	4620      	mov	r0, r4
 800d20e:	4629      	mov	r1, r5
 800d210:	f7f3 f99a 	bl	8000548 <__aeabi_dmul>
 800d214:	ec41 0b19 	vmov	d9, r0, r1
 800d218:	f1ba 0f00 	cmp.w	sl, #0
 800d21c:	d15d      	bne.n	800d2da <__ieee754_exp+0x22a>
 800d21e:	2200      	movs	r2, #0
 800d220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d224:	4630      	mov	r0, r6
 800d226:	4639      	mov	r1, r7
 800d228:	f7f2 ffd6 	bl	80001d8 <__aeabi_dsub>
 800d22c:	4602      	mov	r2, r0
 800d22e:	460b      	mov	r3, r1
 800d230:	ec51 0b19 	vmov	r0, r1, d9
 800d234:	f7f3 fab2 	bl	800079c <__aeabi_ddiv>
 800d238:	4622      	mov	r2, r4
 800d23a:	462b      	mov	r3, r5
 800d23c:	f7f2 ffcc 	bl	80001d8 <__aeabi_dsub>
 800d240:	4602      	mov	r2, r0
 800d242:	460b      	mov	r3, r1
 800d244:	2000      	movs	r0, #0
 800d246:	4958      	ldr	r1, [pc, #352]	; (800d3a8 <__ieee754_exp+0x2f8>)
 800d248:	f7f2 ffc6 	bl	80001d8 <__aeabi_dsub>
 800d24c:	e74d      	b.n	800d0ea <__ieee754_exp+0x3a>
 800d24e:	4857      	ldr	r0, [pc, #348]	; (800d3ac <__ieee754_exp+0x2fc>)
 800d250:	a347      	add	r3, pc, #284	; (adr r3, 800d370 <__ieee754_exp+0x2c0>)
 800d252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d256:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800d25a:	4629      	mov	r1, r5
 800d25c:	4620      	mov	r0, r4
 800d25e:	f7f3 f973 	bl	8000548 <__aeabi_dmul>
 800d262:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d266:	f7f2 ffb9 	bl	80001dc <__adddf3>
 800d26a:	f7f3 fc07 	bl	8000a7c <__aeabi_d2iz>
 800d26e:	4682      	mov	sl, r0
 800d270:	f7f3 f900 	bl	8000474 <__aeabi_i2d>
 800d274:	a340      	add	r3, pc, #256	; (adr r3, 800d378 <__ieee754_exp+0x2c8>)
 800d276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27a:	4606      	mov	r6, r0
 800d27c:	460f      	mov	r7, r1
 800d27e:	f7f3 f963 	bl	8000548 <__aeabi_dmul>
 800d282:	4602      	mov	r2, r0
 800d284:	460b      	mov	r3, r1
 800d286:	4620      	mov	r0, r4
 800d288:	4629      	mov	r1, r5
 800d28a:	f7f2 ffa5 	bl	80001d8 <__aeabi_dsub>
 800d28e:	a33c      	add	r3, pc, #240	; (adr r3, 800d380 <__ieee754_exp+0x2d0>)
 800d290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d294:	4680      	mov	r8, r0
 800d296:	4689      	mov	r9, r1
 800d298:	4630      	mov	r0, r6
 800d29a:	4639      	mov	r1, r7
 800d29c:	f7f3 f954 	bl	8000548 <__aeabi_dmul>
 800d2a0:	ec41 0b18 	vmov	d8, r0, r1
 800d2a4:	e76f      	b.n	800d186 <__ieee754_exp+0xd6>
 800d2a6:	4a42      	ldr	r2, [pc, #264]	; (800d3b0 <__ieee754_exp+0x300>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d811      	bhi.n	800d2d0 <__ieee754_exp+0x220>
 800d2ac:	a336      	add	r3, pc, #216	; (adr r3, 800d388 <__ieee754_exp+0x2d8>)
 800d2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b2:	ee10 0a10 	vmov	r0, s0
 800d2b6:	4629      	mov	r1, r5
 800d2b8:	f7f2 ff90 	bl	80001dc <__adddf3>
 800d2bc:	4b3a      	ldr	r3, [pc, #232]	; (800d3a8 <__ieee754_exp+0x2f8>)
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f7f3 fbd2 	bl	8000a68 <__aeabi_dcmpgt>
 800d2c4:	b138      	cbz	r0, 800d2d6 <__ieee754_exp+0x226>
 800d2c6:	4b38      	ldr	r3, [pc, #224]	; (800d3a8 <__ieee754_exp+0x2f8>)
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	4620      	mov	r0, r4
 800d2cc:	4629      	mov	r1, r5
 800d2ce:	e70a      	b.n	800d0e6 <__ieee754_exp+0x36>
 800d2d0:	f04f 0a00 	mov.w	sl, #0
 800d2d4:	e75f      	b.n	800d196 <__ieee754_exp+0xe6>
 800d2d6:	4682      	mov	sl, r0
 800d2d8:	e75d      	b.n	800d196 <__ieee754_exp+0xe6>
 800d2da:	4632      	mov	r2, r6
 800d2dc:	463b      	mov	r3, r7
 800d2de:	2000      	movs	r0, #0
 800d2e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d2e4:	f7f2 ff78 	bl	80001d8 <__aeabi_dsub>
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	ec51 0b19 	vmov	r0, r1, d9
 800d2f0:	f7f3 fa54 	bl	800079c <__aeabi_ddiv>
 800d2f4:	4602      	mov	r2, r0
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	ec51 0b18 	vmov	r0, r1, d8
 800d2fc:	f7f2 ff6c 	bl	80001d8 <__aeabi_dsub>
 800d300:	4642      	mov	r2, r8
 800d302:	464b      	mov	r3, r9
 800d304:	f7f2 ff68 	bl	80001d8 <__aeabi_dsub>
 800d308:	4602      	mov	r2, r0
 800d30a:	460b      	mov	r3, r1
 800d30c:	2000      	movs	r0, #0
 800d30e:	4926      	ldr	r1, [pc, #152]	; (800d3a8 <__ieee754_exp+0x2f8>)
 800d310:	f7f2 ff62 	bl	80001d8 <__aeabi_dsub>
 800d314:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800d318:	4592      	cmp	sl, r2
 800d31a:	db02      	blt.n	800d322 <__ieee754_exp+0x272>
 800d31c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800d320:	e6e3      	b.n	800d0ea <__ieee754_exp+0x3a>
 800d322:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800d326:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800d32a:	2200      	movs	r2, #0
 800d32c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800d330:	f7f3 f90a 	bl	8000548 <__aeabi_dmul>
 800d334:	e6d9      	b.n	800d0ea <__ieee754_exp+0x3a>
 800d336:	bf00      	nop
 800d338:	fefa39ef 	.word	0xfefa39ef
 800d33c:	40862e42 	.word	0x40862e42
 800d340:	d52d3051 	.word	0xd52d3051
 800d344:	c0874910 	.word	0xc0874910
 800d348:	72bea4d0 	.word	0x72bea4d0
 800d34c:	3e663769 	.word	0x3e663769
 800d350:	c5d26bf1 	.word	0xc5d26bf1
 800d354:	3ebbbd41 	.word	0x3ebbbd41
 800d358:	af25de2c 	.word	0xaf25de2c
 800d35c:	3f11566a 	.word	0x3f11566a
 800d360:	16bebd93 	.word	0x16bebd93
 800d364:	3f66c16c 	.word	0x3f66c16c
 800d368:	5555553e 	.word	0x5555553e
 800d36c:	3fc55555 	.word	0x3fc55555
 800d370:	652b82fe 	.word	0x652b82fe
 800d374:	3ff71547 	.word	0x3ff71547
 800d378:	fee00000 	.word	0xfee00000
 800d37c:	3fe62e42 	.word	0x3fe62e42
 800d380:	35793c76 	.word	0x35793c76
 800d384:	3dea39ef 	.word	0x3dea39ef
 800d388:	8800759c 	.word	0x8800759c
 800d38c:	7e37e43c 	.word	0x7e37e43c
 800d390:	40862e41 	.word	0x40862e41
 800d394:	7fefffff 	.word	0x7fefffff
 800d398:	3fd62e42 	.word	0x3fd62e42
 800d39c:	3ff0a2b1 	.word	0x3ff0a2b1
 800d3a0:	0800d580 	.word	0x0800d580
 800d3a4:	0800d590 	.word	0x0800d590
 800d3a8:	3ff00000 	.word	0x3ff00000
 800d3ac:	0800d570 	.word	0x0800d570
 800d3b0:	3defffff 	.word	0x3defffff

0800d3b4 <with_errno>:
 800d3b4:	b570      	push	{r4, r5, r6, lr}
 800d3b6:	4604      	mov	r4, r0
 800d3b8:	460d      	mov	r5, r1
 800d3ba:	4616      	mov	r6, r2
 800d3bc:	f7ff fdee 	bl	800cf9c <__errno>
 800d3c0:	4629      	mov	r1, r5
 800d3c2:	6006      	str	r6, [r0, #0]
 800d3c4:	4620      	mov	r0, r4
 800d3c6:	bd70      	pop	{r4, r5, r6, pc}

0800d3c8 <xflow>:
 800d3c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3ca:	4614      	mov	r4, r2
 800d3cc:	461d      	mov	r5, r3
 800d3ce:	b108      	cbz	r0, 800d3d4 <xflow+0xc>
 800d3d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d3d4:	e9cd 2300 	strd	r2, r3, [sp]
 800d3d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3dc:	4620      	mov	r0, r4
 800d3de:	4629      	mov	r1, r5
 800d3e0:	f7f3 f8b2 	bl	8000548 <__aeabi_dmul>
 800d3e4:	2222      	movs	r2, #34	; 0x22
 800d3e6:	b003      	add	sp, #12
 800d3e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3ec:	f7ff bfe2 	b.w	800d3b4 <with_errno>

0800d3f0 <__math_uflow>:
 800d3f0:	b508      	push	{r3, lr}
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d3f8:	f7ff ffe6 	bl	800d3c8 <xflow>
 800d3fc:	ec41 0b10 	vmov	d0, r0, r1
 800d400:	bd08      	pop	{r3, pc}

0800d402 <__math_oflow>:
 800d402:	b508      	push	{r3, lr}
 800d404:	2200      	movs	r2, #0
 800d406:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d40a:	f7ff ffdd 	bl	800d3c8 <xflow>
 800d40e:	ec41 0b10 	vmov	d0, r0, r1
 800d412:	bd08      	pop	{r3, pc}

0800d414 <finite>:
 800d414:	b082      	sub	sp, #8
 800d416:	ed8d 0b00 	vstr	d0, [sp]
 800d41a:	9801      	ldr	r0, [sp, #4]
 800d41c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d420:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d424:	0fc0      	lsrs	r0, r0, #31
 800d426:	b002      	add	sp, #8
 800d428:	4770      	bx	lr
	...

0800d42c <_init>:
 800d42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d42e:	bf00      	nop
 800d430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d432:	bc08      	pop	{r3}
 800d434:	469e      	mov	lr, r3
 800d436:	4770      	bx	lr

0800d438 <_fini>:
 800d438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d43a:	bf00      	nop
 800d43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d43e:	bc08      	pop	{r3}
 800d440:	469e      	mov	lr, r3
 800d442:	4770      	bx	lr
