
Severov_Right_Version copy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005418  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080055a8  080055a8  000155a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005674  08005674  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005674  08005674  00015674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800567c  0800567c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800567c  0800567c  0001567c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005680  08005680  00015680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000005f4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000668  20000668  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d1d3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bec  00000000  00000000  0003d277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001590  00000000  00000000  00040e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001420  00000000  00000000  000423f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002463b  00000000  00000000  00043818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bc9c  00000000  00000000  00067e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7b16  00000000  00000000  00083aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015b605  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ad8  00000000  00000000  0015b658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005590 	.word	0x08005590

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005590 	.word	0x08005590

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <fromTickToMs>:

uint32_t fromSecToTick(float sec) {
	return (sec * configTICK_RATE_HZ);
}

float fromTickToMs(uint32_t ticks) {
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	return ((float) (ticks) * 1000.0f) / (float) configTICK_RATE_HZ;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	ee07 3a90 	vmov	s15, r3
 80004e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004e6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000508 <fromTickToMs+0x34>
 80004ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80004ee:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000508 <fromTickToMs+0x34>
 80004f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80004f6:	eef0 7a66 	vmov.f32	s15, s13
}
 80004fa:	eeb0 0a67 	vmov.f32	s0, s15
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	447a0000 	.word	0x447a0000

0800050c <HAL_UART_TxCpltCallback>:
	}
	return true;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 8000514:	4b18      	ldr	r3, [pc, #96]	; (8000578 <HAL_UART_TxCpltCallback+0x6c>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	429a      	cmp	r2, r3
 800051c:	d103      	bne.n	8000526 <HAL_UART_TxCpltCallback+0x1a>
		uartBus[SHORE_UART].packageTransmitted = true;
 800051e:	4b16      	ldr	r3, [pc, #88]	; (8000578 <HAL_UART_TxCpltCallback+0x6c>)
 8000520:	2201      	movs	r2, #1
 8000522:	725a      	strb	r2, [r3, #9]
		return;
 8000524:	e022      	b.n	800056c <HAL_UART_TxCpltCallback+0x60>
	}

	struct uartBus_s *bus = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 800052a:	2300      	movs	r3, #0
 800052c:	73fb      	strb	r3, [r7, #15]
 800052e:	e01a      	b.n	8000566 <HAL_UART_TxCpltCallback+0x5a>
		if(uartBus[i].huart == huart) {
 8000530:	7bfa      	ldrb	r2, [r7, #15]
 8000532:	4911      	ldr	r1, [pc, #68]	; (8000578 <HAL_UART_TxCpltCallback+0x6c>)
 8000534:	4613      	mov	r3, r2
 8000536:	00db      	lsls	r3, r3, #3
 8000538:	1a9b      	subs	r3, r3, r2
 800053a:	00db      	lsls	r3, r3, #3
 800053c:	440b      	add	r3, r1
 800053e:	3330      	adds	r3, #48	; 0x30
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	429a      	cmp	r2, r3
 8000546:	d10b      	bne.n	8000560 <HAL_UART_TxCpltCallback+0x54>
			bus = &uartBus[i];
 8000548:	7bfa      	ldrb	r2, [r7, #15]
 800054a:	4613      	mov	r3, r2
 800054c:	00db      	lsls	r3, r3, #3
 800054e:	1a9b      	subs	r3, r3, r2
 8000550:	00db      	lsls	r3, r3, #3
 8000552:	4a09      	ldr	r2, [pc, #36]	; (8000578 <HAL_UART_TxCpltCallback+0x6c>)
 8000554:	4413      	add	r3, r2
 8000556:	60bb      	str	r3, [r7, #8]
			bus->packageTransmitted = true;
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	2201      	movs	r2, #1
 800055c:	725a      	strb	r2, [r3, #9]
			break;
 800055e:	e005      	b.n	800056c <HAL_UART_TxCpltCallback+0x60>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	3301      	adds	r3, #1
 8000564:	73fb      	strb	r3, [r7, #15]
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	2b03      	cmp	r3, #3
 800056a:	d9e1      	bls.n	8000530 <HAL_UART_TxCpltCallback+0x24>
		}
	}
}
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	20000090 	.word	0x20000090

0800057c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 8000584:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <HAL_UART_RxCpltCallback+0x7c>)
 8000586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	429a      	cmp	r2, r3
 800058c:	d102      	bne.n	8000594 <HAL_UART_RxCpltCallback+0x18>
		ShoreReceive();
 800058e:	f000 f835 	bl	80005fc <ShoreReceive>
		return;
 8000592:	e02d      	b.n	80005f0 <HAL_UART_RxCpltCallback+0x74>
	}

	struct uartBus_s *bus = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8000598:	2300      	movs	r3, #0
 800059a:	73fb      	strb	r3, [r7, #15]
 800059c:	e025      	b.n	80005ea <HAL_UART_RxCpltCallback+0x6e>
		if(uartBus[i].huart == huart) {
 800059e:	7bfa      	ldrb	r2, [r7, #15]
 80005a0:	4915      	ldr	r1, [pc, #84]	; (80005f8 <HAL_UART_RxCpltCallback+0x7c>)
 80005a2:	4613      	mov	r3, r2
 80005a4:	00db      	lsls	r3, r3, #3
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	00db      	lsls	r3, r3, #3
 80005aa:	440b      	add	r3, r1
 80005ac:	3330      	adds	r3, #48	; 0x30
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d116      	bne.n	80005e4 <HAL_UART_RxCpltCallback+0x68>
			bus = &uartBus[i];
 80005b6:	7bfa      	ldrb	r2, [r7, #15]
 80005b8:	4613      	mov	r3, r2
 80005ba:	00db      	lsls	r3, r3, #3
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	00db      	lsls	r3, r3, #3
 80005c0:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <HAL_UART_RxCpltCallback+0x7c>)
 80005c2:	4413      	add	r3, r2
 80005c4:	60bb      	str	r3, [r7, #8]
			bus->packageReceived = true;
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	2201      	movs	r2, #1
 80005ca:	721a      	strb	r2, [r3, #8]
			bus->lastMessage = fromTickToMs(xTaskGetTickCount());
 80005cc:	f004 fae0 	bl	8004b90 <xTaskGetTickCount>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff ff7e 	bl	80004d4 <fromTickToMs>
 80005d8:	eef0 7a40 	vmov.f32	s15, s0
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	edc3 7a06 	vstr	s15, [r3, #24]
			break;
 80005e2:	e005      	b.n	80005f0 <HAL_UART_RxCpltCallback+0x74>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	3301      	adds	r3, #1
 80005e8:	73fb      	strb	r3, [r7, #15]
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	d9d6      	bls.n	800059e <HAL_UART_RxCpltCallback+0x22>
		}
	}
}
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000090 	.word	0x20000090

080005fc <ShoreReceive>:
		break;
	}
}

void ShoreReceive()
{
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b085      	sub	sp, #20
 8000600:	af02      	add	r7, sp, #8
	static portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8000602:	4b39      	ldr	r3, [pc, #228]	; (80006e8 <ShoreReceive+0xec>)
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
	if(counterRx == 0) {
 8000608:	4b38      	ldr	r3, [pc, #224]	; (80006ec <ShoreReceive+0xf0>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d142      	bne.n	8000696 <ShoreReceive+0x9a>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 8000610:	2300      	movs	r3, #0
 8000612:	71fb      	strb	r3, [r7, #7]
 8000614:	e03b      	b.n	800068e <ShoreReceive+0x92>
			if(uartBus[SHORE_UART].rxBuffer[0] == ShoreCodes[i]) {
 8000616:	4b36      	ldr	r3, [pc, #216]	; (80006f0 <ShoreReceive+0xf4>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	781a      	ldrb	r2, [r3, #0]
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	4935      	ldr	r1, [pc, #212]	; (80006f4 <ShoreReceive+0xf8>)
 8000620:	5ccb      	ldrb	r3, [r1, r3]
 8000622:	429a      	cmp	r2, r3
 8000624:	d125      	bne.n	8000672 <ShoreReceive+0x76>
				counterRx = 1;
 8000626:	4b31      	ldr	r3, [pc, #196]	; (80006ec <ShoreReceive+0xf0>)
 8000628:	2201      	movs	r2, #1
 800062a:	801a      	strh	r2, [r3, #0]
				uartBus[SHORE_UART].rxLength = ShoreLength[i]-1;
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	4a32      	ldr	r2, [pc, #200]	; (80006f8 <ShoreReceive+0xfc>)
 8000630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	3b01      	subs	r3, #1
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <ShoreReceive+0xf4>)
 800063c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer+1, uartBus[SHORE_UART].rxLength);
 8000640:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <ShoreReceive+0xf4>)
 8000642:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000644:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <ShoreReceive+0xf4>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	3301      	adds	r3, #1
 800064a:	4a29      	ldr	r2, [pc, #164]	; (80006f0 <ShoreReceive+0xf4>)
 800064c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8000650:	b292      	uxth	r2, r2
 8000652:	4619      	mov	r1, r3
 8000654:	f002 ff6d 	bl	8003532 <HAL_UART_Receive_IT>
				xTimerStartFromISR(UARTTimer, &xHigherPriorityTaskWoken);
 8000658:	4b28      	ldr	r3, [pc, #160]	; (80006fc <ShoreReceive+0x100>)
 800065a:	681c      	ldr	r4, [r3, #0]
 800065c:	f004 faa8 	bl	8004bb0 <xTaskGetTickCountFromISR>
 8000660:	4602      	mov	r2, r0
 8000662:	2300      	movs	r3, #0
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <ShoreReceive+0xec>)
 8000668:	2106      	movs	r1, #6
 800066a:	4620      	mov	r0, r4
 800066c:	f004 fe00 	bl	8005270 <xTimerGenericCommand>
				break;
 8000670:	e026      	b.n	80006c0 <ShoreReceive+0xc4>
			}

			if(i == SHORE_REQUEST_MODES_NUMBER-1) {
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b02      	cmp	r3, #2
 8000676:	d107      	bne.n	8000688 <ShoreReceive+0x8c>
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8000678:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <ShoreReceive+0xf4>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <ShoreReceive+0xf4>)
 800067e:	6811      	ldr	r1, [r2, #0]
 8000680:	2201      	movs	r2, #1
 8000682:	4618      	mov	r0, r3
 8000684:	f002 ff55 	bl	8003532 <HAL_UART_Receive_IT>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	3301      	adds	r3, #1
 800068c:	71fb      	strb	r3, [r7, #7]
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2b02      	cmp	r3, #2
 8000692:	d9c0      	bls.n	8000616 <ShoreReceive+0x1a>
 8000694:	e014      	b.n	80006c0 <ShoreReceive+0xc4>
			}
		}
	}
	else if(counterRx == 1) {
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <ShoreReceive+0xf0>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d110      	bne.n	80006c0 <ShoreReceive+0xc4>
		uartBus[SHORE_UART].packageReceived = true;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <ShoreReceive+0xf4>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	721a      	strb	r2, [r3, #8]
		uartBus[SHORE_UART].lastMessage = fromTickToMs(xTaskGetTickCount());
 80006a4:	f004 fa74 	bl	8004b90 <xTaskGetTickCount>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff12 	bl	80004d4 <fromTickToMs>
 80006b0:	eef0 7a40 	vmov.f32	s15, s0
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <ShoreReceive+0xf4>)
 80006b6:	edc3 7a06 	vstr	s15, [r3, #24]
		counterRx = 2;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <ShoreReceive+0xf0>)
 80006bc:	2202      	movs	r2, #2
 80006be:	801a      	strh	r2, [r3, #0]
	}

	if (xHigherPriorityTaskWoken == pdTRUE) {
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <ShoreReceive+0xec>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d10a      	bne.n	80006de <ShoreReceive+0xe2>
		xHigherPriorityTaskWoken = pdFALSE;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <ShoreReceive+0xec>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
		taskYIELD();
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <ShoreReceive+0x104>)
 80006d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	f3bf 8f4f 	dsb	sy
 80006da:	f3bf 8f6f 	isb	sy
	}
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd90      	pop	{r4, r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000174 	.word	0x20000174
 80006ec:	20000170 	.word	0x20000170
 80006f0:	20000090 	.word	0x20000090
 80006f4:	080055f0 	.word	0x080055f0
 80006f8:	080055e8 	.word	0x080055e8
 80006fc:	20000178 	.word	0x20000178
 8000700:	e000ed04 	.word	0xe000ed04

08000704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b27      	ldr	r3, [pc, #156]	; (80007ac <MX_DMA_Init+0xa8>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a26      	ldr	r2, [pc, #152]	; (80007ac <MX_DMA_Init+0xa8>)
 8000714:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b24      	ldr	r3, [pc, #144]	; (80007ac <MX_DMA_Init+0xa8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b20      	ldr	r3, [pc, #128]	; (80007ac <MX_DMA_Init+0xa8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a1f      	ldr	r2, [pc, #124]	; (80007ac <MX_DMA_Init+0xa8>)
 8000730:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <MX_DMA_Init+0xa8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2105      	movs	r1, #5
 8000746:	200c      	movs	r0, #12
 8000748:	f000 ffca 	bl	80016e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800074c:	200c      	movs	r0, #12
 800074e:	f000 ffe3 	bl	8001718 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2105      	movs	r1, #5
 8000756:	200e      	movs	r0, #14
 8000758:	f000 ffc2 	bl	80016e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800075c:	200e      	movs	r0, #14
 800075e:	f000 ffdb 	bl	8001718 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2105      	movs	r1, #5
 8000766:	2010      	movs	r0, #16
 8000768:	f000 ffba 	bl	80016e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800076c:	2010      	movs	r0, #16
 800076e:	f000 ffd3 	bl	8001718 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2105      	movs	r1, #5
 8000776:	2011      	movs	r0, #17
 8000778:	f000 ffb2 	bl	80016e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800077c:	2011      	movs	r0, #17
 800077e:	f000 ffcb 	bl	8001718 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2105      	movs	r1, #5
 8000786:	203a      	movs	r0, #58	; 0x3a
 8000788:	f000 ffaa 	bl	80016e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800078c:	203a      	movs	r0, #58	; 0x3a
 800078e:	f000 ffc3 	bl	8001718 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2105      	movs	r1, #5
 8000796:	2046      	movs	r0, #70	; 0x46
 8000798:	f000 ffa2 	bl	80016e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800079c:	2046      	movs	r0, #70	; 0x46
 800079e:	f000 ffbb 	bl	8001718 <HAL_NVIC_EnableIRQ>

}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <MX_GPIO_Init+0xc8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a2a      	ldr	r2, [pc, #168]	; (8000878 <MX_GPIO_Init+0xc8>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b28      	ldr	r3, [pc, #160]	; (8000878 <MX_GPIO_Init+0xc8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b24      	ldr	r3, [pc, #144]	; (8000878 <MX_GPIO_Init+0xc8>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a23      	ldr	r2, [pc, #140]	; (8000878 <MX_GPIO_Init+0xc8>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b21      	ldr	r3, [pc, #132]	; (8000878 <MX_GPIO_Init+0xc8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <MX_GPIO_Init+0xc8>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <MX_GPIO_Init+0xc8>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_GPIO_Init+0xc8>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led1_Pin|led2_Pin|led3_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000820:	4816      	ldr	r0, [pc, #88]	; (800087c <MX_GPIO_Init+0xcc>)
 8000822:	f001 fc9f 	bl	8002164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_DE_GPIO_Port, RE_DE_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082c:	4814      	ldr	r0, [pc, #80]	; (8000880 <MX_GPIO_Init+0xd0>)
 800082e:	f001 fc99 	bl	8002164 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin;
 8000832:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	4619      	mov	r1, r3
 800084a:	480c      	ldr	r0, [pc, #48]	; (800087c <MX_GPIO_Init+0xcc>)
 800084c:	f001 faee 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RE_DE_Pin;
 8000850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000854:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RE_DE_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_GPIO_Init+0xd0>)
 800086a:	f001 fadf 	bl	8001e2c <HAL_GPIO_Init>

}
 800086e:	bf00      	nop
 8000870:	3720      	adds	r7, #32
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40020400 	.word	0x40020400
 8000880:	40020000 	.word	0x40020000

08000884 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_I2C1_Init+0x50>)
 800088a:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <MX_I2C1_Init+0x54>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_I2C1_Init+0x50>)
 8000890:	4a12      	ldr	r2, [pc, #72]	; (80008dc <MX_I2C1_Init+0x58>)
 8000892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_I2C1_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_I2C1_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008c2:	f001 fc69 	bl	8002198 <HAL_I2C_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008cc:	f000 f952 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2000017c 	.word	0x2000017c
 80008d8:	40005400 	.word	0x40005400
 80008dc:	000186a0 	.word	0x000186a0

080008e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a19      	ldr	r2, [pc, #100]	; (8000964 <HAL_I2C_MspInit+0x84>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d12b      	bne.n	800095a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <HAL_I2C_MspInit+0x88>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a17      	ldr	r2, [pc, #92]	; (8000968 <HAL_I2C_MspInit+0x88>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <HAL_I2C_MspInit+0x88>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800091e:	23c0      	movs	r3, #192	; 0xc0
 8000920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000922:	2312      	movs	r3, #18
 8000924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800092e:	2304      	movs	r3, #4
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <HAL_I2C_MspInit+0x8c>)
 800093a:	f001 fa77 	bl	8001e2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_I2C_MspInit+0x88>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_I2C_MspInit+0x88>)
 8000948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_I2C_MspInit+0x88>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800095a:	bf00      	nop
 800095c:	3728      	adds	r7, #40	; 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40005400 	.word	0x40005400
 8000968:	40023800 	.word	0x40023800
 800096c:	40020400 	.word	0x40020400

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b0a3      	sub	sp, #140	; 0x8c
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000976:	f000 fd95 	bl	80014a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097a:	f000 f881 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097e:	f7ff ff17 	bl	80007b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000982:	f7ff febf 	bl	8000704 <MX_DMA_Init>
  MX_I2C1_Init();
 8000986:	f7ff ff7d 	bl	8000884 <MX_I2C1_Init>
  MX_UART4_Init();
 800098a:	f000 fa7b 	bl	8000e84 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800098e:	f000 faa3 	bl	8000ed8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000992:	f000 facb 	bl	8000f2c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000996:	f000 faf3 	bl	8000f80 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 800099a:	f000 fa1b 	bl	8000dd4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  //HAL_Delay(10e3);
  uint8_t transaction = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  uint8_t ThrustersRequestBuffer0[] = {0xAA, 0x1, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0xae};
 80009a4:	4b30      	ldr	r3, [pc, #192]	; (8000a68 <main+0xf8>)
 80009a6:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80009aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009ac:	c407      	stmia	r4!, {r0, r1, r2}
 80009ae:	7023      	strb	r3, [r4, #0]
  uint8_t ThrustersRequestBuffer1[] = {0xAA, 0x1, 0xAF, 0xb, 0xf0, 0xb, 0xf0, 0x10, 0xf0, 0xb, 0x10, 0x0, 0x55};
 80009b0:	4b2e      	ldr	r3, [pc, #184]	; (8000a6c <main+0xfc>)
 80009b2:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80009b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009b8:	c407      	stmia	r4!, {r0, r1, r2}
 80009ba:	7023      	strb	r3, [r4, #0]

  uint8_t ThrustersRequestBuffer2[] =  {0xAA, 0x1, 0xAF, 0x17, 0xdd, 0xf1, 0x17, 0xe9, 0x17, 0x17, 0x23, 0x0, 0x48};
 80009bc:	4b2c      	ldr	r3, [pc, #176]	; (8000a70 <main+0x100>)
 80009be:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80009c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009c4:	c407      	stmia	r4!, {r0, r1, r2}
 80009c6:	7023      	strb	r3, [r4, #0]
  uint8_t ThrustersRequestBuffer3[] = {0xAA, 0x1, 0xAF, 0xd, 0x14, 0xf3, 0xec, 0xec, 0xec, 0xf3, 0x14, 0x0, 0x4f};
 80009c8:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <main+0x104>)
 80009ca:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80009ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009d0:	c407      	stmia	r4!, {r0, r1, r2}
 80009d2:	7023      	strb	r3, [r4, #0]
 // uint8_t ThrustersRequestBuffer4[] = {0xAA, 0x1, 0xAF, 0xb, 0xf0, 0xb, 0xf0, 0x10, 0xf0, 0xb, 0x10, 0x0, 0x55};
  uint8_t ThrustersResponseBuffer[THRUSTERS_NUMBER][THRUSTERS_RESPONSE_LENGTH];
  HAL_GPIO_WritePin(RE_DE_GPIO_Port,RE_DE_Pin,GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009da:	4827      	ldr	r0, [pc, #156]	; (8000a78 <main+0x108>)
 80009dc:	f001 fbc2 	bl	8002164 <HAL_GPIO_WritePin>

  //HAL_UART_Receive_(&huart1, ThrustersResponseBuffer[transaction], THRUSTERS_RESPONSE_LENGTH);
  HAL_UART_Transmit(&huart1, ThrustersRequestBuffer0, THRUSTERS_REQUEST_LENGTH,100);
 80009e0:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80009e4:	2364      	movs	r3, #100	; 0x64
 80009e6:	220d      	movs	r2, #13
 80009e8:	4824      	ldr	r0, [pc, #144]	; (8000a7c <main+0x10c>)
 80009ea:	f002 fd10 	bl	800340e <HAL_UART_Transmit>
  HAL_Delay(6000);
 80009ee:	f241 7070 	movw	r0, #6000	; 0x1770
 80009f2:	f000 fd99 	bl	8001528 <HAL_Delay>

  HAL_UART_Transmit(&huart1, ThrustersRequestBuffer1, THRUSTERS_REQUEST_LENGTH,100);
 80009f6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	220d      	movs	r2, #13
 80009fe:	481f      	ldr	r0, [pc, #124]	; (8000a7c <main+0x10c>)
 8000a00:	f002 fd05 	bl	800340e <HAL_UART_Transmit>

  HAL_Delay(14000);
 8000a04:	f243 60b0 	movw	r0, #14000	; 0x36b0
 8000a08:	f000 fd8e 	bl	8001528 <HAL_Delay>

  HAL_UART_Transmit(&huart1, ThrustersRequestBuffer0, THRUSTERS_REQUEST_LENGTH,100);
 8000a0c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000a10:	2364      	movs	r3, #100	; 0x64
 8000a12:	220d      	movs	r2, #13
 8000a14:	4819      	ldr	r0, [pc, #100]	; (8000a7c <main+0x10c>)
 8000a16:	f002 fcfa 	bl	800340e <HAL_UART_Transmit>

  HAL_Delay(1000);
 8000a1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a1e:	f000 fd83 	bl	8001528 <HAL_Delay>

  HAL_UART_Transmit(&huart1, ThrustersRequestBuffer2, THRUSTERS_REQUEST_LENGTH,100);
 8000a22:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000a26:	2364      	movs	r3, #100	; 0x64
 8000a28:	220d      	movs	r2, #13
 8000a2a:	4814      	ldr	r0, [pc, #80]	; (8000a7c <main+0x10c>)
 8000a2c:	f002 fcef 	bl	800340e <HAL_UART_Transmit>

  HAL_Delay(10000);
 8000a30:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a34:	f000 fd78 	bl	8001528 <HAL_Delay>

  HAL_UART_Transmit(&huart1, ThrustersRequestBuffer3, THRUSTERS_REQUEST_LENGTH,100);
 8000a38:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000a3c:	2364      	movs	r3, #100	; 0x64
 8000a3e:	220d      	movs	r2, #13
 8000a40:	480e      	ldr	r0, [pc, #56]	; (8000a7c <main+0x10c>)
 8000a42:	f002 fce4 	bl	800340e <HAL_UART_Transmit>
  HAL_Delay(300);
 8000a46:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a4a:	f000 fd6d 	bl	8001528 <HAL_Delay>

  HAL_UART_Transmit(&huart1, ThrustersRequestBuffer2, THRUSTERS_REQUEST_LENGTH,100);
 8000a4e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000a52:	2364      	movs	r3, #100	; 0x64
 8000a54:	220d      	movs	r2, #13
 8000a56:	4809      	ldr	r0, [pc, #36]	; (8000a7c <main+0x10c>)
 8000a58:	f002 fcd9 	bl	800340e <HAL_UART_Transmit>

  HAL_Delay(10000);
 8000a5c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a60:	f000 fd62 	bl	8001528 <HAL_Delay>
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <main+0xf4>
 8000a66:	bf00      	nop
 8000a68:	080055a8 	.word	0x080055a8
 8000a6c:	080055b8 	.word	0x080055b8
 8000a70:	080055c8 	.word	0x080055c8
 8000a74:	080055d8 	.word	0x080055d8
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	200002a4 	.word	0x200002a4

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b094      	sub	sp, #80	; 0x50
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0320 	add.w	r3, r7, #32
 8000a8a:	2230      	movs	r2, #48	; 0x30
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f004 fd76 	bl	8005580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <SystemClock_Config+0xc8>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	4a26      	ldr	r2, [pc, #152]	; (8000b48 <SystemClock_Config+0xc8>)
 8000aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab4:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <SystemClock_Config+0xc8>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <SystemClock_Config+0xcc>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a20      	ldr	r2, [pc, #128]	; (8000b4c <SystemClock_Config+0xcc>)
 8000aca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <SystemClock_Config+0xcc>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000adc:	2302      	movs	r3, #2
 8000ade:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aec:	2300      	movs	r3, #0
 8000aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000af0:	2308      	movs	r3, #8
 8000af2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000af4:	234b      	movs	r3, #75	; 0x4b
 8000af6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af8:	2302      	movs	r3, #2
 8000afa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000afc:	2304      	movs	r3, #4
 8000afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 0320 	add.w	r3, r7, #32
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 fc8b 	bl	8002420 <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b10:	f000 f830 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b14:	230f      	movs	r3, #15
 8000b16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	2102      	movs	r1, #2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f001 feed 	bl	8002910 <HAL_RCC_ClockConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b3c:	f000 f81a 	bl	8000b74 <Error_Handler>
  }
}
 8000b40:	bf00      	nop
 8000b42:	3750      	adds	r7, #80	; 0x50
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40007000 	.word	0x40007000

08000b50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d101      	bne.n	8000b66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b62:	f000 fcc1 	bl	80014e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40010000 	.word	0x40010000

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>
	...

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_MspInit+0x54>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <HAL_MspInit+0x54>)
 8000b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b94:	6453      	str	r3, [r2, #68]	; 0x44
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <HAL_MspInit+0x54>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <HAL_MspInit+0x54>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_MspInit+0x54>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_MspInit+0x54>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	210f      	movs	r1, #15
 8000bc2:	f06f 0001 	mvn.w	r0, #1
 8000bc6:	f000 fd8b 	bl	80016e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	; 0x30
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <HAL_InitTick+0xd0>)
 8000bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf0:	4a2d      	ldr	r2, [pc, #180]	; (8000ca8 <HAL_InitTick+0xd0>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <HAL_InitTick+0xd0>)
 8000bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c04:	f107 020c 	add.w	r2, r7, #12
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f002 f85e 	bl	8002cd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c14:	f002 f848 	bl	8002ca8 <HAL_RCC_GetPCLK2Freq>
 8000c18:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c1c:	4a23      	ldr	r2, [pc, #140]	; (8000cac <HAL_InitTick+0xd4>)
 8000c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c22:	0c9b      	lsrs	r3, r3, #18
 8000c24:	3b01      	subs	r3, #1
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c28:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <HAL_InitTick+0xd8>)
 8000c2a:	4a22      	ldr	r2, [pc, #136]	; (8000cb4 <HAL_InitTick+0xdc>)
 8000c2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <HAL_InitTick+0xd8>)
 8000c30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c34:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c36:	4a1e      	ldr	r2, [pc, #120]	; (8000cb0 <HAL_InitTick+0xd8>)
 8000c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <HAL_InitTick+0xd8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c42:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <HAL_InitTick+0xd8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <HAL_InitTick+0xd8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c4e:	4818      	ldr	r0, [pc, #96]	; (8000cb0 <HAL_InitTick+0xd8>)
 8000c50:	f002 f870 	bl	8002d34 <HAL_TIM_Base_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d11b      	bne.n	8000c9a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c62:	4813      	ldr	r0, [pc, #76]	; (8000cb0 <HAL_InitTick+0xd8>)
 8000c64:	f002 f8b6 	bl	8002dd4 <HAL_TIM_Base_Start_IT>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d111      	bne.n	8000c9a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c76:	2019      	movs	r0, #25
 8000c78:	f000 fd4e 	bl	8001718 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b0f      	cmp	r3, #15
 8000c80:	d808      	bhi.n	8000c94 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c82:	2200      	movs	r2, #0
 8000c84:	6879      	ldr	r1, [r7, #4]
 8000c86:	2019      	movs	r0, #25
 8000c88:	f000 fd2a 	bl	80016e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_InitTick+0xe0>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	e002      	b.n	8000c9a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3730      	adds	r7, #48	; 0x30
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	431bde83 	.word	0x431bde83
 8000cb0:	200001d0 	.word	0x200001d0
 8000cb4:	40010000 	.word	0x40010000
 8000cb8:	20000004 	.word	0x20000004

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <HardFault_Handler+0x4>

08000cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <MemManage_Handler+0x4>

08000cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <DMA1_Stream1_IRQHandler+0x10>)
 8000cee:	f000 fe61 	bl	80019b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200004f0 	.word	0x200004f0

08000cfc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <DMA1_Stream3_IRQHandler+0x10>)
 8000d02:	f000 fe57 	bl	80019b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000550 	.word	0x20000550

08000d10 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <DMA1_Stream5_IRQHandler+0x10>)
 8000d16:	f000 fe4d 	bl	80019b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000430 	.word	0x20000430

08000d24 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <DMA1_Stream6_IRQHandler+0x10>)
 8000d2a:	f000 fe43 	bl	80019b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000490 	.word	0x20000490

08000d38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d3e:	f002 f8b9 	bl	8002eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200001d0 	.word	0x200001d0

08000d4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <USART1_IRQHandler+0x10>)
 8000d52:	f002 fc1f 	bl	8003594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200002a4 	.word	0x200002a4

08000d60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <USART2_IRQHandler+0x10>)
 8000d66:	f002 fc15 	bl	8003594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200002e8 	.word	0x200002e8

08000d74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <USART3_IRQHandler+0x10>)
 8000d7a:	f002 fc0b 	bl	8003594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	2000032c 	.word	0x2000032c

08000d88 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <DMA2_Stream2_IRQHandler+0x10>)
 8000d8e:	f000 fe11 	bl	80019b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000370 	.word	0x20000370

08000d9c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <DMA2_Stream7_IRQHandler+0x10>)
 8000da2:	f000 fe07 	bl	80019b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200003d0 	.word	0x200003d0

08000db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <SystemInit+0x20>)
 8000db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <SystemInit+0x20>)
 8000dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_TIM7_Init+0x64>)
 8000de4:	4a15      	ldr	r2, [pc, #84]	; (8000e3c <MX_TIM7_Init+0x68>)
 8000de6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <MX_TIM7_Init+0x64>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_TIM7_Init+0x64>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <MX_TIM7_Init+0x64>)
 8000df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_TIM7_Init+0x64>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e02:	480d      	ldr	r0, [pc, #52]	; (8000e38 <MX_TIM7_Init+0x64>)
 8000e04:	f001 ff96 	bl	8002d34 <HAL_TIM_Base_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000e0e:	f7ff feb1 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4806      	ldr	r0, [pc, #24]	; (8000e38 <MX_TIM7_Init+0x64>)
 8000e20:	f002 fa18 	bl	8003254 <HAL_TIMEx_MasterConfigSynchronization>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000e2a:	f7ff fea3 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000218 	.word	0x20000218
 8000e3c:	40001400 	.word	0x40001400

08000e40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <HAL_TIM_Base_MspInit+0x3c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d10d      	bne.n	8000e6e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_TIM_Base_MspInit+0x40>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a09      	ldr	r2, [pc, #36]	; (8000e80 <HAL_TIM_Base_MspInit+0x40>)
 8000e5c:	f043 0320 	orr.w	r3, r3, #32
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <HAL_TIM_Base_MspInit+0x40>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f003 0320 	and.w	r3, r3, #32
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40001400 	.word	0x40001400
 8000e80:	40023800 	.word	0x40023800

08000e84 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_UART4_Init+0x4c>)
 8000e8a:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <MX_UART4_Init+0x50>)
 8000e8c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <MX_UART4_Init+0x4c>)
 8000e90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e94:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <MX_UART4_Init+0x4c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_UART4_Init+0x4c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <MX_UART4_Init+0x4c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_UART4_Init+0x4c>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <MX_UART4_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_UART4_Init+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_UART4_Init+0x4c>)
 8000ebc:	f002 fa5a 	bl	8003374 <HAL_UART_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000ec6:	f7ff fe55 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000260 	.word	0x20000260
 8000ed4:	40004c00 	.word	0x40004c00

08000ed8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <MX_USART1_UART_Init+0x50>)
 8000ee0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000ee4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000efe:	220c      	movs	r2, #12
 8000f00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000f10:	f002 fa30 	bl	8003374 <HAL_UART_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f1a:	f7ff fe2b 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200002a4 	.word	0x200002a4
 8000f28:	40011000 	.word	0x40011000

08000f2c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <MX_USART2_UART_Init+0x50>)
 8000f34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f52:	220c      	movs	r2, #12
 8000f54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f64:	f002 fa06 	bl	8003374 <HAL_UART_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f6e:	f7ff fe01 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200002e8 	.word	0x200002e8
 8000f7c:	40004400 	.word	0x40004400

08000f80 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_USART3_UART_Init+0x4c>)
 8000f86:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <MX_USART3_UART_Init+0x50>)
 8000f88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <MX_USART3_UART_Init+0x4c>)
 8000f8c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000f90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_USART3_UART_Init+0x4c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_USART3_UART_Init+0x4c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MX_USART3_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_USART3_UART_Init+0x4c>)
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <MX_USART3_UART_Init+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_USART3_UART_Init+0x4c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_USART3_UART_Init+0x4c>)
 8000fb8:	f002 f9dc 	bl	8003374 <HAL_UART_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fc2:	f7ff fdd7 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000032c 	.word	0x2000032c
 8000fd0:	40004800 	.word	0x40004800

08000fd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b090      	sub	sp, #64	; 0x40
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a63      	ldr	r2, [pc, #396]	; (8001180 <HAL_UART_MspInit+0x1ac>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d12c      	bne.n	8001050 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ffa:	4b62      	ldr	r3, [pc, #392]	; (8001184 <HAL_UART_MspInit+0x1b0>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	4a61      	ldr	r2, [pc, #388]	; (8001184 <HAL_UART_MspInit+0x1b0>)
 8001000:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001004:	6413      	str	r3, [r2, #64]	; 0x40
 8001006:	4b5f      	ldr	r3, [pc, #380]	; (8001184 <HAL_UART_MspInit+0x1b0>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001010:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
 8001016:	4b5b      	ldr	r3, [pc, #364]	; (8001184 <HAL_UART_MspInit+0x1b0>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a5a      	ldr	r2, [pc, #360]	; (8001184 <HAL_UART_MspInit+0x1b0>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b58      	ldr	r3, [pc, #352]	; (8001184 <HAL_UART_MspInit+0x1b0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800102e:	2303      	movs	r3, #3
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103a:	2303      	movs	r3, #3
 800103c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800103e:	2308      	movs	r3, #8
 8001040:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001046:	4619      	mov	r1, r3
 8001048:	484f      	ldr	r0, [pc, #316]	; (8001188 <HAL_UART_MspInit+0x1b4>)
 800104a:	f000 feef 	bl	8001e2c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800104e:	e1e0      	b.n	8001412 <HAL_UART_MspInit+0x43e>
  else if(uartHandle->Instance==USART1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a4d      	ldr	r2, [pc, #308]	; (800118c <HAL_UART_MspInit+0x1b8>)
 8001056:	4293      	cmp	r3, r2
 8001058:	f040 80a2 	bne.w	80011a0 <HAL_UART_MspInit+0x1cc>
    __HAL_RCC_USART1_CLK_ENABLE();
 800105c:	2300      	movs	r3, #0
 800105e:	623b      	str	r3, [r7, #32]
 8001060:	4b48      	ldr	r3, [pc, #288]	; (8001184 <HAL_UART_MspInit+0x1b0>)
 8001062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001064:	4a47      	ldr	r2, [pc, #284]	; (8001184 <HAL_UART_MspInit+0x1b0>)
 8001066:	f043 0310 	orr.w	r3, r3, #16
 800106a:	6453      	str	r3, [r2, #68]	; 0x44
 800106c:	4b45      	ldr	r3, [pc, #276]	; (8001184 <HAL_UART_MspInit+0x1b0>)
 800106e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001070:	f003 0310 	and.w	r3, r3, #16
 8001074:	623b      	str	r3, [r7, #32]
 8001076:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	4b41      	ldr	r3, [pc, #260]	; (8001184 <HAL_UART_MspInit+0x1b0>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	4a40      	ldr	r2, [pc, #256]	; (8001184 <HAL_UART_MspInit+0x1b0>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6313      	str	r3, [r2, #48]	; 0x30
 8001088:	4b3e      	ldr	r3, [pc, #248]	; (8001184 <HAL_UART_MspInit+0x1b0>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001094:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010a6:	2307      	movs	r3, #7
 80010a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ae:	4619      	mov	r1, r3
 80010b0:	4835      	ldr	r0, [pc, #212]	; (8001188 <HAL_UART_MspInit+0x1b4>)
 80010b2:	f000 febb 	bl	8001e2c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80010b6:	4b36      	ldr	r3, [pc, #216]	; (8001190 <HAL_UART_MspInit+0x1bc>)
 80010b8:	4a36      	ldr	r2, [pc, #216]	; (8001194 <HAL_UART_MspInit+0x1c0>)
 80010ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80010bc:	4b34      	ldr	r3, [pc, #208]	; (8001190 <HAL_UART_MspInit+0x1bc>)
 80010be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010c2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010c4:	4b32      	ldr	r3, [pc, #200]	; (8001190 <HAL_UART_MspInit+0x1bc>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ca:	4b31      	ldr	r3, [pc, #196]	; (8001190 <HAL_UART_MspInit+0x1bc>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010d0:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <HAL_UART_MspInit+0x1bc>)
 80010d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010d8:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <HAL_UART_MspInit+0x1bc>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010de:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <HAL_UART_MspInit+0x1bc>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80010e4:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <HAL_UART_MspInit+0x1bc>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010ea:	4b29      	ldr	r3, [pc, #164]	; (8001190 <HAL_UART_MspInit+0x1bc>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010f0:	4b27      	ldr	r3, [pc, #156]	; (8001190 <HAL_UART_MspInit+0x1bc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010f6:	4826      	ldr	r0, [pc, #152]	; (8001190 <HAL_UART_MspInit+0x1bc>)
 80010f8:	f000 fb1c 	bl	8001734 <HAL_DMA_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8001102:	f7ff fd37 	bl	8000b74 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a21      	ldr	r2, [pc, #132]	; (8001190 <HAL_UART_MspInit+0x1bc>)
 800110a:	639a      	str	r2, [r3, #56]	; 0x38
 800110c:	4a20      	ldr	r2, [pc, #128]	; (8001190 <HAL_UART_MspInit+0x1bc>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <HAL_UART_MspInit+0x1c4>)
 8001114:	4a21      	ldr	r2, [pc, #132]	; (800119c <HAL_UART_MspInit+0x1c8>)
 8001116:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <HAL_UART_MspInit+0x1c4>)
 800111a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800111e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <HAL_UART_MspInit+0x1c4>)
 8001122:	2240      	movs	r2, #64	; 0x40
 8001124:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_UART_MspInit+0x1c4>)
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_UART_MspInit+0x1c4>)
 800112e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001132:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_UART_MspInit+0x1c4>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_UART_MspInit+0x1c4>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_UART_MspInit+0x1c4>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_UART_MspInit+0x1c4>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_UART_MspInit+0x1c4>)
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001152:	4811      	ldr	r0, [pc, #68]	; (8001198 <HAL_UART_MspInit+0x1c4>)
 8001154:	f000 faee 	bl	8001734 <HAL_DMA_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_UART_MspInit+0x18e>
      Error_Handler();
 800115e:	f7ff fd09 	bl	8000b74 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <HAL_UART_MspInit+0x1c4>)
 8001166:	635a      	str	r2, [r3, #52]	; 0x34
 8001168:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <HAL_UART_MspInit+0x1c4>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2105      	movs	r1, #5
 8001172:	2025      	movs	r0, #37	; 0x25
 8001174:	f000 fab4 	bl	80016e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001178:	2025      	movs	r0, #37	; 0x25
 800117a:	f000 facd 	bl	8001718 <HAL_NVIC_EnableIRQ>
}
 800117e:	e148      	b.n	8001412 <HAL_UART_MspInit+0x43e>
 8001180:	40004c00 	.word	0x40004c00
 8001184:	40023800 	.word	0x40023800
 8001188:	40020000 	.word	0x40020000
 800118c:	40011000 	.word	0x40011000
 8001190:	20000370 	.word	0x20000370
 8001194:	40026440 	.word	0x40026440
 8001198:	200003d0 	.word	0x200003d0
 800119c:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a9d      	ldr	r2, [pc, #628]	; (800141c <HAL_UART_MspInit+0x448>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	f040 809c 	bne.w	80012e4 <HAL_UART_MspInit+0x310>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
 80011b0:	4b9b      	ldr	r3, [pc, #620]	; (8001420 <HAL_UART_MspInit+0x44c>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a9a      	ldr	r2, [pc, #616]	; (8001420 <HAL_UART_MspInit+0x44c>)
 80011b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	4b98      	ldr	r3, [pc, #608]	; (8001420 <HAL_UART_MspInit+0x44c>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c4:	61bb      	str	r3, [r7, #24]
 80011c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	4b94      	ldr	r3, [pc, #592]	; (8001420 <HAL_UART_MspInit+0x44c>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	4a93      	ldr	r2, [pc, #588]	; (8001420 <HAL_UART_MspInit+0x44c>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6313      	str	r3, [r2, #48]	; 0x30
 80011d8:	4b91      	ldr	r3, [pc, #580]	; (8001420 <HAL_UART_MspInit+0x44c>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011e4:	230c      	movs	r3, #12
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011f4:	2307      	movs	r3, #7
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011fc:	4619      	mov	r1, r3
 80011fe:	4889      	ldr	r0, [pc, #548]	; (8001424 <HAL_UART_MspInit+0x450>)
 8001200:	f000 fe14 	bl	8001e2c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001204:	4b88      	ldr	r3, [pc, #544]	; (8001428 <HAL_UART_MspInit+0x454>)
 8001206:	4a89      	ldr	r2, [pc, #548]	; (800142c <HAL_UART_MspInit+0x458>)
 8001208:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800120a:	4b87      	ldr	r3, [pc, #540]	; (8001428 <HAL_UART_MspInit+0x454>)
 800120c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001210:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001212:	4b85      	ldr	r3, [pc, #532]	; (8001428 <HAL_UART_MspInit+0x454>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001218:	4b83      	ldr	r3, [pc, #524]	; (8001428 <HAL_UART_MspInit+0x454>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800121e:	4b82      	ldr	r3, [pc, #520]	; (8001428 <HAL_UART_MspInit+0x454>)
 8001220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001224:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001226:	4b80      	ldr	r3, [pc, #512]	; (8001428 <HAL_UART_MspInit+0x454>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800122c:	4b7e      	ldr	r3, [pc, #504]	; (8001428 <HAL_UART_MspInit+0x454>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001232:	4b7d      	ldr	r3, [pc, #500]	; (8001428 <HAL_UART_MspInit+0x454>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001238:	4b7b      	ldr	r3, [pc, #492]	; (8001428 <HAL_UART_MspInit+0x454>)
 800123a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800123e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001240:	4b79      	ldr	r3, [pc, #484]	; (8001428 <HAL_UART_MspInit+0x454>)
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001246:	4878      	ldr	r0, [pc, #480]	; (8001428 <HAL_UART_MspInit+0x454>)
 8001248:	f000 fa74 	bl	8001734 <HAL_DMA_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_UART_MspInit+0x282>
      Error_Handler();
 8001252:	f7ff fc8f 	bl	8000b74 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a73      	ldr	r2, [pc, #460]	; (8001428 <HAL_UART_MspInit+0x454>)
 800125a:	639a      	str	r2, [r3, #56]	; 0x38
 800125c:	4a72      	ldr	r2, [pc, #456]	; (8001428 <HAL_UART_MspInit+0x454>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001262:	4b73      	ldr	r3, [pc, #460]	; (8001430 <HAL_UART_MspInit+0x45c>)
 8001264:	4a73      	ldr	r2, [pc, #460]	; (8001434 <HAL_UART_MspInit+0x460>)
 8001266:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001268:	4b71      	ldr	r3, [pc, #452]	; (8001430 <HAL_UART_MspInit+0x45c>)
 800126a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800126e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001270:	4b6f      	ldr	r3, [pc, #444]	; (8001430 <HAL_UART_MspInit+0x45c>)
 8001272:	2240      	movs	r2, #64	; 0x40
 8001274:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001276:	4b6e      	ldr	r3, [pc, #440]	; (8001430 <HAL_UART_MspInit+0x45c>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800127c:	4b6c      	ldr	r3, [pc, #432]	; (8001430 <HAL_UART_MspInit+0x45c>)
 800127e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001282:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001284:	4b6a      	ldr	r3, [pc, #424]	; (8001430 <HAL_UART_MspInit+0x45c>)
 8001286:	2200      	movs	r2, #0
 8001288:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800128a:	4b69      	ldr	r3, [pc, #420]	; (8001430 <HAL_UART_MspInit+0x45c>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001290:	4b67      	ldr	r3, [pc, #412]	; (8001430 <HAL_UART_MspInit+0x45c>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001296:	4b66      	ldr	r3, [pc, #408]	; (8001430 <HAL_UART_MspInit+0x45c>)
 8001298:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800129c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800129e:	4b64      	ldr	r3, [pc, #400]	; (8001430 <HAL_UART_MspInit+0x45c>)
 80012a0:	2204      	movs	r2, #4
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80012a4:	4b62      	ldr	r3, [pc, #392]	; (8001430 <HAL_UART_MspInit+0x45c>)
 80012a6:	2203      	movs	r2, #3
 80012a8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80012aa:	4b61      	ldr	r3, [pc, #388]	; (8001430 <HAL_UART_MspInit+0x45c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80012b0:	4b5f      	ldr	r3, [pc, #380]	; (8001430 <HAL_UART_MspInit+0x45c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80012b6:	485e      	ldr	r0, [pc, #376]	; (8001430 <HAL_UART_MspInit+0x45c>)
 80012b8:	f000 fa3c 	bl	8001734 <HAL_DMA_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_UART_MspInit+0x2f2>
      Error_Handler();
 80012c2:	f7ff fc57 	bl	8000b74 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a59      	ldr	r2, [pc, #356]	; (8001430 <HAL_UART_MspInit+0x45c>)
 80012ca:	635a      	str	r2, [r3, #52]	; 0x34
 80012cc:	4a58      	ldr	r2, [pc, #352]	; (8001430 <HAL_UART_MspInit+0x45c>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2105      	movs	r1, #5
 80012d6:	2026      	movs	r0, #38	; 0x26
 80012d8:	f000 fa02 	bl	80016e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012dc:	2026      	movs	r0, #38	; 0x26
 80012de:	f000 fa1b 	bl	8001718 <HAL_NVIC_EnableIRQ>
}
 80012e2:	e096      	b.n	8001412 <HAL_UART_MspInit+0x43e>
  else if(uartHandle->Instance==USART3)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a53      	ldr	r2, [pc, #332]	; (8001438 <HAL_UART_MspInit+0x464>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	f040 8091 	bne.w	8001412 <HAL_UART_MspInit+0x43e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	4b4a      	ldr	r3, [pc, #296]	; (8001420 <HAL_UART_MspInit+0x44c>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	4a49      	ldr	r2, [pc, #292]	; (8001420 <HAL_UART_MspInit+0x44c>)
 80012fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001300:	4b47      	ldr	r3, [pc, #284]	; (8001420 <HAL_UART_MspInit+0x44c>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	4b43      	ldr	r3, [pc, #268]	; (8001420 <HAL_UART_MspInit+0x44c>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	4a42      	ldr	r2, [pc, #264]	; (8001420 <HAL_UART_MspInit+0x44c>)
 8001316:	f043 0302 	orr.w	r3, r3, #2
 800131a:	6313      	str	r3, [r2, #48]	; 0x30
 800131c:	4b40      	ldr	r3, [pc, #256]	; (8001420 <HAL_UART_MspInit+0x44c>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001328:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800132c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800133a:	2307      	movs	r3, #7
 800133c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001342:	4619      	mov	r1, r3
 8001344:	483d      	ldr	r0, [pc, #244]	; (800143c <HAL_UART_MspInit+0x468>)
 8001346:	f000 fd71 	bl	8001e2c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800134a:	4b3d      	ldr	r3, [pc, #244]	; (8001440 <HAL_UART_MspInit+0x46c>)
 800134c:	4a3d      	ldr	r2, [pc, #244]	; (8001444 <HAL_UART_MspInit+0x470>)
 800134e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001350:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <HAL_UART_MspInit+0x46c>)
 8001352:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001356:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001358:	4b39      	ldr	r3, [pc, #228]	; (8001440 <HAL_UART_MspInit+0x46c>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800135e:	4b38      	ldr	r3, [pc, #224]	; (8001440 <HAL_UART_MspInit+0x46c>)
 8001360:	2200      	movs	r2, #0
 8001362:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001364:	4b36      	ldr	r3, [pc, #216]	; (8001440 <HAL_UART_MspInit+0x46c>)
 8001366:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800136a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800136c:	4b34      	ldr	r3, [pc, #208]	; (8001440 <HAL_UART_MspInit+0x46c>)
 800136e:	2200      	movs	r2, #0
 8001370:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001372:	4b33      	ldr	r3, [pc, #204]	; (8001440 <HAL_UART_MspInit+0x46c>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001378:	4b31      	ldr	r3, [pc, #196]	; (8001440 <HAL_UART_MspInit+0x46c>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800137e:	4b30      	ldr	r3, [pc, #192]	; (8001440 <HAL_UART_MspInit+0x46c>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001384:	4b2e      	ldr	r3, [pc, #184]	; (8001440 <HAL_UART_MspInit+0x46c>)
 8001386:	2200      	movs	r2, #0
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800138a:	482d      	ldr	r0, [pc, #180]	; (8001440 <HAL_UART_MspInit+0x46c>)
 800138c:	f000 f9d2 	bl	8001734 <HAL_DMA_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_UART_MspInit+0x3c6>
      Error_Handler();
 8001396:	f7ff fbed 	bl	8000b74 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a28      	ldr	r2, [pc, #160]	; (8001440 <HAL_UART_MspInit+0x46c>)
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
 80013a0:	4a27      	ldr	r2, [pc, #156]	; (8001440 <HAL_UART_MspInit+0x46c>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80013a6:	4b28      	ldr	r3, [pc, #160]	; (8001448 <HAL_UART_MspInit+0x474>)
 80013a8:	4a28      	ldr	r2, [pc, #160]	; (800144c <HAL_UART_MspInit+0x478>)
 80013aa:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80013ac:	4b26      	ldr	r3, [pc, #152]	; (8001448 <HAL_UART_MspInit+0x474>)
 80013ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013b2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013b4:	4b24      	ldr	r3, [pc, #144]	; (8001448 <HAL_UART_MspInit+0x474>)
 80013b6:	2240      	movs	r2, #64	; 0x40
 80013b8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ba:	4b23      	ldr	r3, [pc, #140]	; (8001448 <HAL_UART_MspInit+0x474>)
 80013bc:	2200      	movs	r2, #0
 80013be:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013c0:	4b21      	ldr	r3, [pc, #132]	; (8001448 <HAL_UART_MspInit+0x474>)
 80013c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013c6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <HAL_UART_MspInit+0x474>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013ce:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <HAL_UART_MspInit+0x474>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80013d4:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <HAL_UART_MspInit+0x474>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <HAL_UART_MspInit+0x474>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <HAL_UART_MspInit+0x474>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80013e6:	4818      	ldr	r0, [pc, #96]	; (8001448 <HAL_UART_MspInit+0x474>)
 80013e8:	f000 f9a4 	bl	8001734 <HAL_DMA_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_UART_MspInit+0x422>
      Error_Handler();
 80013f2:	f7ff fbbf 	bl	8000b74 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a13      	ldr	r2, [pc, #76]	; (8001448 <HAL_UART_MspInit+0x474>)
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34
 80013fc:	4a12      	ldr	r2, [pc, #72]	; (8001448 <HAL_UART_MspInit+0x474>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2105      	movs	r1, #5
 8001406:	2027      	movs	r0, #39	; 0x27
 8001408:	f000 f96a 	bl	80016e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800140c:	2027      	movs	r0, #39	; 0x27
 800140e:	f000 f983 	bl	8001718 <HAL_NVIC_EnableIRQ>
}
 8001412:	bf00      	nop
 8001414:	3740      	adds	r7, #64	; 0x40
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40004400 	.word	0x40004400
 8001420:	40023800 	.word	0x40023800
 8001424:	40020000 	.word	0x40020000
 8001428:	20000430 	.word	0x20000430
 800142c:	40026088 	.word	0x40026088
 8001430:	20000490 	.word	0x20000490
 8001434:	400260a0 	.word	0x400260a0
 8001438:	40004800 	.word	0x40004800
 800143c:	40020400 	.word	0x40020400
 8001440:	200004f0 	.word	0x200004f0
 8001444:	40026028 	.word	0x40026028
 8001448:	20000550 	.word	0x20000550
 800144c:	40026058 	.word	0x40026058

08001450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001488 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001454:	480d      	ldr	r0, [pc, #52]	; (800148c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001456:	490e      	ldr	r1, [pc, #56]	; (8001490 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001458:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800145c:	e002      	b.n	8001464 <LoopCopyDataInit>

0800145e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001462:	3304      	adds	r3, #4

08001464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001468:	d3f9      	bcc.n	800145e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146a:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800146c:	4c0b      	ldr	r4, [pc, #44]	; (800149c <LoopFillZerobss+0x26>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001470:	e001      	b.n	8001476 <LoopFillZerobss>

08001472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001474:	3204      	adds	r2, #4

08001476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001478:	d3fb      	bcc.n	8001472 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800147a:	f7ff fc99 	bl	8000db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800147e:	f004 f84d 	bl	800551c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001482:	f7ff fa75 	bl	8000970 <main>
  bx  lr    
 8001486:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001488:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001490:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001494:	08005684 	.word	0x08005684
  ldr r2, =_sbss
 8001498:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800149c:	20000668 	.word	0x20000668

080014a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <ADC_IRQHandler>
	...

080014a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <HAL_Init+0x40>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <HAL_Init+0x40>)
 80014ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_Init+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <HAL_Init+0x40>)
 80014ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_Init+0x40>)
 80014c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014cc:	2003      	movs	r0, #3
 80014ce:	f000 f8fc 	bl	80016ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d2:	200f      	movs	r0, #15
 80014d4:	f7ff fb80 	bl	8000bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d8:	f7ff fb52 	bl	8000b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023c00 	.word	0x40023c00

080014e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_IncTick+0x20>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_IncTick+0x24>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a04      	ldr	r2, [pc, #16]	; (800150c <HAL_IncTick+0x24>)
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000008 	.word	0x20000008
 800150c:	200005b0 	.word	0x200005b0

08001510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return uwTick;
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <HAL_GetTick+0x14>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	200005b0 	.word	0x200005b0

08001528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001530:	f7ff ffee 	bl	8001510 <HAL_GetTick>
 8001534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001540:	d005      	beq.n	800154e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <HAL_Delay+0x44>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4413      	add	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800154e:	bf00      	nop
 8001550:	f7ff ffde 	bl	8001510 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	429a      	cmp	r2, r3
 800155e:	d8f7      	bhi.n	8001550 <HAL_Delay+0x28>
  {
  }
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000008 	.word	0x20000008

08001570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800158c:	4013      	ands	r3, r2
 800158e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001598:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800159c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a2:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	60d3      	str	r3, [r2, #12]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015bc:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <__NVIC_GetPriorityGrouping+0x18>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	f003 0307 	and.w	r3, r3, #7
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	db0b      	blt.n	80015fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	f003 021f 	and.w	r2, r3, #31
 80015ec:	4907      	ldr	r1, [pc, #28]	; (800160c <__NVIC_EnableIRQ+0x38>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	095b      	lsrs	r3, r3, #5
 80015f4:	2001      	movs	r0, #1
 80015f6:	fa00 f202 	lsl.w	r2, r0, r2
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000e100 	.word	0xe000e100

08001610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	db0a      	blt.n	800163a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	490c      	ldr	r1, [pc, #48]	; (800165c <__NVIC_SetPriority+0x4c>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	0112      	lsls	r2, r2, #4
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	440b      	add	r3, r1
 8001634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001638:	e00a      	b.n	8001650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4908      	ldr	r1, [pc, #32]	; (8001660 <__NVIC_SetPriority+0x50>)
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	3b04      	subs	r3, #4
 8001648:	0112      	lsls	r2, r2, #4
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	440b      	add	r3, r1
 800164e:	761a      	strb	r2, [r3, #24]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000e100 	.word	0xe000e100
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f1c3 0307 	rsb	r3, r3, #7
 800167e:	2b04      	cmp	r3, #4
 8001680:	bf28      	it	cs
 8001682:	2304      	movcs	r3, #4
 8001684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3304      	adds	r3, #4
 800168a:	2b06      	cmp	r3, #6
 800168c:	d902      	bls.n	8001694 <NVIC_EncodePriority+0x30>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3b03      	subs	r3, #3
 8001692:	e000      	b.n	8001696 <NVIC_EncodePriority+0x32>
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	401a      	ands	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	43d9      	mvns	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	4313      	orrs	r3, r2
         );
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3724      	adds	r7, #36	; 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ff4c 	bl	8001570 <__NVIC_SetPriorityGrouping>
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f2:	f7ff ff61 	bl	80015b8 <__NVIC_GetPriorityGrouping>
 80016f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	6978      	ldr	r0, [r7, #20]
 80016fe:	f7ff ffb1 	bl	8001664 <NVIC_EncodePriority>
 8001702:	4602      	mov	r2, r0
 8001704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001708:	4611      	mov	r1, r2
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff ff80 	bl	8001610 <__NVIC_SetPriority>
}
 8001710:	bf00      	nop
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ff54 	bl	80015d4 <__NVIC_EnableIRQ>
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff fee6 	bl	8001510 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e099      	b.n	8001884 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2202      	movs	r2, #2
 8001754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001770:	e00f      	b.n	8001792 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001772:	f7ff fecd 	bl	8001510 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b05      	cmp	r3, #5
 800177e:	d908      	bls.n	8001792 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2220      	movs	r2, #32
 8001784:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2203      	movs	r2, #3
 800178a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e078      	b.n	8001884 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1e8      	bne.n	8001772 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	4b38      	ldr	r3, [pc, #224]	; (800188c <HAL_DMA_Init+0x158>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d107      	bne.n	80017fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f4:	4313      	orrs	r3, r2
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f023 0307 	bic.w	r3, r3, #7
 8001812:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	4313      	orrs	r3, r2
 800181c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	2b04      	cmp	r3, #4
 8001824:	d117      	bne.n	8001856 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4313      	orrs	r3, r2
 800182e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00e      	beq.n	8001856 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 fa7b 	bl	8001d34 <DMA_CheckFifoParam>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d008      	beq.n	8001856 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2240      	movs	r2, #64	; 0x40
 8001848:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001852:	2301      	movs	r3, #1
 8001854:	e016      	b.n	8001884 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 fa32 	bl	8001cc8 <DMA_CalcBaseAndBitshift>
 8001864:	4603      	mov	r3, r0
 8001866:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186c:	223f      	movs	r2, #63	; 0x3f
 800186e:	409a      	lsls	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	f010803f 	.word	0xf010803f

08001890 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800189e:	f7ff fe37 	bl	8001510 <HAL_GetTick>
 80018a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d008      	beq.n	80018c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2280      	movs	r2, #128	; 0x80
 80018b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e052      	b.n	8001968 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0216 	bic.w	r2, r2, #22
 80018d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695a      	ldr	r2, [r3, #20]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d103      	bne.n	80018f2 <HAL_DMA_Abort+0x62>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0208 	bic.w	r2, r2, #8
 8001900:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0201 	bic.w	r2, r2, #1
 8001910:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001912:	e013      	b.n	800193c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001914:	f7ff fdfc 	bl	8001510 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b05      	cmp	r3, #5
 8001920:	d90c      	bls.n	800193c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2220      	movs	r2, #32
 8001926:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2203      	movs	r2, #3
 800192c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e015      	b.n	8001968 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1e4      	bne.n	8001914 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194e:	223f      	movs	r2, #63	; 0x3f
 8001950:	409a      	lsls	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d004      	beq.n	800198e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2280      	movs	r2, #128	; 0x80
 8001988:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e00c      	b.n	80019a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2205      	movs	r2, #5
 8001992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0201 	bic.w	r2, r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019c0:	4b8e      	ldr	r3, [pc, #568]	; (8001bfc <HAL_DMA_IRQHandler+0x248>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a8e      	ldr	r2, [pc, #568]	; (8001c00 <HAL_DMA_IRQHandler+0x24c>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	0a9b      	lsrs	r3, r3, #10
 80019cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019de:	2208      	movs	r2, #8
 80019e0:	409a      	lsls	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d01a      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d013      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0204 	bic.w	r2, r2, #4
 8001a06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0c:	2208      	movs	r2, #8
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a18:	f043 0201 	orr.w	r2, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a24:	2201      	movs	r2, #1
 8001a26:	409a      	lsls	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d012      	beq.n	8001a56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00b      	beq.n	8001a56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a42:	2201      	movs	r2, #1
 8001a44:	409a      	lsls	r2, r3
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4e:	f043 0202 	orr.w	r2, r3, #2
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4013      	ands	r3, r2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d012      	beq.n	8001a8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00b      	beq.n	8001a8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a78:	2204      	movs	r2, #4
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a84:	f043 0204 	orr.w	r2, r3, #4
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a90:	2210      	movs	r2, #16
 8001a92:	409a      	lsls	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d043      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d03c      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aae:	2210      	movs	r2, #16
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d018      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d108      	bne.n	8001ae4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d024      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	4798      	blx	r3
 8001ae2:	e01f      	b.n	8001b24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d01b      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	4798      	blx	r3
 8001af4:	e016      	b.n	8001b24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d107      	bne.n	8001b14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0208 	bic.w	r2, r2, #8
 8001b12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b28:	2220      	movs	r2, #32
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 808f 	beq.w	8001c54 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0310 	and.w	r3, r3, #16
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 8087 	beq.w	8001c54 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b05      	cmp	r3, #5
 8001b5c:	d136      	bne.n	8001bcc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0216 	bic.w	r2, r2, #22
 8001b6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	695a      	ldr	r2, [r3, #20]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d103      	bne.n	8001b8e <HAL_DMA_IRQHandler+0x1da>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d007      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0208 	bic.w	r2, r2, #8
 8001b9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba2:	223f      	movs	r2, #63	; 0x3f
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d07e      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	4798      	blx	r3
        }
        return;
 8001bca:	e079      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d01d      	beq.n	8001c16 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10d      	bne.n	8001c04 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d031      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	4798      	blx	r3
 8001bf8:	e02c      	b.n	8001c54 <HAL_DMA_IRQHandler+0x2a0>
 8001bfa:	bf00      	nop
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d023      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	4798      	blx	r3
 8001c14:	e01e      	b.n	8001c54 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10f      	bne.n	8001c44 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0210 	bic.w	r2, r2, #16
 8001c32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d032      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d022      	beq.n	8001cae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2205      	movs	r2, #5
 8001c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	3301      	adds	r3, #1
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d307      	bcc.n	8001c9c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f2      	bne.n	8001c80 <HAL_DMA_IRQHandler+0x2cc>
 8001c9a:	e000      	b.n	8001c9e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c9c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d005      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	4798      	blx	r3
 8001cbe:	e000      	b.n	8001cc2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001cc0:	bf00      	nop
    }
  }
}
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	3b10      	subs	r3, #16
 8001cd8:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <DMA_CalcBaseAndBitshift+0x64>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	091b      	lsrs	r3, r3, #4
 8001ce0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ce2:	4a13      	ldr	r2, [pc, #76]	; (8001d30 <DMA_CalcBaseAndBitshift+0x68>)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d909      	bls.n	8001d0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cfe:	f023 0303 	bic.w	r3, r3, #3
 8001d02:	1d1a      	adds	r2, r3, #4
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	659a      	str	r2, [r3, #88]	; 0x58
 8001d08:	e007      	b.n	8001d1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d12:	f023 0303 	bic.w	r3, r3, #3
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	aaaaaaab 	.word	0xaaaaaaab
 8001d30:	0800560c 	.word	0x0800560c

08001d34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d11f      	bne.n	8001d8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d856      	bhi.n	8001e02 <DMA_CheckFifoParam+0xce>
 8001d54:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <DMA_CheckFifoParam+0x28>)
 8001d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5a:	bf00      	nop
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d7f 	.word	0x08001d7f
 8001d64:	08001d6d 	.word	0x08001d6d
 8001d68:	08001e03 	.word	0x08001e03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d046      	beq.n	8001e06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d7c:	e043      	b.n	8001e06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d86:	d140      	bne.n	8001e0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d8c:	e03d      	b.n	8001e0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d96:	d121      	bne.n	8001ddc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d837      	bhi.n	8001e0e <DMA_CheckFifoParam+0xda>
 8001d9e:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <DMA_CheckFifoParam+0x70>)
 8001da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da4:	08001db5 	.word	0x08001db5
 8001da8:	08001dbb 	.word	0x08001dbb
 8001dac:	08001db5 	.word	0x08001db5
 8001db0:	08001dcd 	.word	0x08001dcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
      break;
 8001db8:	e030      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d025      	beq.n	8001e12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dca:	e022      	b.n	8001e12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dd4:	d11f      	bne.n	8001e16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001dda:	e01c      	b.n	8001e16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d903      	bls.n	8001dea <DMA_CheckFifoParam+0xb6>
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d003      	beq.n	8001df0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001de8:	e018      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	73fb      	strb	r3, [r7, #15]
      break;
 8001dee:	e015      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00e      	beq.n	8001e1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8001e00:	e00b      	b.n	8001e1a <DMA_CheckFifoParam+0xe6>
      break;
 8001e02:	bf00      	nop
 8001e04:	e00a      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      break;
 8001e06:	bf00      	nop
 8001e08:	e008      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      break;
 8001e0a:	bf00      	nop
 8001e0c:	e006      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      break;
 8001e0e:	bf00      	nop
 8001e10:	e004      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      break;
 8001e12:	bf00      	nop
 8001e14:	e002      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      break;   
 8001e16:	bf00      	nop
 8001e18:	e000      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      break;
 8001e1a:	bf00      	nop
    }
  } 
  
  return status; 
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop

08001e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	e16b      	b.n	8002120 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e48:	2201      	movs	r2, #1
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	f040 815a 	bne.w	800211a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d005      	beq.n	8001e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d130      	bne.n	8001ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 0201 	and.w	r2, r3, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d017      	beq.n	8001f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d123      	bne.n	8001f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	08da      	lsrs	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3208      	adds	r2, #8
 8001f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	220f      	movs	r2, #15
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	08da      	lsrs	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	69b9      	ldr	r1, [r7, #24]
 8001f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0203 	and.w	r2, r3, #3
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80b4 	beq.w	800211a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b60      	ldr	r3, [pc, #384]	; (8002138 <HAL_GPIO_Init+0x30c>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	4a5f      	ldr	r2, [pc, #380]	; (8002138 <HAL_GPIO_Init+0x30c>)
 8001fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc2:	4b5d      	ldr	r3, [pc, #372]	; (8002138 <HAL_GPIO_Init+0x30c>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fce:	4a5b      	ldr	r2, [pc, #364]	; (800213c <HAL_GPIO_Init+0x310>)
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a52      	ldr	r2, [pc, #328]	; (8002140 <HAL_GPIO_Init+0x314>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d02b      	beq.n	8002052 <HAL_GPIO_Init+0x226>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a51      	ldr	r2, [pc, #324]	; (8002144 <HAL_GPIO_Init+0x318>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d025      	beq.n	800204e <HAL_GPIO_Init+0x222>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a50      	ldr	r2, [pc, #320]	; (8002148 <HAL_GPIO_Init+0x31c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01f      	beq.n	800204a <HAL_GPIO_Init+0x21e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4f      	ldr	r2, [pc, #316]	; (800214c <HAL_GPIO_Init+0x320>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d019      	beq.n	8002046 <HAL_GPIO_Init+0x21a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4e      	ldr	r2, [pc, #312]	; (8002150 <HAL_GPIO_Init+0x324>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d013      	beq.n	8002042 <HAL_GPIO_Init+0x216>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4d      	ldr	r2, [pc, #308]	; (8002154 <HAL_GPIO_Init+0x328>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00d      	beq.n	800203e <HAL_GPIO_Init+0x212>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4c      	ldr	r2, [pc, #304]	; (8002158 <HAL_GPIO_Init+0x32c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d007      	beq.n	800203a <HAL_GPIO_Init+0x20e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4b      	ldr	r2, [pc, #300]	; (800215c <HAL_GPIO_Init+0x330>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d101      	bne.n	8002036 <HAL_GPIO_Init+0x20a>
 8002032:	2307      	movs	r3, #7
 8002034:	e00e      	b.n	8002054 <HAL_GPIO_Init+0x228>
 8002036:	2308      	movs	r3, #8
 8002038:	e00c      	b.n	8002054 <HAL_GPIO_Init+0x228>
 800203a:	2306      	movs	r3, #6
 800203c:	e00a      	b.n	8002054 <HAL_GPIO_Init+0x228>
 800203e:	2305      	movs	r3, #5
 8002040:	e008      	b.n	8002054 <HAL_GPIO_Init+0x228>
 8002042:	2304      	movs	r3, #4
 8002044:	e006      	b.n	8002054 <HAL_GPIO_Init+0x228>
 8002046:	2303      	movs	r3, #3
 8002048:	e004      	b.n	8002054 <HAL_GPIO_Init+0x228>
 800204a:	2302      	movs	r3, #2
 800204c:	e002      	b.n	8002054 <HAL_GPIO_Init+0x228>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_GPIO_Init+0x228>
 8002052:	2300      	movs	r3, #0
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	f002 0203 	and.w	r2, r2, #3
 800205a:	0092      	lsls	r2, r2, #2
 800205c:	4093      	lsls	r3, r2
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002064:	4935      	ldr	r1, [pc, #212]	; (800213c <HAL_GPIO_Init+0x310>)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	089b      	lsrs	r3, r3, #2
 800206a:	3302      	adds	r3, #2
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002072:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <HAL_GPIO_Init+0x334>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002096:	4a32      	ldr	r2, [pc, #200]	; (8002160 <HAL_GPIO_Init+0x334>)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800209c:	4b30      	ldr	r3, [pc, #192]	; (8002160 <HAL_GPIO_Init+0x334>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020c0:	4a27      	ldr	r2, [pc, #156]	; (8002160 <HAL_GPIO_Init+0x334>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020c6:	4b26      	ldr	r3, [pc, #152]	; (8002160 <HAL_GPIO_Init+0x334>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ea:	4a1d      	ldr	r2, [pc, #116]	; (8002160 <HAL_GPIO_Init+0x334>)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020f0:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <HAL_GPIO_Init+0x334>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002114:	4a12      	ldr	r2, [pc, #72]	; (8002160 <HAL_GPIO_Init+0x334>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3301      	adds	r3, #1
 800211e:	61fb      	str	r3, [r7, #28]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	2b0f      	cmp	r3, #15
 8002124:	f67f ae90 	bls.w	8001e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	3724      	adds	r7, #36	; 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800
 800213c:	40013800 	.word	0x40013800
 8002140:	40020000 	.word	0x40020000
 8002144:	40020400 	.word	0x40020400
 8002148:	40020800 	.word	0x40020800
 800214c:	40020c00 	.word	0x40020c00
 8002150:	40021000 	.word	0x40021000
 8002154:	40021400 	.word	0x40021400
 8002158:	40021800 	.word	0x40021800
 800215c:	40021c00 	.word	0x40021c00
 8002160:	40013c00 	.word	0x40013c00

08002164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
 8002170:	4613      	mov	r3, r2
 8002172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002174:	787b      	ldrb	r3, [r7, #1]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002180:	e003      	b.n	800218a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002182:	887b      	ldrh	r3, [r7, #2]
 8002184:	041a      	lsls	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	619a      	str	r2, [r3, #24]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e12b      	b.n	8002402 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe fb8e 	bl	80008e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2224      	movs	r2, #36	; 0x24
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0201 	bic.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021fc:	f000 fd40 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 8002200:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	4a81      	ldr	r2, [pc, #516]	; (800240c <HAL_I2C_Init+0x274>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d807      	bhi.n	800221c <HAL_I2C_Init+0x84>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4a80      	ldr	r2, [pc, #512]	; (8002410 <HAL_I2C_Init+0x278>)
 8002210:	4293      	cmp	r3, r2
 8002212:	bf94      	ite	ls
 8002214:	2301      	movls	r3, #1
 8002216:	2300      	movhi	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	e006      	b.n	800222a <HAL_I2C_Init+0x92>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4a7d      	ldr	r2, [pc, #500]	; (8002414 <HAL_I2C_Init+0x27c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	bf94      	ite	ls
 8002224:	2301      	movls	r3, #1
 8002226:	2300      	movhi	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e0e7      	b.n	8002402 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4a78      	ldr	r2, [pc, #480]	; (8002418 <HAL_I2C_Init+0x280>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	0c9b      	lsrs	r3, r3, #18
 800223c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	430a      	orrs	r2, r1
 8002250:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a6a      	ldr	r2, [pc, #424]	; (800240c <HAL_I2C_Init+0x274>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d802      	bhi.n	800226c <HAL_I2C_Init+0xd4>
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	3301      	adds	r3, #1
 800226a:	e009      	b.n	8002280 <HAL_I2C_Init+0xe8>
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	4a69      	ldr	r2, [pc, #420]	; (800241c <HAL_I2C_Init+0x284>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	099b      	lsrs	r3, r3, #6
 800227e:	3301      	adds	r3, #1
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	430b      	orrs	r3, r1
 8002286:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002292:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	495c      	ldr	r1, [pc, #368]	; (800240c <HAL_I2C_Init+0x274>)
 800229c:	428b      	cmp	r3, r1
 800229e:	d819      	bhi.n	80022d4 <HAL_I2C_Init+0x13c>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	1e59      	subs	r1, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ae:	1c59      	adds	r1, r3, #1
 80022b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022b4:	400b      	ands	r3, r1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_I2C_Init+0x138>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1e59      	subs	r1, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022c8:	3301      	adds	r3, #1
 80022ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ce:	e051      	b.n	8002374 <HAL_I2C_Init+0x1dc>
 80022d0:	2304      	movs	r3, #4
 80022d2:	e04f      	b.n	8002374 <HAL_I2C_Init+0x1dc>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d111      	bne.n	8002300 <HAL_I2C_Init+0x168>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1e58      	subs	r0, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6859      	ldr	r1, [r3, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	440b      	add	r3, r1
 80022ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ee:	3301      	adds	r3, #1
 80022f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	bf0c      	ite	eq
 80022f8:	2301      	moveq	r3, #1
 80022fa:	2300      	movne	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	e012      	b.n	8002326 <HAL_I2C_Init+0x18e>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1e58      	subs	r0, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	0099      	lsls	r1, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	fbb0 f3f3 	udiv	r3, r0, r3
 8002316:	3301      	adds	r3, #1
 8002318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800231c:	2b00      	cmp	r3, #0
 800231e:	bf0c      	ite	eq
 8002320:	2301      	moveq	r3, #1
 8002322:	2300      	movne	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_I2C_Init+0x196>
 800232a:	2301      	movs	r3, #1
 800232c:	e022      	b.n	8002374 <HAL_I2C_Init+0x1dc>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10e      	bne.n	8002354 <HAL_I2C_Init+0x1bc>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1e58      	subs	r0, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6859      	ldr	r1, [r3, #4]
 800233e:	460b      	mov	r3, r1
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	440b      	add	r3, r1
 8002344:	fbb0 f3f3 	udiv	r3, r0, r3
 8002348:	3301      	adds	r3, #1
 800234a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800234e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002352:	e00f      	b.n	8002374 <HAL_I2C_Init+0x1dc>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1e58      	subs	r0, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6859      	ldr	r1, [r3, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	0099      	lsls	r1, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	fbb0 f3f3 	udiv	r3, r0, r3
 800236a:	3301      	adds	r3, #1
 800236c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002370:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	6809      	ldr	r1, [r1, #0]
 8002378:	4313      	orrs	r3, r2
 800237a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69da      	ldr	r2, [r3, #28]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6911      	ldr	r1, [r2, #16]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68d2      	ldr	r2, [r2, #12]
 80023ae:	4311      	orrs	r1, r2
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	430b      	orrs	r3, r1
 80023b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	000186a0 	.word	0x000186a0
 8002410:	001e847f 	.word	0x001e847f
 8002414:	003d08ff 	.word	0x003d08ff
 8002418:	431bde83 	.word	0x431bde83
 800241c:	10624dd3 	.word	0x10624dd3

08002420 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e267      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d075      	beq.n	800252a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800243e:	4b88      	ldr	r3, [pc, #544]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b04      	cmp	r3, #4
 8002448:	d00c      	beq.n	8002464 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800244a:	4b85      	ldr	r3, [pc, #532]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002452:	2b08      	cmp	r3, #8
 8002454:	d112      	bne.n	800247c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002456:	4b82      	ldr	r3, [pc, #520]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002462:	d10b      	bne.n	800247c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	4b7e      	ldr	r3, [pc, #504]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d05b      	beq.n	8002528 <HAL_RCC_OscConfig+0x108>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d157      	bne.n	8002528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e242      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002484:	d106      	bne.n	8002494 <HAL_RCC_OscConfig+0x74>
 8002486:	4b76      	ldr	r3, [pc, #472]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a75      	ldr	r2, [pc, #468]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 800248c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e01d      	b.n	80024d0 <HAL_RCC_OscConfig+0xb0>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x98>
 800249e:	4b70      	ldr	r3, [pc, #448]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a6f      	ldr	r2, [pc, #444]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80024a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a6c      	ldr	r2, [pc, #432]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e00b      	b.n	80024d0 <HAL_RCC_OscConfig+0xb0>
 80024b8:	4b69      	ldr	r3, [pc, #420]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a68      	ldr	r2, [pc, #416]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80024be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	4b66      	ldr	r3, [pc, #408]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a65      	ldr	r2, [pc, #404]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80024ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d013      	beq.n	8002500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7ff f81a 	bl	8001510 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e0:	f7ff f816 	bl	8001510 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e207      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	4b5b      	ldr	r3, [pc, #364]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0xc0>
 80024fe:	e014      	b.n	800252a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7ff f806 	bl	8001510 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002508:	f7ff f802 	bl	8001510 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e1f3      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	4b51      	ldr	r3, [pc, #324]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0xe8>
 8002526:	e000      	b.n	800252a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d063      	beq.n	80025fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002536:	4b4a      	ldr	r3, [pc, #296]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00b      	beq.n	800255a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002542:	4b47      	ldr	r3, [pc, #284]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800254a:	2b08      	cmp	r3, #8
 800254c:	d11c      	bne.n	8002588 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254e:	4b44      	ldr	r3, [pc, #272]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d116      	bne.n	8002588 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255a:	4b41      	ldr	r3, [pc, #260]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <HAL_RCC_OscConfig+0x152>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d001      	beq.n	8002572 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e1c7      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002572:	4b3b      	ldr	r3, [pc, #236]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4937      	ldr	r1, [pc, #220]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002586:	e03a      	b.n	80025fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d020      	beq.n	80025d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002590:	4b34      	ldr	r3, [pc, #208]	; (8002664 <HAL_RCC_OscConfig+0x244>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002596:	f7fe ffbb 	bl	8001510 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800259e:	f7fe ffb7 	bl	8001510 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e1a8      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	4b2b      	ldr	r3, [pc, #172]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	4b28      	ldr	r3, [pc, #160]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4925      	ldr	r1, [pc, #148]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
 80025d0:	e015      	b.n	80025fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d2:	4b24      	ldr	r3, [pc, #144]	; (8002664 <HAL_RCC_OscConfig+0x244>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe ff9a 	bl	8001510 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e0:	f7fe ff96 	bl	8001510 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e187      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d036      	beq.n	8002678 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d016      	beq.n	8002640 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002612:	4b15      	ldr	r3, [pc, #84]	; (8002668 <HAL_RCC_OscConfig+0x248>)
 8002614:	2201      	movs	r2, #1
 8002616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7fe ff7a 	bl	8001510 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002620:	f7fe ff76 	bl	8001510 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e167      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 8002634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x200>
 800263e:	e01b      	b.n	8002678 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_RCC_OscConfig+0x248>)
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002646:	f7fe ff63 	bl	8001510 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	e00e      	b.n	800266c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800264e:	f7fe ff5f 	bl	8001510 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d907      	bls.n	800266c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e150      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
 8002660:	40023800 	.word	0x40023800
 8002664:	42470000 	.word	0x42470000
 8002668:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266c:	4b88      	ldr	r3, [pc, #544]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 800266e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1ea      	bne.n	800264e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8097 	beq.w	80027b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268a:	4b81      	ldr	r3, [pc, #516]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10f      	bne.n	80026b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	4b7d      	ldr	r3, [pc, #500]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4a7c      	ldr	r2, [pc, #496]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 80026a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a4:	6413      	str	r3, [r2, #64]	; 0x40
 80026a6:	4b7a      	ldr	r3, [pc, #488]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b2:	2301      	movs	r3, #1
 80026b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b6:	4b77      	ldr	r3, [pc, #476]	; (8002894 <HAL_RCC_OscConfig+0x474>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d118      	bne.n	80026f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c2:	4b74      	ldr	r3, [pc, #464]	; (8002894 <HAL_RCC_OscConfig+0x474>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a73      	ldr	r2, [pc, #460]	; (8002894 <HAL_RCC_OscConfig+0x474>)
 80026c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ce:	f7fe ff1f 	bl	8001510 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d6:	f7fe ff1b 	bl	8001510 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e10c      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e8:	4b6a      	ldr	r3, [pc, #424]	; (8002894 <HAL_RCC_OscConfig+0x474>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d106      	bne.n	800270a <HAL_RCC_OscConfig+0x2ea>
 80026fc:	4b64      	ldr	r3, [pc, #400]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002700:	4a63      	ldr	r2, [pc, #396]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6713      	str	r3, [r2, #112]	; 0x70
 8002708:	e01c      	b.n	8002744 <HAL_RCC_OscConfig+0x324>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b05      	cmp	r3, #5
 8002710:	d10c      	bne.n	800272c <HAL_RCC_OscConfig+0x30c>
 8002712:	4b5f      	ldr	r3, [pc, #380]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002716:	4a5e      	ldr	r2, [pc, #376]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 8002718:	f043 0304 	orr.w	r3, r3, #4
 800271c:	6713      	str	r3, [r2, #112]	; 0x70
 800271e:	4b5c      	ldr	r3, [pc, #368]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002722:	4a5b      	ldr	r2, [pc, #364]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6713      	str	r3, [r2, #112]	; 0x70
 800272a:	e00b      	b.n	8002744 <HAL_RCC_OscConfig+0x324>
 800272c:	4b58      	ldr	r3, [pc, #352]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	4a57      	ldr	r2, [pc, #348]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 8002732:	f023 0301 	bic.w	r3, r3, #1
 8002736:	6713      	str	r3, [r2, #112]	; 0x70
 8002738:	4b55      	ldr	r3, [pc, #340]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	4a54      	ldr	r2, [pc, #336]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 800273e:	f023 0304 	bic.w	r3, r3, #4
 8002742:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d015      	beq.n	8002778 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274c:	f7fe fee0 	bl	8001510 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002752:	e00a      	b.n	800276a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002754:	f7fe fedc 	bl	8001510 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e0cb      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276a:	4b49      	ldr	r3, [pc, #292]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0ee      	beq.n	8002754 <HAL_RCC_OscConfig+0x334>
 8002776:	e014      	b.n	80027a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002778:	f7fe feca 	bl	8001510 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277e:	e00a      	b.n	8002796 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002780:	f7fe fec6 	bl	8001510 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	; 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e0b5      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002796:	4b3e      	ldr	r3, [pc, #248]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1ee      	bne.n	8002780 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027a2:	7dfb      	ldrb	r3, [r7, #23]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d105      	bne.n	80027b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a8:	4b39      	ldr	r3, [pc, #228]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	4a38      	ldr	r2, [pc, #224]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 80027ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80a1 	beq.w	8002900 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027be:	4b34      	ldr	r3, [pc, #208]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d05c      	beq.n	8002884 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d141      	bne.n	8002856 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d2:	4b31      	ldr	r3, [pc, #196]	; (8002898 <HAL_RCC_OscConfig+0x478>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7fe fe9a 	bl	8001510 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fe fe96 	bl	8001510 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e087      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	4b27      	ldr	r3, [pc, #156]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	019b      	lsls	r3, r3, #6
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	085b      	lsrs	r3, r3, #1
 8002816:	3b01      	subs	r3, #1
 8002818:	041b      	lsls	r3, r3, #16
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	491b      	ldr	r1, [pc, #108]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002828:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <HAL_RCC_OscConfig+0x478>)
 800282a:	2201      	movs	r2, #1
 800282c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282e:	f7fe fe6f 	bl	8001510 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002836:	f7fe fe6b 	bl	8001510 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e05c      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x416>
 8002854:	e054      	b.n	8002900 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <HAL_RCC_OscConfig+0x478>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7fe fe58 	bl	8001510 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002864:	f7fe fe54 	bl	8001510 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e045      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x444>
 8002882:	e03d      	b.n	8002900 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d107      	bne.n	800289c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e038      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
 8002890:	40023800 	.word	0x40023800
 8002894:	40007000 	.word	0x40007000
 8002898:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <HAL_RCC_OscConfig+0x4ec>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d028      	beq.n	80028fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d121      	bne.n	80028fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d11a      	bne.n	80028fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028cc:	4013      	ands	r3, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d111      	bne.n	80028fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	085b      	lsrs	r3, r3, #1
 80028e4:	3b01      	subs	r3, #1
 80028e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d107      	bne.n	80028fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800

08002910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0cc      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002924:	4b68      	ldr	r3, [pc, #416]	; (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d90c      	bls.n	800294c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002932:	4b65      	ldr	r3, [pc, #404]	; (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800293a:	4b63      	ldr	r3, [pc, #396]	; (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d001      	beq.n	800294c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0b8      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d020      	beq.n	800299a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002964:	4b59      	ldr	r3, [pc, #356]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4a58      	ldr	r2, [pc, #352]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800296e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800297c:	4b53      	ldr	r3, [pc, #332]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	4a52      	ldr	r2, [pc, #328]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002988:	4b50      	ldr	r3, [pc, #320]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	494d      	ldr	r1, [pc, #308]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	4313      	orrs	r3, r2
 8002998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d044      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d107      	bne.n	80029be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ae:	4b47      	ldr	r3, [pc, #284]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d119      	bne.n	80029ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e07f      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d003      	beq.n	80029ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ce:	4b3f      	ldr	r3, [pc, #252]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e06f      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029de:	4b3b      	ldr	r3, [pc, #236]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e067      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ee:	4b37      	ldr	r3, [pc, #220]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f023 0203 	bic.w	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4934      	ldr	r1, [pc, #208]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a00:	f7fe fd86 	bl	8001510 <HAL_GetTick>
 8002a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a08:	f7fe fd82 	bl	8001510 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e04f      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1e:	4b2b      	ldr	r3, [pc, #172]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 020c 	and.w	r2, r3, #12
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d1eb      	bne.n	8002a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a30:	4b25      	ldr	r3, [pc, #148]	; (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d20c      	bcs.n	8002a58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b22      	ldr	r3, [pc, #136]	; (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a46:	4b20      	ldr	r3, [pc, #128]	; (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d001      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e032      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4916      	ldr	r1, [pc, #88]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d009      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a82:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	490e      	ldr	r1, [pc, #56]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a96:	f000 f821 	bl	8002adc <HAL_RCC_GetSysClockFreq>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	490a      	ldr	r1, [pc, #40]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa8:	5ccb      	ldrb	r3, [r1, r3]
 8002aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002aae:	4a09      	ldr	r2, [pc, #36]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe f88e 	bl	8000bd8 <HAL_InitTick>

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023c00 	.word	0x40023c00
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	080055f4 	.word	0x080055f4
 8002ad4:	20000000 	.word	0x20000000
 8002ad8:	20000004 	.word	0x20000004

08002adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae0:	b090      	sub	sp, #64	; 0x40
 8002ae2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ae8:	2300      	movs	r3, #0
 8002aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aec:	2300      	movs	r3, #0
 8002aee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002af4:	4b59      	ldr	r3, [pc, #356]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 030c 	and.w	r3, r3, #12
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d00d      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0x40>
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	f200 80a1 	bhi.w	8002c48 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x34>
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d003      	beq.n	8002b16 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b0e:	e09b      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b10:	4b53      	ldr	r3, [pc, #332]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b12:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b14:	e09b      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b16:	4b53      	ldr	r3, [pc, #332]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b1a:	e098      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b1c:	4b4f      	ldr	r3, [pc, #316]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b24:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b26:	4b4d      	ldr	r3, [pc, #308]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d028      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b32:	4b4a      	ldr	r3, [pc, #296]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	099b      	lsrs	r3, r3, #6
 8002b38:	2200      	movs	r2, #0
 8002b3a:	623b      	str	r3, [r7, #32]
 8002b3c:	627a      	str	r2, [r7, #36]	; 0x24
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b44:	2100      	movs	r1, #0
 8002b46:	4b47      	ldr	r3, [pc, #284]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b48:	fb03 f201 	mul.w	r2, r3, r1
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	fb00 f303 	mul.w	r3, r0, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	4a43      	ldr	r2, [pc, #268]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b56:	fba0 1202 	umull	r1, r2, r0, r2
 8002b5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b5c:	460a      	mov	r2, r1
 8002b5e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b62:	4413      	add	r3, r2
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b68:	2200      	movs	r2, #0
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	61fa      	str	r2, [r7, #28]
 8002b6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b76:	f7fd fb2b 	bl	80001d0 <__aeabi_uldivmod>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4613      	mov	r3, r2
 8002b80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b82:	e053      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b84:	4b35      	ldr	r3, [pc, #212]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	099b      	lsrs	r3, r3, #6
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	617a      	str	r2, [r7, #20]
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b96:	f04f 0b00 	mov.w	fp, #0
 8002b9a:	4652      	mov	r2, sl
 8002b9c:	465b      	mov	r3, fp
 8002b9e:	f04f 0000 	mov.w	r0, #0
 8002ba2:	f04f 0100 	mov.w	r1, #0
 8002ba6:	0159      	lsls	r1, r3, #5
 8002ba8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bac:	0150      	lsls	r0, r2, #5
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	ebb2 080a 	subs.w	r8, r2, sl
 8002bb6:	eb63 090b 	sbc.w	r9, r3, fp
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bc6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bce:	ebb2 0408 	subs.w	r4, r2, r8
 8002bd2:	eb63 0509 	sbc.w	r5, r3, r9
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	00eb      	lsls	r3, r5, #3
 8002be0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002be4:	00e2      	lsls	r2, r4, #3
 8002be6:	4614      	mov	r4, r2
 8002be8:	461d      	mov	r5, r3
 8002bea:	eb14 030a 	adds.w	r3, r4, sl
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	eb45 030b 	adc.w	r3, r5, fp
 8002bf4:	607b      	str	r3, [r7, #4]
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c02:	4629      	mov	r1, r5
 8002c04:	028b      	lsls	r3, r1, #10
 8002c06:	4621      	mov	r1, r4
 8002c08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	028a      	lsls	r2, r1, #10
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c16:	2200      	movs	r2, #0
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	60fa      	str	r2, [r7, #12]
 8002c1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c20:	f7fd fad6 	bl	80001d0 <__aeabi_uldivmod>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4613      	mov	r3, r2
 8002c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	0c1b      	lsrs	r3, r3, #16
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	3301      	adds	r3, #1
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c46:	e002      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c4a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3740      	adds	r7, #64	; 0x40
 8002c54:	46bd      	mov	sp, r7
 8002c56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	00f42400 	.word	0x00f42400
 8002c64:	016e3600 	.word	0x016e3600

08002c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c6c:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	20000000 	.word	0x20000000

08002c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c84:	f7ff fff0 	bl	8002c68 <HAL_RCC_GetHCLKFreq>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	0a9b      	lsrs	r3, r3, #10
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	4903      	ldr	r1, [pc, #12]	; (8002ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c96:	5ccb      	ldrb	r3, [r1, r3]
 8002c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	08005604 	.word	0x08005604

08002ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cac:	f7ff ffdc 	bl	8002c68 <HAL_RCC_GetHCLKFreq>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	0b5b      	lsrs	r3, r3, #13
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	4903      	ldr	r1, [pc, #12]	; (8002ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cbe:	5ccb      	ldrb	r3, [r1, r3]
 8002cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	08005604 	.word	0x08005604

08002cd0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	220f      	movs	r2, #15
 8002cde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ce0:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <HAL_RCC_GetClockConfig+0x5c>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0203 	and.w	r2, r3, #3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <HAL_RCC_GetClockConfig+0x5c>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <HAL_RCC_GetClockConfig+0x5c>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RCC_GetClockConfig+0x5c>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	08db      	lsrs	r3, r3, #3
 8002d0a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d12:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <HAL_RCC_GetClockConfig+0x60>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0207 	and.w	r2, r3, #7
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	601a      	str	r2, [r3, #0]
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40023c00 	.word	0x40023c00

08002d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e041      	b.n	8002dca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fe f870 	bl	8000e40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	4619      	mov	r1, r3
 8002d72:	4610      	mov	r0, r2
 8002d74:	f000 f9ce 	bl	8003114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d001      	beq.n	8002dec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e04e      	b.n	8002e8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a23      	ldr	r2, [pc, #140]	; (8002e98 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d022      	beq.n	8002e54 <HAL_TIM_Base_Start_IT+0x80>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e16:	d01d      	beq.n	8002e54 <HAL_TIM_Base_Start_IT+0x80>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a1f      	ldr	r2, [pc, #124]	; (8002e9c <HAL_TIM_Base_Start_IT+0xc8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d018      	beq.n	8002e54 <HAL_TIM_Base_Start_IT+0x80>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1e      	ldr	r2, [pc, #120]	; (8002ea0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d013      	beq.n	8002e54 <HAL_TIM_Base_Start_IT+0x80>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1c      	ldr	r2, [pc, #112]	; (8002ea4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00e      	beq.n	8002e54 <HAL_TIM_Base_Start_IT+0x80>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1b      	ldr	r2, [pc, #108]	; (8002ea8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d009      	beq.n	8002e54 <HAL_TIM_Base_Start_IT+0x80>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a19      	ldr	r2, [pc, #100]	; (8002eac <HAL_TIM_Base_Start_IT+0xd8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d004      	beq.n	8002e54 <HAL_TIM_Base_Start_IT+0x80>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a18      	ldr	r2, [pc, #96]	; (8002eb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d111      	bne.n	8002e78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b06      	cmp	r3, #6
 8002e64:	d010      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0201 	orr.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e76:	e007      	b.n	8002e88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40010000 	.word	0x40010000
 8002e9c:	40000400 	.word	0x40000400
 8002ea0:	40000800 	.word	0x40000800
 8002ea4:	40000c00 	.word	0x40000c00
 8002ea8:	40010400 	.word	0x40010400
 8002eac:	40014000 	.word	0x40014000
 8002eb0:	40001800 	.word	0x40001800

08002eb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d122      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d11b      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0202 	mvn.w	r2, #2
 8002ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f8ee 	bl	80030d8 <HAL_TIM_IC_CaptureCallback>
 8002efc:	e005      	b.n	8002f0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f8e0 	bl	80030c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f8f1 	bl	80030ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d122      	bne.n	8002f64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d11b      	bne.n	8002f64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0204 	mvn.w	r2, #4
 8002f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f8c4 	bl	80030d8 <HAL_TIM_IC_CaptureCallback>
 8002f50:	e005      	b.n	8002f5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f8b6 	bl	80030c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f8c7 	bl	80030ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d122      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d11b      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0208 	mvn.w	r2, #8
 8002f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2204      	movs	r2, #4
 8002f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f89a 	bl	80030d8 <HAL_TIM_IC_CaptureCallback>
 8002fa4:	e005      	b.n	8002fb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f88c 	bl	80030c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f89d 	bl	80030ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b10      	cmp	r3, #16
 8002fc4:	d122      	bne.n	800300c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b10      	cmp	r3, #16
 8002fd2:	d11b      	bne.n	800300c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0210 	mvn.w	r2, #16
 8002fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f870 	bl	80030d8 <HAL_TIM_IC_CaptureCallback>
 8002ff8:	e005      	b.n	8003006 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f862 	bl	80030c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f873 	bl	80030ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b01      	cmp	r3, #1
 8003018:	d10e      	bne.n	8003038 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d107      	bne.n	8003038 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f06f 0201 	mvn.w	r2, #1
 8003030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd fd8c 	bl	8000b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003042:	2b80      	cmp	r3, #128	; 0x80
 8003044:	d10e      	bne.n	8003064 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003050:	2b80      	cmp	r3, #128	; 0x80
 8003052:	d107      	bne.n	8003064 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800305c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f97e 	bl	8003360 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306e:	2b40      	cmp	r3, #64	; 0x40
 8003070:	d10e      	bne.n	8003090 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307c:	2b40      	cmp	r3, #64	; 0x40
 800307e:	d107      	bne.n	8003090 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f838 	bl	8003100 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b20      	cmp	r3, #32
 800309c:	d10e      	bne.n	80030bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0320 	and.w	r3, r3, #32
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d107      	bne.n	80030bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0220 	mvn.w	r2, #32
 80030b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f948 	bl	800334c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a40      	ldr	r2, [pc, #256]	; (8003228 <TIM_Base_SetConfig+0x114>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d013      	beq.n	8003154 <TIM_Base_SetConfig+0x40>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003132:	d00f      	beq.n	8003154 <TIM_Base_SetConfig+0x40>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a3d      	ldr	r2, [pc, #244]	; (800322c <TIM_Base_SetConfig+0x118>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d00b      	beq.n	8003154 <TIM_Base_SetConfig+0x40>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a3c      	ldr	r2, [pc, #240]	; (8003230 <TIM_Base_SetConfig+0x11c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d007      	beq.n	8003154 <TIM_Base_SetConfig+0x40>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a3b      	ldr	r2, [pc, #236]	; (8003234 <TIM_Base_SetConfig+0x120>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d003      	beq.n	8003154 <TIM_Base_SetConfig+0x40>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a3a      	ldr	r2, [pc, #232]	; (8003238 <TIM_Base_SetConfig+0x124>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d108      	bne.n	8003166 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a2f      	ldr	r2, [pc, #188]	; (8003228 <TIM_Base_SetConfig+0x114>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d02b      	beq.n	80031c6 <TIM_Base_SetConfig+0xb2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003174:	d027      	beq.n	80031c6 <TIM_Base_SetConfig+0xb2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a2c      	ldr	r2, [pc, #176]	; (800322c <TIM_Base_SetConfig+0x118>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d023      	beq.n	80031c6 <TIM_Base_SetConfig+0xb2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a2b      	ldr	r2, [pc, #172]	; (8003230 <TIM_Base_SetConfig+0x11c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d01f      	beq.n	80031c6 <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a2a      	ldr	r2, [pc, #168]	; (8003234 <TIM_Base_SetConfig+0x120>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d01b      	beq.n	80031c6 <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a29      	ldr	r2, [pc, #164]	; (8003238 <TIM_Base_SetConfig+0x124>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d017      	beq.n	80031c6 <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a28      	ldr	r2, [pc, #160]	; (800323c <TIM_Base_SetConfig+0x128>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d013      	beq.n	80031c6 <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a27      	ldr	r2, [pc, #156]	; (8003240 <TIM_Base_SetConfig+0x12c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00f      	beq.n	80031c6 <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a26      	ldr	r2, [pc, #152]	; (8003244 <TIM_Base_SetConfig+0x130>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00b      	beq.n	80031c6 <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a25      	ldr	r2, [pc, #148]	; (8003248 <TIM_Base_SetConfig+0x134>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d007      	beq.n	80031c6 <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a24      	ldr	r2, [pc, #144]	; (800324c <TIM_Base_SetConfig+0x138>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d003      	beq.n	80031c6 <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a23      	ldr	r2, [pc, #140]	; (8003250 <TIM_Base_SetConfig+0x13c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d108      	bne.n	80031d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <TIM_Base_SetConfig+0x114>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d003      	beq.n	800320c <TIM_Base_SetConfig+0xf8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a0c      	ldr	r2, [pc, #48]	; (8003238 <TIM_Base_SetConfig+0x124>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d103      	bne.n	8003214 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	615a      	str	r2, [r3, #20]
}
 800321a:	bf00      	nop
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40010000 	.word	0x40010000
 800322c:	40000400 	.word	0x40000400
 8003230:	40000800 	.word	0x40000800
 8003234:	40000c00 	.word	0x40000c00
 8003238:	40010400 	.word	0x40010400
 800323c:	40014000 	.word	0x40014000
 8003240:	40014400 	.word	0x40014400
 8003244:	40014800 	.word	0x40014800
 8003248:	40001800 	.word	0x40001800
 800324c:	40001c00 	.word	0x40001c00
 8003250:	40002000 	.word	0x40002000

08003254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003268:	2302      	movs	r3, #2
 800326a:	e05a      	b.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a21      	ldr	r2, [pc, #132]	; (8003330 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d022      	beq.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b8:	d01d      	beq.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d018      	beq.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a1b      	ldr	r2, [pc, #108]	; (8003338 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d013      	beq.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a1a      	ldr	r2, [pc, #104]	; (800333c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d00e      	beq.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a18      	ldr	r2, [pc, #96]	; (8003340 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d009      	beq.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a17      	ldr	r2, [pc, #92]	; (8003344 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d004      	beq.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a15      	ldr	r2, [pc, #84]	; (8003348 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d10c      	bne.n	8003310 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	4313      	orrs	r3, r2
 8003306:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40010000 	.word	0x40010000
 8003334:	40000400 	.word	0x40000400
 8003338:	40000800 	.word	0x40000800
 800333c:	40000c00 	.word	0x40000c00
 8003340:	40010400 	.word	0x40010400
 8003344:	40014000 	.word	0x40014000
 8003348:	40001800 	.word	0x40001800

0800334c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e03f      	b.n	8003406 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fd fe1a 	bl	8000fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2224      	movs	r2, #36	; 0x24
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 fdd5 	bl	8003f68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695a      	ldr	r2, [r3, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b08a      	sub	sp, #40	; 0x28
 8003412:	af02      	add	r7, sp, #8
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	603b      	str	r3, [r7, #0]
 800341a:	4613      	mov	r3, r2
 800341c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b20      	cmp	r3, #32
 800342c:	d17c      	bne.n	8003528 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <HAL_UART_Transmit+0x2c>
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e075      	b.n	800352a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_UART_Transmit+0x3e>
 8003448:	2302      	movs	r3, #2
 800344a:	e06e      	b.n	800352a <HAL_UART_Transmit+0x11c>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2221      	movs	r2, #33	; 0x21
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003462:	f7fe f855 	bl	8001510 <HAL_GetTick>
 8003466:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	88fa      	ldrh	r2, [r7, #6]
 800346c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	88fa      	ldrh	r2, [r7, #6]
 8003472:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800347c:	d108      	bne.n	8003490 <HAL_UART_Transmit+0x82>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d104      	bne.n	8003490 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	e003      	b.n	8003498 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003494:	2300      	movs	r3, #0
 8003496:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034a0:	e02a      	b.n	80034f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2200      	movs	r2, #0
 80034aa:	2180      	movs	r1, #128	; 0x80
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 fb15 	bl	8003adc <UART_WaitOnFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e036      	b.n	800352a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10b      	bne.n	80034da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	3302      	adds	r3, #2
 80034d6:	61bb      	str	r3, [r7, #24]
 80034d8:	e007      	b.n	80034ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	781a      	ldrb	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	3301      	adds	r3, #1
 80034e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1cf      	bne.n	80034a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2200      	movs	r2, #0
 800350a:	2140      	movs	r1, #64	; 0x40
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 fae5 	bl	8003adc <UART_WaitOnFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e006      	b.n	800352a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003524:	2300      	movs	r3, #0
 8003526:	e000      	b.n	800352a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003528:	2302      	movs	r3, #2
  }
}
 800352a:	4618      	mov	r0, r3
 800352c:	3720      	adds	r7, #32
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	4613      	mov	r3, r2
 800353e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b20      	cmp	r3, #32
 800354a:	d11d      	bne.n	8003588 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <HAL_UART_Receive_IT+0x26>
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e016      	b.n	800358a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003562:	2b01      	cmp	r3, #1
 8003564:	d101      	bne.n	800356a <HAL_UART_Receive_IT+0x38>
 8003566:	2302      	movs	r3, #2
 8003568:	e00f      	b.n	800358a <HAL_UART_Receive_IT+0x58>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	461a      	mov	r2, r3
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 fb1a 	bl	8003bb8 <UART_Start_Receive_IT>
 8003584:	4603      	mov	r3, r0
 8003586:	e000      	b.n	800358a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003588:	2302      	movs	r3, #2
  }
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b0ba      	sub	sp, #232	; 0xe8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80035d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10f      	bne.n	80035fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_UART_IRQHandler+0x66>
 80035e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fbfd 	bl	8003df2 <UART_Receive_IT>
      return;
 80035f8:	e256      	b.n	8003aa8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 80de 	beq.w	80037c0 <HAL_UART_IRQHandler+0x22c>
 8003604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d106      	bne.n	800361e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003614:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80d1 	beq.w	80037c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800361e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00b      	beq.n	8003642 <HAL_UART_IRQHandler+0xae>
 800362a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800362e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f043 0201 	orr.w	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_UART_IRQHandler+0xd2>
 800364e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f043 0202 	orr.w	r2, r3, #2
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00b      	beq.n	800368a <HAL_UART_IRQHandler+0xf6>
 8003672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d005      	beq.n	800368a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f043 0204 	orr.w	r2, r3, #4
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800368a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d011      	beq.n	80036ba <HAL_UART_IRQHandler+0x126>
 8003696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d105      	bne.n	80036ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f043 0208 	orr.w	r2, r3, #8
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 81ed 	beq.w	8003a9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_UART_IRQHandler+0x14e>
 80036d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fb88 	bl	8003df2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ec:	2b40      	cmp	r3, #64	; 0x40
 80036ee:	bf0c      	ite	eq
 80036f0:	2301      	moveq	r3, #1
 80036f2:	2300      	movne	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d103      	bne.n	800370e <HAL_UART_IRQHandler+0x17a>
 8003706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800370a:	2b00      	cmp	r3, #0
 800370c:	d04f      	beq.n	80037ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fa90 	bl	8003c34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	d141      	bne.n	80037a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	3314      	adds	r3, #20
 8003728:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003738:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800373c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003740:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3314      	adds	r3, #20
 800374a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800374e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003752:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003756:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800375a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800375e:	e841 2300 	strex	r3, r2, [r1]
 8003762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003766:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1d9      	bne.n	8003722 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003772:	2b00      	cmp	r3, #0
 8003774:	d013      	beq.n	800379e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377a:	4a7d      	ldr	r2, [pc, #500]	; (8003970 <HAL_UART_IRQHandler+0x3dc>)
 800377c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe f8f4 	bl	8001970 <HAL_DMA_Abort_IT>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d016      	beq.n	80037bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003798:	4610      	mov	r0, r2
 800379a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800379c:	e00e      	b.n	80037bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f986 	bl	8003ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a4:	e00a      	b.n	80037bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f982 	bl	8003ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ac:	e006      	b.n	80037bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f97e 	bl	8003ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80037ba:	e170      	b.n	8003a9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037bc:	bf00      	nop
    return;
 80037be:	e16e      	b.n	8003a9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	f040 814a 	bne.w	8003a5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 8143 	beq.w	8003a5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 813c 	beq.w	8003a5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003806:	2b40      	cmp	r3, #64	; 0x40
 8003808:	f040 80b4 	bne.w	8003974 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003818:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 8140 	beq.w	8003aa2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800382a:	429a      	cmp	r2, r3
 800382c:	f080 8139 	bcs.w	8003aa2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003836:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003842:	f000 8088 	beq.w	8003956 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	330c      	adds	r3, #12
 800384c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003854:	e853 3f00 	ldrex	r3, [r3]
 8003858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800385c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	330c      	adds	r3, #12
 800386e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003872:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003876:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800387e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800388a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1d9      	bne.n	8003846 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3314      	adds	r3, #20
 8003898:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800389c:	e853 3f00 	ldrex	r3, [r3]
 80038a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038a4:	f023 0301 	bic.w	r3, r3, #1
 80038a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3314      	adds	r3, #20
 80038b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1e1      	bne.n	8003892 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3314      	adds	r3, #20
 80038d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038d8:	e853 3f00 	ldrex	r3, [r3]
 80038dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3314      	adds	r3, #20
 80038ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e3      	bne.n	80038ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	330c      	adds	r3, #12
 800391a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800391e:	e853 3f00 	ldrex	r3, [r3]
 8003922:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003926:	f023 0310 	bic.w	r3, r3, #16
 800392a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	330c      	adds	r3, #12
 8003934:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003938:	65ba      	str	r2, [r7, #88]	; 0x58
 800393a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800393e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003940:	e841 2300 	strex	r3, r2, [r1]
 8003944:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e3      	bne.n	8003914 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	4618      	mov	r0, r3
 8003952:	f7fd ff9d 	bl	8001890 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800395e:	b29b      	uxth	r3, r3
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	b29b      	uxth	r3, r3
 8003964:	4619      	mov	r1, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f8ac 	bl	8003ac4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800396c:	e099      	b.n	8003aa2 <HAL_UART_IRQHandler+0x50e>
 800396e:	bf00      	nop
 8003970:	08003cfb 	.word	0x08003cfb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800397c:	b29b      	uxth	r3, r3
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 808b 	beq.w	8003aa6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003990:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 8086 	beq.w	8003aa6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	330c      	adds	r3, #12
 80039a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a4:	e853 3f00 	ldrex	r3, [r3]
 80039a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	330c      	adds	r3, #12
 80039ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80039be:	647a      	str	r2, [r7, #68]	; 0x44
 80039c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039c6:	e841 2300 	strex	r3, r2, [r1]
 80039ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1e3      	bne.n	800399a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3314      	adds	r3, #20
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	e853 3f00 	ldrex	r3, [r3]
 80039e0:	623b      	str	r3, [r7, #32]
   return(result);
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	f023 0301 	bic.w	r3, r3, #1
 80039e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3314      	adds	r3, #20
 80039f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039f6:	633a      	str	r2, [r7, #48]	; 0x30
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039fe:	e841 2300 	strex	r3, r2, [r1]
 8003a02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1e3      	bne.n	80039d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0310 	bic.w	r3, r3, #16
 8003a2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	330c      	adds	r3, #12
 8003a38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a3c:	61fa      	str	r2, [r7, #28]
 8003a3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a40:	69b9      	ldr	r1, [r7, #24]
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	e841 2300 	strex	r3, r2, [r1]
 8003a48:	617b      	str	r3, [r7, #20]
   return(result);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e3      	bne.n	8003a18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a54:	4619      	mov	r1, r3
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f834 	bl	8003ac4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a5c:	e023      	b.n	8003aa6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d009      	beq.n	8003a7e <HAL_UART_IRQHandler+0x4ea>
 8003a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f953 	bl	8003d22 <UART_Transmit_IT>
    return;
 8003a7c:	e014      	b.n	8003aa8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00e      	beq.n	8003aa8 <HAL_UART_IRQHandler+0x514>
 8003a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f993 	bl	8003dc2 <UART_EndTransmit_IT>
    return;
 8003a9c:	e004      	b.n	8003aa8 <HAL_UART_IRQHandler+0x514>
    return;
 8003a9e:	bf00      	nop
 8003aa0:	e002      	b.n	8003aa8 <HAL_UART_IRQHandler+0x514>
      return;
 8003aa2:	bf00      	nop
 8003aa4:	e000      	b.n	8003aa8 <HAL_UART_IRQHandler+0x514>
      return;
 8003aa6:	bf00      	nop
  }
}
 8003aa8:	37e8      	adds	r7, #232	; 0xe8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop

08003ab0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b090      	sub	sp, #64	; 0x40
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aec:	e050      	b.n	8003b90 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af4:	d04c      	beq.n	8003b90 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <UART_WaitOnFlagUntilTimeout+0x30>
 8003afc:	f7fd fd08 	bl	8001510 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d241      	bcs.n	8003b90 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	330c      	adds	r3, #12
 8003b12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	e853 3f00 	ldrex	r3, [r3]
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	330c      	adds	r3, #12
 8003b2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b2c:	637a      	str	r2, [r7, #52]	; 0x34
 8003b2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b34:	e841 2300 	strex	r3, r2, [r1]
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1e5      	bne.n	8003b0c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3314      	adds	r3, #20
 8003b46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3314      	adds	r3, #20
 8003b5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b60:	623a      	str	r2, [r7, #32]
 8003b62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	69f9      	ldr	r1, [r7, #28]
 8003b66:	6a3a      	ldr	r2, [r7, #32]
 8003b68:	e841 2300 	strex	r3, r2, [r1]
 8003b6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e5      	bne.n	8003b40 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e00f      	b.n	8003bb0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	bf0c      	ite	eq
 8003ba0:	2301      	moveq	r3, #1
 8003ba2:	2300      	movne	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d09f      	beq.n	8003aee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3740      	adds	r7, #64	; 0x40
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	88fa      	ldrh	r2, [r7, #6]
 8003bd0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	88fa      	ldrh	r2, [r7, #6]
 8003bd6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2222      	movs	r2, #34	; 0x22
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d007      	beq.n	8003c06 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c04:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695a      	ldr	r2, [r3, #20]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 0201 	orr.w	r2, r2, #1
 8003c14:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0220 	orr.w	r2, r2, #32
 8003c24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b095      	sub	sp, #84	; 0x54
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	330c      	adds	r3, #12
 8003c42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c46:	e853 3f00 	ldrex	r3, [r3]
 8003c4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c5c:	643a      	str	r2, [r7, #64]	; 0x40
 8003c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c64:	e841 2300 	strex	r3, r2, [r1]
 8003c68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e5      	bne.n	8003c3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3314      	adds	r3, #20
 8003c76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	e853 3f00 	ldrex	r3, [r3]
 8003c7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f023 0301 	bic.w	r3, r3, #1
 8003c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3314      	adds	r3, #20
 8003c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c98:	e841 2300 	strex	r3, r2, [r1]
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e5      	bne.n	8003c70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d119      	bne.n	8003ce0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	e853 3f00 	ldrex	r3, [r3]
 8003cba:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f023 0310 	bic.w	r3, r3, #16
 8003cc2:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	330c      	adds	r3, #12
 8003cca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ccc:	61ba      	str	r2, [r7, #24]
 8003cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	6979      	ldr	r1, [r7, #20]
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	e841 2300 	strex	r3, r2, [r1]
 8003cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e5      	bne.n	8003cac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003cee:	bf00      	nop
 8003cf0:	3754      	adds	r7, #84	; 0x54
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f7ff fecb 	bl	8003ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d1a:	bf00      	nop
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b085      	sub	sp, #20
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b21      	cmp	r3, #33	; 0x21
 8003d34:	d13e      	bne.n	8003db4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d3e:	d114      	bne.n	8003d6a <UART_Transmit_IT+0x48>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d110      	bne.n	8003d6a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	1c9a      	adds	r2, r3, #2
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	621a      	str	r2, [r3, #32]
 8003d68:	e008      	b.n	8003d7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	1c59      	adds	r1, r3, #1
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6211      	str	r1, [r2, #32]
 8003d74:	781a      	ldrb	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	4619      	mov	r1, r3
 8003d8a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10f      	bne.n	8003db0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	e000      	b.n	8003db6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003db4:	2302      	movs	r3, #2
  }
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fc fb92 	bl	800050c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b08c      	sub	sp, #48	; 0x30
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b22      	cmp	r3, #34	; 0x22
 8003e04:	f040 80ab 	bne.w	8003f5e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e10:	d117      	bne.n	8003e42 <UART_Receive_IT+0x50>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d113      	bne.n	8003e42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3a:	1c9a      	adds	r2, r3, #2
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e40:	e026      	b.n	8003e90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e54:	d007      	beq.n	8003e66 <UART_Receive_IT+0x74>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10a      	bne.n	8003e74 <UART_Receive_IT+0x82>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e70:	701a      	strb	r2, [r3, #0]
 8003e72:	e008      	b.n	8003e86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d15a      	bne.n	8003f5a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0220 	bic.w	r2, r2, #32
 8003eb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ec2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0201 	bic.w	r2, r2, #1
 8003ed2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d135      	bne.n	8003f50 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	330c      	adds	r3, #12
 8003ef0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f023 0310 	bic.w	r3, r3, #16
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	330c      	adds	r3, #12
 8003f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0a:	623a      	str	r2, [r7, #32]
 8003f0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	69f9      	ldr	r1, [r7, #28]
 8003f10:	6a3a      	ldr	r2, [r7, #32]
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e5      	bne.n	8003eea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0310 	and.w	r3, r3, #16
 8003f28:	2b10      	cmp	r3, #16
 8003f2a:	d10a      	bne.n	8003f42 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f46:	4619      	mov	r1, r3
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff fdbb 	bl	8003ac4 <HAL_UARTEx_RxEventCallback>
 8003f4e:	e002      	b.n	8003f56 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7fc fb13 	bl	800057c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	e002      	b.n	8003f60 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	e000      	b.n	8003f60 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003f5e:	2302      	movs	r3, #2
  }
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3730      	adds	r7, #48	; 0x30
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f6c:	b0c0      	sub	sp, #256	; 0x100
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f84:	68d9      	ldr	r1, [r3, #12]
 8003f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	ea40 0301 	orr.w	r3, r0, r1
 8003f90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fc0:	f021 010c 	bic.w	r1, r1, #12
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003fce:	430b      	orrs	r3, r1
 8003fd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe2:	6999      	ldr	r1, [r3, #24]
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	ea40 0301 	orr.w	r3, r0, r1
 8003fee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4b8f      	ldr	r3, [pc, #572]	; (8004234 <UART_SetConfig+0x2cc>)
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d005      	beq.n	8004008 <UART_SetConfig+0xa0>
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4b8d      	ldr	r3, [pc, #564]	; (8004238 <UART_SetConfig+0x2d0>)
 8004004:	429a      	cmp	r2, r3
 8004006:	d104      	bne.n	8004012 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004008:	f7fe fe4e 	bl	8002ca8 <HAL_RCC_GetPCLK2Freq>
 800400c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004010:	e003      	b.n	800401a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004012:	f7fe fe35 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 8004016:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800401a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004024:	f040 810c 	bne.w	8004240 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004028:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800402c:	2200      	movs	r2, #0
 800402e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004032:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004036:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800403a:	4622      	mov	r2, r4
 800403c:	462b      	mov	r3, r5
 800403e:	1891      	adds	r1, r2, r2
 8004040:	65b9      	str	r1, [r7, #88]	; 0x58
 8004042:	415b      	adcs	r3, r3
 8004044:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004046:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800404a:	4621      	mov	r1, r4
 800404c:	eb12 0801 	adds.w	r8, r2, r1
 8004050:	4629      	mov	r1, r5
 8004052:	eb43 0901 	adc.w	r9, r3, r1
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004062:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004066:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800406a:	4690      	mov	r8, r2
 800406c:	4699      	mov	r9, r3
 800406e:	4623      	mov	r3, r4
 8004070:	eb18 0303 	adds.w	r3, r8, r3
 8004074:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004078:	462b      	mov	r3, r5
 800407a:	eb49 0303 	adc.w	r3, r9, r3
 800407e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800408e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004092:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004096:	460b      	mov	r3, r1
 8004098:	18db      	adds	r3, r3, r3
 800409a:	653b      	str	r3, [r7, #80]	; 0x50
 800409c:	4613      	mov	r3, r2
 800409e:	eb42 0303 	adc.w	r3, r2, r3
 80040a2:	657b      	str	r3, [r7, #84]	; 0x54
 80040a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040ac:	f7fc f890 	bl	80001d0 <__aeabi_uldivmod>
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4b61      	ldr	r3, [pc, #388]	; (800423c <UART_SetConfig+0x2d4>)
 80040b6:	fba3 2302 	umull	r2, r3, r3, r2
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	011c      	lsls	r4, r3, #4
 80040be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040d0:	4642      	mov	r2, r8
 80040d2:	464b      	mov	r3, r9
 80040d4:	1891      	adds	r1, r2, r2
 80040d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80040d8:	415b      	adcs	r3, r3
 80040da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040e0:	4641      	mov	r1, r8
 80040e2:	eb12 0a01 	adds.w	sl, r2, r1
 80040e6:	4649      	mov	r1, r9
 80040e8:	eb43 0b01 	adc.w	fp, r3, r1
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004100:	4692      	mov	sl, r2
 8004102:	469b      	mov	fp, r3
 8004104:	4643      	mov	r3, r8
 8004106:	eb1a 0303 	adds.w	r3, sl, r3
 800410a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800410e:	464b      	mov	r3, r9
 8004110:	eb4b 0303 	adc.w	r3, fp, r3
 8004114:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004124:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004128:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800412c:	460b      	mov	r3, r1
 800412e:	18db      	adds	r3, r3, r3
 8004130:	643b      	str	r3, [r7, #64]	; 0x40
 8004132:	4613      	mov	r3, r2
 8004134:	eb42 0303 	adc.w	r3, r2, r3
 8004138:	647b      	str	r3, [r7, #68]	; 0x44
 800413a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800413e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004142:	f7fc f845 	bl	80001d0 <__aeabi_uldivmod>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4611      	mov	r1, r2
 800414c:	4b3b      	ldr	r3, [pc, #236]	; (800423c <UART_SetConfig+0x2d4>)
 800414e:	fba3 2301 	umull	r2, r3, r3, r1
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	2264      	movs	r2, #100	; 0x64
 8004156:	fb02 f303 	mul.w	r3, r2, r3
 800415a:	1acb      	subs	r3, r1, r3
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004162:	4b36      	ldr	r3, [pc, #216]	; (800423c <UART_SetConfig+0x2d4>)
 8004164:	fba3 2302 	umull	r2, r3, r3, r2
 8004168:	095b      	lsrs	r3, r3, #5
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004170:	441c      	add	r4, r3
 8004172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004176:	2200      	movs	r2, #0
 8004178:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800417c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004180:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004184:	4642      	mov	r2, r8
 8004186:	464b      	mov	r3, r9
 8004188:	1891      	adds	r1, r2, r2
 800418a:	63b9      	str	r1, [r7, #56]	; 0x38
 800418c:	415b      	adcs	r3, r3
 800418e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004190:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004194:	4641      	mov	r1, r8
 8004196:	1851      	adds	r1, r2, r1
 8004198:	6339      	str	r1, [r7, #48]	; 0x30
 800419a:	4649      	mov	r1, r9
 800419c:	414b      	adcs	r3, r1
 800419e:	637b      	str	r3, [r7, #52]	; 0x34
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041ac:	4659      	mov	r1, fp
 80041ae:	00cb      	lsls	r3, r1, #3
 80041b0:	4651      	mov	r1, sl
 80041b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041b6:	4651      	mov	r1, sl
 80041b8:	00ca      	lsls	r2, r1, #3
 80041ba:	4610      	mov	r0, r2
 80041bc:	4619      	mov	r1, r3
 80041be:	4603      	mov	r3, r0
 80041c0:	4642      	mov	r2, r8
 80041c2:	189b      	adds	r3, r3, r2
 80041c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041c8:	464b      	mov	r3, r9
 80041ca:	460a      	mov	r2, r1
 80041cc:	eb42 0303 	adc.w	r3, r2, r3
 80041d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80041e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041e8:	460b      	mov	r3, r1
 80041ea:	18db      	adds	r3, r3, r3
 80041ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ee:	4613      	mov	r3, r2
 80041f0:	eb42 0303 	adc.w	r3, r2, r3
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041fe:	f7fb ffe7 	bl	80001d0 <__aeabi_uldivmod>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4b0d      	ldr	r3, [pc, #52]	; (800423c <UART_SetConfig+0x2d4>)
 8004208:	fba3 1302 	umull	r1, r3, r3, r2
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	2164      	movs	r1, #100	; 0x64
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	3332      	adds	r3, #50	; 0x32
 800421a:	4a08      	ldr	r2, [pc, #32]	; (800423c <UART_SetConfig+0x2d4>)
 800421c:	fba2 2303 	umull	r2, r3, r2, r3
 8004220:	095b      	lsrs	r3, r3, #5
 8004222:	f003 0207 	and.w	r2, r3, #7
 8004226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4422      	add	r2, r4
 800422e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004230:	e105      	b.n	800443e <UART_SetConfig+0x4d6>
 8004232:	bf00      	nop
 8004234:	40011000 	.word	0x40011000
 8004238:	40011400 	.word	0x40011400
 800423c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004244:	2200      	movs	r2, #0
 8004246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800424a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800424e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004252:	4642      	mov	r2, r8
 8004254:	464b      	mov	r3, r9
 8004256:	1891      	adds	r1, r2, r2
 8004258:	6239      	str	r1, [r7, #32]
 800425a:	415b      	adcs	r3, r3
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
 800425e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004262:	4641      	mov	r1, r8
 8004264:	1854      	adds	r4, r2, r1
 8004266:	4649      	mov	r1, r9
 8004268:	eb43 0501 	adc.w	r5, r3, r1
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	00eb      	lsls	r3, r5, #3
 8004276:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800427a:	00e2      	lsls	r2, r4, #3
 800427c:	4614      	mov	r4, r2
 800427e:	461d      	mov	r5, r3
 8004280:	4643      	mov	r3, r8
 8004282:	18e3      	adds	r3, r4, r3
 8004284:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004288:	464b      	mov	r3, r9
 800428a:	eb45 0303 	adc.w	r3, r5, r3
 800428e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800429e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042ae:	4629      	mov	r1, r5
 80042b0:	008b      	lsls	r3, r1, #2
 80042b2:	4621      	mov	r1, r4
 80042b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042b8:	4621      	mov	r1, r4
 80042ba:	008a      	lsls	r2, r1, #2
 80042bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042c0:	f7fb ff86 	bl	80001d0 <__aeabi_uldivmod>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4b60      	ldr	r3, [pc, #384]	; (800444c <UART_SetConfig+0x4e4>)
 80042ca:	fba3 2302 	umull	r2, r3, r3, r2
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	011c      	lsls	r4, r3, #4
 80042d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80042e4:	4642      	mov	r2, r8
 80042e6:	464b      	mov	r3, r9
 80042e8:	1891      	adds	r1, r2, r2
 80042ea:	61b9      	str	r1, [r7, #24]
 80042ec:	415b      	adcs	r3, r3
 80042ee:	61fb      	str	r3, [r7, #28]
 80042f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042f4:	4641      	mov	r1, r8
 80042f6:	1851      	adds	r1, r2, r1
 80042f8:	6139      	str	r1, [r7, #16]
 80042fa:	4649      	mov	r1, r9
 80042fc:	414b      	adcs	r3, r1
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800430c:	4659      	mov	r1, fp
 800430e:	00cb      	lsls	r3, r1, #3
 8004310:	4651      	mov	r1, sl
 8004312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004316:	4651      	mov	r1, sl
 8004318:	00ca      	lsls	r2, r1, #3
 800431a:	4610      	mov	r0, r2
 800431c:	4619      	mov	r1, r3
 800431e:	4603      	mov	r3, r0
 8004320:	4642      	mov	r2, r8
 8004322:	189b      	adds	r3, r3, r2
 8004324:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004328:	464b      	mov	r3, r9
 800432a:	460a      	mov	r2, r1
 800432c:	eb42 0303 	adc.w	r3, r2, r3
 8004330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	67bb      	str	r3, [r7, #120]	; 0x78
 800433e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800434c:	4649      	mov	r1, r9
 800434e:	008b      	lsls	r3, r1, #2
 8004350:	4641      	mov	r1, r8
 8004352:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004356:	4641      	mov	r1, r8
 8004358:	008a      	lsls	r2, r1, #2
 800435a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800435e:	f7fb ff37 	bl	80001d0 <__aeabi_uldivmod>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	4b39      	ldr	r3, [pc, #228]	; (800444c <UART_SetConfig+0x4e4>)
 8004368:	fba3 1302 	umull	r1, r3, r3, r2
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	2164      	movs	r1, #100	; 0x64
 8004370:	fb01 f303 	mul.w	r3, r1, r3
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	3332      	adds	r3, #50	; 0x32
 800437a:	4a34      	ldr	r2, [pc, #208]	; (800444c <UART_SetConfig+0x4e4>)
 800437c:	fba2 2303 	umull	r2, r3, r2, r3
 8004380:	095b      	lsrs	r3, r3, #5
 8004382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004386:	441c      	add	r4, r3
 8004388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800438c:	2200      	movs	r2, #0
 800438e:	673b      	str	r3, [r7, #112]	; 0x70
 8004390:	677a      	str	r2, [r7, #116]	; 0x74
 8004392:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004396:	4642      	mov	r2, r8
 8004398:	464b      	mov	r3, r9
 800439a:	1891      	adds	r1, r2, r2
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	415b      	adcs	r3, r3
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043a6:	4641      	mov	r1, r8
 80043a8:	1851      	adds	r1, r2, r1
 80043aa:	6039      	str	r1, [r7, #0]
 80043ac:	4649      	mov	r1, r9
 80043ae:	414b      	adcs	r3, r1
 80043b0:	607b      	str	r3, [r7, #4]
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043be:	4659      	mov	r1, fp
 80043c0:	00cb      	lsls	r3, r1, #3
 80043c2:	4651      	mov	r1, sl
 80043c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043c8:	4651      	mov	r1, sl
 80043ca:	00ca      	lsls	r2, r1, #3
 80043cc:	4610      	mov	r0, r2
 80043ce:	4619      	mov	r1, r3
 80043d0:	4603      	mov	r3, r0
 80043d2:	4642      	mov	r2, r8
 80043d4:	189b      	adds	r3, r3, r2
 80043d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80043d8:	464b      	mov	r3, r9
 80043da:	460a      	mov	r2, r1
 80043dc:	eb42 0303 	adc.w	r3, r2, r3
 80043e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	663b      	str	r3, [r7, #96]	; 0x60
 80043ec:	667a      	str	r2, [r7, #100]	; 0x64
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043fa:	4649      	mov	r1, r9
 80043fc:	008b      	lsls	r3, r1, #2
 80043fe:	4641      	mov	r1, r8
 8004400:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004404:	4641      	mov	r1, r8
 8004406:	008a      	lsls	r2, r1, #2
 8004408:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800440c:	f7fb fee0 	bl	80001d0 <__aeabi_uldivmod>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4b0d      	ldr	r3, [pc, #52]	; (800444c <UART_SetConfig+0x4e4>)
 8004416:	fba3 1302 	umull	r1, r3, r3, r2
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	2164      	movs	r1, #100	; 0x64
 800441e:	fb01 f303 	mul.w	r3, r1, r3
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	3332      	adds	r3, #50	; 0x32
 8004428:	4a08      	ldr	r2, [pc, #32]	; (800444c <UART_SetConfig+0x4e4>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	f003 020f 	and.w	r2, r3, #15
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4422      	add	r2, r4
 800443c:	609a      	str	r2, [r3, #8]
}
 800443e:	bf00      	nop
 8004440:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004444:	46bd      	mov	sp, r7
 8004446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800444a:	bf00      	nop
 800444c:	51eb851f 	.word	0x51eb851f

08004450 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	601a      	str	r2, [r3, #0]
}
 800448c:	bf00      	nop
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ae:	d103      	bne.n	80044b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	e00c      	b.n	80044d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3308      	adds	r3, #8
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	e002      	b.n	80044c6 <vListInsert+0x2e>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d2f6      	bcs.n	80044c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	601a      	str	r2, [r3, #0]
}
 80044fe:	bf00      	nop
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800450a:	b480      	push	{r7}
 800450c:	b085      	sub	sp, #20
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6892      	ldr	r2, [r2, #8]
 8004520:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6852      	ldr	r2, [r2, #4]
 800452a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	429a      	cmp	r2, r3
 8004534:	d103      	bne.n	800453e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	1e5a      	subs	r2, r3, #1
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
	...

08004560 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08e      	sub	sp, #56	; 0x38
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800456e:	2300      	movs	r3, #0
 8004570:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10a      	bne.n	8004592 <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800458e:	bf00      	nop
 8004590:	e7fe      	b.n	8004590 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d103      	bne.n	80045a0 <xQueueGenericSend+0x40>
 8004598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <xQueueGenericSend+0x44>
 80045a0:	2301      	movs	r3, #1
 80045a2:	e000      	b.n	80045a6 <xQueueGenericSend+0x46>
 80045a4:	2300      	movs	r3, #0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10a      	bne.n	80045c0 <xQueueGenericSend+0x60>
	__asm volatile
 80045aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045bc:	bf00      	nop
 80045be:	e7fe      	b.n	80045be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d103      	bne.n	80045ce <xQueueGenericSend+0x6e>
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <xQueueGenericSend+0x72>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <xQueueGenericSend+0x74>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <xQueueGenericSend+0x8e>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	623b      	str	r3, [r7, #32]
}
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045ee:	f000 fd35 	bl	800505c <xTaskGetSchedulerState>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d102      	bne.n	80045fe <xQueueGenericSend+0x9e>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <xQueueGenericSend+0xa2>
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <xQueueGenericSend+0xa4>
 8004602:	2300      	movs	r3, #0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <xQueueGenericSend+0xbe>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	61fb      	str	r3, [r7, #28]
}
 800461a:	bf00      	nop
 800461c:	e7fe      	b.n	800461c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800461e:	f000 fe8b 	bl	8005338 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462a:	429a      	cmp	r2, r3
 800462c:	d302      	bcc.n	8004634 <xQueueGenericSend+0xd4>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b02      	cmp	r3, #2
 8004632:	d129      	bne.n	8004688 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	68b9      	ldr	r1, [r7, #8]
 8004638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800463a:	f000 f92a 	bl	8004892 <prvCopyDataToQueue>
 800463e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	2b00      	cmp	r3, #0
 8004646:	d010      	beq.n	800466a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	3324      	adds	r3, #36	; 0x24
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fbff 	bl	8004e50 <xTaskRemoveFromEventList>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d013      	beq.n	8004680 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004658:	4b3f      	ldr	r3, [pc, #252]	; (8004758 <xQueueGenericSend+0x1f8>)
 800465a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	e00a      	b.n	8004680 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004670:	4b39      	ldr	r3, [pc, #228]	; (8004758 <xQueueGenericSend+0x1f8>)
 8004672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004680:	f000 fe8a 	bl	8005398 <vPortExitCritical>
				return pdPASS;
 8004684:	2301      	movs	r3, #1
 8004686:	e063      	b.n	8004750 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d103      	bne.n	8004696 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800468e:	f000 fe83 	bl	8005398 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004692:	2300      	movs	r3, #0
 8004694:	e05c      	b.n	8004750 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004698:	2b00      	cmp	r3, #0
 800469a:	d106      	bne.n	80046aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800469c:	f107 0314 	add.w	r3, r7, #20
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fc37 	bl	8004f14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046a6:	2301      	movs	r3, #1
 80046a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046aa:	f000 fe75 	bl	8005398 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046ae:	f000 f9c5 	bl	8004a3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046b2:	f000 fe41 	bl	8005338 <vPortEnterCritical>
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046bc:	b25b      	sxtb	r3, r3
 80046be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046c2:	d103      	bne.n	80046cc <xQueueGenericSend+0x16c>
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046d2:	b25b      	sxtb	r3, r3
 80046d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046d8:	d103      	bne.n	80046e2 <xQueueGenericSend+0x182>
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046e2:	f000 fe59 	bl	8005398 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046e6:	1d3a      	adds	r2, r7, #4
 80046e8:	f107 0314 	add.w	r3, r7, #20
 80046ec:	4611      	mov	r1, r2
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fc26 	bl	8004f40 <xTaskCheckForTimeOut>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d124      	bne.n	8004744 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046fc:	f000 f985 	bl	8004a0a <prvIsQueueFull>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d018      	beq.n	8004738 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	3310      	adds	r3, #16
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	4611      	mov	r1, r2
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fb7a 	bl	8004e08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004716:	f000 f926 	bl	8004966 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800471a:	f000 f99d 	bl	8004a58 <xTaskResumeAll>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	f47f af7c 	bne.w	800461e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004726:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <xQueueGenericSend+0x1f8>)
 8004728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	e772      	b.n	800461e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800473a:	f000 f914 	bl	8004966 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800473e:	f000 f98b 	bl	8004a58 <xTaskResumeAll>
 8004742:	e76c      	b.n	800461e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004746:	f000 f90e 	bl	8004966 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800474a:	f000 f985 	bl	8004a58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800474e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004750:	4618      	mov	r0, r3
 8004752:	3738      	adds	r7, #56	; 0x38
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	e000ed04 	.word	0xe000ed04

0800475c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b090      	sub	sp, #64	; 0x40
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800476e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10a      	bne.n	800478a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004786:	bf00      	nop
 8004788:	e7fe      	b.n	8004788 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d103      	bne.n	8004798 <xQueueGenericSendFromISR+0x3c>
 8004790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <xQueueGenericSendFromISR+0x40>
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <xQueueGenericSendFromISR+0x42>
 800479c:	2300      	movs	r3, #0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10a      	bne.n	80047b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047b4:	bf00      	nop
 80047b6:	e7fe      	b.n	80047b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d103      	bne.n	80047c6 <xQueueGenericSendFromISR+0x6a>
 80047be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <xQueueGenericSendFromISR+0x6e>
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <xQueueGenericSendFromISR+0x70>
 80047ca:	2300      	movs	r3, #0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10a      	bne.n	80047e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	623b      	str	r3, [r7, #32]
}
 80047e2:	bf00      	nop
 80047e4:	e7fe      	b.n	80047e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047e6:	f000 fe59 	bl	800549c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047ea:	f3ef 8211 	mrs	r2, BASEPRI
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	61fa      	str	r2, [r7, #28]
 8004800:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004802:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004804:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800480a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480e:	429a      	cmp	r2, r3
 8004810:	d302      	bcc.n	8004818 <xQueueGenericSendFromISR+0xbc>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b02      	cmp	r3, #2
 8004816:	d12f      	bne.n	8004878 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800481e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004826:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	68b9      	ldr	r1, [r7, #8]
 800482c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800482e:	f000 f830 	bl	8004892 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004832:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800483a:	d112      	bne.n	8004862 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	2b00      	cmp	r3, #0
 8004842:	d016      	beq.n	8004872 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004846:	3324      	adds	r3, #36	; 0x24
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fb01 	bl	8004e50 <xTaskRemoveFromEventList>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00e      	beq.n	8004872 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00b      	beq.n	8004872 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	e007      	b.n	8004872 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004862:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004866:	3301      	adds	r3, #1
 8004868:	b2db      	uxtb	r3, r3
 800486a:	b25a      	sxtb	r2, r3
 800486c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004872:	2301      	movs	r3, #1
 8004874:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004876:	e001      	b.n	800487c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004878:	2300      	movs	r3, #0
 800487a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800487c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004886:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800488a:	4618      	mov	r0, r3
 800488c:	3740      	adds	r7, #64	; 0x40
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b086      	sub	sp, #24
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800489e:	2300      	movs	r3, #0
 80048a0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10d      	bne.n	80048cc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d14d      	bne.n	8004954 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 fbeb 	bl	8005098 <xTaskPriorityDisinherit>
 80048c2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	609a      	str	r2, [r3, #8]
 80048ca:	e043      	b.n	8004954 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d119      	bne.n	8004906 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6858      	ldr	r0, [r3, #4]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	461a      	mov	r2, r3
 80048dc:	68b9      	ldr	r1, [r7, #8]
 80048de:	f000 fe41 	bl	8005564 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	441a      	add	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d32b      	bcc.n	8004954 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	605a      	str	r2, [r3, #4]
 8004904:	e026      	b.n	8004954 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	68d8      	ldr	r0, [r3, #12]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	461a      	mov	r2, r3
 8004910:	68b9      	ldr	r1, [r7, #8]
 8004912:	f000 fe27 	bl	8005564 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	425b      	negs	r3, r3
 8004920:	441a      	add	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d207      	bcs.n	8004942 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	425b      	negs	r3, r3
 800493c:	441a      	add	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b02      	cmp	r3, #2
 8004946:	d105      	bne.n	8004954 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	3b01      	subs	r3, #1
 8004952:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800495c:	697b      	ldr	r3, [r7, #20]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800496e:	f000 fce3 	bl	8005338 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004978:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800497a:	e011      	b.n	80049a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	2b00      	cmp	r3, #0
 8004982:	d012      	beq.n	80049aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3324      	adds	r3, #36	; 0x24
 8004988:	4618      	mov	r0, r3
 800498a:	f000 fa61 	bl	8004e50 <xTaskRemoveFromEventList>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004994:	f000 fb36 	bl	8005004 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	3b01      	subs	r3, #1
 800499c:	b2db      	uxtb	r3, r3
 800499e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	dce9      	bgt.n	800497c <prvUnlockQueue+0x16>
 80049a8:	e000      	b.n	80049ac <prvUnlockQueue+0x46>
					break;
 80049aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	22ff      	movs	r2, #255	; 0xff
 80049b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80049b4:	f000 fcf0 	bl	8005398 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049b8:	f000 fcbe 	bl	8005338 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049c4:	e011      	b.n	80049ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d012      	beq.n	80049f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3310      	adds	r3, #16
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 fa3c 	bl	8004e50 <xTaskRemoveFromEventList>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049de:	f000 fb11 	bl	8005004 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049e2:	7bbb      	ldrb	r3, [r7, #14]
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	dce9      	bgt.n	80049c6 <prvUnlockQueue+0x60>
 80049f2:	e000      	b.n	80049f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	22ff      	movs	r2, #255	; 0xff
 80049fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80049fe:	f000 fccb 	bl	8005398 <vPortExitCritical>
}
 8004a02:	bf00      	nop
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a12:	f000 fc91 	bl	8005338 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d102      	bne.n	8004a28 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a22:	2301      	movs	r3, #1
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	e001      	b.n	8004a2c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a2c:	f000 fcb4 	bl	8005398 <vPortExitCritical>

	return xReturn;
 8004a30:	68fb      	ldr	r3, [r7, #12]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a40:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <vTaskSuspendAll+0x18>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3301      	adds	r3, #1
 8004a46:	4a03      	ldr	r2, [pc, #12]	; (8004a54 <vTaskSuspendAll+0x18>)
 8004a48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a4a:	bf00      	nop
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	20000658 	.word	0x20000658

08004a58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a66:	4b41      	ldr	r3, [pc, #260]	; (8004b6c <xTaskResumeAll+0x114>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10a      	bne.n	8004a84 <xTaskResumeAll+0x2c>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	603b      	str	r3, [r7, #0]
}
 8004a80:	bf00      	nop
 8004a82:	e7fe      	b.n	8004a82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a84:	f000 fc58 	bl	8005338 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a88:	4b38      	ldr	r3, [pc, #224]	; (8004b6c <xTaskResumeAll+0x114>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	4a37      	ldr	r2, [pc, #220]	; (8004b6c <xTaskResumeAll+0x114>)
 8004a90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a92:	4b36      	ldr	r3, [pc, #216]	; (8004b6c <xTaskResumeAll+0x114>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d161      	bne.n	8004b5e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a9a:	4b35      	ldr	r3, [pc, #212]	; (8004b70 <xTaskResumeAll+0x118>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d05d      	beq.n	8004b5e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004aa2:	e02e      	b.n	8004b02 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aa4:	4b33      	ldr	r3, [pc, #204]	; (8004b74 <xTaskResumeAll+0x11c>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	3318      	adds	r3, #24
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff fd2a 	bl	800450a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff fd25 	bl	800450a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	4b2b      	ldr	r3, [pc, #172]	; (8004b78 <xTaskResumeAll+0x120>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	4a2a      	ldr	r2, [pc, #168]	; (8004b78 <xTaskResumeAll+0x120>)
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4a27      	ldr	r2, [pc, #156]	; (8004b7c <xTaskResumeAll+0x124>)
 8004ae0:	441a      	add	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4610      	mov	r0, r2
 8004aea:	f7ff fcb1 	bl	8004450 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af2:	4b23      	ldr	r3, [pc, #140]	; (8004b80 <xTaskResumeAll+0x128>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d302      	bcc.n	8004b02 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004afc:	4b21      	ldr	r3, [pc, #132]	; (8004b84 <xTaskResumeAll+0x12c>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b02:	4b1c      	ldr	r3, [pc, #112]	; (8004b74 <xTaskResumeAll+0x11c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1cc      	bne.n	8004aa4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b10:	f000 fa84 	bl	800501c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b14:	4b1c      	ldr	r3, [pc, #112]	; (8004b88 <xTaskResumeAll+0x130>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d010      	beq.n	8004b42 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b20:	f000 f858 	bl	8004bd4 <xTaskIncrementTick>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004b2a:	4b16      	ldr	r3, [pc, #88]	; (8004b84 <xTaskResumeAll+0x12c>)
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f1      	bne.n	8004b20 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004b3c:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <xTaskResumeAll+0x130>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b42:	4b10      	ldr	r3, [pc, #64]	; (8004b84 <xTaskResumeAll+0x12c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d009      	beq.n	8004b5e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b4e:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <xTaskResumeAll+0x134>)
 8004b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b5e:	f000 fc1b 	bl	8005398 <vPortExitCritical>

	return xAlreadyYielded;
 8004b62:	68bb      	ldr	r3, [r7, #8]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	20000658 	.word	0x20000658
 8004b70:	20000638 	.word	0x20000638
 8004b74:	20000610 	.word	0x20000610
 8004b78:	20000640 	.word	0x20000640
 8004b7c:	200005b8 	.word	0x200005b8
 8004b80:	200005b4 	.word	0x200005b4
 8004b84:	2000064c 	.word	0x2000064c
 8004b88:	20000648 	.word	0x20000648
 8004b8c:	e000ed04 	.word	0xe000ed04

08004b90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b96:	4b05      	ldr	r3, [pc, #20]	; (8004bac <xTaskGetTickCount+0x1c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b9c:	687b      	ldr	r3, [r7, #4]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	2000063c 	.word	0x2000063c

08004bb0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bb6:	f000 fc71 	bl	800549c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004bba:	2300      	movs	r3, #0
 8004bbc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004bbe:	4b04      	ldr	r3, [pc, #16]	; (8004bd0 <xTaskGetTickCountFromISR+0x20>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bc4:	683b      	ldr	r3, [r7, #0]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	2000063c 	.word	0x2000063c

08004bd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bde:	4b4e      	ldr	r3, [pc, #312]	; (8004d18 <xTaskIncrementTick+0x144>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f040 808e 	bne.w	8004d04 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004be8:	4b4c      	ldr	r3, [pc, #304]	; (8004d1c <xTaskIncrementTick+0x148>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3301      	adds	r3, #1
 8004bee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004bf0:	4a4a      	ldr	r2, [pc, #296]	; (8004d1c <xTaskIncrementTick+0x148>)
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d120      	bne.n	8004c3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bfc:	4b48      	ldr	r3, [pc, #288]	; (8004d20 <xTaskIncrementTick+0x14c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <xTaskIncrementTick+0x48>
	__asm volatile
 8004c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	603b      	str	r3, [r7, #0]
}
 8004c18:	bf00      	nop
 8004c1a:	e7fe      	b.n	8004c1a <xTaskIncrementTick+0x46>
 8004c1c:	4b40      	ldr	r3, [pc, #256]	; (8004d20 <xTaskIncrementTick+0x14c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	4b40      	ldr	r3, [pc, #256]	; (8004d24 <xTaskIncrementTick+0x150>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a3e      	ldr	r2, [pc, #248]	; (8004d20 <xTaskIncrementTick+0x14c>)
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	4a3e      	ldr	r2, [pc, #248]	; (8004d24 <xTaskIncrementTick+0x150>)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	4b3d      	ldr	r3, [pc, #244]	; (8004d28 <xTaskIncrementTick+0x154>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3301      	adds	r3, #1
 8004c36:	4a3c      	ldr	r2, [pc, #240]	; (8004d28 <xTaskIncrementTick+0x154>)
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	f000 f9ef 	bl	800501c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c3e:	4b3b      	ldr	r3, [pc, #236]	; (8004d2c <xTaskIncrementTick+0x158>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d348      	bcc.n	8004cda <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c48:	4b35      	ldr	r3, [pc, #212]	; (8004d20 <xTaskIncrementTick+0x14c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d104      	bne.n	8004c5c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c52:	4b36      	ldr	r3, [pc, #216]	; (8004d2c <xTaskIncrementTick+0x158>)
 8004c54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c58:	601a      	str	r2, [r3, #0]
					break;
 8004c5a:	e03e      	b.n	8004cda <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c5c:	4b30      	ldr	r3, [pc, #192]	; (8004d20 <xTaskIncrementTick+0x14c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d203      	bcs.n	8004c7c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c74:	4a2d      	ldr	r2, [pc, #180]	; (8004d2c <xTaskIncrementTick+0x158>)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c7a:	e02e      	b.n	8004cda <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff fc42 	bl	800450a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d004      	beq.n	8004c98 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	3318      	adds	r3, #24
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff fc39 	bl	800450a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	4b23      	ldr	r3, [pc, #140]	; (8004d30 <xTaskIncrementTick+0x15c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	4a22      	ldr	r2, [pc, #136]	; (8004d30 <xTaskIncrementTick+0x15c>)
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4a1f      	ldr	r2, [pc, #124]	; (8004d34 <xTaskIncrementTick+0x160>)
 8004cb8:	441a      	add	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	f7ff fbc5 	bl	8004450 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cca:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <xTaskIncrementTick+0x164>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d3b9      	bcc.n	8004c48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cd8:	e7b6      	b.n	8004c48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004cda:	4b17      	ldr	r3, [pc, #92]	; (8004d38 <xTaskIncrementTick+0x164>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce0:	4914      	ldr	r1, [pc, #80]	; (8004d34 <xTaskIncrementTick+0x160>)
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d901      	bls.n	8004cf6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004cf6:	4b11      	ldr	r3, [pc, #68]	; (8004d3c <xTaskIncrementTick+0x168>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d007      	beq.n	8004d0e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	e004      	b.n	8004d0e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d04:	4b0e      	ldr	r3, [pc, #56]	; (8004d40 <xTaskIncrementTick+0x16c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	4a0d      	ldr	r2, [pc, #52]	; (8004d40 <xTaskIncrementTick+0x16c>)
 8004d0c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004d0e:	697b      	ldr	r3, [r7, #20]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	20000658 	.word	0x20000658
 8004d1c:	2000063c 	.word	0x2000063c
 8004d20:	20000608 	.word	0x20000608
 8004d24:	2000060c 	.word	0x2000060c
 8004d28:	20000650 	.word	0x20000650
 8004d2c:	20000654 	.word	0x20000654
 8004d30:	20000640 	.word	0x20000640
 8004d34:	200005b8 	.word	0x200005b8
 8004d38:	200005b4 	.word	0x200005b4
 8004d3c:	2000064c 	.word	0x2000064c
 8004d40:	20000648 	.word	0x20000648

08004d44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d4a:	4b29      	ldr	r3, [pc, #164]	; (8004df0 <vTaskSwitchContext+0xac>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d52:	4b28      	ldr	r3, [pc, #160]	; (8004df4 <vTaskSwitchContext+0xb0>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d58:	e044      	b.n	8004de4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004d5a:	4b26      	ldr	r3, [pc, #152]	; (8004df4 <vTaskSwitchContext+0xb0>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d60:	4b25      	ldr	r3, [pc, #148]	; (8004df8 <vTaskSwitchContext+0xb4>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	fab3 f383 	clz	r3, r3
 8004d6c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d6e:	7afb      	ldrb	r3, [r7, #11]
 8004d70:	f1c3 031f 	rsb	r3, r3, #31
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	4921      	ldr	r1, [pc, #132]	; (8004dfc <vTaskSwitchContext+0xb8>)
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	440b      	add	r3, r1
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10a      	bne.n	8004da0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	607b      	str	r3, [r7, #4]
}
 8004d9c:	bf00      	nop
 8004d9e:	e7fe      	b.n	8004d9e <vTaskSwitchContext+0x5a>
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4a14      	ldr	r2, [pc, #80]	; (8004dfc <vTaskSwitchContext+0xb8>)
 8004dac:	4413      	add	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	605a      	str	r2, [r3, #4]
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	3308      	adds	r3, #8
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d104      	bne.n	8004dd0 <vTaskSwitchContext+0x8c>
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	605a      	str	r2, [r3, #4]
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	4a0a      	ldr	r2, [pc, #40]	; (8004e00 <vTaskSwitchContext+0xbc>)
 8004dd8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004dda:	4b09      	ldr	r3, [pc, #36]	; (8004e00 <vTaskSwitchContext+0xbc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	335c      	adds	r3, #92	; 0x5c
 8004de0:	4a08      	ldr	r2, [pc, #32]	; (8004e04 <vTaskSwitchContext+0xc0>)
 8004de2:	6013      	str	r3, [r2, #0]
}
 8004de4:	bf00      	nop
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	20000658 	.word	0x20000658
 8004df4:	2000064c 	.word	0x2000064c
 8004df8:	20000640 	.word	0x20000640
 8004dfc:	200005b8 	.word	0x200005b8
 8004e00:	200005b4 	.word	0x200005b4
 8004e04:	20000010 	.word	0x20000010

08004e08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10a      	bne.n	8004e2e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	60fb      	str	r3, [r7, #12]
}
 8004e2a:	bf00      	nop
 8004e2c:	e7fe      	b.n	8004e2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e2e:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <vTaskPlaceOnEventList+0x44>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3318      	adds	r3, #24
 8004e34:	4619      	mov	r1, r3
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7ff fb2e 	bl	8004498 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	6838      	ldr	r0, [r7, #0]
 8004e40:	f000 f9b0 	bl	80051a4 <prvAddCurrentTaskToDelayedList>
}
 8004e44:	bf00      	nop
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	200005b4 	.word	0x200005b4

08004e50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10a      	bne.n	8004e7c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	60fb      	str	r3, [r7, #12]
}
 8004e78:	bf00      	nop
 8004e7a:	e7fe      	b.n	8004e7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	3318      	adds	r3, #24
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff fb42 	bl	800450a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e86:	4b1d      	ldr	r3, [pc, #116]	; (8004efc <xTaskRemoveFromEventList+0xac>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d11c      	bne.n	8004ec8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	3304      	adds	r3, #4
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff fb39 	bl	800450a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	409a      	lsls	r2, r3
 8004ea0:	4b17      	ldr	r3, [pc, #92]	; (8004f00 <xTaskRemoveFromEventList+0xb0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	4a16      	ldr	r2, [pc, #88]	; (8004f00 <xTaskRemoveFromEventList+0xb0>)
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4a13      	ldr	r2, [pc, #76]	; (8004f04 <xTaskRemoveFromEventList+0xb4>)
 8004eb8:	441a      	add	r2, r3
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	f7ff fac5 	bl	8004450 <vListInsertEnd>
 8004ec6:	e005      	b.n	8004ed4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	3318      	adds	r3, #24
 8004ecc:	4619      	mov	r1, r3
 8004ece:	480e      	ldr	r0, [pc, #56]	; (8004f08 <xTaskRemoveFromEventList+0xb8>)
 8004ed0:	f7ff fabe 	bl	8004450 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	; (8004f0c <xTaskRemoveFromEventList+0xbc>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d905      	bls.n	8004eee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ee6:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <xTaskRemoveFromEventList+0xc0>)
 8004ee8:	2201      	movs	r2, #1
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	e001      	b.n	8004ef2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ef2:	697b      	ldr	r3, [r7, #20]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20000658 	.word	0x20000658
 8004f00:	20000640 	.word	0x20000640
 8004f04:	200005b8 	.word	0x200005b8
 8004f08:	20000610 	.word	0x20000610
 8004f0c:	200005b4 	.word	0x200005b4
 8004f10:	2000064c 	.word	0x2000064c

08004f14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f1c:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <vTaskInternalSetTimeOutState+0x24>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f24:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <vTaskInternalSetTimeOutState+0x28>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	605a      	str	r2, [r3, #4]
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	20000650 	.word	0x20000650
 8004f3c:	2000063c 	.word	0x2000063c

08004f40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10a      	bne.n	8004f66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	613b      	str	r3, [r7, #16]
}
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	60fb      	str	r3, [r7, #12]
}
 8004f7e:	bf00      	nop
 8004f80:	e7fe      	b.n	8004f80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004f82:	f000 f9d9 	bl	8005338 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f86:	4b1d      	ldr	r3, [pc, #116]	; (8004ffc <xTaskCheckForTimeOut+0xbc>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f9e:	d102      	bne.n	8004fa6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61fb      	str	r3, [r7, #28]
 8004fa4:	e023      	b.n	8004fee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	4b15      	ldr	r3, [pc, #84]	; (8005000 <xTaskCheckForTimeOut+0xc0>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d007      	beq.n	8004fc2 <xTaskCheckForTimeOut+0x82>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d302      	bcc.n	8004fc2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	61fb      	str	r3, [r7, #28]
 8004fc0:	e015      	b.n	8004fee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d20b      	bcs.n	8004fe4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	1ad2      	subs	r2, r2, r3
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff ff9b 	bl	8004f14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61fb      	str	r3, [r7, #28]
 8004fe2:	e004      	b.n	8004fee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004fea:	2301      	movs	r3, #1
 8004fec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004fee:	f000 f9d3 	bl	8005398 <vPortExitCritical>

	return xReturn;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	2000063c 	.word	0x2000063c
 8005000:	20000650 	.word	0x20000650

08005004 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005008:	4b03      	ldr	r3, [pc, #12]	; (8005018 <vTaskMissedYield+0x14>)
 800500a:	2201      	movs	r2, #1
 800500c:	601a      	str	r2, [r3, #0]
}
 800500e:	bf00      	nop
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	2000064c 	.word	0x2000064c

0800501c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005022:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <prvResetNextTaskUnblockTime+0x38>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d104      	bne.n	8005036 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800502c:	4b0a      	ldr	r3, [pc, #40]	; (8005058 <prvResetNextTaskUnblockTime+0x3c>)
 800502e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005032:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005034:	e008      	b.n	8005048 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005036:	4b07      	ldr	r3, [pc, #28]	; (8005054 <prvResetNextTaskUnblockTime+0x38>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	4a04      	ldr	r2, [pc, #16]	; (8005058 <prvResetNextTaskUnblockTime+0x3c>)
 8005046:	6013      	str	r3, [r2, #0]
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	20000608 	.word	0x20000608
 8005058:	20000654 	.word	0x20000654

0800505c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005062:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <xTaskGetSchedulerState+0x34>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d102      	bne.n	8005070 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800506a:	2301      	movs	r3, #1
 800506c:	607b      	str	r3, [r7, #4]
 800506e:	e008      	b.n	8005082 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005070:	4b08      	ldr	r3, [pc, #32]	; (8005094 <xTaskGetSchedulerState+0x38>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d102      	bne.n	800507e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005078:	2302      	movs	r3, #2
 800507a:	607b      	str	r3, [r7, #4]
 800507c:	e001      	b.n	8005082 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800507e:	2300      	movs	r3, #0
 8005080:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005082:	687b      	ldr	r3, [r7, #4]
	}
 8005084:	4618      	mov	r0, r3
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	20000644 	.word	0x20000644
 8005094:	20000658 	.word	0x20000658

08005098 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80050a4:	2300      	movs	r3, #0
 80050a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d06e      	beq.n	800518c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80050ae:	4b3a      	ldr	r3, [pc, #232]	; (8005198 <xTaskPriorityDisinherit+0x100>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d00a      	beq.n	80050ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	60fb      	str	r3, [r7, #12]
}
 80050ca:	bf00      	nop
 80050cc:	e7fe      	b.n	80050cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10a      	bne.n	80050ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	60bb      	str	r3, [r7, #8]
}
 80050e8:	bf00      	nop
 80050ea:	e7fe      	b.n	80050ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f0:	1e5a      	subs	r2, r3, #1
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fe:	429a      	cmp	r2, r3
 8005100:	d044      	beq.n	800518c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005106:	2b00      	cmp	r3, #0
 8005108:	d140      	bne.n	800518c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	3304      	adds	r3, #4
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff f9fb 	bl	800450a <uxListRemove>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d115      	bne.n	8005146 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511e:	491f      	ldr	r1, [pc, #124]	; (800519c <xTaskPriorityDisinherit+0x104>)
 8005120:	4613      	mov	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10a      	bne.n	8005146 <xTaskPriorityDisinherit+0xae>
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	2201      	movs	r2, #1
 8005136:	fa02 f303 	lsl.w	r3, r2, r3
 800513a:	43da      	mvns	r2, r3
 800513c:	4b18      	ldr	r3, [pc, #96]	; (80051a0 <xTaskPriorityDisinherit+0x108>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4013      	ands	r3, r2
 8005142:	4a17      	ldr	r2, [pc, #92]	; (80051a0 <xTaskPriorityDisinherit+0x108>)
 8005144:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	f1c3 0204 	rsb	r2, r3, #4
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	2201      	movs	r2, #1
 8005160:	409a      	lsls	r2, r3
 8005162:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <xTaskPriorityDisinherit+0x108>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4313      	orrs	r3, r2
 8005168:	4a0d      	ldr	r2, [pc, #52]	; (80051a0 <xTaskPriorityDisinherit+0x108>)
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005170:	4613      	mov	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4a08      	ldr	r2, [pc, #32]	; (800519c <xTaskPriorityDisinherit+0x104>)
 800517a:	441a      	add	r2, r3
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	3304      	adds	r3, #4
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f7ff f964 	bl	8004450 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005188:	2301      	movs	r3, #1
 800518a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800518c:	697b      	ldr	r3, [r7, #20]
	}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	200005b4 	.word	0x200005b4
 800519c:	200005b8 	.word	0x200005b8
 80051a0:	20000640 	.word	0x20000640

080051a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051ae:	4b29      	ldr	r3, [pc, #164]	; (8005254 <prvAddCurrentTaskToDelayedList+0xb0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051b4:	4b28      	ldr	r3, [pc, #160]	; (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3304      	adds	r3, #4
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff f9a5 	bl	800450a <uxListRemove>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10b      	bne.n	80051de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80051c6:	4b24      	ldr	r3, [pc, #144]	; (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	2201      	movs	r2, #1
 80051ce:	fa02 f303 	lsl.w	r3, r2, r3
 80051d2:	43da      	mvns	r2, r3
 80051d4:	4b21      	ldr	r3, [pc, #132]	; (800525c <prvAddCurrentTaskToDelayedList+0xb8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4013      	ands	r3, r2
 80051da:	4a20      	ldr	r2, [pc, #128]	; (800525c <prvAddCurrentTaskToDelayedList+0xb8>)
 80051dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051e4:	d10a      	bne.n	80051fc <prvAddCurrentTaskToDelayedList+0x58>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d007      	beq.n	80051fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051ec:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3304      	adds	r3, #4
 80051f2:	4619      	mov	r1, r3
 80051f4:	481a      	ldr	r0, [pc, #104]	; (8005260 <prvAddCurrentTaskToDelayedList+0xbc>)
 80051f6:	f7ff f92b 	bl	8004450 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051fa:	e026      	b.n	800524a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4413      	add	r3, r2
 8005202:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005204:	4b14      	ldr	r3, [pc, #80]	; (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	429a      	cmp	r2, r3
 8005212:	d209      	bcs.n	8005228 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005214:	4b13      	ldr	r3, [pc, #76]	; (8005264 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	4b0f      	ldr	r3, [pc, #60]	; (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3304      	adds	r3, #4
 800521e:	4619      	mov	r1, r3
 8005220:	4610      	mov	r0, r2
 8005222:	f7ff f939 	bl	8004498 <vListInsert>
}
 8005226:	e010      	b.n	800524a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005228:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <prvAddCurrentTaskToDelayedList+0xc4>)
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3304      	adds	r3, #4
 8005232:	4619      	mov	r1, r3
 8005234:	4610      	mov	r0, r2
 8005236:	f7ff f92f 	bl	8004498 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800523a:	4b0c      	ldr	r3, [pc, #48]	; (800526c <prvAddCurrentTaskToDelayedList+0xc8>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	429a      	cmp	r2, r3
 8005242:	d202      	bcs.n	800524a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005244:	4a09      	ldr	r2, [pc, #36]	; (800526c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	6013      	str	r3, [r2, #0]
}
 800524a:	bf00      	nop
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	2000063c 	.word	0x2000063c
 8005258:	200005b4 	.word	0x200005b4
 800525c:	20000640 	.word	0x20000640
 8005260:	20000624 	.word	0x20000624
 8005264:	2000060c 	.word	0x2000060c
 8005268:	20000608 	.word	0x20000608
 800526c:	20000654 	.word	0x20000654

08005270 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b08a      	sub	sp, #40	; 0x28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800527e:	2300      	movs	r3, #0
 8005280:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10a      	bne.n	800529e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	623b      	str	r3, [r7, #32]
}
 800529a:	bf00      	nop
 800529c:	e7fe      	b.n	800529c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800529e:	4b1a      	ldr	r3, [pc, #104]	; (8005308 <xTimerGenericCommand+0x98>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d02a      	beq.n	80052fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b05      	cmp	r3, #5
 80052b6:	dc18      	bgt.n	80052ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80052b8:	f7ff fed0 	bl	800505c <xTaskGetSchedulerState>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d109      	bne.n	80052d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80052c2:	4b11      	ldr	r3, [pc, #68]	; (8005308 <xTimerGenericCommand+0x98>)
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	f107 0114 	add.w	r1, r7, #20
 80052ca:	2300      	movs	r3, #0
 80052cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ce:	f7ff f947 	bl	8004560 <xQueueGenericSend>
 80052d2:	6278      	str	r0, [r7, #36]	; 0x24
 80052d4:	e012      	b.n	80052fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80052d6:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <xTimerGenericCommand+0x98>)
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	f107 0114 	add.w	r1, r7, #20
 80052de:	2300      	movs	r3, #0
 80052e0:	2200      	movs	r2, #0
 80052e2:	f7ff f93d 	bl	8004560 <xQueueGenericSend>
 80052e6:	6278      	str	r0, [r7, #36]	; 0x24
 80052e8:	e008      	b.n	80052fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80052ea:	4b07      	ldr	r3, [pc, #28]	; (8005308 <xTimerGenericCommand+0x98>)
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	f107 0114 	add.w	r1, r7, #20
 80052f2:	2300      	movs	r3, #0
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	f7ff fa31 	bl	800475c <xQueueGenericSendFromISR>
 80052fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3728      	adds	r7, #40	; 0x28
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	2000065c 	.word	0x2000065c
 800530c:	00000000 	.word	0x00000000

08005310 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005310:	4b07      	ldr	r3, [pc, #28]	; (8005330 <pxCurrentTCBConst2>)
 8005312:	6819      	ldr	r1, [r3, #0]
 8005314:	6808      	ldr	r0, [r1, #0]
 8005316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800531a:	f380 8809 	msr	PSP, r0
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f04f 0000 	mov.w	r0, #0
 8005326:	f380 8811 	msr	BASEPRI, r0
 800532a:	4770      	bx	lr
 800532c:	f3af 8000 	nop.w

08005330 <pxCurrentTCBConst2>:
 8005330:	200005b4 	.word	0x200005b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop

08005338 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	607b      	str	r3, [r7, #4]
}
 8005350:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005352:	4b0f      	ldr	r3, [pc, #60]	; (8005390 <vPortEnterCritical+0x58>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3301      	adds	r3, #1
 8005358:	4a0d      	ldr	r2, [pc, #52]	; (8005390 <vPortEnterCritical+0x58>)
 800535a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800535c:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <vPortEnterCritical+0x58>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d10f      	bne.n	8005384 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005364:	4b0b      	ldr	r3, [pc, #44]	; (8005394 <vPortEnterCritical+0x5c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <vPortEnterCritical+0x4c>
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	603b      	str	r3, [r7, #0]
}
 8005380:	bf00      	nop
 8005382:	e7fe      	b.n	8005382 <vPortEnterCritical+0x4a>
	}
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	2000000c 	.word	0x2000000c
 8005394:	e000ed04 	.word	0xe000ed04

08005398 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800539e:	4b12      	ldr	r3, [pc, #72]	; (80053e8 <vPortExitCritical+0x50>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <vPortExitCritical+0x24>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	607b      	str	r3, [r7, #4]
}
 80053b8:	bf00      	nop
 80053ba:	e7fe      	b.n	80053ba <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80053bc:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <vPortExitCritical+0x50>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3b01      	subs	r3, #1
 80053c2:	4a09      	ldr	r2, [pc, #36]	; (80053e8 <vPortExitCritical+0x50>)
 80053c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053c6:	4b08      	ldr	r3, [pc, #32]	; (80053e8 <vPortExitCritical+0x50>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d105      	bne.n	80053da <vPortExitCritical+0x42>
 80053ce:	2300      	movs	r3, #0
 80053d0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	f383 8811 	msr	BASEPRI, r3
}
 80053d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	2000000c 	.word	0x2000000c
 80053ec:	00000000 	.word	0x00000000

080053f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053f0:	f3ef 8009 	mrs	r0, PSP
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	4b15      	ldr	r3, [pc, #84]	; (8005450 <pxCurrentTCBConst>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	f01e 0f10 	tst.w	lr, #16
 8005400:	bf08      	it	eq
 8005402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540a:	6010      	str	r0, [r2, #0]
 800540c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005410:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005414:	f380 8811 	msr	BASEPRI, r0
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f7ff fc90 	bl	8004d44 <vTaskSwitchContext>
 8005424:	f04f 0000 	mov.w	r0, #0
 8005428:	f380 8811 	msr	BASEPRI, r0
 800542c:	bc09      	pop	{r0, r3}
 800542e:	6819      	ldr	r1, [r3, #0]
 8005430:	6808      	ldr	r0, [r1, #0]
 8005432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005436:	f01e 0f10 	tst.w	lr, #16
 800543a:	bf08      	it	eq
 800543c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005440:	f380 8809 	msr	PSP, r0
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	f3af 8000 	nop.w

08005450 <pxCurrentTCBConst>:
 8005450:	200005b4 	.word	0x200005b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005454:	bf00      	nop
 8005456:	bf00      	nop

08005458 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	607b      	str	r3, [r7, #4]
}
 8005470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005472:	f7ff fbaf 	bl	8004bd4 <xTaskIncrementTick>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800547c:	4b06      	ldr	r3, [pc, #24]	; (8005498 <SysTick_Handler+0x40>)
 800547e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	2300      	movs	r3, #0
 8005486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	f383 8811 	msr	BASEPRI, r3
}
 800548e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005490:	bf00      	nop
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	e000ed04 	.word	0xe000ed04

0800549c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80054a2:	f3ef 8305 	mrs	r3, IPSR
 80054a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b0f      	cmp	r3, #15
 80054ac:	d914      	bls.n	80054d8 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80054ae:	4a17      	ldr	r2, [pc, #92]	; (800550c <vPortValidateInterruptPriority+0x70>)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4413      	add	r3, r2
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80054b8:	4b15      	ldr	r3, [pc, #84]	; (8005510 <vPortValidateInterruptPriority+0x74>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	7afa      	ldrb	r2, [r7, #11]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d20a      	bcs.n	80054d8 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	607b      	str	r3, [r7, #4]
}
 80054d4:	bf00      	nop
 80054d6:	e7fe      	b.n	80054d6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054d8:	4b0e      	ldr	r3, [pc, #56]	; (8005514 <vPortValidateInterruptPriority+0x78>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054e0:	4b0d      	ldr	r3, [pc, #52]	; (8005518 <vPortValidateInterruptPriority+0x7c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d90a      	bls.n	80054fe <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	603b      	str	r3, [r7, #0]
}
 80054fa:	bf00      	nop
 80054fc:	e7fe      	b.n	80054fc <vPortValidateInterruptPriority+0x60>
	}
 80054fe:	bf00      	nop
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	e000e3f0 	.word	0xe000e3f0
 8005510:	20000660 	.word	0x20000660
 8005514:	e000ed0c 	.word	0xe000ed0c
 8005518:	20000664 	.word	0x20000664

0800551c <__libc_init_array>:
 800551c:	b570      	push	{r4, r5, r6, lr}
 800551e:	4d0d      	ldr	r5, [pc, #52]	; (8005554 <__libc_init_array+0x38>)
 8005520:	4c0d      	ldr	r4, [pc, #52]	; (8005558 <__libc_init_array+0x3c>)
 8005522:	1b64      	subs	r4, r4, r5
 8005524:	10a4      	asrs	r4, r4, #2
 8005526:	2600      	movs	r6, #0
 8005528:	42a6      	cmp	r6, r4
 800552a:	d109      	bne.n	8005540 <__libc_init_array+0x24>
 800552c:	4d0b      	ldr	r5, [pc, #44]	; (800555c <__libc_init_array+0x40>)
 800552e:	4c0c      	ldr	r4, [pc, #48]	; (8005560 <__libc_init_array+0x44>)
 8005530:	f000 f82e 	bl	8005590 <_init>
 8005534:	1b64      	subs	r4, r4, r5
 8005536:	10a4      	asrs	r4, r4, #2
 8005538:	2600      	movs	r6, #0
 800553a:	42a6      	cmp	r6, r4
 800553c:	d105      	bne.n	800554a <__libc_init_array+0x2e>
 800553e:	bd70      	pop	{r4, r5, r6, pc}
 8005540:	f855 3b04 	ldr.w	r3, [r5], #4
 8005544:	4798      	blx	r3
 8005546:	3601      	adds	r6, #1
 8005548:	e7ee      	b.n	8005528 <__libc_init_array+0xc>
 800554a:	f855 3b04 	ldr.w	r3, [r5], #4
 800554e:	4798      	blx	r3
 8005550:	3601      	adds	r6, #1
 8005552:	e7f2      	b.n	800553a <__libc_init_array+0x1e>
 8005554:	0800567c 	.word	0x0800567c
 8005558:	0800567c 	.word	0x0800567c
 800555c:	0800567c 	.word	0x0800567c
 8005560:	08005680 	.word	0x08005680

08005564 <memcpy>:
 8005564:	440a      	add	r2, r1
 8005566:	4291      	cmp	r1, r2
 8005568:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800556c:	d100      	bne.n	8005570 <memcpy+0xc>
 800556e:	4770      	bx	lr
 8005570:	b510      	push	{r4, lr}
 8005572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800557a:	4291      	cmp	r1, r2
 800557c:	d1f9      	bne.n	8005572 <memcpy+0xe>
 800557e:	bd10      	pop	{r4, pc}

08005580 <memset>:
 8005580:	4402      	add	r2, r0
 8005582:	4603      	mov	r3, r0
 8005584:	4293      	cmp	r3, r2
 8005586:	d100      	bne.n	800558a <memset+0xa>
 8005588:	4770      	bx	lr
 800558a:	f803 1b01 	strb.w	r1, [r3], #1
 800558e:	e7f9      	b.n	8005584 <memset+0x4>

08005590 <_init>:
 8005590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005592:	bf00      	nop
 8005594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005596:	bc08      	pop	{r3}
 8005598:	469e      	mov	lr, r3
 800559a:	4770      	bx	lr

0800559c <_fini>:
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	bf00      	nop
 80055a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a2:	bc08      	pop	{r3}
 80055a4:	469e      	mov	lr, r3
 80055a6:	4770      	bx	lr
