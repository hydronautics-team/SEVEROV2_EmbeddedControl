
Severov_Right_Version.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  0800c950  0800c950  0001c950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb48  0800cb48  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb48  0800cb48  0001cb48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb50  0800cb50  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb50  0800cb50  0001cb50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb54  0800cb54  0001cb54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0800cb58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020188  2**0
                  CONTENTS
 10 .bss          00002b24  20000188  20000188  00020188  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002cac  20002cac  00020188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 13 .debug_info   000232a6  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e96  00000000  00000000  0004345e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a90  00000000  00000000  000482f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001888  00000000  00000000  00049d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025acd  00000000  00000000  0004b610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022262  00000000  00000000  000710dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9a68  00000000  00000000  0009333f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016cda7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000746c  00000000  00000000  0016cdf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000188 	.word	0x20000188
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c934 	.word	0x0800c934

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000018c 	.word	0x2000018c
 80001cc:	0800c934 	.word	0x0800c934

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b974 	b.w	8000e6c <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468e      	mov	lr, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d14d      	bne.n	8000c46 <__udivmoddi4+0xaa>
 8000baa:	428a      	cmp	r2, r1
 8000bac:	4694      	mov	ip, r2
 8000bae:	d969      	bls.n	8000c84 <__udivmoddi4+0xe8>
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	b152      	cbz	r2, 8000bcc <__udivmoddi4+0x30>
 8000bb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bba:	f1c2 0120 	rsb	r1, r2, #32
 8000bbe:	fa20 f101 	lsr.w	r1, r0, r1
 8000bc2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bca:	4094      	lsls	r4, r2
 8000bcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd0:	0c21      	lsrs	r1, r4, #16
 8000bd2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bd6:	fa1f f78c 	uxth.w	r7, ip
 8000bda:	fb08 e316 	mls	r3, r8, r6, lr
 8000bde:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000be2:	fb06 f107 	mul.w	r1, r6, r7
 8000be6:	4299      	cmp	r1, r3
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x64>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bf2:	f080 811f 	bcs.w	8000e34 <__udivmoddi4+0x298>
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	f240 811c 	bls.w	8000e34 <__udivmoddi4+0x298>
 8000bfc:	3e02      	subs	r6, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a5b      	subs	r3, r3, r1
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c08:	fb08 3310 	mls	r3, r8, r0, r3
 8000c0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c10:	fb00 f707 	mul.w	r7, r0, r7
 8000c14:	42a7      	cmp	r7, r4
 8000c16:	d90a      	bls.n	8000c2e <__udivmoddi4+0x92>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c20:	f080 810a 	bcs.w	8000e38 <__udivmoddi4+0x29c>
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	f240 8107 	bls.w	8000e38 <__udivmoddi4+0x29c>
 8000c2a:	4464      	add	r4, ip
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c32:	1be4      	subs	r4, r4, r7
 8000c34:	2600      	movs	r6, #0
 8000c36:	b11d      	cbz	r5, 8000c40 <__udivmoddi4+0xa4>
 8000c38:	40d4      	lsrs	r4, r2
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c40:	4631      	mov	r1, r6
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d909      	bls.n	8000c5e <__udivmoddi4+0xc2>
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	f000 80ef 	beq.w	8000e2e <__udivmoddi4+0x292>
 8000c50:	2600      	movs	r6, #0
 8000c52:	e9c5 0100 	strd	r0, r1, [r5]
 8000c56:	4630      	mov	r0, r6
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	fab3 f683 	clz	r6, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d14a      	bne.n	8000cfc <__udivmoddi4+0x160>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d302      	bcc.n	8000c70 <__udivmoddi4+0xd4>
 8000c6a:	4282      	cmp	r2, r0
 8000c6c:	f200 80f9 	bhi.w	8000e62 <__udivmoddi4+0x2c6>
 8000c70:	1a84      	subs	r4, r0, r2
 8000c72:	eb61 0303 	sbc.w	r3, r1, r3
 8000c76:	2001      	movs	r0, #1
 8000c78:	469e      	mov	lr, r3
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d0e0      	beq.n	8000c40 <__udivmoddi4+0xa4>
 8000c7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c82:	e7dd      	b.n	8000c40 <__udivmoddi4+0xa4>
 8000c84:	b902      	cbnz	r2, 8000c88 <__udivmoddi4+0xec>
 8000c86:	deff      	udf	#255	; 0xff
 8000c88:	fab2 f282 	clz	r2, r2
 8000c8c:	2a00      	cmp	r2, #0
 8000c8e:	f040 8092 	bne.w	8000db6 <__udivmoddi4+0x21a>
 8000c92:	eba1 010c 	sub.w	r1, r1, ip
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	2601      	movs	r6, #1
 8000ca0:	0c20      	lsrs	r0, r4, #16
 8000ca2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ca6:	fb07 1113 	mls	r1, r7, r3, r1
 8000caa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cae:	fb0e f003 	mul.w	r0, lr, r3
 8000cb2:	4288      	cmp	r0, r1
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x12c>
 8000cb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cba:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x12a>
 8000cc0:	4288      	cmp	r0, r1
 8000cc2:	f200 80cb 	bhi.w	8000e5c <__udivmoddi4+0x2c0>
 8000cc6:	4643      	mov	r3, r8
 8000cc8:	1a09      	subs	r1, r1, r0
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x156>
 8000ce0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ce8:	d202      	bcs.n	8000cf0 <__udivmoddi4+0x154>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f200 80bb 	bhi.w	8000e66 <__udivmoddi4+0x2ca>
 8000cf0:	4608      	mov	r0, r1
 8000cf2:	eba4 040e 	sub.w	r4, r4, lr
 8000cf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cfa:	e79c      	b.n	8000c36 <__udivmoddi4+0x9a>
 8000cfc:	f1c6 0720 	rsb	r7, r6, #32
 8000d00:	40b3      	lsls	r3, r6
 8000d02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d12:	431c      	orrs	r4, r3
 8000d14:	40f9      	lsrs	r1, r7
 8000d16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d22:	0c20      	lsrs	r0, r4, #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fb09 1118 	mls	r1, r9, r8, r1
 8000d2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d30:	fb08 f00e 	mul.w	r0, r8, lr
 8000d34:	4288      	cmp	r0, r1
 8000d36:	fa02 f206 	lsl.w	r2, r2, r6
 8000d3a:	d90b      	bls.n	8000d54 <__udivmoddi4+0x1b8>
 8000d3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d40:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d44:	f080 8088 	bcs.w	8000e58 <__udivmoddi4+0x2bc>
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	f240 8085 	bls.w	8000e58 <__udivmoddi4+0x2bc>
 8000d4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d52:	4461      	add	r1, ip
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d68:	458e      	cmp	lr, r1
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x1e2>
 8000d6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d70:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d74:	d26c      	bcs.n	8000e50 <__udivmoddi4+0x2b4>
 8000d76:	458e      	cmp	lr, r1
 8000d78:	d96a      	bls.n	8000e50 <__udivmoddi4+0x2b4>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4461      	add	r1, ip
 8000d7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d82:	fba0 9402 	umull	r9, r4, r0, r2
 8000d86:	eba1 010e 	sub.w	r1, r1, lr
 8000d8a:	42a1      	cmp	r1, r4
 8000d8c:	46c8      	mov	r8, r9
 8000d8e:	46a6      	mov	lr, r4
 8000d90:	d356      	bcc.n	8000e40 <__udivmoddi4+0x2a4>
 8000d92:	d053      	beq.n	8000e3c <__udivmoddi4+0x2a0>
 8000d94:	b15d      	cbz	r5, 8000dae <__udivmoddi4+0x212>
 8000d96:	ebb3 0208 	subs.w	r2, r3, r8
 8000d9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000da2:	fa22 f306 	lsr.w	r3, r2, r6
 8000da6:	40f1      	lsrs	r1, r6
 8000da8:	431f      	orrs	r7, r3
 8000daa:	e9c5 7100 	strd	r7, r1, [r5]
 8000dae:	2600      	movs	r6, #0
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	f1c2 0320 	rsb	r3, r2, #32
 8000dba:	40d8      	lsrs	r0, r3
 8000dbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dc4:	4091      	lsls	r1, r2
 8000dc6:	4301      	orrs	r1, r0
 8000dc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dcc:	fa1f fe8c 	uxth.w	lr, ip
 8000dd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000dd8:	0c0b      	lsrs	r3, r1, #16
 8000dda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dde:	fb00 f60e 	mul.w	r6, r0, lr
 8000de2:	429e      	cmp	r6, r3
 8000de4:	fa04 f402 	lsl.w	r4, r4, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x260>
 8000dea:	eb1c 0303 	adds.w	r3, ip, r3
 8000dee:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000df2:	d22f      	bcs.n	8000e54 <__udivmoddi4+0x2b8>
 8000df4:	429e      	cmp	r6, r3
 8000df6:	d92d      	bls.n	8000e54 <__udivmoddi4+0x2b8>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	1b9b      	subs	r3, r3, r6
 8000dfe:	b289      	uxth	r1, r1
 8000e00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e04:	fb07 3316 	mls	r3, r7, r6, r3
 8000e08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e10:	428b      	cmp	r3, r1
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x28a>
 8000e14:	eb1c 0101 	adds.w	r1, ip, r1
 8000e18:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e1c:	d216      	bcs.n	8000e4c <__udivmoddi4+0x2b0>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d914      	bls.n	8000e4c <__udivmoddi4+0x2b0>
 8000e22:	3e02      	subs	r6, #2
 8000e24:	4461      	add	r1, ip
 8000e26:	1ac9      	subs	r1, r1, r3
 8000e28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e2c:	e738      	b.n	8000ca0 <__udivmoddi4+0x104>
 8000e2e:	462e      	mov	r6, r5
 8000e30:	4628      	mov	r0, r5
 8000e32:	e705      	b.n	8000c40 <__udivmoddi4+0xa4>
 8000e34:	4606      	mov	r6, r0
 8000e36:	e6e3      	b.n	8000c00 <__udivmoddi4+0x64>
 8000e38:	4618      	mov	r0, r3
 8000e3a:	e6f8      	b.n	8000c2e <__udivmoddi4+0x92>
 8000e3c:	454b      	cmp	r3, r9
 8000e3e:	d2a9      	bcs.n	8000d94 <__udivmoddi4+0x1f8>
 8000e40:	ebb9 0802 	subs.w	r8, r9, r2
 8000e44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e48:	3801      	subs	r0, #1
 8000e4a:	e7a3      	b.n	8000d94 <__udivmoddi4+0x1f8>
 8000e4c:	4646      	mov	r6, r8
 8000e4e:	e7ea      	b.n	8000e26 <__udivmoddi4+0x28a>
 8000e50:	4620      	mov	r0, r4
 8000e52:	e794      	b.n	8000d7e <__udivmoddi4+0x1e2>
 8000e54:	4640      	mov	r0, r8
 8000e56:	e7d1      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e58:	46d0      	mov	r8, sl
 8000e5a:	e77b      	b.n	8000d54 <__udivmoddi4+0x1b8>
 8000e5c:	3b02      	subs	r3, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	e732      	b.n	8000cc8 <__udivmoddi4+0x12c>
 8000e62:	4630      	mov	r0, r6
 8000e64:	e709      	b.n	8000c7a <__udivmoddi4+0xde>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e742      	b.n	8000cf2 <__udivmoddi4+0x156>

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <fromTickToMs>:

uint32_t fromSecToTick(float sec) {
	return (sec * configTICK_RATE_HZ);
}

float fromTickToMs(uint32_t ticks) {
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	return ((float) (ticks) * 1000.0f) / (float) configTICK_RATE_HZ;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	ee07 3a90 	vmov	s15, r3
 8000e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e82:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000ea4 <fromTickToMs+0x34>
 8000e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e8a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000ea4 <fromTickToMs+0x34>
 8000e8e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000e92:	eef0 7a66 	vmov.f32	s15, s13
}
 8000e96:	eeb0 0a67 	vmov.f32	s0, s15
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	447a0000 	.word	0x447a0000

08000ea8 <GetCrc16Checksumm>:
#include "checksum.h"

uint16_t GetCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 8000eb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eb8:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	len = len-2;
 8000eba:	887b      	ldrh	r3, [r7, #2]
 8000ebc:	3b02      	subs	r3, #2
 8000ebe:	807b      	strh	r3, [r7, #2]

    while (len--) {
 8000ec0:	e025      	b.n	8000f0e <GetCrc16Checksumm+0x66>
        crc ^= *pcBlock++ << 8;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	b21a      	sxth	r2, r3
 8000ece:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ed2:	4053      	eors	r3, r2
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	81fb      	strh	r3, [r7, #14]

        for (i = 0; i < 8; i++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	737b      	strb	r3, [r7, #13]
 8000edc:	e014      	b.n	8000f08 <GetCrc16Checksumm+0x60>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 8000ede:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	da09      	bge.n	8000efa <GetCrc16Checksumm+0x52>
 8000ee6:	89fb      	ldrh	r3, [r7, #14]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000ef0:	f083 0301 	eor.w	r3, r3, #1
 8000ef4:	b21b      	sxth	r3, r3
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	e002      	b.n	8000f00 <GetCrc16Checksumm+0x58>
 8000efa:	89fb      	ldrh	r3, [r7, #14]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++)
 8000f02:	7b7b      	ldrb	r3, [r7, #13]
 8000f04:	3301      	adds	r3, #1
 8000f06:	737b      	strb	r3, [r7, #13]
 8000f08:	7b7b      	ldrb	r3, [r7, #13]
 8000f0a:	2b07      	cmp	r3, #7
 8000f0c:	d9e7      	bls.n	8000ede <GetCrc16Checksumm+0x36>
    while (len--) {
 8000f0e:	887b      	ldrh	r3, [r7, #2]
 8000f10:	1e5a      	subs	r2, r3, #1
 8000f12:	807a      	strh	r2, [r7, #2]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1d4      	bne.n	8000ec2 <GetCrc16Checksumm+0x1a>
    }
    return crc;
 8000f18:	89fb      	ldrh	r3, [r7, #14]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <IsCrc16ChecksummCorrect>:

bool IsCrc16ChecksummCorrect(uint8_t *pcBlock, uint16_t len)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	807b      	strh	r3, [r7, #2]
	uint16_t crc_calculated = GetCrc16Checksumm(pcBlock, len);
 8000f32:	887b      	ldrh	r3, [r7, #2]
 8000f34:	4619      	mov	r1, r3
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ffb6 	bl	8000ea8 <GetCrc16Checksumm>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	82fb      	strh	r3, [r7, #22]

	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 8000f40:	887b      	ldrh	r3, [r7, #2]
 8000f42:	3b02      	subs	r3, #2
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	4413      	add	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
	uint16_t crc_got = *crc_pointer;
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	81fb      	strh	r3, [r7, #14]

	if(crc_got == crc_calculated) {
 8000f50:	89fa      	ldrh	r2, [r7, #14]
 8000f52:	8afb      	ldrh	r3, [r7, #22]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d101      	bne.n	8000f5c <IsCrc16ChecksummCorrect+0x36>
		return true;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <IsCrc16ChecksummCorrect+0x38>
	}
	else {
		return false;
 8000f5c:	2300      	movs	r3, #0
	}
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <AddCrc16Checksumm>:

void AddCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b084      	sub	sp, #16
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	807b      	strh	r3, [r7, #2]
	uint16_t crc = GetCrc16Checksumm(pcBlock, len);
 8000f72:	887b      	ldrh	r3, [r7, #2]
 8000f74:	4619      	mov	r1, r3
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ff96 	bl	8000ea8 <GetCrc16Checksumm>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	81fb      	strh	r3, [r7, #14]
	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 8000f80:	887b      	ldrh	r3, [r7, #2]
 8000f82:	3b02      	subs	r3, #2
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	4413      	add	r3, r2
 8000f88:	60bb      	str	r3, [r7, #8]
	*crc_pointer = crc;
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	89fa      	ldrh	r2, [r7, #14]
 8000f8e:	801a      	strh	r2, [r3, #0]
}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <IsChecksumm8bCorrect>:
    msg[length - 2] = (uint8_t) (crc >> 8);
    msg[length - 1] = (uint8_t) crc;
}

bool IsChecksumm8bCorrect(uint8_t *msg, uint16_t length)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
    uint8_t crcGot, crc = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	75fb      	strb	r3, [r7, #23]
    int i;

    crcGot = msg[length-1] ;
 8000fa8:	887b      	ldrh	r3, [r7, #2]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	73fb      	strb	r3, [r7, #15]

        for(i=0; i < length - 1; i++){
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	e009      	b.n	8000fce <IsChecksumm8bCorrect+0x36>
            crc ^= msg[i];
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781a      	ldrb	r2, [r3, #0]
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
 8000fc4:	4053      	eors	r3, r2
 8000fc6:	75fb      	strb	r3, [r7, #23]
        for(i=0; i < length - 1; i++){
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	887b      	ldrh	r3, [r7, #2]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	dbf0      	blt.n	8000fba <IsChecksumm8bCorrect+0x22>
        }

    if(crc == crcGot)
 8000fd8:	7dfa      	ldrb	r2, [r7, #23]
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d101      	bne.n	8000fe4 <IsChecksumm8bCorrect+0x4c>
        return 1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <IsChecksumm8bCorrect+0x4e>
    else return 0;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	371c      	adds	r7, #28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <AddChecksumm8b>:

void AddChecksumm8b(uint8_t *msg, uint16_t length)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b085      	sub	sp, #20
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]
	int i = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]

	for(i=0; i < length - 1; i++) {
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	e009      	b.n	8001020 <AddChecksumm8b+0x2e>
		crc ^= msg[i];
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	781a      	ldrb	r2, [r3, #0]
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	4053      	eors	r3, r2
 8001018:	73fb      	strb	r3, [r7, #15]
	for(i=0; i < length - 1; i++) {
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	3301      	adds	r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	887b      	ldrh	r3, [r7, #2]
 8001022:	3b01      	subs	r3, #1
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	429a      	cmp	r2, r3
 8001028:	dbf0      	blt.n	800100c <AddChecksumm8b+0x1a>
	}

	msg[length-1] = crc;
 800102a:	887b      	ldrh	r3, [r7, #2]
 800102c:	3b01      	subs	r3, #1
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	701a      	strb	r2, [r3, #0]
}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <IsChecksumm8bCorrectVma>:

bool IsChecksumm8bCorrectVma(uint8_t *msg, uint16_t length)
{
 8001042:	b480      	push	{r7}
 8001044:	b087      	sub	sp, #28
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	460b      	mov	r3, r1
 800104c:	807b      	strh	r3, [r7, #2]
	uint8_t crcGot, crc = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	75fb      	strb	r3, [r7, #23]
	int i;

	crcGot = msg[length-1] ;
 8001052:	887b      	ldrh	r3, [r7, #2]
 8001054:	3b01      	subs	r3, #1
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	73fb      	strb	r3, [r7, #15]

	for (i = 1; i < length - 1; ++i) {
 800105e:	2301      	movs	r3, #1
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	e009      	b.n	8001078 <IsChecksumm8bCorrectVma+0x36>
		crc ^= msg[i];
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	781a      	ldrb	r2, [r3, #0]
 800106c:	7dfb      	ldrb	r3, [r7, #23]
 800106e:	4053      	eors	r3, r2
 8001070:	75fb      	strb	r3, [r7, #23]
	for (i = 1; i < length - 1; ++i) {
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	3301      	adds	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	887b      	ldrh	r3, [r7, #2]
 800107a:	3b01      	subs	r3, #1
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	429a      	cmp	r2, r3
 8001080:	dbf0      	blt.n	8001064 <IsChecksumm8bCorrectVma+0x22>
	}

	if (crc == crcGot) {
 8001082:	7dfa      	ldrb	r2, [r7, #23]
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	429a      	cmp	r2, r3
 8001088:	d101      	bne.n	800108e <IsChecksumm8bCorrectVma+0x4c>
		return 1;
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <IsChecksumm8bCorrectVma+0x4e>
	}
	else {
		return 0;
 800108e:	2300      	movs	r3, #0
	}
}
 8001090:	4618      	mov	r0, r3
 8001092:	371c      	adds	r7, #28
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <AddChecksumm8bVma>:

void AddChecksumm8bVma(uint8_t *msg, uint16_t length)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]

	for(int i = 1; i < length - 1; i++) {
 80010ac:	2301      	movs	r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	e009      	b.n	80010c6 <AddChecksumm8bVma+0x2a>
		crc ^= msg[i];
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	4413      	add	r3, r2
 80010b8:	781a      	ldrb	r2, [r3, #0]
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	4053      	eors	r3, r2
 80010be:	73fb      	strb	r3, [r7, #15]
	for(int i = 1; i < length - 1; i++) {
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	3301      	adds	r3, #1
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	887b      	ldrh	r3, [r7, #2]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dbf0      	blt.n	80010b2 <AddChecksumm8bVma+0x16>
	}

	msg[length-1] = crc;
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	4413      	add	r3, r2
 80010d8:	7bfa      	ldrb	r2, [r7, #15]
 80010da:	701a      	strb	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <PickBit>:
        array[i] = 0x00;
    }
}

bool PickBit(uint8_t input, uint8_t bit)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	460a      	mov	r2, r1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	4613      	mov	r3, r2
 80010f6:	71bb      	strb	r3, [r7, #6]
	//return (bool) ((input << (7 - bit)) >> 7);

	switch(bit) {
 80010f8:	79bb      	ldrb	r3, [r7, #6]
 80010fa:	2b07      	cmp	r3, #7
 80010fc:	d857      	bhi.n	80011ae <PickBit+0xc6>
 80010fe:	a201      	add	r2, pc, #4	; (adr r2, 8001104 <PickBit+0x1c>)
 8001100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001104:	08001125 	.word	0x08001125
 8001108:	08001137 	.word	0x08001137
 800110c:	08001149 	.word	0x08001149
 8001110:	0800115b 	.word	0x0800115b
 8001114:	0800116d 	.word	0x0800116d
 8001118:	0800117f 	.word	0x0800117f
 800111c:	08001191 	.word	0x08001191
 8001120:	080011a3 	.word	0x080011a3
	case 0:
			return (bool) (input & 0b00000001);
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	bf14      	ite	ne
 800112e:	2301      	movne	r3, #1
 8001130:	2300      	moveq	r3, #0
 8001132:	b2db      	uxtb	r3, r3
 8001134:	e03c      	b.n	80011b0 <PickBit+0xc8>
	case 1:
			return (bool) (input & 0b00000010);
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	bf14      	ite	ne
 8001140:	2301      	movne	r3, #1
 8001142:	2300      	moveq	r3, #0
 8001144:	b2db      	uxtb	r3, r3
 8001146:	e033      	b.n	80011b0 <PickBit+0xc8>
	case 2:
			return (bool) (input & 0b00000100);
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	2b00      	cmp	r3, #0
 8001150:	bf14      	ite	ne
 8001152:	2301      	movne	r3, #1
 8001154:	2300      	moveq	r3, #0
 8001156:	b2db      	uxtb	r3, r3
 8001158:	e02a      	b.n	80011b0 <PickBit+0xc8>
	case 3:
			return (bool) (input & 0b00001000);
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	2b00      	cmp	r3, #0
 8001162:	bf14      	ite	ne
 8001164:	2301      	movne	r3, #1
 8001166:	2300      	moveq	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	e021      	b.n	80011b0 <PickBit+0xc8>
	case 4:
			return (bool) (input & 0b00010000);
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	2b00      	cmp	r3, #0
 8001174:	bf14      	ite	ne
 8001176:	2301      	movne	r3, #1
 8001178:	2300      	moveq	r3, #0
 800117a:	b2db      	uxtb	r3, r3
 800117c:	e018      	b.n	80011b0 <PickBit+0xc8>
	case 5:
			return (bool) (input & 0b00100000);
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f003 0320 	and.w	r3, r3, #32
 8001184:	2b00      	cmp	r3, #0
 8001186:	bf14      	ite	ne
 8001188:	2301      	movne	r3, #1
 800118a:	2300      	moveq	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	e00f      	b.n	80011b0 <PickBit+0xc8>
	case 6:
			return (bool) (input & 0b01000000);
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001196:	2b00      	cmp	r3, #0
 8001198:	bf14      	ite	ne
 800119a:	2301      	movne	r3, #1
 800119c:	2300      	moveq	r3, #0
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	e006      	b.n	80011b0 <PickBit+0xc8>
	case 7:
			return (bool) (input & 0b10000000);
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	09db      	lsrs	r3, r3, #7
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	e000      	b.n	80011b0 <PickBit+0xc8>
	}
	return false;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <variableInit>:

bool i2c1PackageReceived = false;
bool i2c2PackageReceived = false;

void variableInit()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 80011c2:	af00      	add	r7, sp, #0
	rComputer.reset = 0;
 80011c4:	4b47      	ldr	r3, [pc, #284]	; (80012e4 <variableInit+0x128>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]

	rState.cameraNum = 0;
 80011ca:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <variableInit+0x12c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
	rState.contourSelected = 0;
 80011d0:	4b45      	ldr	r3, [pc, #276]	; (80012e8 <variableInit+0x12c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	705a      	strb	r2, [r3, #1]
	rState.flash = 0;
 80011d6:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <variableInit+0x12c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	709a      	strb	r2, [r3, #2]
	rState.operationMode = 0;
 80011dc:	4b42      	ldr	r3, [pc, #264]	; (80012e8 <variableInit+0x12c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	70da      	strb	r2, [r3, #3]
	rState.pcCounter = 0;
 80011e2:	4b41      	ldr	r3, [pc, #260]	; (80012e8 <variableInit+0x12c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	711a      	strb	r2, [r3, #4]
	rState.lag_error = 0;
 80011e8:	4b3f      	ldr	r3, [pc, #252]	; (80012e8 <variableInit+0x12c>)
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]

	rSensors.yaw = 0;
 80011f0:	4b3e      	ldr	r3, [pc, #248]	; (80012ec <variableInit+0x130>)
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
	rSensors.raw_yaw = 0;
 80011f8:	4b3c      	ldr	r3, [pc, #240]	; (80012ec <variableInit+0x130>)
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
	rSensors.roll =  0;
 8001200:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <variableInit+0x130>)
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
	rSensors.pitch =  0;
 8001208:	4b38      	ldr	r3, [pc, #224]	; (80012ec <variableInit+0x130>)
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	605a      	str	r2, [r3, #4]

	rSensors.old_yaw = 0;
 8001210:	4b36      	ldr	r3, [pc, #216]	; (80012ec <variableInit+0x130>)
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
	rSensors.spins = 0;
 8001218:	4b34      	ldr	r3, [pc, #208]	; (80012ec <variableInit+0x130>)
 800121a:	2200      	movs	r2, #0
 800121c:	831a      	strh	r2, [r3, #24]

	rSensors.pressure = 0;
 800121e:	4b33      	ldr	r3, [pc, #204]	; (80012ec <variableInit+0x130>)
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	655a      	str	r2, [r3, #84]	; 0x54
	rSensors.pressure_null = 0;
 8001226:	4b31      	ldr	r3, [pc, #196]	; (80012ec <variableInit+0x130>)
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	659a      	str	r2, [r3, #88]	; 0x58

	rSensors.rollSpeed = 0;
 800122e:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <variableInit+0x130>)
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
	rSensors.pitchSpeed = 0;
 8001236:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <variableInit+0x130>)
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	621a      	str	r2, [r3, #32]
	rSensors.yawSpeed = 0;
 800123e:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <variableInit+0x130>)
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	; 0x24

	rSensors.accelX = 0;
 8001246:	4b29      	ldr	r3, [pc, #164]	; (80012ec <variableInit+0x130>)
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	629a      	str	r2, [r3, #40]	; 0x28
	rSensors.accelY = 0;
 800124e:	4b27      	ldr	r3, [pc, #156]	; (80012ec <variableInit+0x130>)
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c
	rSensors.accelZ = 0;
 8001256:	4b25      	ldr	r3, [pc, #148]	; (80012ec <variableInit+0x130>)
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	631a      	str	r2, [r3, #48]	; 0x30

	rSensors.magX = 0;
 800125e:	4b23      	ldr	r3, [pc, #140]	; (80012ec <variableInit+0x130>)
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	635a      	str	r2, [r3, #52]	; 0x34
	rSensors.magY = 0;
 8001266:	4b21      	ldr	r3, [pc, #132]	; (80012ec <variableInit+0x130>)
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	639a      	str	r2, [r3, #56]	; 0x38
	rSensors.magZ = 0;
 800126e:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <variableInit+0x130>)
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	63da      	str	r2, [r3, #60]	; 0x3c

	rSensors.quatA = 0;
 8001276:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <variableInit+0x130>)
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	641a      	str	r2, [r3, #64]	; 0x40
	rSensors.quatB = 0;
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <variableInit+0x130>)
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	645a      	str	r2, [r3, #68]	; 0x44
	rSensors.quatC = 0;
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <variableInit+0x130>)
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	649a      	str	r2, [r3, #72]	; 0x48
	rSensors.quatD = 0;
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <variableInit+0x130>)
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	64da      	str	r2, [r3, #76]	; 0x4c

    rDevice[DEV1].address = 0x03;
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <variableInit+0x134>)
 8001298:	2203      	movs	r2, #3
 800129a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    rDevice[DEV2].address = 0x05;
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <variableInit+0x134>)
 80012a0:	2205      	movs	r2, #5
 80012a2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    rDevice[GRAB].address = 0x02;
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <variableInit+0x134>)
 80012a8:	2202      	movs	r2, #2
 80012aa:	729a      	strb	r2, [r3, #10]
    rDevice[GRAB_ROTATION].address = 0x06;
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <variableInit+0x134>)
 80012ae:	2206      	movs	r2, #6
 80012b0:	751a      	strb	r2, [r3, #20]
    rDevice[TILT].address = 0x01;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <variableInit+0x134>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	779a      	strb	r2, [r3, #30]

	rSensors.resetIMU = true;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <variableInit+0x130>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	thrustersInit();
 80012c0:	f003 fa2c 	bl	800471c <thrustersInit>

	// Flash reading
	struct flashConfiguration_s config;
	flashReadSettings(&config);
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4618      	mov	r0, r3
 80012c8:	f001 f9a4 	bl	8002614 <flashReadSettings>
	flashReadStructure(&config);
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 fb6e 	bl	80029b0 <flashReadStructure>

	// Thrusters initialization
	if(rState.flash) {
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <variableInit+0x12c>)
 80012d6:	789b      	ldrb	r3, [r3, #2]
 80012d8:	2b00      	cmp	r3, #0
		return;
	}
}
 80012da:	f507 770c 	add.w	r7, r7, #560	; 0x230
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20001c54 	.word	0x20001c54
 80012e8:	20001b20 	.word	0x20001b20
 80012ec:	20001bec 	.word	0x20001bec
 80012f0:	20001c70 	.word	0x20001c70

080012f4 <uartBusesInit>:

void uartBusesInit()
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
	// Shore UART configuration
	uartBus[SHORE_UART].huart = &huart3; // Link to huart will be set before receiving
 80012fa:	4b75      	ldr	r3, [pc, #468]	; (80014d0 <uartBusesInit+0x1dc>)
 80012fc:	4a75      	ldr	r2, [pc, #468]	; (80014d4 <uartBusesInit+0x1e0>)
 80012fe:	631a      	str	r2, [r3, #48]	; 0x30
	uartBus[SHORE_UART].rxBuffer = ShoreRequestBuffer;
 8001300:	4b73      	ldr	r3, [pc, #460]	; (80014d0 <uartBusesInit+0x1dc>)
 8001302:	4a75      	ldr	r2, [pc, #468]	; (80014d8 <uartBusesInit+0x1e4>)
 8001304:	601a      	str	r2, [r3, #0]
	uartBus[SHORE_UART].txBuffer = ShoreResponseBuffer;
 8001306:	4b72      	ldr	r3, [pc, #456]	; (80014d0 <uartBusesInit+0x1dc>)
 8001308:	4a74      	ldr	r2, [pc, #464]	; (80014dc <uartBusesInit+0x1e8>)
 800130a:	605a      	str	r2, [r3, #4]
	uartBus[SHORE_UART].rxLength = 0; // Length of the received message will be determined when first byte will be received
 800130c:	4b70      	ldr	r3, [pc, #448]	; (80014d0 <uartBusesInit+0x1dc>)
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	uartBus[SHORE_UART].txLength = 0; // Length of the transmitted message will be determined before transmit
 8001314:	4b6e      	ldr	r3, [pc, #440]	; (80014d0 <uartBusesInit+0x1dc>)
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	uartBus[SHORE_UART].brokenRxTolerance = 20;
 800131c:	4b6c      	ldr	r3, [pc, #432]	; (80014d0 <uartBusesInit+0x1dc>)
 800131e:	2214      	movs	r2, #20
 8001320:	771a      	strb	r2, [r3, #28]
	uartBus[SHORE_UART].timeoutRxTolerance = 500;
 8001322:	4b6b      	ldr	r3, [pc, #428]	; (80014d0 <uartBusesInit+0x1dc>)
 8001324:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001328:	621a      	str	r2, [r3, #32]
	uartBus[SHORE_UART].receiveTimeout = 200;
 800132a:	4b69      	ldr	r3, [pc, #420]	; (80014d0 <uartBusesInit+0x1dc>)
 800132c:	22c8      	movs	r2, #200	; 0xc8
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
	uartBus[SHORE_UART].transmitTimeout = 200;
 8001330:	4b67      	ldr	r3, [pc, #412]	; (80014d0 <uartBusesInit+0x1dc>)
 8001332:	22c8      	movs	r2, #200	; 0xc8
 8001334:	62da      	str	r2, [r3, #44]	; 0x2c
	uartBus[SHORE_UART].txrxType = TXRX_IT;
 8001336:	4b66      	ldr	r3, [pc, #408]	; (80014d0 <uartBusesInit+0x1dc>)
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	// Thrusters UART configuration
	uartBus[THRUSTERS_UART].huart = &huart1;
 800133e:	4b64      	ldr	r3, [pc, #400]	; (80014d0 <uartBusesInit+0x1dc>)
 8001340:	4a67      	ldr	r2, [pc, #412]	; (80014e0 <uartBusesInit+0x1ec>)
 8001342:	669a      	str	r2, [r3, #104]	; 0x68
	uartBus[THRUSTERS_UART].rxBuffer = 0; // Receive bugger will be set before receive
 8001344:	4b62      	ldr	r3, [pc, #392]	; (80014d0 <uartBusesInit+0x1dc>)
 8001346:	2200      	movs	r2, #0
 8001348:	639a      	str	r2, [r3, #56]	; 0x38
	uartBus[THRUSTERS_UART].txBuffer = 0; // Transmit bugger will be set before transmit
 800134a:	4b61      	ldr	r3, [pc, #388]	; (80014d0 <uartBusesInit+0x1dc>)
 800134c:	2200      	movs	r2, #0
 800134e:	63da      	str	r2, [r3, #60]	; 0x3c
	uartBus[THRUSTERS_UART].rxLength = 0; // Receive length will be set before transmit
 8001350:	4b5f      	ldr	r3, [pc, #380]	; (80014d0 <uartBusesInit+0x1dc>)
 8001352:	2200      	movs	r2, #0
 8001354:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	uartBus[THRUSTERS_UART].txLength = 0; // Transmit length will be set before transmit
 8001358:	4b5d      	ldr	r3, [pc, #372]	; (80014d0 <uartBusesInit+0x1dc>)
 800135a:	2200      	movs	r2, #0
 800135c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	uartBus[THRUSTERS_UART].brokenRxTolerance = 0; // There is no special event on this bus
 8001360:	4b5b      	ldr	r3, [pc, #364]	; (80014d0 <uartBusesInit+0x1dc>)
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	uartBus[THRUSTERS_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001368:	4b59      	ldr	r3, [pc, #356]	; (80014d0 <uartBusesInit+0x1dc>)
 800136a:	2200      	movs	r2, #0
 800136c:	659a      	str	r2, [r3, #88]	; 0x58
	uartBus[THRUSTERS_UART].receiveTimeout = 100;
 800136e:	4b58      	ldr	r3, [pc, #352]	; (80014d0 <uartBusesInit+0x1dc>)
 8001370:	2264      	movs	r2, #100	; 0x64
 8001372:	661a      	str	r2, [r3, #96]	; 0x60
	uartBus[THRUSTERS_UART].transmitTimeout = 100;
 8001374:	4b56      	ldr	r3, [pc, #344]	; (80014d0 <uartBusesInit+0x1dc>)
 8001376:	2264      	movs	r2, #100	; 0x64
 8001378:	665a      	str	r2, [r3, #100]	; 0x64
	uartBus[THRUSTERS_UART].txrxType = TXRX_DMA;
 800137a:	4b55      	ldr	r3, [pc, #340]	; (80014d0 <uartBusesInit+0x1dc>)
 800137c:	2201      	movs	r2, #1
 800137e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	// Devices UART configuration
	uartBus[DEVICES_UART].huart = &huart4;
 8001382:	4b53      	ldr	r3, [pc, #332]	; (80014d0 <uartBusesInit+0x1dc>)
 8001384:	4a57      	ldr	r2, [pc, #348]	; (80014e4 <uartBusesInit+0x1f0>)
 8001386:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	uartBus[DEVICES_UART].rxBuffer = 0; // Receive bugger will be set before receive
 800138a:	4b51      	ldr	r3, [pc, #324]	; (80014d0 <uartBusesInit+0x1dc>)
 800138c:	2200      	movs	r2, #0
 800138e:	671a      	str	r2, [r3, #112]	; 0x70
	uartBus[DEVICES_UART].txBuffer = 0; // Transmit bugger will be set before transmit
 8001390:	4b4f      	ldr	r3, [pc, #316]	; (80014d0 <uartBusesInit+0x1dc>)
 8001392:	2200      	movs	r2, #0
 8001394:	675a      	str	r2, [r3, #116]	; 0x74
	uartBus[DEVICES_UART].rxLength = DEVICES_REQUEST_LENGTH;
 8001396:	4b4e      	ldr	r3, [pc, #312]	; (80014d0 <uartBusesInit+0x1dc>)
 8001398:	2207      	movs	r2, #7
 800139a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	uartBus[DEVICES_UART].txLength = DEVICES_RESPONSE_LENGTH;
 800139e:	4b4c      	ldr	r3, [pc, #304]	; (80014d0 <uartBusesInit+0x1dc>)
 80013a0:	220a      	movs	r2, #10
 80013a2:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	uartBus[DEVICES_UART].brokenRxTolerance = 0; // There is no special event on this bus
 80013a6:	4b4a      	ldr	r3, [pc, #296]	; (80014d0 <uartBusesInit+0x1dc>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	uartBus[DEVICES_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 80013ae:	4b48      	ldr	r3, [pc, #288]	; (80014d0 <uartBusesInit+0x1dc>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	uartBus[DEVICES_UART].receiveTimeout = 100;
 80013b6:	4b46      	ldr	r3, [pc, #280]	; (80014d0 <uartBusesInit+0x1dc>)
 80013b8:	2264      	movs	r2, #100	; 0x64
 80013ba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	uartBus[DEVICES_UART].transmitTimeout = 100;
 80013be:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <uartBusesInit+0x1dc>)
 80013c0:	2264      	movs	r2, #100	; 0x64
 80013c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	uartBus[DEVICES_UART].txrxType = TXRX_DMA;
 80013c6:	4b42      	ldr	r3, [pc, #264]	; (80014d0 <uartBusesInit+0x1dc>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

	// IMU UART configuration
	uartBus[IMU_UART].huart = &huart2;
 80013ce:	4b40      	ldr	r3, [pc, #256]	; (80014d0 <uartBusesInit+0x1dc>)
 80013d0:	4a45      	ldr	r2, [pc, #276]	; (80014e8 <uartBusesInit+0x1f4>)
 80013d2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <uartBusesInit+0x1dc>)
 80013d8:	4a44      	ldr	r2, [pc, #272]	; (80014ec <uartBusesInit+0x1f8>)
 80013da:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	uartBus[IMU_UART].txBuffer = 0; // Buffer will be set before transmit
 80013de:	4b3c      	ldr	r3, [pc, #240]	; (80014d0 <uartBusesInit+0x1dc>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uartBus[IMU_UART].rxLength = 0; // Receive length will be set before transmit
 80013e6:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <uartBusesInit+0x1dc>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	uartBus[IMU_UART].txLength = 0; // Transmit length will be set before transmit
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <uartBusesInit+0x1dc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	uartBus[IMU_UART].brokenRxTolerance = 0; // There is no special event on this bus
 80013f6:	4b36      	ldr	r3, [pc, #216]	; (80014d0 <uartBusesInit+0x1dc>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	uartBus[IMU_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 80013fe:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <uartBusesInit+0x1dc>)
 8001400:	2200      	movs	r2, #0
 8001402:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	uartBus[IMU_UART].receiveTimeout = 100;
 8001406:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <uartBusesInit+0x1dc>)
 8001408:	2264      	movs	r2, #100	; 0x64
 800140a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	uartBus[IMU_UART].transmitTimeout = 100;
 800140e:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <uartBusesInit+0x1dc>)
 8001410:	2264      	movs	r2, #100	; 0x64
 8001412:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	uartBus[IMU_UART].txrxType = TXRX_IT;
 8001416:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <uartBusesInit+0x1dc>)
 8001418:	2200      	movs	r2, #0
 800141a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

	for(uint8_t i=0; i<UART_NUMBER; i++) {
 800141e:	2300      	movs	r3, #0
 8001420:	71fb      	strb	r3, [r7, #7]
 8001422:	e04a      	b.n	80014ba <uartBusesInit+0x1c6>
		uartBus[i].packageReceived = false;
 8001424:	79fa      	ldrb	r2, [r7, #7]
 8001426:	492a      	ldr	r1, [pc, #168]	; (80014d0 <uartBusesInit+0x1dc>)
 8001428:	4613      	mov	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	1a9b      	subs	r3, r3, r2
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	440b      	add	r3, r1
 8001432:	3308      	adds	r3, #8
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
		uartBus[i].packageTransmitted = false;
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	4925      	ldr	r1, [pc, #148]	; (80014d0 <uartBusesInit+0x1dc>)
 800143c:	4613      	mov	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	1a9b      	subs	r3, r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	440b      	add	r3, r1
 8001446:	3309      	adds	r3, #9
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
		uartBus[i].successRxCounter = 0;
 800144c:	79fa      	ldrb	r2, [r7, #7]
 800144e:	4920      	ldr	r1, [pc, #128]	; (80014d0 <uartBusesInit+0x1dc>)
 8001450:	4613      	mov	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	1a9b      	subs	r3, r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	440b      	add	r3, r1
 800145a:	330a      	adds	r3, #10
 800145c:	2200      	movs	r2, #0
 800145e:	801a      	strh	r2, [r3, #0]
		uartBus[i].brokenRxCounter = 0;
 8001460:	79fa      	ldrb	r2, [r7, #7]
 8001462:	491b      	ldr	r1, [pc, #108]	; (80014d0 <uartBusesInit+0x1dc>)
 8001464:	4613      	mov	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	330c      	adds	r3, #12
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
		uartBus[i].outdatedRxCounter = 0;
 8001474:	79fa      	ldrb	r2, [r7, #7]
 8001476:	4916      	ldr	r1, [pc, #88]	; (80014d0 <uartBusesInit+0x1dc>)
 8001478:	4613      	mov	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	1a9b      	subs	r3, r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	440b      	add	r3, r1
 8001482:	3310      	adds	r3, #16
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
		uartBus[i].timeoutCounter = 0;
 8001488:	79fa      	ldrb	r2, [r7, #7]
 800148a:	4911      	ldr	r1, [pc, #68]	; (80014d0 <uartBusesInit+0x1dc>)
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	1a9b      	subs	r3, r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	440b      	add	r3, r1
 8001496:	3314      	adds	r3, #20
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
		uartBus[i].lastMessage = 0;
 800149e:	79fa      	ldrb	r2, [r7, #7]
 80014a0:	490b      	ldr	r1, [pc, #44]	; (80014d0 <uartBusesInit+0x1dc>)
 80014a2:	4613      	mov	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	1a9b      	subs	r3, r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	440b      	add	r3, r1
 80014ac:	3318      	adds	r3, #24
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	3301      	adds	r3, #1
 80014b8:	71fb      	strb	r3, [r7, #7]
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d9b1      	bls.n	8001424 <uartBusesInit+0x130>
	}
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	200001a4 	.word	0x200001a4
 80014d4:	200023a8 	.word	0x200023a8
 80014d8:	20002070 	.word	0x20002070
 80014dc:	200020c4 	.word	0x200020c4
 80014e0:	20002320 	.word	0x20002320
 80014e4:	200022dc 	.word	0x200022dc
 80014e8:	20002364 	.word	0x20002364
 80014ec:	20002128 	.word	0x20002128

080014f0 <transmitPackage>:

bool transmitPackage(struct uartBus_s *bus, bool isrMode)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	70fb      	strb	r3, [r7, #3]
    bus->packageTransmitted = false;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	725a      	strb	r2, [r3, #9]

    HAL_UART_AbortTransmit_IT(bus->huart);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4618      	mov	r0, r3
 8001508:	f006 fb4e 	bl	8007ba8 <HAL_UART_AbortTransmit_IT>
    switch(bus->txrxType) {
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00d      	beq.n	8001532 <transmitPackage+0x42>
 8001516:	2b01      	cmp	r3, #1
 8001518:	d117      	bne.n	800154a <transmitPackage+0x5a>
        case TXRX_DMA:
            HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6859      	ldr	r1, [r3, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001528:	b29b      	uxth	r3, r3
 800152a:	461a      	mov	r2, r3
 800152c:	f006 fa8e 	bl	8007a4c <HAL_UART_Transmit_DMA>
            break;
 8001530:	e00d      	b.n	800154e <transmitPackage+0x5e>
        case TXRX_IT:
        	HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6859      	ldr	r1, [r3, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001540:	b29b      	uxth	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	f006 fa0d 	bl	8007962 <HAL_UART_Transmit_IT>
            break;
 8001548:	e001      	b.n	800154e <transmitPackage+0x5e>
        default:
            return false;
 800154a:	2300      	movs	r3, #0
 800154c:	e036      	b.n	80015bc <transmitPackage+0xcc>
    }

    bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 800154e:	f009 f971 	bl	800a834 <xTaskGetTickCount>
 8001552:	4603      	mov	r3, r0
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fc8b 	bl	8000e70 <fromTickToMs>
 800155a:	eef0 7a40 	vmov.f32	s15, s0
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	edc3 7a05 	vstr	s15, [r3, #20]
    while (!bus->packageTransmitted && !isrMode) {
 8001564:	e01c      	b.n	80015a0 <transmitPackage+0xb0>
    	if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 8001566:	f009 f965 	bl	800a834 <xTaskGetTickCount>
 800156a:	4603      	mov	r3, r0
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fc7f 	bl	8000e70 <fromTickToMs>
 8001572:	eeb0 7a40 	vmov.f32	s14, s0
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	edd3 7a05 	vldr	s15, [r3, #20]
 800157c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	ee07 3a90 	vmov	s15, r3
 8001588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800158c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	dd01      	ble.n	800159a <transmitPackage+0xaa>
    		return false;
 8001596:	2300      	movs	r3, #0
 8001598:	e010      	b.n	80015bc <transmitPackage+0xcc>
    	}
    	osDelay(DELAY_UART_TIMEOUT);
 800159a:	2032      	movs	r0, #50	; 0x32
 800159c:	f007 fe17 	bl	80091ce <osDelay>
    while (!bus->packageTransmitted && !isrMode) {
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7a5b      	ldrb	r3, [r3, #9]
 80015a4:	f083 0301 	eor.w	r3, r3, #1
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <transmitPackage+0xca>
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	f083 0301 	eor.w	r3, r3, #1
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1d5      	bne.n	8001566 <transmitPackage+0x76>
    }
    return true;
 80015ba:	2301      	movs	r3, #1
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <transmitAndReceive>:
	}
	return true;
}

bool transmitAndReceive(struct uartBus_s *bus, bool isrMode)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	70fb      	strb	r3, [r7, #3]
	bus->packageReceived = false;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	721a      	strb	r2, [r3, #8]
	bus->packageTransmitted = false;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	725a      	strb	r2, [r3, #9]

	HAL_UART_AbortReceive_IT(bus->huart);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	4618      	mov	r0, r3
 80015e2:	f006 fb55 	bl	8007c90 <HAL_UART_AbortReceive_IT>
	HAL_UART_AbortTransmit_IT(bus->huart);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4618      	mov	r0, r3
 80015ec:	f006 fadc 	bl	8007ba8 <HAL_UART_AbortTransmit_IT>
	switch(bus->txrxType) {
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d018      	beq.n	800162c <transmitAndReceive+0x68>
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d12d      	bne.n	800165a <transmitAndReceive+0x96>
		case TXRX_DMA:
			HAL_UART_Receive_DMA(bus->huart, bus->rxBuffer, bus->rxLength);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6819      	ldr	r1, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800160c:	b29b      	uxth	r3, r3
 800160e:	461a      	mov	r2, r3
 8001610:	f006 fa9a 	bl	8007b48 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6859      	ldr	r1, [r3, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001622:	b29b      	uxth	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	f006 fa11 	bl	8007a4c <HAL_UART_Transmit_DMA>
			break;
 800162a:	e018      	b.n	800165e <transmitAndReceive+0x9a>
		case TXRX_IT:
			HAL_UART_Receive_IT(bus->huart, bus->rxBuffer, bus->rxLength);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6819      	ldr	r1, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800163a:	b29b      	uxth	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	f006 f9d5 	bl	80079ec <HAL_UART_Receive_IT>
			HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6859      	ldr	r1, [r3, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001650:	b29b      	uxth	r3, r3
 8001652:	461a      	mov	r2, r3
 8001654:	f006 f985 	bl	8007962 <HAL_UART_Transmit_IT>
			break;
 8001658:	e001      	b.n	800165e <transmitAndReceive+0x9a>
		default:
			return false;
 800165a:	2300      	movs	r3, #0
 800165c:	e03d      	b.n	80016da <transmitAndReceive+0x116>
	}

	bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 800165e:	f009 f8e9 	bl	800a834 <xTaskGetTickCount>
 8001662:	4603      	mov	r3, r0
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fc03 	bl	8000e70 <fromTickToMs>
 800166a:	eef0 7a40 	vmov.f32	s15, s0
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	edc3 7a05 	vstr	s15, [r3, #20]
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 8001674:	e01c      	b.n	80016b0 <transmitAndReceive+0xec>
		if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 8001676:	f009 f8dd 	bl	800a834 <xTaskGetTickCount>
 800167a:	4603      	mov	r3, r0
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fbf7 	bl	8000e70 <fromTickToMs>
 8001682:	eeb0 7a40 	vmov.f32	s14, s0
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	edd3 7a05 	vldr	s15, [r3, #20]
 800168c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	ee07 3a90 	vmov	s15, r3
 8001698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800169c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a4:	dd01      	ble.n	80016aa <transmitAndReceive+0xe6>
			return false;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e017      	b.n	80016da <transmitAndReceive+0x116>
		}
		osDelay(DELAY_UART_TIMEOUT);
 80016aa:	2032      	movs	r0, #50	; 0x32
 80016ac:	f007 fd8f 	bl	80091ce <osDelay>
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7a5b      	ldrb	r3, [r3, #9]
 80016b4:	f083 0301 	eor.w	r3, r3, #1
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00c      	beq.n	80016d8 <transmitAndReceive+0x114>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	7a1b      	ldrb	r3, [r3, #8]
 80016c2:	f083 0301 	eor.w	r3, r3, #1
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <transmitAndReceive+0x114>
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	f083 0301 	eor.w	r3, r3, #1
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1ce      	bne.n	8001676 <transmitAndReceive+0xb2>
	}
	return true;
 80016d8:	2301      	movs	r3, #1
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_UART_TxCpltCallback+0x6c>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d103      	bne.n	80016fe <HAL_UART_TxCpltCallback+0x1a>
		uartBus[SHORE_UART].packageTransmitted = true;
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <HAL_UART_TxCpltCallback+0x6c>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	725a      	strb	r2, [r3, #9]
		return;
 80016fc:	e022      	b.n	8001744 <HAL_UART_TxCpltCallback+0x60>
	}

	struct uartBus_s *bus = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001702:	2300      	movs	r3, #0
 8001704:	73fb      	strb	r3, [r7, #15]
 8001706:	e01a      	b.n	800173e <HAL_UART_TxCpltCallback+0x5a>
		if(uartBus[i].huart == huart) {
 8001708:	7bfa      	ldrb	r2, [r7, #15]
 800170a:	4911      	ldr	r1, [pc, #68]	; (8001750 <HAL_UART_TxCpltCallback+0x6c>)
 800170c:	4613      	mov	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	1a9b      	subs	r3, r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	440b      	add	r3, r1
 8001716:	3330      	adds	r3, #48	; 0x30
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	429a      	cmp	r2, r3
 800171e:	d10b      	bne.n	8001738 <HAL_UART_TxCpltCallback+0x54>
			bus = &uartBus[i];
 8001720:	7bfa      	ldrb	r2, [r7, #15]
 8001722:	4613      	mov	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	4a09      	ldr	r2, [pc, #36]	; (8001750 <HAL_UART_TxCpltCallback+0x6c>)
 800172c:	4413      	add	r3, r2
 800172e:	60bb      	str	r3, [r7, #8]
			bus->packageTransmitted = true;
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2201      	movs	r2, #1
 8001734:	725a      	strb	r2, [r3, #9]
			break;
 8001736:	e005      	b.n	8001744 <HAL_UART_TxCpltCallback+0x60>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	3301      	adds	r3, #1
 800173c:	73fb      	strb	r3, [r7, #15]
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	2b03      	cmp	r3, #3
 8001742:	d9e1      	bls.n	8001708 <HAL_UART_TxCpltCallback+0x24>
		}
	}
}
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	200001a4 	.word	0x200001a4

08001754 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 800175c:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <HAL_UART_RxCpltCallback+0x7c>)
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	429a      	cmp	r2, r3
 8001764:	d102      	bne.n	800176c <HAL_UART_RxCpltCallback+0x18>
		ShoreReceive();
 8001766:	f000 f835 	bl	80017d4 <ShoreReceive>
		return;
 800176a:	e02d      	b.n	80017c8 <HAL_UART_RxCpltCallback+0x74>
	}

	struct uartBus_s *bus = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]
 8001774:	e025      	b.n	80017c2 <HAL_UART_RxCpltCallback+0x6e>
		if(uartBus[i].huart == huart) {
 8001776:	7bfa      	ldrb	r2, [r7, #15]
 8001778:	4915      	ldr	r1, [pc, #84]	; (80017d0 <HAL_UART_RxCpltCallback+0x7c>)
 800177a:	4613      	mov	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	440b      	add	r3, r1
 8001784:	3330      	adds	r3, #48	; 0x30
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	429a      	cmp	r2, r3
 800178c:	d116      	bne.n	80017bc <HAL_UART_RxCpltCallback+0x68>
			bus = &uartBus[i];
 800178e:	7bfa      	ldrb	r2, [r7, #15]
 8001790:	4613      	mov	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	1a9b      	subs	r3, r3, r2
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <HAL_UART_RxCpltCallback+0x7c>)
 800179a:	4413      	add	r3, r2
 800179c:	60bb      	str	r3, [r7, #8]
			bus->packageReceived = true;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	2201      	movs	r2, #1
 80017a2:	721a      	strb	r2, [r3, #8]
			bus->lastMessage = fromTickToMs(xTaskGetTickCount());
 80017a4:	f009 f846 	bl	800a834 <xTaskGetTickCount>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fb60 	bl	8000e70 <fromTickToMs>
 80017b0:	eef0 7a40 	vmov.f32	s15, s0
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	edc3 7a06 	vstr	s15, [r3, #24]
			break;
 80017ba:	e005      	b.n	80017c8 <HAL_UART_RxCpltCallback+0x74>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	3301      	adds	r3, #1
 80017c0:	73fb      	strb	r3, [r7, #15]
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d9d6      	bls.n	8001776 <HAL_UART_RxCpltCallback+0x22>
		}
	}
}
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200001a4 	.word	0x200001a4

080017d4 <ShoreReceive>:
		break;
	}
}

void ShoreReceive()
{
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af02      	add	r7, sp, #8
	static portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 80017da:	4b39      	ldr	r3, [pc, #228]	; (80018c0 <ShoreReceive+0xec>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
	if(counterRx == 0) {
 80017e0:	4b38      	ldr	r3, [pc, #224]	; (80018c4 <ShoreReceive+0xf0>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d142      	bne.n	800186e <ShoreReceive+0x9a>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 80017e8:	2300      	movs	r3, #0
 80017ea:	71fb      	strb	r3, [r7, #7]
 80017ec:	e03b      	b.n	8001866 <ShoreReceive+0x92>
			if(uartBus[SHORE_UART].rxBuffer[0] == ShoreCodes[i]) {
 80017ee:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <ShoreReceive+0xf4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	781a      	ldrb	r2, [r3, #0]
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	4935      	ldr	r1, [pc, #212]	; (80018cc <ShoreReceive+0xf8>)
 80017f8:	5ccb      	ldrb	r3, [r1, r3]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d125      	bne.n	800184a <ShoreReceive+0x76>
				counterRx = 1;
 80017fe:	4b31      	ldr	r3, [pc, #196]	; (80018c4 <ShoreReceive+0xf0>)
 8001800:	2201      	movs	r2, #1
 8001802:	801a      	strh	r2, [r3, #0]
				uartBus[SHORE_UART].rxLength = ShoreLength[i]-1;
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	4a32      	ldr	r2, [pc, #200]	; (80018d0 <ShoreReceive+0xfc>)
 8001808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	3b01      	subs	r3, #1
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <ShoreReceive+0xf4>)
 8001814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer+1, uartBus[SHORE_UART].rxLength);
 8001818:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <ShoreReceive+0xf4>)
 800181a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800181c:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <ShoreReceive+0xf4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	3301      	adds	r3, #1
 8001822:	4a29      	ldr	r2, [pc, #164]	; (80018c8 <ShoreReceive+0xf4>)
 8001824:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8001828:	b292      	uxth	r2, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f006 f8de 	bl	80079ec <HAL_UART_Receive_IT>
				xTimerStartFromISR(UARTTimer, &xHigherPriorityTaskWoken);
 8001830:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <ShoreReceive+0x100>)
 8001832:	681c      	ldr	r4, [r3, #0]
 8001834:	f009 f80e 	bl	800a854 <xTaskGetTickCountFromISR>
 8001838:	4602      	mov	r2, r0
 800183a:	2300      	movs	r3, #0
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <ShoreReceive+0xec>)
 8001840:	2106      	movs	r1, #6
 8001842:	4620      	mov	r0, r4
 8001844:	f009 fe46 	bl	800b4d4 <xTimerGenericCommand>
				break;
 8001848:	e026      	b.n	8001898 <ShoreReceive+0xc4>
			}

			if(i == SHORE_REQUEST_MODES_NUMBER-1) {
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d107      	bne.n	8001860 <ShoreReceive+0x8c>
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <ShoreReceive+0xf4>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <ShoreReceive+0xf4>)
 8001856:	6811      	ldr	r1, [r2, #0]
 8001858:	2201      	movs	r2, #1
 800185a:	4618      	mov	r0, r3
 800185c:	f006 f8c6 	bl	80079ec <HAL_UART_Receive_IT>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	3301      	adds	r3, #1
 8001864:	71fb      	strb	r3, [r7, #7]
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d9c0      	bls.n	80017ee <ShoreReceive+0x1a>
 800186c:	e014      	b.n	8001898 <ShoreReceive+0xc4>
			}
		}
	}
	else if(counterRx == 1) {
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <ShoreReceive+0xf0>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d110      	bne.n	8001898 <ShoreReceive+0xc4>
		uartBus[SHORE_UART].packageReceived = true;
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <ShoreReceive+0xf4>)
 8001878:	2201      	movs	r2, #1
 800187a:	721a      	strb	r2, [r3, #8]
		uartBus[SHORE_UART].lastMessage = fromTickToMs(xTaskGetTickCount());
 800187c:	f008 ffda 	bl	800a834 <xTaskGetTickCount>
 8001880:	4603      	mov	r3, r0
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff faf4 	bl	8000e70 <fromTickToMs>
 8001888:	eef0 7a40 	vmov.f32	s15, s0
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <ShoreReceive+0xf4>)
 800188e:	edc3 7a06 	vstr	s15, [r3, #24]
		counterRx = 2;
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <ShoreReceive+0xf0>)
 8001894:	2202      	movs	r2, #2
 8001896:	801a      	strh	r2, [r3, #0]
	}

	if (xHigherPriorityTaskWoken == pdTRUE) {
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <ShoreReceive+0xec>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d10a      	bne.n	80018b6 <ShoreReceive+0xe2>
		xHigherPriorityTaskWoken = pdFALSE;
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <ShoreReceive+0xec>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
		taskYIELD();
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <ShoreReceive+0x104>)
 80018a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	f3bf 8f4f 	dsb	sy
 80018b2:	f3bf 8f6f 	isb	sy
	}
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd90      	pop	{r4, r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000288 	.word	0x20000288
 80018c4:	20000284 	.word	0x20000284
 80018c8:	200001a4 	.word	0x200001a4
 80018cc:	0800ca90 	.word	0x0800ca90
 80018d0:	0800ca88 	.word	0x0800ca88
 80018d4:	2000028c 	.word	0x2000028c
 80018d8:	e000ed04 	.word	0xe000ed04

080018dc <DevicesRequestUpdate>:

void DevicesRequestUpdate(uint8_t *buf, uint8_t dev)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	70fb      	strb	r3, [r7, #3]
	struct devicesRequest_s req;

    req.AA1 = 0xAA;
 80018e8:	23aa      	movs	r3, #170	; 0xaa
 80018ea:	723b      	strb	r3, [r7, #8]
    req.AA2 = 0xAA;
 80018ec:	23aa      	movs	r3, #170	; 0xaa
 80018ee:	727b      	strb	r3, [r7, #9]
    req.address = rDevice[dev].address;
 80018f0:	78fa      	ldrb	r2, [r7, #3]
 80018f2:	491e      	ldr	r1, [pc, #120]	; (800196c <DevicesRequestUpdate+0x90>)
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	440b      	add	r3, r1
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	72bb      	strb	r3, [r7, #10]
    req.setting = rDevice[dev].settings;
 8001902:	78fa      	ldrb	r2, [r7, #3]
 8001904:	4919      	ldr	r1, [pc, #100]	; (800196c <DevicesRequestUpdate+0x90>)
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	440b      	add	r3, r1
 8001910:	3301      	adds	r3, #1
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	72fb      	strb	r3, [r7, #11]
    req.velocity1 = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	733b      	strb	r3, [r7, #12]
    req.velocity2 = rDevice[dev].force;
 800191a:	78fa      	ldrb	r2, [r7, #3]
 800191c:	4913      	ldr	r1, [pc, #76]	; (800196c <DevicesRequestUpdate+0x90>)
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	440b      	add	r3, r1
 8001928:	3302      	adds	r3, #2
 800192a:	f993 3000 	ldrsb.w	r3, [r3]
 800192e:	737b      	strb	r3, [r7, #13]

    if(dev == GRAB) {
 8001930:	78fb      	ldrb	r3, [r7, #3]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d107      	bne.n	8001946 <DevicesRequestUpdate+0x6a>
    	req.velocity1 = rDevice[GRAB_ROTATION].force;
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <DevicesRequestUpdate+0x90>)
 8001938:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800193c:	733b      	strb	r3, [r7, #12]
    	req.velocity2 = rDevice[GRAB].force;
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <DevicesRequestUpdate+0x90>)
 8001940:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001944:	737b      	strb	r3, [r7, #13]
//    		rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_NULL;
//    	}
//    }


    memcpy((void*)buf, (void*)&req, DEVICES_REQUEST_LENGTH);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	461a      	mov	r2, r3
 800194a:	f107 0308 	add.w	r3, r7, #8
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	6010      	str	r0, [r2, #0]
 8001952:	8899      	ldrh	r1, [r3, #4]
 8001954:	799b      	ldrb	r3, [r3, #6]
 8001956:	8091      	strh	r1, [r2, #4]
 8001958:	7193      	strb	r3, [r2, #6]
    AddChecksumm8b(buf, DEVICES_REQUEST_LENGTH);
 800195a:	2107      	movs	r1, #7
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff fb48 	bl	8000ff2 <AddChecksumm8b>
}
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20001c70 	.word	0x20001c70

08001970 <DevicesResponseUpdate>:

void DevicesResponseUpdate(uint8_t *buf, uint8_t dev)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	70fb      	strb	r3, [r7, #3]
    if(IsChecksumm8bCorrect(buf, DEVICES_RESPONSE_LENGTH)) {
 800197c:	210a      	movs	r1, #10
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff fb0a 	bl	8000f98 <IsChecksumm8bCorrect>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d04a      	beq.n	8001a20 <DevicesResponseUpdate+0xb0>
    	struct devicesResponse_s res;
    	memcpy((void*)&res, (void*)buf, DEVICES_RESPONSE_LENGTH);
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	6810      	ldr	r0, [r2, #0]
 8001992:	6851      	ldr	r1, [r2, #4]
 8001994:	c303      	stmia	r3!, {r0, r1}
 8001996:	8912      	ldrh	r2, [r2, #8]
 8001998:	801a      	strh	r2, [r3, #0]

        rDevice[dev].current = res.current1;
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80019a0:	b298      	uxth	r0, r3
 80019a2:	4924      	ldr	r1, [pc, #144]	; (8001a34 <DevicesResponseUpdate+0xc4>)
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	440b      	add	r3, r1
 80019ae:	3304      	adds	r3, #4
 80019b0:	4602      	mov	r2, r0
 80019b2:	801a      	strh	r2, [r3, #0]
        rDevice[dev].velocity1 = res.velocity1;
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	7cf8      	ldrb	r0, [r7, #19]
 80019b8:	491e      	ldr	r1, [pc, #120]	; (8001a34 <DevicesResponseUpdate+0xc4>)
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	440b      	add	r3, r1
 80019c4:	3307      	adds	r3, #7
 80019c6:	4602      	mov	r2, r0
 80019c8:	701a      	strb	r2, [r3, #0]
        rDevice[dev].velocity2 = res.velocity2;
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	7d38      	ldrb	r0, [r7, #20]
 80019ce:	4919      	ldr	r1, [pc, #100]	; (8001a34 <DevicesResponseUpdate+0xc4>)
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	440b      	add	r3, r1
 80019da:	3308      	adds	r3, #8
 80019dc:	4602      	mov	r2, r0
 80019de:	701a      	strb	r2, [r3, #0]

        if(rDevice[DEV2].velocity1 == 0x00 && dev == DEV2) {
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <DevicesResponseUpdate+0xc4>)
 80019e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d106      	bne.n	80019f8 <DevicesResponseUpdate+0x88>
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	2b05      	cmp	r3, #5
 80019ee:	d103      	bne.n	80019f8 <DevicesResponseUpdate+0x88>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_FORWARD_SAT;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <DevicesResponseUpdate+0xc8>)
 80019f2:	2203      	movs	r2, #3
 80019f4:	701a      	strb	r2, [r3, #0]
 80019f6:	e00a      	b.n	8001a0e <DevicesResponseUpdate+0x9e>
        }
        else if(rDevice[DEV2].velocity2 == 0x00 && dev == DEV2) {
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <DevicesResponseUpdate+0xc4>)
 80019fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d105      	bne.n	8001a0e <DevicesResponseUpdate+0x9e>
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	2b05      	cmp	r3, #5
 8001a06:	d102      	bne.n	8001a0e <DevicesResponseUpdate+0x9e>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_BACKWARD_SAT;
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <DevicesResponseUpdate+0xc8>)
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	701a      	strb	r2, [r3, #0]
        }
        // TODO make errors work pls
        //writeBit(&(robot->device[dev].errors), res.errors, AGAR);

        ++uartBus[DEVICES_UART].successRxCounter;
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <DevicesResponseUpdate+0xcc>)
 8001a10:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001a14:	3301      	adds	r3, #1
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <DevicesResponseUpdate+0xcc>)
 8001a1a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
    }
    else {
    	++uartBus[DEVICES_UART].brokenRxCounter;
    }
}
 8001a1e:	e004      	b.n	8001a2a <DevicesResponseUpdate+0xba>
    	++uartBus[DEVICES_UART].brokenRxCounter;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <DevicesResponseUpdate+0xcc>)
 8001a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a24:	3301      	adds	r3, #1
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <DevicesResponseUpdate+0xcc>)
 8001a28:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20001c70 	.word	0x20001c70
 8001a38:	20001cac 	.word	0x20001cac
 8001a3c:	200001a4 	.word	0x200001a4

08001a40 <ShoreRequest>:

void ShoreRequest(uint8_t *requestBuf)
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001a4c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8001a50:	6018      	str	r0, [r3, #0]
    if (IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_LENGTH)) {
 8001a52:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001a56:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8001a5a:	211e      	movs	r1, #30
 8001a5c:	6818      	ldr	r0, [r3, #0]
 8001a5e:	f7ff fa62 	bl	8000f26 <IsCrc16ChecksummCorrect>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 818f 	beq.w	8001d88 <ShoreRequest+0x348>
    	struct shoreRequest_s req;
    	memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_LENGTH);
 8001a6a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001a6e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f507 740d 	add.w	r4, r7, #564	; 0x234
 8001a78:	461d      	mov	r5, r3
 8001a7a:	6828      	ldr	r0, [r5, #0]
 8001a7c:	6869      	ldr	r1, [r5, #4]
 8001a7e:	68aa      	ldr	r2, [r5, #8]
 8001a80:	68eb      	ldr	r3, [r5, #12]
 8001a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a84:	6928      	ldr	r0, [r5, #16]
 8001a86:	6969      	ldr	r1, [r5, #20]
 8001a88:	69aa      	ldr	r2, [r5, #24]
 8001a8a:	c407      	stmia	r4!, {r0, r1, r2}
 8001a8c:	8bab      	ldrh	r3, [r5, #28]
 8001a8e:	8023      	strh	r3, [r4, #0]

    	uint8_t tempCameraNum = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257

        rJoySpeed.march = req.march;
 8001a96:	f9b7 3236 	ldrsh.w	r3, [r7, #566]	; 0x236
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa2:	4bbe      	ldr	r3, [pc, #760]	; (8001d9c <ShoreRequest+0x35c>)
 8001aa4:	edc3 7a00 	vstr	s15, [r3]
        rJoySpeed.lag = req.lag;
 8001aa8:	f9b7 3238 	ldrsh.w	r3, [r7, #568]	; 0x238
 8001aac:	ee07 3a90 	vmov	s15, r3
 8001ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab4:	4bb9      	ldr	r3, [pc, #740]	; (8001d9c <ShoreRequest+0x35c>)
 8001ab6:	edc3 7a01 	vstr	s15, [r3, #4]
        rJoySpeed.depth = req.depth;
 8001aba:	f9b7 323a 	ldrsh.w	r3, [r7, #570]	; 0x23a
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac6:	4bb5      	ldr	r3, [pc, #724]	; (8001d9c <ShoreRequest+0x35c>)
 8001ac8:	edc3 7a02 	vstr	s15, [r3, #8]
        rJoySpeed.roll = req.roll;
 8001acc:	f9b7 323c 	ldrsh.w	r3, [r7, #572]	; 0x23c
 8001ad0:	ee07 3a90 	vmov	s15, r3
 8001ad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad8:	4bb0      	ldr	r3, [pc, #704]	; (8001d9c <ShoreRequest+0x35c>)
 8001ada:	edc3 7a03 	vstr	s15, [r3, #12]
        rJoySpeed.pitch = req.pitch;
 8001ade:	f9b7 323e 	ldrsh.w	r3, [r7, #574]	; 0x23e
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aea:	4bac      	ldr	r3, [pc, #688]	; (8001d9c <ShoreRequest+0x35c>)
 8001aec:	edc3 7a04 	vstr	s15, [r3, #16]
        rJoySpeed.yaw = req.yaw;
 8001af0:	f9b7 3240 	ldrsh.w	r3, [r7, #576]	; 0x240
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afc:	4ba7      	ldr	r3, [pc, #668]	; (8001d9c <ShoreRequest+0x35c>)
 8001afe:	edc3 7a05 	vstr	s15, [r3, #20]

        rDevice[GRAB].force = req.grab;
 8001b02:	f997 2243 	ldrsb.w	r2, [r7, #579]	; 0x243
 8001b06:	4ba6      	ldr	r3, [pc, #664]	; (8001da0 <ShoreRequest+0x360>)
 8001b08:	731a      	strb	r2, [r3, #12]
        if (rDevice[GRAB].force < -127) {
 8001b0a:	4ba5      	ldr	r3, [pc, #660]	; (8001da0 <ShoreRequest+0x360>)
 8001b0c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001b10:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001b14:	d102      	bne.n	8001b1c <ShoreRequest+0xdc>
            rDevice[GRAB].force = -127;
 8001b16:	4ba2      	ldr	r3, [pc, #648]	; (8001da0 <ShoreRequest+0x360>)
 8001b18:	2281      	movs	r2, #129	; 0x81
 8001b1a:	731a      	strb	r2, [r3, #12]
        }
        rDevice[TILT].force = req.tilt;
 8001b1c:	f997 2244 	ldrsb.w	r2, [r7, #580]	; 0x244
 8001b20:	4b9f      	ldr	r3, [pc, #636]	; (8001da0 <ShoreRequest+0x360>)
 8001b22:	f883 2020 	strb.w	r2, [r3, #32]
        if (rDevice[TILT].force < -127) {
 8001b26:	4b9e      	ldr	r3, [pc, #632]	; (8001da0 <ShoreRequest+0x360>)
 8001b28:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8001b2c:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001b30:	d103      	bne.n	8001b3a <ShoreRequest+0xfa>
        	rDevice[TILT].force = -127;
 8001b32:	4b9b      	ldr	r3, [pc, #620]	; (8001da0 <ShoreRequest+0x360>)
 8001b34:	2281      	movs	r2, #129	; 0x81
 8001b36:	f883 2020 	strb.w	r2, [r3, #32]
        }
        rDevice[GRAB_ROTATION].force  = req.grab_rotate;
 8001b3a:	f997 2245 	ldrsb.w	r2, [r7, #581]	; 0x245
 8001b3e:	4b98      	ldr	r3, [pc, #608]	; (8001da0 <ShoreRequest+0x360>)
 8001b40:	759a      	strb	r2, [r3, #22]
        if (rDevice[GRAB_ROTATION].force < -127) {
 8001b42:	4b97      	ldr	r3, [pc, #604]	; (8001da0 <ShoreRequest+0x360>)
 8001b44:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001b48:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001b4c:	d102      	bne.n	8001b54 <ShoreRequest+0x114>
            rDevice[GRAB_ROTATION].force = -127;
 8001b4e:	4b94      	ldr	r3, [pc, #592]	; (8001da0 <ShoreRequest+0x360>)
 8001b50:	2281      	movs	r2, #129	; 0x81
 8001b52:	759a      	strb	r2, [r3, #22]
        }

        rDevice[DEV1].force = req.dev1;
 8001b54:	f997 2246 	ldrsb.w	r2, [r7, #582]	; 0x246
 8001b58:	4b91      	ldr	r3, [pc, #580]	; (8001da0 <ShoreRequest+0x360>)
 8001b5a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        rDevice[DEV2].force = req.dev2;
 8001b5e:	f997 2247 	ldrsb.w	r2, [r7, #583]	; 0x247
 8001b62:	4b8f      	ldr	r3, [pc, #572]	; (8001da0 <ShoreRequest+0x360>)
 8001b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        rState.lag_error = (float) req.lag_error;
 8001b68:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001b6c:	ee07 3a90 	vmov	s15, r3
 8001b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b74:	4b8b      	ldr	r3, [pc, #556]	; (8001da4 <ShoreRequest+0x364>)
 8001b76:	edc3 7a02 	vstr	s15, [r3, #8]

        rSensors.resetIMU = PickBit(req.stabilize_flags, SHORE_STABILIZE_IMU_BIT);
 8001b7a:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001b7e:	2106      	movs	r1, #6
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fab1 	bl	80010e8 <PickBit>
 8001b86:	4603      	mov	r3, r0
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b87      	ldr	r3, [pc, #540]	; (8001da8 <ShoreRequest+0x368>)
 8001b8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(PickBit(req.stabilize_flags, SHORE_STABILIZE_SAVE_BIT)) {
 8001b90:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001b94:	2107      	movs	r1, #7
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff faa6 	bl	80010e8 <PickBit>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d009      	beq.n	8001bb6 <ShoreRequest+0x176>
        	struct flashConfiguration_s config;
        	flashFillStructure(&config);
 8001ba2:	f107 0308 	add.w	r3, r7, #8
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 fd96 	bl	80026d8 <flashFillStructure>
        	flashWriteSettings(&config);
 8001bac:	f107 0308 	add.w	r3, r7, #8
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 fd53 	bl	800265c <flashWriteSettings>
        }

        tempCameraNum = req.cameras;
 8001bb6:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
 8001bba:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257

        uint8_t old_reset = rComputer.reset;
 8001bbe:	4b7b      	ldr	r3, [pc, #492]	; (8001dac <ShoreRequest+0x36c>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256
        if(old_reset != req.pc_reset) {
 8001bc6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8001bca:	f897 2256 	ldrb.w	r2, [r7, #598]	; 0x256
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d002      	beq.n	8001bd8 <ShoreRequest+0x198>
            if(req.pc_reset == PC_ON_CODE) {
 8001bd2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8001bd6:	2baa      	cmp	r3, #170	; 0xaa
            else if(req.pc_reset == PC_OFF_CODE) {
//            	HAL_GPIO_WritePin(PC_CONTROL1_GPIO_Port, PC_CONTROL1_Pin, GPIO_PIN_SET); // RESET
//            	HAL_GPIO_WritePin(PC_CONTROL2_GPIO_Port, PC_CONTROL2_Pin, GPIO_PIN_SET); // ONOFF
            }
        }
        rComputer.reset = req.pc_reset;
 8001bd8:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 8001bdc:	4b73      	ldr	r3, [pc, #460]	; (8001dac <ShoreRequest+0x36c>)
 8001bde:	701a      	strb	r2, [r3, #0]

        bool wasEnabled = rStabConstants[STAB_YAW].enable;
 8001be0:	4b73      	ldr	r3, [pc, #460]	; (8001db0 <ShoreRequest+0x370>)
 8001be2:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001be6:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_YAW].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_YAW_BIT);
 8001bea:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001bee:	2103      	movs	r1, #3
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fa79 	bl	80010e8 <PickBit>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b6d      	ldr	r3, [pc, #436]	; (8001db0 <ShoreRequest+0x370>)
 8001bfc:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
        if(wasEnabled == false && rStabConstants[STAB_YAW].enable == true) {
 8001c00:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001c04:	f083 0301 	eor.w	r3, r3, #1
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d007      	beq.n	8001c1e <ShoreRequest+0x1de>
 8001c0e:	4b68      	ldr	r3, [pc, #416]	; (8001db0 <ShoreRequest+0x370>)
 8001c10:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <ShoreRequest+0x1de>
        	stabilizationStart(STAB_YAW);
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f002 f8c9 	bl	8003db0 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_ROLL].enable;
 8001c1e:	4b64      	ldr	r3, [pc, #400]	; (8001db0 <ShoreRequest+0x370>)
 8001c20:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001c24:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_ROLL].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_ROLL_BIT);
 8001c28:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fa5a 	bl	80010e8 <PickBit>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461a      	mov	r2, r3
 8001c38:	4b5d      	ldr	r3, [pc, #372]	; (8001db0 <ShoreRequest+0x370>)
 8001c3a:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
        if(wasEnabled == false && rStabConstants[STAB_ROLL].enable == true) {
 8001c3e:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001c42:	f083 0301 	eor.w	r3, r3, #1
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d007      	beq.n	8001c5c <ShoreRequest+0x21c>
 8001c4c:	4b58      	ldr	r3, [pc, #352]	; (8001db0 <ShoreRequest+0x370>)
 8001c4e:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <ShoreRequest+0x21c>
        	stabilizationStart(STAB_ROLL);
 8001c56:	2004      	movs	r0, #4
 8001c58:	f002 f8aa 	bl	8003db0 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_PITCH].enable;
 8001c5c:	4b54      	ldr	r3, [pc, #336]	; (8001db0 <ShoreRequest+0x370>)
 8001c5e:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8001c62:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_PITCH].enable = true; //PickBit(req.stabilize_flags, SHORE_STABILIZE_PITCH_BIT);
 8001c66:	4b52      	ldr	r3, [pc, #328]	; (8001db0 <ShoreRequest+0x370>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
        if(wasEnabled == false && rStabConstants[STAB_PITCH].enable == true) {
 8001c6e:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001c72:	f083 0301 	eor.w	r3, r3, #1
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d007      	beq.n	8001c8c <ShoreRequest+0x24c>
 8001c7c:	4b4c      	ldr	r3, [pc, #304]	; (8001db0 <ShoreRequest+0x370>)
 8001c7e:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <ShoreRequest+0x24c>
        	stabilizationStart(STAB_PITCH);
 8001c86:	2005      	movs	r0, #5
 8001c88:	f002 f892 	bl	8003db0 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_DEPTH].enable;
 8001c8c:	4b48      	ldr	r3, [pc, #288]	; (8001db0 <ShoreRequest+0x370>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_DEPTH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_DEPTH_BIT);
 8001c94:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fa24 	bl	80010e8 <PickBit>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b42      	ldr	r3, [pc, #264]	; (8001db0 <ShoreRequest+0x370>)
 8001ca6:	701a      	strb	r2, [r3, #0]
        if(wasEnabled == false && rStabConstants[STAB_DEPTH].enable == true) {
 8001ca8:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001cac:	f083 0301 	eor.w	r3, r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d006      	beq.n	8001cc4 <ShoreRequest+0x284>
 8001cb6:	4b3e      	ldr	r3, [pc, #248]	; (8001db0 <ShoreRequest+0x370>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <ShoreRequest+0x284>
        	stabilizationStart(STAB_DEPTH);
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f002 f876 	bl	8003db0 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_LAG].enable;
 8001cc4:	4b3a      	ldr	r3, [pc, #232]	; (8001db0 <ShoreRequest+0x370>)
 8001cc6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001cca:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_LAG].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_LAG_BIT);
 8001cce:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001cd2:	2104      	movs	r1, #4
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fa07 	bl	80010e8 <PickBit>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b34      	ldr	r3, [pc, #208]	; (8001db0 <ShoreRequest+0x370>)
 8001ce0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        if(wasEnabled == false && rStabConstants[STAB_LAG].enable == true) {
 8001ce4:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001ce8:	f083 0301 	eor.w	r3, r3, #1
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d007      	beq.n	8001d02 <ShoreRequest+0x2c2>
 8001cf2:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <ShoreRequest+0x370>)
 8001cf4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <ShoreRequest+0x2c2>
        	stabilizationStart(STAB_LAG);
 8001cfc:	2002      	movs	r0, #2
 8001cfe:	f002 f857 	bl	8003db0 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_MARCH].enable;
 8001d02:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <ShoreRequest+0x370>)
 8001d04:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001d08:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_MARCH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_MARCH_BIT);
 8001d0c:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8001d10:	2105      	movs	r1, #5
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff f9e8 	bl	80010e8 <PickBit>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <ShoreRequest+0x370>)
 8001d1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        if(wasEnabled == false && rStabConstants[STAB_MARCH].enable == true) {
 8001d22:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001d26:	f083 0301 	eor.w	r3, r3, #1
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d007      	beq.n	8001d40 <ShoreRequest+0x300>
 8001d30:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <ShoreRequest+0x370>)
 8001d32:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <ShoreRequest+0x300>
        	stabilizationStart(STAB_MARCH);
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f002 f838 	bl	8003db0 <stabilizationStart>
//        	else {
//        		rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_BACKWARD;
//        	}
//        }

        if(tempCameraNum != rState.cameraNum) {
 8001d40:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <ShoreRequest+0x364>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	f897 2257 	ldrb.w	r2, [r7, #599]	; 0x257
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d013      	beq.n	8001d74 <ShoreRequest+0x334>
        	rState.cameraNum = tempCameraNum;
 8001d4c:	4a15      	ldr	r2, [pc, #84]	; (8001da4 <ShoreRequest+0x364>)
 8001d4e:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8001d52:	7013      	strb	r3, [r2, #0]
        	switch(rState.cameraNum) {
 8001d54:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <ShoreRequest+0x364>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d80c      	bhi.n	8001d76 <ShoreRequest+0x336>
 8001d5c:	a201      	add	r2, pc, #4	; (adr r2, 8001d64 <ShoreRequest+0x324>)
 8001d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d62:	bf00      	nop
 8001d64:	08001d77 	.word	0x08001d77
 8001d68:	08001d77 	.word	0x08001d77
 8001d6c:	08001d77 	.word	0x08001d77
 8001d70:	08001d77 	.word	0x08001d77
        	case 3:
//        		HAL_GPIO_WritePin(GPIOA, CAM1_Pin, GPIO_PIN_SET);
//        		HAL_GPIO_WritePin(GPIOA, CAM2_Pin, GPIO_PIN_SET);
        		break;
        	}
        }
 8001d74:	bf00      	nop

        // TODO tuuuupoooo
        formThrustVectors();
 8001d76:	f002 fe31 	bl	80049dc <formThrustVectors>

        ++uartBus[SHORE_UART].successRxCounter;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <ShoreRequest+0x374>)
 8001d7c:	895b      	ldrh	r3, [r3, #10]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <ShoreRequest+0x374>)
 8001d84:	815a      	strh	r2, [r3, #10]
        	}
        	brokenRxTolerance = 0;
        }
        */
    }
}
 8001d86:	e004      	b.n	8001d92 <ShoreRequest+0x352>
    	++uartBus[SHORE_UART].brokenRxCounter;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <ShoreRequest+0x374>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	4a09      	ldr	r2, [pc, #36]	; (8001db4 <ShoreRequest+0x374>)
 8001d90:	60d3      	str	r3, [r2, #12]
}
 8001d92:	bf00      	nop
 8001d94:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9c:	20001c58 	.word	0x20001c58
 8001da0:	20001c70 	.word	0x20001c70
 8001da4:	20001b20 	.word	0x20001b20
 8001da8:	20001bec 	.word	0x20001bec
 8001dac:	20001c54 	.word	0x20001c54
 8001db0:	20001cb0 	.word	0x20001cb0
 8001db4:	200001a4 	.word	0x200001a4

08001db8 <ShoreConfigRequest>:

void ShoreConfigRequest(uint8_t *requestBuf)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b098      	sub	sp, #96	; 0x60
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, REQUEST_CONFIG_LENGTH)) {
 8001dc0:	2154      	movs	r1, #84	; 0x54
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff f8af 	bl	8000f26 <IsCrc16ChecksummCorrect>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8158 	beq.w	8002080 <ShoreConfigRequest+0x2c8>
		struct shoreConfigRequest_s req;
		memcpy((void*)&req, (void*)requestBuf, REQUEST_CONFIG_LENGTH);
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	f107 0308 	add.w	r3, r7, #8
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	2254      	movs	r2, #84	; 0x54
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f00a faca 	bl	800c374 <memcpy>

		rJoySpeed.march = req.march;
 8001de0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001de4:	ee07 3a90 	vmov	s15, r3
 8001de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dec:	4ba9      	ldr	r3, [pc, #676]	; (8002094 <ShoreConfigRequest+0x2dc>)
 8001dee:	edc3 7a00 	vstr	s15, [r3]
		rJoySpeed.lag = req.lag;
 8001df2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001df6:	ee07 3a90 	vmov	s15, r3
 8001dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfe:	4ba5      	ldr	r3, [pc, #660]	; (8002094 <ShoreConfigRequest+0x2dc>)
 8001e00:	edc3 7a01 	vstr	s15, [r3, #4]
		rJoySpeed.depth = req.depth;
 8001e04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e08:	ee07 3a90 	vmov	s15, r3
 8001e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e10:	4ba0      	ldr	r3, [pc, #640]	; (8002094 <ShoreConfigRequest+0x2dc>)
 8001e12:	edc3 7a02 	vstr	s15, [r3, #8]
		rJoySpeed.roll = req.roll;
 8001e16:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001e1a:	ee07 3a90 	vmov	s15, r3
 8001e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e22:	4b9c      	ldr	r3, [pc, #624]	; (8002094 <ShoreConfigRequest+0x2dc>)
 8001e24:	edc3 7a03 	vstr	s15, [r3, #12]
		rJoySpeed.pitch = req.pitch;
 8001e28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e2c:	ee07 3a90 	vmov	s15, r3
 8001e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e34:	4b97      	ldr	r3, [pc, #604]	; (8002094 <ShoreConfigRequest+0x2dc>)
 8001e36:	edc3 7a04 	vstr	s15, [r3, #16]
		rJoySpeed.yaw = req.yaw;
 8001e3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e46:	4b93      	ldr	r3, [pc, #588]	; (8002094 <ShoreConfigRequest+0x2dc>)
 8001e48:	edc3 7a05 	vstr	s15, [r3, #20]

		rStabConstants[req.contour].pJoyUnitCast = req.pJoyUnitCast;
 8001e4c:	7a7b      	ldrb	r3, [r7, #9]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f8d7 2016 	ldr.w	r2, [r7, #22]
 8001e54:	4613      	mov	r3, r2
 8001e56:	461a      	mov	r2, r3
 8001e58:	498f      	ldr	r1, [pc, #572]	; (8002098 <ShoreConfigRequest+0x2e0>)
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4403      	add	r3, r0
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	440b      	add	r3, r1
 8001e64:	3304      	adds	r3, #4
 8001e66:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pSpeedDyn = req.pSpeedDyn;
 8001e68:	7a7b      	ldrb	r3, [r7, #9]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f8d7 201a 	ldr.w	r2, [r7, #26]
 8001e70:	4613      	mov	r3, r2
 8001e72:	461a      	mov	r2, r3
 8001e74:	4988      	ldr	r1, [pc, #544]	; (8002098 <ShoreConfigRequest+0x2e0>)
 8001e76:	4603      	mov	r3, r0
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4403      	add	r3, r0
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	440b      	add	r3, r1
 8001e80:	3308      	adds	r3, #8
 8001e82:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pErrGain = req.pErrGain;
 8001e84:	7a7b      	ldrb	r3, [r7, #9]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f8d7 201e 	ldr.w	r2, [r7, #30]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4981      	ldr	r1, [pc, #516]	; (8002098 <ShoreConfigRequest+0x2e0>)
 8001e92:	4603      	mov	r3, r0
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4403      	add	r3, r0
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	440b      	add	r3, r1
 8001e9c:	330c      	adds	r3, #12
 8001e9e:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].aFilter[POS_FILTER].T = req.posFilterT;
 8001ea0:	7a7b      	ldrb	r3, [r7, #9]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f8d7 2022 	ldr.w	r2, [r7, #34]	; 0x22
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	461a      	mov	r2, r3
 8001eac:	497a      	ldr	r1, [pc, #488]	; (8002098 <ShoreConfigRequest+0x2e0>)
 8001eae:	4603      	mov	r3, r0
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4403      	add	r3, r0
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	440b      	add	r3, r1
 8001eb8:	3310      	adds	r3, #16
 8001eba:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[POS_FILTER].K = req.posFilterK;
 8001ebc:	7a7b      	ldrb	r3, [r7, #9]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f8d7 2026 	ldr.w	r2, [r7, #38]	; 0x26
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4973      	ldr	r1, [pc, #460]	; (8002098 <ShoreConfigRequest+0x2e0>)
 8001eca:	4603      	mov	r3, r0
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4403      	add	r3, r0
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3314      	adds	r3, #20
 8001ed6:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].T = req.speedFilterT;
 8001ed8:	7a7b      	ldrb	r3, [r7, #9]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f8d7 202a 	ldr.w	r2, [r7, #42]	; 0x2a
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	496c      	ldr	r1, [pc, #432]	; (8002098 <ShoreConfigRequest+0x2e0>)
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4403      	add	r3, r0
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	440b      	add	r3, r1
 8001ef0:	3318      	adds	r3, #24
 8001ef2:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].K = req.speedFilterK;
 8001ef4:	7a7b      	ldrb	r3, [r7, #9]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f8d7 202e 	ldr.w	r2, [r7, #46]	; 0x2e
 8001efc:	4613      	mov	r3, r2
 8001efe:	461a      	mov	r2, r3
 8001f00:	4965      	ldr	r1, [pc, #404]	; (8002098 <ShoreConfigRequest+0x2e0>)
 8001f02:	4603      	mov	r3, r0
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4403      	add	r3, r0
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	440b      	add	r3, r1
 8001f0c:	331c      	adds	r3, #28
 8001f0e:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].pid.pGain = req.pid_pGain;
 8001f10:	7a7b      	ldrb	r3, [r7, #9]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f8d7 2032 	ldr.w	r2, [r7, #50]	; 0x32
 8001f18:	4613      	mov	r3, r2
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	495e      	ldr	r1, [pc, #376]	; (8002098 <ShoreConfigRequest+0x2e0>)
 8001f1e:	4603      	mov	r3, r0
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4403      	add	r3, r0
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	440b      	add	r3, r1
 8001f28:	3328      	adds	r3, #40	; 0x28
 8001f2a:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iGain = req.pid_iGain;
 8001f2c:	7a7b      	ldrb	r3, [r7, #9]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f8d7 2036 	ldr.w	r2, [r7, #54]	; 0x36
 8001f34:	4613      	mov	r3, r2
 8001f36:	461a      	mov	r2, r3
 8001f38:	4957      	ldr	r1, [pc, #348]	; (8002098 <ShoreConfigRequest+0x2e0>)
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4403      	add	r3, r0
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	440b      	add	r3, r1
 8001f44:	332c      	adds	r3, #44	; 0x2c
 8001f46:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iMax = req.pid_iMax;
 8001f48:	7a7b      	ldrb	r3, [r7, #9]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f8d7 203a 	ldr.w	r2, [r7, #58]	; 0x3a
 8001f50:	4613      	mov	r3, r2
 8001f52:	461a      	mov	r2, r3
 8001f54:	4950      	ldr	r1, [pc, #320]	; (8002098 <ShoreConfigRequest+0x2e0>)
 8001f56:	4603      	mov	r3, r0
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4403      	add	r3, r0
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	3330      	adds	r3, #48	; 0x30
 8001f62:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iMin = req.pid_iMin;
 8001f64:	7a7b      	ldrb	r3, [r7, #9]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f8d7 203e 	ldr.w	r2, [r7, #62]	; 0x3e
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4949      	ldr	r1, [pc, #292]	; (8002098 <ShoreConfigRequest+0x2e0>)
 8001f72:	4603      	mov	r3, r0
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4403      	add	r3, r0
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3334      	adds	r3, #52	; 0x34
 8001f7e:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].pThrustersMin = req.pThrustersMin;
 8001f80:	7a7b      	ldrb	r3, [r7, #9]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f8d7 2042 	ldr.w	r2, [r7, #66]	; 0x42
 8001f88:	4613      	mov	r3, r2
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4942      	ldr	r1, [pc, #264]	; (8002098 <ShoreConfigRequest+0x2e0>)
 8001f8e:	4603      	mov	r3, r0
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4403      	add	r3, r0
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	440b      	add	r3, r1
 8001f98:	3338      	adds	r3, #56	; 0x38
 8001f9a:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pThrustersMax = req.pThrustersMax;
 8001f9c:	7a7b      	ldrb	r3, [r7, #9]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f8d7 2046 	ldr.w	r2, [r7, #70]	; 0x46
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	493b      	ldr	r1, [pc, #236]	; (8002098 <ShoreConfigRequest+0x2e0>)
 8001faa:	4603      	mov	r3, r0
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4403      	add	r3, r0
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	440b      	add	r3, r1
 8001fb4:	333c      	adds	r3, #60	; 0x3c
 8001fb6:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].T = req.thrustersFilterT;
 8001fb8:	7a7b      	ldrb	r3, [r7, #9]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f8d7 204a 	ldr.w	r2, [r7, #74]	; 0x4a
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4934      	ldr	r1, [pc, #208]	; (8002098 <ShoreConfigRequest+0x2e0>)
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4403      	add	r3, r0
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	440b      	add	r3, r1
 8001fd0:	3320      	adds	r3, #32
 8001fd2:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].K = req.thrustersFilterK;
 8001fd4:	7a7b      	ldrb	r3, [r7, #9]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f8d7 204e 	ldr.w	r2, [r7, #78]	; 0x4e
 8001fdc:	4613      	mov	r3, r2
 8001fde:	461a      	mov	r2, r3
 8001fe0:	492d      	ldr	r1, [pc, #180]	; (8002098 <ShoreConfigRequest+0x2e0>)
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4403      	add	r3, r0
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	440b      	add	r3, r1
 8001fec:	3324      	adds	r3, #36	; 0x24
 8001fee:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].sOutSummatorMax = req.sOutSummatorMax;
 8001ff0:	7a7b      	ldrb	r3, [r7, #9]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f8d7 2052 	ldr.w	r2, [r7, #82]	; 0x52
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4926      	ldr	r1, [pc, #152]	; (8002098 <ShoreConfigRequest+0x2e0>)
 8001ffe:	4603      	mov	r3, r0
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4403      	add	r3, r0
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	440b      	add	r3, r1
 8002008:	3340      	adds	r3, #64	; 0x40
 800200a:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].sOutSummatorMin = req.sOutSummatorMin;
 800200c:	7a7b      	ldrb	r3, [r7, #9]
 800200e:	4618      	mov	r0, r3
 8002010:	f8d7 2056 	ldr.w	r2, [r7, #86]	; 0x56
 8002014:	4613      	mov	r3, r2
 8002016:	461a      	mov	r2, r3
 8002018:	491f      	ldr	r1, [pc, #124]	; (8002098 <ShoreConfigRequest+0x2e0>)
 800201a:	4603      	mov	r3, r0
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4403      	add	r3, r0
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	440b      	add	r3, r1
 8002024:	3344      	adds	r3, #68	; 0x44
 8002026:	601a      	str	r2, [r3, #0]

		if(rState.contourSelected != req.contour) {
 8002028:	4b1c      	ldr	r3, [pc, #112]	; (800209c <ShoreConfigRequest+0x2e4>)
 800202a:	785a      	ldrb	r2, [r3, #1]
 800202c:	7a7b      	ldrb	r3, [r7, #9]
 800202e:	429a      	cmp	r2, r3
 8002030:	d01d      	beq.n	800206e <ShoreConfigRequest+0x2b6>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002032:	2300      	movs	r3, #0
 8002034:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002038:	e00e      	b.n	8002058 <ShoreConfigRequest+0x2a0>
				rStabConstants[i].enable = false;
 800203a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800203e:	4916      	ldr	r1, [pc, #88]	; (8002098 <ShoreConfigRequest+0x2e0>)
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	440b      	add	r3, r1
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800204e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002052:	3301      	adds	r3, #1
 8002054:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002058:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800205c:	2b05      	cmp	r3, #5
 800205e:	d9ec      	bls.n	800203a <ShoreConfigRequest+0x282>
			}
			rState.contourSelected = req.contour;
 8002060:	7a7a      	ldrb	r2, [r7, #9]
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <ShoreConfigRequest+0x2e4>)
 8002064:	705a      	strb	r2, [r3, #1]
			stabilizationStart(req.contour);
 8002066:	7a7b      	ldrb	r3, [r7, #9]
 8002068:	4618      	mov	r0, r3
 800206a:	f001 fea1 	bl	8003db0 <stabilizationStart>
		}

		// TODO tuuuupooo
		formThrustVectors();
 800206e:	f002 fcb5 	bl	80049dc <formThrustVectors>

		++uartBus[SHORE_UART].successRxCounter;;
 8002072:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <ShoreConfigRequest+0x2e8>)
 8002074:	895b      	ldrh	r3, [r3, #10]
 8002076:	3301      	adds	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <ShoreConfigRequest+0x2e8>)
 800207c:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 800207e:	e004      	b.n	800208a <ShoreConfigRequest+0x2d2>
		++uartBus[SHORE_UART].brokenRxCounter;
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <ShoreConfigRequest+0x2e8>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	3301      	adds	r3, #1
 8002086:	4a06      	ldr	r2, [pc, #24]	; (80020a0 <ShoreConfigRequest+0x2e8>)
 8002088:	60d3      	str	r3, [r2, #12]
}
 800208a:	bf00      	nop
 800208c:	3760      	adds	r7, #96	; 0x60
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20001c58 	.word	0x20001c58
 8002098:	20001cb0 	.word	0x20001cb0
 800209c:	20001b20 	.word	0x20001b20
 80020a0:	200001a4 	.word	0x200001a4

080020a4 <ShoreDirectRequest>:

void ShoreDirectRequest(uint8_t *requestBuf)
{
 80020a4:	b5b0      	push	{r4, r5, r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_DIRECT_LENGTH)) {
 80020ac:	2111      	movs	r1, #17
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe ff39 	bl	8000f26 <IsCrc16ChecksummCorrect>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 809b 	beq.w	80021f2 <ShoreDirectRequest+0x14e>
		struct shoreRequestDirect_s req;
		memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_DIRECT_LENGTH);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f107 040c 	add.w	r4, r7, #12
 80020c2:	461d      	mov	r5, r3
 80020c4:	6828      	ldr	r0, [r5, #0]
 80020c6:	6869      	ldr	r1, [r5, #4]
 80020c8:	68aa      	ldr	r2, [r5, #8]
 80020ca:	68eb      	ldr	r3, [r5, #12]
 80020cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ce:	7c2b      	ldrb	r3, [r5, #16]
 80020d0:	7023      	strb	r3, [r4, #0]

		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80020d2:	2300      	movs	r3, #0
 80020d4:	77fb      	strb	r3, [r7, #31]
 80020d6:	e00b      	b.n	80020f0 <ShoreDirectRequest+0x4c>
			rStabConstants[i].enable = false;
 80020d8:	7ffa      	ldrb	r2, [r7, #31]
 80020da:	494a      	ldr	r1, [pc, #296]	; (8002204 <ShoreDirectRequest+0x160>)
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	440b      	add	r3, r1
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80020ea:	7ffb      	ldrb	r3, [r7, #31]
 80020ec:	3301      	adds	r3, #1
 80020ee:	77fb      	strb	r3, [r7, #31]
 80020f0:	7ffb      	ldrb	r3, [r7, #31]
 80020f2:	2b05      	cmp	r3, #5
 80020f4:	d9f0      	bls.n	80020d8 <ShoreDirectRequest+0x34>
		}

		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80020f6:	2300      	movs	r3, #0
 80020f8:	77bb      	strb	r3, [r7, #30]
 80020fa:	e070      	b.n	80021de <ShoreDirectRequest+0x13a>
			if(i != req.number) {
 80020fc:	7b7b      	ldrb	r3, [r7, #13]
 80020fe:	7fba      	ldrb	r2, [r7, #30]
 8002100:	429a      	cmp	r2, r3
 8002102:	d00a      	beq.n	800211a <ShoreDirectRequest+0x76>
				rThrusters[i].desiredSpeed = 0;
 8002104:	7fba      	ldrb	r2, [r7, #30]
 8002106:	4940      	ldr	r1, [pc, #256]	; (8002208 <ShoreDirectRequest+0x164>)
 8002108:	4613      	mov	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	3302      	adds	r3, #2
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	e05e      	b.n	80021d8 <ShoreDirectRequest+0x134>
			}
			else {
				rThrusters[req.number].desiredSpeed = req.velocity;
 800211a:	7b7b      	ldrb	r3, [r7, #13]
 800211c:	4619      	mov	r1, r3
 800211e:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8002122:	4a39      	ldr	r2, [pc, #228]	; (8002208 <ShoreDirectRequest+0x164>)
 8002124:	460b      	mov	r3, r1
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	440b      	add	r3, r1
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	3302      	adds	r3, #2
 8002130:	4602      	mov	r2, r0
 8002132:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].address = req.id;
 8002134:	7b7b      	ldrb	r3, [r7, #13]
 8002136:	4619      	mov	r1, r3
 8002138:	7bb8      	ldrb	r0, [r7, #14]
 800213a:	4a33      	ldr	r2, [pc, #204]	; (8002208 <ShoreDirectRequest+0x164>)
 800213c:	460b      	mov	r3, r1
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	440b      	add	r3, r1
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	4602      	mov	r2, r0
 8002148:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].kForward = req.kForward;
 800214a:	7b7b      	ldrb	r3, [r7, #13]
 800214c:	4618      	mov	r0, r3
 800214e:	f8d7 2011 	ldr.w	r2, [r7, #17]
 8002152:	4613      	mov	r3, r2
 8002154:	461a      	mov	r2, r3
 8002156:	492c      	ldr	r1, [pc, #176]	; (8002208 <ShoreDirectRequest+0x164>)
 8002158:	4603      	mov	r3, r0
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4403      	add	r3, r0
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	330c      	adds	r3, #12
 8002164:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].kBackward = req.kBackward;
 8002166:	7b7b      	ldrb	r3, [r7, #13]
 8002168:	4618      	mov	r0, r3
 800216a:	f8d7 2015 	ldr.w	r2, [r7, #21]
 800216e:	4613      	mov	r3, r2
 8002170:	461a      	mov	r2, r3
 8002172:	4925      	ldr	r1, [pc, #148]	; (8002208 <ShoreDirectRequest+0x164>)
 8002174:	4603      	mov	r3, r0
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4403      	add	r3, r0
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	440b      	add	r3, r1
 800217e:	3310      	adds	r3, #16
 8002180:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].sForward = req.sForward;
 8002182:	7b7b      	ldrb	r3, [r7, #13]
 8002184:	4619      	mov	r1, r3
 8002186:	f997 0019 	ldrsb.w	r0, [r7, #25]
 800218a:	4a1f      	ldr	r2, [pc, #124]	; (8002208 <ShoreDirectRequest+0x164>)
 800218c:	460b      	mov	r3, r1
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	440b      	add	r3, r1
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	3314      	adds	r3, #20
 8002198:	4602      	mov	r2, r0
 800219a:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].sBackward = req.sBackward;
 800219c:	7b7b      	ldrb	r3, [r7, #13]
 800219e:	4619      	mov	r1, r3
 80021a0:	f997 001a 	ldrsb.w	r0, [r7, #26]
 80021a4:	4a18      	ldr	r2, [pc, #96]	; (8002208 <ShoreDirectRequest+0x164>)
 80021a6:	460b      	mov	r3, r1
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	440b      	add	r3, r1
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4413      	add	r3, r2
 80021b0:	3315      	adds	r3, #21
 80021b2:	4602      	mov	r2, r0
 80021b4:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].inverse = req.reverse;
 80021b6:	7c3b      	ldrb	r3, [r7, #16]
 80021b8:	7b7a      	ldrb	r2, [r7, #13]
 80021ba:	4611      	mov	r1, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	bf14      	ite	ne
 80021c0:	2301      	movne	r3, #1
 80021c2:	2300      	moveq	r3, #0
 80021c4:	b2d8      	uxtb	r0, r3
 80021c6:	4a10      	ldr	r2, [pc, #64]	; (8002208 <ShoreDirectRequest+0x164>)
 80021c8:	460b      	mov	r3, r1
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	440b      	add	r3, r1
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4413      	add	r3, r2
 80021d2:	3316      	adds	r3, #22
 80021d4:	4602      	mov	r2, r0
 80021d6:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80021d8:	7fbb      	ldrb	r3, [r7, #30]
 80021da:	3301      	adds	r3, #1
 80021dc:	77bb      	strb	r3, [r7, #30]
 80021de:	7fbb      	ldrb	r3, [r7, #30]
 80021e0:	2b07      	cmp	r3, #7
 80021e2:	d98b      	bls.n	80020fc <ShoreDirectRequest+0x58>
			}
		}

		++uartBus[SHORE_UART].successRxCounter;;
 80021e4:	4b09      	ldr	r3, [pc, #36]	; (800220c <ShoreDirectRequest+0x168>)
 80021e6:	895b      	ldrh	r3, [r3, #10]
 80021e8:	3301      	adds	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <ShoreDirectRequest+0x168>)
 80021ee:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 80021f0:	e004      	b.n	80021fc <ShoreDirectRequest+0x158>
		++uartBus[SHORE_UART].brokenRxCounter;
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <ShoreDirectRequest+0x168>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	3301      	adds	r3, #1
 80021f8:	4a04      	ldr	r2, [pc, #16]	; (800220c <ShoreDirectRequest+0x168>)
 80021fa:	60d3      	str	r3, [r2, #12]
}
 80021fc:	bf00      	nop
 80021fe:	3720      	adds	r7, #32
 8002200:	46bd      	mov	sp, r7
 8002202:	bdb0      	pop	{r4, r5, r7, pc}
 8002204:	20001cb0 	.word	0x20001cb0
 8002208:	20001b2c 	.word	0x20001b2c
 800220c:	200001a4 	.word	0x200001a4

08002210 <ShoreResponse>:

void ShoreResponse(uint8_t *responseBuf)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b094      	sub	sp, #80	; 0x50
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	struct shoreResponse_s res;

    res.roll = rSensors.roll;
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <ShoreResponse+0x78>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60bb      	str	r3, [r7, #8]
    res.pitch = rSensors.pitch;
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <ShoreResponse+0x78>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	60fb      	str	r3, [r7, #12]
    res.yaw =  rSensors.yaw;//*rStabState[STAB_YAW].posSignal;//rSensors.yaw;
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <ShoreResponse+0x78>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	613b      	str	r3, [r7, #16]
    res.rollSpeed = rSensors.rollSpeed;
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <ShoreResponse+0x78>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	617b      	str	r3, [r7, #20]
    res.pitchSpeed = rSensors.pitchSpeed;
 8002230:	4b15      	ldr	r3, [pc, #84]	; (8002288 <ShoreResponse+0x78>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	61bb      	str	r3, [r7, #24]
    res.yawSpeed = rSensors.yawSpeed;
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <ShoreResponse+0x78>)
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	61fb      	str	r3, [r7, #28]

    res.pressure = rSensors.pressure;
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <ShoreResponse+0x78>)
 800223e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002240:	623b      	str	r3, [r7, #32]

    res.vma_errors = 0x55;         //!!!!!TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 8002242:	2300      	movs	r3, #0
 8002244:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8002248:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800224c:	2300      	movs	r3, #0
 800224e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    // TODO do this properly pls
    res.dev_errors = 0;//robot->device.errors;
 8002252:	2300      	movs	r3, #0
 8002254:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8002258:	2300      	movs	r3, #0
 800225a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    res.pc_errors = rComputer.errors;
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <ShoreResponse+0x7c>)
 8002260:	785b      	ldrb	r3, [r3, #1]
 8002262:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

    memcpy((void*)responseBuf, (void*)&res, SHORE_RESPONSE_LENGTH);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4618      	mov	r0, r3
 800226a:	f107 0308 	add.w	r3, r7, #8
 800226e:	2246      	movs	r2, #70	; 0x46
 8002270:	4619      	mov	r1, r3
 8002272:	f00a f87f 	bl	800c374 <memcpy>
    AddCrc16Checksumm(responseBuf, SHORE_RESPONSE_LENGTH);
 8002276:	2146      	movs	r1, #70	; 0x46
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7fe fe74 	bl	8000f66 <AddCrc16Checksumm>
}
 800227e:	bf00      	nop
 8002280:	3750      	adds	r7, #80	; 0x50
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20001bec 	.word	0x20001bec
 800228c:	20001c54 	.word	0x20001c54

08002290 <ShoreConfigResponse>:

void ShoreConfigResponse(uint8_t *responseBuf)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b09c      	sub	sp, #112	; 0x70
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	struct shoreConfigResponse_s res;

	res.code = REQUEST_CONFIG_CODE;
 8002298:	2355      	movs	r3, #85	; 0x55
 800229a:	733b      	strb	r3, [r7, #12]

	res.roll = rSensors.roll;
 800229c:	4b74      	ldr	r3, [pc, #464]	; (8002470 <ShoreConfigResponse+0x1e0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8c7 300d 	str.w	r3, [r7, #13]
	res.pitch = rSensors.pitch;
 80022a4:	4b72      	ldr	r3, [pc, #456]	; (8002470 <ShoreConfigResponse+0x1e0>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f8c7 3011 	str.w	r3, [r7, #17]
	res.yaw = rSensors.yaw;
 80022ac:	4b70      	ldr	r3, [pc, #448]	; (8002470 <ShoreConfigResponse+0x1e0>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f8c7 3015 	str.w	r3, [r7, #21]
	res.raw_yaw = rSensors.raw_yaw;
 80022b4:	4b6e      	ldr	r3, [pc, #440]	; (8002470 <ShoreConfigResponse+0x1e0>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f8c7 3019 	str.w	r3, [r7, #25]

	res.rollSpeed = rSensors.rollSpeed;
 80022bc:	4b6c      	ldr	r3, [pc, #432]	; (8002470 <ShoreConfigResponse+0x1e0>)
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	f8c7 301d 	str.w	r3, [r7, #29]
	res.pitchSpeed = rSensors.pitchSpeed;
 80022c4:	4b6a      	ldr	r3, [pc, #424]	; (8002470 <ShoreConfigResponse+0x1e0>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
	res.yawSpeed = rSensors.yawSpeed;
 80022cc:	4b68      	ldr	r3, [pc, #416]	; (8002470 <ShoreConfigResponse+0x1e0>)
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25

	res.pressure = rSensors.pressure;
 80022d4:	4b66      	ldr	r3, [pc, #408]	; (8002470 <ShoreConfigResponse+0x1e0>)
 80022d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d8:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
	res.in_pressure = 0;
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	f8c7 302d 	str.w	r3, [r7, #45]	; 0x2d

	res.inputSignal = *rStabState[rState.contourSelected].inputSignal;
 80022e4:	4b63      	ldr	r3, [pc, #396]	; (8002474 <ShoreConfigResponse+0x1e4>)
 80022e6:	785b      	ldrb	r3, [r3, #1]
 80022e8:	4619      	mov	r1, r3
 80022ea:	4a63      	ldr	r2, [pc, #396]	; (8002478 <ShoreConfigResponse+0x1e8>)
 80022ec:	2358      	movs	r3, #88	; 0x58
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f8c7 3031 	str.w	r3, [r7, #49]	; 0x31
	res.speedSignal = *rStabState[rState.contourSelected].speedSignal;
 80022fc:	4b5d      	ldr	r3, [pc, #372]	; (8002474 <ShoreConfigResponse+0x1e4>)
 80022fe:	785b      	ldrb	r3, [r3, #1]
 8002300:	4619      	mov	r1, r3
 8002302:	4a5d      	ldr	r2, [pc, #372]	; (8002478 <ShoreConfigResponse+0x1e8>)
 8002304:	2358      	movs	r3, #88	; 0x58
 8002306:	fb01 f303 	mul.w	r3, r1, r3
 800230a:	4413      	add	r3, r2
 800230c:	3304      	adds	r3, #4
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f8c7 3035 	str.w	r3, [r7, #53]	; 0x35
	res.posSignal = *rStabState[rState.contourSelected].posSignal;
 8002316:	4b57      	ldr	r3, [pc, #348]	; (8002474 <ShoreConfigResponse+0x1e4>)
 8002318:	785b      	ldrb	r3, [r3, #1]
 800231a:	4619      	mov	r1, r3
 800231c:	4a56      	ldr	r2, [pc, #344]	; (8002478 <ShoreConfigResponse+0x1e8>)
 800231e:	2358      	movs	r3, #88	; 0x58
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	3308      	adds	r3, #8
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8c7 3039 	str.w	r3, [r7, #57]	; 0x39

	res.joyUnitCasted = rStabState[rState.contourSelected].joyUnitCasted;
 8002330:	4b50      	ldr	r3, [pc, #320]	; (8002474 <ShoreConfigResponse+0x1e4>)
 8002332:	785b      	ldrb	r3, [r3, #1]
 8002334:	4619      	mov	r1, r3
 8002336:	4a50      	ldr	r2, [pc, #320]	; (8002478 <ShoreConfigResponse+0x1e8>)
 8002338:	2358      	movs	r3, #88	; 0x58
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	331c      	adds	r3, #28
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8c7 303d 	str.w	r3, [r7, #61]	; 0x3d
	res.joy_iValue = rStabState[rState.contourSelected].joy_iValue;
 8002348:	4b4a      	ldr	r3, [pc, #296]	; (8002474 <ShoreConfigResponse+0x1e4>)
 800234a:	785b      	ldrb	r3, [r3, #1]
 800234c:	4619      	mov	r1, r3
 800234e:	4a4a      	ldr	r2, [pc, #296]	; (8002478 <ShoreConfigResponse+0x1e8>)
 8002350:	2358      	movs	r3, #88	; 0x58
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	3320      	adds	r3, #32
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8c7 3041 	str.w	r3, [r7, #65]	; 0x41
	res.posError = rStabState[rState.contourSelected].posError;
 8002360:	4b44      	ldr	r3, [pc, #272]	; (8002474 <ShoreConfigResponse+0x1e4>)
 8002362:	785b      	ldrb	r3, [r3, #1]
 8002364:	4619      	mov	r1, r3
 8002366:	4a44      	ldr	r2, [pc, #272]	; (8002478 <ShoreConfigResponse+0x1e8>)
 8002368:	2358      	movs	r3, #88	; 0x58
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	4413      	add	r3, r2
 8002370:	3324      	adds	r3, #36	; 0x24
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f8c7 3045 	str.w	r3, [r7, #69]	; 0x45
	res.speedError = rStabState[rState.contourSelected].speedError;
 8002378:	4b3e      	ldr	r3, [pc, #248]	; (8002474 <ShoreConfigResponse+0x1e4>)
 800237a:	785b      	ldrb	r3, [r3, #1]
 800237c:	4619      	mov	r1, r3
 800237e:	4a3e      	ldr	r2, [pc, #248]	; (8002478 <ShoreConfigResponse+0x1e8>)
 8002380:	2358      	movs	r3, #88	; 0x58
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	3328      	adds	r3, #40	; 0x28
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f8c7 3049 	str.w	r3, [r7, #73]	; 0x49
	res.dynSummator = rStabState[rState.contourSelected].dynSummator;
 8002390:	4b38      	ldr	r3, [pc, #224]	; (8002474 <ShoreConfigResponse+0x1e4>)
 8002392:	785b      	ldrb	r3, [r3, #1]
 8002394:	4619      	mov	r1, r3
 8002396:	4a38      	ldr	r2, [pc, #224]	; (8002478 <ShoreConfigResponse+0x1e8>)
 8002398:	2358      	movs	r3, #88	; 0x58
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	332c      	adds	r3, #44	; 0x2c
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f8c7 304d 	str.w	r3, [r7, #77]	; 0x4d
	res.pidValue = rStabState[rState.contourSelected].pidValue;
 80023a8:	4b32      	ldr	r3, [pc, #200]	; (8002474 <ShoreConfigResponse+0x1e4>)
 80023aa:	785b      	ldrb	r3, [r3, #1]
 80023ac:	4619      	mov	r1, r3
 80023ae:	4a32      	ldr	r2, [pc, #200]	; (8002478 <ShoreConfigResponse+0x1e8>)
 80023b0:	2358      	movs	r3, #88	; 0x58
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	3330      	adds	r3, #48	; 0x30
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f8c7 3051 	str.w	r3, [r7, #81]	; 0x51
	res.posErrorAmp = rStabState[rState.contourSelected].posErrorAmp;
 80023c0:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <ShoreConfigResponse+0x1e4>)
 80023c2:	785b      	ldrb	r3, [r3, #1]
 80023c4:	4619      	mov	r1, r3
 80023c6:	4a2c      	ldr	r2, [pc, #176]	; (8002478 <ShoreConfigResponse+0x1e8>)
 80023c8:	2358      	movs	r3, #88	; 0x58
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	3338      	adds	r3, #56	; 0x38
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f8c7 3055 	str.w	r3, [r7, #85]	; 0x55
	res.speedFiltered = rStabState[rState.contourSelected].speedFiltered;
 80023d8:	4b26      	ldr	r3, [pc, #152]	; (8002474 <ShoreConfigResponse+0x1e4>)
 80023da:	785b      	ldrb	r3, [r3, #1]
 80023dc:	4619      	mov	r1, r3
 80023de:	4a26      	ldr	r2, [pc, #152]	; (8002478 <ShoreConfigResponse+0x1e8>)
 80023e0:	2358      	movs	r3, #88	; 0x58
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	333c      	adds	r3, #60	; 0x3c
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f8c7 3059 	str.w	r3, [r7, #89]	; 0x59
	res.posFiltered = rStabState[rState.contourSelected].posFiltered;
 80023f0:	4b20      	ldr	r3, [pc, #128]	; (8002474 <ShoreConfigResponse+0x1e4>)
 80023f2:	785b      	ldrb	r3, [r3, #1]
 80023f4:	4619      	mov	r1, r3
 80023f6:	4a20      	ldr	r2, [pc, #128]	; (8002478 <ShoreConfigResponse+0x1e8>)
 80023f8:	2358      	movs	r3, #88	; 0x58
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4413      	add	r3, r2
 8002400:	3340      	adds	r3, #64	; 0x40
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f8c7 305d 	str.w	r3, [r7, #93]	; 0x5d

	res.pid_iValue = rStabState[rState.contourSelected].pid_iValue;
 8002408:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <ShoreConfigResponse+0x1e4>)
 800240a:	785b      	ldrb	r3, [r3, #1]
 800240c:	4619      	mov	r1, r3
 800240e:	4a1a      	ldr	r2, [pc, #104]	; (8002478 <ShoreConfigResponse+0x1e8>)
 8002410:	2358      	movs	r3, #88	; 0x58
 8002412:	fb01 f303 	mul.w	r3, r1, r3
 8002416:	4413      	add	r3, r2
 8002418:	3334      	adds	r3, #52	; 0x34
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8c7 3061 	str.w	r3, [r7, #97]	; 0x61

	res.thrustersFiltered = rStabState[rState.contourSelected].thrustersFiltered;
 8002420:	4b14      	ldr	r3, [pc, #80]	; (8002474 <ShoreConfigResponse+0x1e4>)
 8002422:	785b      	ldrb	r3, [r3, #1]
 8002424:	4619      	mov	r1, r3
 8002426:	4a14      	ldr	r2, [pc, #80]	; (8002478 <ShoreConfigResponse+0x1e8>)
 8002428:	2358      	movs	r3, #88	; 0x58
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	334c      	adds	r3, #76	; 0x4c
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8c7 3065 	str.w	r3, [r7, #101]	; 0x65
	res.outputSignal = rStabState[rState.contourSelected].outputSignal;
 8002438:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <ShoreConfigResponse+0x1e4>)
 800243a:	785b      	ldrb	r3, [r3, #1]
 800243c:	4619      	mov	r1, r3
 800243e:	4a0e      	ldr	r2, [pc, #56]	; (8002478 <ShoreConfigResponse+0x1e8>)
 8002440:	2358      	movs	r3, #88	; 0x58
 8002442:	fb01 f303 	mul.w	r3, r1, r3
 8002446:	4413      	add	r3, r2
 8002448:	3350      	adds	r3, #80	; 0x50
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8c7 3069 	str.w	r3, [r7, #105]	; 0x69

	memcpy((void*)responseBuf, (void*)&res, SHORE_CONFIG_RESPONSE_LENGTH);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4618      	mov	r0, r3
 8002454:	f107 030c 	add.w	r3, r7, #12
 8002458:	2263      	movs	r2, #99	; 0x63
 800245a:	4619      	mov	r1, r3
 800245c:	f009 ff8a 	bl	800c374 <memcpy>

	AddCrc16Checksumm(responseBuf, SHORE_CONFIG_RESPONSE_LENGTH);
 8002460:	2163      	movs	r1, #99	; 0x63
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe fd7f 	bl	8000f66 <AddCrc16Checksumm>
}
 8002468:	bf00      	nop
 800246a:	3770      	adds	r7, #112	; 0x70
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20001bec 	.word	0x20001bec
 8002474:	20001b20 	.word	0x20001b20
 8002478:	20001e60 	.word	0x20001e60

0800247c <ShoreDirectResponse>:

void ShoreDirectResponse(uint8_t *responseBuf)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	struct shoreResponseDirect_s res;

	res.number = 0xFF;
 8002484:	23ff      	movs	r3, #255	; 0xff
 8002486:	723b      	strb	r3, [r7, #8]
	res.connection = 0xAA;
 8002488:	23aa      	movs	r3, #170	; 0xaa
 800248a:	727b      	strb	r3, [r7, #9]
	res.current = 0xBB;
 800248c:	23bb      	movs	r3, #187	; 0xbb
 800248e:	817b      	strh	r3, [r7, #10]

    memcpy((void*)responseBuf, (void*)&res, SHORE_DIRECT_RESPONSE_LENGTH);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	461a      	mov	r2, r3
 8002494:	f107 0308 	add.w	r3, r7, #8
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	6010      	str	r0, [r2, #0]
 800249c:	889b      	ldrh	r3, [r3, #4]
 800249e:	8093      	strh	r3, [r2, #4]

    AddCrc16Checksumm(responseBuf, SHORE_DIRECT_RESPONSE_LENGTH);
 80024a0:	2106      	movs	r1, #6
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7fe fd5f 	bl	8000f66 <AddCrc16Checksumm>
}
 80024a8:	bf00      	nop
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <ImuReceive>:
	}
	return 0;
}

void ImuReceive(uint8_t *ReceiveBuf)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	 // Check sync byte
	 if ((ReceiveBuf[0] != 0xFA)&&(ReceiveBuf[1] != 0x01)&&(ReceiveBuf[2] != 0x29)&&(ReceiveBuf[3] != 0x01))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2bfa      	cmp	r3, #250	; 0xfa
 80024be:	d00e      	beq.n	80024de <ImuReceive+0x2e>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3301      	adds	r3, #1
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d009      	beq.n	80024de <ImuReceive+0x2e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3302      	adds	r3, #2
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b29      	cmp	r3, #41	; 0x29
 80024d2:	d004      	beq.n	80024de <ImuReceive+0x2e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3303      	adds	r3, #3
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d13c      	bne.n	8002558 <ImuReceive+0xa8>
		 return;


  	  memcpy(&rSensors.yaw, ReceiveBuf + 12, sizeof(rSensors.yaw));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	330c      	adds	r3, #12
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <ImuReceive+0xb0>)
 80024e8:	609a      	str	r2, [r3, #8]
  	  memcpy(&rSensors.pitch, ReceiveBuf + 16, sizeof(rSensors.pitch));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3310      	adds	r3, #16
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <ImuReceive+0xb0>)
 80024f4:	605a      	str	r2, [r3, #4]
  	  memcpy(&rSensors.roll, ReceiveBuf + 20, sizeof(rSensors.roll));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3314      	adds	r3, #20
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <ImuReceive+0xb0>)
 8002500:	601a      	str	r2, [r3, #0]

  	  memcpy(&rSensors.accelX, ReceiveBuf + 36, sizeof(rSensors.accelX));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3324      	adds	r3, #36	; 0x24
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <ImuReceive+0xb0>)
 800250c:	629a      	str	r2, [r3, #40]	; 0x28
  	  memcpy(&rSensors.accelY, ReceiveBuf + 40, sizeof(rSensors.accelY));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3328      	adds	r3, #40	; 0x28
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	4b12      	ldr	r3, [pc, #72]	; (8002560 <ImuReceive+0xb0>)
 8002518:	62da      	str	r2, [r3, #44]	; 0x2c
  	  memcpy(&rSensors.accelZ, ReceiveBuf + 44, sizeof(rSensors.accelZ));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	332c      	adds	r3, #44	; 0x2c
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <ImuReceive+0xb0>)
 8002524:	631a      	str	r2, [r3, #48]	; 0x30
  	  memcpy(&rSensors.crc, ReceiveBuf + 48, sizeof(rSensors.crc));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3330      	adds	r3, #48	; 0x30
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	b29a      	uxth	r2, r3
 800252e:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <ImuReceive+0xb0>)
 8002530:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52


    rSensors.LastTick = xTaskGetTickCount();
 8002534:	f008 f97e 	bl	800a834 <xTaskGetTickCount>
 8002538:	ee07 0a90 	vmov	s15, r0
 800253c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002540:	4b07      	ldr	r3, [pc, #28]	; (8002560 <ImuReceive+0xb0>)
 8002542:	edc3 7a05 	vstr	s15, [r3, #20]


    ++uartBus[IMU_UART].successRxCounter;
 8002546:	4b07      	ldr	r3, [pc, #28]	; (8002564 <ImuReceive+0xb4>)
 8002548:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800254c:	3301      	adds	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <ImuReceive+0xb4>)
 8002552:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8002556:	e000      	b.n	800255a <ImuReceive+0xaa>
		 return;
 8002558:	bf00      	nop
}
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20001bec 	.word	0x20001bec
 8002564:	200001a4 	.word	0x200001a4

08002568 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	607b      	str	r3, [r7, #4]
 8002572:	4b27      	ldr	r3, [pc, #156]	; (8002610 <MX_DMA_Init+0xa8>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a26      	ldr	r2, [pc, #152]	; (8002610 <MX_DMA_Init+0xa8>)
 8002578:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b24      	ldr	r3, [pc, #144]	; (8002610 <MX_DMA_Init+0xa8>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002586:	607b      	str	r3, [r7, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	603b      	str	r3, [r7, #0]
 800258e:	4b20      	ldr	r3, [pc, #128]	; (8002610 <MX_DMA_Init+0xa8>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a1f      	ldr	r2, [pc, #124]	; (8002610 <MX_DMA_Init+0xa8>)
 8002594:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <MX_DMA_Init+0xa8>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2105      	movs	r1, #5
 80025aa:	200c      	movs	r0, #12
 80025ac:	f002 ffca 	bl	8005544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80025b0:	200c      	movs	r0, #12
 80025b2:	f002 ffe3 	bl	800557c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2105      	movs	r1, #5
 80025ba:	200e      	movs	r0, #14
 80025bc:	f002 ffc2 	bl	8005544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80025c0:	200e      	movs	r0, #14
 80025c2:	f002 ffdb 	bl	800557c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80025c6:	2200      	movs	r2, #0
 80025c8:	2105      	movs	r1, #5
 80025ca:	2010      	movs	r0, #16
 80025cc:	f002 ffba 	bl	8005544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80025d0:	2010      	movs	r0, #16
 80025d2:	f002 ffd3 	bl	800557c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2105      	movs	r1, #5
 80025da:	2011      	movs	r0, #17
 80025dc:	f002 ffb2 	bl	8005544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80025e0:	2011      	movs	r0, #17
 80025e2:	f002 ffcb 	bl	800557c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80025e6:	2200      	movs	r2, #0
 80025e8:	2105      	movs	r1, #5
 80025ea:	203a      	movs	r0, #58	; 0x3a
 80025ec:	f002 ffaa 	bl	8005544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80025f0:	203a      	movs	r0, #58	; 0x3a
 80025f2:	f002 ffc3 	bl	800557c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2105      	movs	r1, #5
 80025fa:	2046      	movs	r0, #70	; 0x46
 80025fc:	f002 ffa2 	bl	8005544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002600:	2046      	movs	r0, #70	; 0x46
 8002602:	f002 ffbb 	bl	800557c <HAL_NVIC_EnableIRQ>

}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800

08002614 <flashReadSettings>:
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
	HAL_FLASH_Lock();
}

void flashReadSettings(struct flashConfiguration_s *config)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	uint32_t *source_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 800261c:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <flashReadSettings+0x44>)
 800261e:	617b      	str	r3, [r7, #20]
	uint32_t *dest_addr = (void *)config;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	613b      	str	r3, [r7, #16]

	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 8002624:	2300      	movs	r3, #0
 8002626:	81fb      	strh	r3, [r7, #14]
 8002628:	e00c      	b.n	8002644 <flashReadSettings+0x30>
		*dest_addr = *(__IO uint32_t*)source_addr;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	601a      	str	r2, [r3, #0]
		source_addr++;
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	3304      	adds	r3, #4
 8002636:	617b      	str	r3, [r7, #20]
		dest_addr++;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	3304      	adds	r3, #4
 800263c:	613b      	str	r3, [r7, #16]
	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 800263e:	89fb      	ldrh	r3, [r7, #14]
 8002640:	3301      	adds	r3, #1
 8002642:	81fb      	strh	r3, [r7, #14]
 8002644:	89fb      	ldrh	r3, [r7, #14]
 8002646:	2b89      	cmp	r3, #137	; 0x89
 8002648:	d9ef      	bls.n	800262a <flashReadSettings+0x16>
	}
}
 800264a:	bf00      	nop
 800264c:	bf00      	nop
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	0803f800 	.word	0x0803f800

0800265c <flashWriteSettings>:

void flashWriteSettings(struct flashConfiguration_s *config)
{
 800265c:	b5b0      	push	{r4, r5, r7, lr}
 800265e:	b08c      	sub	sp, #48	; 0x30
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
	// Write settings
	HAL_FLASH_Unlock();
 8002664:	f003 fbee 	bl	8005e44 <HAL_FLASH_Unlock>

	// erase page
	FLASH_EraseInitTypeDef erase_conf;
	erase_conf.TypeErase = FLASH_TYPEERASE_SECTORS; // erase 1 page
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]
	erase_conf.Sector = (uint32_t)(CONFIG_PAGE_ADDR);
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <flashWriteSettings+0x78>)
 800266e:	61bb      	str	r3, [r7, #24]
	erase_conf.NbSectors = 1;
 8002670:	2301      	movs	r3, #1
 8002672:	61fb      	str	r3, [r7, #28]

	uint32_t page_error;
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
 8002674:	f107 020c 	add.w	r2, r7, #12
 8002678:	f107 0310 	add.w	r3, r7, #16
 800267c:	4611      	mov	r1, r2
 800267e:	4618      	mov	r0, r3
 8002680:	f003 fd42 	bl	8006108 <HAL_FLASHEx_Erase>

	// write page
	uint32_t *source_addr = (void *)config;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t *dest_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 8002688:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <flashWriteSettings+0x78>)
 800268a:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 800268c:	2300      	movs	r3, #0
 800268e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002692:	e015      	b.n	80026c0 <flashWriteSettings+0x64>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)dest_addr, *source_addr);
 8002694:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2200      	movs	r2, #0
 800269c:	461c      	mov	r4, r3
 800269e:	4615      	mov	r5, r2
 80026a0:	4622      	mov	r2, r4
 80026a2:	462b      	mov	r3, r5
 80026a4:	2002      	movs	r0, #2
 80026a6:	f003 fb79 	bl	8005d9c <HAL_FLASH_Program>
		source_addr++;
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	3304      	adds	r3, #4
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
		dest_addr++;
 80026b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b2:	3304      	adds	r3, #4
 80026b4:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 80026b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026ba:	3301      	adds	r3, #1
 80026bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80026c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026c4:	2b89      	cmp	r3, #137	; 0x89
 80026c6:	d9e5      	bls.n	8002694 <flashWriteSettings+0x38>
	}

	HAL_FLASH_Lock();
 80026c8:	f003 fbde 	bl	8005e88 <HAL_FLASH_Lock>
}
 80026cc:	bf00      	nop
 80026ce:	3730      	adds	r7, #48	; 0x30
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bdb0      	pop	{r4, r5, r7, pc}
 80026d4:	0803f800 	.word	0x0803f800

080026d8 <flashFillStructure>:

void flashFillStructure(struct flashConfiguration_s *config)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	config->writeFlag = 0xAA;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	22aa      	movs	r2, #170	; 0xaa
 80026e4:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80026e6:	2300      	movs	r3, #0
 80026e8:	73fb      	strb	r3, [r7, #15]
 80026ea:	e154      	b.n	8002996 <flashFillStructure+0x2be>
		config->stabConstants[i].pJoyUnitCast = rStabConstants[i].pJoyUnitCast;
 80026ec:	7bf9      	ldrb	r1, [r7, #15]
 80026ee:	7bfa      	ldrb	r2, [r7, #15]
 80026f0:	48ae      	ldr	r0, [pc, #696]	; (80029ac <flashFillStructure+0x2d4>)
 80026f2:	460b      	mov	r3, r1
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	440b      	add	r3, r1
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4403      	add	r3, r0
 80026fc:	3304      	adds	r3, #4
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	3301      	adds	r3, #1
 800270e:	4602      	mov	r2, r0
 8002710:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pSpeedDyn = rStabConstants[i].pSpeedDyn;
 8002712:	7bf9      	ldrb	r1, [r7, #15]
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	48a5      	ldr	r0, [pc, #660]	; (80029ac <flashFillStructure+0x2d4>)
 8002718:	460b      	mov	r3, r1
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	440b      	add	r3, r1
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4403      	add	r3, r0
 8002722:	3308      	adds	r3, #8
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	3305      	adds	r3, #5
 8002734:	4602      	mov	r2, r0
 8002736:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pErrGain = rStabConstants[i].pErrGain;
 8002738:	7bf9      	ldrb	r1, [r7, #15]
 800273a:	7bfa      	ldrb	r2, [r7, #15]
 800273c:	489b      	ldr	r0, [pc, #620]	; (80029ac <flashFillStructure+0x2d4>)
 800273e:	460b      	mov	r3, r1
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	440b      	add	r3, r1
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4403      	add	r3, r0
 8002748:	330c      	adds	r3, #12
 800274a:	6818      	ldr	r0, [r3, #0]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	3308      	adds	r3, #8
 800275a:	3301      	adds	r3, #1
 800275c:	4602      	mov	r2, r0
 800275e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T1 = rStabConstants[i].aFilter[POS_FILTER].T;
 8002760:	7bf9      	ldrb	r1, [r7, #15]
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	4891      	ldr	r0, [pc, #580]	; (80029ac <flashFillStructure+0x2d4>)
 8002766:	460b      	mov	r3, r1
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	440b      	add	r3, r1
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4403      	add	r3, r0
 8002770:	3310      	adds	r3, #16
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	3308      	adds	r3, #8
 8002782:	3305      	adds	r3, #5
 8002784:	4602      	mov	r2, r0
 8002786:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T2 = rStabConstants[i].aFilter[SPEED_FILTER].T;
 8002788:	7bf9      	ldrb	r1, [r7, #15]
 800278a:	7bfa      	ldrb	r2, [r7, #15]
 800278c:	4887      	ldr	r0, [pc, #540]	; (80029ac <flashFillStructure+0x2d4>)
 800278e:	460b      	mov	r3, r1
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	440b      	add	r3, r1
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4403      	add	r3, r0
 8002798:	3318      	adds	r3, #24
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	3310      	adds	r3, #16
 80027aa:	3301      	adds	r3, #1
 80027ac:	4602      	mov	r2, r0
 80027ae:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K1 = rStabConstants[i].aFilter[POS_FILTER].K;
 80027b0:	7bf9      	ldrb	r1, [r7, #15]
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	487d      	ldr	r0, [pc, #500]	; (80029ac <flashFillStructure+0x2d4>)
 80027b6:	460b      	mov	r3, r1
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	440b      	add	r3, r1
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4403      	add	r3, r0
 80027c0:	3314      	adds	r3, #20
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	3310      	adds	r3, #16
 80027d2:	3305      	adds	r3, #5
 80027d4:	4602      	mov	r2, r0
 80027d6:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K2 = rStabConstants[i].aFilter[SPEED_FILTER].K;
 80027d8:	7bf9      	ldrb	r1, [r7, #15]
 80027da:	7bfa      	ldrb	r2, [r7, #15]
 80027dc:	4873      	ldr	r0, [pc, #460]	; (80029ac <flashFillStructure+0x2d4>)
 80027de:	460b      	mov	r3, r1
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	440b      	add	r3, r1
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4403      	add	r3, r0
 80027e8:	331c      	adds	r3, #28
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	3318      	adds	r3, #24
 80027fa:	3301      	adds	r3, #1
 80027fc:	4602      	mov	r2, r0
 80027fe:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_pGain = rStabConstants[i].pid.pGain;
 8002800:	7bf9      	ldrb	r1, [r7, #15]
 8002802:	7bfa      	ldrb	r2, [r7, #15]
 8002804:	4869      	ldr	r0, [pc, #420]	; (80029ac <flashFillStructure+0x2d4>)
 8002806:	460b      	mov	r3, r1
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	440b      	add	r3, r1
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4403      	add	r3, r0
 8002810:	3328      	adds	r3, #40	; 0x28
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	3318      	adds	r3, #24
 8002822:	3305      	adds	r3, #5
 8002824:	4602      	mov	r2, r0
 8002826:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iGain = rStabConstants[i].pid.iGain;
 8002828:	7bf9      	ldrb	r1, [r7, #15]
 800282a:	7bfa      	ldrb	r2, [r7, #15]
 800282c:	485f      	ldr	r0, [pc, #380]	; (80029ac <flashFillStructure+0x2d4>)
 800282e:	460b      	mov	r3, r1
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4403      	add	r3, r0
 8002838:	332c      	adds	r3, #44	; 0x2c
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	4413      	add	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	3320      	adds	r3, #32
 800284a:	3301      	adds	r3, #1
 800284c:	4602      	mov	r2, r0
 800284e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMax = rStabConstants[i].pid.iMax;
 8002850:	7bf9      	ldrb	r1, [r7, #15]
 8002852:	7bfa      	ldrb	r2, [r7, #15]
 8002854:	4855      	ldr	r0, [pc, #340]	; (80029ac <flashFillStructure+0x2d4>)
 8002856:	460b      	mov	r3, r1
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	440b      	add	r3, r1
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4403      	add	r3, r0
 8002860:	3330      	adds	r3, #48	; 0x30
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	4413      	add	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	3320      	adds	r3, #32
 8002872:	3305      	adds	r3, #5
 8002874:	4602      	mov	r2, r0
 8002876:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMin = rStabConstants[i].pid.iMin;
 8002878:	7bf9      	ldrb	r1, [r7, #15]
 800287a:	7bfa      	ldrb	r2, [r7, #15]
 800287c:	484b      	ldr	r0, [pc, #300]	; (80029ac <flashFillStructure+0x2d4>)
 800287e:	460b      	mov	r3, r1
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	440b      	add	r3, r1
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4403      	add	r3, r0
 8002888:	3334      	adds	r3, #52	; 0x34
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	3328      	adds	r3, #40	; 0x28
 800289a:	3301      	adds	r3, #1
 800289c:	4602      	mov	r2, r0
 800289e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMin = rStabConstants[i].pThrustersMin;
 80028a0:	7bf9      	ldrb	r1, [r7, #15]
 80028a2:	7bfa      	ldrb	r2, [r7, #15]
 80028a4:	4841      	ldr	r0, [pc, #260]	; (80029ac <flashFillStructure+0x2d4>)
 80028a6:	460b      	mov	r3, r1
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	440b      	add	r3, r1
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4403      	add	r3, r0
 80028b0:	3338      	adds	r3, #56	; 0x38
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	3328      	adds	r3, #40	; 0x28
 80028c2:	3305      	adds	r3, #5
 80028c4:	4602      	mov	r2, r0
 80028c6:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMax = rStabConstants[i].pThrustersMax;
 80028c8:	7bf9      	ldrb	r1, [r7, #15]
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	4837      	ldr	r0, [pc, #220]	; (80029ac <flashFillStructure+0x2d4>)
 80028ce:	460b      	mov	r3, r1
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	440b      	add	r3, r1
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4403      	add	r3, r0
 80028d8:	333c      	adds	r3, #60	; 0x3c
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	3330      	adds	r3, #48	; 0x30
 80028ea:	3301      	adds	r3, #1
 80028ec:	4602      	mov	r2, r0
 80028ee:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_T = rStabConstants[i].aFilter[THRUSTERS_FILTER].T;
 80028f0:	7bf9      	ldrb	r1, [r7, #15]
 80028f2:	7bfa      	ldrb	r2, [r7, #15]
 80028f4:	482d      	ldr	r0, [pc, #180]	; (80029ac <flashFillStructure+0x2d4>)
 80028f6:	460b      	mov	r3, r1
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	440b      	add	r3, r1
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4403      	add	r3, r0
 8002900:	3320      	adds	r3, #32
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	3330      	adds	r3, #48	; 0x30
 8002912:	3305      	adds	r3, #5
 8002914:	4602      	mov	r2, r0
 8002916:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_K = rStabConstants[i].aFilter[THRUSTERS_FILTER].K;
 8002918:	7bf9      	ldrb	r1, [r7, #15]
 800291a:	7bfa      	ldrb	r2, [r7, #15]
 800291c:	4823      	ldr	r0, [pc, #140]	; (80029ac <flashFillStructure+0x2d4>)
 800291e:	460b      	mov	r3, r1
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	440b      	add	r3, r1
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4403      	add	r3, r0
 8002928:	3324      	adds	r3, #36	; 0x24
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	4413      	add	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	3338      	adds	r3, #56	; 0x38
 800293a:	3301      	adds	r3, #1
 800293c:	4602      	mov	r2, r0
 800293e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMax = rStabConstants[i].sOutSummatorMax;
 8002940:	7bf9      	ldrb	r1, [r7, #15]
 8002942:	7bfa      	ldrb	r2, [r7, #15]
 8002944:	4819      	ldr	r0, [pc, #100]	; (80029ac <flashFillStructure+0x2d4>)
 8002946:	460b      	mov	r3, r1
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	440b      	add	r3, r1
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4403      	add	r3, r0
 8002950:	3340      	adds	r3, #64	; 0x40
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	4413      	add	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	3338      	adds	r3, #56	; 0x38
 8002962:	3305      	adds	r3, #5
 8002964:	4602      	mov	r2, r0
 8002966:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMin = rStabConstants[i].sOutSummatorMin;
 8002968:	7bf9      	ldrb	r1, [r7, #15]
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	480f      	ldr	r0, [pc, #60]	; (80029ac <flashFillStructure+0x2d4>)
 800296e:	460b      	mov	r3, r1
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4403      	add	r3, r0
 8002978:	3344      	adds	r3, #68	; 0x44
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	3340      	adds	r3, #64	; 0x40
 800298a:	3301      	adds	r3, #1
 800298c:	4602      	mov	r2, r0
 800298e:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	3301      	adds	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	2b05      	cmp	r3, #5
 800299a:	f67f aea7 	bls.w	80026ec <flashFillStructure+0x14>
//		config->thrusters[i].kBackward = rThrusters[i].kBackward;
//		config->thrusters[i].sForward = rThrusters[i].sForward;
//		config->thrusters[i].sBackward = rThrusters[i].sBackward;
//		config->thrusters[i].inverse = rThrusters[i].inverse;
//	}
}
 800299e:	bf00      	nop
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	20001cb0 	.word	0x20001cb0

080029b0 <flashReadStructure>:

void flashReadStructure(struct flashConfiguration_s *config)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80029b8:	2300      	movs	r3, #0
 80029ba:	73fb      	strb	r3, [r7, #15]
 80029bc:	e165      	b.n	8002c8a <flashReadStructure+0x2da>
		rStabConstants[i].pJoyUnitCast = config->stabConstants[i].pJoyUnitCast;
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	7bf9      	ldrb	r1, [r7, #15]
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4403      	add	r3, r0
 80029ce:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80029d2:	4613      	mov	r3, r2
 80029d4:	461a      	mov	r2, r3
 80029d6:	48b7      	ldr	r0, [pc, #732]	; (8002cb4 <flashReadStructure+0x304>)
 80029d8:	460b      	mov	r3, r1
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	440b      	add	r3, r1
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4403      	add	r3, r0
 80029e2:	3304      	adds	r3, #4
 80029e4:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pSpeedDyn = config->stabConstants[i].pSpeedDyn;
 80029e6:	7bfa      	ldrb	r2, [r7, #15]
 80029e8:	7bf9      	ldrb	r1, [r7, #15]
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4403      	add	r3, r0
 80029f6:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80029fa:	4613      	mov	r3, r2
 80029fc:	461a      	mov	r2, r3
 80029fe:	48ad      	ldr	r0, [pc, #692]	; (8002cb4 <flashReadStructure+0x304>)
 8002a00:	460b      	mov	r3, r1
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	440b      	add	r3, r1
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4403      	add	r3, r0
 8002a0a:	3308      	adds	r3, #8
 8002a0c:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pErrGain = config->stabConstants[i].pErrGain;
 8002a0e:	7bfa      	ldrb	r2, [r7, #15]
 8002a10:	7bf9      	ldrb	r1, [r7, #15]
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4403      	add	r3, r0
 8002a1e:	3308      	adds	r3, #8
 8002a20:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002a24:	4613      	mov	r3, r2
 8002a26:	461a      	mov	r2, r3
 8002a28:	48a2      	ldr	r0, [pc, #648]	; (8002cb4 <flashReadStructure+0x304>)
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	440b      	add	r3, r1
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4403      	add	r3, r0
 8002a34:	330c      	adds	r3, #12
 8002a36:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[POS_FILTER].T = config->stabConstants[i].aFilter_T1;
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	7bf9      	ldrb	r1, [r7, #15]
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	4413      	add	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4403      	add	r3, r0
 8002a48:	3308      	adds	r3, #8
 8002a4a:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	461a      	mov	r2, r3
 8002a52:	4898      	ldr	r0, [pc, #608]	; (8002cb4 <flashReadStructure+0x304>)
 8002a54:	460b      	mov	r3, r1
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	440b      	add	r3, r1
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4403      	add	r3, r0
 8002a5e:	3310      	adds	r3, #16
 8002a60:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].T = config->stabConstants[i].aFilter_T2;
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	7bf9      	ldrb	r1, [r7, #15]
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4403      	add	r3, r0
 8002a72:	3310      	adds	r3, #16
 8002a74:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	488d      	ldr	r0, [pc, #564]	; (8002cb4 <flashReadStructure+0x304>)
 8002a7e:	460b      	mov	r3, r1
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	440b      	add	r3, r1
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4403      	add	r3, r0
 8002a88:	3318      	adds	r3, #24
 8002a8a:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[POS_FILTER].K = config->stabConstants[i].aFilter_K1;
 8002a8c:	7bfa      	ldrb	r2, [r7, #15]
 8002a8e:	7bf9      	ldrb	r1, [r7, #15]
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4403      	add	r3, r0
 8002a9c:	3310      	adds	r3, #16
 8002a9e:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4883      	ldr	r0, [pc, #524]	; (8002cb4 <flashReadStructure+0x304>)
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	440b      	add	r3, r1
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4403      	add	r3, r0
 8002ab2:	3314      	adds	r3, #20
 8002ab4:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].K = config->stabConstants[i].aFilter_K2;
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	7bf9      	ldrb	r1, [r7, #15]
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4403      	add	r3, r0
 8002ac6:	3318      	adds	r3, #24
 8002ac8:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002acc:	4613      	mov	r3, r2
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4878      	ldr	r0, [pc, #480]	; (8002cb4 <flashReadStructure+0x304>)
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4403      	add	r3, r0
 8002adc:	331c      	adds	r3, #28
 8002ade:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.pGain = config->stabConstants[i].pid_pGain;
 8002ae0:	7bfa      	ldrb	r2, [r7, #15]
 8002ae2:	7bf9      	ldrb	r1, [r7, #15]
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4403      	add	r3, r0
 8002af0:	3318      	adds	r3, #24
 8002af2:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002af6:	4613      	mov	r3, r2
 8002af8:	461a      	mov	r2, r3
 8002afa:	486e      	ldr	r0, [pc, #440]	; (8002cb4 <flashReadStructure+0x304>)
 8002afc:	460b      	mov	r3, r1
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	440b      	add	r3, r1
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4403      	add	r3, r0
 8002b06:	3328      	adds	r3, #40	; 0x28
 8002b08:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.iGain = config->stabConstants[i].pid_iGain;
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	7bf9      	ldrb	r1, [r7, #15]
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4403      	add	r3, r0
 8002b1a:	3320      	adds	r3, #32
 8002b1c:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002b20:	4613      	mov	r3, r2
 8002b22:	461a      	mov	r2, r3
 8002b24:	4863      	ldr	r0, [pc, #396]	; (8002cb4 <flashReadStructure+0x304>)
 8002b26:	460b      	mov	r3, r1
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	440b      	add	r3, r1
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4403      	add	r3, r0
 8002b30:	332c      	adds	r3, #44	; 0x2c
 8002b32:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.iMax = config->stabConstants[i].pid_iMax;
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	7bf9      	ldrb	r1, [r7, #15]
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4403      	add	r3, r0
 8002b44:	3320      	adds	r3, #32
 8002b46:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4859      	ldr	r0, [pc, #356]	; (8002cb4 <flashReadStructure+0x304>)
 8002b50:	460b      	mov	r3, r1
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4403      	add	r3, r0
 8002b5a:	3330      	adds	r3, #48	; 0x30
 8002b5c:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.iMin = config->stabConstants[i].pid_iMin;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	7bf9      	ldrb	r1, [r7, #15]
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4403      	add	r3, r0
 8002b6e:	3328      	adds	r3, #40	; 0x28
 8002b70:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002b74:	4613      	mov	r3, r2
 8002b76:	461a      	mov	r2, r3
 8002b78:	484e      	ldr	r0, [pc, #312]	; (8002cb4 <flashReadStructure+0x304>)
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	440b      	add	r3, r1
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4403      	add	r3, r0
 8002b84:	3334      	adds	r3, #52	; 0x34
 8002b86:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pThrustersMin = config->stabConstants[i].pThrustersMin;
 8002b88:	7bfa      	ldrb	r2, [r7, #15]
 8002b8a:	7bf9      	ldrb	r1, [r7, #15]
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4403      	add	r3, r0
 8002b98:	3328      	adds	r3, #40	; 0x28
 8002b9a:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4844      	ldr	r0, [pc, #272]	; (8002cb4 <flashReadStructure+0x304>)
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	440b      	add	r3, r1
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4403      	add	r3, r0
 8002bae:	3338      	adds	r3, #56	; 0x38
 8002bb0:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pThrustersMax = config->stabConstants[i].pThrustersMax;
 8002bb2:	7bfa      	ldrb	r2, [r7, #15]
 8002bb4:	7bf9      	ldrb	r1, [r7, #15]
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4403      	add	r3, r0
 8002bc2:	3330      	adds	r3, #48	; 0x30
 8002bc4:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4839      	ldr	r0, [pc, #228]	; (8002cb4 <flashReadStructure+0x304>)
 8002bce:	460b      	mov	r3, r1
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	440b      	add	r3, r1
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4403      	add	r3, r0
 8002bd8:	333c      	adds	r3, #60	; 0x3c
 8002bda:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].T = config->stabConstants[i].aFilter_thrusters_T;
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	7bf9      	ldrb	r1, [r7, #15]
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4403      	add	r3, r0
 8002bec:	3330      	adds	r3, #48	; 0x30
 8002bee:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	482f      	ldr	r0, [pc, #188]	; (8002cb4 <flashReadStructure+0x304>)
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	440b      	add	r3, r1
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4403      	add	r3, r0
 8002c02:	3320      	adds	r3, #32
 8002c04:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].K = config->stabConstants[i].aFilter_thrusters_K;
 8002c06:	7bfa      	ldrb	r2, [r7, #15]
 8002c08:	7bf9      	ldrb	r1, [r7, #15]
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4403      	add	r3, r0
 8002c16:	3338      	adds	r3, #56	; 0x38
 8002c18:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	461a      	mov	r2, r3
 8002c20:	4824      	ldr	r0, [pc, #144]	; (8002cb4 <flashReadStructure+0x304>)
 8002c22:	460b      	mov	r3, r1
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	440b      	add	r3, r1
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	4403      	add	r3, r0
 8002c2c:	3324      	adds	r3, #36	; 0x24
 8002c2e:	601a      	str	r2, [r3, #0]
		rStabConstants[i].sOutSummatorMax = config->stabConstants[i].sOutSummatorMax;
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	7bf9      	ldrb	r1, [r7, #15]
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4403      	add	r3, r0
 8002c40:	3338      	adds	r3, #56	; 0x38
 8002c42:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002c46:	4613      	mov	r3, r2
 8002c48:	461a      	mov	r2, r3
 8002c4a:	481a      	ldr	r0, [pc, #104]	; (8002cb4 <flashReadStructure+0x304>)
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	440b      	add	r3, r1
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4403      	add	r3, r0
 8002c56:	3340      	adds	r3, #64	; 0x40
 8002c58:	601a      	str	r2, [r3, #0]
		rStabConstants[i].sOutSummatorMin = config->stabConstants[i].sOutSummatorMin;
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	7bf9      	ldrb	r1, [r7, #15]
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4403      	add	r3, r0
 8002c6a:	3340      	adds	r3, #64	; 0x40
 8002c6c:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002c70:	4613      	mov	r3, r2
 8002c72:	461a      	mov	r2, r3
 8002c74:	480f      	ldr	r0, [pc, #60]	; (8002cb4 <flashReadStructure+0x304>)
 8002c76:	460b      	mov	r3, r1
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	440b      	add	r3, r1
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4403      	add	r3, r0
 8002c80:	3344      	adds	r3, #68	; 0x44
 8002c82:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	3301      	adds	r3, #1
 8002c88:	73fb      	strb	r3, [r7, #15]
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	2b05      	cmp	r3, #5
 8002c8e:	f67f ae96 	bls.w	80029be <flashReadStructure+0xe>
//		rThrusters[i].sForward = config->thrusters[i].sForward;
//		rThrusters[i].sBackward = config->thrusters[i].sBackward;
//		rThrusters[i].inverse = config->thrusters[i].inverse;
//	}

	if(config->writeFlag == 0xAA) {
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2baa      	cmp	r3, #170	; 0xaa
 8002c98:	d103      	bne.n	8002ca2 <flashReadStructure+0x2f2>
		rState.flash = true;
 8002c9a:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <flashReadStructure+0x308>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	709a      	strb	r2, [r3, #2]
	}
	else {
		rState.flash = false;
	}
}
 8002ca0:	e002      	b.n	8002ca8 <flashReadStructure+0x2f8>
		rState.flash = false;
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <flashReadStructure+0x308>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	709a      	strb	r2, [r3, #2]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	20001cb0 	.word	0x20001cb0
 8002cb8:	20001b20 	.word	0x20001b20

08002cbc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4a07      	ldr	r2, [pc, #28]	; (8002ce8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002ccc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4a06      	ldr	r2, [pc, #24]	; (8002cec <vApplicationGetIdleTaskMemory+0x30>)
 8002cd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2280      	movs	r2, #128	; 0x80
 8002cd8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	20001398 	.word	0x20001398
 8002cec:	2000145c 	.word	0x2000145c

08002cf0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4a07      	ldr	r2, [pc, #28]	; (8002d1c <vApplicationGetTimerTaskMemory+0x2c>)
 8002d00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	4a06      	ldr	r2, [pc, #24]	; (8002d20 <vApplicationGetTimerTaskMemory+0x30>)
 8002d06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d0e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	2000165c 	.word	0x2000165c
 8002d20:	20001720 	.word	0x20001720

08002d24 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002d24:	b5b0      	push	{r4, r5, r7, lr}
 8002d26:	b0b2      	sub	sp, #200	; 0xc8
 8002d28:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
    uartBusesInit();
 8002d2a:	f7fe fae3 	bl	80012f4 <uartBusesInit>
    variableInit();
 8002d2e:	f7fe fa45 	bl	80011bc <variableInit>
    stabilizationInit();
 8002d32:	f000 fd45 	bl	80037c0 <stabilizationInit>


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of mutData */
  osMutexStaticDef(mutData, &mutDataControlBlock);
 8002d36:	2300      	movs	r3, #0
 8002d38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d3c:	4b64      	ldr	r3, [pc, #400]	; (8002ed0 <MX_FREERTOS_Init+0x1ac>)
 8002d3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  mutDataHandle = osMutexCreate(osMutex(mutData));
 8002d42:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d46:	4618      	mov	r0, r3
 8002d48:	f006 fa8a 	bl	8009260 <osMutexCreate>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	4a61      	ldr	r2, [pc, #388]	; (8002ed4 <MX_FREERTOS_Init+0x1b0>)
 8002d50:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of tUartTimer */
  osTimerDef(tUartTimer, func_tUartTimer);
 8002d52:	4b61      	ldr	r3, [pc, #388]	; (8002ed8 <MX_FREERTOS_Init+0x1b4>)
 8002d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  tUartTimerHandle = osTimerCreate(osTimer(tUartTimer), osTimerOnce, NULL);
 8002d5e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d62:	2200      	movs	r2, #0
 8002d64:	2100      	movs	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f006 fa46 	bl	80091f8 <osTimerCreate>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	4a5b      	ldr	r2, [pc, #364]	; (8002edc <MX_FREERTOS_Init+0x1b8>)
 8002d70:	6013      	str	r3, [r2, #0]

  /* definition and creation of tSilence */
  osTimerDef(tSilence, tSilence_func);
 8002d72:	4b5b      	ldr	r3, [pc, #364]	; (8002ee0 <MX_FREERTOS_Init+0x1bc>)
 8002d74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  tSilenceHandle = osTimerCreate(osTimer(tSilence), osTimerOnce, NULL);
 8002d7e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002d82:	2200      	movs	r2, #0
 8002d84:	2100      	movs	r1, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f006 fa36 	bl	80091f8 <osTimerCreate>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	4a55      	ldr	r2, [pc, #340]	; (8002ee4 <MX_FREERTOS_Init+0x1c0>)
 8002d90:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  SilenceTimer = xTimerCreate("silence", DELAY_SILENCE/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) tSilence_func);
 8002d92:	4b53      	ldr	r3, [pc, #332]	; (8002ee0 <MX_FREERTOS_Init+0x1bc>)
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	2300      	movs	r3, #0
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d9e:	4852      	ldr	r0, [pc, #328]	; (8002ee8 <MX_FREERTOS_Init+0x1c4>)
 8002da0:	f008 fafe 	bl	800b3a0 <xTimerCreate>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4a51      	ldr	r2, [pc, #324]	; (8002eec <MX_FREERTOS_Init+0x1c8>)
 8002da8:	6013      	str	r3, [r2, #0]
  UARTTimer = xTimerCreate("timer", DELAY_TIMER_TASK/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) func_tUartTimer);
 8002daa:	4b4b      	ldr	r3, [pc, #300]	; (8002ed8 <MX_FREERTOS_Init+0x1b4>)
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	2300      	movs	r3, #0
 8002db0:	2200      	movs	r2, #0
 8002db2:	211e      	movs	r1, #30
 8002db4:	484e      	ldr	r0, [pc, #312]	; (8002ef0 <MX_FREERTOS_Init+0x1cc>)
 8002db6:	f008 faf3 	bl	800b3a0 <xTimerCreate>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4a4d      	ldr	r2, [pc, #308]	; (8002ef4 <MX_FREERTOS_Init+0x1d0>)
 8002dbe:	6013      	str	r3, [r2, #0]

  xTimerStart(SilenceTimer, 10);
 8002dc0:	4b4a      	ldr	r3, [pc, #296]	; (8002eec <MX_FREERTOS_Init+0x1c8>)
 8002dc2:	681c      	ldr	r4, [r3, #0]
 8002dc4:	f007 fd36 	bl	800a834 <xTaskGetTickCount>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	230a      	movs	r3, #10
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f008 fb7e 	bl	800b4d4 <xTimerGenericCommand>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of tLedBlinkingTask */
  osThreadStaticDef(tLedBlinkingTask, func_tLedBlinkingTask, osPriorityLow, 0, 128, tLedBlinkingTaskBuffer, &tLedBlinkingTaskControlBlock);
 8002dd8:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <MX_FREERTOS_Init+0x1d4>)
 8002dda:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8002dde:	461d      	mov	r5, r3
 8002de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002de4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002de8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tLedBlinkingTaskHandle = osThreadCreate(osThread(tLedBlinkingTask), NULL);
 8002dec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002df0:	2100      	movs	r1, #0
 8002df2:	4618      	mov	r0, r3
 8002df4:	f006 f99f 	bl	8009136 <osThreadCreate>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	4a40      	ldr	r2, [pc, #256]	; (8002efc <MX_FREERTOS_Init+0x1d8>)
 8002dfc:	6013      	str	r3, [r2, #0]

  /* definition and creation of tVmaCommTask */
  osThreadStaticDef(tVmaCommTask, func_tVmaCommTask, osPriorityNormal, 0, 128, tVmaCommTaskBuffer, &tVmaCommTaskControlBlock);
 8002dfe:	4b40      	ldr	r3, [pc, #256]	; (8002f00 <MX_FREERTOS_Init+0x1dc>)
 8002e00:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8002e04:	461d      	mov	r5, r3
 8002e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tVmaCommTaskHandle = osThreadCreate(osThread(tVmaCommTask), NULL);
 8002e12:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e16:	2100      	movs	r1, #0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f006 f98c 	bl	8009136 <osThreadCreate>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4a38      	ldr	r2, [pc, #224]	; (8002f04 <MX_FREERTOS_Init+0x1e0>)
 8002e22:	6013      	str	r3, [r2, #0]

  /* definition and creation of tImuCommTask */
  osThreadStaticDef(tImuCommTask, func_tImuCommTask, osPriorityBelowNormal, 0, 128, tImuCommTaskBuffer, &tImuCommTaskControlBlock);
 8002e24:	4b38      	ldr	r3, [pc, #224]	; (8002f08 <MX_FREERTOS_Init+0x1e4>)
 8002e26:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8002e2a:	461d      	mov	r5, r3
 8002e2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tImuCommTaskHandle = osThreadCreate(osThread(tImuCommTask), NULL);
 8002e38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f006 f979 	bl	8009136 <osThreadCreate>
 8002e44:	4603      	mov	r3, r0
 8002e46:	4a31      	ldr	r2, [pc, #196]	; (8002f0c <MX_FREERTOS_Init+0x1e8>)
 8002e48:	6013      	str	r3, [r2, #0]

  /* definition and creation of tStabilizationTask */
  osThreadStaticDef(tStabilizationTask, func_tStabilizationTask, osPriorityBelowNormal, 0, 128, tStabilizationTaskBuffer, &tStabilizationTaskControlBlock);
 8002e4a:	4b31      	ldr	r3, [pc, #196]	; (8002f10 <MX_FREERTOS_Init+0x1ec>)
 8002e4c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002e50:	461d      	mov	r5, r3
 8002e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tStabilizationTaskHandle = osThreadCreate(osThread(tStabilizationTask), NULL);
 8002e5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f006 f966 	bl	8009136 <osThreadCreate>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	4a29      	ldr	r2, [pc, #164]	; (8002f14 <MX_FREERTOS_Init+0x1f0>)
 8002e6e:	6013      	str	r3, [r2, #0]

  /* definition and creation of tDevCommTask */
  osThreadStaticDef(tDevCommTask, func_tDevCommTask, osPriorityBelowNormal, 0, 128, tDevCommTaskBuffer, &tDevCommTaskControlBlock);
 8002e70:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <MX_FREERTOS_Init+0x1f4>)
 8002e72:	f107 041c 	add.w	r4, r7, #28
 8002e76:	461d      	mov	r5, r3
 8002e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tDevCommTaskHandle = osThreadCreate(osThread(tDevCommTask), NULL);
 8002e84:	f107 031c 	add.w	r3, r7, #28
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f006 f953 	bl	8009136 <osThreadCreate>
 8002e90:	4603      	mov	r3, r0
 8002e92:	4a22      	ldr	r2, [pc, #136]	; (8002f1c <MX_FREERTOS_Init+0x1f8>)
 8002e94:	6013      	str	r3, [r2, #0]
  /* definition and creation of tSensCommTask */
 // osThreadStaticDef(tSensCommTask, func_tSensCommTask, osPriorityBelowNormal, 0, 128, tSensCommTaskBuffer, &tSensCommTaskControlBlock);
 // tSensCommTaskHandle = osThreadCreate(osThread(tSensCommTask), NULL);

  /* definition and creation of tPcCommTask */
  osThreadStaticDef(tPcCommTask, func_tPcCommTask, osPriorityLow, 0, 128, tPcCommTaskBuffer, &tPcCommTaskControlBlock);
 8002e96:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <MX_FREERTOS_Init+0x1fc>)
 8002e98:	463c      	mov	r4, r7
 8002e9a:	461d      	mov	r5, r3
 8002e9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ea0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002ea4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tPcCommTaskHandle = osThreadCreate(osThread(tPcCommTask), NULL);
 8002ea8:	463b      	mov	r3, r7
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f006 f942 	bl	8009136 <osThreadCreate>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4a1b      	ldr	r2, [pc, #108]	; (8002f24 <MX_FREERTOS_Init+0x200>)
 8002eb6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <MX_FREERTOS_Init+0x204>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	4a1a      	ldr	r2, [pc, #104]	; (8002f28 <MX_FREERTOS_Init+0x204>)
 8002ebe:	6811      	ldr	r1, [r2, #0]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f004 fd92 	bl	80079ec <HAL_UART_Receive_IT>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002ec8:	bf00      	nop
 8002eca:	37c0      	adds	r7, #192	; 0xc0
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bdb0      	pop	{r4, r5, r7, pc}
 8002ed0:	20001350 	.word	0x20001350
 8002ed4:	2000134c 	.word	0x2000134c
 8002ed8:	080032e1 	.word	0x080032e1
 8002edc:	20001344 	.word	0x20001344
 8002ee0:	080033ed 	.word	0x080033ed
 8002ee4:	20001348 	.word	0x20001348
 8002ee8:	0800c9b4 	.word	0x0800c9b4
 8002eec:	20000290 	.word	0x20000290
 8002ef0:	0800c9bc 	.word	0x0800c9bc
 8002ef4:	2000028c 	.word	0x2000028c
 8002ef8:	0800c9c4 	.word	0x0800c9c4
 8002efc:	20000294 	.word	0x20000294
 8002f00:	0800c9e0 	.word	0x0800c9e0
 8002f04:	2000055c 	.word	0x2000055c
 8002f08:	0800c9fc 	.word	0x0800c9fc
 8002f0c:	20000824 	.word	0x20000824
 8002f10:	0800ca18 	.word	0x0800ca18
 8002f14:	20000aec 	.word	0x20000aec
 8002f18:	0800ca34 	.word	0x0800ca34
 8002f1c:	20000db4 	.word	0x20000db4
 8002f20:	0800ca50 	.word	0x0800ca50
 8002f24:	2000107c 	.word	0x2000107c
 8002f28:	200001a4 	.word	0x200001a4

08002f2c <func_tLedBlinkingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_func_tLedBlinkingTask */
void func_tLedBlinkingTask(void const * argument)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tLedBlinkingTask */
    uint32_t sysTime = osKernelSysTick();
 8002f34:	f006 f8ef 	bl	8009116 <osKernelSysTick>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
        HAL_GPIO_TogglePin(GPIOB, led1_Pin);
 8002f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f40:	4811      	ldr	r0, [pc, #68]	; (8002f88 <func_tLedBlinkingTask+0x5c>)
 8002f42:	f003 fbb8 	bl	80066b6 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 8002f46:	f107 030c 	add.w	r3, r7, #12
 8002f4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f006 f99e 	bl	8009290 <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led2_Pin);
 8002f54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f58:	480b      	ldr	r0, [pc, #44]	; (8002f88 <func_tLedBlinkingTask+0x5c>)
 8002f5a:	f003 fbac 	bl	80066b6 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 8002f5e:	f107 030c 	add.w	r3, r7, #12
 8002f62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f66:	4618      	mov	r0, r3
 8002f68:	f006 f992 	bl	8009290 <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led3_Pin);
 8002f6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f70:	4805      	ldr	r0, [pc, #20]	; (8002f88 <func_tLedBlinkingTask+0x5c>)
 8002f72:	f003 fba0 	bl	80066b6 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 8002f76:	f107 030c 	add.w	r3, r7, #12
 8002f7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f006 f986 	bl	8009290 <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led1_Pin);
 8002f84:	e7da      	b.n	8002f3c <func_tLedBlinkingTask+0x10>
 8002f86:	bf00      	nop
 8002f88:	40020400 	.word	0x40020400

08002f8c <func_tVmaCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tVmaCommTask */
void func_tVmaCommTask(void const * argument)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tVmaCommTask */
	uint32_t sysTime = osKernelSysTick();
 8002f94:	f006 f8bf 	bl	8009116 <osKernelSysTick>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	60bb      	str	r3, [r7, #8]
	uint8_t transaction = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RE_DE_GPIO_Port,RE_DE_Pin,GPIO_PIN_SET);
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fa6:	482d      	ldr	r0, [pc, #180]	; (800305c <func_tVmaCommTask+0xd0>)
 8002fa8:	f003 fb6c 	bl	8006684 <HAL_GPIO_WritePin>
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8002fac:	4b2c      	ldr	r3, [pc, #176]	; (8003060 <func_tVmaCommTask+0xd4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2114      	movs	r1, #20
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f006 fe36 	bl	8009c24 <xQueueSemaphoreTake>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d10b      	bne.n	8002fd6 <func_tVmaCommTask+0x4a>
			fillThrustersRequest(ThrustersRequestBuffer, transaction);
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4828      	ldr	r0, [pc, #160]	; (8003064 <func_tVmaCommTask+0xd8>)
 8002fc4:	f001 fc4c 	bl	8004860 <fillThrustersRequest>
			xSemaphoreGive(mutDataHandle);
 8002fc8:	4b25      	ldr	r3, [pc, #148]	; (8003060 <func_tVmaCommTask+0xd4>)
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	f006 fbad 	bl	8009730 <xQueueGenericSend>
		}

		uartBus[THRUSTERS_UART].txBuffer = ThrustersRequestBuffer;
 8002fd6:	4b24      	ldr	r3, [pc, #144]	; (8003068 <func_tVmaCommTask+0xdc>)
 8002fd8:	4a22      	ldr	r2, [pc, #136]	; (8003064 <func_tVmaCommTask+0xd8>)
 8002fda:	63da      	str	r2, [r3, #60]	; 0x3c
		uartBus[THRUSTERS_UART].txLength = THRUSTERS_REQUEST_LENGTH;
 8002fdc:	4b22      	ldr	r3, [pc, #136]	; (8003068 <func_tVmaCommTask+0xdc>)
 8002fde:	220d      	movs	r2, #13
 8002fe0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

		uartBus[THRUSTERS_UART].rxBuffer = ThrustersResponseBuffer[transaction];
 8002fe4:	7bfa      	ldrb	r2, [r7, #15]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4413      	add	r3, r2
 8002fec:	4a1f      	ldr	r2, [pc, #124]	; (800306c <func_tVmaCommTask+0xe0>)
 8002fee:	4413      	add	r3, r2
 8002ff0:	4a1d      	ldr	r2, [pc, #116]	; (8003068 <func_tVmaCommTask+0xdc>)
 8002ff2:	6393      	str	r3, [r2, #56]	; 0x38
		uartBus[THRUSTERS_UART].rxLength = THRUSTERS_RESPONSE_LENGTH;
 8002ff4:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <func_tVmaCommTask+0xdc>)
 8002ff6:	2209      	movs	r2, #9
 8002ff8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		transmitAndReceive(&uartBus[THRUSTERS_UART], false);
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	481c      	ldr	r0, [pc, #112]	; (8003070 <func_tVmaCommTask+0xe4>)
 8003000:	f7fe fae0 	bl	80015c4 <transmitAndReceive>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8003004:	4b16      	ldr	r3, [pc, #88]	; (8003060 <func_tVmaCommTask+0xd4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2114      	movs	r1, #20
 800300a:	4618      	mov	r0, r3
 800300c:	f006 fe0a 	bl	8009c24 <xQueueSemaphoreTake>
 8003010:	4603      	mov	r3, r0
 8003012:	2b01      	cmp	r3, #1
 8003014:	d111      	bne.n	800303a <func_tVmaCommTask+0xae>
			fillThrustersResponse(ThrustersResponseBuffer[transaction], transaction);
 8003016:	7bfa      	ldrb	r2, [r7, #15]
 8003018:	4613      	mov	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4413      	add	r3, r2
 800301e:	4a13      	ldr	r2, [pc, #76]	; (800306c <func_tVmaCommTask+0xe0>)
 8003020:	4413      	add	r3, r2
 8003022:	7bfa      	ldrb	r2, [r7, #15]
 8003024:	4611      	mov	r1, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f001 fc9c 	bl	8004964 <fillThrustersResponse>
			xSemaphoreGive(mutDataHandle);
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <func_tVmaCommTask+0xd4>)
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	2300      	movs	r3, #0
 8003032:	2200      	movs	r2, #0
 8003034:	2100      	movs	r1, #0
 8003036:	f006 fb7b 	bl	8009730 <xQueueGenericSend>
		}

		transaction = (transaction + 1) % THRUSTERS_NUMBER;
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	3301      	adds	r3, #1
 800303e:	425a      	negs	r2, r3
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	f002 0207 	and.w	r2, r2, #7
 8003048:	bf58      	it	pl
 800304a:	4253      	negpl	r3, r2
 800304c:	73fb      	strb	r3, [r7, #15]
		osDelayUntil(&sysTime, DELAY_THRUSTERS_TASK);
 800304e:	f107 0308 	add.w	r3, r7, #8
 8003052:	2114      	movs	r1, #20
 8003054:	4618      	mov	r0, r3
 8003056:	f006 f91b 	bl	8009290 <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 800305a:	e7a7      	b.n	8002fac <func_tVmaCommTask+0x20>
 800305c:	40020000 	.word	0x40020000
 8003060:	2000134c 	.word	0x2000134c
 8003064:	2000215c 	.word	0x2000215c
 8003068:	200001a4 	.word	0x200001a4
 800306c:	2000216c 	.word	0x2000216c
 8003070:	200001dc 	.word	0x200001dc

08003074 <func_tImuCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tImuCommTask */
void func_tImuCommTask(void const * argument)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tImuCommTask */
  uint32_t sysTime = osKernelSysTick();
 800307c:	f006 f84b 	bl	8009116 <osKernelSysTick>
 8003080:	4603      	mov	r3, r0
 8003082:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  	if(rSensors.resetIMU) {
 8003084:	4b30      	ldr	r3, [pc, #192]	; (8003148 <func_tImuCommTask+0xd4>)
 8003086:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800308a:	2b00      	cmp	r3, #0
 800308c:	d026      	beq.n	80030dc <func_tImuCommTask+0x68>
			uartBus[IMU_UART].txBuffer = ImuResetRequestBuffer;
 800308e:	4b2f      	ldr	r3, [pc, #188]	; (800314c <func_tImuCommTask+0xd8>)
 8003090:	4a2f      	ldr	r2, [pc, #188]	; (8003150 <func_tImuCommTask+0xdc>)
 8003092:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH_AC;
 8003096:	4b2d      	ldr	r3, [pc, #180]	; (800314c <func_tImuCommTask+0xd8>)
 8003098:	2214      	movs	r2, #20
 800309a:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 800309e:	2100      	movs	r1, #0
 80030a0:	482c      	ldr	r0, [pc, #176]	; (8003154 <func_tImuCommTask+0xe0>)
 80030a2:	f7fe fa25 	bl	80014f0 <transmitPackage>

	  		osDelayUntil(&sysTime, DELAY_IMU_TASK);
 80030a6:	f107 030c 	add.w	r3, r7, #12
 80030aa:	210a      	movs	r1, #10
 80030ac:	4618      	mov	r0, r3
 80030ae:	f006 f8ef 	bl	8009290 <osDelayUntil>
			uartBus[IMU_UART].txBuffer = ImuRequestBuffer;
 80030b2:	4b26      	ldr	r3, [pc, #152]	; (800314c <func_tImuCommTask+0xd8>)
 80030b4:	4a28      	ldr	r2, [pc, #160]	; (8003158 <func_tImuCommTask+0xe4>)
 80030b6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH;
 80030ba:	4b24      	ldr	r3, [pc, #144]	; (800314c <func_tImuCommTask+0xd8>)
 80030bc:	221f      	movs	r2, #31
 80030be:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 80030c2:	2100      	movs	r1, #0
 80030c4:	4823      	ldr	r0, [pc, #140]	; (8003154 <func_tImuCommTask+0xe0>)
 80030c6:	f7fe fa13 	bl	80014f0 <transmitPackage>

	  		rSensors.pressure_null = rSensors.pressure;
 80030ca:	4b1f      	ldr	r3, [pc, #124]	; (8003148 <func_tImuCommTask+0xd4>)
 80030cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ce:	4a1e      	ldr	r2, [pc, #120]	; (8003148 <func_tImuCommTask+0xd4>)
 80030d0:	6593      	str	r3, [r2, #88]	; 0x58
	  		rSensors.resetIMU = false;
 80030d2:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <func_tImuCommTask+0xd4>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80030da:	e02d      	b.n	8003138 <func_tImuCommTask+0xc4>
	  	}
	  	else {

	  		uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
 80030dc:	4b1b      	ldr	r3, [pc, #108]	; (800314c <func_tImuCommTask+0xd8>)
 80030de:	4a1f      	ldr	r2, [pc, #124]	; (800315c <func_tImuCommTask+0xe8>)
 80030e0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  		uartBus[IMU_UART].rxLength = IMU_RESPONSE_LENGTH;
 80030e4:	4b19      	ldr	r3, [pc, #100]	; (800314c <func_tImuCommTask+0xd8>)
 80030e6:	2232      	movs	r2, #50	; 0x32
 80030e8:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

	  		HAL_UART_Receive_IT(uartBus[IMU_UART].huart, uartBus[IMU_UART].rxBuffer, uartBus[IMU_UART].rxLength);
 80030ec:	4b17      	ldr	r3, [pc, #92]	; (800314c <func_tImuCommTask+0xd8>)
 80030ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80030f2:	4a16      	ldr	r2, [pc, #88]	; (800314c <func_tImuCommTask+0xd8>)
 80030f4:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 80030f8:	4a14      	ldr	r2, [pc, #80]	; (800314c <func_tImuCommTask+0xd8>)
 80030fa:	f892 20cc 	ldrb.w	r2, [r2, #204]	; 0xcc
 80030fe:	b292      	uxth	r2, r2
 8003100:	4618      	mov	r0, r3
 8003102:	f004 fc73 	bl	80079ec <HAL_UART_Receive_IT>
	  		osDelayUntil(&sysTime, DELAY_IMU_TASK);
 8003106:	f107 030c 	add.w	r3, r7, #12
 800310a:	210a      	movs	r1, #10
 800310c:	4618      	mov	r0, r3
 800310e:	f006 f8bf 	bl	8009290 <osDelayUntil>

	  		//if(transmitAndReceive(&uartBus[IMU_UART], false)) {
	  			if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_IMU_TASK) == pdTRUE) {
 8003112:	4b13      	ldr	r3, [pc, #76]	; (8003160 <func_tImuCommTask+0xec>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	210a      	movs	r1, #10
 8003118:	4618      	mov	r0, r3
 800311a:	f006 fd83 	bl	8009c24 <xQueueSemaphoreTake>
 800311e:	4603      	mov	r3, r0
 8003120:	2b01      	cmp	r3, #1
 8003122:	d109      	bne.n	8003138 <func_tImuCommTask+0xc4>
	  				ImuReceive(ImuResponseBuffer);
 8003124:	480d      	ldr	r0, [pc, #52]	; (800315c <func_tImuCommTask+0xe8>)
 8003126:	f7ff f9c3 	bl	80024b0 <ImuReceive>
	  				xSemaphoreGive(mutDataHandle);
 800312a:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <func_tImuCommTask+0xec>)
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	2300      	movs	r3, #0
 8003130:	2200      	movs	r2, #0
 8003132:	2100      	movs	r1, #0
 8003134:	f006 fafc 	bl	8009730 <xQueueGenericSend>
	  			}
	  		//}

	  	}

	  	osDelayUntil(&sysTime, DELAY_IMU_TASK);
 8003138:	f107 030c 	add.w	r3, r7, #12
 800313c:	210a      	movs	r1, #10
 800313e:	4618      	mov	r0, r3
 8003140:	f006 f8a6 	bl	8009290 <osDelayUntil>
	  	if(rSensors.resetIMU) {
 8003144:	e79e      	b.n	8003084 <func_tImuCommTask+0x10>
 8003146:	bf00      	nop
 8003148:	20001bec 	.word	0x20001bec
 800314c:	200001a4 	.word	0x200001a4
 8003150:	20000020 	.word	0x20000020
 8003154:	2000024c 	.word	0x2000024c
 8003158:	20000000 	.word	0x20000000
 800315c:	20002128 	.word	0x20002128
 8003160:	2000134c 	.word	0x2000134c

08003164 <func_tStabilizationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tStabilizationTask */
void func_tStabilizationTask(void const * argument)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tStabilizationTask */
	uint32_t sysTime = osKernelSysTick();
 800316c:	f005 ffd3 	bl	8009116 <osKernelSysTick>
 8003170:	4603      	mov	r3, r0
 8003172:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 8003174:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <func_tStabilizationTask+0x6c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	210a      	movs	r1, #10
 800317a:	4618      	mov	r0, r3
 800317c:	f006 fd52 	bl	8009c24 <xQueueSemaphoreTake>
 8003180:	4603      	mov	r3, r0
 8003182:	2b01      	cmp	r3, #1
 8003184:	d11d      	bne.n	80031c2 <func_tStabilizationTask+0x5e>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003186:	2300      	movs	r3, #0
 8003188:	73fb      	strb	r3, [r7, #15]
 800318a:	e010      	b.n	80031ae <func_tStabilizationTask+0x4a>
				if (rStabConstants[i].enable) {
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	4911      	ldr	r1, [pc, #68]	; (80031d4 <func_tStabilizationTask+0x70>)
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	440b      	add	r3, r1
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <func_tStabilizationTask+0x44>
					stabilizationUpdate(i);
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fef2 	bl	8003f8c <stabilizationUpdate>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	3301      	adds	r3, #1
 80031ac:	73fb      	strb	r3, [r7, #15]
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	2b05      	cmp	r3, #5
 80031b2:	d9eb      	bls.n	800318c <func_tStabilizationTask+0x28>
				}
			}
			//formThrustVectors();
			xSemaphoreGive(mutDataHandle);
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <func_tStabilizationTask+0x6c>)
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	2300      	movs	r3, #0
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	f006 fab7 	bl	8009730 <xQueueGenericSend>
		}

		osDelayUntil(&sysTime, DELAY_STABILIZATION_TASK);
 80031c2:	f107 0308 	add.w	r3, r7, #8
 80031c6:	210a      	movs	r1, #10
 80031c8:	4618      	mov	r0, r3
 80031ca:	f006 f861 	bl	8009290 <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 80031ce:	e7d1      	b.n	8003174 <func_tStabilizationTask+0x10>
 80031d0:	2000134c 	.word	0x2000134c
 80031d4:	20001cb0 	.word	0x20001cb0

080031d8 <func_tDevCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tDevCommTask */
void func_tDevCommTask(void const * argument)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tDevCommTask */
    uint32_t sysTime = osKernelSysTick();
 80031e0:	f005 ff99 	bl	8009116 <osKernelSysTick>
 80031e4:	4603      	mov	r3, r0
 80031e6:	60bb      	str	r3, [r7, #8]
    uint8_t transaction = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 80031ec:	4b2e      	ldr	r3, [pc, #184]	; (80032a8 <func_tDevCommTask+0xd0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	210a      	movs	r1, #10
 80031f2:	4618      	mov	r0, r3
 80031f4:	f006 fd16 	bl	8009c24 <xQueueSemaphoreTake>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d10b      	bne.n	8003216 <func_tDevCommTask+0x3e>
            DevicesRequestUpdate(DevicesRequestBuffer, transaction);
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	4619      	mov	r1, r3
 8003202:	482a      	ldr	r0, [pc, #168]	; (80032ac <func_tDevCommTask+0xd4>)
 8003204:	f7fe fb6a 	bl	80018dc <DevicesRequestUpdate>
            xSemaphoreGive(mutDataHandle);
 8003208:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <func_tDevCommTask+0xd0>)
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	2300      	movs	r3, #0
 800320e:	2200      	movs	r2, #0
 8003210:	2100      	movs	r1, #0
 8003212:	f006 fa8d 	bl	8009730 <xQueueGenericSend>
        }

		uartBus[DEVICES_UART].txBuffer = DevicesRequestBuffer;
 8003216:	4b26      	ldr	r3, [pc, #152]	; (80032b0 <func_tDevCommTask+0xd8>)
 8003218:	4a24      	ldr	r2, [pc, #144]	; (80032ac <func_tDevCommTask+0xd4>)
 800321a:	675a      	str	r2, [r3, #116]	; 0x74
		uartBus[DEVICES_UART].txLength = DEVICES_REQUEST_LENGTH;
 800321c:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <func_tDevCommTask+0xd8>)
 800321e:	2207      	movs	r2, #7
 8003220:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

		uartBus[DEVICES_UART].rxBuffer = DevicesResponseBuffer[transaction];
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	4a21      	ldr	r2, [pc, #132]	; (80032b4 <func_tDevCommTask+0xdc>)
 8003230:	4413      	add	r3, r2
 8003232:	4a1f      	ldr	r2, [pc, #124]	; (80032b0 <func_tDevCommTask+0xd8>)
 8003234:	6713      	str	r3, [r2, #112]	; 0x70
		uartBus[DEVICES_UART].rxLength = DEVICES_RESPONSE_LENGTH;
 8003236:	4b1e      	ldr	r3, [pc, #120]	; (80032b0 <func_tDevCommTask+0xd8>)
 8003238:	220a      	movs	r2, #10
 800323a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

		transmitAndReceive(&uartBus[DEVICES_UART], false);
 800323e:	2100      	movs	r1, #0
 8003240:	481d      	ldr	r0, [pc, #116]	; (80032b8 <func_tDevCommTask+0xe0>)
 8003242:	f7fe f9bf 	bl	80015c4 <transmitAndReceive>

        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8003246:	4b18      	ldr	r3, [pc, #96]	; (80032a8 <func_tDevCommTask+0xd0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	210a      	movs	r1, #10
 800324c:	4618      	mov	r0, r3
 800324e:	f006 fce9 	bl	8009c24 <xQueueSemaphoreTake>
 8003252:	4603      	mov	r3, r0
 8003254:	2b01      	cmp	r3, #1
 8003256:	d112      	bne.n	800327e <func_tDevCommTask+0xa6>
            DevicesResponseUpdate(DevicesResponseBuffer[transaction], transaction);
 8003258:	7bfa      	ldrb	r2, [r7, #15]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	4a14      	ldr	r2, [pc, #80]	; (80032b4 <func_tDevCommTask+0xdc>)
 8003264:	4413      	add	r3, r2
 8003266:	7bfa      	ldrb	r2, [r7, #15]
 8003268:	4611      	mov	r1, r2
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe fb80 	bl	8001970 <DevicesResponseUpdate>
            xSemaphoreGive(mutDataHandle);
 8003270:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <func_tDevCommTask+0xd0>)
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	2300      	movs	r3, #0
 8003276:	2200      	movs	r2, #0
 8003278:	2100      	movs	r1, #0
 800327a:	f006 fa59 	bl	8009730 <xQueueGenericSend>
        }

        transaction = (transaction + 1) % DEVICES_NUMBER;
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <func_tDevCommTask+0xe4>)
 8003284:	fb83 3102 	smull	r3, r1, r3, r2
 8003288:	17d3      	asrs	r3, r2, #31
 800328a:	1ac9      	subs	r1, r1, r3
 800328c:	460b      	mov	r3, r1
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	440b      	add	r3, r1
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	1ad1      	subs	r1, r2, r3
 8003296:	460b      	mov	r3, r1
 8003298:	73fb      	strb	r3, [r7, #15]
        osDelayUntil(&sysTime, DELAY_DEVICES_TASK);
 800329a:	f107 0308 	add.w	r3, r7, #8
 800329e:	210a      	movs	r1, #10
 80032a0:	4618      	mov	r0, r3
 80032a2:	f005 fff5 	bl	8009290 <osDelayUntil>
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 80032a6:	e7a1      	b.n	80031ec <func_tDevCommTask+0x14>
 80032a8:	2000134c 	.word	0x2000134c
 80032ac:	200021b4 	.word	0x200021b4
 80032b0:	200001a4 	.word	0x200001a4
 80032b4:	200021bc 	.word	0x200021bc
 80032b8:	20000214 	.word	0x20000214
 80032bc:	2aaaaaab 	.word	0x2aaaaaab

080032c0 <func_tPcCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tPcCommTask */
void func_tPcCommTask(void const * argument)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tPcCommTask */
	uint32_t sysTime = osKernelSysTick();
 80032c8:	f005 ff25 	bl	8009116 <osKernelSysTick>
 80032cc:	4603      	mov	r3, r0
 80032ce:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  osDelayUntil(&sysTime, DELAY_PC_TASK);
 80032d0:	f107 030c 	add.w	r3, r7, #12
 80032d4:	210a      	movs	r1, #10
 80032d6:	4618      	mov	r0, r3
 80032d8:	f005 ffda 	bl	8009290 <osDelayUntil>
 80032dc:	e7f8      	b.n	80032d0 <func_tPcCommTask+0x10>
	...

080032e0 <func_tUartTimer>:
  /* USER CODE END func_tPcCommTask */
}

/* func_tUartTimer function */
void func_tUartTimer(void const * argument)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tUartTimer */
	if (uartBus[SHORE_UART].packageReceived) {
 80032e8:	4b3d      	ldr	r3, [pc, #244]	; (80033e0 <func_tUartTimer+0x100>)
 80032ea:	7a1b      	ldrb	r3, [r3, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d05a      	beq.n	80033a6 <func_tUartTimer+0xc6>
		bool package = true;
 80032f0:	2301      	movs	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 80032f4:	4b3b      	ldr	r3, [pc, #236]	; (80033e4 <func_tUartTimer+0x104>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2105      	movs	r1, #5
 80032fa:	4618      	mov	r0, r3
 80032fc:	f006 fc92 	bl	8009c24 <xQueueSemaphoreTake>
 8003300:	4603      	mov	r3, r0
 8003302:	2b01      	cmp	r3, #1
 8003304:	d140      	bne.n	8003388 <func_tUartTimer+0xa8>
			switch(uartBus[SHORE_UART].rxBuffer[0]) {
 8003306:	4b36      	ldr	r3, [pc, #216]	; (80033e0 <func_tUartTimer+0x100>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2baa      	cmp	r3, #170	; 0xaa
 800330e:	d023      	beq.n	8003358 <func_tUartTimer+0x78>
 8003310:	2baa      	cmp	r3, #170	; 0xaa
 8003312:	dc30      	bgt.n	8003376 <func_tUartTimer+0x96>
 8003314:	2b55      	cmp	r3, #85	; 0x55
 8003316:	d010      	beq.n	800333a <func_tUartTimer+0x5a>
 8003318:	2ba5      	cmp	r3, #165	; 0xa5
 800331a:	d12c      	bne.n	8003376 <func_tUartTimer+0x96>
				case SHORE_REQUEST_CODE:
					ShoreRequest(uartBus[SHORE_UART].rxBuffer);
 800331c:	4b30      	ldr	r3, [pc, #192]	; (80033e0 <func_tUartTimer+0x100>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7fe fb8d 	bl	8001a40 <ShoreRequest>
					ShoreResponse(uartBus[SHORE_UART].txBuffer);
 8003326:	4b2e      	ldr	r3, [pc, #184]	; (80033e0 <func_tUartTimer+0x100>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	4618      	mov	r0, r3
 800332c:	f7fe ff70 	bl	8002210 <ShoreResponse>
					uartBus[SHORE_UART].txLength = SHORE_RESPONSE_LENGTH;
 8003330:	4b2b      	ldr	r3, [pc, #172]	; (80033e0 <func_tUartTimer+0x100>)
 8003332:	2246      	movs	r2, #70	; 0x46
 8003334:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003338:	e01f      	b.n	800337a <func_tUartTimer+0x9a>
				case REQUEST_CONFIG_CODE:
					ShoreConfigRequest(uartBus[SHORE_UART].rxBuffer);
 800333a:	4b29      	ldr	r3, [pc, #164]	; (80033e0 <func_tUartTimer+0x100>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe fd3a 	bl	8001db8 <ShoreConfigRequest>
					ShoreConfigResponse(uartBus[SHORE_UART].txBuffer);
 8003344:	4b26      	ldr	r3, [pc, #152]	; (80033e0 <func_tUartTimer+0x100>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4618      	mov	r0, r3
 800334a:	f7fe ffa1 	bl	8002290 <ShoreConfigResponse>
					uartBus[SHORE_UART].txLength = SHORE_CONFIG_RESPONSE_LENGTH;
 800334e:	4b24      	ldr	r3, [pc, #144]	; (80033e0 <func_tUartTimer+0x100>)
 8003350:	2263      	movs	r2, #99	; 0x63
 8003352:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003356:	e010      	b.n	800337a <func_tUartTimer+0x9a>
				case DIRECT_REQUEST_CODE:
					ShoreDirectRequest(uartBus[SHORE_UART].rxBuffer);
 8003358:	4b21      	ldr	r3, [pc, #132]	; (80033e0 <func_tUartTimer+0x100>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe fea1 	bl	80020a4 <ShoreDirectRequest>
					ShoreDirectResponse(uartBus[SHORE_UART].txBuffer);
 8003362:	4b1f      	ldr	r3, [pc, #124]	; (80033e0 <func_tUartTimer+0x100>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff f888 	bl	800247c <ShoreDirectResponse>
					uartBus[SHORE_UART].txLength = SHORE_DIRECT_RESPONSE_LENGTH;
 800336c:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <func_tUartTimer+0x100>)
 800336e:	2206      	movs	r2, #6
 8003370:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003374:	e001      	b.n	800337a <func_tUartTimer+0x9a>
				default:
					package = false;
 8003376:	2300      	movs	r3, #0
 8003378:	73fb      	strb	r3, [r7, #15]
			}
			xSemaphoreGive(mutDataHandle);
 800337a:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <func_tUartTimer+0x104>)
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	2300      	movs	r3, #0
 8003380:	2200      	movs	r2, #0
 8003382:	2100      	movs	r1, #0
 8003384:	f006 f9d4 	bl	8009730 <xQueueGenericSend>
		}
		if(package) {
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d010      	beq.n	80033b0 <func_tUartTimer+0xd0>
			HAL_UART_Transmit_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].txBuffer, uartBus[SHORE_UART].txLength);
 800338e:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <func_tUartTimer+0x100>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	4a13      	ldr	r2, [pc, #76]	; (80033e0 <func_tUartTimer+0x100>)
 8003394:	6851      	ldr	r1, [r2, #4]
 8003396:	4a12      	ldr	r2, [pc, #72]	; (80033e0 <func_tUartTimer+0x100>)
 8003398:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800339c:	b292      	uxth	r2, r2
 800339e:	4618      	mov	r0, r3
 80033a0:	f004 fadf 	bl	8007962 <HAL_UART_Transmit_IT>
 80033a4:	e004      	b.n	80033b0 <func_tUartTimer+0xd0>
		}
	}
	else {
		++uartBus[SHORE_UART].outdatedRxCounter;
 80033a6:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <func_tUartTimer+0x100>)
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	3301      	adds	r3, #1
 80033ac:	4a0c      	ldr	r2, [pc, #48]	; (80033e0 <func_tUartTimer+0x100>)
 80033ae:	6113      	str	r3, [r2, #16]
	}
	counterRx = 0;
 80033b0:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <func_tUartTimer+0x108>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	801a      	strh	r2, [r3, #0]
	uartBus[SHORE_UART].packageReceived = false;
 80033b6:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <func_tUartTimer+0x100>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	721a      	strb	r2, [r3, #8]
	HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 80033bc:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <func_tUartTimer+0x100>)
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	4618      	mov	r0, r3
 80033c2:	f004 fc65 	bl	8007c90 <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 80033c6:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <func_tUartTimer+0x100>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	4a05      	ldr	r2, [pc, #20]	; (80033e0 <func_tUartTimer+0x100>)
 80033cc:	6811      	ldr	r1, [r2, #0]
 80033ce:	2201      	movs	r2, #1
 80033d0:	4618      	mov	r0, r3
 80033d2:	f004 fb0b 	bl	80079ec <HAL_UART_Receive_IT>
  /* USER CODE END func_tUartTimer */
}
 80033d6:	bf00      	nop
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	200001a4 	.word	0x200001a4
 80033e4:	2000134c 	.word	0x2000134c
 80033e8:	20000284 	.word	0x20000284

080033ec <tSilence_func>:

/* tSilence_func function */
void tSilence_func(void const * argument)
{
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tSilence_func */
	if(fromTickToMs(xTaskGetTickCount()) - uartBus[SHORE_UART].lastMessage > UART_SWITCH_DELAY && counterRx == 0) {
 80033f4:	f007 fa1e 	bl	800a834 <xTaskGetTickCount>
 80033f8:	4603      	mov	r3, r0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd fd38 	bl	8000e70 <fromTickToMs>
 8003400:	eeb0 7a40 	vmov.f32	s14, s0
 8003404:	4b28      	ldr	r3, [pc, #160]	; (80034a8 <tSilence_func+0xbc>)
 8003406:	edd3 7a06 	vldr	s15, [r3, #24]
 800340a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800340e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80034ac <tSilence_func+0xc0>
 8003412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341a:	dd34      	ble.n	8003486 <tSilence_func+0x9a>
 800341c:	4b24      	ldr	r3, [pc, #144]	; (80034b0 <tSilence_func+0xc4>)
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d130      	bne.n	8003486 <tSilence_func+0x9a>
//			uartBus[SHORE_UART].huart = &huart5;
//		}
//		else if(uartBus[SHORE_UART].huart == &huart5) {
//			uartBus[SHORE_UART].huart = &huart1;
//		}
		HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 8003424:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <tSilence_func+0xbc>)
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	4618      	mov	r0, r3
 800342a:	f004 fc31 	bl	8007c90 <HAL_UART_AbortReceive_IT>
		HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 800342e:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <tSilence_func+0xbc>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	4a1d      	ldr	r2, [pc, #116]	; (80034a8 <tSilence_func+0xbc>)
 8003434:	6811      	ldr	r1, [r2, #0]
 8003436:	2201      	movs	r2, #1
 8003438:	4618      	mov	r0, r3
 800343a:	f004 fad7 	bl	80079ec <HAL_UART_Receive_IT>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 800343e:	4b1d      	ldr	r3, [pc, #116]	; (80034b4 <tSilence_func+0xc8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2105      	movs	r1, #5
 8003444:	4618      	mov	r0, r3
 8003446:	f006 fbed 	bl	8009c24 <xQueueSemaphoreTake>
 800344a:	4603      	mov	r3, r0
 800344c:	2b01      	cmp	r3, #1
 800344e:	d11a      	bne.n	8003486 <tSilence_func+0x9a>
			resetThrusters();
 8003450:	f001 f9cc 	bl	80047ec <resetThrusters>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003454:	2300      	movs	r3, #0
 8003456:	73fb      	strb	r3, [r7, #15]
 8003458:	e00b      	b.n	8003472 <tSilence_func+0x86>
				rStabConstants[i].enable = false;
 800345a:	7bfa      	ldrb	r2, [r7, #15]
 800345c:	4916      	ldr	r1, [pc, #88]	; (80034b8 <tSilence_func+0xcc>)
 800345e:	4613      	mov	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	4413      	add	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	440b      	add	r3, r1
 8003468:	2200      	movs	r2, #0
 800346a:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	3301      	adds	r3, #1
 8003470:	73fb      	strb	r3, [r7, #15]
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	2b05      	cmp	r3, #5
 8003476:	d9f0      	bls.n	800345a <tSilence_func+0x6e>
			}
			xSemaphoreGive(mutDataHandle);
 8003478:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <tSilence_func+0xc8>)
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	2300      	movs	r3, #0
 800347e:	2200      	movs	r2, #0
 8003480:	2100      	movs	r1, #0
 8003482:	f006 f955 	bl	8009730 <xQueueGenericSend>
//			break;
//			}
		}
//	}
	//HAL_GPIO_WritePin(GPIOE, RES_PC_2_Pin, GPIO_PIN_SET); // ONOFF
	xTimerStart(SilenceTimer, 50);
 8003486:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <tSilence_func+0xd0>)
 8003488:	681c      	ldr	r4, [r3, #0]
 800348a:	f007 f9d3 	bl	800a834 <xTaskGetTickCount>
 800348e:	4602      	mov	r2, r0
 8003490:	2332      	movs	r3, #50	; 0x32
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	2300      	movs	r3, #0
 8003496:	2101      	movs	r1, #1
 8003498:	4620      	mov	r0, r4
 800349a:	f008 f81b 	bl	800b4d4 <xTimerGenericCommand>
  /* USER CODE END tSilence_func */
}
 800349e:	bf00      	nop
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd90      	pop	{r4, r7, pc}
 80034a6:	bf00      	nop
 80034a8:	200001a4 	.word	0x200001a4
 80034ac:	447a0000 	.word	0x447a0000
 80034b0:	20000284 	.word	0x20000284
 80034b4:	2000134c 	.word	0x2000134c
 80034b8:	20001cb0 	.word	0x20001cb0
 80034bc:	20000290 	.word	0x20000290

080034c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c6:	f107 030c 	add.w	r3, r7, #12
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	605a      	str	r2, [r3, #4]
 80034d0:	609a      	str	r2, [r3, #8]
 80034d2:	60da      	str	r2, [r3, #12]
 80034d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	4b2b      	ldr	r3, [pc, #172]	; (8003588 <MX_GPIO_Init+0xc8>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	4a2a      	ldr	r2, [pc, #168]	; (8003588 <MX_GPIO_Init+0xc8>)
 80034e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e4:	6313      	str	r3, [r2, #48]	; 0x30
 80034e6:	4b28      	ldr	r3, [pc, #160]	; (8003588 <MX_GPIO_Init+0xc8>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	4b24      	ldr	r3, [pc, #144]	; (8003588 <MX_GPIO_Init+0xc8>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	4a23      	ldr	r2, [pc, #140]	; (8003588 <MX_GPIO_Init+0xc8>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6313      	str	r3, [r2, #48]	; 0x30
 8003502:	4b21      	ldr	r3, [pc, #132]	; (8003588 <MX_GPIO_Init+0xc8>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	607b      	str	r3, [r7, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	603b      	str	r3, [r7, #0]
 8003512:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <MX_GPIO_Init+0xc8>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	4a1c      	ldr	r2, [pc, #112]	; (8003588 <MX_GPIO_Init+0xc8>)
 8003518:	f043 0302 	orr.w	r3, r3, #2
 800351c:	6313      	str	r3, [r2, #48]	; 0x30
 800351e:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <MX_GPIO_Init+0xc8>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led1_Pin|led2_Pin|led3_Pin, GPIO_PIN_RESET);
 800352a:	2200      	movs	r2, #0
 800352c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8003530:	4816      	ldr	r0, [pc, #88]	; (800358c <MX_GPIO_Init+0xcc>)
 8003532:	f003 f8a7 	bl	8006684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_DE_GPIO_Port, RE_DE_Pin, GPIO_PIN_RESET);
 8003536:	2200      	movs	r2, #0
 8003538:	f44f 7180 	mov.w	r1, #256	; 0x100
 800353c:	4814      	ldr	r0, [pc, #80]	; (8003590 <MX_GPIO_Init+0xd0>)
 800353e:	f003 f8a1 	bl	8006684 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin;
 8003542:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003548:	2301      	movs	r3, #1
 800354a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003550:	2300      	movs	r3, #0
 8003552:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003554:	f107 030c 	add.w	r3, r7, #12
 8003558:	4619      	mov	r1, r3
 800355a:	480c      	ldr	r0, [pc, #48]	; (800358c <MX_GPIO_Init+0xcc>)
 800355c:	f002 fef6 	bl	800634c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RE_DE_Pin;
 8003560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003564:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003566:	2301      	movs	r3, #1
 8003568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356e:	2300      	movs	r3, #0
 8003570:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RE_DE_GPIO_Port, &GPIO_InitStruct);
 8003572:	f107 030c 	add.w	r3, r7, #12
 8003576:	4619      	mov	r1, r3
 8003578:	4805      	ldr	r0, [pc, #20]	; (8003590 <MX_GPIO_Init+0xd0>)
 800357a:	f002 fee7 	bl	800634c <HAL_GPIO_Init>

}
 800357e:	bf00      	nop
 8003580:	3720      	adds	r7, #32
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800
 800358c:	40020400 	.word	0x40020400
 8003590:	40020000 	.word	0x40020000

08003594 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003598:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <MX_I2C1_Init+0x50>)
 800359a:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <MX_I2C1_Init+0x54>)
 800359c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800359e:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <MX_I2C1_Init+0x50>)
 80035a0:	4a12      	ldr	r2, [pc, #72]	; (80035ec <MX_I2C1_Init+0x58>)
 80035a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035a4:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <MX_I2C1_Init+0x50>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80035aa:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <MX_I2C1_Init+0x50>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035b0:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <MX_I2C1_Init+0x50>)
 80035b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035b8:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <MX_I2C1_Init+0x50>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80035be:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <MX_I2C1_Init+0x50>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035c4:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <MX_I2C1_Init+0x50>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035ca:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <MX_I2C1_Init+0x50>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035d0:	4804      	ldr	r0, [pc, #16]	; (80035e4 <MX_I2C1_Init+0x50>)
 80035d2:	f003 f88b 	bl	80066ec <HAL_I2C_Init>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80035dc:	f000 f8ea 	bl	80037b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80035e0:	bf00      	nop
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	200021f8 	.word	0x200021f8
 80035e8:	40005400 	.word	0x40005400
 80035ec:	000186a0 	.word	0x000186a0

080035f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08a      	sub	sp, #40	; 0x28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f8:	f107 0314 	add.w	r3, r7, #20
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a19      	ldr	r2, [pc, #100]	; (8003674 <HAL_I2C_MspInit+0x84>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d12b      	bne.n	800366a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	4b18      	ldr	r3, [pc, #96]	; (8003678 <HAL_I2C_MspInit+0x88>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	4a17      	ldr	r2, [pc, #92]	; (8003678 <HAL_I2C_MspInit+0x88>)
 800361c:	f043 0302 	orr.w	r3, r3, #2
 8003620:	6313      	str	r3, [r2, #48]	; 0x30
 8003622:	4b15      	ldr	r3, [pc, #84]	; (8003678 <HAL_I2C_MspInit+0x88>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800362e:	23c0      	movs	r3, #192	; 0xc0
 8003630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003632:	2312      	movs	r3, #18
 8003634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800363a:	2303      	movs	r3, #3
 800363c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800363e:	2304      	movs	r3, #4
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003642:	f107 0314 	add.w	r3, r7, #20
 8003646:	4619      	mov	r1, r3
 8003648:	480c      	ldr	r0, [pc, #48]	; (800367c <HAL_I2C_MspInit+0x8c>)
 800364a:	f002 fe7f 	bl	800634c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <HAL_I2C_MspInit+0x88>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	4a08      	ldr	r2, [pc, #32]	; (8003678 <HAL_I2C_MspInit+0x88>)
 8003658:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800365c:	6413      	str	r3, [r2, #64]	; 0x40
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <HAL_I2C_MspInit+0x88>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800366a:	bf00      	nop
 800366c:	3728      	adds	r7, #40	; 0x28
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40005400 	.word	0x40005400
 8003678:	40023800 	.word	0x40023800
 800367c:	40020400 	.word	0x40020400

08003680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003684:	f001 fe40 	bl	8005308 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003688:	f000 f81a 	bl	80036c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800368c:	f7ff ff18 	bl	80034c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003690:	f7fe ff6a 	bl	8002568 <MX_DMA_Init>
  MX_I2C1_Init();
 8003694:	f7ff ff7e 	bl	8003594 <MX_I2C1_Init>
  MX_UART4_Init();
 8003698:	f001 fb32 	bl	8004d00 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800369c:	f001 fb5a 	bl	8004d54 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80036a0:	f001 fb82 	bl	8004da8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80036a4:	f001 fbaa 	bl	8004dfc <MX_USART3_UART_Init>
  MX_TIM7_Init();
 80036a8:	f001 fad2 	bl	8004c50 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(60e3);
 80036ac:	f64e 2060 	movw	r0, #60000	; 0xea60
 80036b0:	f001 fe6c 	bl	800538c <HAL_Delay>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80036b4:	f7ff fb36 	bl	8002d24 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80036b8:	f005 fd26 	bl	8009108 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80036bc:	e7fe      	b.n	80036bc <main+0x3c>
	...

080036c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b094      	sub	sp, #80	; 0x50
 80036c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036c6:	f107 0320 	add.w	r3, r7, #32
 80036ca:	2230      	movs	r2, #48	; 0x30
 80036cc:	2100      	movs	r1, #0
 80036ce:	4618      	mov	r0, r3
 80036d0:	f008 fe5e 	bl	800c390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036d4:	f107 030c 	add.w	r3, r7, #12
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80036e4:	2300      	movs	r3, #0
 80036e6:	60bb      	str	r3, [r7, #8]
 80036e8:	4b27      	ldr	r3, [pc, #156]	; (8003788 <SystemClock_Config+0xc8>)
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	4a26      	ldr	r2, [pc, #152]	; (8003788 <SystemClock_Config+0xc8>)
 80036ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f2:	6413      	str	r3, [r2, #64]	; 0x40
 80036f4:	4b24      	ldr	r3, [pc, #144]	; (8003788 <SystemClock_Config+0xc8>)
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003700:	2300      	movs	r3, #0
 8003702:	607b      	str	r3, [r7, #4]
 8003704:	4b21      	ldr	r3, [pc, #132]	; (800378c <SystemClock_Config+0xcc>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a20      	ldr	r2, [pc, #128]	; (800378c <SystemClock_Config+0xcc>)
 800370a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	4b1e      	ldr	r3, [pc, #120]	; (800378c <SystemClock_Config+0xcc>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003718:	607b      	str	r3, [r7, #4]
 800371a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800371c:	2302      	movs	r3, #2
 800371e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003720:	2301      	movs	r3, #1
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003724:	2310      	movs	r3, #16
 8003726:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003728:	2302      	movs	r3, #2
 800372a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800372c:	2300      	movs	r3, #0
 800372e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003730:	2308      	movs	r3, #8
 8003732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 75;
 8003734:	234b      	movs	r3, #75	; 0x4b
 8003736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003738:	2302      	movs	r3, #2
 800373a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800373c:	2304      	movs	r3, #4
 800373e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003740:	f107 0320 	add.w	r3, r7, #32
 8003744:	4618      	mov	r0, r3
 8003746:	f003 f915 	bl	8006974 <HAL_RCC_OscConfig>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003750:	f000 f830 	bl	80037b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003754:	230f      	movs	r3, #15
 8003756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003758:	2302      	movs	r3, #2
 800375a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800375c:	2300      	movs	r3, #0
 800375e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003764:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800376a:	f107 030c 	add.w	r3, r7, #12
 800376e:	2102      	movs	r1, #2
 8003770:	4618      	mov	r0, r3
 8003772:	f003 fb77 	bl	8006e64 <HAL_RCC_ClockConfig>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800377c:	f000 f81a 	bl	80037b4 <Error_Handler>
  }
}
 8003780:	bf00      	nop
 8003782:	3750      	adds	r7, #80	; 0x50
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40023800 	.word	0x40023800
 800378c:	40007000 	.word	0x40007000

08003790 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d101      	bne.n	80037a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80037a2:	f001 fdd3 	bl	800534c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40010000 	.word	0x40010000

080037b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037b8:	b672      	cpsid	i
}
 80037ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037bc:	e7fe      	b.n	80037bc <Error_Handler+0x8>
	...

080037c0 <stabilizationInit>:
#include "FreeRTOSTick.h"
#include "math.h"
#include "robot.h"

void stabilizationInit()
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80037c6:	2300      	movs	r3, #0
 80037c8:	71fb      	strb	r3, [r7, #7]
 80037ca:	e16d      	b.n	8003aa8 <stabilizationInit+0x2e8>
		rStabConstants[i].enable = false;
 80037cc:	79fa      	ldrb	r2, [r7, #7]
 80037ce:	49c1      	ldr	r1, [pc, #772]	; (8003ad4 <stabilizationInit+0x314>)
 80037d0:	4613      	mov	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	4413      	add	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	440b      	add	r3, r1
 80037da:	2200      	movs	r2, #0
 80037dc:	701a      	strb	r2, [r3, #0]

		rStabState[i].speedIntegral = 0;
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	4abd      	ldr	r2, [pc, #756]	; (8003ad8 <stabilizationInit+0x318>)
 80037e2:	2158      	movs	r1, #88	; 0x58
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	4413      	add	r3, r2
 80037ea:	330c      	adds	r3, #12
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]
		rStabState[i].posDerivative = 0;
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	4ab8      	ldr	r2, [pc, #736]	; (8003ad8 <stabilizationInit+0x318>)
 80037f6:	2158      	movs	r1, #88	; 0x58
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	3310      	adds	r3, #16
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeed = 0;
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	4ab3      	ldr	r2, [pc, #716]	; (8003ad8 <stabilizationInit+0x318>)
 800380a:	2158      	movs	r1, #88	; 0x58
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	4413      	add	r3, r2
 8003812:	3314      	adds	r3, #20
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPos = 0;
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	4aae      	ldr	r2, [pc, #696]	; (8003ad8 <stabilizationInit+0x318>)
 800381e:	2158      	movs	r1, #88	; 0x58
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	3318      	adds	r3, #24
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	601a      	str	r2, [r3, #0]

		rStabState[i].joyUnitCasted = 0;
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	4aa9      	ldr	r2, [pc, #676]	; (8003ad8 <stabilizationInit+0x318>)
 8003832:	2158      	movs	r1, #88	; 0x58
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	4413      	add	r3, r2
 800383a:	331c      	adds	r3, #28
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
		rStabState[i].joy_iValue = 0;
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	4aa4      	ldr	r2, [pc, #656]	; (8003ad8 <stabilizationInit+0x318>)
 8003846:	2158      	movs	r1, #88	; 0x58
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	4413      	add	r3, r2
 800384e:	3320      	adds	r3, #32
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
		rStabState[i].posError = 0;
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	4a9f      	ldr	r2, [pc, #636]	; (8003ad8 <stabilizationInit+0x318>)
 800385a:	2158      	movs	r1, #88	; 0x58
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	4413      	add	r3, r2
 8003862:	3324      	adds	r3, #36	; 0x24
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
		rStabState[i].speedError = 0;
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	4a9a      	ldr	r2, [pc, #616]	; (8003ad8 <stabilizationInit+0x318>)
 800386e:	2158      	movs	r1, #88	; 0x58
 8003870:	fb01 f303 	mul.w	r3, r1, r3
 8003874:	4413      	add	r3, r2
 8003876:	3328      	adds	r3, #40	; 0x28
 8003878:	f04f 0200 	mov.w	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
		rStabState[i].dynSummator = 0;
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	4a95      	ldr	r2, [pc, #596]	; (8003ad8 <stabilizationInit+0x318>)
 8003882:	2158      	movs	r1, #88	; 0x58
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	4413      	add	r3, r2
 800388a:	332c      	adds	r3, #44	; 0x2c
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
		rStabState[i].pidValue = 0;
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	4a90      	ldr	r2, [pc, #576]	; (8003ad8 <stabilizationInit+0x318>)
 8003896:	2158      	movs	r1, #88	; 0x58
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	3330      	adds	r3, #48	; 0x30
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
		rStabState[i].pid_iValue = 0;
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	4a8b      	ldr	r2, [pc, #556]	; (8003ad8 <stabilizationInit+0x318>)
 80038aa:	2158      	movs	r1, #88	; 0x58
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	4413      	add	r3, r2
 80038b2:	3334      	adds	r3, #52	; 0x34
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
		rStabState[i].posErrorAmp = 0;
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	4a86      	ldr	r2, [pc, #536]	; (8003ad8 <stabilizationInit+0x318>)
 80038be:	2158      	movs	r1, #88	; 0x58
 80038c0:	fb01 f303 	mul.w	r3, r1, r3
 80038c4:	4413      	add	r3, r2
 80038c6:	3338      	adds	r3, #56	; 0x38
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
		rStabState[i].speedFiltered = 0;
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	4a81      	ldr	r2, [pc, #516]	; (8003ad8 <stabilizationInit+0x318>)
 80038d2:	2158      	movs	r1, #88	; 0x58
 80038d4:	fb01 f303 	mul.w	r3, r1, r3
 80038d8:	4413      	add	r3, r2
 80038da:	333c      	adds	r3, #60	; 0x3c
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
		rStabState[i].posFiltered = 0;
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	4a7c      	ldr	r2, [pc, #496]	; (8003ad8 <stabilizationInit+0x318>)
 80038e6:	2158      	movs	r1, #88	; 0x58
 80038e8:	fb01 f303 	mul.w	r3, r1, r3
 80038ec:	4413      	add	r3, r2
 80038ee:	3340      	adds	r3, #64	; 0x40
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPosFiltered = 0;
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	4a77      	ldr	r2, [pc, #476]	; (8003ad8 <stabilizationInit+0x318>)
 80038fa:	2158      	movs	r1, #88	; 0x58
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	4413      	add	r3, r2
 8003902:	3344      	adds	r3, #68	; 0x44
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeedError = 0;
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	4a72      	ldr	r2, [pc, #456]	; (8003ad8 <stabilizationInit+0x318>)
 800390e:	2158      	movs	r1, #88	; 0x58
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	4413      	add	r3, r2
 8003916:	3348      	adds	r3, #72	; 0x48
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	601a      	str	r2, [r3, #0]
		rStabState[i].thrustersFiltered = 0;
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	4a6d      	ldr	r2, [pc, #436]	; (8003ad8 <stabilizationInit+0x318>)
 8003922:	2158      	movs	r1, #88	; 0x58
 8003924:	fb01 f303 	mul.w	r3, r1, r3
 8003928:	4413      	add	r3, r2
 800392a:	334c      	adds	r3, #76	; 0x4c
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
		rStabState[i].outputSignal = 0;
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	4a68      	ldr	r2, [pc, #416]	; (8003ad8 <stabilizationInit+0x318>)
 8003936:	2158      	movs	r1, #88	; 0x58
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	4413      	add	r3, r2
 800393e:	3350      	adds	r3, #80	; 0x50
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	601a      	str	r2, [r3, #0]

		rStabState[i].LastTick = 0;
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	4a63      	ldr	r2, [pc, #396]	; (8003ad8 <stabilizationInit+0x318>)
 800394a:	2158      	movs	r1, #88	; 0x58
 800394c:	fb01 f303 	mul.w	r3, r1, r3
 8003950:	4413      	add	r3, r2
 8003952:	3354      	adds	r3, #84	; 0x54
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	601a      	str	r2, [r3, #0]

		if(!rState.flash) {
 800395a:	4b60      	ldr	r3, [pc, #384]	; (8003adc <stabilizationInit+0x31c>)
 800395c:	789b      	ldrb	r3, [r3, #2]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f040 809f 	bne.w	8003aa2 <stabilizationInit+0x2e2>
			rStabConstants[i].pJoyUnitCast = 1;
 8003964:	79fa      	ldrb	r2, [r7, #7]
 8003966:	495b      	ldr	r1, [pc, #364]	; (8003ad4 <stabilizationInit+0x314>)
 8003968:	4613      	mov	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	4413      	add	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	440b      	add	r3, r1
 8003972:	3304      	adds	r3, #4
 8003974:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003978:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pSpeedDyn = 1;
 800397a:	79fa      	ldrb	r2, [r7, #7]
 800397c:	4955      	ldr	r1, [pc, #340]	; (8003ad4 <stabilizationInit+0x314>)
 800397e:	4613      	mov	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4413      	add	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	440b      	add	r3, r1
 8003988:	3308      	adds	r3, #8
 800398a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800398e:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pErrGain = 1;
 8003990:	79fa      	ldrb	r2, [r7, #7]
 8003992:	4950      	ldr	r1, [pc, #320]	; (8003ad4 <stabilizationInit+0x314>)
 8003994:	4613      	mov	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4413      	add	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	440b      	add	r3, r1
 800399e:	330c      	adds	r3, #12
 80039a0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80039a4:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].T = 0;
 80039a6:	79fa      	ldrb	r2, [r7, #7]
 80039a8:	494a      	ldr	r1, [pc, #296]	; (8003ad4 <stabilizationInit+0x314>)
 80039aa:	4613      	mov	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4413      	add	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	440b      	add	r3, r1
 80039b4:	3318      	adds	r3, #24
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].K = 1;
 80039bc:	79fa      	ldrb	r2, [r7, #7]
 80039be:	4945      	ldr	r1, [pc, #276]	; (8003ad4 <stabilizationInit+0x314>)
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4413      	add	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	440b      	add	r3, r1
 80039ca:	331c      	adds	r3, #28
 80039cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80039d0:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].T = 0;
 80039d2:	79fa      	ldrb	r2, [r7, #7]
 80039d4:	493f      	ldr	r1, [pc, #252]	; (8003ad4 <stabilizationInit+0x314>)
 80039d6:	4613      	mov	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4413      	add	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	440b      	add	r3, r1
 80039e0:	3310      	adds	r3, #16
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].K = 1;
 80039e8:	79fa      	ldrb	r2, [r7, #7]
 80039ea:	493a      	ldr	r1, [pc, #232]	; (8003ad4 <stabilizationInit+0x314>)
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4413      	add	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	440b      	add	r3, r1
 80039f6:	3314      	adds	r3, #20
 80039f8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80039fc:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.pGain = 1;
 80039fe:	79fa      	ldrb	r2, [r7, #7]
 8003a00:	4934      	ldr	r1, [pc, #208]	; (8003ad4 <stabilizationInit+0x314>)
 8003a02:	4613      	mov	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4413      	add	r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	440b      	add	r3, r1
 8003a0c:	3328      	adds	r3, #40	; 0x28
 8003a0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003a12:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iGain = 1;
 8003a14:	79fa      	ldrb	r2, [r7, #7]
 8003a16:	492f      	ldr	r1, [pc, #188]	; (8003ad4 <stabilizationInit+0x314>)
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	440b      	add	r3, r1
 8003a22:	332c      	adds	r3, #44	; 0x2c
 8003a24:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003a28:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMax = -1000;
 8003a2a:	79fa      	ldrb	r2, [r7, #7]
 8003a2c:	4929      	ldr	r1, [pc, #164]	; (8003ad4 <stabilizationInit+0x314>)
 8003a2e:	4613      	mov	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4413      	add	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	440b      	add	r3, r1
 8003a38:	3330      	adds	r3, #48	; 0x30
 8003a3a:	4a29      	ldr	r2, [pc, #164]	; (8003ae0 <stabilizationInit+0x320>)
 8003a3c:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMin = 1000;
 8003a3e:	79fa      	ldrb	r2, [r7, #7]
 8003a40:	4924      	ldr	r1, [pc, #144]	; (8003ad4 <stabilizationInit+0x314>)
 8003a42:	4613      	mov	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	4413      	add	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	440b      	add	r3, r1
 8003a4c:	3334      	adds	r3, #52	; 0x34
 8003a4e:	4a25      	ldr	r2, [pc, #148]	; (8003ae4 <stabilizationInit+0x324>)
 8003a50:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMax = 5000;
 8003a52:	79fa      	ldrb	r2, [r7, #7]
 8003a54:	491f      	ldr	r1, [pc, #124]	; (8003ad4 <stabilizationInit+0x314>)
 8003a56:	4613      	mov	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	440b      	add	r3, r1
 8003a60:	333c      	adds	r3, #60	; 0x3c
 8003a62:	4a21      	ldr	r2, [pc, #132]	; (8003ae8 <stabilizationInit+0x328>)
 8003a64:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMin = -5000;
 8003a66:	79fa      	ldrb	r2, [r7, #7]
 8003a68:	491a      	ldr	r1, [pc, #104]	; (8003ad4 <stabilizationInit+0x314>)
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4413      	add	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	440b      	add	r3, r1
 8003a74:	3338      	adds	r3, #56	; 0x38
 8003a76:	4a1d      	ldr	r2, [pc, #116]	; (8003aec <stabilizationInit+0x32c>)
 8003a78:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMax = 32000;
 8003a7a:	79fa      	ldrb	r2, [r7, #7]
 8003a7c:	4915      	ldr	r1, [pc, #84]	; (8003ad4 <stabilizationInit+0x314>)
 8003a7e:	4613      	mov	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4413      	add	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	440b      	add	r3, r1
 8003a88:	3340      	adds	r3, #64	; 0x40
 8003a8a:	4a19      	ldr	r2, [pc, #100]	; (8003af0 <stabilizationInit+0x330>)
 8003a8c:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMin = -32000;
 8003a8e:	79fa      	ldrb	r2, [r7, #7]
 8003a90:	4910      	ldr	r1, [pc, #64]	; (8003ad4 <stabilizationInit+0x314>)
 8003a92:	4613      	mov	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4413      	add	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	440b      	add	r3, r1
 8003a9c:	3344      	adds	r3, #68	; 0x44
 8003a9e:	4a15      	ldr	r2, [pc, #84]	; (8003af4 <stabilizationInit+0x334>)
 8003aa0:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	71fb      	strb	r3, [r7, #7]
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	2b05      	cmp	r3, #5
 8003aac:	f67f ae8e 	bls.w	80037cc <stabilizationInit+0xc>




	/////////////////////////////////////////////////////////////
    rStabState[STAB_ROLL].inputSignal = &rJoySpeed.roll;
 8003ab0:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <stabilizationInit+0x318>)
 8003ab2:	4a11      	ldr	r2, [pc, #68]	; (8003af8 <stabilizationInit+0x338>)
 8003ab4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    rStabState[STAB_ROLL].speedSignal = &rSensors.rollSpeed;
 8003ab8:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <stabilizationInit+0x318>)
 8003aba:	4a10      	ldr	r2, [pc, #64]	; (8003afc <stabilizationInit+0x33c>)
 8003abc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    rStabState[STAB_ROLL].posSignal = &rSensors.roll;
 8003ac0:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <stabilizationInit+0x318>)
 8003ac2:	4a0f      	ldr	r2, [pc, #60]	; (8003b00 <stabilizationInit+0x340>)
 8003ac4:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    rStabConstants[STAB_ROLL].joyIntegration = false;
 8003ac8:	4b02      	ldr	r3, [pc, #8]	; (8003ad4 <stabilizationInit+0x314>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
 8003ad0:	e018      	b.n	8003b04 <stabilizationInit+0x344>
 8003ad2:	bf00      	nop
 8003ad4:	20001cb0 	.word	0x20001cb0
 8003ad8:	20001e60 	.word	0x20001e60
 8003adc:	20001b20 	.word	0x20001b20
 8003ae0:	c47a0000 	.word	0xc47a0000
 8003ae4:	447a0000 	.word	0x447a0000
 8003ae8:	459c4000 	.word	0x459c4000
 8003aec:	c59c4000 	.word	0xc59c4000
 8003af0:	46fa0000 	.word	0x46fa0000
 8003af4:	c6fa0000 	.word	0xc6fa0000
 8003af8:	20001c64 	.word	0x20001c64
 8003afc:	20001c08 	.word	0x20001c08
 8003b00:	20001bec 	.word	0x20001bec
    /////////////////////////////////////////////////////////////
    rStabState[STAB_PITCH].inputSignal = &rJoySpeed.pitch;
 8003b04:	4b86      	ldr	r3, [pc, #536]	; (8003d20 <stabilizationInit+0x560>)
 8003b06:	4a87      	ldr	r2, [pc, #540]	; (8003d24 <stabilizationInit+0x564>)
 8003b08:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    rStabState[STAB_PITCH].speedSignal = &rSensors.pitchSpeed;
 8003b0c:	4b84      	ldr	r3, [pc, #528]	; (8003d20 <stabilizationInit+0x560>)
 8003b0e:	4a86      	ldr	r2, [pc, #536]	; (8003d28 <stabilizationInit+0x568>)
 8003b10:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    rStabState[STAB_PITCH].posSignal = &rSensors.pitch;
 8003b14:	4b82      	ldr	r3, [pc, #520]	; (8003d20 <stabilizationInit+0x560>)
 8003b16:	4a85      	ldr	r2, [pc, #532]	; (8003d2c <stabilizationInit+0x56c>)
 8003b18:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    rStabConstants[STAB_PITCH].joyIntegration = true;
 8003b1c:	4b84      	ldr	r3, [pc, #528]	; (8003d30 <stabilizationInit+0x570>)
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    /////////////////////////////////////////////////////////////
    rStabState[STAB_YAW].inputSignal = &rJoySpeed.yaw;
 8003b24:	4b7e      	ldr	r3, [pc, #504]	; (8003d20 <stabilizationInit+0x560>)
 8003b26:	4a83      	ldr	r2, [pc, #524]	; (8003d34 <stabilizationInit+0x574>)
 8003b28:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    rStabState[STAB_YAW].speedSignal = &rSensors.yawSpeed;
 8003b2c:	4b7c      	ldr	r3, [pc, #496]	; (8003d20 <stabilizationInit+0x560>)
 8003b2e:	4a82      	ldr	r2, [pc, #520]	; (8003d38 <stabilizationInit+0x578>)
 8003b30:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    rStabState[STAB_YAW].posSignal = &rSensors.yaw;//&rStabState[STAB_YAW].speedIntegral;
 8003b34:	4b7a      	ldr	r3, [pc, #488]	; (8003d20 <stabilizationInit+0x560>)
 8003b36:	4a81      	ldr	r2, [pc, #516]	; (8003d3c <stabilizationInit+0x57c>)
 8003b38:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    rStabConstants[STAB_YAW].joyIntegration = true;
 8003b3c:	4b7c      	ldr	r3, [pc, #496]	; (8003d30 <stabilizationInit+0x570>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
    /////////////////////////////////////////////////////////////
    rStabState[STAB_DEPTH].inputSignal = &rJoySpeed.depth;
 8003b44:	4b76      	ldr	r3, [pc, #472]	; (8003d20 <stabilizationInit+0x560>)
 8003b46:	4a7e      	ldr	r2, [pc, #504]	; (8003d40 <stabilizationInit+0x580>)
 8003b48:	601a      	str	r2, [r3, #0]
    rStabState[STAB_DEPTH].speedSignal = &rSensors.velocity_pressure;//&rStabState[STAB_DEPTH].posDerivative;
 8003b4a:	4b75      	ldr	r3, [pc, #468]	; (8003d20 <stabilizationInit+0x560>)
 8003b4c:	4a7d      	ldr	r2, [pc, #500]	; (8003d44 <stabilizationInit+0x584>)
 8003b4e:	605a      	str	r2, [r3, #4]
    rStabState[STAB_DEPTH].posSignal = &rSensors.pressure;
 8003b50:	4b73      	ldr	r3, [pc, #460]	; (8003d20 <stabilizationInit+0x560>)
 8003b52:	4a7d      	ldr	r2, [pc, #500]	; (8003d48 <stabilizationInit+0x588>)
 8003b54:	609a      	str	r2, [r3, #8]
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 8003b56:	4b76      	ldr	r3, [pc, #472]	; (8003d30 <stabilizationInit+0x570>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	705a      	strb	r2, [r3, #1]
    /////////////////////////////////////////////////////////////
    rStabState[STAB_LAG].inputSignal = &rJoySpeed.lag;
 8003b5c:	4b70      	ldr	r3, [pc, #448]	; (8003d20 <stabilizationInit+0x560>)
 8003b5e:	4a7b      	ldr	r2, [pc, #492]	; (8003d4c <stabilizationInit+0x58c>)
 8003b60:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    rStabState[STAB_LAG].speedSignal = &rStabState[STAB_LAG].posDerivative;
 8003b64:	4b6e      	ldr	r3, [pc, #440]	; (8003d20 <stabilizationInit+0x560>)
 8003b66:	4a7a      	ldr	r2, [pc, #488]	; (8003d50 <stabilizationInit+0x590>)
 8003b68:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    rStabState[STAB_LAG].posSignal = &rState.lag_error;
 8003b6c:	4b6c      	ldr	r3, [pc, #432]	; (8003d20 <stabilizationInit+0x560>)
 8003b6e:	4a79      	ldr	r2, [pc, #484]	; (8003d54 <stabilizationInit+0x594>)
 8003b70:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    rStabConstants[STAB_LAG].joyIntegration = false;
 8003b74:	4b6e      	ldr	r3, [pc, #440]	; (8003d30 <stabilizationInit+0x570>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    /////////////////////////////////////////////////////////////
    rStabState[STAB_MARCH].inputSignal = &rJoySpeed.march;
 8003b7c:	4b68      	ldr	r3, [pc, #416]	; (8003d20 <stabilizationInit+0x560>)
 8003b7e:	4a76      	ldr	r2, [pc, #472]	; (8003d58 <stabilizationInit+0x598>)
 8003b80:	659a      	str	r2, [r3, #88]	; 0x58
    rStabState[STAB_MARCH].speedSignal = &rStabState[STAB_MARCH].posDerivative;
 8003b82:	4b67      	ldr	r3, [pc, #412]	; (8003d20 <stabilizationInit+0x560>)
 8003b84:	4a75      	ldr	r2, [pc, #468]	; (8003d5c <stabilizationInit+0x59c>)
 8003b86:	65da      	str	r2, [r3, #92]	; 0x5c
    rStabState[STAB_MARCH].posSignal = &rJoySpeed.march;
 8003b88:	4b65      	ldr	r3, [pc, #404]	; (8003d20 <stabilizationInit+0x560>)
 8003b8a:	4a73      	ldr	r2, [pc, #460]	; (8003d58 <stabilizationInit+0x598>)
 8003b8c:	661a      	str	r2, [r3, #96]	; 0x60
    rStabConstants[STAB_MARCH].joyIntegration = false;
 8003b8e:	4b68      	ldr	r3, [pc, #416]	; (8003d30 <stabilizationInit+0x570>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49


    //upload coef
	//rStabConstants[STAB_YAW].enable = true;

	rStabConstants[STAB_YAW].pJoyUnitCast = 1;
 8003b96:	4b66      	ldr	r3, [pc, #408]	; (8003d30 <stabilizationInit+0x570>)
 8003b98:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003b9c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	rStabConstants[STAB_YAW].pSpeedDyn = 0;
 8003ba0:	4b63      	ldr	r3, [pc, #396]	; (8003d30 <stabilizationInit+0x570>)
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	rStabConstants[STAB_YAW].pErrGain = 70;
 8003baa:	4b61      	ldr	r3, [pc, #388]	; (8003d30 <stabilizationInit+0x570>)
 8003bac:	4a6c      	ldr	r2, [pc, #432]	; (8003d60 <stabilizationInit+0x5a0>)
 8003bae:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].T = 0;
 8003bb2:	4b5f      	ldr	r3, [pc, #380]	; (8003d30 <stabilizationInit+0x570>)
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].K = 120;
 8003bbc:	4b5c      	ldr	r3, [pc, #368]	; (8003d30 <stabilizationInit+0x570>)
 8003bbe:	4a69      	ldr	r2, [pc, #420]	; (8003d64 <stabilizationInit+0x5a4>)
 8003bc0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].T = 0;
 8003bc4:	4b5a      	ldr	r3, [pc, #360]	; (8003d30 <stabilizationInit+0x570>)
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].K = 1;
 8003bce:	4b58      	ldr	r3, [pc, #352]	; (8003d30 <stabilizationInit+0x570>)
 8003bd0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003bd4:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	rStabConstants[STAB_YAW].pid.pGain = 25;
 8003bd8:	4b55      	ldr	r3, [pc, #340]	; (8003d30 <stabilizationInit+0x570>)
 8003bda:	4a63      	ldr	r2, [pc, #396]	; (8003d68 <stabilizationInit+0x5a8>)
 8003bdc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	rStabConstants[STAB_YAW].pid.iGain = 0;
 8003be0:	4b53      	ldr	r3, [pc, #332]	; (8003d30 <stabilizationInit+0x570>)
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	rStabConstants[STAB_YAW].pid.iMax = 3000;
 8003bea:	4b51      	ldr	r3, [pc, #324]	; (8003d30 <stabilizationInit+0x570>)
 8003bec:	4a5f      	ldr	r2, [pc, #380]	; (8003d6c <stabilizationInit+0x5ac>)
 8003bee:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	rStabConstants[STAB_YAW].pid.iMin = -3000;
 8003bf2:	4b4f      	ldr	r3, [pc, #316]	; (8003d30 <stabilizationInit+0x570>)
 8003bf4:	4a5e      	ldr	r2, [pc, #376]	; (8003d70 <stabilizationInit+0x5b0>)
 8003bf6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	rStabConstants[STAB_YAW].pThrustersMax = 20000;
 8003bfa:	4b4d      	ldr	r3, [pc, #308]	; (8003d30 <stabilizationInit+0x570>)
 8003bfc:	4a5d      	ldr	r2, [pc, #372]	; (8003d74 <stabilizationInit+0x5b4>)
 8003bfe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	rStabConstants[STAB_YAW].pThrustersMin = -20000;
 8003c02:	4b4b      	ldr	r3, [pc, #300]	; (8003d30 <stabilizationInit+0x570>)
 8003c04:	4a5c      	ldr	r2, [pc, #368]	; (8003d78 <stabilizationInit+0x5b8>)
 8003c06:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	rStabConstants[STAB_YAW].sOutSummatorMax = 32000;
 8003c0a:	4b49      	ldr	r3, [pc, #292]	; (8003d30 <stabilizationInit+0x570>)
 8003c0c:	4a5b      	ldr	r2, [pc, #364]	; (8003d7c <stabilizationInit+0x5bc>)
 8003c0e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	rStabConstants[STAB_YAW].sOutSummatorMin = -32000;
 8003c12:	4b47      	ldr	r3, [pc, #284]	; (8003d30 <stabilizationInit+0x570>)
 8003c14:	4a5a      	ldr	r2, [pc, #360]	; (8003d80 <stabilizationInit+0x5c0>)
 8003c16:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    rStabConstants[STAB_YAW].joyIntegration = false;
 8003c1a:	4b45      	ldr	r3, [pc, #276]	; (8003d30 <stabilizationInit+0x570>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9

	//rStabConstants[STAB_DEPTH].enable = true;

	rStabConstants[STAB_DEPTH].pJoyUnitCast = -1;
 8003c22:	4b43      	ldr	r3, [pc, #268]	; (8003d30 <stabilizationInit+0x570>)
 8003c24:	4a57      	ldr	r2, [pc, #348]	; (8003d84 <stabilizationInit+0x5c4>)
 8003c26:	605a      	str	r2, [r3, #4]
	rStabConstants[STAB_DEPTH].pSpeedDyn = 1;
 8003c28:	4b41      	ldr	r3, [pc, #260]	; (8003d30 <stabilizationInit+0x570>)
 8003c2a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003c2e:	609a      	str	r2, [r3, #8]
	rStabConstants[STAB_DEPTH].pErrGain = 1;
 8003c30:	4b3f      	ldr	r3, [pc, #252]	; (8003d30 <stabilizationInit+0x570>)
 8003c32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003c36:	60da      	str	r2, [r3, #12]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].T = 80;
 8003c38:	4b3d      	ldr	r3, [pc, #244]	; (8003d30 <stabilizationInit+0x570>)
 8003c3a:	4a53      	ldr	r2, [pc, #332]	; (8003d88 <stabilizationInit+0x5c8>)
 8003c3c:	619a      	str	r2, [r3, #24]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].K = -15;
 8003c3e:	4b3c      	ldr	r3, [pc, #240]	; (8003d30 <stabilizationInit+0x570>)
 8003c40:	4a52      	ldr	r2, [pc, #328]	; (8003d8c <stabilizationInit+0x5cc>)
 8003c42:	61da      	str	r2, [r3, #28]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].T = 0;
 8003c44:	4b3a      	ldr	r3, [pc, #232]	; (8003d30 <stabilizationInit+0x570>)
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	611a      	str	r2, [r3, #16]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].K = -1;
 8003c4c:	4b38      	ldr	r3, [pc, #224]	; (8003d30 <stabilizationInit+0x570>)
 8003c4e:	4a4d      	ldr	r2, [pc, #308]	; (8003d84 <stabilizationInit+0x5c4>)
 8003c50:	615a      	str	r2, [r3, #20]
	rStabConstants[STAB_DEPTH].pid.pGain = 30;
 8003c52:	4b37      	ldr	r3, [pc, #220]	; (8003d30 <stabilizationInit+0x570>)
 8003c54:	4a4e      	ldr	r2, [pc, #312]	; (8003d90 <stabilizationInit+0x5d0>)
 8003c56:	629a      	str	r2, [r3, #40]	; 0x28
	rStabConstants[STAB_DEPTH].pid.iGain = 5;
 8003c58:	4b35      	ldr	r3, [pc, #212]	; (8003d30 <stabilizationInit+0x570>)
 8003c5a:	4a4e      	ldr	r2, [pc, #312]	; (8003d94 <stabilizationInit+0x5d4>)
 8003c5c:	62da      	str	r2, [r3, #44]	; 0x2c
	rStabConstants[STAB_DEPTH].pid.iMax = 40;
 8003c5e:	4b34      	ldr	r3, [pc, #208]	; (8003d30 <stabilizationInit+0x570>)
 8003c60:	4a4d      	ldr	r2, [pc, #308]	; (8003d98 <stabilizationInit+0x5d8>)
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30
	rStabConstants[STAB_DEPTH].pid.iMin = -40;
 8003c64:	4b32      	ldr	r3, [pc, #200]	; (8003d30 <stabilizationInit+0x570>)
 8003c66:	4a4d      	ldr	r2, [pc, #308]	; (8003d9c <stabilizationInit+0x5dc>)
 8003c68:	635a      	str	r2, [r3, #52]	; 0x34
	rStabConstants[STAB_DEPTH].pThrustersMax = 32000;
 8003c6a:	4b31      	ldr	r3, [pc, #196]	; (8003d30 <stabilizationInit+0x570>)
 8003c6c:	4a43      	ldr	r2, [pc, #268]	; (8003d7c <stabilizationInit+0x5bc>)
 8003c6e:	63da      	str	r2, [r3, #60]	; 0x3c
	rStabConstants[STAB_DEPTH].pThrustersMin = -32000;
 8003c70:	4b2f      	ldr	r3, [pc, #188]	; (8003d30 <stabilizationInit+0x570>)
 8003c72:	4a43      	ldr	r2, [pc, #268]	; (8003d80 <stabilizationInit+0x5c0>)
 8003c74:	639a      	str	r2, [r3, #56]	; 0x38
	rStabConstants[STAB_DEPTH].sOutSummatorMax = 32000;
 8003c76:	4b2e      	ldr	r3, [pc, #184]	; (8003d30 <stabilizationInit+0x570>)
 8003c78:	4a40      	ldr	r2, [pc, #256]	; (8003d7c <stabilizationInit+0x5bc>)
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40
	rStabConstants[STAB_DEPTH].sOutSummatorMin = -32000;
 8003c7c:	4b2c      	ldr	r3, [pc, #176]	; (8003d30 <stabilizationInit+0x570>)
 8003c7e:	4a40      	ldr	r2, [pc, #256]	; (8003d80 <stabilizationInit+0x5c0>)
 8003c80:	645a      	str	r2, [r3, #68]	; 0x44
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 8003c82:	4b2b      	ldr	r3, [pc, #172]	; (8003d30 <stabilizationInit+0x570>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	705a      	strb	r2, [r3, #1]

	rStabConstants[STAB_PITCH].pJoyUnitCast = -1;
 8003c88:	4b29      	ldr	r3, [pc, #164]	; (8003d30 <stabilizationInit+0x570>)
 8003c8a:	4a3e      	ldr	r2, [pc, #248]	; (8003d84 <stabilizationInit+0x5c4>)
 8003c8c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	rStabConstants[STAB_PITCH].pSpeedDyn = 0;
 8003c90:	4b27      	ldr	r3, [pc, #156]	; (8003d30 <stabilizationInit+0x570>)
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	rStabConstants[STAB_PITCH].pErrGain = 1;
 8003c9a:	4b25      	ldr	r3, [pc, #148]	; (8003d30 <stabilizationInit+0x570>)
 8003c9c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003ca0:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	rStabConstants[STAB_PITCH].aFilter[SPEED_FILTER].T = 0;
 8003ca4:	4b22      	ldr	r3, [pc, #136]	; (8003d30 <stabilizationInit+0x570>)
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rStabConstants[STAB_PITCH].aFilter[SPEED_FILTER].K = 1;
 8003cae:	4b20      	ldr	r3, [pc, #128]	; (8003d30 <stabilizationInit+0x570>)
 8003cb0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003cb4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	rStabConstants[STAB_PITCH].aFilter[POS_FILTER].T = 0;
 8003cb8:	4b1d      	ldr	r3, [pc, #116]	; (8003d30 <stabilizationInit+0x570>)
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	rStabConstants[STAB_PITCH].aFilter[POS_FILTER].K = -100;
 8003cc2:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <stabilizationInit+0x570>)
 8003cc4:	4a36      	ldr	r2, [pc, #216]	; (8003da0 <stabilizationInit+0x5e0>)
 8003cc6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
	rStabConstants[STAB_PITCH].pid.pGain = 25;
 8003cca:	4b19      	ldr	r3, [pc, #100]	; (8003d30 <stabilizationInit+0x570>)
 8003ccc:	4a26      	ldr	r2, [pc, #152]	; (8003d68 <stabilizationInit+0x5a8>)
 8003cce:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	rStabConstants[STAB_PITCH].pid.iGain = 60;
 8003cd2:	4b17      	ldr	r3, [pc, #92]	; (8003d30 <stabilizationInit+0x570>)
 8003cd4:	4a33      	ldr	r2, [pc, #204]	; (8003da4 <stabilizationInit+0x5e4>)
 8003cd6:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	rStabConstants[STAB_PITCH].pid.iMax = 50;
 8003cda:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <stabilizationInit+0x570>)
 8003cdc:	4a32      	ldr	r2, [pc, #200]	; (8003da8 <stabilizationInit+0x5e8>)
 8003cde:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	rStabConstants[STAB_PITCH].pid.iMin = -50;
 8003ce2:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <stabilizationInit+0x570>)
 8003ce4:	4a31      	ldr	r2, [pc, #196]	; (8003dac <stabilizationInit+0x5ec>)
 8003ce6:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	rStabConstants[STAB_PITCH].pThrustersMax = 32000;
 8003cea:	4b11      	ldr	r3, [pc, #68]	; (8003d30 <stabilizationInit+0x570>)
 8003cec:	4a23      	ldr	r2, [pc, #140]	; (8003d7c <stabilizationInit+0x5bc>)
 8003cee:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	rStabConstants[STAB_PITCH].pThrustersMin = -32000;
 8003cf2:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <stabilizationInit+0x570>)
 8003cf4:	4a22      	ldr	r2, [pc, #136]	; (8003d80 <stabilizationInit+0x5c0>)
 8003cf6:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	rStabConstants[STAB_PITCH].sOutSummatorMax = 32000;
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <stabilizationInit+0x570>)
 8003cfc:	4a1f      	ldr	r2, [pc, #124]	; (8003d7c <stabilizationInit+0x5bc>)
 8003cfe:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	rStabConstants[STAB_PITCH].sOutSummatorMin = -32000;
 8003d02:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <stabilizationInit+0x570>)
 8003d04:	4a1e      	ldr	r2, [pc, #120]	; (8003d80 <stabilizationInit+0x5c0>)
 8003d06:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    rStabConstants[STAB_PITCH].joyIntegration = false;
 8003d0a:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <stabilizationInit+0x570>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169


}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20001e60 	.word	0x20001e60
 8003d24:	20001c68 	.word	0x20001c68
 8003d28:	20001c0c 	.word	0x20001c0c
 8003d2c:	20001bf0 	.word	0x20001bf0
 8003d30:	20001cb0 	.word	0x20001cb0
 8003d34:	20001c6c 	.word	0x20001c6c
 8003d38:	20001c10 	.word	0x20001c10
 8003d3c:	20001bf4 	.word	0x20001bf4
 8003d40:	20001c60 	.word	0x20001c60
 8003d44:	20001c48 	.word	0x20001c48
 8003d48:	20001c40 	.word	0x20001c40
 8003d4c:	20001c5c 	.word	0x20001c5c
 8003d50:	20001f20 	.word	0x20001f20
 8003d54:	20001b28 	.word	0x20001b28
 8003d58:	20001c58 	.word	0x20001c58
 8003d5c:	20001ec8 	.word	0x20001ec8
 8003d60:	428c0000 	.word	0x428c0000
 8003d64:	42f00000 	.word	0x42f00000
 8003d68:	41c80000 	.word	0x41c80000
 8003d6c:	453b8000 	.word	0x453b8000
 8003d70:	c53b8000 	.word	0xc53b8000
 8003d74:	469c4000 	.word	0x469c4000
 8003d78:	c69c4000 	.word	0xc69c4000
 8003d7c:	46fa0000 	.word	0x46fa0000
 8003d80:	c6fa0000 	.word	0xc6fa0000
 8003d84:	bf800000 	.word	0xbf800000
 8003d88:	42a00000 	.word	0x42a00000
 8003d8c:	c1700000 	.word	0xc1700000
 8003d90:	41f00000 	.word	0x41f00000
 8003d94:	40a00000 	.word	0x40a00000
 8003d98:	42200000 	.word	0x42200000
 8003d9c:	c2200000 	.word	0xc2200000
 8003da0:	c2c80000 	.word	0xc2c80000
 8003da4:	42700000 	.word	0x42700000
 8003da8:	42480000 	.word	0x42480000
 8003dac:	c2480000 	.word	0xc2480000

08003db0 <stabilizationStart>:

void stabilizationStart(uint8_t contour)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	71fb      	strb	r3, [r7, #7]
	rStabConstants[contour].enable = true;
 8003dba:	79fa      	ldrb	r2, [r7, #7]
 8003dbc:	4970      	ldr	r1, [pc, #448]	; (8003f80 <stabilizationStart+0x1d0>)
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	440b      	add	r3, r1
 8003dc8:	2201      	movs	r2, #1
 8003dca:	701a      	strb	r2, [r3, #0]

	rStabState[contour].oldSpeed = *rStabState[contour].speedSignal;
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	4a6d      	ldr	r2, [pc, #436]	; (8003f84 <stabilizationStart+0x1d4>)
 8003dd0:	2158      	movs	r1, #88	; 0x58
 8003dd2:	fb01 f303 	mul.w	r3, r1, r3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3304      	adds	r3, #4
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	79fb      	ldrb	r3, [r7, #7]
 8003dde:	6812      	ldr	r2, [r2, #0]
 8003de0:	4968      	ldr	r1, [pc, #416]	; (8003f84 <stabilizationStart+0x1d4>)
 8003de2:	2058      	movs	r0, #88	; 0x58
 8003de4:	fb00 f303 	mul.w	r3, r0, r3
 8003de8:	440b      	add	r3, r1
 8003dea:	3314      	adds	r3, #20
 8003dec:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPos = *rStabState[contour].posSignal;
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	4a64      	ldr	r2, [pc, #400]	; (8003f84 <stabilizationStart+0x1d4>)
 8003df2:	2158      	movs	r1, #88	; 0x58
 8003df4:	fb01 f303 	mul.w	r3, r1, r3
 8003df8:	4413      	add	r3, r2
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	6812      	ldr	r2, [r2, #0]
 8003e02:	4960      	ldr	r1, [pc, #384]	; (8003f84 <stabilizationStart+0x1d4>)
 8003e04:	2058      	movs	r0, #88	; 0x58
 8003e06:	fb00 f303 	mul.w	r3, r0, r3
 8003e0a:	440b      	add	r3, r1
 8003e0c:	3318      	adds	r3, #24
 8003e0e:	601a      	str	r2, [r3, #0]
	rStabState[contour].posDerivative = 0;
 8003e10:	79fb      	ldrb	r3, [r7, #7]
 8003e12:	4a5c      	ldr	r2, [pc, #368]	; (8003f84 <stabilizationStart+0x1d4>)
 8003e14:	2158      	movs	r1, #88	; 0x58
 8003e16:	fb01 f303 	mul.w	r3, r1, r3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	3310      	adds	r3, #16
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
	//rStabState[contour].speedIntegral = 0;
if(contour==STAB_YAW)
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	2b03      	cmp	r3, #3
 8003e28:	d103      	bne.n	8003e32 <stabilizationStart+0x82>
{
	rSensors.yaw =0;
 8003e2a:	4b57      	ldr	r3, [pc, #348]	; (8003f88 <stabilizationStart+0x1d8>)
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	609a      	str	r2, [r3, #8]
}
	rStabState[contour].joyUnitCasted = 0;
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	4a53      	ldr	r2, [pc, #332]	; (8003f84 <stabilizationStart+0x1d4>)
 8003e36:	2158      	movs	r1, #88	; 0x58
 8003e38:	fb01 f303 	mul.w	r3, r1, r3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	331c      	adds	r3, #28
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
	rStabState[contour].joy_iValue = *rStabState[contour].posSignal;
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	4a4e      	ldr	r2, [pc, #312]	; (8003f84 <stabilizationStart+0x1d4>)
 8003e4a:	2158      	movs	r1, #88	; 0x58
 8003e4c:	fb01 f303 	mul.w	r3, r1, r3
 8003e50:	4413      	add	r3, r2
 8003e52:	3308      	adds	r3, #8
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	6812      	ldr	r2, [r2, #0]
 8003e5a:	494a      	ldr	r1, [pc, #296]	; (8003f84 <stabilizationStart+0x1d4>)
 8003e5c:	2058      	movs	r0, #88	; 0x58
 8003e5e:	fb00 f303 	mul.w	r3, r0, r3
 8003e62:	440b      	add	r3, r1
 8003e64:	3320      	adds	r3, #32
 8003e66:	601a      	str	r2, [r3, #0]
	rStabState[contour].posError = 0;
 8003e68:	79fb      	ldrb	r3, [r7, #7]
 8003e6a:	4a46      	ldr	r2, [pc, #280]	; (8003f84 <stabilizationStart+0x1d4>)
 8003e6c:	2158      	movs	r1, #88	; 0x58
 8003e6e:	fb01 f303 	mul.w	r3, r1, r3
 8003e72:	4413      	add	r3, r2
 8003e74:	3324      	adds	r3, #36	; 0x24
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedError = 0;
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	4a41      	ldr	r2, [pc, #260]	; (8003f84 <stabilizationStart+0x1d4>)
 8003e80:	2158      	movs	r1, #88	; 0x58
 8003e82:	fb01 f303 	mul.w	r3, r1, r3
 8003e86:	4413      	add	r3, r2
 8003e88:	3328      	adds	r3, #40	; 0x28
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
	rStabState[contour].dynSummator = 0;
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	4a3c      	ldr	r2, [pc, #240]	; (8003f84 <stabilizationStart+0x1d4>)
 8003e94:	2158      	movs	r1, #88	; 0x58
 8003e96:	fb01 f303 	mul.w	r3, r1, r3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	332c      	adds	r3, #44	; 0x2c
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
	rStabState[contour].pidValue = 0;
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	4a37      	ldr	r2, [pc, #220]	; (8003f84 <stabilizationStart+0x1d4>)
 8003ea8:	2158      	movs	r1, #88	; 0x58
 8003eaa:	fb01 f303 	mul.w	r3, r1, r3
 8003eae:	4413      	add	r3, r2
 8003eb0:	3330      	adds	r3, #48	; 0x30
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
	rStabState[contour].pid_iValue = 0;
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	4a32      	ldr	r2, [pc, #200]	; (8003f84 <stabilizationStart+0x1d4>)
 8003ebc:	2158      	movs	r1, #88	; 0x58
 8003ebe:	fb01 f303 	mul.w	r3, r1, r3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3334      	adds	r3, #52	; 0x34
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
	rStabState[contour].posErrorAmp = 0;
 8003ecc:	79fb      	ldrb	r3, [r7, #7]
 8003ece:	4a2d      	ldr	r2, [pc, #180]	; (8003f84 <stabilizationStart+0x1d4>)
 8003ed0:	2158      	movs	r1, #88	; 0x58
 8003ed2:	fb01 f303 	mul.w	r3, r1, r3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	3338      	adds	r3, #56	; 0x38
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedFiltered = 0;
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	4a28      	ldr	r2, [pc, #160]	; (8003f84 <stabilizationStart+0x1d4>)
 8003ee4:	2158      	movs	r1, #88	; 0x58
 8003ee6:	fb01 f303 	mul.w	r3, r1, r3
 8003eea:	4413      	add	r3, r2
 8003eec:	333c      	adds	r3, #60	; 0x3c
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
	rStabState[contour].posFiltered = 0;
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	4a23      	ldr	r2, [pc, #140]	; (8003f84 <stabilizationStart+0x1d4>)
 8003ef8:	2158      	movs	r1, #88	; 0x58
 8003efa:	fb01 f303 	mul.w	r3, r1, r3
 8003efe:	4413      	add	r3, r2
 8003f00:	3340      	adds	r3, #64	; 0x40
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPosFiltered = 0;
 8003f08:	79fb      	ldrb	r3, [r7, #7]
 8003f0a:	4a1e      	ldr	r2, [pc, #120]	; (8003f84 <stabilizationStart+0x1d4>)
 8003f0c:	2158      	movs	r1, #88	; 0x58
 8003f0e:	fb01 f303 	mul.w	r3, r1, r3
 8003f12:	4413      	add	r3, r2
 8003f14:	3344      	adds	r3, #68	; 0x44
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldSpeedError = 0;
 8003f1c:	79fb      	ldrb	r3, [r7, #7]
 8003f1e:	4a19      	ldr	r2, [pc, #100]	; (8003f84 <stabilizationStart+0x1d4>)
 8003f20:	2158      	movs	r1, #88	; 0x58
 8003f22:	fb01 f303 	mul.w	r3, r1, r3
 8003f26:	4413      	add	r3, r2
 8003f28:	3348      	adds	r3, #72	; 0x48
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
	rStabState[contour].thrustersFiltered = 0;
 8003f30:	79fb      	ldrb	r3, [r7, #7]
 8003f32:	4a14      	ldr	r2, [pc, #80]	; (8003f84 <stabilizationStart+0x1d4>)
 8003f34:	2158      	movs	r1, #88	; 0x58
 8003f36:	fb01 f303 	mul.w	r3, r1, r3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	334c      	adds	r3, #76	; 0x4c
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
	rStabState[contour].outputSignal = 0;
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	4a0f      	ldr	r2, [pc, #60]	; (8003f84 <stabilizationStart+0x1d4>)
 8003f48:	2158      	movs	r1, #88	; 0x58
 8003f4a:	fb01 f303 	mul.w	r3, r1, r3
 8003f4e:	4413      	add	r3, r2
 8003f50:	3350      	adds	r3, #80	; 0x50
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
	rStabState[contour].LastTick = xTaskGetTickCount();
 8003f58:	f006 fc6c 	bl	800a834 <xTaskGetTickCount>
 8003f5c:	ee07 0a90 	vmov	s15, r0
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f66:	4a07      	ldr	r2, [pc, #28]	; (8003f84 <stabilizationStart+0x1d4>)
 8003f68:	2158      	movs	r1, #88	; 0x58
 8003f6a:	fb01 f303 	mul.w	r3, r1, r3
 8003f6e:	4413      	add	r3, r2
 8003f70:	3354      	adds	r3, #84	; 0x54
 8003f72:	edc3 7a00 	vstr	s15, [r3]
}
 8003f76:	bf00      	nop
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20001cb0 	.word	0x20001cb0
 8003f84:	20001e60 	.word	0x20001e60
 8003f88:	20001bec 	.word	0x20001bec

08003f8c <stabilizationUpdate>:

void stabilizationUpdate(uint8_t contour)
{
 8003f8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f90:	b086      	sub	sp, #24
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	4603      	mov	r3, r0
 8003f96:	71fb      	strb	r3, [r7, #7]
	struct robotStabilizationConstants_s *constants = &rStabConstants[contour];
 8003f98:	79fa      	ldrb	r2, [r7, #7]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4aa6      	ldr	r2, [pc, #664]	; (800423c <stabilizationUpdate+0x2b0>)
 8003fa4:	4413      	add	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]
	struct robotStabilizationState_s *state = &rStabState[contour];
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	2258      	movs	r2, #88	; 0x58
 8003fac:	fb02 f303 	mul.w	r3, r2, r3
 8003fb0:	4aa3      	ldr	r2, [pc, #652]	; (8004240 <stabilizationUpdate+0x2b4>)
 8003fb2:	4413      	add	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
	float diffTime = fromTickToMs(xTaskGetTickCount() - state->LastTick) / 1000.0f;
 8003fb6:	f006 fc3d 	bl	800a834 <xTaskGetTickCount>
 8003fba:	ee07 0a90 	vmov	s15, r0
 8003fbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003fc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fd0:	ee17 0a90 	vmov	r0, s15
 8003fd4:	f7fc ff4c 	bl	8000e70 <fromTickToMs>
 8003fd8:	eeb0 7a40 	vmov.f32	s14, s0
 8003fdc:	eddf 6a99 	vldr	s13, [pc, #612]	; 8004244 <stabilizationUpdate+0x2b8>
 8003fe0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fe4:	edc7 7a03 	vstr	s15, [r7, #12]
	state->LastTick = xTaskGetTickCount();
 8003fe8:	f006 fc24 	bl	800a834 <xTaskGetTickCount>
 8003fec:	ee07 0a90 	vmov	s15, r0
 8003ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	// Speed feedback filtering
	struct AperiodicFilter *filter = &constants->aFilter[SPEED_FILTER];
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	3318      	adds	r3, #24
 8003ffe:	60bb      	str	r3, [r7, #8]

	if(filter->T != 0) {
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	edd3 7a00 	vldr	s15, [r3]
 8004006:	eef5 7a40 	vcmp.f32	s15, #0.0
 800400a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400e:	d02b      	beq.n	8004068 <stabilizationUpdate+0xdc>
		//state->speedFiltered = state->speedFiltered*exp(-diffTime/filter->T/1e5) + state->oldSpeed*filter->K*80*(1-exp(-diffTime/filter->T/1e5));
		state->speedFiltered = state->oldSpeed + diffTime * (1/filter->T*100) * (*state->speedSignal * filter->K*70 - state->oldSpeed);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	ed93 7a05 	vldr	s14, [r3, #20]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	edd3 6a00 	vldr	s13, [r3]
 800401c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004020:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004024:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8004254 <stabilizationUpdate+0x2c8>
 8004028:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800402c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004030:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	ed93 6a00 	vldr	s12, [r3]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004042:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004046:	ed9f 6a80 	vldr	s12, [pc, #512]	; 8004248 <stabilizationUpdate+0x2bc>
 800404a:	ee27 6a86 	vmul.f32	s12, s15, s12
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	edd3 7a05 	vldr	s15, [r3, #20]
 8004054:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800405c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8004066:	e023      	b.n	80040b0 <stabilizationUpdate+0x124>
	}
	else {
		if(contour==STAB_PITCH)
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	2b05      	cmp	r3, #5
 800406c:	d110      	bne.n	8004090 <stabilizationUpdate+0x104>
		{
			state->speedFiltered = *state->speedSignal*filter->K*250;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	ed93 7a00 	vldr	s14, [r3]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	edd3 7a01 	vldr	s15, [r3, #4]
 800407c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004080:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800424c <stabilizationUpdate+0x2c0>
 8004084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 800408e:	e00f      	b.n	80040b0 <stabilizationUpdate+0x124>
		}
		else
		state->speedFiltered = *state->speedSignal*filter->K*10;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	ed93 7a00 	vldr	s14, [r3]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	edd3 7a01 	vldr	s15, [r3, #4]
 800409e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	//state->oldSpeed = *state->speedSignal;
	state->oldSpeed = state->speedFiltered;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	615a      	str	r2, [r3, #20]

	// Position feedback filtering
	filter = &constants->aFilter[POS_FILTER];
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	3310      	adds	r3, #16
 80040bc:	60bb      	str	r3, [r7, #8]
	if(filter->T != 0) {
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	edd3 7a00 	vldr	s15, [r3]
 80040c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80040c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040cc:	d061      	beq.n	8004192 <stabilizationUpdate+0x206>
		state->posFiltered = state->posFiltered*exp(-diffTime/filter->T) + state->oldPos*filter->K*(1-exp(-diffTime/filter->T));
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fc f9e0 	bl	8000498 <__aeabi_f2d>
 80040d8:	4604      	mov	r4, r0
 80040da:	460d      	mov	r5, r1
 80040dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80040e0:	eeb1 7a67 	vneg.f32	s14, s15
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	edd3 7a00 	vldr	s15, [r3]
 80040ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80040ee:	ee16 0a90 	vmov	r0, s13
 80040f2:	f7fc f9d1 	bl	8000498 <__aeabi_f2d>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	ec43 2b10 	vmov	d0, r2, r3
 80040fe:	f008 fa13 	bl	800c528 <exp>
 8004102:	ec53 2b10 	vmov	r2, r3, d0
 8004106:	4620      	mov	r0, r4
 8004108:	4629      	mov	r1, r5
 800410a:	f7fc fa1d 	bl	8000548 <__aeabi_dmul>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4690      	mov	r8, r2
 8004114:	4699      	mov	r9, r3
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	ed93 7a06 	vldr	s14, [r3, #24]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004126:	ee17 0a90 	vmov	r0, s15
 800412a:	f7fc f9b5 	bl	8000498 <__aeabi_f2d>
 800412e:	4604      	mov	r4, r0
 8004130:	460d      	mov	r5, r1
 8004132:	edd7 7a03 	vldr	s15, [r7, #12]
 8004136:	eeb1 7a67 	vneg.f32	s14, s15
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	edd3 7a00 	vldr	s15, [r3]
 8004140:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004144:	ee16 0a90 	vmov	r0, s13
 8004148:	f7fc f9a6 	bl	8000498 <__aeabi_f2d>
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	ec43 2b10 	vmov	d0, r2, r3
 8004154:	f008 f9e8 	bl	800c528 <exp>
 8004158:	ec53 2b10 	vmov	r2, r3, d0
 800415c:	f04f 0000 	mov.w	r0, #0
 8004160:	493b      	ldr	r1, [pc, #236]	; (8004250 <stabilizationUpdate+0x2c4>)
 8004162:	f7fc f839 	bl	80001d8 <__aeabi_dsub>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4620      	mov	r0, r4
 800416c:	4629      	mov	r1, r5
 800416e:	f7fc f9eb 	bl	8000548 <__aeabi_dmul>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4640      	mov	r0, r8
 8004178:	4649      	mov	r1, r9
 800417a:	f7fc f82f 	bl	80001dc <__adddf3>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4610      	mov	r0, r2
 8004184:	4619      	mov	r1, r3
 8004186:	f7fc fca1 	bl	8000acc <__aeabi_d2f>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	641a      	str	r2, [r3, #64]	; 0x40
 8004190:	e00b      	b.n	80041aa <stabilizationUpdate+0x21e>
	}
	else {
		state->posFiltered = *state->posSignal*filter->K;
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	ed93 7a00 	vldr	s14, [r3]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	edd3 7a01 	vldr	s15, [r3, #4]
 80041a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	}
	state->oldPos = *state->posSignal;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	619a      	str	r2, [r3, #24]

	// Speed integration calculation
	state->speedIntegral += (*state->speedSignal * diffTime);
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	ed93 7a03 	vldr	s14, [r3, #12]
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	edd3 6a00 	vldr	s13, [r3]
 80041c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80041c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	edc3 7a03 	vstr	s15, [r3, #12]

    // Position derivative calculation
    state->posDerivative = (state->posFiltered - state->oldPosFiltered) / diffTime;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80041e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80041e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80041e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	edc3 7a04 	vstr	s15, [r3, #16]
    state->oldPosFiltered = state->posFiltered;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	645a      	str	r2, [r3, #68]	; 0x44

	// Input signal unit cast
	state->joyUnitCasted = constants->pJoyUnitCast * *state->inputSignal;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	edd3 7a00 	vldr	s15, [r3]
 8004208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	edc3 7a07 	vstr	s15, [r3, #28]

    // Casted input signal integration
	if(constants->joyIntegration) {
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	785b      	ldrb	r3, [r3, #1]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d01e      	beq.n	8004258 <stabilizationUpdate+0x2cc>
		state->joy_iValue += state->joyUnitCasted * diffTime;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	ed93 7a08 	vldr	s14, [r3, #32]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	edd3 6a07 	vldr	s13, [r3, #28]
 8004226:	edd7 7a03 	vldr	s15, [r7, #12]
 800422a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800422e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	edc3 7a08 	vstr	s15, [r3, #32]
 8004238:	e012      	b.n	8004260 <stabilizationUpdate+0x2d4>
 800423a:	bf00      	nop
 800423c:	20001cb0 	.word	0x20001cb0
 8004240:	20001e60 	.word	0x20001e60
 8004244:	447a0000 	.word	0x447a0000
 8004248:	428c0000 	.word	0x428c0000
 800424c:	437a0000 	.word	0x437a0000
 8004250:	3ff00000 	.word	0x3ff00000
 8004254:	42c80000 	.word	0x42c80000
	}
	else {
		state->joy_iValue = state->joyUnitCasted;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	69da      	ldr	r2, [r3, #28]
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	621a      	str	r2, [r3, #32]
	}

    // Position feedback summator
    state->posError = state->joy_iValue - state->posFiltered;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	ed93 7a08 	vldr	s14, [r3, #32]
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800426c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Feedback amplifiers
    state->posErrorAmp = state->posError * constants->pErrGain;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    // PI integration
    state->pid_iValue += (state->posErrorAmp * diffTime) * constants->pid.iGain;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8004298:	edd7 7a03 	vldr	s15, [r7, #12]
 800429c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80042a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // PI integration saturation
    if(state->pid_iValue > constants->pid.iMax*100) {
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80042c0:	ed5f 6a1c 	vldr	s13, [pc, #-112]	; 8004254 <stabilizationUpdate+0x2c8>
 80042c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80042c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d0:	dd0a      	ble.n	80042e8 <stabilizationUpdate+0x35c>
    	state->pid_iValue = constants->pid.iMax*100;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80042d8:	ed1f 7a22 	vldr	s14, [pc, #-136]	; 8004254 <stabilizationUpdate+0x2c8>
 80042dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 80042e6:	e018      	b.n	800431a <stabilizationUpdate+0x38e>
    }
    else if(state->pid_iValue < constants->pid.iMin*100) {
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80042f4:	ed5f 6a29 	vldr	s13, [pc, #-164]	; 8004254 <stabilizationUpdate+0x2c8>
 80042f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80042fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004304:	d509      	bpl.n	800431a <stabilizationUpdate+0x38e>
    	state->pid_iValue = constants->pid.iMin*100;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800430c:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 8004254 <stabilizationUpdate+0x2c8>
 8004310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    }

    // PI summator
    state->pidValue =  state->pid_iValue + (state->posErrorAmp * constants->pid.pGain);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800432c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004330:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    // Dynamic summator
    state->dynSummator = state->pidValue + *state->inputSignal * constants->pSpeedDyn;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	edd3 6a00 	vldr	s13, [r3]
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	edd3 7a02 	vldr	s15, [r3, #8]
 800434e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004352:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    // Speed feedback
    state->speedError = state->dynSummator - state->speedFiltered;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    // Out filtering
    filter = &constants->aFilter[THRUSTERS_FILTER];
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	3320      	adds	r3, #32
 8004376:	60bb      	str	r3, [r7, #8]
    if(filter->T != 0) {
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	edd3 7a00 	vldr	s15, [r3]
 800437e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004386:	d061      	beq.n	800444c <stabilizationUpdate+0x4c0>
    	state->thrustersFiltered = state->thrustersFiltered*exp(-diffTime/filter->T) + state->oldSpeedError*filter->K*(1-exp(-diffTime/filter->T));
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438c:	4618      	mov	r0, r3
 800438e:	f7fc f883 	bl	8000498 <__aeabi_f2d>
 8004392:	4604      	mov	r4, r0
 8004394:	460d      	mov	r5, r1
 8004396:	edd7 7a03 	vldr	s15, [r7, #12]
 800439a:	eeb1 7a67 	vneg.f32	s14, s15
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	edd3 7a00 	vldr	s15, [r3]
 80043a4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80043a8:	ee16 0a90 	vmov	r0, s13
 80043ac:	f7fc f874 	bl	8000498 <__aeabi_f2d>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	ec43 2b10 	vmov	d0, r2, r3
 80043b8:	f008 f8b6 	bl	800c528 <exp>
 80043bc:	ec53 2b10 	vmov	r2, r3, d0
 80043c0:	4620      	mov	r0, r4
 80043c2:	4629      	mov	r1, r5
 80043c4:	f7fc f8c0 	bl	8000548 <__aeabi_dmul>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4690      	mov	r8, r2
 80043ce:	4699      	mov	r9, r3
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80043dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e0:	ee17 0a90 	vmov	r0, s15
 80043e4:	f7fc f858 	bl	8000498 <__aeabi_f2d>
 80043e8:	4604      	mov	r4, r0
 80043ea:	460d      	mov	r5, r1
 80043ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80043f0:	eeb1 7a67 	vneg.f32	s14, s15
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	edd3 7a00 	vldr	s15, [r3]
 80043fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80043fe:	ee16 0a90 	vmov	r0, s13
 8004402:	f7fc f849 	bl	8000498 <__aeabi_f2d>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	ec43 2b10 	vmov	d0, r2, r3
 800440e:	f008 f88b 	bl	800c528 <exp>
 8004412:	ec53 2b10 	vmov	r2, r3, d0
 8004416:	f04f 0000 	mov.w	r0, #0
 800441a:	492a      	ldr	r1, [pc, #168]	; (80044c4 <stabilizationUpdate+0x538>)
 800441c:	f7fb fedc 	bl	80001d8 <__aeabi_dsub>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4620      	mov	r0, r4
 8004426:	4629      	mov	r1, r5
 8004428:	f7fc f88e 	bl	8000548 <__aeabi_dmul>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4640      	mov	r0, r8
 8004432:	4649      	mov	r1, r9
 8004434:	f7fb fed2 	bl	80001dc <__adddf3>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4610      	mov	r0, r2
 800443e:	4619      	mov	r1, r3
 8004440:	f7fc fb44 	bl	8000acc <__aeabi_d2f>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	64da      	str	r2, [r3, #76]	; 0x4c
 800444a:	e00a      	b.n	8004462 <stabilizationUpdate+0x4d6>
    }
    else {
    	state->thrustersFiltered = state->speedError*filter->K;
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	edd3 7a01 	vldr	s15, [r3, #4]
 8004458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    }
    state->oldSpeedError = state->speedError;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	649a      	str	r2, [r3, #72]	; 0x48

    if(state->thrustersFiltered > constants->pThrustersMax) {
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004476:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800447a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800447e:	dd04      	ble.n	800448a <stabilizationUpdate+0x4fe>
    	state->thrustersFiltered = constants->pThrustersMax;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	64da      	str	r2, [r3, #76]	; 0x4c
 8004488:	e00e      	b.n	80044a8 <stabilizationUpdate+0x51c>
    }
    else if(state->thrustersFiltered < constants->pThrustersMin) {
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004496:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800449a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800449e:	d503      	bpl.n	80044a8 <stabilizationUpdate+0x51c>
    	state->thrustersFiltered = constants->pThrustersMin;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    state->outputSignal = -1*state->speedError;
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80044ae:	eef1 7a67 	vneg.f32	s15, s15
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 80044b8:	bf00      	nop
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80044c2:	bf00      	nop
 80044c4:	3ff00000 	.word	0x3ff00000

080044c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ce:	2300      	movs	r3, #0
 80044d0:	607b      	str	r3, [r7, #4]
 80044d2:	4b12      	ldr	r3, [pc, #72]	; (800451c <HAL_MspInit+0x54>)
 80044d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d6:	4a11      	ldr	r2, [pc, #68]	; (800451c <HAL_MspInit+0x54>)
 80044d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044dc:	6453      	str	r3, [r2, #68]	; 0x44
 80044de:	4b0f      	ldr	r3, [pc, #60]	; (800451c <HAL_MspInit+0x54>)
 80044e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044e6:	607b      	str	r3, [r7, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	603b      	str	r3, [r7, #0]
 80044ee:	4b0b      	ldr	r3, [pc, #44]	; (800451c <HAL_MspInit+0x54>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	4a0a      	ldr	r2, [pc, #40]	; (800451c <HAL_MspInit+0x54>)
 80044f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f8:	6413      	str	r3, [r2, #64]	; 0x40
 80044fa:	4b08      	ldr	r3, [pc, #32]	; (800451c <HAL_MspInit+0x54>)
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004506:	2200      	movs	r2, #0
 8004508:	210f      	movs	r1, #15
 800450a:	f06f 0001 	mvn.w	r0, #1
 800450e:	f001 f819 	bl	8005544 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40023800 	.word	0x40023800

08004520 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08c      	sub	sp, #48	; 0x30
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004530:	2300      	movs	r3, #0
 8004532:	60bb      	str	r3, [r7, #8]
 8004534:	4b2e      	ldr	r3, [pc, #184]	; (80045f0 <HAL_InitTick+0xd0>)
 8004536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004538:	4a2d      	ldr	r2, [pc, #180]	; (80045f0 <HAL_InitTick+0xd0>)
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	6453      	str	r3, [r2, #68]	; 0x44
 8004540:	4b2b      	ldr	r3, [pc, #172]	; (80045f0 <HAL_InitTick+0xd0>)
 8004542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800454c:	f107 020c 	add.w	r2, r7, #12
 8004550:	f107 0310 	add.w	r3, r7, #16
 8004554:	4611      	mov	r1, r2
 8004556:	4618      	mov	r0, r3
 8004558:	f002 fe64 	bl	8007224 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800455c:	f002 fe4e 	bl	80071fc <HAL_RCC_GetPCLK2Freq>
 8004560:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	4a23      	ldr	r2, [pc, #140]	; (80045f4 <HAL_InitTick+0xd4>)
 8004566:	fba2 2303 	umull	r2, r3, r2, r3
 800456a:	0c9b      	lsrs	r3, r3, #18
 800456c:	3b01      	subs	r3, #1
 800456e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004570:	4b21      	ldr	r3, [pc, #132]	; (80045f8 <HAL_InitTick+0xd8>)
 8004572:	4a22      	ldr	r2, [pc, #136]	; (80045fc <HAL_InitTick+0xdc>)
 8004574:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004576:	4b20      	ldr	r3, [pc, #128]	; (80045f8 <HAL_InitTick+0xd8>)
 8004578:	f240 32e7 	movw	r2, #999	; 0x3e7
 800457c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800457e:	4a1e      	ldr	r2, [pc, #120]	; (80045f8 <HAL_InitTick+0xd8>)
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004584:	4b1c      	ldr	r3, [pc, #112]	; (80045f8 <HAL_InitTick+0xd8>)
 8004586:	2200      	movs	r2, #0
 8004588:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800458a:	4b1b      	ldr	r3, [pc, #108]	; (80045f8 <HAL_InitTick+0xd8>)
 800458c:	2200      	movs	r2, #0
 800458e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004590:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <HAL_InitTick+0xd8>)
 8004592:	2200      	movs	r2, #0
 8004594:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8004596:	4818      	ldr	r0, [pc, #96]	; (80045f8 <HAL_InitTick+0xd8>)
 8004598:	f002 fe76 	bl	8007288 <HAL_TIM_Base_Init>
 800459c:	4603      	mov	r3, r0
 800459e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80045a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d11b      	bne.n	80045e2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80045aa:	4813      	ldr	r0, [pc, #76]	; (80045f8 <HAL_InitTick+0xd8>)
 80045ac:	f002 febc 	bl	8007328 <HAL_TIM_Base_Start_IT>
 80045b0:	4603      	mov	r3, r0
 80045b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80045b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d111      	bne.n	80045e2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80045be:	2019      	movs	r0, #25
 80045c0:	f000 ffdc 	bl	800557c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b0f      	cmp	r3, #15
 80045c8:	d808      	bhi.n	80045dc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80045ca:	2200      	movs	r2, #0
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	2019      	movs	r0, #25
 80045d0:	f000 ffb8 	bl	8005544 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80045d4:	4a0a      	ldr	r2, [pc, #40]	; (8004600 <HAL_InitTick+0xe0>)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	e002      	b.n	80045e2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80045e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3730      	adds	r7, #48	; 0x30
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40023800 	.word	0x40023800
 80045f4:	431bde83 	.word	0x431bde83
 80045f8:	2000224c 	.word	0x2000224c
 80045fc:	40010000 	.word	0x40010000
 8004600:	20000118 	.word	0x20000118

08004604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004608:	e7fe      	b.n	8004608 <NMI_Handler+0x4>

0800460a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800460a:	b480      	push	{r7}
 800460c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800460e:	e7fe      	b.n	800460e <HardFault_Handler+0x4>

08004610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004614:	e7fe      	b.n	8004614 <MemManage_Handler+0x4>

08004616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004616:	b480      	push	{r7}
 8004618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800461a:	e7fe      	b.n	800461a <BusFault_Handler+0x4>

0800461c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004620:	e7fe      	b.n	8004620 <UsageFault_Handler+0x4>

08004622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004622:	b480      	push	{r7}
 8004624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004626:	bf00      	nop
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004634:	4802      	ldr	r0, [pc, #8]	; (8004640 <DMA1_Stream1_IRQHandler+0x10>)
 8004636:	f001 f947 	bl	80058c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800463a:	bf00      	nop
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	2000256c 	.word	0x2000256c

08004644 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004648:	4802      	ldr	r0, [pc, #8]	; (8004654 <DMA1_Stream3_IRQHandler+0x10>)
 800464a:	f001 f93d 	bl	80058c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800464e:	bf00      	nop
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	200025cc 	.word	0x200025cc

08004658 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800465c:	4802      	ldr	r0, [pc, #8]	; (8004668 <DMA1_Stream5_IRQHandler+0x10>)
 800465e:	f001 f933 	bl	80058c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004662:	bf00      	nop
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	200024ac 	.word	0x200024ac

0800466c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004670:	4802      	ldr	r0, [pc, #8]	; (800467c <DMA1_Stream6_IRQHandler+0x10>)
 8004672:	f001 f929 	bl	80058c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004676:	bf00      	nop
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	2000250c 	.word	0x2000250c

08004680 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004684:	4802      	ldr	r0, [pc, #8]	; (8004690 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004686:	f002 febf 	bl	8007408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800468a:	bf00      	nop
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	2000224c 	.word	0x2000224c

08004694 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004698:	4802      	ldr	r0, [pc, #8]	; (80046a4 <USART1_IRQHandler+0x10>)
 800469a:	f003 fbab 	bl	8007df4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800469e:	bf00      	nop
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20002320 	.word	0x20002320

080046a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80046ac:	4802      	ldr	r0, [pc, #8]	; (80046b8 <USART2_IRQHandler+0x10>)
 80046ae:	f003 fba1 	bl	8007df4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80046b2:	bf00      	nop
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20002364 	.word	0x20002364

080046bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80046c0:	4802      	ldr	r0, [pc, #8]	; (80046cc <USART3_IRQHandler+0x10>)
 80046c2:	f003 fb97 	bl	8007df4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80046c6:	bf00      	nop
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	200023a8 	.word	0x200023a8

080046d0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80046d4:	4802      	ldr	r0, [pc, #8]	; (80046e0 <DMA2_Stream2_IRQHandler+0x10>)
 80046d6:	f001 f8f7 	bl	80058c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80046da:	bf00      	nop
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	200023ec 	.word	0x200023ec

080046e4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80046e8:	4802      	ldr	r0, [pc, #8]	; (80046f4 <DMA2_Stream7_IRQHandler+0x10>)
 80046ea:	f001 f8ed 	bl	80058c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80046ee:	bf00      	nop
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	2000244c 	.word	0x2000244c

080046f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046fc:	4b06      	ldr	r3, [pc, #24]	; (8004718 <SystemInit+0x20>)
 80046fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004702:	4a05      	ldr	r2, [pc, #20]	; (8004718 <SystemInit+0x20>)
 8004704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800470c:	bf00      	nop
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	e000ed00 	.word	0xe000ed00

0800471c <thrustersInit>:
    {0.2041149, 0.25000000, -0.35350677, 1.00000000, 0.00618065, 1.0000000, 1.00000000},
    {0.20411496, -0.25000000, -0.3535067, -1.0000000, -0.0061806, -1.00000000,  1.00000000}
};

void thrustersInit()
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
   //Numarate by LOVE
  rThrusters[FDR].address = 1; //Forward Down Right
 8004722:	4b31      	ldr	r3, [pc, #196]	; (80047e8 <thrustersInit+0xcc>)
 8004724:	2201      	movs	r2, #1
 8004726:	701a      	strb	r2, [r3, #0]
  rThrusters[FDL].address = 2; //Forward Down Left
 8004728:	4b2f      	ldr	r3, [pc, #188]	; (80047e8 <thrustersInit+0xcc>)
 800472a:	2202      	movs	r2, #2
 800472c:	761a      	strb	r2, [r3, #24]
  rThrusters[BDR].address = 3; //Back Down Right
 800472e:	4b2e      	ldr	r3, [pc, #184]	; (80047e8 <thrustersInit+0xcc>)
 8004730:	2203      	movs	r2, #3
 8004732:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  rThrusters[BDL].address = 4; //Back Down Left
 8004736:	4b2c      	ldr	r3, [pc, #176]	; (80047e8 <thrustersInit+0xcc>)
 8004738:	2204      	movs	r2, #4
 800473a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  rThrusters[FUR].address = 5; //Forward Up Right
 800473e:	4b2a      	ldr	r3, [pc, #168]	; (80047e8 <thrustersInit+0xcc>)
 8004740:	2205      	movs	r2, #5
 8004742:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  rThrusters[FUL].address = 6; //Forward Up Left
 8004746:	4b28      	ldr	r3, [pc, #160]	; (80047e8 <thrustersInit+0xcc>)
 8004748:	2206      	movs	r2, #6
 800474a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  rThrusters[BUR].address = 7; //Back Up Right
 800474e:	4b26      	ldr	r3, [pc, #152]	; (80047e8 <thrustersInit+0xcc>)
 8004750:	2207      	movs	r2, #7
 8004752:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
  rThrusters[BUL].address = 8; //Back Up Left
 8004756:	4b24      	ldr	r3, [pc, #144]	; (80047e8 <thrustersInit+0xcc>)
 8004758:	2208      	movs	r2, #8
 800475a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 800475e:	2300      	movs	r3, #0
 8004760:	71fb      	strb	r3, [r7, #7]
 8004762:	e036      	b.n	80047d2 <thrustersInit+0xb6>
    rThrusters[i].desiredSpeed = 0;
 8004764:	79fa      	ldrb	r2, [r7, #7]
 8004766:	4920      	ldr	r1, [pc, #128]	; (80047e8 <thrustersInit+0xcc>)
 8004768:	4613      	mov	r3, r2
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	4413      	add	r3, r2
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	440b      	add	r3, r1
 8004772:	3302      	adds	r3, #2
 8004774:	2200      	movs	r2, #0
 8004776:	701a      	strb	r2, [r3, #0]
    rThrusters[i].kForward = 1;
 8004778:	79fa      	ldrb	r2, [r7, #7]
 800477a:	491b      	ldr	r1, [pc, #108]	; (80047e8 <thrustersInit+0xcc>)
 800477c:	4613      	mov	r3, r2
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	4413      	add	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	440b      	add	r3, r1
 8004786:	330c      	adds	r3, #12
 8004788:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800478c:	601a      	str	r2, [r3, #0]
    rThrusters[i].kBackward =1;
 800478e:	79fa      	ldrb	r2, [r7, #7]
 8004790:	4915      	ldr	r1, [pc, #84]	; (80047e8 <thrustersInit+0xcc>)
 8004792:	4613      	mov	r3, r2
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	4413      	add	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	440b      	add	r3, r1
 800479c:	3310      	adds	r3, #16
 800479e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047a2:	601a      	str	r2, [r3, #0]
    rThrusters[i].sForward = 127;
 80047a4:	79fa      	ldrb	r2, [r7, #7]
 80047a6:	4910      	ldr	r1, [pc, #64]	; (80047e8 <thrustersInit+0xcc>)
 80047a8:	4613      	mov	r3, r2
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	4413      	add	r3, r2
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	440b      	add	r3, r1
 80047b2:	3314      	adds	r3, #20
 80047b4:	227f      	movs	r2, #127	; 0x7f
 80047b6:	701a      	strb	r2, [r3, #0]
    rThrusters[i].sBackward = 127;
 80047b8:	79fa      	ldrb	r2, [r7, #7]
 80047ba:	490b      	ldr	r1, [pc, #44]	; (80047e8 <thrustersInit+0xcc>)
 80047bc:	4613      	mov	r3, r2
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	4413      	add	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	440b      	add	r3, r1
 80047c6:	3315      	adds	r3, #21
 80047c8:	227f      	movs	r2, #127	; 0x7f
 80047ca:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80047cc:	79fb      	ldrb	r3, [r7, #7]
 80047ce:	3301      	adds	r3, #1
 80047d0:	71fb      	strb	r3, [r7, #7]
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	2b07      	cmp	r3, #7
 80047d6:	d9c5      	bls.n	8004764 <thrustersInit+0x48>
  }

}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	20001b2c 	.word	0x20001b2c

080047ec <resetThrusters>:


void resetThrusters()
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
  rJoySpeed.depth = 0;
 80047f2:	4b19      	ldr	r3, [pc, #100]	; (8004858 <resetThrusters+0x6c>)
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	609a      	str	r2, [r3, #8]
  rJoySpeed.lag = 0;
 80047fa:	4b17      	ldr	r3, [pc, #92]	; (8004858 <resetThrusters+0x6c>)
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	605a      	str	r2, [r3, #4]
  rJoySpeed.march = 0;
 8004802:	4b15      	ldr	r3, [pc, #84]	; (8004858 <resetThrusters+0x6c>)
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	601a      	str	r2, [r3, #0]
  rJoySpeed.pitch = 0;
 800480a:	4b13      	ldr	r3, [pc, #76]	; (8004858 <resetThrusters+0x6c>)
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	611a      	str	r2, [r3, #16]
  rJoySpeed.roll = 0;
 8004812:	4b11      	ldr	r3, [pc, #68]	; (8004858 <resetThrusters+0x6c>)
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	60da      	str	r2, [r3, #12]
  rJoySpeed.yaw = 0;
 800481a:	4b0f      	ldr	r3, [pc, #60]	; (8004858 <resetThrusters+0x6c>)
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	615a      	str	r2, [r3, #20]

  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8004822:	2300      	movs	r3, #0
 8004824:	71fb      	strb	r3, [r7, #7]
 8004826:	e00c      	b.n	8004842 <resetThrusters+0x56>
    rThrusters[i].desiredSpeed = 0;
 8004828:	79fa      	ldrb	r2, [r7, #7]
 800482a:	490c      	ldr	r1, [pc, #48]	; (800485c <resetThrusters+0x70>)
 800482c:	4613      	mov	r3, r2
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	4413      	add	r3, r2
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	440b      	add	r3, r1
 8004836:	3302      	adds	r3, #2
 8004838:	2200      	movs	r2, #0
 800483a:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	3301      	adds	r3, #1
 8004840:	71fb      	strb	r3, [r7, #7]
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	2b07      	cmp	r3, #7
 8004846:	d9ef      	bls.n	8004828 <resetThrusters+0x3c>
  }

}
 8004848:	bf00      	nop
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	20001c58 	.word	0x20001c58
 800485c:	20001b2c 	.word	0x20001b2c

08004860 <fillThrustersRequest>:

void fillThrustersRequest(uint8_t *buf, uint8_t thruster)
{
 8004860:	b590      	push	{r4, r7, lr}
 8004862:	b089      	sub	sp, #36	; 0x24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	70fb      	strb	r3, [r7, #3]
    struct thrustersRequest_s res;

    res.AA = 0xAA;
 800486c:	23aa      	movs	r3, #170	; 0xaa
 800486e:	733b      	strb	r3, [r7, #12]
    res.type = 0x01;
 8004870:	2301      	movs	r3, #1
 8004872:	737b      	strb	r3, [r7, #13]
    res.address = 0xAF;
 8004874:	23af      	movs	r3, #175	; 0xaf
 8004876:	73bb      	strb	r3, [r7, #14]
    for(int i=0; i<8;i++){
 8004878:	2300      	movs	r3, #0
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	e05b      	b.n	8004936 <fillThrustersRequest+0xd6>
    	int16_t velocity = rThrusters[i].desiredSpeed;
 800487e:	4938      	ldr	r1, [pc, #224]	; (8004960 <fillThrustersRequest+0x100>)
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	4613      	mov	r3, r2
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	4413      	add	r3, r2
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	440b      	add	r3, r1
 800488c:	3302      	adds	r3, #2
 800488e:	f993 3000 	ldrsb.w	r3, [r3]
 8004892:	837b      	strh	r3, [r7, #26]


    	// Inverting
    	if(rThrusters[i].inverse) {
 8004894:	4932      	ldr	r1, [pc, #200]	; (8004960 <fillThrustersRequest+0x100>)
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	4613      	mov	r3, r2
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	4413      	add	r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	440b      	add	r3, r1
 80048a2:	3316      	adds	r3, #22
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <fillThrustersRequest+0x52>
    		velocity *= -1;
 80048aa:	8b7b      	ldrh	r3, [r7, #26]
 80048ac:	425b      	negs	r3, r3
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	837b      	strh	r3, [r7, #26]
    	}

    	// Multiplier constants
    	if(velocity > 0) {
 80048b2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	dd17      	ble.n	80048ea <fillThrustersRequest+0x8a>
    		velocity = (int16_t) ( (float) (velocity) * rThrusters[i].kForward);
 80048ba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048c6:	4926      	ldr	r1, [pc, #152]	; (8004960 <fillThrustersRequest+0x100>)
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	4613      	mov	r3, r2
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	4413      	add	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	440b      	add	r3, r1
 80048d4:	330c      	adds	r3, #12
 80048d6:	edd3 7a00 	vldr	s15, [r3]
 80048da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048e2:	ee17 3a90 	vmov	r3, s15
 80048e6:	837b      	strh	r3, [r7, #26]
 80048e8:	e01a      	b.n	8004920 <fillThrustersRequest+0xc0>
    	}
    	else if(velocity < 0) {
 80048ea:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	da16      	bge.n	8004920 <fillThrustersRequest+0xc0>
    		velocity = (int16_t) ((float) (velocity) * rThrusters[i].kBackward);
 80048f2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048fe:	4918      	ldr	r1, [pc, #96]	; (8004960 <fillThrustersRequest+0x100>)
 8004900:	69fa      	ldr	r2, [r7, #28]
 8004902:	4613      	mov	r3, r2
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	4413      	add	r3, r2
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	440b      	add	r3, r1
 800490c:	3310      	adds	r3, #16
 800490e:	edd3 7a00 	vldr	s15, [r3]
 8004912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800491a:	ee17 3a90 	vmov	r3, s15
 800491e:	837b      	strh	r3, [r7, #26]
    	}

    	res.velocity[i] = velocity;
 8004920:	8b7b      	ldrh	r3, [r7, #26]
 8004922:	b259      	sxtb	r1, r3
 8004924:	f107 020f 	add.w	r2, r7, #15
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	4413      	add	r3, r2
 800492c:	460a      	mov	r2, r1
 800492e:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<8;i++){
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	3301      	adds	r3, #1
 8004934:	61fb      	str	r3, [r7, #28]
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	2b07      	cmp	r3, #7
 800493a:	dda0      	ble.n	800487e <fillThrustersRequest+0x1e>
    }

    memcpy((void*)buf, (void*)&res, THRUSTERS_REQUEST_LENGTH);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	461c      	mov	r4, r3
 8004940:	f107 030c 	add.w	r3, r7, #12
 8004944:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004946:	6020      	str	r0, [r4, #0]
 8004948:	6061      	str	r1, [r4, #4]
 800494a:	60a2      	str	r2, [r4, #8]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	7323      	strb	r3, [r4, #12]
    AddChecksumm8bVma(buf, THRUSTERS_REQUEST_LENGTH);
 8004950:	210d      	movs	r1, #13
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fc fba2 	bl	800109c <AddChecksumm8bVma>
}
 8004958:	bf00      	nop
 800495a:	3724      	adds	r7, #36	; 0x24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd90      	pop	{r4, r7, pc}
 8004960:	20001b2c 	.word	0x20001b2c

08004964 <fillThrustersResponse>:

void fillThrustersResponse(uint8_t *buf, uint8_t thruster)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	460b      	mov	r3, r1
 800496e:	70fb      	strb	r3, [r7, #3]
	//TODO errors parsing! and what is all this new stuff means
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 8004970:	2109      	movs	r1, #9
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fc fb65 	bl	8001042 <IsChecksumm8bCorrectVma>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d01f      	beq.n	80049be <fillThrustersResponse+0x5a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01b      	beq.n	80049be <fillThrustersResponse+0x5a>
    	struct thrustersResponse_s res;
    	memcpy((void*)&res, (void*)buf, THRUSTERS_RESPONSE_LENGTH);
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	f107 030c 	add.w	r3, r7, #12
 800498c:	6810      	ldr	r0, [r2, #0]
 800498e:	6851      	ldr	r1, [r2, #4]
 8004990:	c303      	stmia	r3!, {r0, r1}
 8004992:	7a12      	ldrb	r2, [r2, #8]
 8004994:	701a      	strb	r2, [r3, #0]

        rThrusters[thruster].current = res.current;
 8004996:	78fa      	ldrb	r2, [r7, #3]
 8004998:	8a38      	ldrh	r0, [r7, #16]
 800499a:	490e      	ldr	r1, [pc, #56]	; (80049d4 <fillThrustersResponse+0x70>)
 800499c:	4613      	mov	r3, r2
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	4413      	add	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	440b      	add	r3, r1
 80049a6:	3304      	adds	r3, #4
 80049a8:	4602      	mov	r2, r0
 80049aa:	801a      	strh	r2, [r3, #0]

        ++uartBus[THRUSTERS_UART].successRxCounter;
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <fillThrustersResponse+0x74>)
 80049ae:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80049b2:	3301      	adds	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	4b08      	ldr	r3, [pc, #32]	; (80049d8 <fillThrustersResponse+0x74>)
 80049b8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 80049bc:	e005      	b.n	80049ca <fillThrustersResponse+0x66>
    }
    else {
    	++uartBus[THRUSTERS_UART].brokenRxCounter;
 80049be:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <fillThrustersResponse+0x74>)
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	3301      	adds	r3, #1
 80049c4:	4a04      	ldr	r2, [pc, #16]	; (80049d8 <fillThrustersResponse+0x74>)
 80049c6:	6453      	str	r3, [r2, #68]	; 0x44
    }
}
 80049c8:	bf00      	nop
 80049ca:	bf00      	nop
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20001b2c 	.word	0x20001b2c
 80049d8:	200001a4 	.word	0x200001a4

080049dc <formThrustVectors>:

void formThrustVectors()
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b090      	sub	sp, #64	; 0x40
 80049e0:	af00      	add	r7, sp, #0
  float velocity[THRUSTERS_NUMBER];
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80049e2:	2300      	movs	r3, #0
 80049e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80049e8:	e00d      	b.n	8004a06 <formThrustVectors+0x2a>
    velocity[i] = 0;
 80049ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	3340      	adds	r3, #64	; 0x40
 80049f2:	443b      	add	r3, r7
 80049f4:	3b3c      	subs	r3, #60	; 0x3c
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80049fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a00:	3301      	adds	r3, #1
 8004a02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004a06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a0a:	2b07      	cmp	r3, #7
 8004a0c:	d9ed      	bls.n	80049ea <formThrustVectors+0xe>
  float Uz;
  float Ugamma;
  float Uteta;
  float Upsi;

  Ux = rStabConstants[STAB_MARCH].enable ?  rStabState[STAB_MARCH].outputSignal : rJoySpeed.march;
 8004a0e:	4b75      	ldr	r3, [pc, #468]	; (8004be4 <formThrustVectors+0x208>)
 8004a10:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <formThrustVectors+0x44>
 8004a18:	4b73      	ldr	r3, [pc, #460]	; (8004be8 <formThrustVectors+0x20c>)
 8004a1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a1e:	e001      	b.n	8004a24 <formThrustVectors+0x48>
 8004a20:	4b72      	ldr	r3, [pc, #456]	; (8004bec <formThrustVectors+0x210>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	63bb      	str	r3, [r7, #56]	; 0x38
  Uy = rStabConstants[STAB_LAG].enable ?   rStabState[STAB_LAG].outputSignal : rJoySpeed.lag;
 8004a26:	4b6f      	ldr	r3, [pc, #444]	; (8004be4 <formThrustVectors+0x208>)
 8004a28:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <formThrustVectors+0x5c>
 8004a30:	4b6d      	ldr	r3, [pc, #436]	; (8004be8 <formThrustVectors+0x20c>)
 8004a32:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004a36:	e001      	b.n	8004a3c <formThrustVectors+0x60>
 8004a38:	4b6c      	ldr	r3, [pc, #432]	; (8004bec <formThrustVectors+0x210>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	637b      	str	r3, [r7, #52]	; 0x34
  Uz = rStabConstants[STAB_DEPTH].enable ?  rStabState[STAB_DEPTH].outputSignal : rJoySpeed.depth;
 8004a3e:	4b69      	ldr	r3, [pc, #420]	; (8004be4 <formThrustVectors+0x208>)
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <formThrustVectors+0x70>
 8004a46:	4b68      	ldr	r3, [pc, #416]	; (8004be8 <formThrustVectors+0x20c>)
 8004a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a4a:	e001      	b.n	8004a50 <formThrustVectors+0x74>
 8004a4c:	4b67      	ldr	r3, [pc, #412]	; (8004bec <formThrustVectors+0x210>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	633b      	str	r3, [r7, #48]	; 0x30
  Upsi =  rStabConstants[STAB_YAW].enable ?   rStabState[STAB_YAW].outputSignal :  rJoySpeed.yaw;
 8004a52:	4b64      	ldr	r3, [pc, #400]	; (8004be4 <formThrustVectors+0x208>)
 8004a54:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <formThrustVectors+0x88>
 8004a5c:	4b62      	ldr	r3, [pc, #392]	; (8004be8 <formThrustVectors+0x20c>)
 8004a5e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8004a62:	e001      	b.n	8004a68 <formThrustVectors+0x8c>
 8004a64:	4b61      	ldr	r3, [pc, #388]	; (8004bec <formThrustVectors+0x210>)
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  Ugamma =rStabConstants[STAB_ROLL].enable ?   rStabState[STAB_ROLL].outputSignal : rJoySpeed.roll;
 8004a6a:	4b5e      	ldr	r3, [pc, #376]	; (8004be4 <formThrustVectors+0x208>)
 8004a6c:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <formThrustVectors+0xa0>
 8004a74:	4b5c      	ldr	r3, [pc, #368]	; (8004be8 <formThrustVectors+0x20c>)
 8004a76:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004a7a:	e001      	b.n	8004a80 <formThrustVectors+0xa4>
 8004a7c:	4b5b      	ldr	r3, [pc, #364]	; (8004bec <formThrustVectors+0x210>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	62bb      	str	r3, [r7, #40]	; 0x28
  Uteta = rStabConstants[STAB_PITCH].enable ?   rStabState[STAB_PITCH].outputSignal :  rJoySpeed.pitch;
 8004a82:	4b58      	ldr	r3, [pc, #352]	; (8004be4 <formThrustVectors+0x208>)
 8004a84:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <formThrustVectors+0xb8>
 8004a8c:	4b56      	ldr	r3, [pc, #344]	; (8004be8 <formThrustVectors+0x20c>)
 8004a8e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004a92:	e001      	b.n	8004a98 <formThrustVectors+0xbc>
 8004a94:	4b55      	ldr	r3, [pc, #340]	; (8004bec <formThrustVectors+0x210>)
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24

  for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i)
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8004aa0:	e095      	b.n	8004bce <formThrustVectors+0x1f2>
  {
    velocity[i] = (KVMA[i][0]*Ux + KVMA[i][1]*Uy + KVMA[i][2]*Uz
 8004aa2:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8004aa6:	4952      	ldr	r1, [pc, #328]	; (8004bf0 <formThrustVectors+0x214>)
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	1a9b      	subs	r3, r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	ed93 7a00 	vldr	s14, [r3]
 8004ab6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004aba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004abe:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8004ac2:	494b      	ldr	r1, [pc, #300]	; (8004bf0 <formThrustVectors+0x214>)
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	1a9b      	subs	r3, r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	440b      	add	r3, r1
 8004ace:	3304      	adds	r3, #4
 8004ad0:	edd3 6a00 	vldr	s13, [r3]
 8004ad4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004ad8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004adc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ae0:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8004ae4:	4942      	ldr	r1, [pc, #264]	; (8004bf0 <formThrustVectors+0x214>)
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	1a9b      	subs	r3, r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	440b      	add	r3, r1
 8004af0:	3308      	adds	r3, #8
 8004af2:	edd3 6a00 	vldr	s13, [r3]
 8004af6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004afe:	ee37 7a27 	vadd.f32	s14, s14, s15
        + KVMA[i][3]*Ugamma + KVMA[i][4]*Uteta + KVMA[i][5]*Upsi)*KVMA[i][6];
 8004b02:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8004b06:	493a      	ldr	r1, [pc, #232]	; (8004bf0 <formThrustVectors+0x214>)
 8004b08:	4613      	mov	r3, r2
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	330c      	adds	r3, #12
 8004b14:	edd3 6a00 	vldr	s13, [r3]
 8004b18:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004b1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b24:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8004b28:	4931      	ldr	r1, [pc, #196]	; (8004bf0 <formThrustVectors+0x214>)
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	440b      	add	r3, r1
 8004b34:	3310      	adds	r3, #16
 8004b36:	edd3 6a00 	vldr	s13, [r3]
 8004b3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004b3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b46:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8004b4a:	4929      	ldr	r1, [pc, #164]	; (8004bf0 <formThrustVectors+0x214>)
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	1a9b      	subs	r3, r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	3314      	adds	r3, #20
 8004b58:	edd3 6a00 	vldr	s13, [r3]
 8004b5c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b68:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8004b6c:	4920      	ldr	r1, [pc, #128]	; (8004bf0 <formThrustVectors+0x214>)
 8004b6e:	4613      	mov	r3, r2
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	1a9b      	subs	r3, r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	440b      	add	r3, r1
 8004b78:	3318      	adds	r3, #24
 8004b7a:	edd3 7a00 	vldr	s15, [r3]
    velocity[i] = (KVMA[i][0]*Ux + KVMA[i][1]*Uy + KVMA[i][2]*Uz
 8004b7e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
        + KVMA[i][3]*Ugamma + KVMA[i][4]*Uteta + KVMA[i][5]*Upsi)*KVMA[i][6];
 8004b82:	ee67 7a27 	vmul.f32	s15, s14, s15
    velocity[i] = (KVMA[i][0]*Ux + KVMA[i][1]*Uy + KVMA[i][2]*Uz
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	3340      	adds	r3, #64	; 0x40
 8004b8a:	443b      	add	r3, r7
 8004b8c:	3b3c      	subs	r3, #60	; 0x3c
 8004b8e:	edc3 7a00 	vstr	s15, [r3]
    rThrusters[i].desiredSpeed = resizeFloatToUint8(velocity[i]);
 8004b92:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	3340      	adds	r3, #64	; 0x40
 8004b9a:	443b      	add	r3, r7
 8004b9c:	3b3c      	subs	r3, #60	; 0x3c
 8004b9e:	edd3 7a00 	vldr	s15, [r3]
 8004ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ba6:	f000 f827 	bl	8004bf8 <resizeFloatToUint8>
 8004baa:	4603      	mov	r3, r0
 8004bac:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8004bb0:	b258      	sxtb	r0, r3
 8004bb2:	4910      	ldr	r1, [pc, #64]	; (8004bf4 <formThrustVectors+0x218>)
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	4413      	add	r3, r2
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	440b      	add	r3, r1
 8004bbe:	3302      	adds	r3, #2
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i)
 8004bc4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004bc8:	3301      	adds	r3, #1
 8004bca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8004bce:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004bd2:	2b07      	cmp	r3, #7
 8004bd4:	f67f af65 	bls.w	8004aa2 <formThrustVectors+0xc6>
  }

}
 8004bd8:	bf00      	nop
 8004bda:	bf00      	nop
 8004bdc:	3740      	adds	r7, #64	; 0x40
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20001cb0 	.word	0x20001cb0
 8004be8:	20001e60 	.word	0x20001e60
 8004bec:	20001c58 	.word	0x20001c58
 8004bf0:	20000038 	.word	0x20000038
 8004bf4:	20001b2c 	.word	0x20001b2c

08004bf8 <resizeFloatToUint8>:


uint8_t resizeFloatToUint8(float input)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t cast = (int32_t) input;
 8004c02:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c0a:	ee17 3a90 	vmov	r3, s15
 8004c0e:	60fb      	str	r3, [r7, #12]
  cast = cast / 0xFF;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4a0e      	ldr	r2, [pc, #56]	; (8004c4c <resizeFloatToUint8+0x54>)
 8004c14:	fb82 1203 	smull	r1, r2, r2, r3
 8004c18:	441a      	add	r2, r3
 8004c1a:	11d2      	asrs	r2, r2, #7
 8004c1c:	17db      	asrs	r3, r3, #31
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	60fb      	str	r3, [r7, #12]
  if (cast > 127) {
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2b7f      	cmp	r3, #127	; 0x7f
 8004c26:	dd02      	ble.n	8004c2e <resizeFloatToUint8+0x36>
    cast = 127;
 8004c28:	237f      	movs	r3, #127	; 0x7f
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	e006      	b.n	8004c3c <resizeFloatToUint8+0x44>
  }
  else if(cast < -127) {
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8004c34:	da02      	bge.n	8004c3c <resizeFloatToUint8+0x44>
    cast = -127;
 8004c36:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8004c3a:	60fb      	str	r3, [r7, #12]
  }
  return (int8_t) cast;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	b2db      	uxtb	r3, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	80808081 	.word	0x80808081

08004c50 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c56:	463b      	mov	r3, r7
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004c5e:	4b15      	ldr	r3, [pc, #84]	; (8004cb4 <MX_TIM7_Init+0x64>)
 8004c60:	4a15      	ldr	r2, [pc, #84]	; (8004cb8 <MX_TIM7_Init+0x68>)
 8004c62:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8004c64:	4b13      	ldr	r3, [pc, #76]	; (8004cb4 <MX_TIM7_Init+0x64>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c6a:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <MX_TIM7_Init+0x64>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8004c70:	4b10      	ldr	r3, [pc, #64]	; (8004cb4 <MX_TIM7_Init+0x64>)
 8004c72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c76:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c78:	4b0e      	ldr	r3, [pc, #56]	; (8004cb4 <MX_TIM7_Init+0x64>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004c7e:	480d      	ldr	r0, [pc, #52]	; (8004cb4 <MX_TIM7_Init+0x64>)
 8004c80:	f002 fb02 	bl	8007288 <HAL_TIM_Base_Init>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8004c8a:	f7fe fd93 	bl	80037b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c92:	2300      	movs	r3, #0
 8004c94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004c96:	463b      	mov	r3, r7
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4806      	ldr	r0, [pc, #24]	; (8004cb4 <MX_TIM7_Init+0x64>)
 8004c9c:	f002 fd84 	bl	80077a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8004ca6:	f7fe fd85 	bl	80037b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004caa:	bf00      	nop
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20002294 	.word	0x20002294
 8004cb8:	40001400 	.word	0x40001400

08004cbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a0b      	ldr	r2, [pc, #44]	; (8004cf8 <HAL_TIM_Base_MspInit+0x3c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d10d      	bne.n	8004cea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <HAL_TIM_Base_MspInit+0x40>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	4a09      	ldr	r2, [pc, #36]	; (8004cfc <HAL_TIM_Base_MspInit+0x40>)
 8004cd8:	f043 0320 	orr.w	r3, r3, #32
 8004cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8004cde:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <HAL_TIM_Base_MspInit+0x40>)
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004cea:	bf00      	nop
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40001400 	.word	0x40001400
 8004cfc:	40023800 	.word	0x40023800

08004d00 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004d04:	4b11      	ldr	r3, [pc, #68]	; (8004d4c <MX_UART4_Init+0x4c>)
 8004d06:	4a12      	ldr	r2, [pc, #72]	; (8004d50 <MX_UART4_Init+0x50>)
 8004d08:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004d0a:	4b10      	ldr	r3, [pc, #64]	; (8004d4c <MX_UART4_Init+0x4c>)
 8004d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d10:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004d12:	4b0e      	ldr	r3, [pc, #56]	; (8004d4c <MX_UART4_Init+0x4c>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004d18:	4b0c      	ldr	r3, [pc, #48]	; (8004d4c <MX_UART4_Init+0x4c>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004d1e:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <MX_UART4_Init+0x4c>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004d24:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <MX_UART4_Init+0x4c>)
 8004d26:	220c      	movs	r2, #12
 8004d28:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d2a:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <MX_UART4_Init+0x4c>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d30:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <MX_UART4_Init+0x4c>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004d36:	4805      	ldr	r0, [pc, #20]	; (8004d4c <MX_UART4_Init+0x4c>)
 8004d38:	f002 fdc6 	bl	80078c8 <HAL_UART_Init>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8004d42:	f7fe fd37 	bl	80037b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004d46:	bf00      	nop
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	200022dc 	.word	0x200022dc
 8004d50:	40004c00 	.word	0x40004c00

08004d54 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004d58:	4b11      	ldr	r3, [pc, #68]	; (8004da0 <MX_USART1_UART_Init+0x4c>)
 8004d5a:	4a12      	ldr	r2, [pc, #72]	; (8004da4 <MX_USART1_UART_Init+0x50>)
 8004d5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004d5e:	4b10      	ldr	r3, [pc, #64]	; (8004da0 <MX_USART1_UART_Init+0x4c>)
 8004d60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d66:	4b0e      	ldr	r3, [pc, #56]	; (8004da0 <MX_USART1_UART_Init+0x4c>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d6c:	4b0c      	ldr	r3, [pc, #48]	; (8004da0 <MX_USART1_UART_Init+0x4c>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d72:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <MX_USART1_UART_Init+0x4c>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d78:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <MX_USART1_UART_Init+0x4c>)
 8004d7a:	220c      	movs	r2, #12
 8004d7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d7e:	4b08      	ldr	r3, [pc, #32]	; (8004da0 <MX_USART1_UART_Init+0x4c>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d84:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <MX_USART1_UART_Init+0x4c>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004d8a:	4805      	ldr	r0, [pc, #20]	; (8004da0 <MX_USART1_UART_Init+0x4c>)
 8004d8c:	f002 fd9c 	bl	80078c8 <HAL_UART_Init>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004d96:	f7fe fd0d 	bl	80037b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004d9a:	bf00      	nop
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20002320 	.word	0x20002320
 8004da4:	40011000 	.word	0x40011000

08004da8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004dac:	4b11      	ldr	r3, [pc, #68]	; (8004df4 <MX_USART2_UART_Init+0x4c>)
 8004dae:	4a12      	ldr	r2, [pc, #72]	; (8004df8 <MX_USART2_UART_Init+0x50>)
 8004db0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004db2:	4b10      	ldr	r3, [pc, #64]	; (8004df4 <MX_USART2_UART_Init+0x4c>)
 8004db4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004db8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004dba:	4b0e      	ldr	r3, [pc, #56]	; (8004df4 <MX_USART2_UART_Init+0x4c>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004dc0:	4b0c      	ldr	r3, [pc, #48]	; (8004df4 <MX_USART2_UART_Init+0x4c>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004dc6:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <MX_USART2_UART_Init+0x4c>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004dcc:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <MX_USART2_UART_Init+0x4c>)
 8004dce:	220c      	movs	r2, #12
 8004dd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dd2:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <MX_USART2_UART_Init+0x4c>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dd8:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <MX_USART2_UART_Init+0x4c>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004dde:	4805      	ldr	r0, [pc, #20]	; (8004df4 <MX_USART2_UART_Init+0x4c>)
 8004de0:	f002 fd72 	bl	80078c8 <HAL_UART_Init>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004dea:	f7fe fce3 	bl	80037b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004dee:	bf00      	nop
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20002364 	.word	0x20002364
 8004df8:	40004400 	.word	0x40004400

08004dfc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004e00:	4b11      	ldr	r3, [pc, #68]	; (8004e48 <MX_USART3_UART_Init+0x4c>)
 8004e02:	4a12      	ldr	r2, [pc, #72]	; (8004e4c <MX_USART3_UART_Init+0x50>)
 8004e04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8004e06:	4b10      	ldr	r3, [pc, #64]	; (8004e48 <MX_USART3_UART_Init+0x4c>)
 8004e08:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8004e0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004e0e:	4b0e      	ldr	r3, [pc, #56]	; (8004e48 <MX_USART3_UART_Init+0x4c>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004e14:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <MX_USART3_UART_Init+0x4c>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004e1a:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <MX_USART3_UART_Init+0x4c>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004e20:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <MX_USART3_UART_Init+0x4c>)
 8004e22:	220c      	movs	r2, #12
 8004e24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e26:	4b08      	ldr	r3, [pc, #32]	; (8004e48 <MX_USART3_UART_Init+0x4c>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e2c:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <MX_USART3_UART_Init+0x4c>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004e32:	4805      	ldr	r0, [pc, #20]	; (8004e48 <MX_USART3_UART_Init+0x4c>)
 8004e34:	f002 fd48 	bl	80078c8 <HAL_UART_Init>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004e3e:	f7fe fcb9 	bl	80037b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004e42:	bf00      	nop
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	200023a8 	.word	0x200023a8
 8004e4c:	40004800 	.word	0x40004800

08004e50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b090      	sub	sp, #64	; 0x40
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	605a      	str	r2, [r3, #4]
 8004e62:	609a      	str	r2, [r3, #8]
 8004e64:	60da      	str	r2, [r3, #12]
 8004e66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a63      	ldr	r2, [pc, #396]	; (8004ffc <HAL_UART_MspInit+0x1ac>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d12c      	bne.n	8004ecc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004e72:	2300      	movs	r3, #0
 8004e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e76:	4b62      	ldr	r3, [pc, #392]	; (8005000 <HAL_UART_MspInit+0x1b0>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	4a61      	ldr	r2, [pc, #388]	; (8005000 <HAL_UART_MspInit+0x1b0>)
 8004e7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e80:	6413      	str	r3, [r2, #64]	; 0x40
 8004e82:	4b5f      	ldr	r3, [pc, #380]	; (8005000 <HAL_UART_MspInit+0x1b0>)
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e8e:	2300      	movs	r3, #0
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
 8004e92:	4b5b      	ldr	r3, [pc, #364]	; (8005000 <HAL_UART_MspInit+0x1b0>)
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	4a5a      	ldr	r2, [pc, #360]	; (8005000 <HAL_UART_MspInit+0x1b0>)
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e9e:	4b58      	ldr	r3, [pc, #352]	; (8005000 <HAL_UART_MspInit+0x1b0>)
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eae:	2302      	movs	r3, #2
 8004eb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004eba:	2308      	movs	r3, #8
 8004ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ebe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	484f      	ldr	r0, [pc, #316]	; (8005004 <HAL_UART_MspInit+0x1b4>)
 8004ec6:	f001 fa41 	bl	800634c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004eca:	e1d5      	b.n	8005278 <HAL_UART_MspInit+0x428>
  else if(uartHandle->Instance==USART1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a4d      	ldr	r2, [pc, #308]	; (8005008 <HAL_UART_MspInit+0x1b8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	f040 80a2 	bne.w	800501c <HAL_UART_MspInit+0x1cc>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004ed8:	2300      	movs	r3, #0
 8004eda:	623b      	str	r3, [r7, #32]
 8004edc:	4b48      	ldr	r3, [pc, #288]	; (8005000 <HAL_UART_MspInit+0x1b0>)
 8004ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee0:	4a47      	ldr	r2, [pc, #284]	; (8005000 <HAL_UART_MspInit+0x1b0>)
 8004ee2:	f043 0310 	orr.w	r3, r3, #16
 8004ee6:	6453      	str	r3, [r2, #68]	; 0x44
 8004ee8:	4b45      	ldr	r3, [pc, #276]	; (8005000 <HAL_UART_MspInit+0x1b0>)
 8004eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	623b      	str	r3, [r7, #32]
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	61fb      	str	r3, [r7, #28]
 8004ef8:	4b41      	ldr	r3, [pc, #260]	; (8005000 <HAL_UART_MspInit+0x1b0>)
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	4a40      	ldr	r2, [pc, #256]	; (8005000 <HAL_UART_MspInit+0x1b0>)
 8004efe:	f043 0301 	orr.w	r3, r3, #1
 8004f02:	6313      	str	r3, [r2, #48]	; 0x30
 8004f04:	4b3e      	ldr	r3, [pc, #248]	; (8005000 <HAL_UART_MspInit+0x1b0>)
 8004f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	61fb      	str	r3, [r7, #28]
 8004f0e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004f10:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f16:	2302      	movs	r3, #2
 8004f18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004f22:	2307      	movs	r3, #7
 8004f24:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4835      	ldr	r0, [pc, #212]	; (8005004 <HAL_UART_MspInit+0x1b4>)
 8004f2e:	f001 fa0d 	bl	800634c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004f32:	4b36      	ldr	r3, [pc, #216]	; (800500c <HAL_UART_MspInit+0x1bc>)
 8004f34:	4a36      	ldr	r2, [pc, #216]	; (8005010 <HAL_UART_MspInit+0x1c0>)
 8004f36:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004f38:	4b34      	ldr	r3, [pc, #208]	; (800500c <HAL_UART_MspInit+0x1bc>)
 8004f3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f3e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f40:	4b32      	ldr	r3, [pc, #200]	; (800500c <HAL_UART_MspInit+0x1bc>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f46:	4b31      	ldr	r3, [pc, #196]	; (800500c <HAL_UART_MspInit+0x1bc>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004f4c:	4b2f      	ldr	r3, [pc, #188]	; (800500c <HAL_UART_MspInit+0x1bc>)
 8004f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f52:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f54:	4b2d      	ldr	r3, [pc, #180]	; (800500c <HAL_UART_MspInit+0x1bc>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f5a:	4b2c      	ldr	r3, [pc, #176]	; (800500c <HAL_UART_MspInit+0x1bc>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004f60:	4b2a      	ldr	r3, [pc, #168]	; (800500c <HAL_UART_MspInit+0x1bc>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004f66:	4b29      	ldr	r3, [pc, #164]	; (800500c <HAL_UART_MspInit+0x1bc>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f6c:	4b27      	ldr	r3, [pc, #156]	; (800500c <HAL_UART_MspInit+0x1bc>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004f72:	4826      	ldr	r0, [pc, #152]	; (800500c <HAL_UART_MspInit+0x1bc>)
 8004f74:	f000 fb10 	bl	8005598 <HAL_DMA_Init>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8004f7e:	f7fe fc19 	bl	80037b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a21      	ldr	r2, [pc, #132]	; (800500c <HAL_UART_MspInit+0x1bc>)
 8004f86:	639a      	str	r2, [r3, #56]	; 0x38
 8004f88:	4a20      	ldr	r2, [pc, #128]	; (800500c <HAL_UART_MspInit+0x1bc>)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8004f8e:	4b21      	ldr	r3, [pc, #132]	; (8005014 <HAL_UART_MspInit+0x1c4>)
 8004f90:	4a21      	ldr	r2, [pc, #132]	; (8005018 <HAL_UART_MspInit+0x1c8>)
 8004f92:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004f94:	4b1f      	ldr	r3, [pc, #124]	; (8005014 <HAL_UART_MspInit+0x1c4>)
 8004f96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f9a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f9c:	4b1d      	ldr	r3, [pc, #116]	; (8005014 <HAL_UART_MspInit+0x1c4>)
 8004f9e:	2240      	movs	r2, #64	; 0x40
 8004fa0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fa2:	4b1c      	ldr	r3, [pc, #112]	; (8005014 <HAL_UART_MspInit+0x1c4>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004fa8:	4b1a      	ldr	r3, [pc, #104]	; (8005014 <HAL_UART_MspInit+0x1c4>)
 8004faa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fae:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fb0:	4b18      	ldr	r3, [pc, #96]	; (8005014 <HAL_UART_MspInit+0x1c4>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004fb6:	4b17      	ldr	r3, [pc, #92]	; (8005014 <HAL_UART_MspInit+0x1c4>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004fbc:	4b15      	ldr	r3, [pc, #84]	; (8005014 <HAL_UART_MspInit+0x1c4>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004fc2:	4b14      	ldr	r3, [pc, #80]	; (8005014 <HAL_UART_MspInit+0x1c4>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004fc8:	4b12      	ldr	r3, [pc, #72]	; (8005014 <HAL_UART_MspInit+0x1c4>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004fce:	4811      	ldr	r0, [pc, #68]	; (8005014 <HAL_UART_MspInit+0x1c4>)
 8004fd0:	f000 fae2 	bl	8005598 <HAL_DMA_Init>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <HAL_UART_MspInit+0x18e>
      Error_Handler();
 8004fda:	f7fe fbeb 	bl	80037b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a0c      	ldr	r2, [pc, #48]	; (8005014 <HAL_UART_MspInit+0x1c4>)
 8004fe2:	635a      	str	r2, [r3, #52]	; 0x34
 8004fe4:	4a0b      	ldr	r2, [pc, #44]	; (8005014 <HAL_UART_MspInit+0x1c4>)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004fea:	2200      	movs	r2, #0
 8004fec:	2105      	movs	r1, #5
 8004fee:	2025      	movs	r0, #37	; 0x25
 8004ff0:	f000 faa8 	bl	8005544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004ff4:	2025      	movs	r0, #37	; 0x25
 8004ff6:	f000 fac1 	bl	800557c <HAL_NVIC_EnableIRQ>
}
 8004ffa:	e13d      	b.n	8005278 <HAL_UART_MspInit+0x428>
 8004ffc:	40004c00 	.word	0x40004c00
 8005000:	40023800 	.word	0x40023800
 8005004:	40020000 	.word	0x40020000
 8005008:	40011000 	.word	0x40011000
 800500c:	200023ec 	.word	0x200023ec
 8005010:	40026440 	.word	0x40026440
 8005014:	2000244c 	.word	0x2000244c
 8005018:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a97      	ldr	r2, [pc, #604]	; (8005280 <HAL_UART_MspInit+0x430>)
 8005022:	4293      	cmp	r3, r2
 8005024:	f040 8091 	bne.w	800514a <HAL_UART_MspInit+0x2fa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005028:	2300      	movs	r3, #0
 800502a:	61bb      	str	r3, [r7, #24]
 800502c:	4b95      	ldr	r3, [pc, #596]	; (8005284 <HAL_UART_MspInit+0x434>)
 800502e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005030:	4a94      	ldr	r2, [pc, #592]	; (8005284 <HAL_UART_MspInit+0x434>)
 8005032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005036:	6413      	str	r3, [r2, #64]	; 0x40
 8005038:	4b92      	ldr	r3, [pc, #584]	; (8005284 <HAL_UART_MspInit+0x434>)
 800503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005040:	61bb      	str	r3, [r7, #24]
 8005042:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005044:	2300      	movs	r3, #0
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	4b8e      	ldr	r3, [pc, #568]	; (8005284 <HAL_UART_MspInit+0x434>)
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	4a8d      	ldr	r2, [pc, #564]	; (8005284 <HAL_UART_MspInit+0x434>)
 800504e:	f043 0301 	orr.w	r3, r3, #1
 8005052:	6313      	str	r3, [r2, #48]	; 0x30
 8005054:	4b8b      	ldr	r3, [pc, #556]	; (8005284 <HAL_UART_MspInit+0x434>)
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005060:	230c      	movs	r3, #12
 8005062:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005064:	2302      	movs	r3, #2
 8005066:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005068:	2300      	movs	r3, #0
 800506a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800506c:	2303      	movs	r3, #3
 800506e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005070:	2307      	movs	r3, #7
 8005072:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005074:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005078:	4619      	mov	r1, r3
 800507a:	4883      	ldr	r0, [pc, #524]	; (8005288 <HAL_UART_MspInit+0x438>)
 800507c:	f001 f966 	bl	800634c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005080:	4b82      	ldr	r3, [pc, #520]	; (800528c <HAL_UART_MspInit+0x43c>)
 8005082:	4a83      	ldr	r2, [pc, #524]	; (8005290 <HAL_UART_MspInit+0x440>)
 8005084:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005086:	4b81      	ldr	r3, [pc, #516]	; (800528c <HAL_UART_MspInit+0x43c>)
 8005088:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800508c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800508e:	4b7f      	ldr	r3, [pc, #508]	; (800528c <HAL_UART_MspInit+0x43c>)
 8005090:	2200      	movs	r2, #0
 8005092:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005094:	4b7d      	ldr	r3, [pc, #500]	; (800528c <HAL_UART_MspInit+0x43c>)
 8005096:	2200      	movs	r2, #0
 8005098:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800509a:	4b7c      	ldr	r3, [pc, #496]	; (800528c <HAL_UART_MspInit+0x43c>)
 800509c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050a2:	4b7a      	ldr	r3, [pc, #488]	; (800528c <HAL_UART_MspInit+0x43c>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050a8:	4b78      	ldr	r3, [pc, #480]	; (800528c <HAL_UART_MspInit+0x43c>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80050ae:	4b77      	ldr	r3, [pc, #476]	; (800528c <HAL_UART_MspInit+0x43c>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80050b4:	4b75      	ldr	r3, [pc, #468]	; (800528c <HAL_UART_MspInit+0x43c>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050ba:	4b74      	ldr	r3, [pc, #464]	; (800528c <HAL_UART_MspInit+0x43c>)
 80050bc:	2200      	movs	r2, #0
 80050be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80050c0:	4872      	ldr	r0, [pc, #456]	; (800528c <HAL_UART_MspInit+0x43c>)
 80050c2:	f000 fa69 	bl	8005598 <HAL_DMA_Init>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <HAL_UART_MspInit+0x280>
      Error_Handler();
 80050cc:	f7fe fb72 	bl	80037b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a6e      	ldr	r2, [pc, #440]	; (800528c <HAL_UART_MspInit+0x43c>)
 80050d4:	639a      	str	r2, [r3, #56]	; 0x38
 80050d6:	4a6d      	ldr	r2, [pc, #436]	; (800528c <HAL_UART_MspInit+0x43c>)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80050dc:	4b6d      	ldr	r3, [pc, #436]	; (8005294 <HAL_UART_MspInit+0x444>)
 80050de:	4a6e      	ldr	r2, [pc, #440]	; (8005298 <HAL_UART_MspInit+0x448>)
 80050e0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80050e2:	4b6c      	ldr	r3, [pc, #432]	; (8005294 <HAL_UART_MspInit+0x444>)
 80050e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80050e8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050ea:	4b6a      	ldr	r3, [pc, #424]	; (8005294 <HAL_UART_MspInit+0x444>)
 80050ec:	2240      	movs	r2, #64	; 0x40
 80050ee:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050f0:	4b68      	ldr	r3, [pc, #416]	; (8005294 <HAL_UART_MspInit+0x444>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80050f6:	4b67      	ldr	r3, [pc, #412]	; (8005294 <HAL_UART_MspInit+0x444>)
 80050f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050fe:	4b65      	ldr	r3, [pc, #404]	; (8005294 <HAL_UART_MspInit+0x444>)
 8005100:	2200      	movs	r2, #0
 8005102:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005104:	4b63      	ldr	r3, [pc, #396]	; (8005294 <HAL_UART_MspInit+0x444>)
 8005106:	2200      	movs	r2, #0
 8005108:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800510a:	4b62      	ldr	r3, [pc, #392]	; (8005294 <HAL_UART_MspInit+0x444>)
 800510c:	2200      	movs	r2, #0
 800510e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005110:	4b60      	ldr	r3, [pc, #384]	; (8005294 <HAL_UART_MspInit+0x444>)
 8005112:	2200      	movs	r2, #0
 8005114:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005116:	4b5f      	ldr	r3, [pc, #380]	; (8005294 <HAL_UART_MspInit+0x444>)
 8005118:	2200      	movs	r2, #0
 800511a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800511c:	485d      	ldr	r0, [pc, #372]	; (8005294 <HAL_UART_MspInit+0x444>)
 800511e:	f000 fa3b 	bl	8005598 <HAL_DMA_Init>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <HAL_UART_MspInit+0x2dc>
      Error_Handler();
 8005128:	f7fe fb44 	bl	80037b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a59      	ldr	r2, [pc, #356]	; (8005294 <HAL_UART_MspInit+0x444>)
 8005130:	635a      	str	r2, [r3, #52]	; 0x34
 8005132:	4a58      	ldr	r2, [pc, #352]	; (8005294 <HAL_UART_MspInit+0x444>)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005138:	2200      	movs	r2, #0
 800513a:	2105      	movs	r1, #5
 800513c:	2026      	movs	r0, #38	; 0x26
 800513e:	f000 fa01 	bl	8005544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005142:	2026      	movs	r0, #38	; 0x26
 8005144:	f000 fa1a 	bl	800557c <HAL_NVIC_EnableIRQ>
}
 8005148:	e096      	b.n	8005278 <HAL_UART_MspInit+0x428>
  else if(uartHandle->Instance==USART3)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a53      	ldr	r2, [pc, #332]	; (800529c <HAL_UART_MspInit+0x44c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	f040 8091 	bne.w	8005278 <HAL_UART_MspInit+0x428>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005156:	2300      	movs	r3, #0
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	4b4a      	ldr	r3, [pc, #296]	; (8005284 <HAL_UART_MspInit+0x434>)
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	4a49      	ldr	r2, [pc, #292]	; (8005284 <HAL_UART_MspInit+0x434>)
 8005160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005164:	6413      	str	r3, [r2, #64]	; 0x40
 8005166:	4b47      	ldr	r3, [pc, #284]	; (8005284 <HAL_UART_MspInit+0x434>)
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005172:	2300      	movs	r3, #0
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	4b43      	ldr	r3, [pc, #268]	; (8005284 <HAL_UART_MspInit+0x434>)
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	4a42      	ldr	r2, [pc, #264]	; (8005284 <HAL_UART_MspInit+0x434>)
 800517c:	f043 0302 	orr.w	r3, r3, #2
 8005180:	6313      	str	r3, [r2, #48]	; 0x30
 8005182:	4b40      	ldr	r3, [pc, #256]	; (8005284 <HAL_UART_MspInit+0x434>)
 8005184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800518e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005194:	2302      	movs	r3, #2
 8005196:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005198:	2300      	movs	r3, #0
 800519a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800519c:	2303      	movs	r3, #3
 800519e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80051a0:	2307      	movs	r3, #7
 80051a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051a8:	4619      	mov	r1, r3
 80051aa:	483d      	ldr	r0, [pc, #244]	; (80052a0 <HAL_UART_MspInit+0x450>)
 80051ac:	f001 f8ce 	bl	800634c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80051b0:	4b3c      	ldr	r3, [pc, #240]	; (80052a4 <HAL_UART_MspInit+0x454>)
 80051b2:	4a3d      	ldr	r2, [pc, #244]	; (80052a8 <HAL_UART_MspInit+0x458>)
 80051b4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80051b6:	4b3b      	ldr	r3, [pc, #236]	; (80052a4 <HAL_UART_MspInit+0x454>)
 80051b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80051bc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051be:	4b39      	ldr	r3, [pc, #228]	; (80052a4 <HAL_UART_MspInit+0x454>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051c4:	4b37      	ldr	r3, [pc, #220]	; (80052a4 <HAL_UART_MspInit+0x454>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051ca:	4b36      	ldr	r3, [pc, #216]	; (80052a4 <HAL_UART_MspInit+0x454>)
 80051cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051d0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051d2:	4b34      	ldr	r3, [pc, #208]	; (80052a4 <HAL_UART_MspInit+0x454>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051d8:	4b32      	ldr	r3, [pc, #200]	; (80052a4 <HAL_UART_MspInit+0x454>)
 80051da:	2200      	movs	r2, #0
 80051dc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80051de:	4b31      	ldr	r3, [pc, #196]	; (80052a4 <HAL_UART_MspInit+0x454>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80051e4:	4b2f      	ldr	r3, [pc, #188]	; (80052a4 <HAL_UART_MspInit+0x454>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051ea:	4b2e      	ldr	r3, [pc, #184]	; (80052a4 <HAL_UART_MspInit+0x454>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80051f0:	482c      	ldr	r0, [pc, #176]	; (80052a4 <HAL_UART_MspInit+0x454>)
 80051f2:	f000 f9d1 	bl	8005598 <HAL_DMA_Init>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <HAL_UART_MspInit+0x3b0>
      Error_Handler();
 80051fc:	f7fe fada 	bl	80037b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a28      	ldr	r2, [pc, #160]	; (80052a4 <HAL_UART_MspInit+0x454>)
 8005204:	639a      	str	r2, [r3, #56]	; 0x38
 8005206:	4a27      	ldr	r2, [pc, #156]	; (80052a4 <HAL_UART_MspInit+0x454>)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800520c:	4b27      	ldr	r3, [pc, #156]	; (80052ac <HAL_UART_MspInit+0x45c>)
 800520e:	4a28      	ldr	r2, [pc, #160]	; (80052b0 <HAL_UART_MspInit+0x460>)
 8005210:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8005212:	4b26      	ldr	r3, [pc, #152]	; (80052ac <HAL_UART_MspInit+0x45c>)
 8005214:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005218:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800521a:	4b24      	ldr	r3, [pc, #144]	; (80052ac <HAL_UART_MspInit+0x45c>)
 800521c:	2240      	movs	r2, #64	; 0x40
 800521e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005220:	4b22      	ldr	r3, [pc, #136]	; (80052ac <HAL_UART_MspInit+0x45c>)
 8005222:	2200      	movs	r2, #0
 8005224:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005226:	4b21      	ldr	r3, [pc, #132]	; (80052ac <HAL_UART_MspInit+0x45c>)
 8005228:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800522c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800522e:	4b1f      	ldr	r3, [pc, #124]	; (80052ac <HAL_UART_MspInit+0x45c>)
 8005230:	2200      	movs	r2, #0
 8005232:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005234:	4b1d      	ldr	r3, [pc, #116]	; (80052ac <HAL_UART_MspInit+0x45c>)
 8005236:	2200      	movs	r2, #0
 8005238:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800523a:	4b1c      	ldr	r3, [pc, #112]	; (80052ac <HAL_UART_MspInit+0x45c>)
 800523c:	2200      	movs	r2, #0
 800523e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005240:	4b1a      	ldr	r3, [pc, #104]	; (80052ac <HAL_UART_MspInit+0x45c>)
 8005242:	2200      	movs	r2, #0
 8005244:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005246:	4b19      	ldr	r3, [pc, #100]	; (80052ac <HAL_UART_MspInit+0x45c>)
 8005248:	2200      	movs	r2, #0
 800524a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800524c:	4817      	ldr	r0, [pc, #92]	; (80052ac <HAL_UART_MspInit+0x45c>)
 800524e:	f000 f9a3 	bl	8005598 <HAL_DMA_Init>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <HAL_UART_MspInit+0x40c>
      Error_Handler();
 8005258:	f7fe faac 	bl	80037b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a13      	ldr	r2, [pc, #76]	; (80052ac <HAL_UART_MspInit+0x45c>)
 8005260:	635a      	str	r2, [r3, #52]	; 0x34
 8005262:	4a12      	ldr	r2, [pc, #72]	; (80052ac <HAL_UART_MspInit+0x45c>)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005268:	2200      	movs	r2, #0
 800526a:	2105      	movs	r1, #5
 800526c:	2027      	movs	r0, #39	; 0x27
 800526e:	f000 f969 	bl	8005544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005272:	2027      	movs	r0, #39	; 0x27
 8005274:	f000 f982 	bl	800557c <HAL_NVIC_EnableIRQ>
}
 8005278:	bf00      	nop
 800527a:	3740      	adds	r7, #64	; 0x40
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	40004400 	.word	0x40004400
 8005284:	40023800 	.word	0x40023800
 8005288:	40020000 	.word	0x40020000
 800528c:	200024ac 	.word	0x200024ac
 8005290:	40026088 	.word	0x40026088
 8005294:	2000250c 	.word	0x2000250c
 8005298:	400260a0 	.word	0x400260a0
 800529c:	40004800 	.word	0x40004800
 80052a0:	40020400 	.word	0x40020400
 80052a4:	2000256c 	.word	0x2000256c
 80052a8:	40026028 	.word	0x40026028
 80052ac:	200025cc 	.word	0x200025cc
 80052b0:	40026058 	.word	0x40026058

080052b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80052b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80052b8:	480d      	ldr	r0, [pc, #52]	; (80052f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80052ba:	490e      	ldr	r1, [pc, #56]	; (80052f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80052bc:	4a0e      	ldr	r2, [pc, #56]	; (80052f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80052be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052c0:	e002      	b.n	80052c8 <LoopCopyDataInit>

080052c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052c6:	3304      	adds	r3, #4

080052c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052cc:	d3f9      	bcc.n	80052c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052ce:	4a0b      	ldr	r2, [pc, #44]	; (80052fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80052d0:	4c0b      	ldr	r4, [pc, #44]	; (8005300 <LoopFillZerobss+0x26>)
  movs r3, #0
 80052d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052d4:	e001      	b.n	80052da <LoopFillZerobss>

080052d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052d8:	3204      	adds	r2, #4

080052da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052dc:	d3fb      	bcc.n	80052d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80052de:	f7ff fa0b 	bl	80046f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052e2:	f007 f821 	bl	800c328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80052e6:	f7fe f9cb 	bl	8003680 <main>
  bx  lr    
 80052ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80052ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80052f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052f4:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80052f8:	0800cb58 	.word	0x0800cb58
  ldr r2, =_sbss
 80052fc:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8005300:	20002cac 	.word	0x20002cac

08005304 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005304:	e7fe      	b.n	8005304 <ADC_IRQHandler>
	...

08005308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800530c:	4b0e      	ldr	r3, [pc, #56]	; (8005348 <HAL_Init+0x40>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a0d      	ldr	r2, [pc, #52]	; (8005348 <HAL_Init+0x40>)
 8005312:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005316:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005318:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <HAL_Init+0x40>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a0a      	ldr	r2, [pc, #40]	; (8005348 <HAL_Init+0x40>)
 800531e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005322:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005324:	4b08      	ldr	r3, [pc, #32]	; (8005348 <HAL_Init+0x40>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a07      	ldr	r2, [pc, #28]	; (8005348 <HAL_Init+0x40>)
 800532a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800532e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005330:	2003      	movs	r0, #3
 8005332:	f000 f8fc 	bl	800552e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005336:	200f      	movs	r0, #15
 8005338:	f7ff f8f2 	bl	8004520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800533c:	f7ff f8c4 	bl	80044c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	40023c00 	.word	0x40023c00

0800534c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005350:	4b06      	ldr	r3, [pc, #24]	; (800536c <HAL_IncTick+0x20>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	461a      	mov	r2, r3
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <HAL_IncTick+0x24>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4413      	add	r3, r2
 800535c:	4a04      	ldr	r2, [pc, #16]	; (8005370 <HAL_IncTick+0x24>)
 800535e:	6013      	str	r3, [r2, #0]
}
 8005360:	bf00      	nop
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	2000011c 	.word	0x2000011c
 8005370:	2000262c 	.word	0x2000262c

08005374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  return uwTick;
 8005378:	4b03      	ldr	r3, [pc, #12]	; (8005388 <HAL_GetTick+0x14>)
 800537a:	681b      	ldr	r3, [r3, #0]
}
 800537c:	4618      	mov	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	2000262c 	.word	0x2000262c

0800538c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005394:	f7ff ffee 	bl	8005374 <HAL_GetTick>
 8005398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053a4:	d005      	beq.n	80053b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80053a6:	4b0a      	ldr	r3, [pc, #40]	; (80053d0 <HAL_Delay+0x44>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4413      	add	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80053b2:	bf00      	nop
 80053b4:	f7ff ffde 	bl	8005374 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d8f7      	bhi.n	80053b4 <HAL_Delay+0x28>
  {
  }
}
 80053c4:	bf00      	nop
 80053c6:	bf00      	nop
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	2000011c 	.word	0x2000011c

080053d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053e4:	4b0c      	ldr	r3, [pc, #48]	; (8005418 <__NVIC_SetPriorityGrouping+0x44>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053f0:	4013      	ands	r3, r2
 80053f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005406:	4a04      	ldr	r2, [pc, #16]	; (8005418 <__NVIC_SetPriorityGrouping+0x44>)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	60d3      	str	r3, [r2, #12]
}
 800540c:	bf00      	nop
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	e000ed00 	.word	0xe000ed00

0800541c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005420:	4b04      	ldr	r3, [pc, #16]	; (8005434 <__NVIC_GetPriorityGrouping+0x18>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	0a1b      	lsrs	r3, r3, #8
 8005426:	f003 0307 	and.w	r3, r3, #7
}
 800542a:	4618      	mov	r0, r3
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	e000ed00 	.word	0xe000ed00

08005438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	4603      	mov	r3, r0
 8005440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005446:	2b00      	cmp	r3, #0
 8005448:	db0b      	blt.n	8005462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	f003 021f 	and.w	r2, r3, #31
 8005450:	4907      	ldr	r1, [pc, #28]	; (8005470 <__NVIC_EnableIRQ+0x38>)
 8005452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	2001      	movs	r0, #1
 800545a:	fa00 f202 	lsl.w	r2, r0, r2
 800545e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	e000e100 	.word	0xe000e100

08005474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	4603      	mov	r3, r0
 800547c:	6039      	str	r1, [r7, #0]
 800547e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005484:	2b00      	cmp	r3, #0
 8005486:	db0a      	blt.n	800549e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	b2da      	uxtb	r2, r3
 800548c:	490c      	ldr	r1, [pc, #48]	; (80054c0 <__NVIC_SetPriority+0x4c>)
 800548e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005492:	0112      	lsls	r2, r2, #4
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	440b      	add	r3, r1
 8005498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800549c:	e00a      	b.n	80054b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	4908      	ldr	r1, [pc, #32]	; (80054c4 <__NVIC_SetPriority+0x50>)
 80054a4:	79fb      	ldrb	r3, [r7, #7]
 80054a6:	f003 030f 	and.w	r3, r3, #15
 80054aa:	3b04      	subs	r3, #4
 80054ac:	0112      	lsls	r2, r2, #4
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	440b      	add	r3, r1
 80054b2:	761a      	strb	r2, [r3, #24]
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	e000e100 	.word	0xe000e100
 80054c4:	e000ed00 	.word	0xe000ed00

080054c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b089      	sub	sp, #36	; 0x24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	f1c3 0307 	rsb	r3, r3, #7
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	bf28      	it	cs
 80054e6:	2304      	movcs	r3, #4
 80054e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	3304      	adds	r3, #4
 80054ee:	2b06      	cmp	r3, #6
 80054f0:	d902      	bls.n	80054f8 <NVIC_EncodePriority+0x30>
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	3b03      	subs	r3, #3
 80054f6:	e000      	b.n	80054fa <NVIC_EncodePriority+0x32>
 80054f8:	2300      	movs	r3, #0
 80054fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	43da      	mvns	r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	401a      	ands	r2, r3
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005510:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	fa01 f303 	lsl.w	r3, r1, r3
 800551a:	43d9      	mvns	r1, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005520:	4313      	orrs	r3, r2
         );
}
 8005522:	4618      	mov	r0, r3
 8005524:	3724      	adds	r7, #36	; 0x24
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b082      	sub	sp, #8
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7ff ff4c 	bl	80053d4 <__NVIC_SetPriorityGrouping>
}
 800553c:	bf00      	nop
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	4603      	mov	r3, r0
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005552:	2300      	movs	r3, #0
 8005554:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005556:	f7ff ff61 	bl	800541c <__NVIC_GetPriorityGrouping>
 800555a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	68b9      	ldr	r1, [r7, #8]
 8005560:	6978      	ldr	r0, [r7, #20]
 8005562:	f7ff ffb1 	bl	80054c8 <NVIC_EncodePriority>
 8005566:	4602      	mov	r2, r0
 8005568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800556c:	4611      	mov	r1, r2
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff ff80 	bl	8005474 <__NVIC_SetPriority>
}
 8005574:	bf00      	nop
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff ff54 	bl	8005438 <__NVIC_EnableIRQ>
}
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80055a4:	f7ff fee6 	bl	8005374 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e099      	b.n	80056e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0201 	bic.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055d4:	e00f      	b.n	80055f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055d6:	f7ff fecd 	bl	8005374 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b05      	cmp	r3, #5
 80055e2:	d908      	bls.n	80055f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2203      	movs	r2, #3
 80055ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e078      	b.n	80056e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e8      	bne.n	80055d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4b38      	ldr	r3, [pc, #224]	; (80056f0 <HAL_DMA_Init+0x158>)
 8005610:	4013      	ands	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005622:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800562e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800563a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	2b04      	cmp	r3, #4
 800564e:	d107      	bne.n	8005660 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	4313      	orrs	r3, r2
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f023 0307 	bic.w	r3, r3, #7
 8005676:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	2b04      	cmp	r3, #4
 8005688:	d117      	bne.n	80056ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00e      	beq.n	80056ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 fb01 	bl	8005ca4 <DMA_CheckFifoParam>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d008      	beq.n	80056ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2240      	movs	r2, #64	; 0x40
 80056ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80056b6:	2301      	movs	r3, #1
 80056b8:	e016      	b.n	80056e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fab8 	bl	8005c38 <DMA_CalcBaseAndBitshift>
 80056c8:	4603      	mov	r3, r0
 80056ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d0:	223f      	movs	r2, #63	; 0x3f
 80056d2:	409a      	lsls	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	f010803f 	.word	0xf010803f

080056f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_DMA_Start_IT+0x26>
 8005716:	2302      	movs	r3, #2
 8005718:	e040      	b.n	800579c <HAL_DMA_Start_IT+0xa8>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b01      	cmp	r3, #1
 800572c:	d12f      	bne.n	800578e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2202      	movs	r2, #2
 8005732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 fa4a 	bl	8005bdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800574c:	223f      	movs	r2, #63	; 0x3f
 800574e:	409a      	lsls	r2, r3
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0216 	orr.w	r2, r2, #22
 8005762:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0208 	orr.w	r2, r2, #8
 800577a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	e005      	b.n	800579a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005796:	2302      	movs	r3, #2
 8005798:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800579a:	7dfb      	ldrb	r3, [r7, #23]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80057b2:	f7ff fddf 	bl	8005374 <HAL_GetTick>
 80057b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d008      	beq.n	80057d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2280      	movs	r2, #128	; 0x80
 80057c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e052      	b.n	800587c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0216 	bic.w	r2, r2, #22
 80057e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	695a      	ldr	r2, [r3, #20]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d103      	bne.n	8005806 <HAL_DMA_Abort+0x62>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005802:	2b00      	cmp	r3, #0
 8005804:	d007      	beq.n	8005816 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0208 	bic.w	r2, r2, #8
 8005814:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0201 	bic.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005826:	e013      	b.n	8005850 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005828:	f7ff fda4 	bl	8005374 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b05      	cmp	r3, #5
 8005834:	d90c      	bls.n	8005850 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2203      	movs	r2, #3
 8005840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e015      	b.n	800587c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e4      	bne.n	8005828 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005862:	223f      	movs	r2, #63	; 0x3f
 8005864:	409a      	lsls	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d004      	beq.n	80058a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2280      	movs	r2, #128	; 0x80
 800589c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e00c      	b.n	80058bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2205      	movs	r2, #5
 80058a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0201 	bic.w	r2, r2, #1
 80058b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058d4:	4b8e      	ldr	r3, [pc, #568]	; (8005b10 <HAL_DMA_IRQHandler+0x248>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a8e      	ldr	r2, [pc, #568]	; (8005b14 <HAL_DMA_IRQHandler+0x24c>)
 80058da:	fba2 2303 	umull	r2, r3, r2, r3
 80058de:	0a9b      	lsrs	r3, r3, #10
 80058e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f2:	2208      	movs	r2, #8
 80058f4:	409a      	lsls	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4013      	ands	r3, r2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d01a      	beq.n	8005934 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b00      	cmp	r3, #0
 800590a:	d013      	beq.n	8005934 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0204 	bic.w	r2, r2, #4
 800591a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005920:	2208      	movs	r2, #8
 8005922:	409a      	lsls	r2, r3
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592c:	f043 0201 	orr.w	r2, r3, #1
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005938:	2201      	movs	r2, #1
 800593a:	409a      	lsls	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4013      	ands	r3, r2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d012      	beq.n	800596a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00b      	beq.n	800596a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005956:	2201      	movs	r2, #1
 8005958:	409a      	lsls	r2, r3
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005962:	f043 0202 	orr.w	r2, r3, #2
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800596e:	2204      	movs	r2, #4
 8005970:	409a      	lsls	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4013      	ands	r3, r2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d012      	beq.n	80059a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00b      	beq.n	80059a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598c:	2204      	movs	r2, #4
 800598e:	409a      	lsls	r2, r3
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005998:	f043 0204 	orr.w	r2, r3, #4
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a4:	2210      	movs	r2, #16
 80059a6:	409a      	lsls	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4013      	ands	r3, r2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d043      	beq.n	8005a38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0308 	and.w	r3, r3, #8
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d03c      	beq.n	8005a38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c2:	2210      	movs	r2, #16
 80059c4:	409a      	lsls	r2, r3
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d018      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d108      	bne.n	80059f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d024      	beq.n	8005a38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	4798      	blx	r3
 80059f6:	e01f      	b.n	8005a38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01b      	beq.n	8005a38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	4798      	blx	r3
 8005a08:	e016      	b.n	8005a38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d107      	bne.n	8005a28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0208 	bic.w	r2, r2, #8
 8005a26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	409a      	lsls	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4013      	ands	r3, r2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 808f 	beq.w	8005b68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0310 	and.w	r3, r3, #16
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 8087 	beq.w	8005b68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a5e:	2220      	movs	r2, #32
 8005a60:	409a      	lsls	r2, r3
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b05      	cmp	r3, #5
 8005a70:	d136      	bne.n	8005ae0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0216 	bic.w	r2, r2, #22
 8005a80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695a      	ldr	r2, [r3, #20]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d103      	bne.n	8005aa2 <HAL_DMA_IRQHandler+0x1da>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d007      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0208 	bic.w	r2, r2, #8
 8005ab0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab6:	223f      	movs	r2, #63	; 0x3f
 8005ab8:	409a      	lsls	r2, r3
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d07e      	beq.n	8005bd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	4798      	blx	r3
        }
        return;
 8005ade:	e079      	b.n	8005bd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d01d      	beq.n	8005b2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10d      	bne.n	8005b18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d031      	beq.n	8005b68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	4798      	blx	r3
 8005b0c:	e02c      	b.n	8005b68 <HAL_DMA_IRQHandler+0x2a0>
 8005b0e:	bf00      	nop
 8005b10:	20000034 	.word	0x20000034
 8005b14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d023      	beq.n	8005b68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	4798      	blx	r3
 8005b28:	e01e      	b.n	8005b68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10f      	bne.n	8005b58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0210 	bic.w	r2, r2, #16
 8005b46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d032      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d022      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2205      	movs	r2, #5
 8005b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0201 	bic.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	3301      	adds	r3, #1
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d307      	bcc.n	8005bb0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f2      	bne.n	8005b94 <HAL_DMA_IRQHandler+0x2cc>
 8005bae:	e000      	b.n	8005bb2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005bb0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d005      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	4798      	blx	r3
 8005bd2:	e000      	b.n	8005bd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005bd4:	bf00      	nop
    }
  }
}
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bf8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	2b40      	cmp	r3, #64	; 0x40
 8005c08:	d108      	bne.n	8005c1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005c1a:	e007      	b.n	8005c2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	60da      	str	r2, [r3, #12]
}
 8005c2c:	bf00      	nop
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	3b10      	subs	r3, #16
 8005c48:	4a14      	ldr	r2, [pc, #80]	; (8005c9c <DMA_CalcBaseAndBitshift+0x64>)
 8005c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4e:	091b      	lsrs	r3, r3, #4
 8005c50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c52:	4a13      	ldr	r2, [pc, #76]	; (8005ca0 <DMA_CalcBaseAndBitshift+0x68>)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4413      	add	r3, r2
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d909      	bls.n	8005c7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c6e:	f023 0303 	bic.w	r3, r3, #3
 8005c72:	1d1a      	adds	r2, r3, #4
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	659a      	str	r2, [r3, #88]	; 0x58
 8005c78:	e007      	b.n	8005c8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c82:	f023 0303 	bic.w	r3, r3, #3
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	aaaaaaab 	.word	0xaaaaaaab
 8005ca0:	0800caac 	.word	0x0800caac

08005ca4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d11f      	bne.n	8005cfe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d856      	bhi.n	8005d72 <DMA_CheckFifoParam+0xce>
 8005cc4:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <DMA_CheckFifoParam+0x28>)
 8005cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cca:	bf00      	nop
 8005ccc:	08005cdd 	.word	0x08005cdd
 8005cd0:	08005cef 	.word	0x08005cef
 8005cd4:	08005cdd 	.word	0x08005cdd
 8005cd8:	08005d73 	.word	0x08005d73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d046      	beq.n	8005d76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cec:	e043      	b.n	8005d76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cf6:	d140      	bne.n	8005d7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cfc:	e03d      	b.n	8005d7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d06:	d121      	bne.n	8005d4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d837      	bhi.n	8005d7e <DMA_CheckFifoParam+0xda>
 8005d0e:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <DMA_CheckFifoParam+0x70>)
 8005d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d14:	08005d25 	.word	0x08005d25
 8005d18:	08005d2b 	.word	0x08005d2b
 8005d1c:	08005d25 	.word	0x08005d25
 8005d20:	08005d3d 	.word	0x08005d3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	73fb      	strb	r3, [r7, #15]
      break;
 8005d28:	e030      	b.n	8005d8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d025      	beq.n	8005d82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d3a:	e022      	b.n	8005d82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d44:	d11f      	bne.n	8005d86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005d4a:	e01c      	b.n	8005d86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d903      	bls.n	8005d5a <DMA_CheckFifoParam+0xb6>
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d003      	beq.n	8005d60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d58:	e018      	b.n	8005d8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	73fb      	strb	r3, [r7, #15]
      break;
 8005d5e:	e015      	b.n	8005d8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00e      	beq.n	8005d8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d70:	e00b      	b.n	8005d8a <DMA_CheckFifoParam+0xe6>
      break;
 8005d72:	bf00      	nop
 8005d74:	e00a      	b.n	8005d8c <DMA_CheckFifoParam+0xe8>
      break;
 8005d76:	bf00      	nop
 8005d78:	e008      	b.n	8005d8c <DMA_CheckFifoParam+0xe8>
      break;
 8005d7a:	bf00      	nop
 8005d7c:	e006      	b.n	8005d8c <DMA_CheckFifoParam+0xe8>
      break;
 8005d7e:	bf00      	nop
 8005d80:	e004      	b.n	8005d8c <DMA_CheckFifoParam+0xe8>
      break;
 8005d82:	bf00      	nop
 8005d84:	e002      	b.n	8005d8c <DMA_CheckFifoParam+0xe8>
      break;   
 8005d86:	bf00      	nop
 8005d88:	e000      	b.n	8005d8c <DMA_CheckFifoParam+0xe8>
      break;
 8005d8a:	bf00      	nop
    }
  } 
  
  return status; 
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop

08005d9c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005dae:	4b23      	ldr	r3, [pc, #140]	; (8005e3c <HAL_FLASH_Program+0xa0>)
 8005db0:	7e1b      	ldrb	r3, [r3, #24]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <HAL_FLASH_Program+0x1e>
 8005db6:	2302      	movs	r3, #2
 8005db8:	e03b      	b.n	8005e32 <HAL_FLASH_Program+0x96>
 8005dba:	4b20      	ldr	r3, [pc, #128]	; (8005e3c <HAL_FLASH_Program+0xa0>)
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005dc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005dc4:	f000 f870 	bl	8005ea8 <FLASH_WaitForLastOperation>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005dcc:	7dfb      	ldrb	r3, [r7, #23]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d12b      	bne.n	8005e2a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d105      	bne.n	8005de4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005dd8:	783b      	ldrb	r3, [r7, #0]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	68b8      	ldr	r0, [r7, #8]
 8005dde:	f000 f91b 	bl	8006018 <FLASH_Program_Byte>
 8005de2:	e016      	b.n	8005e12 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d105      	bne.n	8005df6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005dea:	883b      	ldrh	r3, [r7, #0]
 8005dec:	4619      	mov	r1, r3
 8005dee:	68b8      	ldr	r0, [r7, #8]
 8005df0:	f000 f8ee 	bl	8005fd0 <FLASH_Program_HalfWord>
 8005df4:	e00d      	b.n	8005e12 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d105      	bne.n	8005e08 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	4619      	mov	r1, r3
 8005e00:	68b8      	ldr	r0, [r7, #8]
 8005e02:	f000 f8c3 	bl	8005f8c <FLASH_Program_Word>
 8005e06:	e004      	b.n	8005e12 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e0c:	68b8      	ldr	r0, [r7, #8]
 8005e0e:	f000 f88b 	bl	8005f28 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e12:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e16:	f000 f847 	bl	8005ea8 <FLASH_WaitForLastOperation>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005e1e:	4b08      	ldr	r3, [pc, #32]	; (8005e40 <HAL_FLASH_Program+0xa4>)
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	4a07      	ldr	r2, [pc, #28]	; (8005e40 <HAL_FLASH_Program+0xa4>)
 8005e24:	f023 0301 	bic.w	r3, r3, #1
 8005e28:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005e2a:	4b04      	ldr	r3, [pc, #16]	; (8005e3c <HAL_FLASH_Program+0xa0>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	20002630 	.word	0x20002630
 8005e40:	40023c00 	.word	0x40023c00

08005e44 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005e4e:	4b0b      	ldr	r3, [pc, #44]	; (8005e7c <HAL_FLASH_Unlock+0x38>)
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	da0b      	bge.n	8005e6e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005e56:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <HAL_FLASH_Unlock+0x38>)
 8005e58:	4a09      	ldr	r2, [pc, #36]	; (8005e80 <HAL_FLASH_Unlock+0x3c>)
 8005e5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005e5c:	4b07      	ldr	r3, [pc, #28]	; (8005e7c <HAL_FLASH_Unlock+0x38>)
 8005e5e:	4a09      	ldr	r2, [pc, #36]	; (8005e84 <HAL_FLASH_Unlock+0x40>)
 8005e60:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005e62:	4b06      	ldr	r3, [pc, #24]	; (8005e7c <HAL_FLASH_Unlock+0x38>)
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	da01      	bge.n	8005e6e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005e6e:	79fb      	ldrb	r3, [r7, #7]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	40023c00 	.word	0x40023c00
 8005e80:	45670123 	.word	0x45670123
 8005e84:	cdef89ab 	.word	0xcdef89ab

08005e88 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005e8c:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <HAL_FLASH_Lock+0x1c>)
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	4a04      	ldr	r2, [pc, #16]	; (8005ea4 <HAL_FLASH_Lock+0x1c>)
 8005e92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e96:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	40023c00 	.word	0x40023c00

08005ea8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005eb4:	4b1a      	ldr	r3, [pc, #104]	; (8005f20 <FLASH_WaitForLastOperation+0x78>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005eba:	f7ff fa5b 	bl	8005374 <HAL_GetTick>
 8005ebe:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005ec0:	e010      	b.n	8005ee4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ec8:	d00c      	beq.n	8005ee4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d007      	beq.n	8005ee0 <FLASH_WaitForLastOperation+0x38>
 8005ed0:	f7ff fa50 	bl	8005374 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d201      	bcs.n	8005ee4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e019      	b.n	8005f18 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005ee4:	4b0f      	ldr	r3, [pc, #60]	; (8005f24 <FLASH_WaitForLastOperation+0x7c>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1e8      	bne.n	8005ec2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005ef0:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <FLASH_WaitForLastOperation+0x7c>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005efc:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <FLASH_WaitForLastOperation+0x7c>)
 8005efe:	2201      	movs	r2, #1
 8005f00:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005f02:	4b08      	ldr	r3, [pc, #32]	; (8005f24 <FLASH_WaitForLastOperation+0x7c>)
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005f0e:	f000 f8a5 	bl	800605c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e000      	b.n	8005f18 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
  
}  
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20002630 	.word	0x20002630
 8005f24:	40023c00 	.word	0x40023c00

08005f28 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005f34:	4b14      	ldr	r3, [pc, #80]	; (8005f88 <FLASH_Program_DoubleWord+0x60>)
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	4a13      	ldr	r2, [pc, #76]	; (8005f88 <FLASH_Program_DoubleWord+0x60>)
 8005f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005f40:	4b11      	ldr	r3, [pc, #68]	; (8005f88 <FLASH_Program_DoubleWord+0x60>)
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	4a10      	ldr	r2, [pc, #64]	; (8005f88 <FLASH_Program_DoubleWord+0x60>)
 8005f46:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005f4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005f4c:	4b0e      	ldr	r3, [pc, #56]	; (8005f88 <FLASH_Program_DoubleWord+0x60>)
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	4a0d      	ldr	r2, [pc, #52]	; (8005f88 <FLASH_Program_DoubleWord+0x60>)
 8005f52:	f043 0301 	orr.w	r3, r3, #1
 8005f56:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005f5e:	f3bf 8f6f 	isb	sy
}
 8005f62:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005f64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	000a      	movs	r2, r1
 8005f72:	2300      	movs	r3, #0
 8005f74:	68f9      	ldr	r1, [r7, #12]
 8005f76:	3104      	adds	r1, #4
 8005f78:	4613      	mov	r3, r2
 8005f7a:	600b      	str	r3, [r1, #0]
}
 8005f7c:	bf00      	nop
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	40023c00 	.word	0x40023c00

08005f8c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005f96:	4b0d      	ldr	r3, [pc, #52]	; (8005fcc <FLASH_Program_Word+0x40>)
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	4a0c      	ldr	r2, [pc, #48]	; (8005fcc <FLASH_Program_Word+0x40>)
 8005f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fa0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005fa2:	4b0a      	ldr	r3, [pc, #40]	; (8005fcc <FLASH_Program_Word+0x40>)
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	4a09      	ldr	r2, [pc, #36]	; (8005fcc <FLASH_Program_Word+0x40>)
 8005fa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005fae:	4b07      	ldr	r3, [pc, #28]	; (8005fcc <FLASH_Program_Word+0x40>)
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	4a06      	ldr	r2, [pc, #24]	; (8005fcc <FLASH_Program_Word+0x40>)
 8005fb4:	f043 0301 	orr.w	r3, r3, #1
 8005fb8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	601a      	str	r2, [r3, #0]
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	40023c00 	.word	0x40023c00

08005fd0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005fdc:	4b0d      	ldr	r3, [pc, #52]	; (8006014 <FLASH_Program_HalfWord+0x44>)
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	4a0c      	ldr	r2, [pc, #48]	; (8006014 <FLASH_Program_HalfWord+0x44>)
 8005fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005fe8:	4b0a      	ldr	r3, [pc, #40]	; (8006014 <FLASH_Program_HalfWord+0x44>)
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	4a09      	ldr	r2, [pc, #36]	; (8006014 <FLASH_Program_HalfWord+0x44>)
 8005fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ff2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005ff4:	4b07      	ldr	r3, [pc, #28]	; (8006014 <FLASH_Program_HalfWord+0x44>)
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	4a06      	ldr	r2, [pc, #24]	; (8006014 <FLASH_Program_HalfWord+0x44>)
 8005ffa:	f043 0301 	orr.w	r3, r3, #1
 8005ffe:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	887a      	ldrh	r2, [r7, #2]
 8006004:	801a      	strh	r2, [r3, #0]
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	40023c00 	.word	0x40023c00

08006018 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006024:	4b0c      	ldr	r3, [pc, #48]	; (8006058 <FLASH_Program_Byte+0x40>)
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	4a0b      	ldr	r2, [pc, #44]	; (8006058 <FLASH_Program_Byte+0x40>)
 800602a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800602e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006030:	4b09      	ldr	r3, [pc, #36]	; (8006058 <FLASH_Program_Byte+0x40>)
 8006032:	4a09      	ldr	r2, [pc, #36]	; (8006058 <FLASH_Program_Byte+0x40>)
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006038:	4b07      	ldr	r3, [pc, #28]	; (8006058 <FLASH_Program_Byte+0x40>)
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	4a06      	ldr	r2, [pc, #24]	; (8006058 <FLASH_Program_Byte+0x40>)
 800603e:	f043 0301 	orr.w	r3, r3, #1
 8006042:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	78fa      	ldrb	r2, [r7, #3]
 8006048:	701a      	strb	r2, [r3, #0]
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	40023c00 	.word	0x40023c00

0800605c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006060:	4b27      	ldr	r3, [pc, #156]	; (8006100 <FLASH_SetErrorCode+0xa4>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f003 0310 	and.w	r3, r3, #16
 8006068:	2b00      	cmp	r3, #0
 800606a:	d008      	beq.n	800607e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800606c:	4b25      	ldr	r3, [pc, #148]	; (8006104 <FLASH_SetErrorCode+0xa8>)
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	f043 0310 	orr.w	r3, r3, #16
 8006074:	4a23      	ldr	r2, [pc, #140]	; (8006104 <FLASH_SetErrorCode+0xa8>)
 8006076:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006078:	4b21      	ldr	r3, [pc, #132]	; (8006100 <FLASH_SetErrorCode+0xa4>)
 800607a:	2210      	movs	r2, #16
 800607c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800607e:	4b20      	ldr	r3, [pc, #128]	; (8006100 <FLASH_SetErrorCode+0xa4>)
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f003 0320 	and.w	r3, r3, #32
 8006086:	2b00      	cmp	r3, #0
 8006088:	d008      	beq.n	800609c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800608a:	4b1e      	ldr	r3, [pc, #120]	; (8006104 <FLASH_SetErrorCode+0xa8>)
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	f043 0308 	orr.w	r3, r3, #8
 8006092:	4a1c      	ldr	r2, [pc, #112]	; (8006104 <FLASH_SetErrorCode+0xa8>)
 8006094:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006096:	4b1a      	ldr	r3, [pc, #104]	; (8006100 <FLASH_SetErrorCode+0xa4>)
 8006098:	2220      	movs	r2, #32
 800609a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800609c:	4b18      	ldr	r3, [pc, #96]	; (8006100 <FLASH_SetErrorCode+0xa4>)
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d008      	beq.n	80060ba <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80060a8:	4b16      	ldr	r3, [pc, #88]	; (8006104 <FLASH_SetErrorCode+0xa8>)
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	f043 0304 	orr.w	r3, r3, #4
 80060b0:	4a14      	ldr	r2, [pc, #80]	; (8006104 <FLASH_SetErrorCode+0xa8>)
 80060b2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80060b4:	4b12      	ldr	r3, [pc, #72]	; (8006100 <FLASH_SetErrorCode+0xa4>)
 80060b6:	2240      	movs	r2, #64	; 0x40
 80060b8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80060ba:	4b11      	ldr	r3, [pc, #68]	; (8006100 <FLASH_SetErrorCode+0xa4>)
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d008      	beq.n	80060d8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80060c6:	4b0f      	ldr	r3, [pc, #60]	; (8006104 <FLASH_SetErrorCode+0xa8>)
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f043 0302 	orr.w	r3, r3, #2
 80060ce:	4a0d      	ldr	r2, [pc, #52]	; (8006104 <FLASH_SetErrorCode+0xa8>)
 80060d0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80060d2:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <FLASH_SetErrorCode+0xa4>)
 80060d4:	2280      	movs	r2, #128	; 0x80
 80060d6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80060d8:	4b09      	ldr	r3, [pc, #36]	; (8006100 <FLASH_SetErrorCode+0xa4>)
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d008      	beq.n	80060f6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80060e4:	4b07      	ldr	r3, [pc, #28]	; (8006104 <FLASH_SetErrorCode+0xa8>)
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	f043 0320 	orr.w	r3, r3, #32
 80060ec:	4a05      	ldr	r2, [pc, #20]	; (8006104 <FLASH_SetErrorCode+0xa8>)
 80060ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80060f0:	4b03      	ldr	r3, [pc, #12]	; (8006100 <FLASH_SetErrorCode+0xa4>)
 80060f2:	2202      	movs	r2, #2
 80060f4:	60da      	str	r2, [r3, #12]
  }
}
 80060f6:	bf00      	nop
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	40023c00 	.word	0x40023c00
 8006104:	20002630 	.word	0x20002630

08006108 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800611a:	4b31      	ldr	r3, [pc, #196]	; (80061e0 <HAL_FLASHEx_Erase+0xd8>)
 800611c:	7e1b      	ldrb	r3, [r3, #24]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <HAL_FLASHEx_Erase+0x1e>
 8006122:	2302      	movs	r3, #2
 8006124:	e058      	b.n	80061d8 <HAL_FLASHEx_Erase+0xd0>
 8006126:	4b2e      	ldr	r3, [pc, #184]	; (80061e0 <HAL_FLASHEx_Erase+0xd8>)
 8006128:	2201      	movs	r2, #1
 800612a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800612c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006130:	f7ff feba 	bl	8005ea8 <FLASH_WaitForLastOperation>
 8006134:	4603      	mov	r3, r0
 8006136:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006138:	7bfb      	ldrb	r3, [r7, #15]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d148      	bne.n	80061d0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006144:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d115      	bne.n	800617a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	b2da      	uxtb	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	4619      	mov	r1, r3
 800615a:	4610      	mov	r0, r2
 800615c:	f000 f844 	bl	80061e8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006160:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006164:	f7ff fea0 	bl	8005ea8 <FLASH_WaitForLastOperation>
 8006168:	4603      	mov	r3, r0
 800616a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800616c:	4b1d      	ldr	r3, [pc, #116]	; (80061e4 <HAL_FLASHEx_Erase+0xdc>)
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	4a1c      	ldr	r2, [pc, #112]	; (80061e4 <HAL_FLASHEx_Erase+0xdc>)
 8006172:	f023 0304 	bic.w	r3, r3, #4
 8006176:	6113      	str	r3, [r2, #16]
 8006178:	e028      	b.n	80061cc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	60bb      	str	r3, [r7, #8]
 8006180:	e01c      	b.n	80061bc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	b2db      	uxtb	r3, r3
 8006188:	4619      	mov	r1, r3
 800618a:	68b8      	ldr	r0, [r7, #8]
 800618c:	f000 f850 	bl	8006230 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006190:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006194:	f7ff fe88 	bl	8005ea8 <FLASH_WaitForLastOperation>
 8006198:	4603      	mov	r3, r0
 800619a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800619c:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <HAL_FLASHEx_Erase+0xdc>)
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	4a10      	ldr	r2, [pc, #64]	; (80061e4 <HAL_FLASHEx_Erase+0xdc>)
 80061a2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80061a6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	601a      	str	r2, [r3, #0]
          break;
 80061b4:	e00a      	b.n	80061cc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	3301      	adds	r3, #1
 80061ba:	60bb      	str	r3, [r7, #8]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	4413      	add	r3, r2
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d3da      	bcc.n	8006182 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80061cc:	f000 f878 	bl	80062c0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80061d0:	4b03      	ldr	r3, [pc, #12]	; (80061e0 <HAL_FLASHEx_Erase+0xd8>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	761a      	strb	r2, [r3, #24]

  return status;
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	20002630 	.word	0x20002630
 80061e4:	40023c00 	.word	0x40023c00

080061e8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	4603      	mov	r3, r0
 80061f0:	6039      	str	r1, [r7, #0]
 80061f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80061f4:	4b0d      	ldr	r3, [pc, #52]	; (800622c <FLASH_MassErase+0x44>)
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	4a0c      	ldr	r2, [pc, #48]	; (800622c <FLASH_MassErase+0x44>)
 80061fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8006200:	4b0a      	ldr	r3, [pc, #40]	; (800622c <FLASH_MassErase+0x44>)
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	4a09      	ldr	r2, [pc, #36]	; (800622c <FLASH_MassErase+0x44>)
 8006206:	f043 0304 	orr.w	r3, r3, #4
 800620a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800620c:	4b07      	ldr	r3, [pc, #28]	; (800622c <FLASH_MassErase+0x44>)
 800620e:	691a      	ldr	r2, [r3, #16]
 8006210:	79fb      	ldrb	r3, [r7, #7]
 8006212:	021b      	lsls	r3, r3, #8
 8006214:	4313      	orrs	r3, r2
 8006216:	4a05      	ldr	r2, [pc, #20]	; (800622c <FLASH_MassErase+0x44>)
 8006218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800621c:	6113      	str	r3, [r2, #16]
}
 800621e:	bf00      	nop
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	40023c00 	.word	0x40023c00

08006230 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	460b      	mov	r3, r1
 800623a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d102      	bne.n	800624c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8006246:	2300      	movs	r3, #0
 8006248:	60fb      	str	r3, [r7, #12]
 800624a:	e010      	b.n	800626e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d103      	bne.n	800625a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	e009      	b.n	800626e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800625a:	78fb      	ldrb	r3, [r7, #3]
 800625c:	2b02      	cmp	r3, #2
 800625e:	d103      	bne.n	8006268 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006264:	60fb      	str	r3, [r7, #12]
 8006266:	e002      	b.n	800626e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006268:	f44f 7340 	mov.w	r3, #768	; 0x300
 800626c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800626e:	4b13      	ldr	r3, [pc, #76]	; (80062bc <FLASH_Erase_Sector+0x8c>)
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	4a12      	ldr	r2, [pc, #72]	; (80062bc <FLASH_Erase_Sector+0x8c>)
 8006274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006278:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800627a:	4b10      	ldr	r3, [pc, #64]	; (80062bc <FLASH_Erase_Sector+0x8c>)
 800627c:	691a      	ldr	r2, [r3, #16]
 800627e:	490f      	ldr	r1, [pc, #60]	; (80062bc <FLASH_Erase_Sector+0x8c>)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006286:	4b0d      	ldr	r3, [pc, #52]	; (80062bc <FLASH_Erase_Sector+0x8c>)
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	4a0c      	ldr	r2, [pc, #48]	; (80062bc <FLASH_Erase_Sector+0x8c>)
 800628c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006290:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006292:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <FLASH_Erase_Sector+0x8c>)
 8006294:	691a      	ldr	r2, [r3, #16]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	00db      	lsls	r3, r3, #3
 800629a:	4313      	orrs	r3, r2
 800629c:	4a07      	ldr	r2, [pc, #28]	; (80062bc <FLASH_Erase_Sector+0x8c>)
 800629e:	f043 0302 	orr.w	r3, r3, #2
 80062a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80062a4:	4b05      	ldr	r3, [pc, #20]	; (80062bc <FLASH_Erase_Sector+0x8c>)
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	4a04      	ldr	r2, [pc, #16]	; (80062bc <FLASH_Erase_Sector+0x8c>)
 80062aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ae:	6113      	str	r3, [r2, #16]
}
 80062b0:	bf00      	nop
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	40023c00 	.word	0x40023c00

080062c0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80062c4:	4b20      	ldr	r3, [pc, #128]	; (8006348 <FLASH_FlushCaches+0x88>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d017      	beq.n	8006300 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80062d0:	4b1d      	ldr	r3, [pc, #116]	; (8006348 <FLASH_FlushCaches+0x88>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a1c      	ldr	r2, [pc, #112]	; (8006348 <FLASH_FlushCaches+0x88>)
 80062d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062da:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80062dc:	4b1a      	ldr	r3, [pc, #104]	; (8006348 <FLASH_FlushCaches+0x88>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a19      	ldr	r2, [pc, #100]	; (8006348 <FLASH_FlushCaches+0x88>)
 80062e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80062e6:	6013      	str	r3, [r2, #0]
 80062e8:	4b17      	ldr	r3, [pc, #92]	; (8006348 <FLASH_FlushCaches+0x88>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a16      	ldr	r2, [pc, #88]	; (8006348 <FLASH_FlushCaches+0x88>)
 80062ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062f2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80062f4:	4b14      	ldr	r3, [pc, #80]	; (8006348 <FLASH_FlushCaches+0x88>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a13      	ldr	r2, [pc, #76]	; (8006348 <FLASH_FlushCaches+0x88>)
 80062fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062fe:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006300:	4b11      	ldr	r3, [pc, #68]	; (8006348 <FLASH_FlushCaches+0x88>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006308:	2b00      	cmp	r3, #0
 800630a:	d017      	beq.n	800633c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800630c:	4b0e      	ldr	r3, [pc, #56]	; (8006348 <FLASH_FlushCaches+0x88>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a0d      	ldr	r2, [pc, #52]	; (8006348 <FLASH_FlushCaches+0x88>)
 8006312:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006316:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006318:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <FLASH_FlushCaches+0x88>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a0a      	ldr	r2, [pc, #40]	; (8006348 <FLASH_FlushCaches+0x88>)
 800631e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	4b08      	ldr	r3, [pc, #32]	; (8006348 <FLASH_FlushCaches+0x88>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a07      	ldr	r2, [pc, #28]	; (8006348 <FLASH_FlushCaches+0x88>)
 800632a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800632e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006330:	4b05      	ldr	r3, [pc, #20]	; (8006348 <FLASH_FlushCaches+0x88>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a04      	ldr	r2, [pc, #16]	; (8006348 <FLASH_FlushCaches+0x88>)
 8006336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800633a:	6013      	str	r3, [r2, #0]
  }
}
 800633c:	bf00      	nop
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	40023c00 	.word	0x40023c00

0800634c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800634c:	b480      	push	{r7}
 800634e:	b089      	sub	sp, #36	; 0x24
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006356:	2300      	movs	r3, #0
 8006358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800635a:	2300      	movs	r3, #0
 800635c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800635e:	2300      	movs	r3, #0
 8006360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006362:	2300      	movs	r3, #0
 8006364:	61fb      	str	r3, [r7, #28]
 8006366:	e16b      	b.n	8006640 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006368:	2201      	movs	r2, #1
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	fa02 f303 	lsl.w	r3, r2, r3
 8006370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4013      	ands	r3, r2
 800637a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	429a      	cmp	r2, r3
 8006382:	f040 815a 	bne.w	800663a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f003 0303 	and.w	r3, r3, #3
 800638e:	2b01      	cmp	r3, #1
 8006390:	d005      	beq.n	800639e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800639a:	2b02      	cmp	r3, #2
 800639c:	d130      	bne.n	8006400 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	2203      	movs	r2, #3
 80063aa:	fa02 f303 	lsl.w	r3, r2, r3
 80063ae:	43db      	mvns	r3, r3
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	4013      	ands	r3, r2
 80063b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	005b      	lsls	r3, r3, #1
 80063be:	fa02 f303 	lsl.w	r3, r2, r3
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063d4:	2201      	movs	r2, #1
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	43db      	mvns	r3, r3
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	4013      	ands	r3, r2
 80063e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	091b      	lsrs	r3, r3, #4
 80063ea:	f003 0201 	and.w	r2, r3, #1
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	fa02 f303 	lsl.w	r3, r2, r3
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f003 0303 	and.w	r3, r3, #3
 8006408:	2b03      	cmp	r3, #3
 800640a:	d017      	beq.n	800643c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	2203      	movs	r2, #3
 8006418:	fa02 f303 	lsl.w	r3, r2, r3
 800641c:	43db      	mvns	r3, r3
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	4013      	ands	r3, r2
 8006422:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	fa02 f303 	lsl.w	r3, r2, r3
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	4313      	orrs	r3, r2
 8006434:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f003 0303 	and.w	r3, r3, #3
 8006444:	2b02      	cmp	r3, #2
 8006446:	d123      	bne.n	8006490 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	08da      	lsrs	r2, r3, #3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3208      	adds	r2, #8
 8006450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006454:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	220f      	movs	r2, #15
 8006460:	fa02 f303 	lsl.w	r3, r2, r3
 8006464:	43db      	mvns	r3, r3
 8006466:	69ba      	ldr	r2, [r7, #24]
 8006468:	4013      	ands	r3, r2
 800646a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	691a      	ldr	r2, [r3, #16]
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	f003 0307 	and.w	r3, r3, #7
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	fa02 f303 	lsl.w	r3, r2, r3
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	4313      	orrs	r3, r2
 8006480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	08da      	lsrs	r2, r3, #3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	3208      	adds	r2, #8
 800648a:	69b9      	ldr	r1, [r7, #24]
 800648c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	2203      	movs	r2, #3
 800649c:	fa02 f303 	lsl.w	r3, r2, r3
 80064a0:	43db      	mvns	r3, r3
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	4013      	ands	r3, r2
 80064a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f003 0203 	and.w	r2, r3, #3
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	fa02 f303 	lsl.w	r3, r2, r3
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 80b4 	beq.w	800663a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064d2:	2300      	movs	r3, #0
 80064d4:	60fb      	str	r3, [r7, #12]
 80064d6:	4b60      	ldr	r3, [pc, #384]	; (8006658 <HAL_GPIO_Init+0x30c>)
 80064d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064da:	4a5f      	ldr	r2, [pc, #380]	; (8006658 <HAL_GPIO_Init+0x30c>)
 80064dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064e0:	6453      	str	r3, [r2, #68]	; 0x44
 80064e2:	4b5d      	ldr	r3, [pc, #372]	; (8006658 <HAL_GPIO_Init+0x30c>)
 80064e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064ee:	4a5b      	ldr	r2, [pc, #364]	; (800665c <HAL_GPIO_Init+0x310>)
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	089b      	lsrs	r3, r3, #2
 80064f4:	3302      	adds	r3, #2
 80064f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	220f      	movs	r2, #15
 8006506:	fa02 f303 	lsl.w	r3, r2, r3
 800650a:	43db      	mvns	r3, r3
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	4013      	ands	r3, r2
 8006510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a52      	ldr	r2, [pc, #328]	; (8006660 <HAL_GPIO_Init+0x314>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d02b      	beq.n	8006572 <HAL_GPIO_Init+0x226>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a51      	ldr	r2, [pc, #324]	; (8006664 <HAL_GPIO_Init+0x318>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d025      	beq.n	800656e <HAL_GPIO_Init+0x222>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a50      	ldr	r2, [pc, #320]	; (8006668 <HAL_GPIO_Init+0x31c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d01f      	beq.n	800656a <HAL_GPIO_Init+0x21e>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a4f      	ldr	r2, [pc, #316]	; (800666c <HAL_GPIO_Init+0x320>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d019      	beq.n	8006566 <HAL_GPIO_Init+0x21a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a4e      	ldr	r2, [pc, #312]	; (8006670 <HAL_GPIO_Init+0x324>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d013      	beq.n	8006562 <HAL_GPIO_Init+0x216>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a4d      	ldr	r2, [pc, #308]	; (8006674 <HAL_GPIO_Init+0x328>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d00d      	beq.n	800655e <HAL_GPIO_Init+0x212>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a4c      	ldr	r2, [pc, #304]	; (8006678 <HAL_GPIO_Init+0x32c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d007      	beq.n	800655a <HAL_GPIO_Init+0x20e>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a4b      	ldr	r2, [pc, #300]	; (800667c <HAL_GPIO_Init+0x330>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d101      	bne.n	8006556 <HAL_GPIO_Init+0x20a>
 8006552:	2307      	movs	r3, #7
 8006554:	e00e      	b.n	8006574 <HAL_GPIO_Init+0x228>
 8006556:	2308      	movs	r3, #8
 8006558:	e00c      	b.n	8006574 <HAL_GPIO_Init+0x228>
 800655a:	2306      	movs	r3, #6
 800655c:	e00a      	b.n	8006574 <HAL_GPIO_Init+0x228>
 800655e:	2305      	movs	r3, #5
 8006560:	e008      	b.n	8006574 <HAL_GPIO_Init+0x228>
 8006562:	2304      	movs	r3, #4
 8006564:	e006      	b.n	8006574 <HAL_GPIO_Init+0x228>
 8006566:	2303      	movs	r3, #3
 8006568:	e004      	b.n	8006574 <HAL_GPIO_Init+0x228>
 800656a:	2302      	movs	r3, #2
 800656c:	e002      	b.n	8006574 <HAL_GPIO_Init+0x228>
 800656e:	2301      	movs	r3, #1
 8006570:	e000      	b.n	8006574 <HAL_GPIO_Init+0x228>
 8006572:	2300      	movs	r3, #0
 8006574:	69fa      	ldr	r2, [r7, #28]
 8006576:	f002 0203 	and.w	r2, r2, #3
 800657a:	0092      	lsls	r2, r2, #2
 800657c:	4093      	lsls	r3, r2
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	4313      	orrs	r3, r2
 8006582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006584:	4935      	ldr	r1, [pc, #212]	; (800665c <HAL_GPIO_Init+0x310>)
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	089b      	lsrs	r3, r3, #2
 800658a:	3302      	adds	r3, #2
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006592:	4b3b      	ldr	r3, [pc, #236]	; (8006680 <HAL_GPIO_Init+0x334>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	43db      	mvns	r3, r3
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	4013      	ands	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80065b6:	4a32      	ldr	r2, [pc, #200]	; (8006680 <HAL_GPIO_Init+0x334>)
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80065bc:	4b30      	ldr	r3, [pc, #192]	; (8006680 <HAL_GPIO_Init+0x334>)
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	43db      	mvns	r3, r3
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	4013      	ands	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	4313      	orrs	r3, r2
 80065de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065e0:	4a27      	ldr	r2, [pc, #156]	; (8006680 <HAL_GPIO_Init+0x334>)
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80065e6:	4b26      	ldr	r3, [pc, #152]	; (8006680 <HAL_GPIO_Init+0x334>)
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	43db      	mvns	r3, r3
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	4013      	ands	r3, r2
 80065f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	4313      	orrs	r3, r2
 8006608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800660a:	4a1d      	ldr	r2, [pc, #116]	; (8006680 <HAL_GPIO_Init+0x334>)
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006610:	4b1b      	ldr	r3, [pc, #108]	; (8006680 <HAL_GPIO_Init+0x334>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	43db      	mvns	r3, r3
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	4013      	ands	r3, r2
 800661e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4313      	orrs	r3, r2
 8006632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006634:	4a12      	ldr	r2, [pc, #72]	; (8006680 <HAL_GPIO_Init+0x334>)
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	3301      	adds	r3, #1
 800663e:	61fb      	str	r3, [r7, #28]
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	2b0f      	cmp	r3, #15
 8006644:	f67f ae90 	bls.w	8006368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006648:	bf00      	nop
 800664a:	bf00      	nop
 800664c:	3724      	adds	r7, #36	; 0x24
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	40023800 	.word	0x40023800
 800665c:	40013800 	.word	0x40013800
 8006660:	40020000 	.word	0x40020000
 8006664:	40020400 	.word	0x40020400
 8006668:	40020800 	.word	0x40020800
 800666c:	40020c00 	.word	0x40020c00
 8006670:	40021000 	.word	0x40021000
 8006674:	40021400 	.word	0x40021400
 8006678:	40021800 	.word	0x40021800
 800667c:	40021c00 	.word	0x40021c00
 8006680:	40013c00 	.word	0x40013c00

08006684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	460b      	mov	r3, r1
 800668e:	807b      	strh	r3, [r7, #2]
 8006690:	4613      	mov	r3, r2
 8006692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006694:	787b      	ldrb	r3, [r7, #1]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800669a:	887a      	ldrh	r2, [r7, #2]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80066a0:	e003      	b.n	80066aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80066a2:	887b      	ldrh	r3, [r7, #2]
 80066a4:	041a      	lsls	r2, r3, #16
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	619a      	str	r2, [r3, #24]
}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b085      	sub	sp, #20
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	460b      	mov	r3, r1
 80066c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80066c8:	887a      	ldrh	r2, [r7, #2]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	4013      	ands	r3, r2
 80066ce:	041a      	lsls	r2, r3, #16
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	43d9      	mvns	r1, r3
 80066d4:	887b      	ldrh	r3, [r7, #2]
 80066d6:	400b      	ands	r3, r1
 80066d8:	431a      	orrs	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	619a      	str	r2, [r3, #24]
}
 80066de:	bf00      	nop
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
	...

080066ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e12b      	b.n	8006956 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d106      	bne.n	8006718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7fc ff6c 	bl	80035f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2224      	movs	r2, #36	; 0x24
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0201 	bic.w	r2, r2, #1
 800672e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800673e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800674e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006750:	f000 fd40 	bl	80071d4 <HAL_RCC_GetPCLK1Freq>
 8006754:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	4a81      	ldr	r2, [pc, #516]	; (8006960 <HAL_I2C_Init+0x274>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d807      	bhi.n	8006770 <HAL_I2C_Init+0x84>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4a80      	ldr	r2, [pc, #512]	; (8006964 <HAL_I2C_Init+0x278>)
 8006764:	4293      	cmp	r3, r2
 8006766:	bf94      	ite	ls
 8006768:	2301      	movls	r3, #1
 800676a:	2300      	movhi	r3, #0
 800676c:	b2db      	uxtb	r3, r3
 800676e:	e006      	b.n	800677e <HAL_I2C_Init+0x92>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4a7d      	ldr	r2, [pc, #500]	; (8006968 <HAL_I2C_Init+0x27c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	bf94      	ite	ls
 8006778:	2301      	movls	r3, #1
 800677a:	2300      	movhi	r3, #0
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e0e7      	b.n	8006956 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4a78      	ldr	r2, [pc, #480]	; (800696c <HAL_I2C_Init+0x280>)
 800678a:	fba2 2303 	umull	r2, r3, r2, r3
 800678e:	0c9b      	lsrs	r3, r3, #18
 8006790:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4a6a      	ldr	r2, [pc, #424]	; (8006960 <HAL_I2C_Init+0x274>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d802      	bhi.n	80067c0 <HAL_I2C_Init+0xd4>
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	3301      	adds	r3, #1
 80067be:	e009      	b.n	80067d4 <HAL_I2C_Init+0xe8>
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80067c6:	fb02 f303 	mul.w	r3, r2, r3
 80067ca:	4a69      	ldr	r2, [pc, #420]	; (8006970 <HAL_I2C_Init+0x284>)
 80067cc:	fba2 2303 	umull	r2, r3, r2, r3
 80067d0:	099b      	lsrs	r3, r3, #6
 80067d2:	3301      	adds	r3, #1
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6812      	ldr	r2, [r2, #0]
 80067d8:	430b      	orrs	r3, r1
 80067da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80067e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	495c      	ldr	r1, [pc, #368]	; (8006960 <HAL_I2C_Init+0x274>)
 80067f0:	428b      	cmp	r3, r1
 80067f2:	d819      	bhi.n	8006828 <HAL_I2C_Init+0x13c>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	1e59      	subs	r1, r3, #1
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006802:	1c59      	adds	r1, r3, #1
 8006804:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006808:	400b      	ands	r3, r1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <HAL_I2C_Init+0x138>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	1e59      	subs	r1, r3, #1
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	fbb1 f3f3 	udiv	r3, r1, r3
 800681c:	3301      	adds	r3, #1
 800681e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006822:	e051      	b.n	80068c8 <HAL_I2C_Init+0x1dc>
 8006824:	2304      	movs	r3, #4
 8006826:	e04f      	b.n	80068c8 <HAL_I2C_Init+0x1dc>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d111      	bne.n	8006854 <HAL_I2C_Init+0x168>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	1e58      	subs	r0, r3, #1
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6859      	ldr	r1, [r3, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	005b      	lsls	r3, r3, #1
 800683c:	440b      	add	r3, r1
 800683e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006842:	3301      	adds	r3, #1
 8006844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006848:	2b00      	cmp	r3, #0
 800684a:	bf0c      	ite	eq
 800684c:	2301      	moveq	r3, #1
 800684e:	2300      	movne	r3, #0
 8006850:	b2db      	uxtb	r3, r3
 8006852:	e012      	b.n	800687a <HAL_I2C_Init+0x18e>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	1e58      	subs	r0, r3, #1
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6859      	ldr	r1, [r3, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	440b      	add	r3, r1
 8006862:	0099      	lsls	r1, r3, #2
 8006864:	440b      	add	r3, r1
 8006866:	fbb0 f3f3 	udiv	r3, r0, r3
 800686a:	3301      	adds	r3, #1
 800686c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006870:	2b00      	cmp	r3, #0
 8006872:	bf0c      	ite	eq
 8006874:	2301      	moveq	r3, #1
 8006876:	2300      	movne	r3, #0
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <HAL_I2C_Init+0x196>
 800687e:	2301      	movs	r3, #1
 8006880:	e022      	b.n	80068c8 <HAL_I2C_Init+0x1dc>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10e      	bne.n	80068a8 <HAL_I2C_Init+0x1bc>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	1e58      	subs	r0, r3, #1
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6859      	ldr	r1, [r3, #4]
 8006892:	460b      	mov	r3, r1
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	440b      	add	r3, r1
 8006898:	fbb0 f3f3 	udiv	r3, r0, r3
 800689c:	3301      	adds	r3, #1
 800689e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a6:	e00f      	b.n	80068c8 <HAL_I2C_Init+0x1dc>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	1e58      	subs	r0, r3, #1
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6859      	ldr	r1, [r3, #4]
 80068b0:	460b      	mov	r3, r1
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	440b      	add	r3, r1
 80068b6:	0099      	lsls	r1, r3, #2
 80068b8:	440b      	add	r3, r1
 80068ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80068be:	3301      	adds	r3, #1
 80068c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068c8:	6879      	ldr	r1, [r7, #4]
 80068ca:	6809      	ldr	r1, [r1, #0]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69da      	ldr	r2, [r3, #28]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80068f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	6911      	ldr	r1, [r2, #16]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	68d2      	ldr	r2, [r2, #12]
 8006902:	4311      	orrs	r1, r2
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	6812      	ldr	r2, [r2, #0]
 8006908:	430b      	orrs	r3, r1
 800690a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	695a      	ldr	r2, [r3, #20]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	431a      	orrs	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0201 	orr.w	r2, r2, #1
 8006936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2220      	movs	r2, #32
 8006942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	000186a0 	.word	0x000186a0
 8006964:	001e847f 	.word	0x001e847f
 8006968:	003d08ff 	.word	0x003d08ff
 800696c:	431bde83 	.word	0x431bde83
 8006970:	10624dd3 	.word	0x10624dd3

08006974 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e267      	b.n	8006e56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d075      	beq.n	8006a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006992:	4b88      	ldr	r3, [pc, #544]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f003 030c 	and.w	r3, r3, #12
 800699a:	2b04      	cmp	r3, #4
 800699c:	d00c      	beq.n	80069b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800699e:	4b85      	ldr	r3, [pc, #532]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069a6:	2b08      	cmp	r3, #8
 80069a8:	d112      	bne.n	80069d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069aa:	4b82      	ldr	r3, [pc, #520]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069b6:	d10b      	bne.n	80069d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069b8:	4b7e      	ldr	r3, [pc, #504]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d05b      	beq.n	8006a7c <HAL_RCC_OscConfig+0x108>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d157      	bne.n	8006a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e242      	b.n	8006e56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d8:	d106      	bne.n	80069e8 <HAL_RCC_OscConfig+0x74>
 80069da:	4b76      	ldr	r3, [pc, #472]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a75      	ldr	r2, [pc, #468]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 80069e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	e01d      	b.n	8006a24 <HAL_RCC_OscConfig+0xb0>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069f0:	d10c      	bne.n	8006a0c <HAL_RCC_OscConfig+0x98>
 80069f2:	4b70      	ldr	r3, [pc, #448]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a6f      	ldr	r2, [pc, #444]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 80069f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	4b6d      	ldr	r3, [pc, #436]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a6c      	ldr	r2, [pc, #432]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 8006a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a08:	6013      	str	r3, [r2, #0]
 8006a0a:	e00b      	b.n	8006a24 <HAL_RCC_OscConfig+0xb0>
 8006a0c:	4b69      	ldr	r3, [pc, #420]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a68      	ldr	r2, [pc, #416]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 8006a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	4b66      	ldr	r3, [pc, #408]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a65      	ldr	r2, [pc, #404]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 8006a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d013      	beq.n	8006a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a2c:	f7fe fca2 	bl	8005374 <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a34:	f7fe fc9e 	bl	8005374 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b64      	cmp	r3, #100	; 0x64
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e207      	b.n	8006e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a46:	4b5b      	ldr	r3, [pc, #364]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0f0      	beq.n	8006a34 <HAL_RCC_OscConfig+0xc0>
 8006a52:	e014      	b.n	8006a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a54:	f7fe fc8e 	bl	8005374 <HAL_GetTick>
 8006a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a5a:	e008      	b.n	8006a6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a5c:	f7fe fc8a 	bl	8005374 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	2b64      	cmp	r3, #100	; 0x64
 8006a68:	d901      	bls.n	8006a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e1f3      	b.n	8006e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a6e:	4b51      	ldr	r3, [pc, #324]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1f0      	bne.n	8006a5c <HAL_RCC_OscConfig+0xe8>
 8006a7a:	e000      	b.n	8006a7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d063      	beq.n	8006b52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a8a:	4b4a      	ldr	r3, [pc, #296]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f003 030c 	and.w	r3, r3, #12
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00b      	beq.n	8006aae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a96:	4b47      	ldr	r3, [pc, #284]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a9e:	2b08      	cmp	r3, #8
 8006aa0:	d11c      	bne.n	8006adc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006aa2:	4b44      	ldr	r3, [pc, #272]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d116      	bne.n	8006adc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aae:	4b41      	ldr	r3, [pc, #260]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d005      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x152>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d001      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e1c7      	b.n	8006e56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ac6:	4b3b      	ldr	r3, [pc, #236]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	00db      	lsls	r3, r3, #3
 8006ad4:	4937      	ldr	r1, [pc, #220]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ada:	e03a      	b.n	8006b52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d020      	beq.n	8006b26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ae4:	4b34      	ldr	r3, [pc, #208]	; (8006bb8 <HAL_RCC_OscConfig+0x244>)
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aea:	f7fe fc43 	bl	8005374 <HAL_GetTick>
 8006aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006af0:	e008      	b.n	8006b04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006af2:	f7fe fc3f 	bl	8005374 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d901      	bls.n	8006b04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e1a8      	b.n	8006e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b04:	4b2b      	ldr	r3, [pc, #172]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d0f0      	beq.n	8006af2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b10:	4b28      	ldr	r3, [pc, #160]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	4925      	ldr	r1, [pc, #148]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	600b      	str	r3, [r1, #0]
 8006b24:	e015      	b.n	8006b52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b26:	4b24      	ldr	r3, [pc, #144]	; (8006bb8 <HAL_RCC_OscConfig+0x244>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b2c:	f7fe fc22 	bl	8005374 <HAL_GetTick>
 8006b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b32:	e008      	b.n	8006b46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b34:	f7fe fc1e 	bl	8005374 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e187      	b.n	8006e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b46:	4b1b      	ldr	r3, [pc, #108]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1f0      	bne.n	8006b34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0308 	and.w	r3, r3, #8
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d036      	beq.n	8006bcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d016      	beq.n	8006b94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b66:	4b15      	ldr	r3, [pc, #84]	; (8006bbc <HAL_RCC_OscConfig+0x248>)
 8006b68:	2201      	movs	r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b6c:	f7fe fc02 	bl	8005374 <HAL_GetTick>
 8006b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b72:	e008      	b.n	8006b86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b74:	f7fe fbfe 	bl	8005374 <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d901      	bls.n	8006b86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e167      	b.n	8006e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b86:	4b0b      	ldr	r3, [pc, #44]	; (8006bb4 <HAL_RCC_OscConfig+0x240>)
 8006b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d0f0      	beq.n	8006b74 <HAL_RCC_OscConfig+0x200>
 8006b92:	e01b      	b.n	8006bcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b94:	4b09      	ldr	r3, [pc, #36]	; (8006bbc <HAL_RCC_OscConfig+0x248>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b9a:	f7fe fbeb 	bl	8005374 <HAL_GetTick>
 8006b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ba0:	e00e      	b.n	8006bc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ba2:	f7fe fbe7 	bl	8005374 <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d907      	bls.n	8006bc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e150      	b.n	8006e56 <HAL_RCC_OscConfig+0x4e2>
 8006bb4:	40023800 	.word	0x40023800
 8006bb8:	42470000 	.word	0x42470000
 8006bbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bc0:	4b88      	ldr	r3, [pc, #544]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1ea      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 8097 	beq.w	8006d08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bde:	4b81      	ldr	r3, [pc, #516]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10f      	bne.n	8006c0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bea:	2300      	movs	r3, #0
 8006bec:	60bb      	str	r3, [r7, #8]
 8006bee:	4b7d      	ldr	r3, [pc, #500]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	4a7c      	ldr	r2, [pc, #496]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8006bfa:	4b7a      	ldr	r3, [pc, #488]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c02:	60bb      	str	r3, [r7, #8]
 8006c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c06:	2301      	movs	r3, #1
 8006c08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c0a:	4b77      	ldr	r3, [pc, #476]	; (8006de8 <HAL_RCC_OscConfig+0x474>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d118      	bne.n	8006c48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c16:	4b74      	ldr	r3, [pc, #464]	; (8006de8 <HAL_RCC_OscConfig+0x474>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a73      	ldr	r2, [pc, #460]	; (8006de8 <HAL_RCC_OscConfig+0x474>)
 8006c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c22:	f7fe fba7 	bl	8005374 <HAL_GetTick>
 8006c26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c28:	e008      	b.n	8006c3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c2a:	f7fe fba3 	bl	8005374 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d901      	bls.n	8006c3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e10c      	b.n	8006e56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c3c:	4b6a      	ldr	r3, [pc, #424]	; (8006de8 <HAL_RCC_OscConfig+0x474>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0f0      	beq.n	8006c2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d106      	bne.n	8006c5e <HAL_RCC_OscConfig+0x2ea>
 8006c50:	4b64      	ldr	r3, [pc, #400]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c54:	4a63      	ldr	r2, [pc, #396]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006c56:	f043 0301 	orr.w	r3, r3, #1
 8006c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c5c:	e01c      	b.n	8006c98 <HAL_RCC_OscConfig+0x324>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	2b05      	cmp	r3, #5
 8006c64:	d10c      	bne.n	8006c80 <HAL_RCC_OscConfig+0x30c>
 8006c66:	4b5f      	ldr	r3, [pc, #380]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6a:	4a5e      	ldr	r2, [pc, #376]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006c6c:	f043 0304 	orr.w	r3, r3, #4
 8006c70:	6713      	str	r3, [r2, #112]	; 0x70
 8006c72:	4b5c      	ldr	r3, [pc, #368]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c76:	4a5b      	ldr	r2, [pc, #364]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006c78:	f043 0301 	orr.w	r3, r3, #1
 8006c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c7e:	e00b      	b.n	8006c98 <HAL_RCC_OscConfig+0x324>
 8006c80:	4b58      	ldr	r3, [pc, #352]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c84:	4a57      	ldr	r2, [pc, #348]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006c86:	f023 0301 	bic.w	r3, r3, #1
 8006c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c8c:	4b55      	ldr	r3, [pc, #340]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c90:	4a54      	ldr	r2, [pc, #336]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006c92:	f023 0304 	bic.w	r3, r3, #4
 8006c96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d015      	beq.n	8006ccc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca0:	f7fe fb68 	bl	8005374 <HAL_GetTick>
 8006ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ca6:	e00a      	b.n	8006cbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ca8:	f7fe fb64 	bl	8005374 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e0cb      	b.n	8006e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cbe:	4b49      	ldr	r3, [pc, #292]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0ee      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x334>
 8006cca:	e014      	b.n	8006cf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ccc:	f7fe fb52 	bl	8005374 <HAL_GetTick>
 8006cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cd2:	e00a      	b.n	8006cea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cd4:	f7fe fb4e 	bl	8005374 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e0b5      	b.n	8006e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cea:	4b3e      	ldr	r3, [pc, #248]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1ee      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d105      	bne.n	8006d08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cfc:	4b39      	ldr	r3, [pc, #228]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d00:	4a38      	ldr	r2, [pc, #224]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 80a1 	beq.w	8006e54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d12:	4b34      	ldr	r3, [pc, #208]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f003 030c 	and.w	r3, r3, #12
 8006d1a:	2b08      	cmp	r3, #8
 8006d1c:	d05c      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d141      	bne.n	8006daa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d26:	4b31      	ldr	r3, [pc, #196]	; (8006dec <HAL_RCC_OscConfig+0x478>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d2c:	f7fe fb22 	bl	8005374 <HAL_GetTick>
 8006d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d32:	e008      	b.n	8006d46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d34:	f7fe fb1e 	bl	8005374 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d901      	bls.n	8006d46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e087      	b.n	8006e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d46:	4b27      	ldr	r3, [pc, #156]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1f0      	bne.n	8006d34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	69da      	ldr	r2, [r3, #28]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d60:	019b      	lsls	r3, r3, #6
 8006d62:	431a      	orrs	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d68:	085b      	lsrs	r3, r3, #1
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	041b      	lsls	r3, r3, #16
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d74:	061b      	lsls	r3, r3, #24
 8006d76:	491b      	ldr	r1, [pc, #108]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d7c:	4b1b      	ldr	r3, [pc, #108]	; (8006dec <HAL_RCC_OscConfig+0x478>)
 8006d7e:	2201      	movs	r2, #1
 8006d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d82:	f7fe faf7 	bl	8005374 <HAL_GetTick>
 8006d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d88:	e008      	b.n	8006d9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d8a:	f7fe faf3 	bl	8005374 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e05c      	b.n	8006e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d9c:	4b11      	ldr	r3, [pc, #68]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0f0      	beq.n	8006d8a <HAL_RCC_OscConfig+0x416>
 8006da8:	e054      	b.n	8006e54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006daa:	4b10      	ldr	r3, [pc, #64]	; (8006dec <HAL_RCC_OscConfig+0x478>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db0:	f7fe fae0 	bl	8005374 <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006db8:	f7fe fadc 	bl	8005374 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e045      	b.n	8006e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dca:	4b06      	ldr	r3, [pc, #24]	; (8006de4 <HAL_RCC_OscConfig+0x470>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1f0      	bne.n	8006db8 <HAL_RCC_OscConfig+0x444>
 8006dd6:	e03d      	b.n	8006e54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d107      	bne.n	8006df0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e038      	b.n	8006e56 <HAL_RCC_OscConfig+0x4e2>
 8006de4:	40023800 	.word	0x40023800
 8006de8:	40007000 	.word	0x40007000
 8006dec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006df0:	4b1b      	ldr	r3, [pc, #108]	; (8006e60 <HAL_RCC_OscConfig+0x4ec>)
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d028      	beq.n	8006e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d121      	bne.n	8006e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d11a      	bne.n	8006e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e20:	4013      	ands	r3, r2
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d111      	bne.n	8006e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e36:	085b      	lsrs	r3, r3, #1
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d107      	bne.n	8006e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d001      	beq.n	8006e54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e000      	b.n	8006e56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3718      	adds	r7, #24
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	40023800 	.word	0x40023800

08006e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e0cc      	b.n	8007012 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e78:	4b68      	ldr	r3, [pc, #416]	; (800701c <HAL_RCC_ClockConfig+0x1b8>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0307 	and.w	r3, r3, #7
 8006e80:	683a      	ldr	r2, [r7, #0]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d90c      	bls.n	8006ea0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e86:	4b65      	ldr	r3, [pc, #404]	; (800701c <HAL_RCC_ClockConfig+0x1b8>)
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	b2d2      	uxtb	r2, r2
 8006e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e8e:	4b63      	ldr	r3, [pc, #396]	; (800701c <HAL_RCC_ClockConfig+0x1b8>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0307 	and.w	r3, r3, #7
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d001      	beq.n	8006ea0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e0b8      	b.n	8007012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d020      	beq.n	8006eee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0304 	and.w	r3, r3, #4
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d005      	beq.n	8006ec4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006eb8:	4b59      	ldr	r3, [pc, #356]	; (8007020 <HAL_RCC_ClockConfig+0x1bc>)
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	4a58      	ldr	r2, [pc, #352]	; (8007020 <HAL_RCC_ClockConfig+0x1bc>)
 8006ebe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ec2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0308 	and.w	r3, r3, #8
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d005      	beq.n	8006edc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ed0:	4b53      	ldr	r3, [pc, #332]	; (8007020 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	4a52      	ldr	r2, [pc, #328]	; (8007020 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006eda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006edc:	4b50      	ldr	r3, [pc, #320]	; (8007020 <HAL_RCC_ClockConfig+0x1bc>)
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	494d      	ldr	r1, [pc, #308]	; (8007020 <HAL_RCC_ClockConfig+0x1bc>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d044      	beq.n	8006f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d107      	bne.n	8006f12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f02:	4b47      	ldr	r3, [pc, #284]	; (8007020 <HAL_RCC_ClockConfig+0x1bc>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d119      	bne.n	8006f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e07f      	b.n	8007012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d003      	beq.n	8006f22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d107      	bne.n	8006f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f22:	4b3f      	ldr	r3, [pc, #252]	; (8007020 <HAL_RCC_ClockConfig+0x1bc>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d109      	bne.n	8006f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e06f      	b.n	8007012 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f32:	4b3b      	ldr	r3, [pc, #236]	; (8007020 <HAL_RCC_ClockConfig+0x1bc>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e067      	b.n	8007012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f42:	4b37      	ldr	r3, [pc, #220]	; (8007020 <HAL_RCC_ClockConfig+0x1bc>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f023 0203 	bic.w	r2, r3, #3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	4934      	ldr	r1, [pc, #208]	; (8007020 <HAL_RCC_ClockConfig+0x1bc>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f54:	f7fe fa0e 	bl	8005374 <HAL_GetTick>
 8006f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f5a:	e00a      	b.n	8006f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f5c:	f7fe fa0a 	bl	8005374 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e04f      	b.n	8007012 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f72:	4b2b      	ldr	r3, [pc, #172]	; (8007020 <HAL_RCC_ClockConfig+0x1bc>)
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f003 020c 	and.w	r2, r3, #12
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d1eb      	bne.n	8006f5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f84:	4b25      	ldr	r3, [pc, #148]	; (800701c <HAL_RCC_ClockConfig+0x1b8>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0307 	and.w	r3, r3, #7
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d20c      	bcs.n	8006fac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f92:	4b22      	ldr	r3, [pc, #136]	; (800701c <HAL_RCC_ClockConfig+0x1b8>)
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	b2d2      	uxtb	r2, r2
 8006f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f9a:	4b20      	ldr	r3, [pc, #128]	; (800701c <HAL_RCC_ClockConfig+0x1b8>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0307 	and.w	r3, r3, #7
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d001      	beq.n	8006fac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e032      	b.n	8007012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0304 	and.w	r3, r3, #4
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d008      	beq.n	8006fca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fb8:	4b19      	ldr	r3, [pc, #100]	; (8007020 <HAL_RCC_ClockConfig+0x1bc>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	4916      	ldr	r1, [pc, #88]	; (8007020 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0308 	and.w	r3, r3, #8
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d009      	beq.n	8006fea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fd6:	4b12      	ldr	r3, [pc, #72]	; (8007020 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	490e      	ldr	r1, [pc, #56]	; (8007020 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006fea:	f000 f821 	bl	8007030 <HAL_RCC_GetSysClockFreq>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	4b0b      	ldr	r3, [pc, #44]	; (8007020 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	091b      	lsrs	r3, r3, #4
 8006ff6:	f003 030f 	and.w	r3, r3, #15
 8006ffa:	490a      	ldr	r1, [pc, #40]	; (8007024 <HAL_RCC_ClockConfig+0x1c0>)
 8006ffc:	5ccb      	ldrb	r3, [r1, r3]
 8006ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8007002:	4a09      	ldr	r2, [pc, #36]	; (8007028 <HAL_RCC_ClockConfig+0x1c4>)
 8007004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007006:	4b09      	ldr	r3, [pc, #36]	; (800702c <HAL_RCC_ClockConfig+0x1c8>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4618      	mov	r0, r3
 800700c:	f7fd fa88 	bl	8004520 <HAL_InitTick>

  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	40023c00 	.word	0x40023c00
 8007020:	40023800 	.word	0x40023800
 8007024:	0800ca94 	.word	0x0800ca94
 8007028:	20000034 	.word	0x20000034
 800702c:	20000118 	.word	0x20000118

08007030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007034:	b090      	sub	sp, #64	; 0x40
 8007036:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007038:	2300      	movs	r3, #0
 800703a:	637b      	str	r3, [r7, #52]	; 0x34
 800703c:	2300      	movs	r3, #0
 800703e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007040:	2300      	movs	r3, #0
 8007042:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007048:	4b59      	ldr	r3, [pc, #356]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f003 030c 	and.w	r3, r3, #12
 8007050:	2b08      	cmp	r3, #8
 8007052:	d00d      	beq.n	8007070 <HAL_RCC_GetSysClockFreq+0x40>
 8007054:	2b08      	cmp	r3, #8
 8007056:	f200 80a1 	bhi.w	800719c <HAL_RCC_GetSysClockFreq+0x16c>
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <HAL_RCC_GetSysClockFreq+0x34>
 800705e:	2b04      	cmp	r3, #4
 8007060:	d003      	beq.n	800706a <HAL_RCC_GetSysClockFreq+0x3a>
 8007062:	e09b      	b.n	800719c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007064:	4b53      	ldr	r3, [pc, #332]	; (80071b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007066:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007068:	e09b      	b.n	80071a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800706a:	4b53      	ldr	r3, [pc, #332]	; (80071b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800706c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800706e:	e098      	b.n	80071a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007070:	4b4f      	ldr	r3, [pc, #316]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007078:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800707a:	4b4d      	ldr	r3, [pc, #308]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d028      	beq.n	80070d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007086:	4b4a      	ldr	r3, [pc, #296]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	099b      	lsrs	r3, r3, #6
 800708c:	2200      	movs	r2, #0
 800708e:	623b      	str	r3, [r7, #32]
 8007090:	627a      	str	r2, [r7, #36]	; 0x24
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007098:	2100      	movs	r1, #0
 800709a:	4b47      	ldr	r3, [pc, #284]	; (80071b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800709c:	fb03 f201 	mul.w	r2, r3, r1
 80070a0:	2300      	movs	r3, #0
 80070a2:	fb00 f303 	mul.w	r3, r0, r3
 80070a6:	4413      	add	r3, r2
 80070a8:	4a43      	ldr	r2, [pc, #268]	; (80071b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80070aa:	fba0 1202 	umull	r1, r2, r0, r2
 80070ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070b0:	460a      	mov	r2, r1
 80070b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80070b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070b6:	4413      	add	r3, r2
 80070b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070bc:	2200      	movs	r2, #0
 80070be:	61bb      	str	r3, [r7, #24]
 80070c0:	61fa      	str	r2, [r7, #28]
 80070c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80070ca:	f7f9 fd4f 	bl	8000b6c <__aeabi_uldivmod>
 80070ce:	4602      	mov	r2, r0
 80070d0:	460b      	mov	r3, r1
 80070d2:	4613      	mov	r3, r2
 80070d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070d6:	e053      	b.n	8007180 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070d8:	4b35      	ldr	r3, [pc, #212]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	099b      	lsrs	r3, r3, #6
 80070de:	2200      	movs	r2, #0
 80070e0:	613b      	str	r3, [r7, #16]
 80070e2:	617a      	str	r2, [r7, #20]
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80070ea:	f04f 0b00 	mov.w	fp, #0
 80070ee:	4652      	mov	r2, sl
 80070f0:	465b      	mov	r3, fp
 80070f2:	f04f 0000 	mov.w	r0, #0
 80070f6:	f04f 0100 	mov.w	r1, #0
 80070fa:	0159      	lsls	r1, r3, #5
 80070fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007100:	0150      	lsls	r0, r2, #5
 8007102:	4602      	mov	r2, r0
 8007104:	460b      	mov	r3, r1
 8007106:	ebb2 080a 	subs.w	r8, r2, sl
 800710a:	eb63 090b 	sbc.w	r9, r3, fp
 800710e:	f04f 0200 	mov.w	r2, #0
 8007112:	f04f 0300 	mov.w	r3, #0
 8007116:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800711a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800711e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007122:	ebb2 0408 	subs.w	r4, r2, r8
 8007126:	eb63 0509 	sbc.w	r5, r3, r9
 800712a:	f04f 0200 	mov.w	r2, #0
 800712e:	f04f 0300 	mov.w	r3, #0
 8007132:	00eb      	lsls	r3, r5, #3
 8007134:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007138:	00e2      	lsls	r2, r4, #3
 800713a:	4614      	mov	r4, r2
 800713c:	461d      	mov	r5, r3
 800713e:	eb14 030a 	adds.w	r3, r4, sl
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	eb45 030b 	adc.w	r3, r5, fp
 8007148:	607b      	str	r3, [r7, #4]
 800714a:	f04f 0200 	mov.w	r2, #0
 800714e:	f04f 0300 	mov.w	r3, #0
 8007152:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007156:	4629      	mov	r1, r5
 8007158:	028b      	lsls	r3, r1, #10
 800715a:	4621      	mov	r1, r4
 800715c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007160:	4621      	mov	r1, r4
 8007162:	028a      	lsls	r2, r1, #10
 8007164:	4610      	mov	r0, r2
 8007166:	4619      	mov	r1, r3
 8007168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716a:	2200      	movs	r2, #0
 800716c:	60bb      	str	r3, [r7, #8]
 800716e:	60fa      	str	r2, [r7, #12]
 8007170:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007174:	f7f9 fcfa 	bl	8000b6c <__aeabi_uldivmod>
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	4613      	mov	r3, r2
 800717e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007180:	4b0b      	ldr	r3, [pc, #44]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	0c1b      	lsrs	r3, r3, #16
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	3301      	adds	r3, #1
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007190:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007194:	fbb2 f3f3 	udiv	r3, r2, r3
 8007198:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800719a:	e002      	b.n	80071a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800719c:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800719e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3740      	adds	r7, #64	; 0x40
 80071a8:	46bd      	mov	sp, r7
 80071aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071ae:	bf00      	nop
 80071b0:	40023800 	.word	0x40023800
 80071b4:	00f42400 	.word	0x00f42400
 80071b8:	016e3600 	.word	0x016e3600

080071bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071bc:	b480      	push	{r7}
 80071be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071c0:	4b03      	ldr	r3, [pc, #12]	; (80071d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80071c2:	681b      	ldr	r3, [r3, #0]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	20000034 	.word	0x20000034

080071d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80071d8:	f7ff fff0 	bl	80071bc <HAL_RCC_GetHCLKFreq>
 80071dc:	4602      	mov	r2, r0
 80071de:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	0a9b      	lsrs	r3, r3, #10
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	4903      	ldr	r1, [pc, #12]	; (80071f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071ea:	5ccb      	ldrb	r3, [r1, r3]
 80071ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	40023800 	.word	0x40023800
 80071f8:	0800caa4 	.word	0x0800caa4

080071fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007200:	f7ff ffdc 	bl	80071bc <HAL_RCC_GetHCLKFreq>
 8007204:	4602      	mov	r2, r0
 8007206:	4b05      	ldr	r3, [pc, #20]	; (800721c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	0b5b      	lsrs	r3, r3, #13
 800720c:	f003 0307 	and.w	r3, r3, #7
 8007210:	4903      	ldr	r1, [pc, #12]	; (8007220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007212:	5ccb      	ldrb	r3, [r1, r3]
 8007214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007218:	4618      	mov	r0, r3
 800721a:	bd80      	pop	{r7, pc}
 800721c:	40023800 	.word	0x40023800
 8007220:	0800caa4 	.word	0x0800caa4

08007224 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	220f      	movs	r2, #15
 8007232:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007234:	4b12      	ldr	r3, [pc, #72]	; (8007280 <HAL_RCC_GetClockConfig+0x5c>)
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f003 0203 	and.w	r2, r3, #3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007240:	4b0f      	ldr	r3, [pc, #60]	; (8007280 <HAL_RCC_GetClockConfig+0x5c>)
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800724c:	4b0c      	ldr	r3, [pc, #48]	; (8007280 <HAL_RCC_GetClockConfig+0x5c>)
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007258:	4b09      	ldr	r3, [pc, #36]	; (8007280 <HAL_RCC_GetClockConfig+0x5c>)
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	08db      	lsrs	r3, r3, #3
 800725e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007266:	4b07      	ldr	r3, [pc, #28]	; (8007284 <HAL_RCC_GetClockConfig+0x60>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0207 	and.w	r2, r3, #7
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	601a      	str	r2, [r3, #0]
}
 8007272:	bf00      	nop
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	40023800 	.word	0x40023800
 8007284:	40023c00 	.word	0x40023c00

08007288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e041      	b.n	800731e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d106      	bne.n	80072b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7fd fd04 	bl	8004cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2202      	movs	r2, #2
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3304      	adds	r3, #4
 80072c4:	4619      	mov	r1, r3
 80072c6:	4610      	mov	r0, r2
 80072c8:	f000 f9ce 	bl	8007668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b01      	cmp	r3, #1
 800733a:	d001      	beq.n	8007340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e04e      	b.n	80073de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2202      	movs	r2, #2
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68da      	ldr	r2, [r3, #12]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0201 	orr.w	r2, r2, #1
 8007356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a23      	ldr	r2, [pc, #140]	; (80073ec <HAL_TIM_Base_Start_IT+0xc4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d022      	beq.n	80073a8 <HAL_TIM_Base_Start_IT+0x80>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800736a:	d01d      	beq.n	80073a8 <HAL_TIM_Base_Start_IT+0x80>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a1f      	ldr	r2, [pc, #124]	; (80073f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d018      	beq.n	80073a8 <HAL_TIM_Base_Start_IT+0x80>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a1e      	ldr	r2, [pc, #120]	; (80073f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d013      	beq.n	80073a8 <HAL_TIM_Base_Start_IT+0x80>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a1c      	ldr	r2, [pc, #112]	; (80073f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d00e      	beq.n	80073a8 <HAL_TIM_Base_Start_IT+0x80>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a1b      	ldr	r2, [pc, #108]	; (80073fc <HAL_TIM_Base_Start_IT+0xd4>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d009      	beq.n	80073a8 <HAL_TIM_Base_Start_IT+0x80>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a19      	ldr	r2, [pc, #100]	; (8007400 <HAL_TIM_Base_Start_IT+0xd8>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d004      	beq.n	80073a8 <HAL_TIM_Base_Start_IT+0x80>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a18      	ldr	r2, [pc, #96]	; (8007404 <HAL_TIM_Base_Start_IT+0xdc>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d111      	bne.n	80073cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f003 0307 	and.w	r3, r3, #7
 80073b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2b06      	cmp	r3, #6
 80073b8:	d010      	beq.n	80073dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f042 0201 	orr.w	r2, r2, #1
 80073c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ca:	e007      	b.n	80073dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f042 0201 	orr.w	r2, r2, #1
 80073da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	40010000 	.word	0x40010000
 80073f0:	40000400 	.word	0x40000400
 80073f4:	40000800 	.word	0x40000800
 80073f8:	40000c00 	.word	0x40000c00
 80073fc:	40010400 	.word	0x40010400
 8007400:	40014000 	.word	0x40014000
 8007404:	40001800 	.word	0x40001800

08007408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b02      	cmp	r3, #2
 800741c:	d122      	bne.n	8007464 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b02      	cmp	r3, #2
 800742a:	d11b      	bne.n	8007464 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f06f 0202 	mvn.w	r2, #2
 8007434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	f003 0303 	and.w	r3, r3, #3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f8ee 	bl	800762c <HAL_TIM_IC_CaptureCallback>
 8007450:	e005      	b.n	800745e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f8e0 	bl	8007618 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f8f1 	bl	8007640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	f003 0304 	and.w	r3, r3, #4
 800746e:	2b04      	cmp	r3, #4
 8007470:	d122      	bne.n	80074b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f003 0304 	and.w	r3, r3, #4
 800747c:	2b04      	cmp	r3, #4
 800747e:	d11b      	bne.n	80074b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f06f 0204 	mvn.w	r2, #4
 8007488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2202      	movs	r2, #2
 800748e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f8c4 	bl	800762c <HAL_TIM_IC_CaptureCallback>
 80074a4:	e005      	b.n	80074b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f8b6 	bl	8007618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f8c7 	bl	8007640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	f003 0308 	and.w	r3, r3, #8
 80074c2:	2b08      	cmp	r3, #8
 80074c4:	d122      	bne.n	800750c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f003 0308 	and.w	r3, r3, #8
 80074d0:	2b08      	cmp	r3, #8
 80074d2:	d11b      	bne.n	800750c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f06f 0208 	mvn.w	r2, #8
 80074dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2204      	movs	r2, #4
 80074e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	f003 0303 	and.w	r3, r3, #3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f89a 	bl	800762c <HAL_TIM_IC_CaptureCallback>
 80074f8:	e005      	b.n	8007506 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f88c 	bl	8007618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 f89d 	bl	8007640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f003 0310 	and.w	r3, r3, #16
 8007516:	2b10      	cmp	r3, #16
 8007518:	d122      	bne.n	8007560 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	f003 0310 	and.w	r3, r3, #16
 8007524:	2b10      	cmp	r3, #16
 8007526:	d11b      	bne.n	8007560 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f06f 0210 	mvn.w	r2, #16
 8007530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2208      	movs	r2, #8
 8007536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f870 	bl	800762c <HAL_TIM_IC_CaptureCallback>
 800754c:	e005      	b.n	800755a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f862 	bl	8007618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f873 	bl	8007640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b01      	cmp	r3, #1
 800756c:	d10e      	bne.n	800758c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b01      	cmp	r3, #1
 800757a:	d107      	bne.n	800758c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f06f 0201 	mvn.w	r2, #1
 8007584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7fc f902 	bl	8003790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007596:	2b80      	cmp	r3, #128	; 0x80
 8007598:	d10e      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a4:	2b80      	cmp	r3, #128	; 0x80
 80075a6:	d107      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f97e 	bl	80078b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c2:	2b40      	cmp	r3, #64	; 0x40
 80075c4:	d10e      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d0:	2b40      	cmp	r3, #64	; 0x40
 80075d2:	d107      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f838 	bl	8007654 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	f003 0320 	and.w	r3, r3, #32
 80075ee:	2b20      	cmp	r3, #32
 80075f0:	d10e      	bne.n	8007610 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	f003 0320 	and.w	r3, r3, #32
 80075fc:	2b20      	cmp	r3, #32
 80075fe:	d107      	bne.n	8007610 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f06f 0220 	mvn.w	r2, #32
 8007608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f948 	bl	80078a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007610:	bf00      	nop
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800765c:	bf00      	nop
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a40      	ldr	r2, [pc, #256]	; (800777c <TIM_Base_SetConfig+0x114>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d013      	beq.n	80076a8 <TIM_Base_SetConfig+0x40>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007686:	d00f      	beq.n	80076a8 <TIM_Base_SetConfig+0x40>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a3d      	ldr	r2, [pc, #244]	; (8007780 <TIM_Base_SetConfig+0x118>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d00b      	beq.n	80076a8 <TIM_Base_SetConfig+0x40>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a3c      	ldr	r2, [pc, #240]	; (8007784 <TIM_Base_SetConfig+0x11c>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d007      	beq.n	80076a8 <TIM_Base_SetConfig+0x40>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a3b      	ldr	r2, [pc, #236]	; (8007788 <TIM_Base_SetConfig+0x120>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d003      	beq.n	80076a8 <TIM_Base_SetConfig+0x40>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a3a      	ldr	r2, [pc, #232]	; (800778c <TIM_Base_SetConfig+0x124>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d108      	bne.n	80076ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a2f      	ldr	r2, [pc, #188]	; (800777c <TIM_Base_SetConfig+0x114>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d02b      	beq.n	800771a <TIM_Base_SetConfig+0xb2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c8:	d027      	beq.n	800771a <TIM_Base_SetConfig+0xb2>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a2c      	ldr	r2, [pc, #176]	; (8007780 <TIM_Base_SetConfig+0x118>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d023      	beq.n	800771a <TIM_Base_SetConfig+0xb2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a2b      	ldr	r2, [pc, #172]	; (8007784 <TIM_Base_SetConfig+0x11c>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d01f      	beq.n	800771a <TIM_Base_SetConfig+0xb2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a2a      	ldr	r2, [pc, #168]	; (8007788 <TIM_Base_SetConfig+0x120>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d01b      	beq.n	800771a <TIM_Base_SetConfig+0xb2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a29      	ldr	r2, [pc, #164]	; (800778c <TIM_Base_SetConfig+0x124>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d017      	beq.n	800771a <TIM_Base_SetConfig+0xb2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a28      	ldr	r2, [pc, #160]	; (8007790 <TIM_Base_SetConfig+0x128>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d013      	beq.n	800771a <TIM_Base_SetConfig+0xb2>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a27      	ldr	r2, [pc, #156]	; (8007794 <TIM_Base_SetConfig+0x12c>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d00f      	beq.n	800771a <TIM_Base_SetConfig+0xb2>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a26      	ldr	r2, [pc, #152]	; (8007798 <TIM_Base_SetConfig+0x130>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d00b      	beq.n	800771a <TIM_Base_SetConfig+0xb2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a25      	ldr	r2, [pc, #148]	; (800779c <TIM_Base_SetConfig+0x134>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d007      	beq.n	800771a <TIM_Base_SetConfig+0xb2>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a24      	ldr	r2, [pc, #144]	; (80077a0 <TIM_Base_SetConfig+0x138>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d003      	beq.n	800771a <TIM_Base_SetConfig+0xb2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a23      	ldr	r2, [pc, #140]	; (80077a4 <TIM_Base_SetConfig+0x13c>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d108      	bne.n	800772c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	4313      	orrs	r3, r2
 800772a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	4313      	orrs	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a0a      	ldr	r2, [pc, #40]	; (800777c <TIM_Base_SetConfig+0x114>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d003      	beq.n	8007760 <TIM_Base_SetConfig+0xf8>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a0c      	ldr	r2, [pc, #48]	; (800778c <TIM_Base_SetConfig+0x124>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d103      	bne.n	8007768 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	691a      	ldr	r2, [r3, #16]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	615a      	str	r2, [r3, #20]
}
 800776e:	bf00      	nop
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	40010000 	.word	0x40010000
 8007780:	40000400 	.word	0x40000400
 8007784:	40000800 	.word	0x40000800
 8007788:	40000c00 	.word	0x40000c00
 800778c:	40010400 	.word	0x40010400
 8007790:	40014000 	.word	0x40014000
 8007794:	40014400 	.word	0x40014400
 8007798:	40014800 	.word	0x40014800
 800779c:	40001800 	.word	0x40001800
 80077a0:	40001c00 	.word	0x40001c00
 80077a4:	40002000 	.word	0x40002000

080077a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d101      	bne.n	80077c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077bc:	2302      	movs	r3, #2
 80077be:	e05a      	b.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a21      	ldr	r2, [pc, #132]	; (8007884 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d022      	beq.n	800784a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800780c:	d01d      	beq.n	800784a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a1d      	ldr	r2, [pc, #116]	; (8007888 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d018      	beq.n	800784a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a1b      	ldr	r2, [pc, #108]	; (800788c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d013      	beq.n	800784a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a1a      	ldr	r2, [pc, #104]	; (8007890 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d00e      	beq.n	800784a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a18      	ldr	r2, [pc, #96]	; (8007894 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d009      	beq.n	800784a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a17      	ldr	r2, [pc, #92]	; (8007898 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d004      	beq.n	800784a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a15      	ldr	r2, [pc, #84]	; (800789c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d10c      	bne.n	8007864 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	4313      	orrs	r3, r2
 800785a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	40010000 	.word	0x40010000
 8007888:	40000400 	.word	0x40000400
 800788c:	40000800 	.word	0x40000800
 8007890:	40000c00 	.word	0x40000c00
 8007894:	40010400 	.word	0x40010400
 8007898:	40014000 	.word	0x40014000
 800789c:	40001800 	.word	0x40001800

080078a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e03f      	b.n	800795a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d106      	bne.n	80078f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7fd faae 	bl	8004e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2224      	movs	r2, #36	; 0x24
 80078f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68da      	ldr	r2, [r3, #12]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800790a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 f95d 	bl	8008bcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	691a      	ldr	r2, [r3, #16]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007920:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	695a      	ldr	r2, [r3, #20]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007930:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68da      	ldr	r2, [r3, #12]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007940:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2220      	movs	r2, #32
 800794c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2220      	movs	r2, #32
 8007954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007962:	b480      	push	{r7}
 8007964:	b085      	sub	sp, #20
 8007966:	af00      	add	r7, sp, #0
 8007968:	60f8      	str	r0, [r7, #12]
 800796a:	60b9      	str	r1, [r7, #8]
 800796c:	4613      	mov	r3, r2
 800796e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b20      	cmp	r3, #32
 800797a:	d130      	bne.n	80079de <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d002      	beq.n	8007988 <HAL_UART_Transmit_IT+0x26>
 8007982:	88fb      	ldrh	r3, [r7, #6]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e029      	b.n	80079e0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007992:	2b01      	cmp	r3, #1
 8007994:	d101      	bne.n	800799a <HAL_UART_Transmit_IT+0x38>
 8007996:	2302      	movs	r3, #2
 8007998:	e022      	b.n	80079e0 <HAL_UART_Transmit_IT+0x7e>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	88fa      	ldrh	r2, [r7, #6]
 80079ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	88fa      	ldrh	r2, [r7, #6]
 80079b2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2221      	movs	r2, #33	; 0x21
 80079be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68da      	ldr	r2, [r3, #12]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80079d8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	e000      	b.n	80079e0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80079de:	2302      	movs	r3, #2
  }
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	4613      	mov	r3, r2
 80079f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b20      	cmp	r3, #32
 8007a04:	d11d      	bne.n	8007a42 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <HAL_UART_Receive_IT+0x26>
 8007a0c:	88fb      	ldrh	r3, [r7, #6]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e016      	b.n	8007a44 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d101      	bne.n	8007a24 <HAL_UART_Receive_IT+0x38>
 8007a20:	2302      	movs	r3, #2
 8007a22:	e00f      	b.n	8007a44 <HAL_UART_Receive_IT+0x58>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a32:	88fb      	ldrh	r3, [r7, #6]
 8007a34:	461a      	mov	r2, r3
 8007a36:	68b9      	ldr	r1, [r7, #8]
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 fdfa 	bl	8008632 <UART_Start_Receive_IT>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	e000      	b.n	8007a44 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007a42:	2302      	movs	r3, #2
  }
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08c      	sub	sp, #48	; 0x30
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	4613      	mov	r3, r2
 8007a58:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b20      	cmp	r3, #32
 8007a64:	d165      	bne.n	8007b32 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d002      	beq.n	8007a72 <HAL_UART_Transmit_DMA+0x26>
 8007a6c:	88fb      	ldrh	r3, [r7, #6]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d101      	bne.n	8007a76 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e05e      	b.n	8007b34 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d101      	bne.n	8007a84 <HAL_UART_Transmit_DMA+0x38>
 8007a80:	2302      	movs	r3, #2
 8007a82:	e057      	b.n	8007b34 <HAL_UART_Transmit_DMA+0xe8>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	88fa      	ldrh	r2, [r7, #6]
 8007a96:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	88fa      	ldrh	r2, [r7, #6]
 8007a9c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2221      	movs	r2, #33	; 0x21
 8007aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab0:	4a22      	ldr	r2, [pc, #136]	; (8007b3c <HAL_UART_Transmit_DMA+0xf0>)
 8007ab2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab8:	4a21      	ldr	r2, [pc, #132]	; (8007b40 <HAL_UART_Transmit_DMA+0xf4>)
 8007aba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac0:	4a20      	ldr	r2, [pc, #128]	; (8007b44 <HAL_UART_Transmit_DMA+0xf8>)
 8007ac2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac8:	2200      	movs	r2, #0
 8007aca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007acc:	f107 0308 	add.w	r3, r7, #8
 8007ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad8:	6819      	ldr	r1, [r3, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	3304      	adds	r3, #4
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	88fb      	ldrh	r3, [r7, #6]
 8007ae4:	f7fd fe06 	bl	80056f4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007af0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	3314      	adds	r3, #20
 8007b00:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	e853 3f00 	ldrex	r3, [r3]
 8007b08:	617b      	str	r3, [r7, #20]
   return(result);
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	3314      	adds	r3, #20
 8007b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b1a:	627a      	str	r2, [r7, #36]	; 0x24
 8007b1c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	6a39      	ldr	r1, [r7, #32]
 8007b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b22:	e841 2300 	strex	r3, r2, [r1]
 8007b26:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e5      	bne.n	8007afa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e000      	b.n	8007b34 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007b32:	2302      	movs	r3, #2
  }
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3730      	adds	r7, #48	; 0x30
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	0800838d 	.word	0x0800838d
 8007b40:	08008427 	.word	0x08008427
 8007b44:	0800859f 	.word	0x0800859f

08007b48 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	4613      	mov	r3, r2
 8007b54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b20      	cmp	r3, #32
 8007b60:	d11d      	bne.n	8007b9e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d002      	beq.n	8007b6e <HAL_UART_Receive_DMA+0x26>
 8007b68:	88fb      	ldrh	r3, [r7, #6]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e016      	b.n	8007ba0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d101      	bne.n	8007b80 <HAL_UART_Receive_DMA+0x38>
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	e00f      	b.n	8007ba0 <HAL_UART_Receive_DMA+0x58>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007b8e:	88fb      	ldrh	r3, [r7, #6]
 8007b90:	461a      	mov	r2, r3
 8007b92:	68b9      	ldr	r1, [r7, #8]
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 fd8b 	bl	80086b0 <UART_Start_Receive_DMA>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	e000      	b.n	8007ba0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007b9e:	2302      	movs	r3, #2
  }
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b08e      	sub	sp, #56	; 0x38
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	330c      	adds	r3, #12
 8007bb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	e853 3f00 	ldrex	r3, [r3]
 8007bbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	330c      	adds	r3, #12
 8007bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd8:	e841 2300 	strex	r3, r2, [r1]
 8007bdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1e5      	bne.n	8007bb0 <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bee:	2b80      	cmp	r3, #128	; 0x80
 8007bf0:	d13c      	bne.n	8007c6c <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3314      	adds	r3, #20
 8007bf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	e853 3f00 	ldrex	r3, [r3]
 8007c00:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c08:	633b      	str	r3, [r7, #48]	; 0x30
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	3314      	adds	r3, #20
 8007c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c12:	61ba      	str	r2, [r7, #24]
 8007c14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c16:	6979      	ldr	r1, [r7, #20]
 8007c18:	69ba      	ldr	r2, [r7, #24]
 8007c1a:	e841 2300 	strex	r3, r2, [r1]
 8007c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1e5      	bne.n	8007bf2 <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d013      	beq.n	8007c56 <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c32:	4a16      	ldr	r2, [pc, #88]	; (8007c8c <HAL_UART_AbortTransmit_IT+0xe4>)
 8007c34:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fd fe22 	bl	8005884 <HAL_DMA_Abort_IT>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d01c      	beq.n	8007c80 <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007c50:	4610      	mov	r0, r2
 8007c52:	4798      	blx	r3
 8007c54:	e014      	b.n	8007c80 <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2220      	movs	r2, #32
 8007c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fb71 	bl	800834c <HAL_UART_AbortTransmitCpltCallback>
 8007c6a:	e009      	b.n	8007c80 <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fb66 	bl	800834c <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3738      	adds	r7, #56	; 0x38
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	0800892b 	.word	0x0800892b

08007c90 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b09a      	sub	sp, #104	; 0x68
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	330c      	adds	r3, #12
 8007c9e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ca2:	e853 3f00 	ldrex	r3, [r3]
 8007ca6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007caa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cae:	667b      	str	r3, [r7, #100]	; 0x64
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	330c      	adds	r3, #12
 8007cb6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007cb8:	657a      	str	r2, [r7, #84]	; 0x54
 8007cba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007cbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007cc0:	e841 2300 	strex	r3, r2, [r1]
 8007cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1e5      	bne.n	8007c98 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	3314      	adds	r3, #20
 8007cd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd6:	e853 3f00 	ldrex	r3, [r3]
 8007cda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cde:	f023 0301 	bic.w	r3, r3, #1
 8007ce2:	663b      	str	r3, [r7, #96]	; 0x60
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3314      	adds	r3, #20
 8007cea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007cec:	643a      	str	r2, [r7, #64]	; 0x40
 8007cee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cf4:	e841 2300 	strex	r3, r2, [r1]
 8007cf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e5      	bne.n	8007ccc <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d119      	bne.n	8007d3c <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	330c      	adds	r3, #12
 8007d0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	e853 3f00 	ldrex	r3, [r3]
 8007d16:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	f023 0310 	bic.w	r3, r3, #16
 8007d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	330c      	adds	r3, #12
 8007d26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d30:	e841 2300 	strex	r3, r2, [r1]
 8007d34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1e5      	bne.n	8007d08 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d46:	2b40      	cmp	r3, #64	; 0x40
 8007d48:	d13f      	bne.n	8007dca <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	3314      	adds	r3, #20
 8007d50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	e853 3f00 	ldrex	r3, [r3]
 8007d58:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d60:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	3314      	adds	r3, #20
 8007d68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d6a:	61ba      	str	r2, [r7, #24]
 8007d6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6e:	6979      	ldr	r1, [r7, #20]
 8007d70:	69ba      	ldr	r2, [r7, #24]
 8007d72:	e841 2300 	strex	r3, r2, [r1]
 8007d76:	613b      	str	r3, [r7, #16]
   return(result);
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1e5      	bne.n	8007d4a <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d013      	beq.n	8007dae <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8a:	4a19      	ldr	r2, [pc, #100]	; (8007df0 <HAL_UART_AbortReceive_IT+0x160>)
 8007d8c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fd fd76 	bl	8005884 <HAL_DMA_Abort_IT>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d022      	beq.n	8007de4 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007da8:	4610      	mov	r0, r2
 8007daa:	4798      	blx	r3
 8007dac:	e01a      	b.n	8007de4 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2220      	movs	r2, #32
 8007db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 facc 	bl	8008360 <HAL_UART_AbortReceiveCpltCallback>
 8007dc8:	e00c      	b.n	8007de4 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 fabe 	bl	8008360 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3768      	adds	r7, #104	; 0x68
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	08008955 	.word	0x08008955

08007df4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b0ba      	sub	sp, #232	; 0xe8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e2a:	f003 030f 	and.w	r3, r3, #15
 8007e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007e32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10f      	bne.n	8007e5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e3e:	f003 0320 	and.w	r3, r3, #32
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d009      	beq.n	8007e5a <HAL_UART_IRQHandler+0x66>
 8007e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e4a:	f003 0320 	and.w	r3, r3, #32
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d003      	beq.n	8007e5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fdfe 	bl	8008a54 <UART_Receive_IT>
      return;
 8007e58:	e256      	b.n	8008308 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 80de 	beq.w	8008020 <HAL_UART_IRQHandler+0x22c>
 8007e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e68:	f003 0301 	and.w	r3, r3, #1
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d106      	bne.n	8007e7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f000 80d1 	beq.w	8008020 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00b      	beq.n	8007ea2 <HAL_UART_IRQHandler+0xae>
 8007e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d005      	beq.n	8007ea2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9a:	f043 0201 	orr.w	r2, r3, #1
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ea6:	f003 0304 	and.w	r3, r3, #4
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00b      	beq.n	8007ec6 <HAL_UART_IRQHandler+0xd2>
 8007eae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007eb2:	f003 0301 	and.w	r3, r3, #1
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d005      	beq.n	8007ec6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebe:	f043 0202 	orr.w	r2, r3, #2
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eca:	f003 0302 	and.w	r3, r3, #2
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00b      	beq.n	8007eea <HAL_UART_IRQHandler+0xf6>
 8007ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d005      	beq.n	8007eea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee2:	f043 0204 	orr.w	r2, r3, #4
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eee:	f003 0308 	and.w	r3, r3, #8
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d011      	beq.n	8007f1a <HAL_UART_IRQHandler+0x126>
 8007ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007efa:	f003 0320 	and.w	r3, r3, #32
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d105      	bne.n	8007f0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d005      	beq.n	8007f1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f12:	f043 0208 	orr.w	r2, r3, #8
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 81ed 	beq.w	80082fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f28:	f003 0320 	and.w	r3, r3, #32
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d008      	beq.n	8007f42 <HAL_UART_IRQHandler+0x14e>
 8007f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f34:	f003 0320 	and.w	r3, r3, #32
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d002      	beq.n	8007f42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fd89 	bl	8008a54 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	695b      	ldr	r3, [r3, #20]
 8007f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f4c:	2b40      	cmp	r3, #64	; 0x40
 8007f4e:	bf0c      	ite	eq
 8007f50:	2301      	moveq	r3, #1
 8007f52:	2300      	movne	r3, #0
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5e:	f003 0308 	and.w	r3, r3, #8
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d103      	bne.n	8007f6e <HAL_UART_IRQHandler+0x17a>
 8007f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d04f      	beq.n	800800e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 fc64 	bl	800883c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f7e:	2b40      	cmp	r3, #64	; 0x40
 8007f80:	d141      	bne.n	8008006 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3314      	adds	r3, #20
 8007f88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f90:	e853 3f00 	ldrex	r3, [r3]
 8007f94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007f98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3314      	adds	r3, #20
 8007faa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007fae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007fb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007fba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007fbe:	e841 2300 	strex	r3, r2, [r1]
 8007fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007fc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1d9      	bne.n	8007f82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d013      	beq.n	8007ffe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fda:	4a7d      	ldr	r2, [pc, #500]	; (80081d0 <HAL_UART_IRQHandler+0x3dc>)
 8007fdc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fd fc4e 	bl	8005884 <HAL_DMA_Abort_IT>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d016      	beq.n	800801c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ffc:	e00e      	b.n	800801c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f99a 	bl	8008338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008004:	e00a      	b.n	800801c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f996 	bl	8008338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800c:	e006      	b.n	800801c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f992 	bl	8008338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800801a:	e170      	b.n	80082fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800801c:	bf00      	nop
    return;
 800801e:	e16e      	b.n	80082fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008024:	2b01      	cmp	r3, #1
 8008026:	f040 814a 	bne.w	80082be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800802a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800802e:	f003 0310 	and.w	r3, r3, #16
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 8143 	beq.w	80082be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800803c:	f003 0310 	and.w	r3, r3, #16
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 813c 	beq.w	80082be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008046:	2300      	movs	r3, #0
 8008048:	60bb      	str	r3, [r7, #8]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	60bb      	str	r3, [r7, #8]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	60bb      	str	r3, [r7, #8]
 800805a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008066:	2b40      	cmp	r3, #64	; 0x40
 8008068:	f040 80b4 	bne.w	80081d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008078:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 8140 	beq.w	8008302 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008086:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800808a:	429a      	cmp	r2, r3
 800808c:	f080 8139 	bcs.w	8008302 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008096:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809c:	69db      	ldr	r3, [r3, #28]
 800809e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080a2:	f000 8088 	beq.w	80081b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	330c      	adds	r3, #12
 80080ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080b4:	e853 3f00 	ldrex	r3, [r3]
 80080b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80080bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	330c      	adds	r3, #12
 80080ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80080d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80080d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80080de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80080e2:	e841 2300 	strex	r3, r2, [r1]
 80080e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80080ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1d9      	bne.n	80080a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	3314      	adds	r3, #20
 80080f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080fc:	e853 3f00 	ldrex	r3, [r3]
 8008100:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008102:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008104:	f023 0301 	bic.w	r3, r3, #1
 8008108:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3314      	adds	r3, #20
 8008112:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008116:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800811a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800811e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008122:	e841 2300 	strex	r3, r2, [r1]
 8008126:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1e1      	bne.n	80080f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3314      	adds	r3, #20
 8008134:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008138:	e853 3f00 	ldrex	r3, [r3]
 800813c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800813e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008144:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3314      	adds	r3, #20
 800814e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008152:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008154:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008156:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008158:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800815a:	e841 2300 	strex	r3, r2, [r1]
 800815e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1e3      	bne.n	800812e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2220      	movs	r2, #32
 800816a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	330c      	adds	r3, #12
 800817a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800817e:	e853 3f00 	ldrex	r3, [r3]
 8008182:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008186:	f023 0310 	bic.w	r3, r3, #16
 800818a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	330c      	adds	r3, #12
 8008194:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008198:	65ba      	str	r2, [r7, #88]	; 0x58
 800819a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800819e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081a0:	e841 2300 	strex	r3, r2, [r1]
 80081a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80081a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1e3      	bne.n	8008174 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fd faf7 	bl	80057a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081be:	b29b      	uxth	r3, r3
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f8d4 	bl	8008374 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80081cc:	e099      	b.n	8008302 <HAL_UART_IRQHandler+0x50e>
 80081ce:	bf00      	nop
 80081d0:	08008903 	.word	0x08008903
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081dc:	b29b      	uxth	r3, r3
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f000 808b 	beq.w	8008306 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80081f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 8086 	beq.w	8008306 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	330c      	adds	r3, #12
 8008200:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800820a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008210:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	330c      	adds	r3, #12
 800821a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800821e:	647a      	str	r2, [r7, #68]	; 0x44
 8008220:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008222:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008224:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008226:	e841 2300 	strex	r3, r2, [r1]
 800822a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800822c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1e3      	bne.n	80081fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	3314      	adds	r3, #20
 8008238:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	e853 3f00 	ldrex	r3, [r3]
 8008240:	623b      	str	r3, [r7, #32]
   return(result);
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	f023 0301 	bic.w	r3, r3, #1
 8008248:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	3314      	adds	r3, #20
 8008252:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008256:	633a      	str	r2, [r7, #48]	; 0x30
 8008258:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800825c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800825e:	e841 2300 	strex	r3, r2, [r1]
 8008262:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1e3      	bne.n	8008232 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2220      	movs	r2, #32
 800826e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	330c      	adds	r3, #12
 800827e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	e853 3f00 	ldrex	r3, [r3]
 8008286:	60fb      	str	r3, [r7, #12]
   return(result);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f023 0310 	bic.w	r3, r3, #16
 800828e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	330c      	adds	r3, #12
 8008298:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800829c:	61fa      	str	r2, [r7, #28]
 800829e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a0:	69b9      	ldr	r1, [r7, #24]
 80082a2:	69fa      	ldr	r2, [r7, #28]
 80082a4:	e841 2300 	strex	r3, r2, [r1]
 80082a8:	617b      	str	r3, [r7, #20]
   return(result);
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1e3      	bne.n	8008278 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f85c 	bl	8008374 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80082bc:	e023      	b.n	8008306 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80082be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d009      	beq.n	80082de <HAL_UART_IRQHandler+0x4ea>
 80082ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d003      	beq.n	80082de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fb54 	bl	8008984 <UART_Transmit_IT>
    return;
 80082dc:	e014      	b.n	8008308 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00e      	beq.n	8008308 <HAL_UART_IRQHandler+0x514>
 80082ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d008      	beq.n	8008308 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fb94 	bl	8008a24 <UART_EndTransmit_IT>
    return;
 80082fc:	e004      	b.n	8008308 <HAL_UART_IRQHandler+0x514>
    return;
 80082fe:	bf00      	nop
 8008300:	e002      	b.n	8008308 <HAL_UART_IRQHandler+0x514>
      return;
 8008302:	bf00      	nop
 8008304:	e000      	b.n	8008308 <HAL_UART_IRQHandler+0x514>
      return;
 8008306:	bf00      	nop
  }
}
 8008308:	37e8      	adds	r7, #232	; 0xe8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop

08008310 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b090      	sub	sp, #64	; 0x40
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008398:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d137      	bne.n	8008418 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80083a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083aa:	2200      	movs	r2, #0
 80083ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80083ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	3314      	adds	r3, #20
 80083b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b8:	e853 3f00 	ldrex	r3, [r3]
 80083bc:	623b      	str	r3, [r7, #32]
   return(result);
 80083be:	6a3b      	ldr	r3, [r7, #32]
 80083c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80083c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3314      	adds	r3, #20
 80083cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083ce:	633a      	str	r2, [r7, #48]	; 0x30
 80083d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083d6:	e841 2300 	strex	r3, r2, [r1]
 80083da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1e5      	bne.n	80083ae <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	330c      	adds	r3, #12
 80083e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	e853 3f00 	ldrex	r3, [r3]
 80083f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f8:	637b      	str	r3, [r7, #52]	; 0x34
 80083fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	330c      	adds	r3, #12
 8008400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008402:	61fa      	str	r2, [r7, #28]
 8008404:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008406:	69b9      	ldr	r1, [r7, #24]
 8008408:	69fa      	ldr	r2, [r7, #28]
 800840a:	e841 2300 	strex	r3, r2, [r1]
 800840e:	617b      	str	r3, [r7, #20]
   return(result);
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1e5      	bne.n	80083e2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008416:	e002      	b.n	800841e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008418:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800841a:	f7f9 f963 	bl	80016e4 <HAL_UART_TxCpltCallback>
}
 800841e:	bf00      	nop
 8008420:	3740      	adds	r7, #64	; 0x40
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b084      	sub	sp, #16
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008432:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f7ff ff6b 	bl	8008310 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800843a:	bf00      	nop
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b09c      	sub	sp, #112	; 0x70
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800845a:	2b00      	cmp	r3, #0
 800845c:	d172      	bne.n	8008544 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800845e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008460:	2200      	movs	r2, #0
 8008462:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	330c      	adds	r3, #12
 800846a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800846e:	e853 3f00 	ldrex	r3, [r3]
 8008472:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008476:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800847a:	66bb      	str	r3, [r7, #104]	; 0x68
 800847c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	330c      	adds	r3, #12
 8008482:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008484:	65ba      	str	r2, [r7, #88]	; 0x58
 8008486:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008488:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800848a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800848c:	e841 2300 	strex	r3, r2, [r1]
 8008490:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e5      	bne.n	8008464 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3314      	adds	r3, #20
 800849e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a2:	e853 3f00 	ldrex	r3, [r3]
 80084a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084aa:	f023 0301 	bic.w	r3, r3, #1
 80084ae:	667b      	str	r3, [r7, #100]	; 0x64
 80084b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3314      	adds	r3, #20
 80084b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80084b8:	647a      	str	r2, [r7, #68]	; 0x44
 80084ba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084c0:	e841 2300 	strex	r3, r2, [r1]
 80084c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1e5      	bne.n	8008498 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	3314      	adds	r3, #20
 80084d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	e853 3f00 	ldrex	r3, [r3]
 80084da:	623b      	str	r3, [r7, #32]
   return(result);
 80084dc:	6a3b      	ldr	r3, [r7, #32]
 80084de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084e2:	663b      	str	r3, [r7, #96]	; 0x60
 80084e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	3314      	adds	r3, #20
 80084ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80084ec:	633a      	str	r2, [r7, #48]	; 0x30
 80084ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084f4:	e841 2300 	strex	r3, r2, [r1]
 80084f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e5      	bne.n	80084cc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008502:	2220      	movs	r2, #32
 8008504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800850a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800850c:	2b01      	cmp	r3, #1
 800850e:	d119      	bne.n	8008544 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	330c      	adds	r3, #12
 8008516:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	e853 3f00 	ldrex	r3, [r3]
 800851e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f023 0310 	bic.w	r3, r3, #16
 8008526:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	330c      	adds	r3, #12
 800852e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008530:	61fa      	str	r2, [r7, #28]
 8008532:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008534:	69b9      	ldr	r1, [r7, #24]
 8008536:	69fa      	ldr	r2, [r7, #28]
 8008538:	e841 2300 	strex	r3, r2, [r1]
 800853c:	617b      	str	r3, [r7, #20]
   return(result);
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1e5      	bne.n	8008510 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008548:	2b01      	cmp	r3, #1
 800854a:	d106      	bne.n	800855a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800854c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800854e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008550:	4619      	mov	r1, r3
 8008552:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008554:	f7ff ff0e 	bl	8008374 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008558:	e002      	b.n	8008560 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800855a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800855c:	f7f9 f8fa 	bl	8001754 <HAL_UART_RxCpltCallback>
}
 8008560:	bf00      	nop
 8008562:	3770      	adds	r7, #112	; 0x70
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008574:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800857a:	2b01      	cmp	r3, #1
 800857c:	d108      	bne.n	8008590 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008582:	085b      	lsrs	r3, r3, #1
 8008584:	b29b      	uxth	r3, r3
 8008586:	4619      	mov	r1, r3
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f7ff fef3 	bl	8008374 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800858e:	e002      	b.n	8008596 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f7ff fec7 	bl	8008324 <HAL_UART_RxHalfCpltCallback>
}
 8008596:	bf00      	nop
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80085a6:	2300      	movs	r3, #0
 80085a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ba:	2b80      	cmp	r3, #128	; 0x80
 80085bc:	bf0c      	ite	eq
 80085be:	2301      	moveq	r3, #1
 80085c0:	2300      	movne	r3, #0
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b21      	cmp	r3, #33	; 0x21
 80085d0:	d108      	bne.n	80085e4 <UART_DMAError+0x46>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d005      	beq.n	80085e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	2200      	movs	r2, #0
 80085dc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80085de:	68b8      	ldr	r0, [r7, #8]
 80085e0:	f000 f904 	bl	80087ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ee:	2b40      	cmp	r3, #64	; 0x40
 80085f0:	bf0c      	ite	eq
 80085f2:	2301      	moveq	r3, #1
 80085f4:	2300      	movne	r3, #0
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b22      	cmp	r3, #34	; 0x22
 8008604:	d108      	bne.n	8008618 <UART_DMAError+0x7a>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d005      	beq.n	8008618 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2200      	movs	r2, #0
 8008610:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008612:	68b8      	ldr	r0, [r7, #8]
 8008614:	f000 f912 	bl	800883c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861c:	f043 0210 	orr.w	r2, r3, #16
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008624:	68b8      	ldr	r0, [r7, #8]
 8008626:	f7ff fe87 	bl	8008338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800862a:	bf00      	nop
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008632:	b480      	push	{r7}
 8008634:	b085      	sub	sp, #20
 8008636:	af00      	add	r7, sp, #0
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	60b9      	str	r1, [r7, #8]
 800863c:	4613      	mov	r3, r2
 800863e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	88fa      	ldrh	r2, [r7, #6]
 800864a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	88fa      	ldrh	r2, [r7, #6]
 8008650:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2222      	movs	r2, #34	; 0x22
 800865c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d007      	beq.n	8008680 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800867e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	695a      	ldr	r2, [r3, #20]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f042 0201 	orr.w	r2, r2, #1
 800868e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68da      	ldr	r2, [r3, #12]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f042 0220 	orr.w	r2, r2, #32
 800869e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
	...

080086b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b098      	sub	sp, #96	; 0x60
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	4613      	mov	r3, r2
 80086bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	88fa      	ldrh	r2, [r7, #6]
 80086c8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2222      	movs	r2, #34	; 0x22
 80086d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086dc:	4a40      	ldr	r2, [pc, #256]	; (80087e0 <UART_Start_Receive_DMA+0x130>)
 80086de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e4:	4a3f      	ldr	r2, [pc, #252]	; (80087e4 <UART_Start_Receive_DMA+0x134>)
 80086e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ec:	4a3e      	ldr	r2, [pc, #248]	; (80087e8 <UART_Start_Receive_DMA+0x138>)
 80086ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f4:	2200      	movs	r2, #0
 80086f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80086f8:	f107 0308 	add.w	r3, r7, #8
 80086fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3304      	adds	r3, #4
 8008708:	4619      	mov	r1, r3
 800870a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	88fb      	ldrh	r3, [r7, #6]
 8008710:	f7fc fff0 	bl	80056f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008714:	2300      	movs	r3, #0
 8008716:	613b      	str	r3, [r7, #16]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	613b      	str	r3, [r7, #16]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	613b      	str	r3, [r7, #16]
 8008728:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d019      	beq.n	800876e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	330c      	adds	r3, #12
 8008740:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008744:	e853 3f00 	ldrex	r3, [r3]
 8008748:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800874a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800874c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008750:	65bb      	str	r3, [r7, #88]	; 0x58
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	330c      	adds	r3, #12
 8008758:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800875a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800875c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008760:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008762:	e841 2300 	strex	r3, r2, [r1]
 8008766:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1e5      	bne.n	800873a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3314      	adds	r3, #20
 8008774:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008778:	e853 3f00 	ldrex	r3, [r3]
 800877c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800877e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008780:	f043 0301 	orr.w	r3, r3, #1
 8008784:	657b      	str	r3, [r7, #84]	; 0x54
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3314      	adds	r3, #20
 800878c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800878e:	63ba      	str	r2, [r7, #56]	; 0x38
 8008790:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008792:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008794:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008796:	e841 2300 	strex	r3, r2, [r1]
 800879a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800879c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1e5      	bne.n	800876e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3314      	adds	r3, #20
 80087a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	e853 3f00 	ldrex	r3, [r3]
 80087b0:	617b      	str	r3, [r7, #20]
   return(result);
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b8:	653b      	str	r3, [r7, #80]	; 0x50
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	3314      	adds	r3, #20
 80087c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80087c2:	627a      	str	r2, [r7, #36]	; 0x24
 80087c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c6:	6a39      	ldr	r1, [r7, #32]
 80087c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ca:	e841 2300 	strex	r3, r2, [r1]
 80087ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1e5      	bne.n	80087a2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3760      	adds	r7, #96	; 0x60
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	08008443 	.word	0x08008443
 80087e4:	08008569 	.word	0x08008569
 80087e8:	0800859f 	.word	0x0800859f

080087ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b089      	sub	sp, #36	; 0x24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	330c      	adds	r3, #12
 80087fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	e853 3f00 	ldrex	r3, [r3]
 8008802:	60bb      	str	r3, [r7, #8]
   return(result);
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800880a:	61fb      	str	r3, [r7, #28]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	330c      	adds	r3, #12
 8008812:	69fa      	ldr	r2, [r7, #28]
 8008814:	61ba      	str	r2, [r7, #24]
 8008816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008818:	6979      	ldr	r1, [r7, #20]
 800881a:	69ba      	ldr	r2, [r7, #24]
 800881c:	e841 2300 	strex	r3, r2, [r1]
 8008820:	613b      	str	r3, [r7, #16]
   return(result);
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1e5      	bne.n	80087f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2220      	movs	r2, #32
 800882c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008830:	bf00      	nop
 8008832:	3724      	adds	r7, #36	; 0x24
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800883c:	b480      	push	{r7}
 800883e:	b095      	sub	sp, #84	; 0x54
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	330c      	adds	r3, #12
 800884a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884e:	e853 3f00 	ldrex	r3, [r3]
 8008852:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008856:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800885a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	330c      	adds	r3, #12
 8008862:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008864:	643a      	str	r2, [r7, #64]	; 0x40
 8008866:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008868:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800886a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800886c:	e841 2300 	strex	r3, r2, [r1]
 8008870:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1e5      	bne.n	8008844 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	3314      	adds	r3, #20
 800887e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	e853 3f00 	ldrex	r3, [r3]
 8008886:	61fb      	str	r3, [r7, #28]
   return(result);
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	f023 0301 	bic.w	r3, r3, #1
 800888e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3314      	adds	r3, #20
 8008896:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008898:	62fa      	str	r2, [r7, #44]	; 0x2c
 800889a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800889e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088a0:	e841 2300 	strex	r3, r2, [r1]
 80088a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1e5      	bne.n	8008878 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d119      	bne.n	80088e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	330c      	adds	r3, #12
 80088ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	e853 3f00 	ldrex	r3, [r3]
 80088c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	f023 0310 	bic.w	r3, r3, #16
 80088ca:	647b      	str	r3, [r7, #68]	; 0x44
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	330c      	adds	r3, #12
 80088d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088d4:	61ba      	str	r2, [r7, #24]
 80088d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d8:	6979      	ldr	r1, [r7, #20]
 80088da:	69ba      	ldr	r2, [r7, #24]
 80088dc:	e841 2300 	strex	r3, r2, [r1]
 80088e0:	613b      	str	r3, [r7, #16]
   return(result);
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1e5      	bne.n	80088b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2220      	movs	r2, #32
 80088ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80088f6:	bf00      	nop
 80088f8:	3754      	adds	r7, #84	; 0x54
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b084      	sub	sp, #16
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f7ff fd0b 	bl	8008338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008922:	bf00      	nop
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b084      	sub	sp, #16
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008936:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2220      	movs	r2, #32
 8008942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f7ff fd00 	bl	800834c <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800894c:	bf00      	nop
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008960:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2220      	movs	r2, #32
 800896c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2200      	movs	r2, #0
 8008974:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f7ff fcf2 	bl	8008360 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800897c:	bf00      	nop
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008992:	b2db      	uxtb	r3, r3
 8008994:	2b21      	cmp	r3, #33	; 0x21
 8008996:	d13e      	bne.n	8008a16 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089a0:	d114      	bne.n	80089cc <UART_Transmit_IT+0x48>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d110      	bne.n	80089cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a1b      	ldr	r3, [r3, #32]
 80089ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	881b      	ldrh	r3, [r3, #0]
 80089b4:	461a      	mov	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a1b      	ldr	r3, [r3, #32]
 80089c4:	1c9a      	adds	r2, r3, #2
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	621a      	str	r2, [r3, #32]
 80089ca:	e008      	b.n	80089de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a1b      	ldr	r3, [r3, #32]
 80089d0:	1c59      	adds	r1, r3, #1
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	6211      	str	r1, [r2, #32]
 80089d6:	781a      	ldrb	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	3b01      	subs	r3, #1
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	4619      	mov	r1, r3
 80089ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10f      	bne.n	8008a12 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68da      	ldr	r2, [r3, #12]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a00:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68da      	ldr	r2, [r3, #12]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a10:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	e000      	b.n	8008a18 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a16:	2302      	movs	r3, #2
  }
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3714      	adds	r7, #20
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68da      	ldr	r2, [r3, #12]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a3a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2220      	movs	r2, #32
 8008a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f7f8 fe4d 	bl	80016e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08c      	sub	sp, #48	; 0x30
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b22      	cmp	r3, #34	; 0x22
 8008a66:	f040 80ab 	bne.w	8008bc0 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a72:	d117      	bne.n	8008aa4 <UART_Receive_IT+0x50>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d113      	bne.n	8008aa4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a84:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a96:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a9c:	1c9a      	adds	r2, r3, #2
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	629a      	str	r2, [r3, #40]	; 0x28
 8008aa2:	e026      	b.n	8008af2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ab6:	d007      	beq.n	8008ac8 <UART_Receive_IT+0x74>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d10a      	bne.n	8008ad6 <UART_Receive_IT+0x82>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d106      	bne.n	8008ad6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad2:	701a      	strb	r2, [r3, #0]
 8008ad4:	e008      	b.n	8008ae8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	3b01      	subs	r3, #1
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	4619      	mov	r1, r3
 8008b00:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d15a      	bne.n	8008bbc <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68da      	ldr	r2, [r3, #12]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f022 0220 	bic.w	r2, r2, #32
 8008b14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68da      	ldr	r2, [r3, #12]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	695a      	ldr	r2, [r3, #20]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f022 0201 	bic.w	r2, r2, #1
 8008b34:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2220      	movs	r2, #32
 8008b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d135      	bne.n	8008bb2 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	330c      	adds	r3, #12
 8008b52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	e853 3f00 	ldrex	r3, [r3]
 8008b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	f023 0310 	bic.w	r3, r3, #16
 8008b62:	627b      	str	r3, [r7, #36]	; 0x24
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	330c      	adds	r3, #12
 8008b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b6c:	623a      	str	r2, [r7, #32]
 8008b6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b70:	69f9      	ldr	r1, [r7, #28]
 8008b72:	6a3a      	ldr	r2, [r7, #32]
 8008b74:	e841 2300 	strex	r3, r2, [r1]
 8008b78:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d1e5      	bne.n	8008b4c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 0310 	and.w	r3, r3, #16
 8008b8a:	2b10      	cmp	r3, #16
 8008b8c:	d10a      	bne.n	8008ba4 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60fb      	str	r3, [r7, #12]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	60fb      	str	r3, [r7, #12]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	60fb      	str	r3, [r7, #12]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ba8:	4619      	mov	r1, r3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7ff fbe2 	bl	8008374 <HAL_UARTEx_RxEventCallback>
 8008bb0:	e002      	b.n	8008bb8 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7f8 fdce 	bl	8001754 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	e002      	b.n	8008bc2 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	e000      	b.n	8008bc2 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008bc0:	2302      	movs	r3, #2
  }
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3730      	adds	r7, #48	; 0x30
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
	...

08008bcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bd0:	b0c0      	sub	sp, #256	; 0x100
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008be8:	68d9      	ldr	r1, [r3, #12]
 8008bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	ea40 0301 	orr.w	r3, r0, r1
 8008bf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bfa:	689a      	ldr	r2, [r3, #8]
 8008bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	431a      	orrs	r2, r3
 8008c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c10:	69db      	ldr	r3, [r3, #28]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c24:	f021 010c 	bic.w	r1, r1, #12
 8008c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c32:	430b      	orrs	r3, r1
 8008c34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c46:	6999      	ldr	r1, [r3, #24]
 8008c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	ea40 0301 	orr.w	r3, r0, r1
 8008c52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	4b8f      	ldr	r3, [pc, #572]	; (8008e98 <UART_SetConfig+0x2cc>)
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d005      	beq.n	8008c6c <UART_SetConfig+0xa0>
 8008c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	4b8d      	ldr	r3, [pc, #564]	; (8008e9c <UART_SetConfig+0x2d0>)
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d104      	bne.n	8008c76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c6c:	f7fe fac6 	bl	80071fc <HAL_RCC_GetPCLK2Freq>
 8008c70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008c74:	e003      	b.n	8008c7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c76:	f7fe faad 	bl	80071d4 <HAL_RCC_GetPCLK1Freq>
 8008c7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c82:	69db      	ldr	r3, [r3, #28]
 8008c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c88:	f040 810c 	bne.w	8008ea4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c90:	2200      	movs	r2, #0
 8008c92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008c9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008c9e:	4622      	mov	r2, r4
 8008ca0:	462b      	mov	r3, r5
 8008ca2:	1891      	adds	r1, r2, r2
 8008ca4:	65b9      	str	r1, [r7, #88]	; 0x58
 8008ca6:	415b      	adcs	r3, r3
 8008ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008caa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008cae:	4621      	mov	r1, r4
 8008cb0:	eb12 0801 	adds.w	r8, r2, r1
 8008cb4:	4629      	mov	r1, r5
 8008cb6:	eb43 0901 	adc.w	r9, r3, r1
 8008cba:	f04f 0200 	mov.w	r2, #0
 8008cbe:	f04f 0300 	mov.w	r3, #0
 8008cc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cce:	4690      	mov	r8, r2
 8008cd0:	4699      	mov	r9, r3
 8008cd2:	4623      	mov	r3, r4
 8008cd4:	eb18 0303 	adds.w	r3, r8, r3
 8008cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008cdc:	462b      	mov	r3, r5
 8008cde:	eb49 0303 	adc.w	r3, r9, r3
 8008ce2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008cf2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008cf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	18db      	adds	r3, r3, r3
 8008cfe:	653b      	str	r3, [r7, #80]	; 0x50
 8008d00:	4613      	mov	r3, r2
 8008d02:	eb42 0303 	adc.w	r3, r2, r3
 8008d06:	657b      	str	r3, [r7, #84]	; 0x54
 8008d08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008d0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008d10:	f7f7 ff2c 	bl	8000b6c <__aeabi_uldivmod>
 8008d14:	4602      	mov	r2, r0
 8008d16:	460b      	mov	r3, r1
 8008d18:	4b61      	ldr	r3, [pc, #388]	; (8008ea0 <UART_SetConfig+0x2d4>)
 8008d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d1e:	095b      	lsrs	r3, r3, #5
 8008d20:	011c      	lsls	r4, r3, #4
 8008d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d26:	2200      	movs	r2, #0
 8008d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008d30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008d34:	4642      	mov	r2, r8
 8008d36:	464b      	mov	r3, r9
 8008d38:	1891      	adds	r1, r2, r2
 8008d3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d3c:	415b      	adcs	r3, r3
 8008d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008d44:	4641      	mov	r1, r8
 8008d46:	eb12 0a01 	adds.w	sl, r2, r1
 8008d4a:	4649      	mov	r1, r9
 8008d4c:	eb43 0b01 	adc.w	fp, r3, r1
 8008d50:	f04f 0200 	mov.w	r2, #0
 8008d54:	f04f 0300 	mov.w	r3, #0
 8008d58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d64:	4692      	mov	sl, r2
 8008d66:	469b      	mov	fp, r3
 8008d68:	4643      	mov	r3, r8
 8008d6a:	eb1a 0303 	adds.w	r3, sl, r3
 8008d6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d72:	464b      	mov	r3, r9
 8008d74:	eb4b 0303 	adc.w	r3, fp, r3
 8008d78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008d8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008d90:	460b      	mov	r3, r1
 8008d92:	18db      	adds	r3, r3, r3
 8008d94:	643b      	str	r3, [r7, #64]	; 0x40
 8008d96:	4613      	mov	r3, r2
 8008d98:	eb42 0303 	adc.w	r3, r2, r3
 8008d9c:	647b      	str	r3, [r7, #68]	; 0x44
 8008d9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008da2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008da6:	f7f7 fee1 	bl	8000b6c <__aeabi_uldivmod>
 8008daa:	4602      	mov	r2, r0
 8008dac:	460b      	mov	r3, r1
 8008dae:	4611      	mov	r1, r2
 8008db0:	4b3b      	ldr	r3, [pc, #236]	; (8008ea0 <UART_SetConfig+0x2d4>)
 8008db2:	fba3 2301 	umull	r2, r3, r3, r1
 8008db6:	095b      	lsrs	r3, r3, #5
 8008db8:	2264      	movs	r2, #100	; 0x64
 8008dba:	fb02 f303 	mul.w	r3, r2, r3
 8008dbe:	1acb      	subs	r3, r1, r3
 8008dc0:	00db      	lsls	r3, r3, #3
 8008dc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008dc6:	4b36      	ldr	r3, [pc, #216]	; (8008ea0 <UART_SetConfig+0x2d4>)
 8008dc8:	fba3 2302 	umull	r2, r3, r3, r2
 8008dcc:	095b      	lsrs	r3, r3, #5
 8008dce:	005b      	lsls	r3, r3, #1
 8008dd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008dd4:	441c      	add	r4, r3
 8008dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008de0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008de4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008de8:	4642      	mov	r2, r8
 8008dea:	464b      	mov	r3, r9
 8008dec:	1891      	adds	r1, r2, r2
 8008dee:	63b9      	str	r1, [r7, #56]	; 0x38
 8008df0:	415b      	adcs	r3, r3
 8008df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008df4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008df8:	4641      	mov	r1, r8
 8008dfa:	1851      	adds	r1, r2, r1
 8008dfc:	6339      	str	r1, [r7, #48]	; 0x30
 8008dfe:	4649      	mov	r1, r9
 8008e00:	414b      	adcs	r3, r1
 8008e02:	637b      	str	r3, [r7, #52]	; 0x34
 8008e04:	f04f 0200 	mov.w	r2, #0
 8008e08:	f04f 0300 	mov.w	r3, #0
 8008e0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008e10:	4659      	mov	r1, fp
 8008e12:	00cb      	lsls	r3, r1, #3
 8008e14:	4651      	mov	r1, sl
 8008e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e1a:	4651      	mov	r1, sl
 8008e1c:	00ca      	lsls	r2, r1, #3
 8008e1e:	4610      	mov	r0, r2
 8008e20:	4619      	mov	r1, r3
 8008e22:	4603      	mov	r3, r0
 8008e24:	4642      	mov	r2, r8
 8008e26:	189b      	adds	r3, r3, r2
 8008e28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e2c:	464b      	mov	r3, r9
 8008e2e:	460a      	mov	r2, r1
 8008e30:	eb42 0303 	adc.w	r3, r2, r3
 8008e34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	18db      	adds	r3, r3, r3
 8008e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e52:	4613      	mov	r3, r2
 8008e54:	eb42 0303 	adc.w	r3, r2, r3
 8008e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008e62:	f7f7 fe83 	bl	8000b6c <__aeabi_uldivmod>
 8008e66:	4602      	mov	r2, r0
 8008e68:	460b      	mov	r3, r1
 8008e6a:	4b0d      	ldr	r3, [pc, #52]	; (8008ea0 <UART_SetConfig+0x2d4>)
 8008e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e70:	095b      	lsrs	r3, r3, #5
 8008e72:	2164      	movs	r1, #100	; 0x64
 8008e74:	fb01 f303 	mul.w	r3, r1, r3
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	00db      	lsls	r3, r3, #3
 8008e7c:	3332      	adds	r3, #50	; 0x32
 8008e7e:	4a08      	ldr	r2, [pc, #32]	; (8008ea0 <UART_SetConfig+0x2d4>)
 8008e80:	fba2 2303 	umull	r2, r3, r2, r3
 8008e84:	095b      	lsrs	r3, r3, #5
 8008e86:	f003 0207 	and.w	r2, r3, #7
 8008e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4422      	add	r2, r4
 8008e92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e94:	e105      	b.n	80090a2 <UART_SetConfig+0x4d6>
 8008e96:	bf00      	nop
 8008e98:	40011000 	.word	0x40011000
 8008e9c:	40011400 	.word	0x40011400
 8008ea0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008eae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008eb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008eb6:	4642      	mov	r2, r8
 8008eb8:	464b      	mov	r3, r9
 8008eba:	1891      	adds	r1, r2, r2
 8008ebc:	6239      	str	r1, [r7, #32]
 8008ebe:	415b      	adcs	r3, r3
 8008ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ec2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ec6:	4641      	mov	r1, r8
 8008ec8:	1854      	adds	r4, r2, r1
 8008eca:	4649      	mov	r1, r9
 8008ecc:	eb43 0501 	adc.w	r5, r3, r1
 8008ed0:	f04f 0200 	mov.w	r2, #0
 8008ed4:	f04f 0300 	mov.w	r3, #0
 8008ed8:	00eb      	lsls	r3, r5, #3
 8008eda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ede:	00e2      	lsls	r2, r4, #3
 8008ee0:	4614      	mov	r4, r2
 8008ee2:	461d      	mov	r5, r3
 8008ee4:	4643      	mov	r3, r8
 8008ee6:	18e3      	adds	r3, r4, r3
 8008ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008eec:	464b      	mov	r3, r9
 8008eee:	eb45 0303 	adc.w	r3, r5, r3
 8008ef2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f06:	f04f 0200 	mov.w	r2, #0
 8008f0a:	f04f 0300 	mov.w	r3, #0
 8008f0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008f12:	4629      	mov	r1, r5
 8008f14:	008b      	lsls	r3, r1, #2
 8008f16:	4621      	mov	r1, r4
 8008f18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f1c:	4621      	mov	r1, r4
 8008f1e:	008a      	lsls	r2, r1, #2
 8008f20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008f24:	f7f7 fe22 	bl	8000b6c <__aeabi_uldivmod>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	4b60      	ldr	r3, [pc, #384]	; (80090b0 <UART_SetConfig+0x4e4>)
 8008f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f32:	095b      	lsrs	r3, r3, #5
 8008f34:	011c      	lsls	r4, r3, #4
 8008f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008f48:	4642      	mov	r2, r8
 8008f4a:	464b      	mov	r3, r9
 8008f4c:	1891      	adds	r1, r2, r2
 8008f4e:	61b9      	str	r1, [r7, #24]
 8008f50:	415b      	adcs	r3, r3
 8008f52:	61fb      	str	r3, [r7, #28]
 8008f54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f58:	4641      	mov	r1, r8
 8008f5a:	1851      	adds	r1, r2, r1
 8008f5c:	6139      	str	r1, [r7, #16]
 8008f5e:	4649      	mov	r1, r9
 8008f60:	414b      	adcs	r3, r1
 8008f62:	617b      	str	r3, [r7, #20]
 8008f64:	f04f 0200 	mov.w	r2, #0
 8008f68:	f04f 0300 	mov.w	r3, #0
 8008f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f70:	4659      	mov	r1, fp
 8008f72:	00cb      	lsls	r3, r1, #3
 8008f74:	4651      	mov	r1, sl
 8008f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f7a:	4651      	mov	r1, sl
 8008f7c:	00ca      	lsls	r2, r1, #3
 8008f7e:	4610      	mov	r0, r2
 8008f80:	4619      	mov	r1, r3
 8008f82:	4603      	mov	r3, r0
 8008f84:	4642      	mov	r2, r8
 8008f86:	189b      	adds	r3, r3, r2
 8008f88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f8c:	464b      	mov	r3, r9
 8008f8e:	460a      	mov	r2, r1
 8008f90:	eb42 0303 	adc.w	r3, r2, r3
 8008f94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fa2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008fa4:	f04f 0200 	mov.w	r2, #0
 8008fa8:	f04f 0300 	mov.w	r3, #0
 8008fac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008fb0:	4649      	mov	r1, r9
 8008fb2:	008b      	lsls	r3, r1, #2
 8008fb4:	4641      	mov	r1, r8
 8008fb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fba:	4641      	mov	r1, r8
 8008fbc:	008a      	lsls	r2, r1, #2
 8008fbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008fc2:	f7f7 fdd3 	bl	8000b6c <__aeabi_uldivmod>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4b39      	ldr	r3, [pc, #228]	; (80090b0 <UART_SetConfig+0x4e4>)
 8008fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8008fd0:	095b      	lsrs	r3, r3, #5
 8008fd2:	2164      	movs	r1, #100	; 0x64
 8008fd4:	fb01 f303 	mul.w	r3, r1, r3
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	011b      	lsls	r3, r3, #4
 8008fdc:	3332      	adds	r3, #50	; 0x32
 8008fde:	4a34      	ldr	r2, [pc, #208]	; (80090b0 <UART_SetConfig+0x4e4>)
 8008fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe4:	095b      	lsrs	r3, r3, #5
 8008fe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fea:	441c      	add	r4, r3
 8008fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	673b      	str	r3, [r7, #112]	; 0x70
 8008ff4:	677a      	str	r2, [r7, #116]	; 0x74
 8008ff6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008ffa:	4642      	mov	r2, r8
 8008ffc:	464b      	mov	r3, r9
 8008ffe:	1891      	adds	r1, r2, r2
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	415b      	adcs	r3, r3
 8009004:	60fb      	str	r3, [r7, #12]
 8009006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800900a:	4641      	mov	r1, r8
 800900c:	1851      	adds	r1, r2, r1
 800900e:	6039      	str	r1, [r7, #0]
 8009010:	4649      	mov	r1, r9
 8009012:	414b      	adcs	r3, r1
 8009014:	607b      	str	r3, [r7, #4]
 8009016:	f04f 0200 	mov.w	r2, #0
 800901a:	f04f 0300 	mov.w	r3, #0
 800901e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009022:	4659      	mov	r1, fp
 8009024:	00cb      	lsls	r3, r1, #3
 8009026:	4651      	mov	r1, sl
 8009028:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800902c:	4651      	mov	r1, sl
 800902e:	00ca      	lsls	r2, r1, #3
 8009030:	4610      	mov	r0, r2
 8009032:	4619      	mov	r1, r3
 8009034:	4603      	mov	r3, r0
 8009036:	4642      	mov	r2, r8
 8009038:	189b      	adds	r3, r3, r2
 800903a:	66bb      	str	r3, [r7, #104]	; 0x68
 800903c:	464b      	mov	r3, r9
 800903e:	460a      	mov	r2, r1
 8009040:	eb42 0303 	adc.w	r3, r2, r3
 8009044:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	663b      	str	r3, [r7, #96]	; 0x60
 8009050:	667a      	str	r2, [r7, #100]	; 0x64
 8009052:	f04f 0200 	mov.w	r2, #0
 8009056:	f04f 0300 	mov.w	r3, #0
 800905a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800905e:	4649      	mov	r1, r9
 8009060:	008b      	lsls	r3, r1, #2
 8009062:	4641      	mov	r1, r8
 8009064:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009068:	4641      	mov	r1, r8
 800906a:	008a      	lsls	r2, r1, #2
 800906c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009070:	f7f7 fd7c 	bl	8000b6c <__aeabi_uldivmod>
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	4b0d      	ldr	r3, [pc, #52]	; (80090b0 <UART_SetConfig+0x4e4>)
 800907a:	fba3 1302 	umull	r1, r3, r3, r2
 800907e:	095b      	lsrs	r3, r3, #5
 8009080:	2164      	movs	r1, #100	; 0x64
 8009082:	fb01 f303 	mul.w	r3, r1, r3
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	011b      	lsls	r3, r3, #4
 800908a:	3332      	adds	r3, #50	; 0x32
 800908c:	4a08      	ldr	r2, [pc, #32]	; (80090b0 <UART_SetConfig+0x4e4>)
 800908e:	fba2 2303 	umull	r2, r3, r2, r3
 8009092:	095b      	lsrs	r3, r3, #5
 8009094:	f003 020f 	and.w	r2, r3, #15
 8009098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4422      	add	r2, r4
 80090a0:	609a      	str	r2, [r3, #8]
}
 80090a2:	bf00      	nop
 80090a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80090a8:	46bd      	mov	sp, r7
 80090aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090ae:	bf00      	nop
 80090b0:	51eb851f 	.word	0x51eb851f

080090b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	4603      	mov	r3, r0
 80090bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80090be:	2300      	movs	r3, #0
 80090c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80090c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090c6:	2b84      	cmp	r3, #132	; 0x84
 80090c8:	d005      	beq.n	80090d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80090ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	4413      	add	r3, r2
 80090d2:	3303      	adds	r3, #3
 80090d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80090d6:	68fb      	ldr	r3, [r7, #12]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3714      	adds	r7, #20
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090ea:	f3ef 8305 	mrs	r3, IPSR
 80090ee:	607b      	str	r3, [r7, #4]
  return(result);
 80090f0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	bf14      	ite	ne
 80090f6:	2301      	movne	r3, #1
 80090f8:	2300      	moveq	r3, #0
 80090fa:	b2db      	uxtb	r3, r3
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800910c:	f001 fa78 	bl	800a600 <vTaskStartScheduler>
  
  return osOK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	bd80      	pop	{r7, pc}

08009116 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800911a:	f7ff ffe3 	bl	80090e4 <inHandlerMode>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d003      	beq.n	800912c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009124:	f001 fb96 	bl	800a854 <xTaskGetTickCountFromISR>
 8009128:	4603      	mov	r3, r0
 800912a:	e002      	b.n	8009132 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800912c:	f001 fb82 	bl	800a834 <xTaskGetTickCount>
 8009130:	4603      	mov	r3, r0
  }
}
 8009132:	4618      	mov	r0, r3
 8009134:	bd80      	pop	{r7, pc}

08009136 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009136:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009138:	b089      	sub	sp, #36	; 0x24
 800913a:	af04      	add	r7, sp, #16
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	695b      	ldr	r3, [r3, #20]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d020      	beq.n	800918a <osThreadCreate+0x54>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d01c      	beq.n	800918a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	685c      	ldr	r4, [r3, #4]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681d      	ldr	r5, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	691e      	ldr	r6, [r3, #16]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009162:	4618      	mov	r0, r3
 8009164:	f7ff ffa6 	bl	80090b4 <makeFreeRtosPriority>
 8009168:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	695b      	ldr	r3, [r3, #20]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009172:	9202      	str	r2, [sp, #8]
 8009174:	9301      	str	r3, [sp, #4]
 8009176:	9100      	str	r1, [sp, #0]
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	4632      	mov	r2, r6
 800917c:	4629      	mov	r1, r5
 800917e:	4620      	mov	r0, r4
 8009180:	f000 ffe2 	bl	800a148 <xTaskCreateStatic>
 8009184:	4603      	mov	r3, r0
 8009186:	60fb      	str	r3, [r7, #12]
 8009188:	e01c      	b.n	80091c4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685c      	ldr	r4, [r3, #4]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009196:	b29e      	uxth	r6, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800919e:	4618      	mov	r0, r3
 80091a0:	f7ff ff88 	bl	80090b4 <makeFreeRtosPriority>
 80091a4:	4602      	mov	r2, r0
 80091a6:	f107 030c 	add.w	r3, r7, #12
 80091aa:	9301      	str	r3, [sp, #4]
 80091ac:	9200      	str	r2, [sp, #0]
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	4632      	mov	r2, r6
 80091b2:	4629      	mov	r1, r5
 80091b4:	4620      	mov	r0, r4
 80091b6:	f001 f824 	bl	800a202 <xTaskCreate>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d001      	beq.n	80091c4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80091c0:	2300      	movs	r3, #0
 80091c2:	e000      	b.n	80091c6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80091c4:	68fb      	ldr	r3, [r7, #12]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3714      	adds	r7, #20
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080091ce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b084      	sub	sp, #16
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d001      	beq.n	80091e4 <osDelay+0x16>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	e000      	b.n	80091e6 <osDelay+0x18>
 80091e4:	2301      	movs	r3, #1
 80091e6:	4618      	mov	r0, r3
 80091e8:	f001 f9d6 	bl	800a598 <vTaskDelay>
  
  return osOK;
 80091ec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
	...

080091f8 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af02      	add	r7, sp, #8
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	460b      	mov	r3, r1
 8009202:	607a      	str	r2, [r7, #4]
 8009204:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d013      	beq.n	8009236 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800920e:	7afb      	ldrb	r3, [r7, #11]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d101      	bne.n	8009218 <osTimerCreate+0x20>
 8009214:	2101      	movs	r1, #1
 8009216:	e000      	b.n	800921a <osTimerCreate+0x22>
 8009218:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8009222:	9201      	str	r2, [sp, #4]
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	460a      	mov	r2, r1
 800922a:	2101      	movs	r1, #1
 800922c:	480b      	ldr	r0, [pc, #44]	; (800925c <osTimerCreate+0x64>)
 800922e:	f002 f8d8 	bl	800b3e2 <xTimerCreateStatic>
 8009232:	4603      	mov	r3, r0
 8009234:	e00e      	b.n	8009254 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8009236:	7afb      	ldrb	r3, [r7, #11]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d101      	bne.n	8009240 <osTimerCreate+0x48>
 800923c:	2201      	movs	r2, #1
 800923e:	e000      	b.n	8009242 <osTimerCreate+0x4a>
 8009240:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2101      	movs	r1, #1
 800924c:	4803      	ldr	r0, [pc, #12]	; (800925c <osTimerCreate+0x64>)
 800924e:	f002 f8a7 	bl	800b3a0 <xTimerCreate>
 8009252:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	0800ca6c 	.word	0x0800ca6c

08009260 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d007      	beq.n	8009280 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	4619      	mov	r1, r3
 8009276:	2001      	movs	r0, #1
 8009278:	f000 fa3f 	bl	80096fa <xQueueCreateMutexStatic>
 800927c:	4603      	mov	r3, r0
 800927e:	e003      	b.n	8009288 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009280:	2001      	movs	r0, #1
 8009282:	f000 fa22 	bl	80096ca <xQueueCreateMutex>
 8009286:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009288:	4618      	mov	r0, r3
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <osDelayUntil+0x18>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	e000      	b.n	80092aa <osDelayUntil+0x1a>
 80092a8:	2301      	movs	r3, #1
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f001 f8f5 	bl	800a49c <vTaskDelayUntil>
  
  return osOK;
 80092b2:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f103 0208 	add.w	r2, r3, #8
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f103 0208 	add.w	r2, r3, #8
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f103 0208 	add.w	r2, r3, #8
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800930a:	bf00      	nop
 800930c:	370c      	adds	r7, #12
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr

08009316 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009316:	b480      	push	{r7}
 8009318:	b085      	sub	sp, #20
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	689a      	ldr	r2, [r3, #8]
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	1c5a      	adds	r2, r3, #1
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	601a      	str	r2, [r3, #0]
}
 8009352:	bf00      	nop
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr

0800935e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800935e:	b480      	push	{r7}
 8009360:	b085      	sub	sp, #20
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009374:	d103      	bne.n	800937e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	60fb      	str	r3, [r7, #12]
 800937c:	e00c      	b.n	8009398 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	3308      	adds	r3, #8
 8009382:	60fb      	str	r3, [r7, #12]
 8009384:	e002      	b.n	800938c <vListInsert+0x2e>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	60fb      	str	r3, [r7, #12]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	429a      	cmp	r2, r3
 8009396:	d2f6      	bcs.n	8009386 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	683a      	ldr	r2, [r7, #0]
 80093a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	1c5a      	adds	r2, r3, #1
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	601a      	str	r2, [r3, #0]
}
 80093c4:	bf00      	nop
 80093c6:	3714      	adds	r7, #20
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	6892      	ldr	r2, [r2, #8]
 80093e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	6852      	ldr	r2, [r2, #4]
 80093f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d103      	bne.n	8009404 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	689a      	ldr	r2, [r3, #8]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	1e5a      	subs	r2, r3, #1
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d10a      	bne.n	800944e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943c:	f383 8811 	msr	BASEPRI, r3
 8009440:	f3bf 8f6f 	isb	sy
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800944a:	bf00      	nop
 800944c:	e7fe      	b.n	800944c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800944e:	f002 fc59 	bl	800bd04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800945a:	68f9      	ldr	r1, [r7, #12]
 800945c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800945e:	fb01 f303 	mul.w	r3, r1, r3
 8009462:	441a      	add	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800947e:	3b01      	subs	r3, #1
 8009480:	68f9      	ldr	r1, [r7, #12]
 8009482:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009484:	fb01 f303 	mul.w	r3, r1, r3
 8009488:	441a      	add	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	22ff      	movs	r2, #255	; 0xff
 8009492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	22ff      	movs	r2, #255	; 0xff
 800949a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d114      	bne.n	80094ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d01a      	beq.n	80094e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	3310      	adds	r3, #16
 80094b0:	4618      	mov	r0, r3
 80094b2:	f001 fb4b 	bl	800ab4c <xTaskRemoveFromEventList>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d012      	beq.n	80094e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80094bc:	4b0c      	ldr	r3, [pc, #48]	; (80094f0 <xQueueGenericReset+0xcc>)
 80094be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	f3bf 8f6f 	isb	sy
 80094cc:	e009      	b.n	80094e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	3310      	adds	r3, #16
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7ff fef2 	bl	80092bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	3324      	adds	r3, #36	; 0x24
 80094dc:	4618      	mov	r0, r3
 80094de:	f7ff feed 	bl	80092bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80094e2:	f002 fc3f 	bl	800bd64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80094e6:	2301      	movs	r3, #1
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	e000ed04 	.word	0xe000ed04

080094f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b08e      	sub	sp, #56	; 0x38
 80094f8:	af02      	add	r7, sp, #8
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
 8009500:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10a      	bne.n	800951e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950c:	f383 8811 	msr	BASEPRI, r3
 8009510:	f3bf 8f6f 	isb	sy
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800951a:	bf00      	nop
 800951c:	e7fe      	b.n	800951c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10a      	bne.n	800953a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009528:	f383 8811 	msr	BASEPRI, r3
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009536:	bf00      	nop
 8009538:	e7fe      	b.n	8009538 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d002      	beq.n	8009546 <xQueueGenericCreateStatic+0x52>
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <xQueueGenericCreateStatic+0x56>
 8009546:	2301      	movs	r3, #1
 8009548:	e000      	b.n	800954c <xQueueGenericCreateStatic+0x58>
 800954a:	2300      	movs	r3, #0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d10a      	bne.n	8009566 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	623b      	str	r3, [r7, #32]
}
 8009562:	bf00      	nop
 8009564:	e7fe      	b.n	8009564 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d102      	bne.n	8009572 <xQueueGenericCreateStatic+0x7e>
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <xQueueGenericCreateStatic+0x82>
 8009572:	2301      	movs	r3, #1
 8009574:	e000      	b.n	8009578 <xQueueGenericCreateStatic+0x84>
 8009576:	2300      	movs	r3, #0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10a      	bne.n	8009592 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800957c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009580:	f383 8811 	msr	BASEPRI, r3
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	61fb      	str	r3, [r7, #28]
}
 800958e:	bf00      	nop
 8009590:	e7fe      	b.n	8009590 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009592:	2348      	movs	r3, #72	; 0x48
 8009594:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2b48      	cmp	r3, #72	; 0x48
 800959a:	d00a      	beq.n	80095b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	61bb      	str	r3, [r7, #24]
}
 80095ae:	bf00      	nop
 80095b0:	e7fe      	b.n	80095b0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80095b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80095b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00d      	beq.n	80095da <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80095be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c0:	2201      	movs	r2, #1
 80095c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80095c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80095ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095cc:	9300      	str	r3, [sp, #0]
 80095ce:	4613      	mov	r3, r2
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	68b9      	ldr	r1, [r7, #8]
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f000 f83f 	bl	8009658 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80095da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80095dc:	4618      	mov	r0, r3
 80095de:	3730      	adds	r7, #48	; 0x30
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b08a      	sub	sp, #40	; 0x28
 80095e8:	af02      	add	r7, sp, #8
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	4613      	mov	r3, r2
 80095f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10a      	bne.n	800960e <xQueueGenericCreate+0x2a>
	__asm volatile
 80095f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	613b      	str	r3, [r7, #16]
}
 800960a:	bf00      	nop
 800960c:	e7fe      	b.n	800960c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	fb02 f303 	mul.w	r3, r2, r3
 8009616:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	3348      	adds	r3, #72	; 0x48
 800961c:	4618      	mov	r0, r3
 800961e:	f002 fc93 	bl	800bf48 <pvPortMalloc>
 8009622:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d011      	beq.n	800964e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	3348      	adds	r3, #72	; 0x48
 8009632:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800963c:	79fa      	ldrb	r2, [r7, #7]
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	4613      	mov	r3, r2
 8009644:	697a      	ldr	r2, [r7, #20]
 8009646:	68b9      	ldr	r1, [r7, #8]
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 f805 	bl	8009658 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800964e:	69bb      	ldr	r3, [r7, #24]
	}
 8009650:	4618      	mov	r0, r3
 8009652:	3720      	adds	r7, #32
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
 8009664:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d103      	bne.n	8009674 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	69ba      	ldr	r2, [r7, #24]
 8009670:	601a      	str	r2, [r3, #0]
 8009672:	e002      	b.n	800967a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	68ba      	ldr	r2, [r7, #8]
 8009684:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009686:	2101      	movs	r1, #1
 8009688:	69b8      	ldr	r0, [r7, #24]
 800968a:	f7ff fecb 	bl	8009424 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800968e:	bf00      	nop
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009696:	b580      	push	{r7, lr}
 8009698:	b082      	sub	sp, #8
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00e      	beq.n	80096c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80096b6:	2300      	movs	r3, #0
 80096b8:	2200      	movs	r2, #0
 80096ba:	2100      	movs	r1, #0
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f837 	bl	8009730 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80096c2:	bf00      	nop
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b086      	sub	sp, #24
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	4603      	mov	r3, r0
 80096d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80096d4:	2301      	movs	r3, #1
 80096d6:	617b      	str	r3, [r7, #20]
 80096d8:	2300      	movs	r3, #0
 80096da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80096dc:	79fb      	ldrb	r3, [r7, #7]
 80096de:	461a      	mov	r2, r3
 80096e0:	6939      	ldr	r1, [r7, #16]
 80096e2:	6978      	ldr	r0, [r7, #20]
 80096e4:	f7ff ff7e 	bl	80095e4 <xQueueGenericCreate>
 80096e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f7ff ffd3 	bl	8009696 <prvInitialiseMutex>

		return xNewQueue;
 80096f0:	68fb      	ldr	r3, [r7, #12]
	}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b088      	sub	sp, #32
 80096fe:	af02      	add	r7, sp, #8
 8009700:	4603      	mov	r3, r0
 8009702:	6039      	str	r1, [r7, #0]
 8009704:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009706:	2301      	movs	r3, #1
 8009708:	617b      	str	r3, [r7, #20]
 800970a:	2300      	movs	r3, #0
 800970c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800970e:	79fb      	ldrb	r3, [r7, #7]
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	2200      	movs	r2, #0
 8009716:	6939      	ldr	r1, [r7, #16]
 8009718:	6978      	ldr	r0, [r7, #20]
 800971a:	f7ff feeb 	bl	80094f4 <xQueueGenericCreateStatic>
 800971e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f7ff ffb8 	bl	8009696 <prvInitialiseMutex>

		return xNewQueue;
 8009726:	68fb      	ldr	r3, [r7, #12]
	}
 8009728:	4618      	mov	r0, r3
 800972a:	3718      	adds	r7, #24
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b08e      	sub	sp, #56	; 0x38
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
 800973c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800973e:	2300      	movs	r3, #0
 8009740:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10a      	bne.n	8009762 <xQueueGenericSend+0x32>
	__asm volatile
 800974c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009750:	f383 8811 	msr	BASEPRI, r3
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800975e:	bf00      	nop
 8009760:	e7fe      	b.n	8009760 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d103      	bne.n	8009770 <xQueueGenericSend+0x40>
 8009768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976c:	2b00      	cmp	r3, #0
 800976e:	d101      	bne.n	8009774 <xQueueGenericSend+0x44>
 8009770:	2301      	movs	r3, #1
 8009772:	e000      	b.n	8009776 <xQueueGenericSend+0x46>
 8009774:	2300      	movs	r3, #0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d10a      	bne.n	8009790 <xQueueGenericSend+0x60>
	__asm volatile
 800977a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800978c:	bf00      	nop
 800978e:	e7fe      	b.n	800978e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	2b02      	cmp	r3, #2
 8009794:	d103      	bne.n	800979e <xQueueGenericSend+0x6e>
 8009796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800979a:	2b01      	cmp	r3, #1
 800979c:	d101      	bne.n	80097a2 <xQueueGenericSend+0x72>
 800979e:	2301      	movs	r3, #1
 80097a0:	e000      	b.n	80097a4 <xQueueGenericSend+0x74>
 80097a2:	2300      	movs	r3, #0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10a      	bne.n	80097be <xQueueGenericSend+0x8e>
	__asm volatile
 80097a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ac:	f383 8811 	msr	BASEPRI, r3
 80097b0:	f3bf 8f6f 	isb	sy
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	623b      	str	r3, [r7, #32]
}
 80097ba:	bf00      	nop
 80097bc:	e7fe      	b.n	80097bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097be:	f001 fb85 	bl	800aecc <xTaskGetSchedulerState>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d102      	bne.n	80097ce <xQueueGenericSend+0x9e>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d101      	bne.n	80097d2 <xQueueGenericSend+0xa2>
 80097ce:	2301      	movs	r3, #1
 80097d0:	e000      	b.n	80097d4 <xQueueGenericSend+0xa4>
 80097d2:	2300      	movs	r3, #0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d10a      	bne.n	80097ee <xQueueGenericSend+0xbe>
	__asm volatile
 80097d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097dc:	f383 8811 	msr	BASEPRI, r3
 80097e0:	f3bf 8f6f 	isb	sy
 80097e4:	f3bf 8f4f 	dsb	sy
 80097e8:	61fb      	str	r3, [r7, #28]
}
 80097ea:	bf00      	nop
 80097ec:	e7fe      	b.n	80097ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097ee:	f002 fa89 	bl	800bd04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d302      	bcc.n	8009804 <xQueueGenericSend+0xd4>
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	2b02      	cmp	r3, #2
 8009802:	d129      	bne.n	8009858 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009804:	683a      	ldr	r2, [r7, #0]
 8009806:	68b9      	ldr	r1, [r7, #8]
 8009808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800980a:	f000 fb2f 	bl	8009e6c <prvCopyDataToQueue>
 800980e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009814:	2b00      	cmp	r3, #0
 8009816:	d010      	beq.n	800983a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981a:	3324      	adds	r3, #36	; 0x24
 800981c:	4618      	mov	r0, r3
 800981e:	f001 f995 	bl	800ab4c <xTaskRemoveFromEventList>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d013      	beq.n	8009850 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009828:	4b3f      	ldr	r3, [pc, #252]	; (8009928 <xQueueGenericSend+0x1f8>)
 800982a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800982e:	601a      	str	r2, [r3, #0]
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	f3bf 8f6f 	isb	sy
 8009838:	e00a      	b.n	8009850 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800983a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983c:	2b00      	cmp	r3, #0
 800983e:	d007      	beq.n	8009850 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009840:	4b39      	ldr	r3, [pc, #228]	; (8009928 <xQueueGenericSend+0x1f8>)
 8009842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009846:	601a      	str	r2, [r3, #0]
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009850:	f002 fa88 	bl	800bd64 <vPortExitCritical>
				return pdPASS;
 8009854:	2301      	movs	r3, #1
 8009856:	e063      	b.n	8009920 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d103      	bne.n	8009866 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800985e:	f002 fa81 	bl	800bd64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009862:	2300      	movs	r3, #0
 8009864:	e05c      	b.n	8009920 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009868:	2b00      	cmp	r3, #0
 800986a:	d106      	bne.n	800987a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800986c:	f107 0314 	add.w	r3, r7, #20
 8009870:	4618      	mov	r0, r3
 8009872:	f001 f9cd 	bl	800ac10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009876:	2301      	movs	r3, #1
 8009878:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800987a:	f002 fa73 	bl	800bd64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800987e:	f000 ff2f 	bl	800a6e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009882:	f002 fa3f 	bl	800bd04 <vPortEnterCritical>
 8009886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009888:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800988c:	b25b      	sxtb	r3, r3
 800988e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009892:	d103      	bne.n	800989c <xQueueGenericSend+0x16c>
 8009894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009896:	2200      	movs	r2, #0
 8009898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800989c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098a2:	b25b      	sxtb	r3, r3
 80098a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098a8:	d103      	bne.n	80098b2 <xQueueGenericSend+0x182>
 80098aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ac:	2200      	movs	r2, #0
 80098ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098b2:	f002 fa57 	bl	800bd64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098b6:	1d3a      	adds	r2, r7, #4
 80098b8:	f107 0314 	add.w	r3, r7, #20
 80098bc:	4611      	mov	r1, r2
 80098be:	4618      	mov	r0, r3
 80098c0:	f001 f9bc 	bl	800ac3c <xTaskCheckForTimeOut>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d124      	bne.n	8009914 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80098ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098cc:	f000 fbc6 	bl	800a05c <prvIsQueueFull>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d018      	beq.n	8009908 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80098d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d8:	3310      	adds	r3, #16
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	4611      	mov	r1, r2
 80098de:	4618      	mov	r0, r3
 80098e0:	f001 f8e4 	bl	800aaac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80098e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098e6:	f000 fb51 	bl	8009f8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80098ea:	f000 ff07 	bl	800a6fc <xTaskResumeAll>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f47f af7c 	bne.w	80097ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80098f6:	4b0c      	ldr	r3, [pc, #48]	; (8009928 <xQueueGenericSend+0x1f8>)
 80098f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	e772      	b.n	80097ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800990a:	f000 fb3f 	bl	8009f8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800990e:	f000 fef5 	bl	800a6fc <xTaskResumeAll>
 8009912:	e76c      	b.n	80097ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009916:	f000 fb39 	bl	8009f8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800991a:	f000 feef 	bl	800a6fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800991e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009920:	4618      	mov	r0, r3
 8009922:	3738      	adds	r7, #56	; 0x38
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	e000ed04 	.word	0xe000ed04

0800992c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b090      	sub	sp, #64	; 0x40
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
 8009938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800993e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10a      	bne.n	800995a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009956:	bf00      	nop
 8009958:	e7fe      	b.n	8009958 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d103      	bne.n	8009968 <xQueueGenericSendFromISR+0x3c>
 8009960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009964:	2b00      	cmp	r3, #0
 8009966:	d101      	bne.n	800996c <xQueueGenericSendFromISR+0x40>
 8009968:	2301      	movs	r3, #1
 800996a:	e000      	b.n	800996e <xQueueGenericSendFromISR+0x42>
 800996c:	2300      	movs	r3, #0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d10a      	bne.n	8009988 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009976:	f383 8811 	msr	BASEPRI, r3
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009984:	bf00      	nop
 8009986:	e7fe      	b.n	8009986 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	2b02      	cmp	r3, #2
 800998c:	d103      	bne.n	8009996 <xQueueGenericSendFromISR+0x6a>
 800998e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009992:	2b01      	cmp	r3, #1
 8009994:	d101      	bne.n	800999a <xQueueGenericSendFromISR+0x6e>
 8009996:	2301      	movs	r3, #1
 8009998:	e000      	b.n	800999c <xQueueGenericSendFromISR+0x70>
 800999a:	2300      	movs	r3, #0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10a      	bne.n	80099b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80099a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	623b      	str	r3, [r7, #32]
}
 80099b2:	bf00      	nop
 80099b4:	e7fe      	b.n	80099b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80099b6:	f002 fa87 	bl	800bec8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80099ba:	f3ef 8211 	mrs	r2, BASEPRI
 80099be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	61fa      	str	r2, [r7, #28]
 80099d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80099d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80099d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099de:	429a      	cmp	r2, r3
 80099e0:	d302      	bcc.n	80099e8 <xQueueGenericSendFromISR+0xbc>
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d12f      	bne.n	8009a48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80099e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80099f8:	683a      	ldr	r2, [r7, #0]
 80099fa:	68b9      	ldr	r1, [r7, #8]
 80099fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099fe:	f000 fa35 	bl	8009e6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009a06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a0a:	d112      	bne.n	8009a32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d016      	beq.n	8009a42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a16:	3324      	adds	r3, #36	; 0x24
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f001 f897 	bl	800ab4c <xTaskRemoveFromEventList>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00e      	beq.n	8009a42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00b      	beq.n	8009a42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	601a      	str	r2, [r3, #0]
 8009a30:	e007      	b.n	8009a42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a36:	3301      	adds	r3, #1
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	b25a      	sxtb	r2, r3
 8009a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009a42:	2301      	movs	r3, #1
 8009a44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009a46:	e001      	b.n	8009a4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009a56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3740      	adds	r7, #64	; 0x40
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
	...

08009a64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b08c      	sub	sp, #48	; 0x30
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a70:	2300      	movs	r3, #0
 8009a72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10a      	bne.n	8009a94 <xQueueReceive+0x30>
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	623b      	str	r3, [r7, #32]
}
 8009a90:	bf00      	nop
 8009a92:	e7fe      	b.n	8009a92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d103      	bne.n	8009aa2 <xQueueReceive+0x3e>
 8009a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d101      	bne.n	8009aa6 <xQueueReceive+0x42>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e000      	b.n	8009aa8 <xQueueReceive+0x44>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10a      	bne.n	8009ac2 <xQueueReceive+0x5e>
	__asm volatile
 8009aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	61fb      	str	r3, [r7, #28]
}
 8009abe:	bf00      	nop
 8009ac0:	e7fe      	b.n	8009ac0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ac2:	f001 fa03 	bl	800aecc <xTaskGetSchedulerState>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d102      	bne.n	8009ad2 <xQueueReceive+0x6e>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d101      	bne.n	8009ad6 <xQueueReceive+0x72>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e000      	b.n	8009ad8 <xQueueReceive+0x74>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d10a      	bne.n	8009af2 <xQueueReceive+0x8e>
	__asm volatile
 8009adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae0:	f383 8811 	msr	BASEPRI, r3
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	f3bf 8f4f 	dsb	sy
 8009aec:	61bb      	str	r3, [r7, #24]
}
 8009aee:	bf00      	nop
 8009af0:	e7fe      	b.n	8009af0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009af2:	f002 f907 	bl	800bd04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d01f      	beq.n	8009b42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b02:	68b9      	ldr	r1, [r7, #8]
 8009b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b06:	f000 fa1b 	bl	8009f40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	1e5a      	subs	r2, r3, #1
 8009b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00f      	beq.n	8009b3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1c:	3310      	adds	r3, #16
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f001 f814 	bl	800ab4c <xTaskRemoveFromEventList>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d007      	beq.n	8009b3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b2a:	4b3d      	ldr	r3, [pc, #244]	; (8009c20 <xQueueReceive+0x1bc>)
 8009b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b30:	601a      	str	r2, [r3, #0]
 8009b32:	f3bf 8f4f 	dsb	sy
 8009b36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b3a:	f002 f913 	bl	800bd64 <vPortExitCritical>
				return pdPASS;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e069      	b.n	8009c16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d103      	bne.n	8009b50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b48:	f002 f90c 	bl	800bd64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	e062      	b.n	8009c16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d106      	bne.n	8009b64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b56:	f107 0310 	add.w	r3, r7, #16
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f001 f858 	bl	800ac10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b60:	2301      	movs	r3, #1
 8009b62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b64:	f002 f8fe 	bl	800bd64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b68:	f000 fdba 	bl	800a6e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b6c:	f002 f8ca 	bl	800bd04 <vPortEnterCritical>
 8009b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b76:	b25b      	sxtb	r3, r3
 8009b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b7c:	d103      	bne.n	8009b86 <xQueueReceive+0x122>
 8009b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b80:	2200      	movs	r2, #0
 8009b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b8c:	b25b      	sxtb	r3, r3
 8009b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b92:	d103      	bne.n	8009b9c <xQueueReceive+0x138>
 8009b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b9c:	f002 f8e2 	bl	800bd64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ba0:	1d3a      	adds	r2, r7, #4
 8009ba2:	f107 0310 	add.w	r3, r7, #16
 8009ba6:	4611      	mov	r1, r2
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f001 f847 	bl	800ac3c <xTaskCheckForTimeOut>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d123      	bne.n	8009bfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bb6:	f000 fa3b 	bl	800a030 <prvIsQueueEmpty>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d017      	beq.n	8009bf0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc2:	3324      	adds	r3, #36	; 0x24
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	4611      	mov	r1, r2
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f000 ff6f 	bl	800aaac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009bce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bd0:	f000 f9dc 	bl	8009f8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009bd4:	f000 fd92 	bl	800a6fc <xTaskResumeAll>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d189      	bne.n	8009af2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009bde:	4b10      	ldr	r3, [pc, #64]	; (8009c20 <xQueueReceive+0x1bc>)
 8009be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009be4:	601a      	str	r2, [r3, #0]
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	e780      	b.n	8009af2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bf2:	f000 f9cb 	bl	8009f8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009bf6:	f000 fd81 	bl	800a6fc <xTaskResumeAll>
 8009bfa:	e77a      	b.n	8009af2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bfe:	f000 f9c5 	bl	8009f8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c02:	f000 fd7b 	bl	800a6fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c08:	f000 fa12 	bl	800a030 <prvIsQueueEmpty>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f43f af6f 	beq.w	8009af2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3730      	adds	r7, #48	; 0x30
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	e000ed04 	.word	0xe000ed04

08009c24 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b08e      	sub	sp, #56	; 0x38
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009c36:	2300      	movs	r3, #0
 8009c38:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d10a      	bne.n	8009c56 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	623b      	str	r3, [r7, #32]
}
 8009c52:	bf00      	nop
 8009c54:	e7fe      	b.n	8009c54 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00a      	beq.n	8009c74 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	61fb      	str	r3, [r7, #28]
}
 8009c70:	bf00      	nop
 8009c72:	e7fe      	b.n	8009c72 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c74:	f001 f92a 	bl	800aecc <xTaskGetSchedulerState>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d102      	bne.n	8009c84 <xQueueSemaphoreTake+0x60>
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d101      	bne.n	8009c88 <xQueueSemaphoreTake+0x64>
 8009c84:	2301      	movs	r3, #1
 8009c86:	e000      	b.n	8009c8a <xQueueSemaphoreTake+0x66>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d10a      	bne.n	8009ca4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	61bb      	str	r3, [r7, #24]
}
 8009ca0:	bf00      	nop
 8009ca2:	e7fe      	b.n	8009ca2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ca4:	f002 f82e 	bl	800bd04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d024      	beq.n	8009cfe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb6:	1e5a      	subs	r2, r3, #1
 8009cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d104      	bne.n	8009cce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009cc4:	f001 faaa 	bl	800b21c <pvTaskIncrementMutexHeldCount>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ccc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd0:	691b      	ldr	r3, [r3, #16]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00f      	beq.n	8009cf6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd8:	3310      	adds	r3, #16
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 ff36 	bl	800ab4c <xTaskRemoveFromEventList>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d007      	beq.n	8009cf6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009ce6:	4b54      	ldr	r3, [pc, #336]	; (8009e38 <xQueueSemaphoreTake+0x214>)
 8009ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cec:	601a      	str	r2, [r3, #0]
 8009cee:	f3bf 8f4f 	dsb	sy
 8009cf2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009cf6:	f002 f835 	bl	800bd64 <vPortExitCritical>
				return pdPASS;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e097      	b.n	8009e2e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d111      	bne.n	8009d28 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00a      	beq.n	8009d20 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0e:	f383 8811 	msr	BASEPRI, r3
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	f3bf 8f4f 	dsb	sy
 8009d1a:	617b      	str	r3, [r7, #20]
}
 8009d1c:	bf00      	nop
 8009d1e:	e7fe      	b.n	8009d1e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009d20:	f002 f820 	bl	800bd64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009d24:	2300      	movs	r3, #0
 8009d26:	e082      	b.n	8009e2e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d106      	bne.n	8009d3c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d2e:	f107 030c 	add.w	r3, r7, #12
 8009d32:	4618      	mov	r0, r3
 8009d34:	f000 ff6c 	bl	800ac10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d3c:	f002 f812 	bl	800bd64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d40:	f000 fcce 	bl	800a6e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d44:	f001 ffde 	bl	800bd04 <vPortEnterCritical>
 8009d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d4e:	b25b      	sxtb	r3, r3
 8009d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d54:	d103      	bne.n	8009d5e <xQueueSemaphoreTake+0x13a>
 8009d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d64:	b25b      	sxtb	r3, r3
 8009d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d6a:	d103      	bne.n	8009d74 <xQueueSemaphoreTake+0x150>
 8009d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d74:	f001 fff6 	bl	800bd64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d78:	463a      	mov	r2, r7
 8009d7a:	f107 030c 	add.w	r3, r7, #12
 8009d7e:	4611      	mov	r1, r2
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 ff5b 	bl	800ac3c <xTaskCheckForTimeOut>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d132      	bne.n	8009df2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d8e:	f000 f94f 	bl	800a030 <prvIsQueueEmpty>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d026      	beq.n	8009de6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d109      	bne.n	8009db4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009da0:	f001 ffb0 	bl	800bd04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	4618      	mov	r0, r3
 8009daa:	f001 f8ad 	bl	800af08 <xTaskPriorityInherit>
 8009dae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009db0:	f001 ffd8 	bl	800bd64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db6:	3324      	adds	r3, #36	; 0x24
 8009db8:	683a      	ldr	r2, [r7, #0]
 8009dba:	4611      	mov	r1, r2
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f000 fe75 	bl	800aaac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009dc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009dc4:	f000 f8e2 	bl	8009f8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009dc8:	f000 fc98 	bl	800a6fc <xTaskResumeAll>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f47f af68 	bne.w	8009ca4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009dd4:	4b18      	ldr	r3, [pc, #96]	; (8009e38 <xQueueSemaphoreTake+0x214>)
 8009dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dda:	601a      	str	r2, [r3, #0]
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	e75e      	b.n	8009ca4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009de6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009de8:	f000 f8d0 	bl	8009f8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009dec:	f000 fc86 	bl	800a6fc <xTaskResumeAll>
 8009df0:	e758      	b.n	8009ca4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009df2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009df4:	f000 f8ca 	bl	8009f8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009df8:	f000 fc80 	bl	800a6fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009dfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009dfe:	f000 f917 	bl	800a030 <prvIsQueueEmpty>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f43f af4d 	beq.w	8009ca4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00d      	beq.n	8009e2c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009e10:	f001 ff78 	bl	800bd04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009e14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e16:	f000 f811 	bl	8009e3c <prvGetDisinheritPriorityAfterTimeout>
 8009e1a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e22:	4618      	mov	r0, r3
 8009e24:	f001 f96c 	bl	800b100 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009e28:	f001 ff9c 	bl	800bd64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009e2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3738      	adds	r7, #56	; 0x38
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	e000ed04 	.word	0xe000ed04

08009e3c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d006      	beq.n	8009e5a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f1c3 0304 	rsb	r3, r3, #4
 8009e56:	60fb      	str	r3, [r7, #12]
 8009e58:	e001      	b.n	8009e5e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
	}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3714      	adds	r7, #20
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d10d      	bne.n	8009ea6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d14d      	bne.n	8009f2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	4618      	mov	r0, r3
 8009e98:	f001 f8ac 	bl	800aff4 <xTaskPriorityDisinherit>
 8009e9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	609a      	str	r2, [r3, #8]
 8009ea4:	e043      	b.n	8009f2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d119      	bne.n	8009ee0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6858      	ldr	r0, [r3, #4]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	68b9      	ldr	r1, [r7, #8]
 8009eb8:	f002 fa5c 	bl	800c374 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	685a      	ldr	r2, [r3, #4]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec4:	441a      	add	r2, r3
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d32b      	bcc.n	8009f2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	605a      	str	r2, [r3, #4]
 8009ede:	e026      	b.n	8009f2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	68d8      	ldr	r0, [r3, #12]
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee8:	461a      	mov	r2, r3
 8009eea:	68b9      	ldr	r1, [r7, #8]
 8009eec:	f002 fa42 	bl	800c374 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	68da      	ldr	r2, [r3, #12]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef8:	425b      	negs	r3, r3
 8009efa:	441a      	add	r2, r3
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	68da      	ldr	r2, [r3, #12]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d207      	bcs.n	8009f1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	689a      	ldr	r2, [r3, #8]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f14:	425b      	negs	r3, r3
 8009f16:	441a      	add	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	d105      	bne.n	8009f2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d002      	beq.n	8009f2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	1c5a      	adds	r2, r3, #1
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009f36:	697b      	ldr	r3, [r7, #20]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3718      	adds	r7, #24
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d018      	beq.n	8009f84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	68da      	ldr	r2, [r3, #12]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5a:	441a      	add	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	68da      	ldr	r2, [r3, #12]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d303      	bcc.n	8009f74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	68d9      	ldr	r1, [r3, #12]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	6838      	ldr	r0, [r7, #0]
 8009f80:	f002 f9f8 	bl	800c374 <memcpy>
	}
}
 8009f84:	bf00      	nop
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009f94:	f001 feb6 	bl	800bd04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fa0:	e011      	b.n	8009fc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d012      	beq.n	8009fd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	3324      	adds	r3, #36	; 0x24
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f000 fdcc 	bl	800ab4c <xTaskRemoveFromEventList>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d001      	beq.n	8009fbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009fba:	f000 fea1 	bl	800ad00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009fbe:	7bfb      	ldrb	r3, [r7, #15]
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	dce9      	bgt.n	8009fa2 <prvUnlockQueue+0x16>
 8009fce:	e000      	b.n	8009fd2 <prvUnlockQueue+0x46>
					break;
 8009fd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	22ff      	movs	r2, #255	; 0xff
 8009fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009fda:	f001 fec3 	bl	800bd64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009fde:	f001 fe91 	bl	800bd04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fe8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009fea:	e011      	b.n	800a010 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	691b      	ldr	r3, [r3, #16]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d012      	beq.n	800a01a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	3310      	adds	r3, #16
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f000 fda7 	bl	800ab4c <xTaskRemoveFromEventList>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d001      	beq.n	800a008 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a004:	f000 fe7c 	bl	800ad00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a008:	7bbb      	ldrb	r3, [r7, #14]
 800a00a:	3b01      	subs	r3, #1
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a014:	2b00      	cmp	r3, #0
 800a016:	dce9      	bgt.n	8009fec <prvUnlockQueue+0x60>
 800a018:	e000      	b.n	800a01c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a01a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	22ff      	movs	r2, #255	; 0xff
 800a020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a024:	f001 fe9e 	bl	800bd64 <vPortExitCritical>
}
 800a028:	bf00      	nop
 800a02a:	3710      	adds	r7, #16
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a038:	f001 fe64 	bl	800bd04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a040:	2b00      	cmp	r3, #0
 800a042:	d102      	bne.n	800a04a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a044:	2301      	movs	r3, #1
 800a046:	60fb      	str	r3, [r7, #12]
 800a048:	e001      	b.n	800a04e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a04a:	2300      	movs	r3, #0
 800a04c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a04e:	f001 fe89 	bl	800bd64 <vPortExitCritical>

	return xReturn;
 800a052:	68fb      	ldr	r3, [r7, #12]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a064:	f001 fe4e 	bl	800bd04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a070:	429a      	cmp	r2, r3
 800a072:	d102      	bne.n	800a07a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a074:	2301      	movs	r3, #1
 800a076:	60fb      	str	r3, [r7, #12]
 800a078:	e001      	b.n	800a07e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a07a:	2300      	movs	r3, #0
 800a07c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a07e:	f001 fe71 	bl	800bd64 <vPortExitCritical>

	return xReturn;
 800a082:	68fb      	ldr	r3, [r7, #12]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a096:	2300      	movs	r3, #0
 800a098:	60fb      	str	r3, [r7, #12]
 800a09a:	e014      	b.n	800a0c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a09c:	4a0f      	ldr	r2, [pc, #60]	; (800a0dc <vQueueAddToRegistry+0x50>)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d10b      	bne.n	800a0c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a0a8:	490c      	ldr	r1, [pc, #48]	; (800a0dc <vQueueAddToRegistry+0x50>)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	683a      	ldr	r2, [r7, #0]
 800a0ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a0b2:	4a0a      	ldr	r2, [pc, #40]	; (800a0dc <vQueueAddToRegistry+0x50>)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	00db      	lsls	r3, r3, #3
 800a0b8:	4413      	add	r3, r2
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a0be:	e006      	b.n	800a0ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	60fb      	str	r3, [r7, #12]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2b07      	cmp	r3, #7
 800a0ca:	d9e7      	bls.n	800a09c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a0cc:	bf00      	nop
 800a0ce:	bf00      	nop
 800a0d0:	3714      	adds	r7, #20
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	20002650 	.word	0x20002650

0800a0e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b086      	sub	sp, #24
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a0f0:	f001 fe08 	bl	800bd04 <vPortEnterCritical>
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0fa:	b25b      	sxtb	r3, r3
 800a0fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a100:	d103      	bne.n	800a10a <vQueueWaitForMessageRestricted+0x2a>
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a110:	b25b      	sxtb	r3, r3
 800a112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a116:	d103      	bne.n	800a120 <vQueueWaitForMessageRestricted+0x40>
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a120:	f001 fe20 	bl	800bd64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d106      	bne.n	800a13a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	3324      	adds	r3, #36	; 0x24
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	68b9      	ldr	r1, [r7, #8]
 800a134:	4618      	mov	r0, r3
 800a136:	f000 fcdd 	bl	800aaf4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a13a:	6978      	ldr	r0, [r7, #20]
 800a13c:	f7ff ff26 	bl	8009f8c <prvUnlockQueue>
	}
 800a140:	bf00      	nop
 800a142:	3718      	adds	r7, #24
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b08e      	sub	sp, #56	; 0x38
 800a14c:	af04      	add	r7, sp, #16
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	607a      	str	r2, [r7, #4]
 800a154:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d10a      	bne.n	800a172 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a160:	f383 8811 	msr	BASEPRI, r3
 800a164:	f3bf 8f6f 	isb	sy
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	623b      	str	r3, [r7, #32]
}
 800a16e:	bf00      	nop
 800a170:	e7fe      	b.n	800a170 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10a      	bne.n	800a18e <xTaskCreateStatic+0x46>
	__asm volatile
 800a178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17c:	f383 8811 	msr	BASEPRI, r3
 800a180:	f3bf 8f6f 	isb	sy
 800a184:	f3bf 8f4f 	dsb	sy
 800a188:	61fb      	str	r3, [r7, #28]
}
 800a18a:	bf00      	nop
 800a18c:	e7fe      	b.n	800a18c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a18e:	23c4      	movs	r3, #196	; 0xc4
 800a190:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	2bc4      	cmp	r3, #196	; 0xc4
 800a196:	d00a      	beq.n	800a1ae <xTaskCreateStatic+0x66>
	__asm volatile
 800a198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19c:	f383 8811 	msr	BASEPRI, r3
 800a1a0:	f3bf 8f6f 	isb	sy
 800a1a4:	f3bf 8f4f 	dsb	sy
 800a1a8:	61bb      	str	r3, [r7, #24]
}
 800a1aa:	bf00      	nop
 800a1ac:	e7fe      	b.n	800a1ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a1ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d01e      	beq.n	800a1f4 <xTaskCreateStatic+0xac>
 800a1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d01b      	beq.n	800a1f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c8:	2202      	movs	r2, #2
 800a1ca:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	9303      	str	r3, [sp, #12]
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d4:	9302      	str	r3, [sp, #8]
 800a1d6:	f107 0314 	add.w	r3, r7, #20
 800a1da:	9301      	str	r3, [sp, #4]
 800a1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	68b9      	ldr	r1, [r7, #8]
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f000 f850 	bl	800a28c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1ee:	f000 f8eb 	bl	800a3c8 <prvAddNewTaskToReadyList>
 800a1f2:	e001      	b.n	800a1f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a1f8:	697b      	ldr	r3, [r7, #20]
	}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3728      	adds	r7, #40	; 0x28
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a202:	b580      	push	{r7, lr}
 800a204:	b08c      	sub	sp, #48	; 0x30
 800a206:	af04      	add	r7, sp, #16
 800a208:	60f8      	str	r0, [r7, #12]
 800a20a:	60b9      	str	r1, [r7, #8]
 800a20c:	603b      	str	r3, [r7, #0]
 800a20e:	4613      	mov	r3, r2
 800a210:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a212:	88fb      	ldrh	r3, [r7, #6]
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4618      	mov	r0, r3
 800a218:	f001 fe96 	bl	800bf48 <pvPortMalloc>
 800a21c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00e      	beq.n	800a242 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a224:	20c4      	movs	r0, #196	; 0xc4
 800a226:	f001 fe8f 	bl	800bf48 <pvPortMalloc>
 800a22a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d003      	beq.n	800a23a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	631a      	str	r2, [r3, #48]	; 0x30
 800a238:	e005      	b.n	800a246 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a23a:	6978      	ldr	r0, [r7, #20]
 800a23c:	f001 ff50 	bl	800c0e0 <vPortFree>
 800a240:	e001      	b.n	800a246 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a242:	2300      	movs	r3, #0
 800a244:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d017      	beq.n	800a27c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a254:	88fa      	ldrh	r2, [r7, #6]
 800a256:	2300      	movs	r3, #0
 800a258:	9303      	str	r3, [sp, #12]
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	9302      	str	r3, [sp, #8]
 800a25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a260:	9301      	str	r3, [sp, #4]
 800a262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a264:	9300      	str	r3, [sp, #0]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	68b9      	ldr	r1, [r7, #8]
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	f000 f80e 	bl	800a28c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a270:	69f8      	ldr	r0, [r7, #28]
 800a272:	f000 f8a9 	bl	800a3c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a276:	2301      	movs	r3, #1
 800a278:	61bb      	str	r3, [r7, #24]
 800a27a:	e002      	b.n	800a282 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a27c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a280:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a282:	69bb      	ldr	r3, [r7, #24]
	}
 800a284:	4618      	mov	r0, r3
 800a286:	3720      	adds	r7, #32
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b088      	sub	sp, #32
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
 800a298:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	4413      	add	r3, r2
 800a2aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	f023 0307 	bic.w	r3, r3, #7
 800a2b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	f003 0307 	and.w	r3, r3, #7
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00a      	beq.n	800a2d4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c2:	f383 8811 	msr	BASEPRI, r3
 800a2c6:	f3bf 8f6f 	isb	sy
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	617b      	str	r3, [r7, #20]
}
 800a2d0:	bf00      	nop
 800a2d2:	e7fe      	b.n	800a2d2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d01f      	beq.n	800a31a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2da:	2300      	movs	r3, #0
 800a2dc:	61fb      	str	r3, [r7, #28]
 800a2de:	e012      	b.n	800a306 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a2e0:	68ba      	ldr	r2, [r7, #8]
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	7819      	ldrb	r1, [r3, #0]
 800a2e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	3334      	adds	r3, #52	; 0x34
 800a2f0:	460a      	mov	r2, r1
 800a2f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a2f4:	68ba      	ldr	r2, [r7, #8]
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d006      	beq.n	800a30e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	3301      	adds	r3, #1
 800a304:	61fb      	str	r3, [r7, #28]
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	2b1f      	cmp	r3, #31
 800a30a:	d9e9      	bls.n	800a2e0 <prvInitialiseNewTask+0x54>
 800a30c:	e000      	b.n	800a310 <prvInitialiseNewTask+0x84>
			{
				break;
 800a30e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a312:	2200      	movs	r2, #0
 800a314:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800a318:	e003      	b.n	800a322 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a324:	2b03      	cmp	r3, #3
 800a326:	d901      	bls.n	800a32c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a328:	2303      	movs	r3, #3
 800a32a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a330:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a336:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 800a338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33a:	2200      	movs	r2, #0
 800a33c:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a340:	3304      	adds	r3, #4
 800a342:	4618      	mov	r0, r3
 800a344:	f7fe ffda 	bl	80092fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34a:	3318      	adds	r3, #24
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7fe ffd5 	bl	80092fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a356:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35a:	f1c3 0204 	rsb	r2, r3, #4
 800a35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a360:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a366:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36a:	2200      	movs	r2, #0
 800a36c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a372:	2200      	movs	r2, #0
 800a374:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37a:	335c      	adds	r3, #92	; 0x5c
 800a37c:	2260      	movs	r2, #96	; 0x60
 800a37e:	2100      	movs	r1, #0
 800a380:	4618      	mov	r0, r3
 800a382:	f002 f805 	bl	800c390 <memset>
 800a386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a388:	4a0c      	ldr	r2, [pc, #48]	; (800a3bc <prvInitialiseNewTask+0x130>)
 800a38a:	661a      	str	r2, [r3, #96]	; 0x60
 800a38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38e:	4a0c      	ldr	r2, [pc, #48]	; (800a3c0 <prvInitialiseNewTask+0x134>)
 800a390:	665a      	str	r2, [r3, #100]	; 0x64
 800a392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a394:	4a0b      	ldr	r2, [pc, #44]	; (800a3c4 <prvInitialiseNewTask+0x138>)
 800a396:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a398:	683a      	ldr	r2, [r7, #0]
 800a39a:	68f9      	ldr	r1, [r7, #12]
 800a39c:	69b8      	ldr	r0, [r7, #24]
 800a39e:	f001 fb83 	bl	800baa8 <pxPortInitialiseStack>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d002      	beq.n	800a3b4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3b4:	bf00      	nop
 800a3b6:	3720      	adds	r7, #32
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	0800cad4 	.word	0x0800cad4
 800a3c0:	0800caf4 	.word	0x0800caf4
 800a3c4:	0800cab4 	.word	0x0800cab4

0800a3c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a3d0:	f001 fc98 	bl	800bd04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a3d4:	4b2a      	ldr	r3, [pc, #168]	; (800a480 <prvAddNewTaskToReadyList+0xb8>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	4a29      	ldr	r2, [pc, #164]	; (800a480 <prvAddNewTaskToReadyList+0xb8>)
 800a3dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a3de:	4b29      	ldr	r3, [pc, #164]	; (800a484 <prvAddNewTaskToReadyList+0xbc>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d109      	bne.n	800a3fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a3e6:	4a27      	ldr	r2, [pc, #156]	; (800a484 <prvAddNewTaskToReadyList+0xbc>)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a3ec:	4b24      	ldr	r3, [pc, #144]	; (800a480 <prvAddNewTaskToReadyList+0xb8>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d110      	bne.n	800a416 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a3f4:	f000 fca8 	bl	800ad48 <prvInitialiseTaskLists>
 800a3f8:	e00d      	b.n	800a416 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a3fa:	4b23      	ldr	r3, [pc, #140]	; (800a488 <prvAddNewTaskToReadyList+0xc0>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d109      	bne.n	800a416 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a402:	4b20      	ldr	r3, [pc, #128]	; (800a484 <prvAddNewTaskToReadyList+0xbc>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d802      	bhi.n	800a416 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a410:	4a1c      	ldr	r2, [pc, #112]	; (800a484 <prvAddNewTaskToReadyList+0xbc>)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a416:	4b1d      	ldr	r3, [pc, #116]	; (800a48c <prvAddNewTaskToReadyList+0xc4>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	3301      	adds	r3, #1
 800a41c:	4a1b      	ldr	r2, [pc, #108]	; (800a48c <prvAddNewTaskToReadyList+0xc4>)
 800a41e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a424:	2201      	movs	r2, #1
 800a426:	409a      	lsls	r2, r3
 800a428:	4b19      	ldr	r3, [pc, #100]	; (800a490 <prvAddNewTaskToReadyList+0xc8>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	4a18      	ldr	r2, [pc, #96]	; (800a490 <prvAddNewTaskToReadyList+0xc8>)
 800a430:	6013      	str	r3, [r2, #0]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a436:	4613      	mov	r3, r2
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	4413      	add	r3, r2
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	4a15      	ldr	r2, [pc, #84]	; (800a494 <prvAddNewTaskToReadyList+0xcc>)
 800a440:	441a      	add	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	3304      	adds	r3, #4
 800a446:	4619      	mov	r1, r3
 800a448:	4610      	mov	r0, r2
 800a44a:	f7fe ff64 	bl	8009316 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a44e:	f001 fc89 	bl	800bd64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a452:	4b0d      	ldr	r3, [pc, #52]	; (800a488 <prvAddNewTaskToReadyList+0xc0>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00e      	beq.n	800a478 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a45a:	4b0a      	ldr	r3, [pc, #40]	; (800a484 <prvAddNewTaskToReadyList+0xbc>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a464:	429a      	cmp	r2, r3
 800a466:	d207      	bcs.n	800a478 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a468:	4b0b      	ldr	r3, [pc, #44]	; (800a498 <prvAddNewTaskToReadyList+0xd0>)
 800a46a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a46e:	601a      	str	r2, [r3, #0]
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a478:	bf00      	nop
 800a47a:	3708      	adds	r7, #8
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	20002754 	.word	0x20002754
 800a484:	20002690 	.word	0x20002690
 800a488:	20002760 	.word	0x20002760
 800a48c:	20002770 	.word	0x20002770
 800a490:	2000275c 	.word	0x2000275c
 800a494:	20002694 	.word	0x20002694
 800a498:	e000ed04 	.word	0xe000ed04

0800a49c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b08a      	sub	sp, #40	; 0x28
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10a      	bne.n	800a4c6 <vTaskDelayUntil+0x2a>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	617b      	str	r3, [r7, #20]
}
 800a4c2:	bf00      	nop
 800a4c4:	e7fe      	b.n	800a4c4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10a      	bne.n	800a4e2 <vTaskDelayUntil+0x46>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	613b      	str	r3, [r7, #16]
}
 800a4de:	bf00      	nop
 800a4e0:	e7fe      	b.n	800a4e0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a4e2:	4b2a      	ldr	r3, [pc, #168]	; (800a58c <vTaskDelayUntil+0xf0>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00a      	beq.n	800a500 <vTaskDelayUntil+0x64>
	__asm volatile
 800a4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ee:	f383 8811 	msr	BASEPRI, r3
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	f3bf 8f4f 	dsb	sy
 800a4fa:	60fb      	str	r3, [r7, #12]
}
 800a4fc:	bf00      	nop
 800a4fe:	e7fe      	b.n	800a4fe <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a500:	f000 f8ee 	bl	800a6e0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a504:	4b22      	ldr	r3, [pc, #136]	; (800a590 <vTaskDelayUntil+0xf4>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	683a      	ldr	r2, [r7, #0]
 800a510:	4413      	add	r3, r2
 800a512:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	6a3a      	ldr	r2, [r7, #32]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d20b      	bcs.n	800a536 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	69fa      	ldr	r2, [r7, #28]
 800a524:	429a      	cmp	r2, r3
 800a526:	d211      	bcs.n	800a54c <vTaskDelayUntil+0xb0>
 800a528:	69fa      	ldr	r2, [r7, #28]
 800a52a:	6a3b      	ldr	r3, [r7, #32]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d90d      	bls.n	800a54c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a530:	2301      	movs	r3, #1
 800a532:	627b      	str	r3, [r7, #36]	; 0x24
 800a534:	e00a      	b.n	800a54c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	69fa      	ldr	r2, [r7, #28]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d303      	bcc.n	800a548 <vTaskDelayUntil+0xac>
 800a540:	69fa      	ldr	r2, [r7, #28]
 800a542:	6a3b      	ldr	r3, [r7, #32]
 800a544:	429a      	cmp	r2, r3
 800a546:	d901      	bls.n	800a54c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a548:	2301      	movs	r3, #1
 800a54a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	69fa      	ldr	r2, [r7, #28]
 800a550:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a554:	2b00      	cmp	r3, #0
 800a556:	d006      	beq.n	800a566 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a558:	69fa      	ldr	r2, [r7, #28]
 800a55a:	6a3b      	ldr	r3, [r7, #32]
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	2100      	movs	r1, #0
 800a560:	4618      	mov	r0, r3
 800a562:	f000 fe6f 	bl	800b244 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a566:	f000 f8c9 	bl	800a6fc <xTaskResumeAll>
 800a56a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d107      	bne.n	800a582 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a572:	4b08      	ldr	r3, [pc, #32]	; (800a594 <vTaskDelayUntil+0xf8>)
 800a574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a578:	601a      	str	r2, [r3, #0]
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a582:	bf00      	nop
 800a584:	3728      	adds	r7, #40	; 0x28
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	2000277c 	.word	0x2000277c
 800a590:	20002758 	.word	0x20002758
 800a594:	e000ed04 	.word	0xe000ed04

0800a598 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d017      	beq.n	800a5da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a5aa:	4b13      	ldr	r3, [pc, #76]	; (800a5f8 <vTaskDelay+0x60>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00a      	beq.n	800a5c8 <vTaskDelay+0x30>
	__asm volatile
 800a5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b6:	f383 8811 	msr	BASEPRI, r3
 800a5ba:	f3bf 8f6f 	isb	sy
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	60bb      	str	r3, [r7, #8]
}
 800a5c4:	bf00      	nop
 800a5c6:	e7fe      	b.n	800a5c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a5c8:	f000 f88a 	bl	800a6e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fe38 	bl	800b244 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a5d4:	f000 f892 	bl	800a6fc <xTaskResumeAll>
 800a5d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d107      	bne.n	800a5f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a5e0:	4b06      	ldr	r3, [pc, #24]	; (800a5fc <vTaskDelay+0x64>)
 800a5e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5e6:	601a      	str	r2, [r3, #0]
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a5f0:	bf00      	nop
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	2000277c 	.word	0x2000277c
 800a5fc:	e000ed04 	.word	0xe000ed04

0800a600 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b08a      	sub	sp, #40	; 0x28
 800a604:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a606:	2300      	movs	r3, #0
 800a608:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a60a:	2300      	movs	r3, #0
 800a60c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a60e:	463a      	mov	r2, r7
 800a610:	1d39      	adds	r1, r7, #4
 800a612:	f107 0308 	add.w	r3, r7, #8
 800a616:	4618      	mov	r0, r3
 800a618:	f7f8 fb50 	bl	8002cbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a61c:	6839      	ldr	r1, [r7, #0]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	9202      	str	r2, [sp, #8]
 800a624:	9301      	str	r3, [sp, #4]
 800a626:	2300      	movs	r3, #0
 800a628:	9300      	str	r3, [sp, #0]
 800a62a:	2300      	movs	r3, #0
 800a62c:	460a      	mov	r2, r1
 800a62e:	4924      	ldr	r1, [pc, #144]	; (800a6c0 <vTaskStartScheduler+0xc0>)
 800a630:	4824      	ldr	r0, [pc, #144]	; (800a6c4 <vTaskStartScheduler+0xc4>)
 800a632:	f7ff fd89 	bl	800a148 <xTaskCreateStatic>
 800a636:	4603      	mov	r3, r0
 800a638:	4a23      	ldr	r2, [pc, #140]	; (800a6c8 <vTaskStartScheduler+0xc8>)
 800a63a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a63c:	4b22      	ldr	r3, [pc, #136]	; (800a6c8 <vTaskStartScheduler+0xc8>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d002      	beq.n	800a64a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a644:	2301      	movs	r3, #1
 800a646:	617b      	str	r3, [r7, #20]
 800a648:	e001      	b.n	800a64e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	2b01      	cmp	r3, #1
 800a652:	d102      	bne.n	800a65a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a654:	f000 fe5c 	bl	800b310 <xTimerCreateTimerTask>
 800a658:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d11b      	bne.n	800a698 <vTaskStartScheduler+0x98>
	__asm volatile
 800a660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	613b      	str	r3, [r7, #16]
}
 800a672:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a674:	4b15      	ldr	r3, [pc, #84]	; (800a6cc <vTaskStartScheduler+0xcc>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	335c      	adds	r3, #92	; 0x5c
 800a67a:	4a15      	ldr	r2, [pc, #84]	; (800a6d0 <vTaskStartScheduler+0xd0>)
 800a67c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a67e:	4b15      	ldr	r3, [pc, #84]	; (800a6d4 <vTaskStartScheduler+0xd4>)
 800a680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a684:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a686:	4b14      	ldr	r3, [pc, #80]	; (800a6d8 <vTaskStartScheduler+0xd8>)
 800a688:	2201      	movs	r2, #1
 800a68a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a68c:	4b13      	ldr	r3, [pc, #76]	; (800a6dc <vTaskStartScheduler+0xdc>)
 800a68e:	2200      	movs	r2, #0
 800a690:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a692:	f001 fa95 	bl	800bbc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a696:	e00e      	b.n	800a6b6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a69e:	d10a      	bne.n	800a6b6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a4:	f383 8811 	msr	BASEPRI, r3
 800a6a8:	f3bf 8f6f 	isb	sy
 800a6ac:	f3bf 8f4f 	dsb	sy
 800a6b0:	60fb      	str	r3, [r7, #12]
}
 800a6b2:	bf00      	nop
 800a6b4:	e7fe      	b.n	800a6b4 <vTaskStartScheduler+0xb4>
}
 800a6b6:	bf00      	nop
 800a6b8:	3718      	adds	r7, #24
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	0800ca70 	.word	0x0800ca70
 800a6c4:	0800ad19 	.word	0x0800ad19
 800a6c8:	20002778 	.word	0x20002778
 800a6cc:	20002690 	.word	0x20002690
 800a6d0:	20000124 	.word	0x20000124
 800a6d4:	20002774 	.word	0x20002774
 800a6d8:	20002760 	.word	0x20002760
 800a6dc:	20002758 	.word	0x20002758

0800a6e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a6e4:	4b04      	ldr	r3, [pc, #16]	; (800a6f8 <vTaskSuspendAll+0x18>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	4a03      	ldr	r2, [pc, #12]	; (800a6f8 <vTaskSuspendAll+0x18>)
 800a6ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a6ee:	bf00      	nop
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr
 800a6f8:	2000277c 	.word	0x2000277c

0800a6fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a702:	2300      	movs	r3, #0
 800a704:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a706:	2300      	movs	r3, #0
 800a708:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a70a:	4b41      	ldr	r3, [pc, #260]	; (800a810 <xTaskResumeAll+0x114>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10a      	bne.n	800a728 <xTaskResumeAll+0x2c>
	__asm volatile
 800a712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a716:	f383 8811 	msr	BASEPRI, r3
 800a71a:	f3bf 8f6f 	isb	sy
 800a71e:	f3bf 8f4f 	dsb	sy
 800a722:	603b      	str	r3, [r7, #0]
}
 800a724:	bf00      	nop
 800a726:	e7fe      	b.n	800a726 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a728:	f001 faec 	bl	800bd04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a72c:	4b38      	ldr	r3, [pc, #224]	; (800a810 <xTaskResumeAll+0x114>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	3b01      	subs	r3, #1
 800a732:	4a37      	ldr	r2, [pc, #220]	; (800a810 <xTaskResumeAll+0x114>)
 800a734:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a736:	4b36      	ldr	r3, [pc, #216]	; (800a810 <xTaskResumeAll+0x114>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d161      	bne.n	800a802 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a73e:	4b35      	ldr	r3, [pc, #212]	; (800a814 <xTaskResumeAll+0x118>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d05d      	beq.n	800a802 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a746:	e02e      	b.n	800a7a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a748:	4b33      	ldr	r3, [pc, #204]	; (800a818 <xTaskResumeAll+0x11c>)
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	3318      	adds	r3, #24
 800a754:	4618      	mov	r0, r3
 800a756:	f7fe fe3b 	bl	80093d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	3304      	adds	r3, #4
 800a75e:	4618      	mov	r0, r3
 800a760:	f7fe fe36 	bl	80093d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a768:	2201      	movs	r2, #1
 800a76a:	409a      	lsls	r2, r3
 800a76c:	4b2b      	ldr	r3, [pc, #172]	; (800a81c <xTaskResumeAll+0x120>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4313      	orrs	r3, r2
 800a772:	4a2a      	ldr	r2, [pc, #168]	; (800a81c <xTaskResumeAll+0x120>)
 800a774:	6013      	str	r3, [r2, #0]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a77a:	4613      	mov	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	4413      	add	r3, r2
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	4a27      	ldr	r2, [pc, #156]	; (800a820 <xTaskResumeAll+0x124>)
 800a784:	441a      	add	r2, r3
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	3304      	adds	r3, #4
 800a78a:	4619      	mov	r1, r3
 800a78c:	4610      	mov	r0, r2
 800a78e:	f7fe fdc2 	bl	8009316 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a796:	4b23      	ldr	r3, [pc, #140]	; (800a824 <xTaskResumeAll+0x128>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d302      	bcc.n	800a7a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a7a0:	4b21      	ldr	r3, [pc, #132]	; (800a828 <xTaskResumeAll+0x12c>)
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7a6:	4b1c      	ldr	r3, [pc, #112]	; (800a818 <xTaskResumeAll+0x11c>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d1cc      	bne.n	800a748 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d001      	beq.n	800a7b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a7b4:	f000 fb6a 	bl	800ae8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a7b8:	4b1c      	ldr	r3, [pc, #112]	; (800a82c <xTaskResumeAll+0x130>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d010      	beq.n	800a7e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a7c4:	f000 f858 	bl	800a878 <xTaskIncrementTick>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d002      	beq.n	800a7d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a7ce:	4b16      	ldr	r3, [pc, #88]	; (800a828 <xTaskResumeAll+0x12c>)
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d1f1      	bne.n	800a7c4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a7e0:	4b12      	ldr	r3, [pc, #72]	; (800a82c <xTaskResumeAll+0x130>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a7e6:	4b10      	ldr	r3, [pc, #64]	; (800a828 <xTaskResumeAll+0x12c>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d009      	beq.n	800a802 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a7f2:	4b0f      	ldr	r3, [pc, #60]	; (800a830 <xTaskResumeAll+0x134>)
 800a7f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7f8:	601a      	str	r2, [r3, #0]
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a802:	f001 faaf 	bl	800bd64 <vPortExitCritical>

	return xAlreadyYielded;
 800a806:	68bb      	ldr	r3, [r7, #8]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	2000277c 	.word	0x2000277c
 800a814:	20002754 	.word	0x20002754
 800a818:	20002714 	.word	0x20002714
 800a81c:	2000275c 	.word	0x2000275c
 800a820:	20002694 	.word	0x20002694
 800a824:	20002690 	.word	0x20002690
 800a828:	20002768 	.word	0x20002768
 800a82c:	20002764 	.word	0x20002764
 800a830:	e000ed04 	.word	0xe000ed04

0800a834 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a83a:	4b05      	ldr	r3, [pc, #20]	; (800a850 <xTaskGetTickCount+0x1c>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a840:	687b      	ldr	r3, [r7, #4]
}
 800a842:	4618      	mov	r0, r3
 800a844:	370c      	adds	r7, #12
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	20002758 	.word	0x20002758

0800a854 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a85a:	f001 fb35 	bl	800bec8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a85e:	2300      	movs	r3, #0
 800a860:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a862:	4b04      	ldr	r3, [pc, #16]	; (800a874 <xTaskGetTickCountFromISR+0x20>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a868:	683b      	ldr	r3, [r7, #0]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	20002758 	.word	0x20002758

0800a878 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b086      	sub	sp, #24
 800a87c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a87e:	2300      	movs	r3, #0
 800a880:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a882:	4b4e      	ldr	r3, [pc, #312]	; (800a9bc <xTaskIncrementTick+0x144>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	f040 808e 	bne.w	800a9a8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a88c:	4b4c      	ldr	r3, [pc, #304]	; (800a9c0 <xTaskIncrementTick+0x148>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	3301      	adds	r3, #1
 800a892:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a894:	4a4a      	ldr	r2, [pc, #296]	; (800a9c0 <xTaskIncrementTick+0x148>)
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d120      	bne.n	800a8e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a8a0:	4b48      	ldr	r3, [pc, #288]	; (800a9c4 <xTaskIncrementTick+0x14c>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00a      	beq.n	800a8c0 <xTaskIncrementTick+0x48>
	__asm volatile
 800a8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ae:	f383 8811 	msr	BASEPRI, r3
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	f3bf 8f4f 	dsb	sy
 800a8ba:	603b      	str	r3, [r7, #0]
}
 800a8bc:	bf00      	nop
 800a8be:	e7fe      	b.n	800a8be <xTaskIncrementTick+0x46>
 800a8c0:	4b40      	ldr	r3, [pc, #256]	; (800a9c4 <xTaskIncrementTick+0x14c>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	60fb      	str	r3, [r7, #12]
 800a8c6:	4b40      	ldr	r3, [pc, #256]	; (800a9c8 <xTaskIncrementTick+0x150>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a3e      	ldr	r2, [pc, #248]	; (800a9c4 <xTaskIncrementTick+0x14c>)
 800a8cc:	6013      	str	r3, [r2, #0]
 800a8ce:	4a3e      	ldr	r2, [pc, #248]	; (800a9c8 <xTaskIncrementTick+0x150>)
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6013      	str	r3, [r2, #0]
 800a8d4:	4b3d      	ldr	r3, [pc, #244]	; (800a9cc <xTaskIncrementTick+0x154>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	4a3c      	ldr	r2, [pc, #240]	; (800a9cc <xTaskIncrementTick+0x154>)
 800a8dc:	6013      	str	r3, [r2, #0]
 800a8de:	f000 fad5 	bl	800ae8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a8e2:	4b3b      	ldr	r3, [pc, #236]	; (800a9d0 <xTaskIncrementTick+0x158>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d348      	bcc.n	800a97e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8ec:	4b35      	ldr	r3, [pc, #212]	; (800a9c4 <xTaskIncrementTick+0x14c>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d104      	bne.n	800a900 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8f6:	4b36      	ldr	r3, [pc, #216]	; (800a9d0 <xTaskIncrementTick+0x158>)
 800a8f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8fc:	601a      	str	r2, [r3, #0]
					break;
 800a8fe:	e03e      	b.n	800a97e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a900:	4b30      	ldr	r3, [pc, #192]	; (800a9c4 <xTaskIncrementTick+0x14c>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a910:	693a      	ldr	r2, [r7, #16]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	429a      	cmp	r2, r3
 800a916:	d203      	bcs.n	800a920 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a918:	4a2d      	ldr	r2, [pc, #180]	; (800a9d0 <xTaskIncrementTick+0x158>)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a91e:	e02e      	b.n	800a97e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	3304      	adds	r3, #4
 800a924:	4618      	mov	r0, r3
 800a926:	f7fe fd53 	bl	80093d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d004      	beq.n	800a93c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	3318      	adds	r3, #24
 800a936:	4618      	mov	r0, r3
 800a938:	f7fe fd4a 	bl	80093d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a940:	2201      	movs	r2, #1
 800a942:	409a      	lsls	r2, r3
 800a944:	4b23      	ldr	r3, [pc, #140]	; (800a9d4 <xTaskIncrementTick+0x15c>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4313      	orrs	r3, r2
 800a94a:	4a22      	ldr	r2, [pc, #136]	; (800a9d4 <xTaskIncrementTick+0x15c>)
 800a94c:	6013      	str	r3, [r2, #0]
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a952:	4613      	mov	r3, r2
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	4413      	add	r3, r2
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	4a1f      	ldr	r2, [pc, #124]	; (800a9d8 <xTaskIncrementTick+0x160>)
 800a95c:	441a      	add	r2, r3
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	3304      	adds	r3, #4
 800a962:	4619      	mov	r1, r3
 800a964:	4610      	mov	r0, r2
 800a966:	f7fe fcd6 	bl	8009316 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a96e:	4b1b      	ldr	r3, [pc, #108]	; (800a9dc <xTaskIncrementTick+0x164>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a974:	429a      	cmp	r2, r3
 800a976:	d3b9      	bcc.n	800a8ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a978:	2301      	movs	r3, #1
 800a97a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a97c:	e7b6      	b.n	800a8ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a97e:	4b17      	ldr	r3, [pc, #92]	; (800a9dc <xTaskIncrementTick+0x164>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a984:	4914      	ldr	r1, [pc, #80]	; (800a9d8 <xTaskIncrementTick+0x160>)
 800a986:	4613      	mov	r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	4413      	add	r3, r2
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	440b      	add	r3, r1
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d901      	bls.n	800a99a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a996:	2301      	movs	r3, #1
 800a998:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a99a:	4b11      	ldr	r3, [pc, #68]	; (800a9e0 <xTaskIncrementTick+0x168>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d007      	beq.n	800a9b2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	617b      	str	r3, [r7, #20]
 800a9a6:	e004      	b.n	800a9b2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a9a8:	4b0e      	ldr	r3, [pc, #56]	; (800a9e4 <xTaskIncrementTick+0x16c>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	4a0d      	ldr	r2, [pc, #52]	; (800a9e4 <xTaskIncrementTick+0x16c>)
 800a9b0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a9b2:	697b      	ldr	r3, [r7, #20]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3718      	adds	r7, #24
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	2000277c 	.word	0x2000277c
 800a9c0:	20002758 	.word	0x20002758
 800a9c4:	2000270c 	.word	0x2000270c
 800a9c8:	20002710 	.word	0x20002710
 800a9cc:	2000276c 	.word	0x2000276c
 800a9d0:	20002774 	.word	0x20002774
 800a9d4:	2000275c 	.word	0x2000275c
 800a9d8:	20002694 	.word	0x20002694
 800a9dc:	20002690 	.word	0x20002690
 800a9e0:	20002768 	.word	0x20002768
 800a9e4:	20002764 	.word	0x20002764

0800a9e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b087      	sub	sp, #28
 800a9ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a9ee:	4b29      	ldr	r3, [pc, #164]	; (800aa94 <vTaskSwitchContext+0xac>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d003      	beq.n	800a9fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a9f6:	4b28      	ldr	r3, [pc, #160]	; (800aa98 <vTaskSwitchContext+0xb0>)
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a9fc:	e044      	b.n	800aa88 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a9fe:	4b26      	ldr	r3, [pc, #152]	; (800aa98 <vTaskSwitchContext+0xb0>)
 800aa00:	2200      	movs	r2, #0
 800aa02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa04:	4b25      	ldr	r3, [pc, #148]	; (800aa9c <vTaskSwitchContext+0xb4>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	fab3 f383 	clz	r3, r3
 800aa10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800aa12:	7afb      	ldrb	r3, [r7, #11]
 800aa14:	f1c3 031f 	rsb	r3, r3, #31
 800aa18:	617b      	str	r3, [r7, #20]
 800aa1a:	4921      	ldr	r1, [pc, #132]	; (800aaa0 <vTaskSwitchContext+0xb8>)
 800aa1c:	697a      	ldr	r2, [r7, #20]
 800aa1e:	4613      	mov	r3, r2
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4413      	add	r3, r2
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	440b      	add	r3, r1
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d10a      	bne.n	800aa44 <vTaskSwitchContext+0x5c>
	__asm volatile
 800aa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa32:	f383 8811 	msr	BASEPRI, r3
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	f3bf 8f4f 	dsb	sy
 800aa3e:	607b      	str	r3, [r7, #4]
}
 800aa40:	bf00      	nop
 800aa42:	e7fe      	b.n	800aa42 <vTaskSwitchContext+0x5a>
 800aa44:	697a      	ldr	r2, [r7, #20]
 800aa46:	4613      	mov	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	4413      	add	r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	4a14      	ldr	r2, [pc, #80]	; (800aaa0 <vTaskSwitchContext+0xb8>)
 800aa50:	4413      	add	r3, r2
 800aa52:	613b      	str	r3, [r7, #16]
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	685a      	ldr	r2, [r3, #4]
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	605a      	str	r2, [r3, #4]
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	685a      	ldr	r2, [r3, #4]
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	3308      	adds	r3, #8
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d104      	bne.n	800aa74 <vTaskSwitchContext+0x8c>
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	685a      	ldr	r2, [r3, #4]
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	605a      	str	r2, [r3, #4]
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	4a0a      	ldr	r2, [pc, #40]	; (800aaa4 <vTaskSwitchContext+0xbc>)
 800aa7c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa7e:	4b09      	ldr	r3, [pc, #36]	; (800aaa4 <vTaskSwitchContext+0xbc>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	335c      	adds	r3, #92	; 0x5c
 800aa84:	4a08      	ldr	r2, [pc, #32]	; (800aaa8 <vTaskSwitchContext+0xc0>)
 800aa86:	6013      	str	r3, [r2, #0]
}
 800aa88:	bf00      	nop
 800aa8a:	371c      	adds	r7, #28
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr
 800aa94:	2000277c 	.word	0x2000277c
 800aa98:	20002768 	.word	0x20002768
 800aa9c:	2000275c 	.word	0x2000275c
 800aaa0:	20002694 	.word	0x20002694
 800aaa4:	20002690 	.word	0x20002690
 800aaa8:	20000124 	.word	0x20000124

0800aaac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d10a      	bne.n	800aad2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800aabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac0:	f383 8811 	msr	BASEPRI, r3
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	f3bf 8f4f 	dsb	sy
 800aacc:	60fb      	str	r3, [r7, #12]
}
 800aace:	bf00      	nop
 800aad0:	e7fe      	b.n	800aad0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aad2:	4b07      	ldr	r3, [pc, #28]	; (800aaf0 <vTaskPlaceOnEventList+0x44>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	3318      	adds	r3, #24
 800aad8:	4619      	mov	r1, r3
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f7fe fc3f 	bl	800935e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aae0:	2101      	movs	r1, #1
 800aae2:	6838      	ldr	r0, [r7, #0]
 800aae4:	f000 fbae 	bl	800b244 <prvAddCurrentTaskToDelayedList>
}
 800aae8:	bf00      	nop
 800aaea:	3710      	adds	r7, #16
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	20002690 	.word	0x20002690

0800aaf4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d10a      	bne.n	800ab1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ab06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0a:	f383 8811 	msr	BASEPRI, r3
 800ab0e:	f3bf 8f6f 	isb	sy
 800ab12:	f3bf 8f4f 	dsb	sy
 800ab16:	617b      	str	r3, [r7, #20]
}
 800ab18:	bf00      	nop
 800ab1a:	e7fe      	b.n	800ab1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab1c:	4b0a      	ldr	r3, [pc, #40]	; (800ab48 <vTaskPlaceOnEventListRestricted+0x54>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	3318      	adds	r3, #24
 800ab22:	4619      	mov	r1, r3
 800ab24:	68f8      	ldr	r0, [r7, #12]
 800ab26:	f7fe fbf6 	bl	8009316 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d002      	beq.n	800ab36 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ab30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ab36:	6879      	ldr	r1, [r7, #4]
 800ab38:	68b8      	ldr	r0, [r7, #8]
 800ab3a:	f000 fb83 	bl	800b244 <prvAddCurrentTaskToDelayedList>
	}
 800ab3e:	bf00      	nop
 800ab40:	3718      	adds	r7, #24
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	20002690 	.word	0x20002690

0800ab4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b086      	sub	sp, #24
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d10a      	bne.n	800ab78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ab62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	60fb      	str	r3, [r7, #12]
}
 800ab74:	bf00      	nop
 800ab76:	e7fe      	b.n	800ab76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	3318      	adds	r3, #24
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7fe fc27 	bl	80093d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab82:	4b1d      	ldr	r3, [pc, #116]	; (800abf8 <xTaskRemoveFromEventList+0xac>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d11c      	bne.n	800abc4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fe fc1e 	bl	80093d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab98:	2201      	movs	r2, #1
 800ab9a:	409a      	lsls	r2, r3
 800ab9c:	4b17      	ldr	r3, [pc, #92]	; (800abfc <xTaskRemoveFromEventList+0xb0>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	4a16      	ldr	r2, [pc, #88]	; (800abfc <xTaskRemoveFromEventList+0xb0>)
 800aba4:	6013      	str	r3, [r2, #0]
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abaa:	4613      	mov	r3, r2
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4413      	add	r3, r2
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	4a13      	ldr	r2, [pc, #76]	; (800ac00 <xTaskRemoveFromEventList+0xb4>)
 800abb4:	441a      	add	r2, r3
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	3304      	adds	r3, #4
 800abba:	4619      	mov	r1, r3
 800abbc:	4610      	mov	r0, r2
 800abbe:	f7fe fbaa 	bl	8009316 <vListInsertEnd>
 800abc2:	e005      	b.n	800abd0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	3318      	adds	r3, #24
 800abc8:	4619      	mov	r1, r3
 800abca:	480e      	ldr	r0, [pc, #56]	; (800ac04 <xTaskRemoveFromEventList+0xb8>)
 800abcc:	f7fe fba3 	bl	8009316 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd4:	4b0c      	ldr	r3, [pc, #48]	; (800ac08 <xTaskRemoveFromEventList+0xbc>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abda:	429a      	cmp	r2, r3
 800abdc:	d905      	bls.n	800abea <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800abde:	2301      	movs	r3, #1
 800abe0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800abe2:	4b0a      	ldr	r3, [pc, #40]	; (800ac0c <xTaskRemoveFromEventList+0xc0>)
 800abe4:	2201      	movs	r2, #1
 800abe6:	601a      	str	r2, [r3, #0]
 800abe8:	e001      	b.n	800abee <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800abea:	2300      	movs	r3, #0
 800abec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800abee:	697b      	ldr	r3, [r7, #20]
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3718      	adds	r7, #24
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	2000277c 	.word	0x2000277c
 800abfc:	2000275c 	.word	0x2000275c
 800ac00:	20002694 	.word	0x20002694
 800ac04:	20002714 	.word	0x20002714
 800ac08:	20002690 	.word	0x20002690
 800ac0c:	20002768 	.word	0x20002768

0800ac10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ac18:	4b06      	ldr	r3, [pc, #24]	; (800ac34 <vTaskInternalSetTimeOutState+0x24>)
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ac20:	4b05      	ldr	r3, [pc, #20]	; (800ac38 <vTaskInternalSetTimeOutState+0x28>)
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	605a      	str	r2, [r3, #4]
}
 800ac28:	bf00      	nop
 800ac2a:	370c      	adds	r7, #12
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr
 800ac34:	2000276c 	.word	0x2000276c
 800ac38:	20002758 	.word	0x20002758

0800ac3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b088      	sub	sp, #32
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d10a      	bne.n	800ac62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ac4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac50:	f383 8811 	msr	BASEPRI, r3
 800ac54:	f3bf 8f6f 	isb	sy
 800ac58:	f3bf 8f4f 	dsb	sy
 800ac5c:	613b      	str	r3, [r7, #16]
}
 800ac5e:	bf00      	nop
 800ac60:	e7fe      	b.n	800ac60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d10a      	bne.n	800ac7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ac68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6c:	f383 8811 	msr	BASEPRI, r3
 800ac70:	f3bf 8f6f 	isb	sy
 800ac74:	f3bf 8f4f 	dsb	sy
 800ac78:	60fb      	str	r3, [r7, #12]
}
 800ac7a:	bf00      	nop
 800ac7c:	e7fe      	b.n	800ac7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ac7e:	f001 f841 	bl	800bd04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ac82:	4b1d      	ldr	r3, [pc, #116]	; (800acf8 <xTaskCheckForTimeOut+0xbc>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	69ba      	ldr	r2, [r7, #24]
 800ac8e:	1ad3      	subs	r3, r2, r3
 800ac90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac9a:	d102      	bne.n	800aca2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	61fb      	str	r3, [r7, #28]
 800aca0:	e023      	b.n	800acea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	4b15      	ldr	r3, [pc, #84]	; (800acfc <xTaskCheckForTimeOut+0xc0>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d007      	beq.n	800acbe <xTaskCheckForTimeOut+0x82>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	69ba      	ldr	r2, [r7, #24]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d302      	bcc.n	800acbe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800acb8:	2301      	movs	r3, #1
 800acba:	61fb      	str	r3, [r7, #28]
 800acbc:	e015      	b.n	800acea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	697a      	ldr	r2, [r7, #20]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d20b      	bcs.n	800ace0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	1ad2      	subs	r2, r2, r3
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f7ff ff9b 	bl	800ac10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800acda:	2300      	movs	r3, #0
 800acdc:	61fb      	str	r3, [r7, #28]
 800acde:	e004      	b.n	800acea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	2200      	movs	r2, #0
 800ace4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ace6:	2301      	movs	r3, #1
 800ace8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800acea:	f001 f83b 	bl	800bd64 <vPortExitCritical>

	return xReturn;
 800acee:	69fb      	ldr	r3, [r7, #28]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3720      	adds	r7, #32
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	20002758 	.word	0x20002758
 800acfc:	2000276c 	.word	0x2000276c

0800ad00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ad00:	b480      	push	{r7}
 800ad02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ad04:	4b03      	ldr	r3, [pc, #12]	; (800ad14 <vTaskMissedYield+0x14>)
 800ad06:	2201      	movs	r2, #1
 800ad08:	601a      	str	r2, [r3, #0]
}
 800ad0a:	bf00      	nop
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr
 800ad14:	20002768 	.word	0x20002768

0800ad18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ad20:	f000 f852 	bl	800adc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ad24:	4b06      	ldr	r3, [pc, #24]	; (800ad40 <prvIdleTask+0x28>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d9f9      	bls.n	800ad20 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ad2c:	4b05      	ldr	r3, [pc, #20]	; (800ad44 <prvIdleTask+0x2c>)
 800ad2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad32:	601a      	str	r2, [r3, #0]
 800ad34:	f3bf 8f4f 	dsb	sy
 800ad38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ad3c:	e7f0      	b.n	800ad20 <prvIdleTask+0x8>
 800ad3e:	bf00      	nop
 800ad40:	20002694 	.word	0x20002694
 800ad44:	e000ed04 	.word	0xe000ed04

0800ad48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad4e:	2300      	movs	r3, #0
 800ad50:	607b      	str	r3, [r7, #4]
 800ad52:	e00c      	b.n	800ad6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	4613      	mov	r3, r2
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	4413      	add	r3, r2
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	4a12      	ldr	r2, [pc, #72]	; (800ada8 <prvInitialiseTaskLists+0x60>)
 800ad60:	4413      	add	r3, r2
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fe faaa 	bl	80092bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	607b      	str	r3, [r7, #4]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2b03      	cmp	r3, #3
 800ad72:	d9ef      	bls.n	800ad54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ad74:	480d      	ldr	r0, [pc, #52]	; (800adac <prvInitialiseTaskLists+0x64>)
 800ad76:	f7fe faa1 	bl	80092bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ad7a:	480d      	ldr	r0, [pc, #52]	; (800adb0 <prvInitialiseTaskLists+0x68>)
 800ad7c:	f7fe fa9e 	bl	80092bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ad80:	480c      	ldr	r0, [pc, #48]	; (800adb4 <prvInitialiseTaskLists+0x6c>)
 800ad82:	f7fe fa9b 	bl	80092bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ad86:	480c      	ldr	r0, [pc, #48]	; (800adb8 <prvInitialiseTaskLists+0x70>)
 800ad88:	f7fe fa98 	bl	80092bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ad8c:	480b      	ldr	r0, [pc, #44]	; (800adbc <prvInitialiseTaskLists+0x74>)
 800ad8e:	f7fe fa95 	bl	80092bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ad92:	4b0b      	ldr	r3, [pc, #44]	; (800adc0 <prvInitialiseTaskLists+0x78>)
 800ad94:	4a05      	ldr	r2, [pc, #20]	; (800adac <prvInitialiseTaskLists+0x64>)
 800ad96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ad98:	4b0a      	ldr	r3, [pc, #40]	; (800adc4 <prvInitialiseTaskLists+0x7c>)
 800ad9a:	4a05      	ldr	r2, [pc, #20]	; (800adb0 <prvInitialiseTaskLists+0x68>)
 800ad9c:	601a      	str	r2, [r3, #0]
}
 800ad9e:	bf00      	nop
 800ada0:	3708      	adds	r7, #8
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	20002694 	.word	0x20002694
 800adac:	200026e4 	.word	0x200026e4
 800adb0:	200026f8 	.word	0x200026f8
 800adb4:	20002714 	.word	0x20002714
 800adb8:	20002728 	.word	0x20002728
 800adbc:	20002740 	.word	0x20002740
 800adc0:	2000270c 	.word	0x2000270c
 800adc4:	20002710 	.word	0x20002710

0800adc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800adce:	e019      	b.n	800ae04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800add0:	f000 ff98 	bl	800bd04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800add4:	4b10      	ldr	r3, [pc, #64]	; (800ae18 <prvCheckTasksWaitingTermination+0x50>)
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	3304      	adds	r3, #4
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7fe faf5 	bl	80093d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ade6:	4b0d      	ldr	r3, [pc, #52]	; (800ae1c <prvCheckTasksWaitingTermination+0x54>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	3b01      	subs	r3, #1
 800adec:	4a0b      	ldr	r2, [pc, #44]	; (800ae1c <prvCheckTasksWaitingTermination+0x54>)
 800adee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800adf0:	4b0b      	ldr	r3, [pc, #44]	; (800ae20 <prvCheckTasksWaitingTermination+0x58>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	3b01      	subs	r3, #1
 800adf6:	4a0a      	ldr	r2, [pc, #40]	; (800ae20 <prvCheckTasksWaitingTermination+0x58>)
 800adf8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800adfa:	f000 ffb3 	bl	800bd64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 f810 	bl	800ae24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae04:	4b06      	ldr	r3, [pc, #24]	; (800ae20 <prvCheckTasksWaitingTermination+0x58>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d1e1      	bne.n	800add0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ae0c:	bf00      	nop
 800ae0e:	bf00      	nop
 800ae10:	3708      	adds	r7, #8
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	20002728 	.word	0x20002728
 800ae1c:	20002754 	.word	0x20002754
 800ae20:	2000273c 	.word	0x2000273c

0800ae24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	335c      	adds	r3, #92	; 0x5c
 800ae30:	4618      	mov	r0, r3
 800ae32:	f001 fac3 	bl	800c3bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d108      	bne.n	800ae52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae44:	4618      	mov	r0, r3
 800ae46:	f001 f94b 	bl	800c0e0 <vPortFree>
				vPortFree( pxTCB );
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f001 f948 	bl	800c0e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ae50:	e018      	b.n	800ae84 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d103      	bne.n	800ae64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f001 f93f 	bl	800c0e0 <vPortFree>
	}
 800ae62:	e00f      	b.n	800ae84 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d00a      	beq.n	800ae84 <prvDeleteTCB+0x60>
	__asm volatile
 800ae6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae72:	f383 8811 	msr	BASEPRI, r3
 800ae76:	f3bf 8f6f 	isb	sy
 800ae7a:	f3bf 8f4f 	dsb	sy
 800ae7e:	60fb      	str	r3, [r7, #12]
}
 800ae80:	bf00      	nop
 800ae82:	e7fe      	b.n	800ae82 <prvDeleteTCB+0x5e>
	}
 800ae84:	bf00      	nop
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b083      	sub	sp, #12
 800ae90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae92:	4b0c      	ldr	r3, [pc, #48]	; (800aec4 <prvResetNextTaskUnblockTime+0x38>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d104      	bne.n	800aea6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ae9c:	4b0a      	ldr	r3, [pc, #40]	; (800aec8 <prvResetNextTaskUnblockTime+0x3c>)
 800ae9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aea2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aea4:	e008      	b.n	800aeb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aea6:	4b07      	ldr	r3, [pc, #28]	; (800aec4 <prvResetNextTaskUnblockTime+0x38>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	4a04      	ldr	r2, [pc, #16]	; (800aec8 <prvResetNextTaskUnblockTime+0x3c>)
 800aeb6:	6013      	str	r3, [r2, #0]
}
 800aeb8:	bf00      	nop
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr
 800aec4:	2000270c 	.word	0x2000270c
 800aec8:	20002774 	.word	0x20002774

0800aecc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aed2:	4b0b      	ldr	r3, [pc, #44]	; (800af00 <xTaskGetSchedulerState+0x34>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d102      	bne.n	800aee0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aeda:	2301      	movs	r3, #1
 800aedc:	607b      	str	r3, [r7, #4]
 800aede:	e008      	b.n	800aef2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aee0:	4b08      	ldr	r3, [pc, #32]	; (800af04 <xTaskGetSchedulerState+0x38>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d102      	bne.n	800aeee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aee8:	2302      	movs	r3, #2
 800aeea:	607b      	str	r3, [r7, #4]
 800aeec:	e001      	b.n	800aef2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aeee:	2300      	movs	r3, #0
 800aef0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aef2:	687b      	ldr	r3, [r7, #4]
	}
 800aef4:	4618      	mov	r0, r3
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr
 800af00:	20002760 	.word	0x20002760
 800af04:	2000277c 	.word	0x2000277c

0800af08 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800af14:	2300      	movs	r3, #0
 800af16:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d05e      	beq.n	800afdc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af22:	4b31      	ldr	r3, [pc, #196]	; (800afe8 <xTaskPriorityInherit+0xe0>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af28:	429a      	cmp	r2, r3
 800af2a:	d24e      	bcs.n	800afca <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	699b      	ldr	r3, [r3, #24]
 800af30:	2b00      	cmp	r3, #0
 800af32:	db06      	blt.n	800af42 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af34:	4b2c      	ldr	r3, [pc, #176]	; (800afe8 <xTaskPriorityInherit+0xe0>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3a:	f1c3 0204 	rsb	r2, r3, #4
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	6959      	ldr	r1, [r3, #20]
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af4a:	4613      	mov	r3, r2
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	4413      	add	r3, r2
 800af50:	009b      	lsls	r3, r3, #2
 800af52:	4a26      	ldr	r2, [pc, #152]	; (800afec <xTaskPriorityInherit+0xe4>)
 800af54:	4413      	add	r3, r2
 800af56:	4299      	cmp	r1, r3
 800af58:	d12f      	bne.n	800afba <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	3304      	adds	r3, #4
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fe fa36 	bl	80093d0 <uxListRemove>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10a      	bne.n	800af80 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af6e:	2201      	movs	r2, #1
 800af70:	fa02 f303 	lsl.w	r3, r2, r3
 800af74:	43da      	mvns	r2, r3
 800af76:	4b1e      	ldr	r3, [pc, #120]	; (800aff0 <xTaskPriorityInherit+0xe8>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4013      	ands	r3, r2
 800af7c:	4a1c      	ldr	r2, [pc, #112]	; (800aff0 <xTaskPriorityInherit+0xe8>)
 800af7e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af80:	4b19      	ldr	r3, [pc, #100]	; (800afe8 <xTaskPriorityInherit+0xe0>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8e:	2201      	movs	r2, #1
 800af90:	409a      	lsls	r2, r3
 800af92:	4b17      	ldr	r3, [pc, #92]	; (800aff0 <xTaskPriorityInherit+0xe8>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4313      	orrs	r3, r2
 800af98:	4a15      	ldr	r2, [pc, #84]	; (800aff0 <xTaskPriorityInherit+0xe8>)
 800af9a:	6013      	str	r3, [r2, #0]
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afa0:	4613      	mov	r3, r2
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	4413      	add	r3, r2
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	4a10      	ldr	r2, [pc, #64]	; (800afec <xTaskPriorityInherit+0xe4>)
 800afaa:	441a      	add	r2, r3
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	3304      	adds	r3, #4
 800afb0:	4619      	mov	r1, r3
 800afb2:	4610      	mov	r0, r2
 800afb4:	f7fe f9af 	bl	8009316 <vListInsertEnd>
 800afb8:	e004      	b.n	800afc4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800afba:	4b0b      	ldr	r3, [pc, #44]	; (800afe8 <xTaskPriorityInherit+0xe0>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800afc4:	2301      	movs	r3, #1
 800afc6:	60fb      	str	r3, [r7, #12]
 800afc8:	e008      	b.n	800afdc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afce:	4b06      	ldr	r3, [pc, #24]	; (800afe8 <xTaskPriorityInherit+0xe0>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d201      	bcs.n	800afdc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800afd8:	2301      	movs	r3, #1
 800afda:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800afdc:	68fb      	ldr	r3, [r7, #12]
	}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	20002690 	.word	0x20002690
 800afec:	20002694 	.word	0x20002694
 800aff0:	2000275c 	.word	0x2000275c

0800aff4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b000:	2300      	movs	r3, #0
 800b002:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d06e      	beq.n	800b0e8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b00a:	4b3a      	ldr	r3, [pc, #232]	; (800b0f4 <xTaskPriorityDisinherit+0x100>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	693a      	ldr	r2, [r7, #16]
 800b010:	429a      	cmp	r2, r3
 800b012:	d00a      	beq.n	800b02a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b018:	f383 8811 	msr	BASEPRI, r3
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	60fb      	str	r3, [r7, #12]
}
 800b026:	bf00      	nop
 800b028:	e7fe      	b.n	800b028 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d10a      	bne.n	800b048 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b036:	f383 8811 	msr	BASEPRI, r3
 800b03a:	f3bf 8f6f 	isb	sy
 800b03e:	f3bf 8f4f 	dsb	sy
 800b042:	60bb      	str	r3, [r7, #8]
}
 800b044:	bf00      	nop
 800b046:	e7fe      	b.n	800b046 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b04c:	1e5a      	subs	r2, r3, #1
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d044      	beq.n	800b0e8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b062:	2b00      	cmp	r3, #0
 800b064:	d140      	bne.n	800b0e8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	3304      	adds	r3, #4
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7fe f9b0 	bl	80093d0 <uxListRemove>
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d115      	bne.n	800b0a2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b07a:	491f      	ldr	r1, [pc, #124]	; (800b0f8 <xTaskPriorityDisinherit+0x104>)
 800b07c:	4613      	mov	r3, r2
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	4413      	add	r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	440b      	add	r3, r1
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d10a      	bne.n	800b0a2 <xTaskPriorityDisinherit+0xae>
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b090:	2201      	movs	r2, #1
 800b092:	fa02 f303 	lsl.w	r3, r2, r3
 800b096:	43da      	mvns	r2, r3
 800b098:	4b18      	ldr	r3, [pc, #96]	; (800b0fc <xTaskPriorityDisinherit+0x108>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4013      	ands	r3, r2
 800b09e:	4a17      	ldr	r2, [pc, #92]	; (800b0fc <xTaskPriorityDisinherit+0x108>)
 800b0a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ae:	f1c3 0204 	rsb	r2, r3, #4
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	409a      	lsls	r2, r3
 800b0be:	4b0f      	ldr	r3, [pc, #60]	; (800b0fc <xTaskPriorityDisinherit+0x108>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	4a0d      	ldr	r2, [pc, #52]	; (800b0fc <xTaskPriorityDisinherit+0x108>)
 800b0c6:	6013      	str	r3, [r2, #0]
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0cc:	4613      	mov	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	4413      	add	r3, r2
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	4a08      	ldr	r2, [pc, #32]	; (800b0f8 <xTaskPriorityDisinherit+0x104>)
 800b0d6:	441a      	add	r2, r3
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	3304      	adds	r3, #4
 800b0dc:	4619      	mov	r1, r3
 800b0de:	4610      	mov	r0, r2
 800b0e0:	f7fe f919 	bl	8009316 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b0e8:	697b      	ldr	r3, [r7, #20]
	}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3718      	adds	r7, #24
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	20002690 	.word	0x20002690
 800b0f8:	20002694 	.word	0x20002694
 800b0fc:	2000275c 	.word	0x2000275c

0800b100 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b100:	b580      	push	{r7, lr}
 800b102:	b088      	sub	sp, #32
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b10e:	2301      	movs	r3, #1
 800b110:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d077      	beq.n	800b208 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d10a      	bne.n	800b136 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	60fb      	str	r3, [r7, #12]
}
 800b132:	bf00      	nop
 800b134:	e7fe      	b.n	800b134 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d902      	bls.n	800b146 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	61fb      	str	r3, [r7, #28]
 800b144:	e002      	b.n	800b14c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b146:	69bb      	ldr	r3, [r7, #24]
 800b148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b14a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b150:	69fa      	ldr	r2, [r7, #28]
 800b152:	429a      	cmp	r2, r3
 800b154:	d058      	beq.n	800b208 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b15a:	697a      	ldr	r2, [r7, #20]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d153      	bne.n	800b208 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b160:	4b2b      	ldr	r3, [pc, #172]	; (800b210 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	69ba      	ldr	r2, [r7, #24]
 800b166:	429a      	cmp	r2, r3
 800b168:	d10a      	bne.n	800b180 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16e:	f383 8811 	msr	BASEPRI, r3
 800b172:	f3bf 8f6f 	isb	sy
 800b176:	f3bf 8f4f 	dsb	sy
 800b17a:	60bb      	str	r3, [r7, #8]
}
 800b17c:	bf00      	nop
 800b17e:	e7fe      	b.n	800b17e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b184:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	69fa      	ldr	r2, [r7, #28]
 800b18a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b18c:	69bb      	ldr	r3, [r7, #24]
 800b18e:	699b      	ldr	r3, [r3, #24]
 800b190:	2b00      	cmp	r3, #0
 800b192:	db04      	blt.n	800b19e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	f1c3 0204 	rsb	r2, r3, #4
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	6959      	ldr	r1, [r3, #20]
 800b1a2:	693a      	ldr	r2, [r7, #16]
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	4413      	add	r3, r2
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	4a19      	ldr	r2, [pc, #100]	; (800b214 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b1ae:	4413      	add	r3, r2
 800b1b0:	4299      	cmp	r1, r3
 800b1b2:	d129      	bne.n	800b208 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1b4:	69bb      	ldr	r3, [r7, #24]
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7fe f909 	bl	80093d0 <uxListRemove>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10a      	bne.n	800b1da <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ce:	43da      	mvns	r2, r3
 800b1d0:	4b11      	ldr	r3, [pc, #68]	; (800b218 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4013      	ands	r3, r2
 800b1d6:	4a10      	ldr	r2, [pc, #64]	; (800b218 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b1d8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1de:	2201      	movs	r2, #1
 800b1e0:	409a      	lsls	r2, r3
 800b1e2:	4b0d      	ldr	r3, [pc, #52]	; (800b218 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	4a0b      	ldr	r2, [pc, #44]	; (800b218 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b1ea:	6013      	str	r3, [r2, #0]
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	4413      	add	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	4a06      	ldr	r2, [pc, #24]	; (800b214 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b1fa:	441a      	add	r2, r3
 800b1fc:	69bb      	ldr	r3, [r7, #24]
 800b1fe:	3304      	adds	r3, #4
 800b200:	4619      	mov	r1, r3
 800b202:	4610      	mov	r0, r2
 800b204:	f7fe f887 	bl	8009316 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b208:	bf00      	nop
 800b20a:	3720      	adds	r7, #32
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	20002690 	.word	0x20002690
 800b214:	20002694 	.word	0x20002694
 800b218:	2000275c 	.word	0x2000275c

0800b21c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b21c:	b480      	push	{r7}
 800b21e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b220:	4b07      	ldr	r3, [pc, #28]	; (800b240 <pvTaskIncrementMutexHeldCount+0x24>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d004      	beq.n	800b232 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b228:	4b05      	ldr	r3, [pc, #20]	; (800b240 <pvTaskIncrementMutexHeldCount+0x24>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b22e:	3201      	adds	r2, #1
 800b230:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 800b232:	4b03      	ldr	r3, [pc, #12]	; (800b240 <pvTaskIncrementMutexHeldCount+0x24>)
 800b234:	681b      	ldr	r3, [r3, #0]
	}
 800b236:	4618      	mov	r0, r3
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr
 800b240:	20002690 	.word	0x20002690

0800b244 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b24e:	4b29      	ldr	r3, [pc, #164]	; (800b2f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b254:	4b28      	ldr	r3, [pc, #160]	; (800b2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	3304      	adds	r3, #4
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fe f8b8 	bl	80093d0 <uxListRemove>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d10b      	bne.n	800b27e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b266:	4b24      	ldr	r3, [pc, #144]	; (800b2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26c:	2201      	movs	r2, #1
 800b26e:	fa02 f303 	lsl.w	r3, r2, r3
 800b272:	43da      	mvns	r2, r3
 800b274:	4b21      	ldr	r3, [pc, #132]	; (800b2fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4013      	ands	r3, r2
 800b27a:	4a20      	ldr	r2, [pc, #128]	; (800b2fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800b27c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b284:	d10a      	bne.n	800b29c <prvAddCurrentTaskToDelayedList+0x58>
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d007      	beq.n	800b29c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b28c:	4b1a      	ldr	r3, [pc, #104]	; (800b2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	3304      	adds	r3, #4
 800b292:	4619      	mov	r1, r3
 800b294:	481a      	ldr	r0, [pc, #104]	; (800b300 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b296:	f7fe f83e 	bl	8009316 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b29a:	e026      	b.n	800b2ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4413      	add	r3, r2
 800b2a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b2a4:	4b14      	ldr	r3, [pc, #80]	; (800b2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	68ba      	ldr	r2, [r7, #8]
 800b2aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d209      	bcs.n	800b2c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2b4:	4b13      	ldr	r3, [pc, #76]	; (800b304 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	4b0f      	ldr	r3, [pc, #60]	; (800b2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	3304      	adds	r3, #4
 800b2be:	4619      	mov	r1, r3
 800b2c0:	4610      	mov	r0, r2
 800b2c2:	f7fe f84c 	bl	800935e <vListInsert>
}
 800b2c6:	e010      	b.n	800b2ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2c8:	4b0f      	ldr	r3, [pc, #60]	; (800b308 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	4b0a      	ldr	r3, [pc, #40]	; (800b2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	3304      	adds	r3, #4
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	4610      	mov	r0, r2
 800b2d6:	f7fe f842 	bl	800935e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b2da:	4b0c      	ldr	r3, [pc, #48]	; (800b30c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	68ba      	ldr	r2, [r7, #8]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d202      	bcs.n	800b2ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b2e4:	4a09      	ldr	r2, [pc, #36]	; (800b30c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	6013      	str	r3, [r2, #0]
}
 800b2ea:	bf00      	nop
 800b2ec:	3710      	adds	r7, #16
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	20002758 	.word	0x20002758
 800b2f8:	20002690 	.word	0x20002690
 800b2fc:	2000275c 	.word	0x2000275c
 800b300:	20002740 	.word	0x20002740
 800b304:	20002710 	.word	0x20002710
 800b308:	2000270c 	.word	0x2000270c
 800b30c:	20002774 	.word	0x20002774

0800b310 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b08a      	sub	sp, #40	; 0x28
 800b314:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b316:	2300      	movs	r3, #0
 800b318:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b31a:	f000 fb85 	bl	800ba28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b31e:	4b1c      	ldr	r3, [pc, #112]	; (800b390 <xTimerCreateTimerTask+0x80>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d021      	beq.n	800b36a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b326:	2300      	movs	r3, #0
 800b328:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b32a:	2300      	movs	r3, #0
 800b32c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b32e:	1d3a      	adds	r2, r7, #4
 800b330:	f107 0108 	add.w	r1, r7, #8
 800b334:	f107 030c 	add.w	r3, r7, #12
 800b338:	4618      	mov	r0, r3
 800b33a:	f7f7 fcd9 	bl	8002cf0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b33e:	6879      	ldr	r1, [r7, #4]
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	68fa      	ldr	r2, [r7, #12]
 800b344:	9202      	str	r2, [sp, #8]
 800b346:	9301      	str	r3, [sp, #4]
 800b348:	2302      	movs	r3, #2
 800b34a:	9300      	str	r3, [sp, #0]
 800b34c:	2300      	movs	r3, #0
 800b34e:	460a      	mov	r2, r1
 800b350:	4910      	ldr	r1, [pc, #64]	; (800b394 <xTimerCreateTimerTask+0x84>)
 800b352:	4811      	ldr	r0, [pc, #68]	; (800b398 <xTimerCreateTimerTask+0x88>)
 800b354:	f7fe fef8 	bl	800a148 <xTaskCreateStatic>
 800b358:	4603      	mov	r3, r0
 800b35a:	4a10      	ldr	r2, [pc, #64]	; (800b39c <xTimerCreateTimerTask+0x8c>)
 800b35c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b35e:	4b0f      	ldr	r3, [pc, #60]	; (800b39c <xTimerCreateTimerTask+0x8c>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d001      	beq.n	800b36a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b366:	2301      	movs	r3, #1
 800b368:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d10a      	bne.n	800b386 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b374:	f383 8811 	msr	BASEPRI, r3
 800b378:	f3bf 8f6f 	isb	sy
 800b37c:	f3bf 8f4f 	dsb	sy
 800b380:	613b      	str	r3, [r7, #16]
}
 800b382:	bf00      	nop
 800b384:	e7fe      	b.n	800b384 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b386:	697b      	ldr	r3, [r7, #20]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3718      	adds	r7, #24
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	200027b0 	.word	0x200027b0
 800b394:	0800ca78 	.word	0x0800ca78
 800b398:	0800b609 	.word	0x0800b609
 800b39c:	200027b4 	.word	0x200027b4

0800b3a0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b088      	sub	sp, #32
 800b3a4:	af02      	add	r7, sp, #8
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
 800b3ac:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b3ae:	2028      	movs	r0, #40	; 0x28
 800b3b0:	f000 fdca 	bl	800bf48 <pvPortMalloc>
 800b3b4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00d      	beq.n	800b3d8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	9301      	str	r3, [sp, #4]
 800b3c8:	6a3b      	ldr	r3, [r7, #32]
 800b3ca:	9300      	str	r3, [sp, #0]
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	68b9      	ldr	r1, [r7, #8]
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	f000 f843 	bl	800b45e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b3d8:	697b      	ldr	r3, [r7, #20]
	}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3718      	adds	r7, #24
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}

0800b3e2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b08a      	sub	sp, #40	; 0x28
 800b3e6:	af02      	add	r7, sp, #8
 800b3e8:	60f8      	str	r0, [r7, #12]
 800b3ea:	60b9      	str	r1, [r7, #8]
 800b3ec:	607a      	str	r2, [r7, #4]
 800b3ee:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b3f0:	2328      	movs	r3, #40	; 0x28
 800b3f2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	2b28      	cmp	r3, #40	; 0x28
 800b3f8:	d00a      	beq.n	800b410 <xTimerCreateStatic+0x2e>
	__asm volatile
 800b3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fe:	f383 8811 	msr	BASEPRI, r3
 800b402:	f3bf 8f6f 	isb	sy
 800b406:	f3bf 8f4f 	dsb	sy
 800b40a:	61bb      	str	r3, [r7, #24]
}
 800b40c:	bf00      	nop
 800b40e:	e7fe      	b.n	800b40e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b410:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b414:	2b00      	cmp	r3, #0
 800b416:	d10a      	bne.n	800b42e <xTimerCreateStatic+0x4c>
	__asm volatile
 800b418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41c:	f383 8811 	msr	BASEPRI, r3
 800b420:	f3bf 8f6f 	isb	sy
 800b424:	f3bf 8f4f 	dsb	sy
 800b428:	617b      	str	r3, [r7, #20]
}
 800b42a:	bf00      	nop
 800b42c:	e7fe      	b.n	800b42c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800b42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b430:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d00d      	beq.n	800b454 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	2202      	movs	r2, #2
 800b43c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	9301      	str	r3, [sp, #4]
 800b444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b446:	9300      	str	r3, [sp, #0]
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	68b9      	ldr	r1, [r7, #8]
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f000 f805 	bl	800b45e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b454:	69fb      	ldr	r3, [r7, #28]
	}
 800b456:	4618      	mov	r0, r3
 800b458:	3720      	adds	r7, #32
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b086      	sub	sp, #24
 800b462:	af00      	add	r7, sp, #0
 800b464:	60f8      	str	r0, [r7, #12]
 800b466:	60b9      	str	r1, [r7, #8]
 800b468:	607a      	str	r2, [r7, #4]
 800b46a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10a      	bne.n	800b488 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800b472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b476:	f383 8811 	msr	BASEPRI, r3
 800b47a:	f3bf 8f6f 	isb	sy
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	617b      	str	r3, [r7, #20]
}
 800b484:	bf00      	nop
 800b486:	e7fe      	b.n	800b486 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800b488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d01e      	beq.n	800b4cc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b48e:	f000 facb 	bl	800ba28 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a0:	683a      	ldr	r2, [r7, #0]
 800b4a2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a6:	6a3a      	ldr	r2, [r7, #32]
 800b4a8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ac:	3304      	adds	r3, #4
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7fd ff24 	bl	80092fc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d008      	beq.n	800b4cc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b4c0:	f043 0304 	orr.w	r3, r3, #4
 800b4c4:	b2da      	uxtb	r2, r3
 800b4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b4cc:	bf00      	nop
 800b4ce:	3718      	adds	r7, #24
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b08a      	sub	sp, #40	; 0x28
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	607a      	str	r2, [r7, #4]
 800b4e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d10a      	bne.n	800b502 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f0:	f383 8811 	msr	BASEPRI, r3
 800b4f4:	f3bf 8f6f 	isb	sy
 800b4f8:	f3bf 8f4f 	dsb	sy
 800b4fc:	623b      	str	r3, [r7, #32]
}
 800b4fe:	bf00      	nop
 800b500:	e7fe      	b.n	800b500 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b502:	4b1a      	ldr	r3, [pc, #104]	; (800b56c <xTimerGenericCommand+0x98>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d02a      	beq.n	800b560 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	2b05      	cmp	r3, #5
 800b51a:	dc18      	bgt.n	800b54e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b51c:	f7ff fcd6 	bl	800aecc <xTaskGetSchedulerState>
 800b520:	4603      	mov	r3, r0
 800b522:	2b02      	cmp	r3, #2
 800b524:	d109      	bne.n	800b53a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b526:	4b11      	ldr	r3, [pc, #68]	; (800b56c <xTimerGenericCommand+0x98>)
 800b528:	6818      	ldr	r0, [r3, #0]
 800b52a:	f107 0114 	add.w	r1, r7, #20
 800b52e:	2300      	movs	r3, #0
 800b530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b532:	f7fe f8fd 	bl	8009730 <xQueueGenericSend>
 800b536:	6278      	str	r0, [r7, #36]	; 0x24
 800b538:	e012      	b.n	800b560 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b53a:	4b0c      	ldr	r3, [pc, #48]	; (800b56c <xTimerGenericCommand+0x98>)
 800b53c:	6818      	ldr	r0, [r3, #0]
 800b53e:	f107 0114 	add.w	r1, r7, #20
 800b542:	2300      	movs	r3, #0
 800b544:	2200      	movs	r2, #0
 800b546:	f7fe f8f3 	bl	8009730 <xQueueGenericSend>
 800b54a:	6278      	str	r0, [r7, #36]	; 0x24
 800b54c:	e008      	b.n	800b560 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b54e:	4b07      	ldr	r3, [pc, #28]	; (800b56c <xTimerGenericCommand+0x98>)
 800b550:	6818      	ldr	r0, [r3, #0]
 800b552:	f107 0114 	add.w	r1, r7, #20
 800b556:	2300      	movs	r3, #0
 800b558:	683a      	ldr	r2, [r7, #0]
 800b55a:	f7fe f9e7 	bl	800992c <xQueueGenericSendFromISR>
 800b55e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b562:	4618      	mov	r0, r3
 800b564:	3728      	adds	r7, #40	; 0x28
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	200027b0 	.word	0x200027b0

0800b570 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b088      	sub	sp, #32
 800b574:	af02      	add	r7, sp, #8
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b57a:	4b22      	ldr	r3, [pc, #136]	; (800b604 <prvProcessExpiredTimer+0x94>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	3304      	adds	r3, #4
 800b588:	4618      	mov	r0, r3
 800b58a:	f7fd ff21 	bl	80093d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b594:	f003 0304 	and.w	r3, r3, #4
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d022      	beq.n	800b5e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	699a      	ldr	r2, [r3, #24]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	18d1      	adds	r1, r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	683a      	ldr	r2, [r7, #0]
 800b5a8:	6978      	ldr	r0, [r7, #20]
 800b5aa:	f000 f8d1 	bl	800b750 <prvInsertTimerInActiveList>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d01f      	beq.n	800b5f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	9300      	str	r3, [sp, #0]
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	2100      	movs	r1, #0
 800b5be:	6978      	ldr	r0, [r7, #20]
 800b5c0:	f7ff ff88 	bl	800b4d4 <xTimerGenericCommand>
 800b5c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d113      	bne.n	800b5f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d0:	f383 8811 	msr	BASEPRI, r3
 800b5d4:	f3bf 8f6f 	isb	sy
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	60fb      	str	r3, [r7, #12]
}
 800b5de:	bf00      	nop
 800b5e0:	e7fe      	b.n	800b5e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b5e8:	f023 0301 	bic.w	r3, r3, #1
 800b5ec:	b2da      	uxtb	r2, r3
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	6a1b      	ldr	r3, [r3, #32]
 800b5f8:	6978      	ldr	r0, [r7, #20]
 800b5fa:	4798      	blx	r3
}
 800b5fc:	bf00      	nop
 800b5fe:	3718      	adds	r7, #24
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}
 800b604:	200027a8 	.word	0x200027a8

0800b608 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b610:	f107 0308 	add.w	r3, r7, #8
 800b614:	4618      	mov	r0, r3
 800b616:	f000 f857 	bl	800b6c8 <prvGetNextExpireTime>
 800b61a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	4619      	mov	r1, r3
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f000 f803 	bl	800b62c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b626:	f000 f8d5 	bl	800b7d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b62a:	e7f1      	b.n	800b610 <prvTimerTask+0x8>

0800b62c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b636:	f7ff f853 	bl	800a6e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b63a:	f107 0308 	add.w	r3, r7, #8
 800b63e:	4618      	mov	r0, r3
 800b640:	f000 f866 	bl	800b710 <prvSampleTimeNow>
 800b644:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d130      	bne.n	800b6ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d10a      	bne.n	800b668 <prvProcessTimerOrBlockTask+0x3c>
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	429a      	cmp	r2, r3
 800b658:	d806      	bhi.n	800b668 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b65a:	f7ff f84f 	bl	800a6fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b65e:	68f9      	ldr	r1, [r7, #12]
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f7ff ff85 	bl	800b570 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b666:	e024      	b.n	800b6b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d008      	beq.n	800b680 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b66e:	4b13      	ldr	r3, [pc, #76]	; (800b6bc <prvProcessTimerOrBlockTask+0x90>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d101      	bne.n	800b67c <prvProcessTimerOrBlockTask+0x50>
 800b678:	2301      	movs	r3, #1
 800b67a:	e000      	b.n	800b67e <prvProcessTimerOrBlockTask+0x52>
 800b67c:	2300      	movs	r3, #0
 800b67e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b680:	4b0f      	ldr	r3, [pc, #60]	; (800b6c0 <prvProcessTimerOrBlockTask+0x94>)
 800b682:	6818      	ldr	r0, [r3, #0]
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	1ad3      	subs	r3, r2, r3
 800b68a:	683a      	ldr	r2, [r7, #0]
 800b68c:	4619      	mov	r1, r3
 800b68e:	f7fe fd27 	bl	800a0e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b692:	f7ff f833 	bl	800a6fc <xTaskResumeAll>
 800b696:	4603      	mov	r3, r0
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d10a      	bne.n	800b6b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b69c:	4b09      	ldr	r3, [pc, #36]	; (800b6c4 <prvProcessTimerOrBlockTask+0x98>)
 800b69e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6a2:	601a      	str	r2, [r3, #0]
 800b6a4:	f3bf 8f4f 	dsb	sy
 800b6a8:	f3bf 8f6f 	isb	sy
}
 800b6ac:	e001      	b.n	800b6b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b6ae:	f7ff f825 	bl	800a6fc <xTaskResumeAll>
}
 800b6b2:	bf00      	nop
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	200027ac 	.word	0x200027ac
 800b6c0:	200027b0 	.word	0x200027b0
 800b6c4:	e000ed04 	.word	0xe000ed04

0800b6c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b085      	sub	sp, #20
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b6d0:	4b0e      	ldr	r3, [pc, #56]	; (800b70c <prvGetNextExpireTime+0x44>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d101      	bne.n	800b6de <prvGetNextExpireTime+0x16>
 800b6da:	2201      	movs	r2, #1
 800b6dc:	e000      	b.n	800b6e0 <prvGetNextExpireTime+0x18>
 800b6de:	2200      	movs	r2, #0
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d105      	bne.n	800b6f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b6ec:	4b07      	ldr	r3, [pc, #28]	; (800b70c <prvGetNextExpireTime+0x44>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	60fb      	str	r3, [r7, #12]
 800b6f6:	e001      	b.n	800b6fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3714      	adds	r7, #20
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop
 800b70c:	200027a8 	.word	0x200027a8

0800b710 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b718:	f7ff f88c 	bl	800a834 <xTaskGetTickCount>
 800b71c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b71e:	4b0b      	ldr	r3, [pc, #44]	; (800b74c <prvSampleTimeNow+0x3c>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	429a      	cmp	r2, r3
 800b726:	d205      	bcs.n	800b734 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b728:	f000 f91a 	bl	800b960 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2201      	movs	r2, #1
 800b730:	601a      	str	r2, [r3, #0]
 800b732:	e002      	b.n	800b73a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b73a:	4a04      	ldr	r2, [pc, #16]	; (800b74c <prvSampleTimeNow+0x3c>)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b740:	68fb      	ldr	r3, [r7, #12]
}
 800b742:	4618      	mov	r0, r3
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	200027b8 	.word	0x200027b8

0800b750 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b086      	sub	sp, #24
 800b754:	af00      	add	r7, sp, #0
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	607a      	str	r2, [r7, #4]
 800b75c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b75e:	2300      	movs	r3, #0
 800b760:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	68ba      	ldr	r2, [r7, #8]
 800b766:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b76e:	68ba      	ldr	r2, [r7, #8]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	429a      	cmp	r2, r3
 800b774:	d812      	bhi.n	800b79c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	1ad2      	subs	r2, r2, r3
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	699b      	ldr	r3, [r3, #24]
 800b780:	429a      	cmp	r2, r3
 800b782:	d302      	bcc.n	800b78a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b784:	2301      	movs	r3, #1
 800b786:	617b      	str	r3, [r7, #20]
 800b788:	e01b      	b.n	800b7c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b78a:	4b10      	ldr	r3, [pc, #64]	; (800b7cc <prvInsertTimerInActiveList+0x7c>)
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	3304      	adds	r3, #4
 800b792:	4619      	mov	r1, r3
 800b794:	4610      	mov	r0, r2
 800b796:	f7fd fde2 	bl	800935e <vListInsert>
 800b79a:	e012      	b.n	800b7c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d206      	bcs.n	800b7b2 <prvInsertTimerInActiveList+0x62>
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d302      	bcc.n	800b7b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	617b      	str	r3, [r7, #20]
 800b7b0:	e007      	b.n	800b7c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b7b2:	4b07      	ldr	r3, [pc, #28]	; (800b7d0 <prvInsertTimerInActiveList+0x80>)
 800b7b4:	681a      	ldr	r2, [r3, #0]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	3304      	adds	r3, #4
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	4610      	mov	r0, r2
 800b7be:	f7fd fdce 	bl	800935e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b7c2:	697b      	ldr	r3, [r7, #20]
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3718      	adds	r7, #24
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	200027ac 	.word	0x200027ac
 800b7d0:	200027a8 	.word	0x200027a8

0800b7d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b08c      	sub	sp, #48	; 0x30
 800b7d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b7da:	e0ae      	b.n	800b93a <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	f2c0 80aa 	blt.w	800b938 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ea:	695b      	ldr	r3, [r3, #20]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d004      	beq.n	800b7fa <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f2:	3304      	adds	r3, #4
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7fd fdeb 	bl	80093d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7fa:	1d3b      	adds	r3, r7, #4
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7ff ff87 	bl	800b710 <prvSampleTimeNow>
 800b802:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	2b09      	cmp	r3, #9
 800b808:	f200 8097 	bhi.w	800b93a <prvProcessReceivedCommands+0x166>
 800b80c:	a201      	add	r2, pc, #4	; (adr r2, 800b814 <prvProcessReceivedCommands+0x40>)
 800b80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b812:	bf00      	nop
 800b814:	0800b83d 	.word	0x0800b83d
 800b818:	0800b83d 	.word	0x0800b83d
 800b81c:	0800b83d 	.word	0x0800b83d
 800b820:	0800b8b1 	.word	0x0800b8b1
 800b824:	0800b8c5 	.word	0x0800b8c5
 800b828:	0800b90f 	.word	0x0800b90f
 800b82c:	0800b83d 	.word	0x0800b83d
 800b830:	0800b83d 	.word	0x0800b83d
 800b834:	0800b8b1 	.word	0x0800b8b1
 800b838:	0800b8c5 	.word	0x0800b8c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b842:	f043 0301 	orr.w	r3, r3, #1
 800b846:	b2da      	uxtb	r2, r3
 800b848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b84e:	68fa      	ldr	r2, [r7, #12]
 800b850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b852:	699b      	ldr	r3, [r3, #24]
 800b854:	18d1      	adds	r1, r2, r3
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6a3a      	ldr	r2, [r7, #32]
 800b85a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b85c:	f7ff ff78 	bl	800b750 <prvInsertTimerInActiveList>
 800b860:	4603      	mov	r3, r0
 800b862:	2b00      	cmp	r3, #0
 800b864:	d069      	beq.n	800b93a <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b868:	6a1b      	ldr	r3, [r3, #32]
 800b86a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b86c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b870:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b874:	f003 0304 	and.w	r3, r3, #4
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d05e      	beq.n	800b93a <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b87c:	68fa      	ldr	r2, [r7, #12]
 800b87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b880:	699b      	ldr	r3, [r3, #24]
 800b882:	441a      	add	r2, r3
 800b884:	2300      	movs	r3, #0
 800b886:	9300      	str	r3, [sp, #0]
 800b888:	2300      	movs	r3, #0
 800b88a:	2100      	movs	r1, #0
 800b88c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b88e:	f7ff fe21 	bl	800b4d4 <xTimerGenericCommand>
 800b892:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d14f      	bne.n	800b93a <prvProcessReceivedCommands+0x166>
	__asm volatile
 800b89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89e:	f383 8811 	msr	BASEPRI, r3
 800b8a2:	f3bf 8f6f 	isb	sy
 800b8a6:	f3bf 8f4f 	dsb	sy
 800b8aa:	61bb      	str	r3, [r7, #24]
}
 800b8ac:	bf00      	nop
 800b8ae:	e7fe      	b.n	800b8ae <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b8b6:	f023 0301 	bic.w	r3, r3, #1
 800b8ba:	b2da      	uxtb	r2, r3
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800b8c2:	e03a      	b.n	800b93a <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b8ca:	f043 0301 	orr.w	r3, r3, #1
 800b8ce:	b2da      	uxtb	r2, r3
 800b8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b8d6:	68fa      	ldr	r2, [r7, #12]
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8de:	699b      	ldr	r3, [r3, #24]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d10a      	bne.n	800b8fa <prvProcessReceivedCommands+0x126>
	__asm volatile
 800b8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e8:	f383 8811 	msr	BASEPRI, r3
 800b8ec:	f3bf 8f6f 	isb	sy
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	617b      	str	r3, [r7, #20]
}
 800b8f6:	bf00      	nop
 800b8f8:	e7fe      	b.n	800b8f8 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fc:	699a      	ldr	r2, [r3, #24]
 800b8fe:	6a3b      	ldr	r3, [r7, #32]
 800b900:	18d1      	adds	r1, r2, r3
 800b902:	6a3b      	ldr	r3, [r7, #32]
 800b904:	6a3a      	ldr	r2, [r7, #32]
 800b906:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b908:	f7ff ff22 	bl	800b750 <prvInsertTimerInActiveList>
					break;
 800b90c:	e015      	b.n	800b93a <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b910:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b914:	f003 0302 	and.w	r3, r3, #2
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d103      	bne.n	800b924 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800b91c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b91e:	f000 fbdf 	bl	800c0e0 <vPortFree>
 800b922:	e00a      	b.n	800b93a <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b926:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b92a:	f023 0301 	bic.w	r3, r3, #1
 800b92e:	b2da      	uxtb	r2, r3
 800b930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b936:	e000      	b.n	800b93a <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b938:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b93a:	4b08      	ldr	r3, [pc, #32]	; (800b95c <prvProcessReceivedCommands+0x188>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f107 0108 	add.w	r1, r7, #8
 800b942:	2200      	movs	r2, #0
 800b944:	4618      	mov	r0, r3
 800b946:	f7fe f88d 	bl	8009a64 <xQueueReceive>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f47f af45 	bne.w	800b7dc <prvProcessReceivedCommands+0x8>
	}
}
 800b952:	bf00      	nop
 800b954:	bf00      	nop
 800b956:	3728      	adds	r7, #40	; 0x28
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	200027b0 	.word	0x200027b0

0800b960 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b088      	sub	sp, #32
 800b964:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b966:	e048      	b.n	800b9fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b968:	4b2d      	ldr	r3, [pc, #180]	; (800ba20 <prvSwitchTimerLists+0xc0>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	68db      	ldr	r3, [r3, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b972:	4b2b      	ldr	r3, [pc, #172]	; (800ba20 <prvSwitchTimerLists+0xc0>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	3304      	adds	r3, #4
 800b980:	4618      	mov	r0, r3
 800b982:	f7fd fd25 	bl	80093d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	6a1b      	ldr	r3, [r3, #32]
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b994:	f003 0304 	and.w	r3, r3, #4
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d02e      	beq.n	800b9fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	699b      	ldr	r3, [r3, #24]
 800b9a0:	693a      	ldr	r2, [r7, #16]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d90e      	bls.n	800b9cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	68ba      	ldr	r2, [r7, #8]
 800b9b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	68fa      	ldr	r2, [r7, #12]
 800b9b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b9ba:	4b19      	ldr	r3, [pc, #100]	; (800ba20 <prvSwitchTimerLists+0xc0>)
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	3304      	adds	r3, #4
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	4610      	mov	r0, r2
 800b9c6:	f7fd fcca 	bl	800935e <vListInsert>
 800b9ca:	e016      	b.n	800b9fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	9300      	str	r3, [sp, #0]
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	693a      	ldr	r2, [r7, #16]
 800b9d4:	2100      	movs	r1, #0
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	f7ff fd7c 	bl	800b4d4 <xTimerGenericCommand>
 800b9dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d10a      	bne.n	800b9fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e8:	f383 8811 	msr	BASEPRI, r3
 800b9ec:	f3bf 8f6f 	isb	sy
 800b9f0:	f3bf 8f4f 	dsb	sy
 800b9f4:	603b      	str	r3, [r7, #0]
}
 800b9f6:	bf00      	nop
 800b9f8:	e7fe      	b.n	800b9f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9fa:	4b09      	ldr	r3, [pc, #36]	; (800ba20 <prvSwitchTimerLists+0xc0>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1b1      	bne.n	800b968 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ba04:	4b06      	ldr	r3, [pc, #24]	; (800ba20 <prvSwitchTimerLists+0xc0>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ba0a:	4b06      	ldr	r3, [pc, #24]	; (800ba24 <prvSwitchTimerLists+0xc4>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4a04      	ldr	r2, [pc, #16]	; (800ba20 <prvSwitchTimerLists+0xc0>)
 800ba10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ba12:	4a04      	ldr	r2, [pc, #16]	; (800ba24 <prvSwitchTimerLists+0xc4>)
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	6013      	str	r3, [r2, #0]
}
 800ba18:	bf00      	nop
 800ba1a:	3718      	adds	r7, #24
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}
 800ba20:	200027a8 	.word	0x200027a8
 800ba24:	200027ac 	.word	0x200027ac

0800ba28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ba2e:	f000 f969 	bl	800bd04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ba32:	4b15      	ldr	r3, [pc, #84]	; (800ba88 <prvCheckForValidListAndQueue+0x60>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d120      	bne.n	800ba7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ba3a:	4814      	ldr	r0, [pc, #80]	; (800ba8c <prvCheckForValidListAndQueue+0x64>)
 800ba3c:	f7fd fc3e 	bl	80092bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ba40:	4813      	ldr	r0, [pc, #76]	; (800ba90 <prvCheckForValidListAndQueue+0x68>)
 800ba42:	f7fd fc3b 	bl	80092bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ba46:	4b13      	ldr	r3, [pc, #76]	; (800ba94 <prvCheckForValidListAndQueue+0x6c>)
 800ba48:	4a10      	ldr	r2, [pc, #64]	; (800ba8c <prvCheckForValidListAndQueue+0x64>)
 800ba4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ba4c:	4b12      	ldr	r3, [pc, #72]	; (800ba98 <prvCheckForValidListAndQueue+0x70>)
 800ba4e:	4a10      	ldr	r2, [pc, #64]	; (800ba90 <prvCheckForValidListAndQueue+0x68>)
 800ba50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ba52:	2300      	movs	r3, #0
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	4b11      	ldr	r3, [pc, #68]	; (800ba9c <prvCheckForValidListAndQueue+0x74>)
 800ba58:	4a11      	ldr	r2, [pc, #68]	; (800baa0 <prvCheckForValidListAndQueue+0x78>)
 800ba5a:	210c      	movs	r1, #12
 800ba5c:	200a      	movs	r0, #10
 800ba5e:	f7fd fd49 	bl	80094f4 <xQueueGenericCreateStatic>
 800ba62:	4603      	mov	r3, r0
 800ba64:	4a08      	ldr	r2, [pc, #32]	; (800ba88 <prvCheckForValidListAndQueue+0x60>)
 800ba66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ba68:	4b07      	ldr	r3, [pc, #28]	; (800ba88 <prvCheckForValidListAndQueue+0x60>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d005      	beq.n	800ba7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ba70:	4b05      	ldr	r3, [pc, #20]	; (800ba88 <prvCheckForValidListAndQueue+0x60>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	490b      	ldr	r1, [pc, #44]	; (800baa4 <prvCheckForValidListAndQueue+0x7c>)
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7fe fb08 	bl	800a08c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba7c:	f000 f972 	bl	800bd64 <vPortExitCritical>
}
 800ba80:	bf00      	nop
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	200027b0 	.word	0x200027b0
 800ba8c:	20002780 	.word	0x20002780
 800ba90:	20002794 	.word	0x20002794
 800ba94:	200027a8 	.word	0x200027a8
 800ba98:	200027ac 	.word	0x200027ac
 800ba9c:	20002834 	.word	0x20002834
 800baa0:	200027bc 	.word	0x200027bc
 800baa4:	0800ca80 	.word	0x0800ca80

0800baa8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	3b04      	subs	r3, #4
 800bab8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	3b04      	subs	r3, #4
 800bac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	f023 0201 	bic.w	r2, r3, #1
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	3b04      	subs	r3, #4
 800bad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bad8:	4a0c      	ldr	r2, [pc, #48]	; (800bb0c <pxPortInitialiseStack+0x64>)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	3b14      	subs	r3, #20
 800bae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	3b04      	subs	r3, #4
 800baee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f06f 0202 	mvn.w	r2, #2
 800baf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	3b20      	subs	r3, #32
 800bafc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bafe:	68fb      	ldr	r3, [r7, #12]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3714      	adds	r7, #20
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr
 800bb0c:	0800bb11 	.word	0x0800bb11

0800bb10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb10:	b480      	push	{r7}
 800bb12:	b085      	sub	sp, #20
 800bb14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bb16:	2300      	movs	r3, #0
 800bb18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bb1a:	4b12      	ldr	r3, [pc, #72]	; (800bb64 <prvTaskExitError+0x54>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb22:	d00a      	beq.n	800bb3a <prvTaskExitError+0x2a>
	__asm volatile
 800bb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb28:	f383 8811 	msr	BASEPRI, r3
 800bb2c:	f3bf 8f6f 	isb	sy
 800bb30:	f3bf 8f4f 	dsb	sy
 800bb34:	60fb      	str	r3, [r7, #12]
}
 800bb36:	bf00      	nop
 800bb38:	e7fe      	b.n	800bb38 <prvTaskExitError+0x28>
	__asm volatile
 800bb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3e:	f383 8811 	msr	BASEPRI, r3
 800bb42:	f3bf 8f6f 	isb	sy
 800bb46:	f3bf 8f4f 	dsb	sy
 800bb4a:	60bb      	str	r3, [r7, #8]
}
 800bb4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bb4e:	bf00      	nop
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d0fc      	beq.n	800bb50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bb56:	bf00      	nop
 800bb58:	bf00      	nop
 800bb5a:	3714      	adds	r7, #20
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr
 800bb64:	20000120 	.word	0x20000120
	...

0800bb70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bb70:	4b07      	ldr	r3, [pc, #28]	; (800bb90 <pxCurrentTCBConst2>)
 800bb72:	6819      	ldr	r1, [r3, #0]
 800bb74:	6808      	ldr	r0, [r1, #0]
 800bb76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb7a:	f380 8809 	msr	PSP, r0
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f04f 0000 	mov.w	r0, #0
 800bb86:	f380 8811 	msr	BASEPRI, r0
 800bb8a:	4770      	bx	lr
 800bb8c:	f3af 8000 	nop.w

0800bb90 <pxCurrentTCBConst2>:
 800bb90:	20002690 	.word	0x20002690
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bb94:	bf00      	nop
 800bb96:	bf00      	nop

0800bb98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bb98:	4808      	ldr	r0, [pc, #32]	; (800bbbc <prvPortStartFirstTask+0x24>)
 800bb9a:	6800      	ldr	r0, [r0, #0]
 800bb9c:	6800      	ldr	r0, [r0, #0]
 800bb9e:	f380 8808 	msr	MSP, r0
 800bba2:	f04f 0000 	mov.w	r0, #0
 800bba6:	f380 8814 	msr	CONTROL, r0
 800bbaa:	b662      	cpsie	i
 800bbac:	b661      	cpsie	f
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	f3bf 8f6f 	isb	sy
 800bbb6:	df00      	svc	0
 800bbb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bbba:	bf00      	nop
 800bbbc:	e000ed08 	.word	0xe000ed08

0800bbc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b086      	sub	sp, #24
 800bbc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bbc6:	4b46      	ldr	r3, [pc, #280]	; (800bce0 <xPortStartScheduler+0x120>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a46      	ldr	r2, [pc, #280]	; (800bce4 <xPortStartScheduler+0x124>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d10a      	bne.n	800bbe6 <xPortStartScheduler+0x26>
	__asm volatile
 800bbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd4:	f383 8811 	msr	BASEPRI, r3
 800bbd8:	f3bf 8f6f 	isb	sy
 800bbdc:	f3bf 8f4f 	dsb	sy
 800bbe0:	613b      	str	r3, [r7, #16]
}
 800bbe2:	bf00      	nop
 800bbe4:	e7fe      	b.n	800bbe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bbe6:	4b3e      	ldr	r3, [pc, #248]	; (800bce0 <xPortStartScheduler+0x120>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a3f      	ldr	r2, [pc, #252]	; (800bce8 <xPortStartScheduler+0x128>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d10a      	bne.n	800bc06 <xPortStartScheduler+0x46>
	__asm volatile
 800bbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf4:	f383 8811 	msr	BASEPRI, r3
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	60fb      	str	r3, [r7, #12]
}
 800bc02:	bf00      	nop
 800bc04:	e7fe      	b.n	800bc04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bc06:	4b39      	ldr	r3, [pc, #228]	; (800bcec <xPortStartScheduler+0x12c>)
 800bc08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	22ff      	movs	r2, #255	; 0xff
 800bc16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc20:	78fb      	ldrb	r3, [r7, #3]
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bc28:	b2da      	uxtb	r2, r3
 800bc2a:	4b31      	ldr	r3, [pc, #196]	; (800bcf0 <xPortStartScheduler+0x130>)
 800bc2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc2e:	4b31      	ldr	r3, [pc, #196]	; (800bcf4 <xPortStartScheduler+0x134>)
 800bc30:	2207      	movs	r2, #7
 800bc32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc34:	e009      	b.n	800bc4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bc36:	4b2f      	ldr	r3, [pc, #188]	; (800bcf4 <xPortStartScheduler+0x134>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	4a2d      	ldr	r2, [pc, #180]	; (800bcf4 <xPortStartScheduler+0x134>)
 800bc3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bc40:	78fb      	ldrb	r3, [r7, #3]
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	005b      	lsls	r3, r3, #1
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc4a:	78fb      	ldrb	r3, [r7, #3]
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc52:	2b80      	cmp	r3, #128	; 0x80
 800bc54:	d0ef      	beq.n	800bc36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bc56:	4b27      	ldr	r3, [pc, #156]	; (800bcf4 <xPortStartScheduler+0x134>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f1c3 0307 	rsb	r3, r3, #7
 800bc5e:	2b04      	cmp	r3, #4
 800bc60:	d00a      	beq.n	800bc78 <xPortStartScheduler+0xb8>
	__asm volatile
 800bc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	60bb      	str	r3, [r7, #8]
}
 800bc74:	bf00      	nop
 800bc76:	e7fe      	b.n	800bc76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bc78:	4b1e      	ldr	r3, [pc, #120]	; (800bcf4 <xPortStartScheduler+0x134>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	021b      	lsls	r3, r3, #8
 800bc7e:	4a1d      	ldr	r2, [pc, #116]	; (800bcf4 <xPortStartScheduler+0x134>)
 800bc80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bc82:	4b1c      	ldr	r3, [pc, #112]	; (800bcf4 <xPortStartScheduler+0x134>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bc8a:	4a1a      	ldr	r2, [pc, #104]	; (800bcf4 <xPortStartScheduler+0x134>)
 800bc8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	b2da      	uxtb	r2, r3
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bc96:	4b18      	ldr	r3, [pc, #96]	; (800bcf8 <xPortStartScheduler+0x138>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4a17      	ldr	r2, [pc, #92]	; (800bcf8 <xPortStartScheduler+0x138>)
 800bc9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bca0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bca2:	4b15      	ldr	r3, [pc, #84]	; (800bcf8 <xPortStartScheduler+0x138>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a14      	ldr	r2, [pc, #80]	; (800bcf8 <xPortStartScheduler+0x138>)
 800bca8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bcac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bcae:	f000 f8dd 	bl	800be6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bcb2:	4b12      	ldr	r3, [pc, #72]	; (800bcfc <xPortStartScheduler+0x13c>)
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bcb8:	f000 f8fc 	bl	800beb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bcbc:	4b10      	ldr	r3, [pc, #64]	; (800bd00 <xPortStartScheduler+0x140>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a0f      	ldr	r2, [pc, #60]	; (800bd00 <xPortStartScheduler+0x140>)
 800bcc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bcc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bcc8:	f7ff ff66 	bl	800bb98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bccc:	f7fe fe8c 	bl	800a9e8 <vTaskSwitchContext>
	prvTaskExitError();
 800bcd0:	f7ff ff1e 	bl	800bb10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bcd4:	2300      	movs	r3, #0
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3718      	adds	r7, #24
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	e000ed00 	.word	0xe000ed00
 800bce4:	410fc271 	.word	0x410fc271
 800bce8:	410fc270 	.word	0x410fc270
 800bcec:	e000e400 	.word	0xe000e400
 800bcf0:	2000287c 	.word	0x2000287c
 800bcf4:	20002880 	.word	0x20002880
 800bcf8:	e000ed20 	.word	0xe000ed20
 800bcfc:	20000120 	.word	0x20000120
 800bd00:	e000ef34 	.word	0xe000ef34

0800bd04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
	__asm volatile
 800bd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0e:	f383 8811 	msr	BASEPRI, r3
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	607b      	str	r3, [r7, #4]
}
 800bd1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd1e:	4b0f      	ldr	r3, [pc, #60]	; (800bd5c <vPortEnterCritical+0x58>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	3301      	adds	r3, #1
 800bd24:	4a0d      	ldr	r2, [pc, #52]	; (800bd5c <vPortEnterCritical+0x58>)
 800bd26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd28:	4b0c      	ldr	r3, [pc, #48]	; (800bd5c <vPortEnterCritical+0x58>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d10f      	bne.n	800bd50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd30:	4b0b      	ldr	r3, [pc, #44]	; (800bd60 <vPortEnterCritical+0x5c>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00a      	beq.n	800bd50 <vPortEnterCritical+0x4c>
	__asm volatile
 800bd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3e:	f383 8811 	msr	BASEPRI, r3
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	f3bf 8f4f 	dsb	sy
 800bd4a:	603b      	str	r3, [r7, #0]
}
 800bd4c:	bf00      	nop
 800bd4e:	e7fe      	b.n	800bd4e <vPortEnterCritical+0x4a>
	}
}
 800bd50:	bf00      	nop
 800bd52:	370c      	adds	r7, #12
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	20000120 	.word	0x20000120
 800bd60:	e000ed04 	.word	0xe000ed04

0800bd64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bd6a:	4b12      	ldr	r3, [pc, #72]	; (800bdb4 <vPortExitCritical+0x50>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d10a      	bne.n	800bd88 <vPortExitCritical+0x24>
	__asm volatile
 800bd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd76:	f383 8811 	msr	BASEPRI, r3
 800bd7a:	f3bf 8f6f 	isb	sy
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	607b      	str	r3, [r7, #4]
}
 800bd84:	bf00      	nop
 800bd86:	e7fe      	b.n	800bd86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bd88:	4b0a      	ldr	r3, [pc, #40]	; (800bdb4 <vPortExitCritical+0x50>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	3b01      	subs	r3, #1
 800bd8e:	4a09      	ldr	r2, [pc, #36]	; (800bdb4 <vPortExitCritical+0x50>)
 800bd90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bd92:	4b08      	ldr	r3, [pc, #32]	; (800bdb4 <vPortExitCritical+0x50>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d105      	bne.n	800bda6 <vPortExitCritical+0x42>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	f383 8811 	msr	BASEPRI, r3
}
 800bda4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bda6:	bf00      	nop
 800bda8:	370c      	adds	r7, #12
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop
 800bdb4:	20000120 	.word	0x20000120
	...

0800bdc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bdc0:	f3ef 8009 	mrs	r0, PSP
 800bdc4:	f3bf 8f6f 	isb	sy
 800bdc8:	4b15      	ldr	r3, [pc, #84]	; (800be20 <pxCurrentTCBConst>)
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	f01e 0f10 	tst.w	lr, #16
 800bdd0:	bf08      	it	eq
 800bdd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bdd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdda:	6010      	str	r0, [r2, #0]
 800bddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bde0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bde4:	f380 8811 	msr	BASEPRI, r0
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	f3bf 8f6f 	isb	sy
 800bdf0:	f7fe fdfa 	bl	800a9e8 <vTaskSwitchContext>
 800bdf4:	f04f 0000 	mov.w	r0, #0
 800bdf8:	f380 8811 	msr	BASEPRI, r0
 800bdfc:	bc09      	pop	{r0, r3}
 800bdfe:	6819      	ldr	r1, [r3, #0]
 800be00:	6808      	ldr	r0, [r1, #0]
 800be02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be06:	f01e 0f10 	tst.w	lr, #16
 800be0a:	bf08      	it	eq
 800be0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be10:	f380 8809 	msr	PSP, r0
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop
 800be1c:	f3af 8000 	nop.w

0800be20 <pxCurrentTCBConst>:
 800be20:	20002690 	.word	0x20002690
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be24:	bf00      	nop
 800be26:	bf00      	nop

0800be28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
	__asm volatile
 800be2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be32:	f383 8811 	msr	BASEPRI, r3
 800be36:	f3bf 8f6f 	isb	sy
 800be3a:	f3bf 8f4f 	dsb	sy
 800be3e:	607b      	str	r3, [r7, #4]
}
 800be40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800be42:	f7fe fd19 	bl	800a878 <xTaskIncrementTick>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d003      	beq.n	800be54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800be4c:	4b06      	ldr	r3, [pc, #24]	; (800be68 <SysTick_Handler+0x40>)
 800be4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be52:	601a      	str	r2, [r3, #0]
 800be54:	2300      	movs	r3, #0
 800be56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	f383 8811 	msr	BASEPRI, r3
}
 800be5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800be60:	bf00      	nop
 800be62:	3708      	adds	r7, #8
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	e000ed04 	.word	0xe000ed04

0800be6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800be6c:	b480      	push	{r7}
 800be6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800be70:	4b0b      	ldr	r3, [pc, #44]	; (800bea0 <vPortSetupTimerInterrupt+0x34>)
 800be72:	2200      	movs	r2, #0
 800be74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800be76:	4b0b      	ldr	r3, [pc, #44]	; (800bea4 <vPortSetupTimerInterrupt+0x38>)
 800be78:	2200      	movs	r2, #0
 800be7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800be7c:	4b0a      	ldr	r3, [pc, #40]	; (800bea8 <vPortSetupTimerInterrupt+0x3c>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a0a      	ldr	r2, [pc, #40]	; (800beac <vPortSetupTimerInterrupt+0x40>)
 800be82:	fba2 2303 	umull	r2, r3, r2, r3
 800be86:	099b      	lsrs	r3, r3, #6
 800be88:	4a09      	ldr	r2, [pc, #36]	; (800beb0 <vPortSetupTimerInterrupt+0x44>)
 800be8a:	3b01      	subs	r3, #1
 800be8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800be8e:	4b04      	ldr	r3, [pc, #16]	; (800bea0 <vPortSetupTimerInterrupt+0x34>)
 800be90:	2207      	movs	r2, #7
 800be92:	601a      	str	r2, [r3, #0]
}
 800be94:	bf00      	nop
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	e000e010 	.word	0xe000e010
 800bea4:	e000e018 	.word	0xe000e018
 800bea8:	20000034 	.word	0x20000034
 800beac:	10624dd3 	.word	0x10624dd3
 800beb0:	e000e014 	.word	0xe000e014

0800beb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800beb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bec4 <vPortEnableVFP+0x10>
 800beb8:	6801      	ldr	r1, [r0, #0]
 800beba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bebe:	6001      	str	r1, [r0, #0]
 800bec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bec2:	bf00      	nop
 800bec4:	e000ed88 	.word	0xe000ed88

0800bec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bece:	f3ef 8305 	mrs	r3, IPSR
 800bed2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2b0f      	cmp	r3, #15
 800bed8:	d914      	bls.n	800bf04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800beda:	4a17      	ldr	r2, [pc, #92]	; (800bf38 <vPortValidateInterruptPriority+0x70>)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	4413      	add	r3, r2
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bee4:	4b15      	ldr	r3, [pc, #84]	; (800bf3c <vPortValidateInterruptPriority+0x74>)
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	7afa      	ldrb	r2, [r7, #11]
 800beea:	429a      	cmp	r2, r3
 800beec:	d20a      	bcs.n	800bf04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800beee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef2:	f383 8811 	msr	BASEPRI, r3
 800bef6:	f3bf 8f6f 	isb	sy
 800befa:	f3bf 8f4f 	dsb	sy
 800befe:	607b      	str	r3, [r7, #4]
}
 800bf00:	bf00      	nop
 800bf02:	e7fe      	b.n	800bf02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bf04:	4b0e      	ldr	r3, [pc, #56]	; (800bf40 <vPortValidateInterruptPriority+0x78>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bf0c:	4b0d      	ldr	r3, [pc, #52]	; (800bf44 <vPortValidateInterruptPriority+0x7c>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d90a      	bls.n	800bf2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf18:	f383 8811 	msr	BASEPRI, r3
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	f3bf 8f4f 	dsb	sy
 800bf24:	603b      	str	r3, [r7, #0]
}
 800bf26:	bf00      	nop
 800bf28:	e7fe      	b.n	800bf28 <vPortValidateInterruptPriority+0x60>
	}
 800bf2a:	bf00      	nop
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr
 800bf36:	bf00      	nop
 800bf38:	e000e3f0 	.word	0xe000e3f0
 800bf3c:	2000287c 	.word	0x2000287c
 800bf40:	e000ed0c 	.word	0xe000ed0c
 800bf44:	20002880 	.word	0x20002880

0800bf48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b08a      	sub	sp, #40	; 0x28
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bf50:	2300      	movs	r3, #0
 800bf52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bf54:	f7fe fbc4 	bl	800a6e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bf58:	4b5b      	ldr	r3, [pc, #364]	; (800c0c8 <pvPortMalloc+0x180>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d101      	bne.n	800bf64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bf60:	f000 f920 	bl	800c1a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bf64:	4b59      	ldr	r3, [pc, #356]	; (800c0cc <pvPortMalloc+0x184>)
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4013      	ands	r3, r2
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f040 8093 	bne.w	800c098 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d01d      	beq.n	800bfb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bf78:	2208      	movs	r2, #8
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f003 0307 	and.w	r3, r3, #7
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d014      	beq.n	800bfb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f023 0307 	bic.w	r3, r3, #7
 800bf90:	3308      	adds	r3, #8
 800bf92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f003 0307 	and.w	r3, r3, #7
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00a      	beq.n	800bfb4 <pvPortMalloc+0x6c>
	__asm volatile
 800bf9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa2:	f383 8811 	msr	BASEPRI, r3
 800bfa6:	f3bf 8f6f 	isb	sy
 800bfaa:	f3bf 8f4f 	dsb	sy
 800bfae:	617b      	str	r3, [r7, #20]
}
 800bfb0:	bf00      	nop
 800bfb2:	e7fe      	b.n	800bfb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d06e      	beq.n	800c098 <pvPortMalloc+0x150>
 800bfba:	4b45      	ldr	r3, [pc, #276]	; (800c0d0 <pvPortMalloc+0x188>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d869      	bhi.n	800c098 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bfc4:	4b43      	ldr	r3, [pc, #268]	; (800c0d4 <pvPortMalloc+0x18c>)
 800bfc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bfc8:	4b42      	ldr	r3, [pc, #264]	; (800c0d4 <pvPortMalloc+0x18c>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfce:	e004      	b.n	800bfda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d903      	bls.n	800bfec <pvPortMalloc+0xa4>
 800bfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1f1      	bne.n	800bfd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bfec:	4b36      	ldr	r3, [pc, #216]	; (800c0c8 <pvPortMalloc+0x180>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d050      	beq.n	800c098 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bff6:	6a3b      	ldr	r3, [r7, #32]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2208      	movs	r2, #8
 800bffc:	4413      	add	r3, r2
 800bffe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	6a3b      	ldr	r3, [r7, #32]
 800c006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00a:	685a      	ldr	r2, [r3, #4]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	1ad2      	subs	r2, r2, r3
 800c010:	2308      	movs	r3, #8
 800c012:	005b      	lsls	r3, r3, #1
 800c014:	429a      	cmp	r2, r3
 800c016:	d91f      	bls.n	800c058 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4413      	add	r3, r2
 800c01e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	f003 0307 	and.w	r3, r3, #7
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00a      	beq.n	800c040 <pvPortMalloc+0xf8>
	__asm volatile
 800c02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02e:	f383 8811 	msr	BASEPRI, r3
 800c032:	f3bf 8f6f 	isb	sy
 800c036:	f3bf 8f4f 	dsb	sy
 800c03a:	613b      	str	r3, [r7, #16]
}
 800c03c:	bf00      	nop
 800c03e:	e7fe      	b.n	800c03e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c042:	685a      	ldr	r2, [r3, #4]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	1ad2      	subs	r2, r2, r3
 800c048:	69bb      	ldr	r3, [r7, #24]
 800c04a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c052:	69b8      	ldr	r0, [r7, #24]
 800c054:	f000 f908 	bl	800c268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c058:	4b1d      	ldr	r3, [pc, #116]	; (800c0d0 <pvPortMalloc+0x188>)
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	1ad3      	subs	r3, r2, r3
 800c062:	4a1b      	ldr	r2, [pc, #108]	; (800c0d0 <pvPortMalloc+0x188>)
 800c064:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c066:	4b1a      	ldr	r3, [pc, #104]	; (800c0d0 <pvPortMalloc+0x188>)
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	4b1b      	ldr	r3, [pc, #108]	; (800c0d8 <pvPortMalloc+0x190>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d203      	bcs.n	800c07a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c072:	4b17      	ldr	r3, [pc, #92]	; (800c0d0 <pvPortMalloc+0x188>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4a18      	ldr	r2, [pc, #96]	; (800c0d8 <pvPortMalloc+0x190>)
 800c078:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07c:	685a      	ldr	r2, [r3, #4]
 800c07e:	4b13      	ldr	r3, [pc, #76]	; (800c0cc <pvPortMalloc+0x184>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	431a      	orrs	r2, r3
 800c084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c086:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08a:	2200      	movs	r2, #0
 800c08c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c08e:	4b13      	ldr	r3, [pc, #76]	; (800c0dc <pvPortMalloc+0x194>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	3301      	adds	r3, #1
 800c094:	4a11      	ldr	r2, [pc, #68]	; (800c0dc <pvPortMalloc+0x194>)
 800c096:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c098:	f7fe fb30 	bl	800a6fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	f003 0307 	and.w	r3, r3, #7
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00a      	beq.n	800c0bc <pvPortMalloc+0x174>
	__asm volatile
 800c0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0aa:	f383 8811 	msr	BASEPRI, r3
 800c0ae:	f3bf 8f6f 	isb	sy
 800c0b2:	f3bf 8f4f 	dsb	sy
 800c0b6:	60fb      	str	r3, [r7, #12]
}
 800c0b8:	bf00      	nop
 800c0ba:	e7fe      	b.n	800c0ba <pvPortMalloc+0x172>
	return pvReturn;
 800c0bc:	69fb      	ldr	r3, [r7, #28]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3728      	adds	r7, #40	; 0x28
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	20002c8c 	.word	0x20002c8c
 800c0cc:	20002ca0 	.word	0x20002ca0
 800c0d0:	20002c90 	.word	0x20002c90
 800c0d4:	20002c84 	.word	0x20002c84
 800c0d8:	20002c94 	.word	0x20002c94
 800c0dc:	20002c98 	.word	0x20002c98

0800c0e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b086      	sub	sp, #24
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d04d      	beq.n	800c18e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c0f2:	2308      	movs	r3, #8
 800c0f4:	425b      	negs	r3, r3
 800c0f6:	697a      	ldr	r2, [r7, #20]
 800c0f8:	4413      	add	r3, r2
 800c0fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	685a      	ldr	r2, [r3, #4]
 800c104:	4b24      	ldr	r3, [pc, #144]	; (800c198 <vPortFree+0xb8>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4013      	ands	r3, r2
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d10a      	bne.n	800c124 <vPortFree+0x44>
	__asm volatile
 800c10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c112:	f383 8811 	msr	BASEPRI, r3
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	60fb      	str	r3, [r7, #12]
}
 800c120:	bf00      	nop
 800c122:	e7fe      	b.n	800c122 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00a      	beq.n	800c142 <vPortFree+0x62>
	__asm volatile
 800c12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c130:	f383 8811 	msr	BASEPRI, r3
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	60bb      	str	r3, [r7, #8]
}
 800c13e:	bf00      	nop
 800c140:	e7fe      	b.n	800c140 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	685a      	ldr	r2, [r3, #4]
 800c146:	4b14      	ldr	r3, [pc, #80]	; (800c198 <vPortFree+0xb8>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4013      	ands	r3, r2
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d01e      	beq.n	800c18e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d11a      	bne.n	800c18e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	685a      	ldr	r2, [r3, #4]
 800c15c:	4b0e      	ldr	r3, [pc, #56]	; (800c198 <vPortFree+0xb8>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	43db      	mvns	r3, r3
 800c162:	401a      	ands	r2, r3
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c168:	f7fe faba 	bl	800a6e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	685a      	ldr	r2, [r3, #4]
 800c170:	4b0a      	ldr	r3, [pc, #40]	; (800c19c <vPortFree+0xbc>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	4413      	add	r3, r2
 800c176:	4a09      	ldr	r2, [pc, #36]	; (800c19c <vPortFree+0xbc>)
 800c178:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c17a:	6938      	ldr	r0, [r7, #16]
 800c17c:	f000 f874 	bl	800c268 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c180:	4b07      	ldr	r3, [pc, #28]	; (800c1a0 <vPortFree+0xc0>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	3301      	adds	r3, #1
 800c186:	4a06      	ldr	r2, [pc, #24]	; (800c1a0 <vPortFree+0xc0>)
 800c188:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c18a:	f7fe fab7 	bl	800a6fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c18e:	bf00      	nop
 800c190:	3718      	adds	r7, #24
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	20002ca0 	.word	0x20002ca0
 800c19c:	20002c90 	.word	0x20002c90
 800c1a0:	20002c9c 	.word	0x20002c9c

0800c1a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c1aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c1b0:	4b27      	ldr	r3, [pc, #156]	; (800c250 <prvHeapInit+0xac>)
 800c1b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f003 0307 	and.w	r3, r3, #7
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00c      	beq.n	800c1d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	3307      	adds	r3, #7
 800c1c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f023 0307 	bic.w	r3, r3, #7
 800c1ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c1cc:	68ba      	ldr	r2, [r7, #8]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	4a1f      	ldr	r2, [pc, #124]	; (800c250 <prvHeapInit+0xac>)
 800c1d4:	4413      	add	r3, r2
 800c1d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c1dc:	4a1d      	ldr	r2, [pc, #116]	; (800c254 <prvHeapInit+0xb0>)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c1e2:	4b1c      	ldr	r3, [pc, #112]	; (800c254 <prvHeapInit+0xb0>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	68ba      	ldr	r2, [r7, #8]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c1f0:	2208      	movs	r2, #8
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	1a9b      	subs	r3, r3, r2
 800c1f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f023 0307 	bic.w	r3, r3, #7
 800c1fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	4a15      	ldr	r2, [pc, #84]	; (800c258 <prvHeapInit+0xb4>)
 800c204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c206:	4b14      	ldr	r3, [pc, #80]	; (800c258 <prvHeapInit+0xb4>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2200      	movs	r2, #0
 800c20c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c20e:	4b12      	ldr	r3, [pc, #72]	; (800c258 <prvHeapInit+0xb4>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2200      	movs	r2, #0
 800c214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	1ad2      	subs	r2, r2, r3
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c224:	4b0c      	ldr	r3, [pc, #48]	; (800c258 <prvHeapInit+0xb4>)
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	4a0a      	ldr	r2, [pc, #40]	; (800c25c <prvHeapInit+0xb8>)
 800c232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	4a09      	ldr	r2, [pc, #36]	; (800c260 <prvHeapInit+0xbc>)
 800c23a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c23c:	4b09      	ldr	r3, [pc, #36]	; (800c264 <prvHeapInit+0xc0>)
 800c23e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c242:	601a      	str	r2, [r3, #0]
}
 800c244:	bf00      	nop
 800c246:	3714      	adds	r7, #20
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr
 800c250:	20002884 	.word	0x20002884
 800c254:	20002c84 	.word	0x20002c84
 800c258:	20002c8c 	.word	0x20002c8c
 800c25c:	20002c94 	.word	0x20002c94
 800c260:	20002c90 	.word	0x20002c90
 800c264:	20002ca0 	.word	0x20002ca0

0800c268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c268:	b480      	push	{r7}
 800c26a:	b085      	sub	sp, #20
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c270:	4b28      	ldr	r3, [pc, #160]	; (800c314 <prvInsertBlockIntoFreeList+0xac>)
 800c272:	60fb      	str	r3, [r7, #12]
 800c274:	e002      	b.n	800c27c <prvInsertBlockIntoFreeList+0x14>
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	60fb      	str	r3, [r7, #12]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	429a      	cmp	r2, r3
 800c284:	d8f7      	bhi.n	800c276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	68ba      	ldr	r2, [r7, #8]
 800c290:	4413      	add	r3, r2
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	429a      	cmp	r2, r3
 800c296:	d108      	bne.n	800c2aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	685a      	ldr	r2, [r3, #4]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	441a      	add	r2, r3
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	441a      	add	r2, r3
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d118      	bne.n	800c2f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	4b15      	ldr	r3, [pc, #84]	; (800c318 <prvInsertBlockIntoFreeList+0xb0>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d00d      	beq.n	800c2e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	685a      	ldr	r2, [r3, #4]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	441a      	add	r2, r3
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	601a      	str	r2, [r3, #0]
 800c2e4:	e008      	b.n	800c2f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c2e6:	4b0c      	ldr	r3, [pc, #48]	; (800c318 <prvInsertBlockIntoFreeList+0xb0>)
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	601a      	str	r2, [r3, #0]
 800c2ee:	e003      	b.n	800c2f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d002      	beq.n	800c306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c306:	bf00      	nop
 800c308:	3714      	adds	r7, #20
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop
 800c314:	20002c84 	.word	0x20002c84
 800c318:	20002c8c 	.word	0x20002c8c

0800c31c <__errno>:
 800c31c:	4b01      	ldr	r3, [pc, #4]	; (800c324 <__errno+0x8>)
 800c31e:	6818      	ldr	r0, [r3, #0]
 800c320:	4770      	bx	lr
 800c322:	bf00      	nop
 800c324:	20000124 	.word	0x20000124

0800c328 <__libc_init_array>:
 800c328:	b570      	push	{r4, r5, r6, lr}
 800c32a:	4d0d      	ldr	r5, [pc, #52]	; (800c360 <__libc_init_array+0x38>)
 800c32c:	4c0d      	ldr	r4, [pc, #52]	; (800c364 <__libc_init_array+0x3c>)
 800c32e:	1b64      	subs	r4, r4, r5
 800c330:	10a4      	asrs	r4, r4, #2
 800c332:	2600      	movs	r6, #0
 800c334:	42a6      	cmp	r6, r4
 800c336:	d109      	bne.n	800c34c <__libc_init_array+0x24>
 800c338:	4d0b      	ldr	r5, [pc, #44]	; (800c368 <__libc_init_array+0x40>)
 800c33a:	4c0c      	ldr	r4, [pc, #48]	; (800c36c <__libc_init_array+0x44>)
 800c33c:	f000 fafa 	bl	800c934 <_init>
 800c340:	1b64      	subs	r4, r4, r5
 800c342:	10a4      	asrs	r4, r4, #2
 800c344:	2600      	movs	r6, #0
 800c346:	42a6      	cmp	r6, r4
 800c348:	d105      	bne.n	800c356 <__libc_init_array+0x2e>
 800c34a:	bd70      	pop	{r4, r5, r6, pc}
 800c34c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c350:	4798      	blx	r3
 800c352:	3601      	adds	r6, #1
 800c354:	e7ee      	b.n	800c334 <__libc_init_array+0xc>
 800c356:	f855 3b04 	ldr.w	r3, [r5], #4
 800c35a:	4798      	blx	r3
 800c35c:	3601      	adds	r6, #1
 800c35e:	e7f2      	b.n	800c346 <__libc_init_array+0x1e>
 800c360:	0800cb50 	.word	0x0800cb50
 800c364:	0800cb50 	.word	0x0800cb50
 800c368:	0800cb50 	.word	0x0800cb50
 800c36c:	0800cb54 	.word	0x0800cb54

0800c370 <__retarget_lock_acquire_recursive>:
 800c370:	4770      	bx	lr

0800c372 <__retarget_lock_release_recursive>:
 800c372:	4770      	bx	lr

0800c374 <memcpy>:
 800c374:	440a      	add	r2, r1
 800c376:	4291      	cmp	r1, r2
 800c378:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c37c:	d100      	bne.n	800c380 <memcpy+0xc>
 800c37e:	4770      	bx	lr
 800c380:	b510      	push	{r4, lr}
 800c382:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c386:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c38a:	4291      	cmp	r1, r2
 800c38c:	d1f9      	bne.n	800c382 <memcpy+0xe>
 800c38e:	bd10      	pop	{r4, pc}

0800c390 <memset>:
 800c390:	4402      	add	r2, r0
 800c392:	4603      	mov	r3, r0
 800c394:	4293      	cmp	r3, r2
 800c396:	d100      	bne.n	800c39a <memset+0xa>
 800c398:	4770      	bx	lr
 800c39a:	f803 1b01 	strb.w	r1, [r3], #1
 800c39e:	e7f9      	b.n	800c394 <memset+0x4>

0800c3a0 <cleanup_glue>:
 800c3a0:	b538      	push	{r3, r4, r5, lr}
 800c3a2:	460c      	mov	r4, r1
 800c3a4:	6809      	ldr	r1, [r1, #0]
 800c3a6:	4605      	mov	r5, r0
 800c3a8:	b109      	cbz	r1, 800c3ae <cleanup_glue+0xe>
 800c3aa:	f7ff fff9 	bl	800c3a0 <cleanup_glue>
 800c3ae:	4621      	mov	r1, r4
 800c3b0:	4628      	mov	r0, r5
 800c3b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3b6:	f000 b869 	b.w	800c48c <_free_r>
	...

0800c3bc <_reclaim_reent>:
 800c3bc:	4b2c      	ldr	r3, [pc, #176]	; (800c470 <_reclaim_reent+0xb4>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4283      	cmp	r3, r0
 800c3c2:	b570      	push	{r4, r5, r6, lr}
 800c3c4:	4604      	mov	r4, r0
 800c3c6:	d051      	beq.n	800c46c <_reclaim_reent+0xb0>
 800c3c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c3ca:	b143      	cbz	r3, 800c3de <_reclaim_reent+0x22>
 800c3cc:	68db      	ldr	r3, [r3, #12]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d14a      	bne.n	800c468 <_reclaim_reent+0xac>
 800c3d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3d4:	6819      	ldr	r1, [r3, #0]
 800c3d6:	b111      	cbz	r1, 800c3de <_reclaim_reent+0x22>
 800c3d8:	4620      	mov	r0, r4
 800c3da:	f000 f857 	bl	800c48c <_free_r>
 800c3de:	6961      	ldr	r1, [r4, #20]
 800c3e0:	b111      	cbz	r1, 800c3e8 <_reclaim_reent+0x2c>
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	f000 f852 	bl	800c48c <_free_r>
 800c3e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c3ea:	b111      	cbz	r1, 800c3f2 <_reclaim_reent+0x36>
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	f000 f84d 	bl	800c48c <_free_r>
 800c3f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c3f4:	b111      	cbz	r1, 800c3fc <_reclaim_reent+0x40>
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f000 f848 	bl	800c48c <_free_r>
 800c3fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c3fe:	b111      	cbz	r1, 800c406 <_reclaim_reent+0x4a>
 800c400:	4620      	mov	r0, r4
 800c402:	f000 f843 	bl	800c48c <_free_r>
 800c406:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c408:	b111      	cbz	r1, 800c410 <_reclaim_reent+0x54>
 800c40a:	4620      	mov	r0, r4
 800c40c:	f000 f83e 	bl	800c48c <_free_r>
 800c410:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c412:	b111      	cbz	r1, 800c41a <_reclaim_reent+0x5e>
 800c414:	4620      	mov	r0, r4
 800c416:	f000 f839 	bl	800c48c <_free_r>
 800c41a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c41c:	b111      	cbz	r1, 800c424 <_reclaim_reent+0x68>
 800c41e:	4620      	mov	r0, r4
 800c420:	f000 f834 	bl	800c48c <_free_r>
 800c424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c426:	b111      	cbz	r1, 800c42e <_reclaim_reent+0x72>
 800c428:	4620      	mov	r0, r4
 800c42a:	f000 f82f 	bl	800c48c <_free_r>
 800c42e:	69a3      	ldr	r3, [r4, #24]
 800c430:	b1e3      	cbz	r3, 800c46c <_reclaim_reent+0xb0>
 800c432:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c434:	4620      	mov	r0, r4
 800c436:	4798      	blx	r3
 800c438:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c43a:	b1b9      	cbz	r1, 800c46c <_reclaim_reent+0xb0>
 800c43c:	4620      	mov	r0, r4
 800c43e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c442:	f7ff bfad 	b.w	800c3a0 <cleanup_glue>
 800c446:	5949      	ldr	r1, [r1, r5]
 800c448:	b941      	cbnz	r1, 800c45c <_reclaim_reent+0xa0>
 800c44a:	3504      	adds	r5, #4
 800c44c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c44e:	2d80      	cmp	r5, #128	; 0x80
 800c450:	68d9      	ldr	r1, [r3, #12]
 800c452:	d1f8      	bne.n	800c446 <_reclaim_reent+0x8a>
 800c454:	4620      	mov	r0, r4
 800c456:	f000 f819 	bl	800c48c <_free_r>
 800c45a:	e7ba      	b.n	800c3d2 <_reclaim_reent+0x16>
 800c45c:	680e      	ldr	r6, [r1, #0]
 800c45e:	4620      	mov	r0, r4
 800c460:	f000 f814 	bl	800c48c <_free_r>
 800c464:	4631      	mov	r1, r6
 800c466:	e7ef      	b.n	800c448 <_reclaim_reent+0x8c>
 800c468:	2500      	movs	r5, #0
 800c46a:	e7ef      	b.n	800c44c <_reclaim_reent+0x90>
 800c46c:	bd70      	pop	{r4, r5, r6, pc}
 800c46e:	bf00      	nop
 800c470:	20000124 	.word	0x20000124

0800c474 <__malloc_lock>:
 800c474:	4801      	ldr	r0, [pc, #4]	; (800c47c <__malloc_lock+0x8>)
 800c476:	f7ff bf7b 	b.w	800c370 <__retarget_lock_acquire_recursive>
 800c47a:	bf00      	nop
 800c47c:	20002ca4 	.word	0x20002ca4

0800c480 <__malloc_unlock>:
 800c480:	4801      	ldr	r0, [pc, #4]	; (800c488 <__malloc_unlock+0x8>)
 800c482:	f7ff bf76 	b.w	800c372 <__retarget_lock_release_recursive>
 800c486:	bf00      	nop
 800c488:	20002ca4 	.word	0x20002ca4

0800c48c <_free_r>:
 800c48c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c48e:	2900      	cmp	r1, #0
 800c490:	d044      	beq.n	800c51c <_free_r+0x90>
 800c492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c496:	9001      	str	r0, [sp, #4]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	f1a1 0404 	sub.w	r4, r1, #4
 800c49e:	bfb8      	it	lt
 800c4a0:	18e4      	addlt	r4, r4, r3
 800c4a2:	f7ff ffe7 	bl	800c474 <__malloc_lock>
 800c4a6:	4a1e      	ldr	r2, [pc, #120]	; (800c520 <_free_r+0x94>)
 800c4a8:	9801      	ldr	r0, [sp, #4]
 800c4aa:	6813      	ldr	r3, [r2, #0]
 800c4ac:	b933      	cbnz	r3, 800c4bc <_free_r+0x30>
 800c4ae:	6063      	str	r3, [r4, #4]
 800c4b0:	6014      	str	r4, [r2, #0]
 800c4b2:	b003      	add	sp, #12
 800c4b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4b8:	f7ff bfe2 	b.w	800c480 <__malloc_unlock>
 800c4bc:	42a3      	cmp	r3, r4
 800c4be:	d908      	bls.n	800c4d2 <_free_r+0x46>
 800c4c0:	6825      	ldr	r5, [r4, #0]
 800c4c2:	1961      	adds	r1, r4, r5
 800c4c4:	428b      	cmp	r3, r1
 800c4c6:	bf01      	itttt	eq
 800c4c8:	6819      	ldreq	r1, [r3, #0]
 800c4ca:	685b      	ldreq	r3, [r3, #4]
 800c4cc:	1949      	addeq	r1, r1, r5
 800c4ce:	6021      	streq	r1, [r4, #0]
 800c4d0:	e7ed      	b.n	800c4ae <_free_r+0x22>
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	685b      	ldr	r3, [r3, #4]
 800c4d6:	b10b      	cbz	r3, 800c4dc <_free_r+0x50>
 800c4d8:	42a3      	cmp	r3, r4
 800c4da:	d9fa      	bls.n	800c4d2 <_free_r+0x46>
 800c4dc:	6811      	ldr	r1, [r2, #0]
 800c4de:	1855      	adds	r5, r2, r1
 800c4e0:	42a5      	cmp	r5, r4
 800c4e2:	d10b      	bne.n	800c4fc <_free_r+0x70>
 800c4e4:	6824      	ldr	r4, [r4, #0]
 800c4e6:	4421      	add	r1, r4
 800c4e8:	1854      	adds	r4, r2, r1
 800c4ea:	42a3      	cmp	r3, r4
 800c4ec:	6011      	str	r1, [r2, #0]
 800c4ee:	d1e0      	bne.n	800c4b2 <_free_r+0x26>
 800c4f0:	681c      	ldr	r4, [r3, #0]
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	6053      	str	r3, [r2, #4]
 800c4f6:	4421      	add	r1, r4
 800c4f8:	6011      	str	r1, [r2, #0]
 800c4fa:	e7da      	b.n	800c4b2 <_free_r+0x26>
 800c4fc:	d902      	bls.n	800c504 <_free_r+0x78>
 800c4fe:	230c      	movs	r3, #12
 800c500:	6003      	str	r3, [r0, #0]
 800c502:	e7d6      	b.n	800c4b2 <_free_r+0x26>
 800c504:	6825      	ldr	r5, [r4, #0]
 800c506:	1961      	adds	r1, r4, r5
 800c508:	428b      	cmp	r3, r1
 800c50a:	bf04      	itt	eq
 800c50c:	6819      	ldreq	r1, [r3, #0]
 800c50e:	685b      	ldreq	r3, [r3, #4]
 800c510:	6063      	str	r3, [r4, #4]
 800c512:	bf04      	itt	eq
 800c514:	1949      	addeq	r1, r1, r5
 800c516:	6021      	streq	r1, [r4, #0]
 800c518:	6054      	str	r4, [r2, #4]
 800c51a:	e7ca      	b.n	800c4b2 <_free_r+0x26>
 800c51c:	b003      	add	sp, #12
 800c51e:	bd30      	pop	{r4, r5, pc}
 800c520:	20002ca8 	.word	0x20002ca8
 800c524:	00000000 	.word	0x00000000

0800c528 <exp>:
 800c528:	b538      	push	{r3, r4, r5, lr}
 800c52a:	ed2d 8b02 	vpush	{d8}
 800c52e:	ec55 4b10 	vmov	r4, r5, d0
 800c532:	f000 f841 	bl	800c5b8 <__ieee754_exp>
 800c536:	eeb0 8a40 	vmov.f32	s16, s0
 800c53a:	eef0 8a60 	vmov.f32	s17, s1
 800c53e:	ec45 4b10 	vmov	d0, r4, r5
 800c542:	f000 f9eb 	bl	800c91c <finite>
 800c546:	b168      	cbz	r0, 800c564 <exp+0x3c>
 800c548:	a317      	add	r3, pc, #92	; (adr r3, 800c5a8 <exp+0x80>)
 800c54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54e:	4620      	mov	r0, r4
 800c550:	4629      	mov	r1, r5
 800c552:	f7f4 fa89 	bl	8000a68 <__aeabi_dcmpgt>
 800c556:	b160      	cbz	r0, 800c572 <exp+0x4a>
 800c558:	f7ff fee0 	bl	800c31c <__errno>
 800c55c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800c598 <exp+0x70>
 800c560:	2322      	movs	r3, #34	; 0x22
 800c562:	6003      	str	r3, [r0, #0]
 800c564:	eeb0 0a48 	vmov.f32	s0, s16
 800c568:	eef0 0a68 	vmov.f32	s1, s17
 800c56c:	ecbd 8b02 	vpop	{d8}
 800c570:	bd38      	pop	{r3, r4, r5, pc}
 800c572:	a30f      	add	r3, pc, #60	; (adr r3, 800c5b0 <exp+0x88>)
 800c574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c578:	4620      	mov	r0, r4
 800c57a:	4629      	mov	r1, r5
 800c57c:	f7f4 fa56 	bl	8000a2c <__aeabi_dcmplt>
 800c580:	2800      	cmp	r0, #0
 800c582:	d0ef      	beq.n	800c564 <exp+0x3c>
 800c584:	f7ff feca 	bl	800c31c <__errno>
 800c588:	2322      	movs	r3, #34	; 0x22
 800c58a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800c5a0 <exp+0x78>
 800c58e:	6003      	str	r3, [r0, #0]
 800c590:	e7e8      	b.n	800c564 <exp+0x3c>
 800c592:	bf00      	nop
 800c594:	f3af 8000 	nop.w
 800c598:	00000000 	.word	0x00000000
 800c59c:	7ff00000 	.word	0x7ff00000
	...
 800c5a8:	fefa39ef 	.word	0xfefa39ef
 800c5ac:	40862e42 	.word	0x40862e42
 800c5b0:	d52d3051 	.word	0xd52d3051
 800c5b4:	c0874910 	.word	0xc0874910

0800c5b8 <__ieee754_exp>:
 800c5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5bc:	ec55 4b10 	vmov	r4, r5, d0
 800c5c0:	49b5      	ldr	r1, [pc, #724]	; (800c898 <__ieee754_exp+0x2e0>)
 800c5c2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c5c6:	428b      	cmp	r3, r1
 800c5c8:	ed2d 8b04 	vpush	{d8-d9}
 800c5cc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800c5d0:	d93d      	bls.n	800c64e <__ieee754_exp+0x96>
 800c5d2:	49b2      	ldr	r1, [pc, #712]	; (800c89c <__ieee754_exp+0x2e4>)
 800c5d4:	428b      	cmp	r3, r1
 800c5d6:	d918      	bls.n	800c60a <__ieee754_exp+0x52>
 800c5d8:	ee10 3a10 	vmov	r3, s0
 800c5dc:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	d009      	beq.n	800c5f8 <__ieee754_exp+0x40>
 800c5e4:	ee10 2a10 	vmov	r2, s0
 800c5e8:	462b      	mov	r3, r5
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	4629      	mov	r1, r5
 800c5ee:	f7f3 fdf5 	bl	80001dc <__adddf3>
 800c5f2:	4604      	mov	r4, r0
 800c5f4:	460d      	mov	r5, r1
 800c5f6:	e002      	b.n	800c5fe <__ieee754_exp+0x46>
 800c5f8:	b10e      	cbz	r6, 800c5fe <__ieee754_exp+0x46>
 800c5fa:	2400      	movs	r4, #0
 800c5fc:	2500      	movs	r5, #0
 800c5fe:	ecbd 8b04 	vpop	{d8-d9}
 800c602:	ec45 4b10 	vmov	d0, r4, r5
 800c606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c60a:	a38d      	add	r3, pc, #564	; (adr r3, 800c840 <__ieee754_exp+0x288>)
 800c60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c610:	ee10 0a10 	vmov	r0, s0
 800c614:	4629      	mov	r1, r5
 800c616:	f7f4 fa27 	bl	8000a68 <__aeabi_dcmpgt>
 800c61a:	4607      	mov	r7, r0
 800c61c:	b130      	cbz	r0, 800c62c <__ieee754_exp+0x74>
 800c61e:	ecbd 8b04 	vpop	{d8-d9}
 800c622:	2000      	movs	r0, #0
 800c624:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c628:	f000 b96f 	b.w	800c90a <__math_oflow>
 800c62c:	a386      	add	r3, pc, #536	; (adr r3, 800c848 <__ieee754_exp+0x290>)
 800c62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c632:	4620      	mov	r0, r4
 800c634:	4629      	mov	r1, r5
 800c636:	f7f4 f9f9 	bl	8000a2c <__aeabi_dcmplt>
 800c63a:	2800      	cmp	r0, #0
 800c63c:	f000 808b 	beq.w	800c756 <__ieee754_exp+0x19e>
 800c640:	ecbd 8b04 	vpop	{d8-d9}
 800c644:	4638      	mov	r0, r7
 800c646:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c64a:	f000 b955 	b.w	800c8f8 <__math_uflow>
 800c64e:	4a94      	ldr	r2, [pc, #592]	; (800c8a0 <__ieee754_exp+0x2e8>)
 800c650:	4293      	cmp	r3, r2
 800c652:	f240 80ac 	bls.w	800c7ae <__ieee754_exp+0x1f6>
 800c656:	4a93      	ldr	r2, [pc, #588]	; (800c8a4 <__ieee754_exp+0x2ec>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d87c      	bhi.n	800c756 <__ieee754_exp+0x19e>
 800c65c:	4b92      	ldr	r3, [pc, #584]	; (800c8a8 <__ieee754_exp+0x2f0>)
 800c65e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c666:	ee10 0a10 	vmov	r0, s0
 800c66a:	4629      	mov	r1, r5
 800c66c:	f7f3 fdb4 	bl	80001d8 <__aeabi_dsub>
 800c670:	4b8e      	ldr	r3, [pc, #568]	; (800c8ac <__ieee754_exp+0x2f4>)
 800c672:	00f7      	lsls	r7, r6, #3
 800c674:	443b      	add	r3, r7
 800c676:	ed93 7b00 	vldr	d7, [r3]
 800c67a:	f1c6 0a01 	rsb	sl, r6, #1
 800c67e:	4680      	mov	r8, r0
 800c680:	4689      	mov	r9, r1
 800c682:	ebaa 0a06 	sub.w	sl, sl, r6
 800c686:	eeb0 8a47 	vmov.f32	s16, s14
 800c68a:	eef0 8a67 	vmov.f32	s17, s15
 800c68e:	ec53 2b18 	vmov	r2, r3, d8
 800c692:	4640      	mov	r0, r8
 800c694:	4649      	mov	r1, r9
 800c696:	f7f3 fd9f 	bl	80001d8 <__aeabi_dsub>
 800c69a:	4604      	mov	r4, r0
 800c69c:	460d      	mov	r5, r1
 800c69e:	4622      	mov	r2, r4
 800c6a0:	462b      	mov	r3, r5
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	4629      	mov	r1, r5
 800c6a6:	f7f3 ff4f 	bl	8000548 <__aeabi_dmul>
 800c6aa:	a369      	add	r3, pc, #420	; (adr r3, 800c850 <__ieee754_exp+0x298>)
 800c6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b0:	4606      	mov	r6, r0
 800c6b2:	460f      	mov	r7, r1
 800c6b4:	f7f3 ff48 	bl	8000548 <__aeabi_dmul>
 800c6b8:	a367      	add	r3, pc, #412	; (adr r3, 800c858 <__ieee754_exp+0x2a0>)
 800c6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6be:	f7f3 fd8b 	bl	80001d8 <__aeabi_dsub>
 800c6c2:	4632      	mov	r2, r6
 800c6c4:	463b      	mov	r3, r7
 800c6c6:	f7f3 ff3f 	bl	8000548 <__aeabi_dmul>
 800c6ca:	a365      	add	r3, pc, #404	; (adr r3, 800c860 <__ieee754_exp+0x2a8>)
 800c6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d0:	f7f3 fd84 	bl	80001dc <__adddf3>
 800c6d4:	4632      	mov	r2, r6
 800c6d6:	463b      	mov	r3, r7
 800c6d8:	f7f3 ff36 	bl	8000548 <__aeabi_dmul>
 800c6dc:	a362      	add	r3, pc, #392	; (adr r3, 800c868 <__ieee754_exp+0x2b0>)
 800c6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e2:	f7f3 fd79 	bl	80001d8 <__aeabi_dsub>
 800c6e6:	4632      	mov	r2, r6
 800c6e8:	463b      	mov	r3, r7
 800c6ea:	f7f3 ff2d 	bl	8000548 <__aeabi_dmul>
 800c6ee:	a360      	add	r3, pc, #384	; (adr r3, 800c870 <__ieee754_exp+0x2b8>)
 800c6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f4:	f7f3 fd72 	bl	80001dc <__adddf3>
 800c6f8:	4632      	mov	r2, r6
 800c6fa:	463b      	mov	r3, r7
 800c6fc:	f7f3 ff24 	bl	8000548 <__aeabi_dmul>
 800c700:	4602      	mov	r2, r0
 800c702:	460b      	mov	r3, r1
 800c704:	4620      	mov	r0, r4
 800c706:	4629      	mov	r1, r5
 800c708:	f7f3 fd66 	bl	80001d8 <__aeabi_dsub>
 800c70c:	4602      	mov	r2, r0
 800c70e:	460b      	mov	r3, r1
 800c710:	4606      	mov	r6, r0
 800c712:	460f      	mov	r7, r1
 800c714:	4620      	mov	r0, r4
 800c716:	4629      	mov	r1, r5
 800c718:	f7f3 ff16 	bl	8000548 <__aeabi_dmul>
 800c71c:	ec41 0b19 	vmov	d9, r0, r1
 800c720:	f1ba 0f00 	cmp.w	sl, #0
 800c724:	d15d      	bne.n	800c7e2 <__ieee754_exp+0x22a>
 800c726:	2200      	movs	r2, #0
 800c728:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c72c:	4630      	mov	r0, r6
 800c72e:	4639      	mov	r1, r7
 800c730:	f7f3 fd52 	bl	80001d8 <__aeabi_dsub>
 800c734:	4602      	mov	r2, r0
 800c736:	460b      	mov	r3, r1
 800c738:	ec51 0b19 	vmov	r0, r1, d9
 800c73c:	f7f4 f82e 	bl	800079c <__aeabi_ddiv>
 800c740:	4622      	mov	r2, r4
 800c742:	462b      	mov	r3, r5
 800c744:	f7f3 fd48 	bl	80001d8 <__aeabi_dsub>
 800c748:	4602      	mov	r2, r0
 800c74a:	460b      	mov	r3, r1
 800c74c:	2000      	movs	r0, #0
 800c74e:	4958      	ldr	r1, [pc, #352]	; (800c8b0 <__ieee754_exp+0x2f8>)
 800c750:	f7f3 fd42 	bl	80001d8 <__aeabi_dsub>
 800c754:	e74d      	b.n	800c5f2 <__ieee754_exp+0x3a>
 800c756:	4857      	ldr	r0, [pc, #348]	; (800c8b4 <__ieee754_exp+0x2fc>)
 800c758:	a347      	add	r3, pc, #284	; (adr r3, 800c878 <__ieee754_exp+0x2c0>)
 800c75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800c762:	4629      	mov	r1, r5
 800c764:	4620      	mov	r0, r4
 800c766:	f7f3 feef 	bl	8000548 <__aeabi_dmul>
 800c76a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c76e:	f7f3 fd35 	bl	80001dc <__adddf3>
 800c772:	f7f4 f983 	bl	8000a7c <__aeabi_d2iz>
 800c776:	4682      	mov	sl, r0
 800c778:	f7f3 fe7c 	bl	8000474 <__aeabi_i2d>
 800c77c:	a340      	add	r3, pc, #256	; (adr r3, 800c880 <__ieee754_exp+0x2c8>)
 800c77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c782:	4606      	mov	r6, r0
 800c784:	460f      	mov	r7, r1
 800c786:	f7f3 fedf 	bl	8000548 <__aeabi_dmul>
 800c78a:	4602      	mov	r2, r0
 800c78c:	460b      	mov	r3, r1
 800c78e:	4620      	mov	r0, r4
 800c790:	4629      	mov	r1, r5
 800c792:	f7f3 fd21 	bl	80001d8 <__aeabi_dsub>
 800c796:	a33c      	add	r3, pc, #240	; (adr r3, 800c888 <__ieee754_exp+0x2d0>)
 800c798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79c:	4680      	mov	r8, r0
 800c79e:	4689      	mov	r9, r1
 800c7a0:	4630      	mov	r0, r6
 800c7a2:	4639      	mov	r1, r7
 800c7a4:	f7f3 fed0 	bl	8000548 <__aeabi_dmul>
 800c7a8:	ec41 0b18 	vmov	d8, r0, r1
 800c7ac:	e76f      	b.n	800c68e <__ieee754_exp+0xd6>
 800c7ae:	4a42      	ldr	r2, [pc, #264]	; (800c8b8 <__ieee754_exp+0x300>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d811      	bhi.n	800c7d8 <__ieee754_exp+0x220>
 800c7b4:	a336      	add	r3, pc, #216	; (adr r3, 800c890 <__ieee754_exp+0x2d8>)
 800c7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ba:	ee10 0a10 	vmov	r0, s0
 800c7be:	4629      	mov	r1, r5
 800c7c0:	f7f3 fd0c 	bl	80001dc <__adddf3>
 800c7c4:	4b3a      	ldr	r3, [pc, #232]	; (800c8b0 <__ieee754_exp+0x2f8>)
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	f7f4 f94e 	bl	8000a68 <__aeabi_dcmpgt>
 800c7cc:	b138      	cbz	r0, 800c7de <__ieee754_exp+0x226>
 800c7ce:	4b38      	ldr	r3, [pc, #224]	; (800c8b0 <__ieee754_exp+0x2f8>)
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	4629      	mov	r1, r5
 800c7d6:	e70a      	b.n	800c5ee <__ieee754_exp+0x36>
 800c7d8:	f04f 0a00 	mov.w	sl, #0
 800c7dc:	e75f      	b.n	800c69e <__ieee754_exp+0xe6>
 800c7de:	4682      	mov	sl, r0
 800c7e0:	e75d      	b.n	800c69e <__ieee754_exp+0xe6>
 800c7e2:	4632      	mov	r2, r6
 800c7e4:	463b      	mov	r3, r7
 800c7e6:	2000      	movs	r0, #0
 800c7e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c7ec:	f7f3 fcf4 	bl	80001d8 <__aeabi_dsub>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	ec51 0b19 	vmov	r0, r1, d9
 800c7f8:	f7f3 ffd0 	bl	800079c <__aeabi_ddiv>
 800c7fc:	4602      	mov	r2, r0
 800c7fe:	460b      	mov	r3, r1
 800c800:	ec51 0b18 	vmov	r0, r1, d8
 800c804:	f7f3 fce8 	bl	80001d8 <__aeabi_dsub>
 800c808:	4642      	mov	r2, r8
 800c80a:	464b      	mov	r3, r9
 800c80c:	f7f3 fce4 	bl	80001d8 <__aeabi_dsub>
 800c810:	4602      	mov	r2, r0
 800c812:	460b      	mov	r3, r1
 800c814:	2000      	movs	r0, #0
 800c816:	4926      	ldr	r1, [pc, #152]	; (800c8b0 <__ieee754_exp+0x2f8>)
 800c818:	f7f3 fcde 	bl	80001d8 <__aeabi_dsub>
 800c81c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800c820:	4592      	cmp	sl, r2
 800c822:	db02      	blt.n	800c82a <__ieee754_exp+0x272>
 800c824:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800c828:	e6e3      	b.n	800c5f2 <__ieee754_exp+0x3a>
 800c82a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800c82e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800c832:	2200      	movs	r2, #0
 800c834:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800c838:	f7f3 fe86 	bl	8000548 <__aeabi_dmul>
 800c83c:	e6d9      	b.n	800c5f2 <__ieee754_exp+0x3a>
 800c83e:	bf00      	nop
 800c840:	fefa39ef 	.word	0xfefa39ef
 800c844:	40862e42 	.word	0x40862e42
 800c848:	d52d3051 	.word	0xd52d3051
 800c84c:	c0874910 	.word	0xc0874910
 800c850:	72bea4d0 	.word	0x72bea4d0
 800c854:	3e663769 	.word	0x3e663769
 800c858:	c5d26bf1 	.word	0xc5d26bf1
 800c85c:	3ebbbd41 	.word	0x3ebbbd41
 800c860:	af25de2c 	.word	0xaf25de2c
 800c864:	3f11566a 	.word	0x3f11566a
 800c868:	16bebd93 	.word	0x16bebd93
 800c86c:	3f66c16c 	.word	0x3f66c16c
 800c870:	5555553e 	.word	0x5555553e
 800c874:	3fc55555 	.word	0x3fc55555
 800c878:	652b82fe 	.word	0x652b82fe
 800c87c:	3ff71547 	.word	0x3ff71547
 800c880:	fee00000 	.word	0xfee00000
 800c884:	3fe62e42 	.word	0x3fe62e42
 800c888:	35793c76 	.word	0x35793c76
 800c88c:	3dea39ef 	.word	0x3dea39ef
 800c890:	8800759c 	.word	0x8800759c
 800c894:	7e37e43c 	.word	0x7e37e43c
 800c898:	40862e41 	.word	0x40862e41
 800c89c:	7fefffff 	.word	0x7fefffff
 800c8a0:	3fd62e42 	.word	0x3fd62e42
 800c8a4:	3ff0a2b1 	.word	0x3ff0a2b1
 800c8a8:	0800cb28 	.word	0x0800cb28
 800c8ac:	0800cb38 	.word	0x0800cb38
 800c8b0:	3ff00000 	.word	0x3ff00000
 800c8b4:	0800cb18 	.word	0x0800cb18
 800c8b8:	3defffff 	.word	0x3defffff

0800c8bc <with_errno>:
 800c8bc:	b570      	push	{r4, r5, r6, lr}
 800c8be:	4604      	mov	r4, r0
 800c8c0:	460d      	mov	r5, r1
 800c8c2:	4616      	mov	r6, r2
 800c8c4:	f7ff fd2a 	bl	800c31c <__errno>
 800c8c8:	4629      	mov	r1, r5
 800c8ca:	6006      	str	r6, [r0, #0]
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	bd70      	pop	{r4, r5, r6, pc}

0800c8d0 <xflow>:
 800c8d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8d2:	4614      	mov	r4, r2
 800c8d4:	461d      	mov	r5, r3
 800c8d6:	b108      	cbz	r0, 800c8dc <xflow+0xc>
 800c8d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c8dc:	e9cd 2300 	strd	r2, r3, [sp]
 800c8e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	4629      	mov	r1, r5
 800c8e8:	f7f3 fe2e 	bl	8000548 <__aeabi_dmul>
 800c8ec:	2222      	movs	r2, #34	; 0x22
 800c8ee:	b003      	add	sp, #12
 800c8f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c8f4:	f7ff bfe2 	b.w	800c8bc <with_errno>

0800c8f8 <__math_uflow>:
 800c8f8:	b508      	push	{r3, lr}
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c900:	f7ff ffe6 	bl	800c8d0 <xflow>
 800c904:	ec41 0b10 	vmov	d0, r0, r1
 800c908:	bd08      	pop	{r3, pc}

0800c90a <__math_oflow>:
 800c90a:	b508      	push	{r3, lr}
 800c90c:	2200      	movs	r2, #0
 800c90e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c912:	f7ff ffdd 	bl	800c8d0 <xflow>
 800c916:	ec41 0b10 	vmov	d0, r0, r1
 800c91a:	bd08      	pop	{r3, pc}

0800c91c <finite>:
 800c91c:	b082      	sub	sp, #8
 800c91e:	ed8d 0b00 	vstr	d0, [sp]
 800c922:	9801      	ldr	r0, [sp, #4]
 800c924:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c928:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c92c:	0fc0      	lsrs	r0, r0, #31
 800c92e:	b002      	add	sp, #8
 800c930:	4770      	bx	lr
	...

0800c934 <_init>:
 800c934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c936:	bf00      	nop
 800c938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c93a:	bc08      	pop	{r3}
 800c93c:	469e      	mov	lr, r3
 800c93e:	4770      	bx	lr

0800c940 <_fini>:
 800c940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c942:	bf00      	nop
 800c944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c946:	bc08      	pop	{r3}
 800c948:	469e      	mov	lr, r3
 800c94a:	4770      	bx	lr
