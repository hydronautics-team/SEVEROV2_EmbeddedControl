
EmbeddedControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001038c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08010520  08010520  00020520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010758  08010758  0003018c  2**0
                  CONTENTS
  4 .ARM          00000008  08010758  08010758  00020758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010760  08010760  0003018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010760  08010760  00020760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010764  08010764  00020764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08010768  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003018c  2**0
                  CONTENTS
 10 .bss          00002e98  20000190  20000190  00030190  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20003028  20003028  00030190  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000264fd  00000000  00000000  000301bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005784  00000000  00000000  000566b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bb0  00000000  00000000  0005be40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001950  00000000  00000000  0005d9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022925  00000000  00000000  0005f340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002563a  00000000  00000000  00081c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4771  00000000  00000000  000a729f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016ba10  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007a00  00000000  00000000  0016ba60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000190 	.word	0x20000190
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010504 	.word	0x08010504

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000194 	.word	0x20000194
 80001cc:	08010504 	.word	0x08010504

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_ldivmod>:
 8000b6c:	b97b      	cbnz	r3, 8000b8e <__aeabi_ldivmod+0x22>
 8000b6e:	b972      	cbnz	r2, 8000b8e <__aeabi_ldivmod+0x22>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bfbe      	ittt	lt
 8000b74:	2000      	movlt	r0, #0
 8000b76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b7a:	e006      	blt.n	8000b8a <__aeabi_ldivmod+0x1e>
 8000b7c:	bf08      	it	eq
 8000b7e:	2800      	cmpeq	r0, #0
 8000b80:	bf1c      	itt	ne
 8000b82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b86:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b8a:	f000 b9f5 	b.w	8000f78 <__aeabi_idiv0>
 8000b8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b96:	2900      	cmp	r1, #0
 8000b98:	db09      	blt.n	8000bae <__aeabi_ldivmod+0x42>
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	db1a      	blt.n	8000bd4 <__aeabi_ldivmod+0x68>
 8000b9e:	f000 f883 	bl	8000ca8 <__udivmoddi4>
 8000ba2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000baa:	b004      	add	sp, #16
 8000bac:	4770      	bx	lr
 8000bae:	4240      	negs	r0, r0
 8000bb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db1b      	blt.n	8000bf0 <__aeabi_ldivmod+0x84>
 8000bb8:	f000 f876 	bl	8000ca8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4240      	negs	r0, r0
 8000bc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bcc:	4252      	negs	r2, r2
 8000bce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bd2:	4770      	bx	lr
 8000bd4:	4252      	negs	r2, r2
 8000bd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bda:	f000 f865 	bl	8000ca8 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4240      	negs	r0, r0
 8000bea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bee:	4770      	bx	lr
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf6:	f000 f857 	bl	8000ca8 <__udivmoddi4>
 8000bfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c02:	b004      	add	sp, #16
 8000c04:	4252      	negs	r2, r2
 8000c06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c20:	f000 b9aa 	b.w	8000f78 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f83c 	bl	8000ca8 <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_d2lz>:
 8000c3c:	b538      	push	{r3, r4, r5, lr}
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2300      	movs	r3, #0
 8000c42:	4604      	mov	r4, r0
 8000c44:	460d      	mov	r5, r1
 8000c46:	f7ff fef1 	bl	8000a2c <__aeabi_dcmplt>
 8000c4a:	b928      	cbnz	r0, 8000c58 <__aeabi_d2lz+0x1c>
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	4629      	mov	r1, r5
 8000c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c54:	f000 b80a 	b.w	8000c6c <__aeabi_d2ulz>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5e:	f000 f805 	bl	8000c6c <__aeabi_d2ulz>
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	bd38      	pop	{r3, r4, r5, pc}
 8000c6a:	bf00      	nop

08000c6c <__aeabi_d2ulz>:
 8000c6c:	b5d0      	push	{r4, r6, r7, lr}
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__aeabi_d2ulz+0x34>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	4606      	mov	r6, r0
 8000c74:	460f      	mov	r7, r1
 8000c76:	f7ff fc67 	bl	8000548 <__aeabi_dmul>
 8000c7a:	f000 f97f 	bl	8000f7c <__aeabi_d2uiz>
 8000c7e:	4604      	mov	r4, r0
 8000c80:	f7ff fbe8 	bl	8000454 <__aeabi_ui2d>
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <__aeabi_d2ulz+0x38>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f7ff fc5e 	bl	8000548 <__aeabi_dmul>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4630      	mov	r0, r6
 8000c92:	4639      	mov	r1, r7
 8000c94:	f7ff faa0 	bl	80001d8 <__aeabi_dsub>
 8000c98:	f000 f970 	bl	8000f7c <__aeabi_d2uiz>
 8000c9c:	4621      	mov	r1, r4
 8000c9e:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca0:	3df00000 	.word	0x3df00000
 8000ca4:	41f00000 	.word	0x41f00000

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <__aeabi_d2uiz>:
 8000f7c:	004a      	lsls	r2, r1, #1
 8000f7e:	d211      	bcs.n	8000fa4 <__aeabi_d2uiz+0x28>
 8000f80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f84:	d211      	bcs.n	8000faa <__aeabi_d2uiz+0x2e>
 8000f86:	d50d      	bpl.n	8000fa4 <__aeabi_d2uiz+0x28>
 8000f88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f90:	d40e      	bmi.n	8000fb0 <__aeabi_d2uiz+0x34>
 8000f92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa2:	4770      	bx	lr
 8000fa4:	f04f 0000 	mov.w	r0, #0
 8000fa8:	4770      	bx	lr
 8000faa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fae:	d102      	bne.n	8000fb6 <__aeabi_d2uiz+0x3a>
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fb4:	4770      	bx	lr
 8000fb6:	f04f 0000 	mov.w	r0, #0
 8000fba:	4770      	bx	lr

08000fbc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_Init+0x28>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_Init+0x28>)
 8000fc6:	f043 0310 	orr.w	r3, r3, #16
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 f8fc 	bl	80011ca <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f00d ff48 	bl	800ee68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd8:	f00d ff1e 	bl	800ee18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40022000 	.word	0x40022000

08000fe8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000004 	.word	0x20000004
 800100c:	200001ac 	.word	0x200001ac

08001010 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;  
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	200001ac 	.word	0x200001ac

08001028 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff ffee 	bl	8001010 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_Delay+0x44>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800104e:	bf00      	nop
 8001050:	f7ff ffde 	bl	8001010 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f7      	bhi.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000004 	.word	0x20000004

08001070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800109c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a2:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <__NVIC_GetPriorityGrouping+0x18>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	f003 0307 	and.w	r3, r3, #7
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	db0b      	blt.n	80010fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	f003 021f 	and.w	r2, r3, #31
 80010ec:	4907      	ldr	r1, [pc, #28]	; (800110c <__NVIC_EnableIRQ+0x38>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	095b      	lsrs	r3, r3, #5
 80010f4:	2001      	movs	r0, #1
 80010f6:	fa00 f202 	lsl.w	r2, r0, r2
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000e100 	.word	0xe000e100

08001110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	; (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	; (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
         );
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ff4c 	bl	8001070 <__NVIC_SetPriorityGrouping>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f2:	f7ff ff61 	bl	80010b8 <__NVIC_GetPriorityGrouping>
 80011f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	68b9      	ldr	r1, [r7, #8]
 80011fc:	6978      	ldr	r0, [r7, #20]
 80011fe:	f7ff ffb1 	bl	8001164 <NVIC_EncodePriority>
 8001202:	4602      	mov	r2, r0
 8001204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001208:	4611      	mov	r1, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff80 	bl	8001110 <__NVIC_SetPriority>
}
 8001210:	bf00      	nop
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff54 	bl	80010d4 <__NVIC_EnableIRQ>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e037      	b.n	80012ba <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2202      	movs	r2, #2
 800124e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001260:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001264:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800126e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800127a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001286:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4313      	orrs	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f9c5 	bl	800162c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}  
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_DMA_Start_IT+0x20>
 80012de:	2302      	movs	r3, #2
 80012e0:	e04a      	b.n	8001378 <HAL_DMA_Start_IT+0xb6>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d13a      	bne.n	800136a <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2202      	movs	r2, #2
 80012f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2200      	movs	r2, #0
 8001300:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0201 	bic.w	r2, r2, #1
 8001310:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	68b9      	ldr	r1, [r7, #8]
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 f958 	bl	80015ce <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001322:	2b00      	cmp	r3, #0
 8001324:	d008      	beq.n	8001338 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f042 020e 	orr.w	r2, r2, #14
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	e00f      	b.n	8001358 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 020a 	orr.w	r2, r2, #10
 8001346:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0204 	bic.w	r2, r2, #4
 8001356:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 0201 	orr.w	r2, r2, #1
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	e005      	b.n	8001376 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001372:	2302      	movs	r3, #2
 8001374:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001376:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800138e:	2b02      	cmp	r3, #2
 8001390:	d008      	beq.n	80013a4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2204      	movs	r2, #4
 8001396:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e020      	b.n	80013e6 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 020e 	bic.w	r2, r2, #14
 80013b2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0201 	bic.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013cc:	2101      	movs	r1, #1
 80013ce:	fa01 f202 	lsl.w	r2, r1, r2
 80013d2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001404:	2b02      	cmp	r3, #2
 8001406:	d005      	beq.n	8001414 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2204      	movs	r2, #4
 800140c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	73fb      	strb	r3, [r7, #15]
 8001412:	e027      	b.n	8001464 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 020e 	bic.w	r2, r2, #14
 8001422:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0201 	bic.w	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800143c:	2101      	movs	r1, #1
 800143e:	fa01 f202 	lsl.w	r2, r1, r2
 8001442:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	4798      	blx	r3
    } 
  }
  return status;
 8001464:	7bfb      	ldrb	r3, [r7, #15]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b084      	sub	sp, #16
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	2204      	movs	r2, #4
 800148c:	409a      	lsls	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d024      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x72>
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d01f      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0320 	and.w	r3, r3, #32
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d107      	bne.n	80014be <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0204 	bic.w	r2, r2, #4
 80014bc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c6:	2104      	movs	r1, #4
 80014c8:	fa01 f202 	lsl.w	r2, r1, r2
 80014cc:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d06a      	beq.n	80015ac <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80014de:	e065      	b.n	80015ac <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	2202      	movs	r2, #2
 80014e6:	409a      	lsls	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4013      	ands	r3, r2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d02c      	beq.n	800154a <HAL_DMA_IRQHandler+0xdc>
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d027      	beq.n	800154a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0320 	and.w	r3, r3, #32
 8001504:	2b00      	cmp	r3, #0
 8001506:	d10b      	bne.n	8001520 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 020a 	bic.w	r2, r2, #10
 8001516:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001528:	2102      	movs	r1, #2
 800152a:	fa01 f202 	lsl.w	r2, r1, r2
 800152e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153c:	2b00      	cmp	r3, #0
 800153e:	d035      	beq.n	80015ac <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001548:	e030      	b.n	80015ac <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	2208      	movs	r2, #8
 8001550:	409a      	lsls	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4013      	ands	r3, r2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d028      	beq.n	80015ac <HAL_DMA_IRQHandler+0x13e>
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	2b00      	cmp	r3, #0
 8001562:	d023      	beq.n	80015ac <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 020e 	bic.w	r2, r2, #14
 8001572:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157c:	2101      	movs	r1, #1
 800157e:	fa01 f202 	lsl.w	r2, r1, r2
 8001582:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d004      	beq.n	80015ac <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	4798      	blx	r3
    }
  }
}  
 80015aa:	e7ff      	b.n	80015ac <HAL_DMA_IRQHandler+0x13e>
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b085      	sub	sp, #20
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e4:	2101      	movs	r1, #1
 80015e6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ea:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b10      	cmp	r3, #16
 80015fa:	d108      	bne.n	800160e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800160c:	e007      	b.n	800161e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	60da      	str	r2, [r3, #12]
}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4b14      	ldr	r3, [pc, #80]	; (800168c <DMA_CalcBaseAndBitshift+0x60>)
 800163c:	429a      	cmp	r2, r3
 800163e:	d80f      	bhi.n	8001660 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <DMA_CalcBaseAndBitshift+0x64>)
 8001648:	4413      	add	r3, r2
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <DMA_CalcBaseAndBitshift+0x68>)
 800164c:	fba2 2303 	umull	r2, r3, r2, r3
 8001650:	091b      	lsrs	r3, r3, #4
 8001652:	009a      	lsls	r2, r3, #2
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <DMA_CalcBaseAndBitshift+0x6c>)
 800165c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800165e:	e00e      	b.n	800167e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <DMA_CalcBaseAndBitshift+0x70>)
 8001668:	4413      	add	r3, r2
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <DMA_CalcBaseAndBitshift+0x68>)
 800166c:	fba2 2303 	umull	r2, r3, r2, r3
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	009a      	lsls	r2, r3, #2
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <DMA_CalcBaseAndBitshift+0x74>)
 800167c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40020407 	.word	0x40020407
 8001690:	bffdfff8 	.word	0xbffdfff8
 8001694:	cccccccd 	.word	0xcccccccd
 8001698:	40020000 	.word	0x40020000
 800169c:	bffdfbf8 	.word	0xbffdfbf8
 80016a0:	40020400 	.word	0x40020400

080016a4 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80016a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80016be:	4b2f      	ldr	r3, [pc, #188]	; (800177c <HAL_FLASH_Program+0xd8>)
 80016c0:	7e1b      	ldrb	r3, [r3, #24]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d101      	bne.n	80016ca <HAL_FLASH_Program+0x26>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e054      	b.n	8001774 <HAL_FLASH_Program+0xd0>
 80016ca:	4b2c      	ldr	r3, [pc, #176]	; (800177c <HAL_FLASH_Program+0xd8>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80016d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016d4:	f000 f8a8 	bl	8001828 <FLASH_WaitForLastOperation>
 80016d8:	4603      	mov	r3, r0
 80016da:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80016dc:	7dfb      	ldrb	r3, [r7, #23]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d144      	bne.n	800176c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d102      	bne.n	80016ee <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80016e8:	2301      	movs	r3, #1
 80016ea:	757b      	strb	r3, [r7, #21]
 80016ec:	e007      	b.n	80016fe <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d102      	bne.n	80016fa <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80016f4:	2302      	movs	r3, #2
 80016f6:	757b      	strb	r3, [r7, #21]
 80016f8:	e001      	b.n	80016fe <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80016fa:	2304      	movs	r3, #4
 80016fc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80016fe:	2300      	movs	r3, #0
 8001700:	75bb      	strb	r3, [r7, #22]
 8001702:	e02d      	b.n	8001760 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001704:	7dbb      	ldrb	r3, [r7, #22]
 8001706:	005a      	lsls	r2, r3, #1
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	eb02 0c03 	add.w	ip, r2, r3
 800170e:	7dbb      	ldrb	r3, [r7, #22]
 8001710:	0119      	lsls	r1, r3, #4
 8001712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001716:	f1c1 0620 	rsb	r6, r1, #32
 800171a:	f1a1 0020 	sub.w	r0, r1, #32
 800171e:	fa22 f401 	lsr.w	r4, r2, r1
 8001722:	fa03 f606 	lsl.w	r6, r3, r6
 8001726:	4334      	orrs	r4, r6
 8001728:	fa23 f000 	lsr.w	r0, r3, r0
 800172c:	4304      	orrs	r4, r0
 800172e:	fa23 f501 	lsr.w	r5, r3, r1
 8001732:	b2a3      	uxth	r3, r4
 8001734:	4619      	mov	r1, r3
 8001736:	4660      	mov	r0, ip
 8001738:	f000 f85a 	bl	80017f0 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800173c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001740:	f000 f872 	bl	8001828 <FLASH_WaitForLastOperation>
 8001744:	4603      	mov	r3, r0
 8001746:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <HAL_FLASH_Program+0xdc>)
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <HAL_FLASH_Program+0xdc>)
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d107      	bne.n	800176a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800175a:	7dbb      	ldrb	r3, [r7, #22]
 800175c:	3301      	adds	r3, #1
 800175e:	75bb      	strb	r3, [r7, #22]
 8001760:	7dba      	ldrb	r2, [r7, #22]
 8001762:	7d7b      	ldrb	r3, [r7, #21]
 8001764:	429a      	cmp	r2, r3
 8001766:	d3cd      	bcc.n	8001704 <HAL_FLASH_Program+0x60>
 8001768:	e000      	b.n	800176c <HAL_FLASH_Program+0xc8>
      {
        break;
 800176a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_FLASH_Program+0xd8>)
 800176e:	2200      	movs	r2, #0
 8001770:	761a      	strb	r2, [r3, #24]

  return status;
 8001772:	7dfb      	ldrb	r3, [r7, #23]
}
 8001774:	4618      	mov	r0, r3
 8001776:	371c      	adds	r7, #28
 8001778:	46bd      	mov	sp, r7
 800177a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800177c:	200001b0 	.word	0x200001b0
 8001780:	40022000 	.word	0x40022000

08001784 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <HAL_FLASH_Unlock+0x40>)
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00d      	beq.n	80017b6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_FLASH_Unlock+0x40>)
 800179c:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <HAL_FLASH_Unlock+0x44>)
 800179e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_FLASH_Unlock+0x40>)
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <HAL_FLASH_Unlock+0x48>)
 80017a4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <HAL_FLASH_Unlock+0x40>)
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80017b6:	79fb      	ldrb	r3, [r7, #7]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	40022000 	.word	0x40022000
 80017c8:	45670123 	.word	0x45670123
 80017cc:	cdef89ab 	.word	0xcdef89ab

080017d0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_FLASH_Lock+0x1c>)
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_FLASH_Lock+0x1c>)
 80017da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017de:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40022000 	.word	0x40022000

080017f0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <FLASH_Program_HalfWord+0x30>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <FLASH_Program_HalfWord+0x34>)
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	4a07      	ldr	r2, [pc, #28]	; (8001824 <FLASH_Program_HalfWord+0x34>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	887a      	ldrh	r2, [r7, #2]
 8001812:	801a      	strh	r2, [r3, #0]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	200001b0 	.word	0x200001b0
 8001824:	40022000 	.word	0x40022000

08001828 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff fbee 	bl	8001010 <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001836:	e010      	b.n	800185a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800183e:	d00c      	beq.n	800185a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d007      	beq.n	8001856 <FLASH_WaitForLastOperation+0x2e>
 8001846:	f7ff fbe3 	bl	8001010 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	429a      	cmp	r2, r3
 8001854:	d201      	bcs.n	800185a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e01f      	b.n	800189a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <FLASH_WaitForLastOperation+0x7c>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b01      	cmp	r3, #1
 8001864:	d0e8      	beq.n	8001838 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001866:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <FLASH_WaitForLastOperation+0x7c>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	f003 0320 	and.w	r3, r3, #32
 800186e:	2b20      	cmp	r3, #32
 8001870:	d102      	bne.n	8001878 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <FLASH_WaitForLastOperation+0x7c>)
 8001874:	2220      	movs	r2, #32
 8001876:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <FLASH_WaitForLastOperation+0x7c>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	2b10      	cmp	r3, #16
 8001882:	d005      	beq.n	8001890 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <FLASH_WaitForLastOperation+0x7c>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800188c:	2b04      	cmp	r3, #4
 800188e:	d103      	bne.n	8001898 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001890:	f000 f80a 	bl	80018a8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40022000 	.word	0x40022000

080018a8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80018b2:	4b14      	ldr	r3, [pc, #80]	; (8001904 <FLASH_SetErrorCode+0x5c>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f003 0310 	and.w	r3, r3, #16
 80018ba:	2b10      	cmp	r3, #16
 80018bc:	d109      	bne.n	80018d2 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <FLASH_SetErrorCode+0x60>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f043 0302 	orr.w	r3, r3, #2
 80018c6:	4a10      	ldr	r2, [pc, #64]	; (8001908 <FLASH_SetErrorCode+0x60>)
 80018c8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f043 0310 	orr.w	r3, r3, #16
 80018d0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <FLASH_SetErrorCode+0x5c>)
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d109      	bne.n	80018f2 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <FLASH_SetErrorCode+0x60>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	4a08      	ldr	r2, [pc, #32]	; (8001908 <FLASH_SetErrorCode+0x60>)
 80018e8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80018f2:	4a04      	ldr	r2, [pc, #16]	; (8001904 <FLASH_SetErrorCode+0x5c>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	60d3      	str	r3, [r2, #12]
}  
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	40022000 	.word	0x40022000
 8001908:	200001b0 	.word	0x200001b0

0800190c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800191e:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <HAL_FLASHEx_Erase+0xcc>)
 8001920:	7e1b      	ldrb	r3, [r3, #24]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d101      	bne.n	800192a <HAL_FLASHEx_Erase+0x1e>
 8001926:	2302      	movs	r3, #2
 8001928:	e052      	b.n	80019d0 <HAL_FLASHEx_Erase+0xc4>
 800192a:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <HAL_FLASHEx_Erase+0xcc>)
 800192c:	2201      	movs	r2, #1
 800192e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d115      	bne.n	8001964 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001938:	f24c 3050 	movw	r0, #50000	; 0xc350
 800193c:	f7ff ff74 	bl	8001828 <FLASH_WaitForLastOperation>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d140      	bne.n	80019c8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8001946:	f000 f84b 	bl	80019e0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800194a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800194e:	f7ff ff6b 	bl	8001828 <FLASH_WaitForLastOperation>
 8001952:	4603      	mov	r3, r0
 8001954:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001956:	4b21      	ldr	r3, [pc, #132]	; (80019dc <HAL_FLASHEx_Erase+0xd0>)
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	4a20      	ldr	r2, [pc, #128]	; (80019dc <HAL_FLASHEx_Erase+0xd0>)
 800195c:	f023 0304 	bic.w	r3, r3, #4
 8001960:	6113      	str	r3, [r2, #16]
 8001962:	e031      	b.n	80019c8 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001964:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001968:	f7ff ff5e 	bl	8001828 <FLASH_WaitForLastOperation>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d12a      	bne.n	80019c8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001978:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	e019      	b.n	80019b6 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001982:	68b8      	ldr	r0, [r7, #8]
 8001984:	f000 f846 	bl	8001a14 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001988:	f24c 3050 	movw	r0, #50000	; 0xc350
 800198c:	f7ff ff4c 	bl	8001828 <FLASH_WaitForLastOperation>
 8001990:	4603      	mov	r3, r0
 8001992:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_FLASHEx_Erase+0xd0>)
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	4a10      	ldr	r2, [pc, #64]	; (80019dc <HAL_FLASHEx_Erase+0xd0>)
 800199a:	f023 0302 	bic.w	r3, r3, #2
 800199e:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	601a      	str	r2, [r3, #0]
            break;
 80019ac:	e00c      	b.n	80019c8 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b4:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	02da      	lsls	r2, r3, #11
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d3dc      	bcc.n	8001982 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80019c8:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <HAL_FLASHEx_Erase+0xcc>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	761a      	strb	r2, [r3, #24]

  return status;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	200001b0 	.word	0x200001b0
 80019dc:	40022000 	.word	0x40022000

080019e0 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <FLASH_MassErase+0x2c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <FLASH_MassErase+0x30>)
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	4a08      	ldr	r2, [pc, #32]	; (8001a10 <FLASH_MassErase+0x30>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <FLASH_MassErase+0x30>)
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <FLASH_MassErase+0x30>)
 80019fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a00:	6113      	str	r3, [r2, #16]
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	200001b0 	.word	0x200001b0
 8001a10:	40022000 	.word	0x40022000

08001a14 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <FLASH_PageErase+0x38>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <FLASH_PageErase+0x3c>)
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <FLASH_PageErase+0x3c>)
 8001a28:	f043 0302 	orr.w	r3, r3, #2
 8001a2c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001a2e:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <FLASH_PageErase+0x3c>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <FLASH_PageErase+0x3c>)
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <FLASH_PageErase+0x3c>)
 8001a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a3e:	6113      	str	r3, [r2, #16]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	200001b0 	.word	0x200001b0
 8001a50:	40022000 	.word	0x40022000

08001a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a62:	e154      	b.n	8001d0e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2101      	movs	r1, #1
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a70:	4013      	ands	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 8146 	beq.w	8001d08 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d005      	beq.n	8001a94 <HAL_GPIO_Init+0x40>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d130      	bne.n	8001af6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aca:	2201      	movs	r2, #1
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	091b      	lsrs	r3, r3, #4
 8001ae0:	f003 0201 	and.w	r2, r3, #1
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d017      	beq.n	8001b32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d123      	bne.n	8001b86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	08da      	lsrs	r2, r3, #3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3208      	adds	r2, #8
 8001b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	220f      	movs	r2, #15
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	691a      	ldr	r2, [r3, #16]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	08da      	lsrs	r2, r3, #3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3208      	adds	r2, #8
 8001b80:	6939      	ldr	r1, [r7, #16]
 8001b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	2203      	movs	r2, #3
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0203 	and.w	r2, r3, #3
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 80a0 	beq.w	8001d08 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc8:	4b58      	ldr	r3, [pc, #352]	; (8001d2c <HAL_GPIO_Init+0x2d8>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4a57      	ldr	r2, [pc, #348]	; (8001d2c <HAL_GPIO_Init+0x2d8>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6193      	str	r3, [r2, #24]
 8001bd4:	4b55      	ldr	r3, [pc, #340]	; (8001d2c <HAL_GPIO_Init+0x2d8>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001be0:	4a53      	ldr	r2, [pc, #332]	; (8001d30 <HAL_GPIO_Init+0x2dc>)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	3302      	adds	r3, #2
 8001be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c0a:	d019      	beq.n	8001c40 <HAL_GPIO_Init+0x1ec>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a49      	ldr	r2, [pc, #292]	; (8001d34 <HAL_GPIO_Init+0x2e0>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d013      	beq.n	8001c3c <HAL_GPIO_Init+0x1e8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a48      	ldr	r2, [pc, #288]	; (8001d38 <HAL_GPIO_Init+0x2e4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d00d      	beq.n	8001c38 <HAL_GPIO_Init+0x1e4>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a47      	ldr	r2, [pc, #284]	; (8001d3c <HAL_GPIO_Init+0x2e8>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d007      	beq.n	8001c34 <HAL_GPIO_Init+0x1e0>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a46      	ldr	r2, [pc, #280]	; (8001d40 <HAL_GPIO_Init+0x2ec>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d101      	bne.n	8001c30 <HAL_GPIO_Init+0x1dc>
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	e008      	b.n	8001c42 <HAL_GPIO_Init+0x1ee>
 8001c30:	2305      	movs	r3, #5
 8001c32:	e006      	b.n	8001c42 <HAL_GPIO_Init+0x1ee>
 8001c34:	2303      	movs	r3, #3
 8001c36:	e004      	b.n	8001c42 <HAL_GPIO_Init+0x1ee>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e002      	b.n	8001c42 <HAL_GPIO_Init+0x1ee>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <HAL_GPIO_Init+0x1ee>
 8001c40:	2300      	movs	r3, #0
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	f002 0203 	and.w	r2, r2, #3
 8001c48:	0092      	lsls	r2, r2, #2
 8001c4a:	4093      	lsls	r3, r2
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c52:	4937      	ldr	r1, [pc, #220]	; (8001d30 <HAL_GPIO_Init+0x2dc>)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	3302      	adds	r3, #2
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c60:	4b38      	ldr	r3, [pc, #224]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c84:	4a2f      	ldr	r2, [pc, #188]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c8a:	4b2e      	ldr	r3, [pc, #184]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cae:	4a25      	ldr	r2, [pc, #148]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb4:	4b23      	ldr	r3, [pc, #140]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cd8:	4a1a      	ldr	r2, [pc, #104]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cde:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4013      	ands	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d02:	4a10      	ldr	r2, [pc, #64]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f47f aea3 	bne.w	8001a64 <HAL_GPIO_Init+0x10>
  }
}
 8001d1e:	bf00      	nop
 8001d20:	bf00      	nop
 8001d22:	371c      	adds	r7, #28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40010000 	.word	0x40010000
 8001d34:	48000400 	.word	0x48000400
 8001d38:	48000800 	.word	0x48000800
 8001d3c:	48000c00 	.word	0x48000c00
 8001d40:	48001000 	.word	0x48001000
 8001d44:	40010400 	.word	0x40010400

08001d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	807b      	strh	r3, [r7, #2]
 8001d54:	4613      	mov	r3, r2
 8001d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d58:	787b      	ldrb	r3, [r7, #1]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d5e:	887a      	ldrh	r2, [r7, #2]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d64:	e002      	b.n	8001d6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d66:	887a      	ldrh	r2, [r7, #2]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	041a      	lsls	r2, r3, #16
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	43d9      	mvns	r1, r3
 8001d96:	887b      	ldrh	r3, [r7, #2]
 8001d98:	400b      	ands	r3, r1
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	619a      	str	r2, [r3, #24]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e081      	b.n	8001ec2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d106      	bne.n	8001dd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f00c f8b0 	bl	800df38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2224      	movs	r2, #36	; 0x24
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0201 	bic.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dfc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d107      	bne.n	8001e26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	e006      	b.n	8001e34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d104      	bne.n	8001e46 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69d9      	ldr	r1, [r3, #28]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1a      	ldr	r2, [r3, #32]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2220      	movs	r2, #32
 8001eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	460b      	mov	r3, r1
 8001eda:	817b      	strh	r3, [r7, #10]
 8001edc:	4613      	mov	r3, r2
 8001ede:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b20      	cmp	r3, #32
 8001eea:	f040 80da 	bne.w	80020a2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_I2C_Master_Transmit+0x30>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e0d3      	b.n	80020a4 <HAL_I2C_Master_Transmit+0x1d8>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f04:	f7ff f884 	bl	8001010 <HAL_GetTick>
 8001f08:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2319      	movs	r3, #25
 8001f10:	2201      	movs	r2, #1
 8001f12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f001 fb91 	bl	800363e <I2C_WaitOnFlagUntilTimeout>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e0be      	b.n	80020a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2221      	movs	r2, #33	; 0x21
 8001f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2210      	movs	r2, #16
 8001f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	893a      	ldrh	r2, [r7, #8]
 8001f46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	2bff      	cmp	r3, #255	; 0xff
 8001f56:	d90e      	bls.n	8001f76 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	22ff      	movs	r2, #255	; 0xff
 8001f5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	8979      	ldrh	r1, [r7, #10]
 8001f66:	4b51      	ldr	r3, [pc, #324]	; (80020ac <HAL_I2C_Master_Transmit+0x1e0>)
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f001 fd04 	bl	800397c <I2C_TransferConfig>
 8001f74:	e06c      	b.n	8002050 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	8979      	ldrh	r1, [r7, #10]
 8001f88:	4b48      	ldr	r3, [pc, #288]	; (80020ac <HAL_I2C_Master_Transmit+0x1e0>)
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f001 fcf3 	bl	800397c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001f96:	e05b      	b.n	8002050 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	6a39      	ldr	r1, [r7, #32]
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f001 fb8e 	bl	80036be <I2C_WaitOnTXISFlagUntilTimeout>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e07b      	b.n	80020a4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	781a      	ldrb	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d034      	beq.n	8002050 <HAL_I2C_Master_Transmit+0x184>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d130      	bne.n	8002050 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2180      	movs	r1, #128	; 0x80
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f001 fb20 	bl	800363e <I2C_WaitOnFlagUntilTimeout>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e04d      	b.n	80020a4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200c:	b29b      	uxth	r3, r3
 800200e:	2bff      	cmp	r3, #255	; 0xff
 8002010:	d90e      	bls.n	8002030 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	22ff      	movs	r2, #255	; 0xff
 8002016:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201c:	b2da      	uxtb	r2, r3
 800201e:	8979      	ldrh	r1, [r7, #10]
 8002020:	2300      	movs	r3, #0
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f001 fca7 	bl	800397c <I2C_TransferConfig>
 800202e:	e00f      	b.n	8002050 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203e:	b2da      	uxtb	r2, r3
 8002040:	8979      	ldrh	r1, [r7, #10]
 8002042:	2300      	movs	r3, #0
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f001 fc96 	bl	800397c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d19e      	bne.n	8001f98 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	6a39      	ldr	r1, [r7, #32]
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f001 fb6d 	bl	800373e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e01a      	b.n	80020a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2220      	movs	r2, #32
 8002074:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_I2C_Master_Transmit+0x1e4>)
 8002082:	400b      	ands	r3, r1
 8002084:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2220      	movs	r2, #32
 800208a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	e000      	b.n	80020a4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80020a2:	2302      	movs	r3, #2
  }
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	80002000 	.word	0x80002000
 80020b0:	fe00e800 	.word	0xfe00e800

080020b4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	461a      	mov	r2, r3
 80020c0:	460b      	mov	r3, r1
 80020c2:	817b      	strh	r3, [r7, #10]
 80020c4:	4613      	mov	r3, r2
 80020c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	f040 80db 	bne.w	800228c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_I2C_Master_Receive+0x30>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e0d4      	b.n	800228e <HAL_I2C_Master_Receive+0x1da>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020ec:	f7fe ff90 	bl	8001010 <HAL_GetTick>
 80020f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	2319      	movs	r3, #25
 80020f8:	2201      	movs	r2, #1
 80020fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f001 fa9d 	bl	800363e <I2C_WaitOnFlagUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e0bf      	b.n	800228e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2222      	movs	r2, #34	; 0x22
 8002112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2210      	movs	r2, #16
 800211a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	893a      	ldrh	r2, [r7, #8]
 800212e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	2bff      	cmp	r3, #255	; 0xff
 800213e:	d90e      	bls.n	800215e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	22ff      	movs	r2, #255	; 0xff
 8002144:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214a:	b2da      	uxtb	r2, r3
 800214c:	8979      	ldrh	r1, [r7, #10]
 800214e:	4b52      	ldr	r3, [pc, #328]	; (8002298 <HAL_I2C_Master_Receive+0x1e4>)
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f001 fc10 	bl	800397c <I2C_TransferConfig>
 800215c:	e06d      	b.n	800223a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216c:	b2da      	uxtb	r2, r3
 800216e:	8979      	ldrh	r1, [r7, #10]
 8002170:	4b49      	ldr	r3, [pc, #292]	; (8002298 <HAL_I2C_Master_Receive+0x1e4>)
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f001 fbff 	bl	800397c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800217e:	e05c      	b.n	800223a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	6a39      	ldr	r1, [r7, #32]
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f001 fb17 	bl	80037b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e07c      	b.n	800228e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021bc:	b29b      	uxth	r3, r3
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d034      	beq.n	800223a <HAL_I2C_Master_Receive+0x186>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d130      	bne.n	800223a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	2200      	movs	r2, #0
 80021e0:	2180      	movs	r1, #128	; 0x80
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f001 fa2b 	bl	800363e <I2C_WaitOnFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e04d      	b.n	800228e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	2bff      	cmp	r3, #255	; 0xff
 80021fa:	d90e      	bls.n	800221a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	22ff      	movs	r2, #255	; 0xff
 8002200:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002206:	b2da      	uxtb	r2, r3
 8002208:	8979      	ldrh	r1, [r7, #10]
 800220a:	2300      	movs	r3, #0
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f001 fbb2 	bl	800397c <I2C_TransferConfig>
 8002218:	e00f      	b.n	800223a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002228:	b2da      	uxtb	r2, r3
 800222a:	8979      	ldrh	r1, [r7, #10]
 800222c:	2300      	movs	r3, #0
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f001 fba1 	bl	800397c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d19d      	bne.n	8002180 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	6a39      	ldr	r1, [r7, #32]
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f001 fa78 	bl	800373e <I2C_WaitOnSTOPFlagUntilTimeout>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e01a      	b.n	800228e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2220      	movs	r2, #32
 800225e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6859      	ldr	r1, [r3, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_I2C_Master_Receive+0x1e8>)
 800226c:	400b      	ands	r3, r1
 800226e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	e000      	b.n	800228e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800228c:	2302      	movs	r3, #2
  }
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	80002400 	.word	0x80002400
 800229c:	fe00e800 	.word	0xfe00e800

080022a0 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	607a      	str	r2, [r7, #4]
 80022aa:	461a      	mov	r2, r3
 80022ac:	460b      	mov	r3, r1
 80022ae:	817b      	strh	r3, [r7, #10]
 80022b0:	4613      	mov	r3, r2
 80022b2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b20      	cmp	r3, #32
 80022be:	d153      	bne.n	8002368 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022ce:	d101      	bne.n	80022d4 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 80022d0:	2302      	movs	r3, #2
 80022d2:	e04a      	b.n	800236a <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d101      	bne.n	80022e2 <HAL_I2C_Master_Transmit_IT+0x42>
 80022de:	2302      	movs	r3, #2
 80022e0:	e043      	b.n	800236a <HAL_I2C_Master_Transmit_IT+0xca>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2221      	movs	r2, #33	; 0x21
 80022ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2210      	movs	r2, #16
 80022f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	893a      	ldrh	r2, [r7, #8]
 800230a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4a19      	ldr	r2, [pc, #100]	; (8002374 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8002310:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4a18      	ldr	r2, [pc, #96]	; (8002378 <HAL_I2C_Master_Transmit_IT+0xd8>)
 8002316:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231c:	b29b      	uxth	r3, r3
 800231e:	2bff      	cmp	r3, #255	; 0xff
 8002320:	d906      	bls.n	8002330 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	22ff      	movs	r2, #255	; 0xff
 8002326:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	e007      	b.n	8002340 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800233a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800233e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	b2da      	uxtb	r2, r3
 8002346:	8979      	ldrh	r1, [r7, #10]
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <HAL_I2C_Master_Transmit_IT+0xdc>)
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f001 fb14 	bl	800397c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800235c:	2101      	movs	r1, #1
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f001 fb3a 	bl	80039d8 <I2C_Enable_IRQ>

    return HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	e000      	b.n	800236a <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002368:	2302      	movs	r3, #2
  }
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	ffff0000 	.word	0xffff0000
 8002378:	0800253d 	.word	0x0800253d
 800237c:	80002000 	.word	0x80002000

08002380 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af02      	add	r7, sp, #8
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	461a      	mov	r2, r3
 800238c:	460b      	mov	r3, r1
 800238e:	817b      	strh	r3, [r7, #10]
 8002390:	4613      	mov	r3, r2
 8002392:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b20      	cmp	r3, #32
 800239e:	d153      	bne.n	8002448 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023ae:	d101      	bne.n	80023b4 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 80023b0:	2302      	movs	r3, #2
 80023b2:	e04a      	b.n	800244a <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_I2C_Master_Receive_IT+0x42>
 80023be:	2302      	movs	r3, #2
 80023c0:	e043      	b.n	800244a <HAL_I2C_Master_Receive_IT+0xca>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2222      	movs	r2, #34	; 0x22
 80023ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2210      	movs	r2, #16
 80023d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	893a      	ldrh	r2, [r7, #8]
 80023ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4a19      	ldr	r2, [pc, #100]	; (8002454 <HAL_I2C_Master_Receive_IT+0xd4>)
 80023f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4a18      	ldr	r2, [pc, #96]	; (8002458 <HAL_I2C_Master_Receive_IT+0xd8>)
 80023f6:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2bff      	cmp	r3, #255	; 0xff
 8002400:	d906      	bls.n	8002410 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	22ff      	movs	r2, #255	; 0xff
 8002406:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002408:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	e007      	b.n	8002420 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800241a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800241e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	b2da      	uxtb	r2, r3
 8002426:	8979      	ldrh	r1, [r7, #10]
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <HAL_I2C_Master_Receive_IT+0xdc>)
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f001 faa4 	bl	800397c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800243c:	2102      	movs	r1, #2
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f001 faca 	bl	80039d8 <I2C_Enable_IRQ>

    return HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	e000      	b.n	800244a <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002448:	2302      	movs	r3, #2
  }
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	ffff0000 	.word	0xffff0000
 8002458:	0800253d 	.word	0x0800253d
 800245c:	80002400 	.word	0x80002400

08002460 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	68f9      	ldr	r1, [r7, #12]
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	4798      	blx	r3
  }
}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	70fb      	strb	r3, [r7, #3]
 80024c8:	4613      	mov	r3, r2
 80024ca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af02      	add	r7, sp, #8
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <I2C_Master_ISR_IT+0x1e>
 8002556:	2302      	movs	r3, #2
 8002558:	e114      	b.n	8002784 <I2C_Master_ISR_IT+0x248>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d013      	beq.n	8002596 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00d      	beq.n	8002596 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2210      	movs	r2, #16
 8002580:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f043 0204 	orr.w	r2, r3, #4
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f001 f813 	bl	80035ba <I2C_Flush_TXDR>
 8002594:	e0e1      	b.n	800275a <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	089b      	lsrs	r3, r3, #2
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d023      	beq.n	80025ea <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	089b      	lsrs	r3, r3, #2
 80025a6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d01d      	beq.n	80025ea <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f023 0304 	bic.w	r3, r3, #4
 80025b4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025e8:	e0b7      	b.n	800275a <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	085b      	lsrs	r3, r3, #1
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d01e      	beq.n	8002634 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	085b      	lsrs	r3, r3, #1
 80025fa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d018      	beq.n	8002634 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	781a      	ldrb	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002632:	e092      	b.n	800275a <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	09db      	lsrs	r3, r3, #7
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d05d      	beq.n	80026fc <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	099b      	lsrs	r3, r3, #6
 8002644:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002648:	2b00      	cmp	r3, #0
 800264a:	d057      	beq.n	80026fc <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29b      	uxth	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d040      	beq.n	80026d8 <I2C_Master_ISR_IT+0x19c>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	2b00      	cmp	r3, #0
 800265c:	d13c      	bne.n	80026d8 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	b29b      	uxth	r3, r3
 8002666:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800266a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	2bff      	cmp	r3, #255	; 0xff
 8002674:	d90e      	bls.n	8002694 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	22ff      	movs	r2, #255	; 0xff
 800267a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002680:	b2da      	uxtb	r2, r3
 8002682:	8a79      	ldrh	r1, [r7, #18]
 8002684:	2300      	movs	r3, #0
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f001 f975 	bl	800397c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002692:	e032      	b.n	80026fa <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026a6:	d00b      	beq.n	80026c0 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	8a79      	ldrh	r1, [r7, #18]
 80026b4:	2000      	movs	r0, #0
 80026b6:	9000      	str	r0, [sp, #0]
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f001 f95f 	bl	800397c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026be:	e01c      	b.n	80026fa <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	8a79      	ldrh	r1, [r7, #18]
 80026c8:	2300      	movs	r3, #0
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f001 f953 	bl	800397c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026d6:	e010      	b.n	80026fa <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026e6:	d003      	beq.n	80026f0 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 fba9 	bl	8002e40 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026ee:	e034      	b.n	800275a <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80026f0:	2140      	movs	r1, #64	; 0x40
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fe6a 	bl	80033cc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026f8:	e02f      	b.n	800275a <I2C_Master_ISR_IT+0x21e>
 80026fa:	e02e      	b.n	800275a <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	099b      	lsrs	r3, r3, #6
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d028      	beq.n	800275a <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	099b      	lsrs	r3, r3, #6
 800270c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002710:	2b00      	cmp	r3, #0
 8002712:	d022      	beq.n	800275a <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d119      	bne.n	8002752 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800272c:	d015      	beq.n	800275a <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002732:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002736:	d108      	bne.n	800274a <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002746:	605a      	str	r2, [r3, #4]
 8002748:	e007      	b.n	800275a <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 fb78 	bl	8002e40 <I2C_ITMasterSeqCplt>
 8002750:	e003      	b.n	800275a <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002752:	2140      	movs	r1, #64	; 0x40
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 fe39 	bl	80033cc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d009      	beq.n	800277a <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002772:	6979      	ldr	r1, [r7, #20]
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 fbff 	bl	8002f78 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <I2C_Slave_ISR_IT+0x24>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e0ec      	b.n	800298a <I2C_Slave_ISR_IT+0x1fe>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d009      	beq.n	80027d8 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80027d0:	6939      	ldr	r1, [r7, #16]
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 fc9a 	bl	800310c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d04d      	beq.n	8002880 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d047      	beq.n	8002880 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d128      	bne.n	800284c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b28      	cmp	r3, #40	; 0x28
 8002804:	d108      	bne.n	8002818 <I2C_Slave_ISR_IT+0x8c>
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800280c:	d104      	bne.n	8002818 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800280e:	6939      	ldr	r1, [r7, #16]
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 fd85 	bl	8003320 <I2C_ITListenCplt>
 8002816:	e032      	b.n	800287e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b29      	cmp	r3, #41	; 0x29
 8002822:	d10e      	bne.n	8002842 <I2C_Slave_ISR_IT+0xb6>
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800282a:	d00a      	beq.n	8002842 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2210      	movs	r2, #16
 8002832:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 fec0 	bl	80035ba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 fb3d 	bl	8002eba <I2C_ITSlaveSeqCplt>
 8002840:	e01d      	b.n	800287e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2210      	movs	r2, #16
 8002848:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800284a:	e096      	b.n	800297a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2210      	movs	r2, #16
 8002852:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002858:	f043 0204 	orr.w	r2, r3, #4
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d004      	beq.n	8002870 <I2C_Slave_ISR_IT+0xe4>
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800286c:	f040 8085 	bne.w	800297a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002874:	4619      	mov	r1, r3
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 fda8 	bl	80033cc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800287c:	e07d      	b.n	800297a <I2C_Slave_ISR_IT+0x1ee>
 800287e:	e07c      	b.n	800297a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d030      	beq.n	80028ee <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	089b      	lsrs	r3, r3, #2
 8002890:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002894:	2b00      	cmp	r3, #0
 8002896:	d02a      	beq.n	80028ee <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d018      	beq.n	80028d4 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d14f      	bne.n	800297e <I2C_Slave_ISR_IT+0x1f2>
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028e4:	d04b      	beq.n	800297e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 fae7 	bl	8002eba <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80028ec:	e047      	b.n	800297e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	08db      	lsrs	r3, r3, #3
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	08db      	lsrs	r3, r3, #3
 80028fe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002906:	6939      	ldr	r1, [r7, #16]
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 fa15 	bl	8002d38 <I2C_ITAddrCplt>
 800290e:	e037      	b.n	8002980 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	085b      	lsrs	r3, r3, #1
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d031      	beq.n	8002980 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	085b      	lsrs	r3, r3, #1
 8002920:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002924:	2b00      	cmp	r3, #0
 8002926:	d02b      	beq.n	8002980 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d018      	beq.n	8002964 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	781a      	ldrb	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	851a      	strh	r2, [r3, #40]	; 0x28
 8002962:	e00d      	b.n	8002980 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800296a:	d002      	beq.n	8002972 <I2C_Slave_ISR_IT+0x1e6>
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 faa1 	bl	8002eba <I2C_ITSlaveSeqCplt>
 8002978:	e002      	b.n	8002980 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800297a:	bf00      	nop
 800297c:	e000      	b.n	8002980 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800297e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b088      	sub	sp, #32
 8002996:	af02      	add	r7, sp, #8
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <I2C_Master_ISR_DMA+0x1a>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e0e1      	b.n	8002b70 <I2C_Master_ISR_DMA+0x1de>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d017      	beq.n	80029f0 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	091b      	lsrs	r3, r3, #4
 80029c4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d011      	beq.n	80029f0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2210      	movs	r2, #16
 80029d2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	f043 0204 	orr.w	r2, r3, #4
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80029e0:	2120      	movs	r1, #32
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 fff8 	bl	80039d8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 fde6 	bl	80035ba <I2C_Flush_TXDR>
 80029ee:	e0ba      	b.n	8002b66 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	09db      	lsrs	r3, r3, #7
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d072      	beq.n	8002ae2 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	099b      	lsrs	r3, r3, #6
 8002a00:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d06c      	beq.n	8002ae2 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a16:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d04e      	beq.n	8002ac0 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a2e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2bff      	cmp	r3, #255	; 0xff
 8002a38:	d906      	bls.n	8002a48 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	22ff      	movs	r2, #255	; 0xff
 8002a3e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002a40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	e010      	b.n	8002a6a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a5a:	d003      	beq.n	8002a64 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	e002      	b.n	8002a6a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002a64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a68:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	8a79      	ldrh	r1, [r7, #18]
 8002a72:	2300      	movs	r3, #0
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 ff7f 	bl	800397c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b22      	cmp	r3, #34	; 0x22
 8002a9a:	d108      	bne.n	8002aae <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aaa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002aac:	e05b      	b.n	8002b66 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002abc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002abe:	e052      	b.n	8002b66 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ace:	d003      	beq.n	8002ad8 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f9b5 	bl	8002e40 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002ad6:	e046      	b.n	8002b66 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002ad8:	2140      	movs	r1, #64	; 0x40
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fc76 	bl	80033cc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002ae0:	e041      	b.n	8002b66 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	099b      	lsrs	r3, r3, #6
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d029      	beq.n	8002b42 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	099b      	lsrs	r3, r3, #6
 8002af2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d023      	beq.n	8002b42 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d119      	bne.n	8002b38 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b12:	d027      	beq.n	8002b64 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b1c:	d108      	bne.n	8002b30 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b2c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002b2e:	e019      	b.n	8002b64 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f985 	bl	8002e40 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002b36:	e015      	b.n	8002b64 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002b38:	2140      	movs	r1, #64	; 0x40
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 fc46 	bl	80033cc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002b40:	e010      	b.n	8002b64 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002b5a:	68b9      	ldr	r1, [r7, #8]
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 fa0b 	bl	8002f78 <I2C_ITMasterCplt>
 8002b62:	e000      	b.n	8002b66 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8002b64:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <I2C_Slave_ISR_DMA+0x24>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e0c9      	b.n	8002d30 <I2C_Slave_ISR_DMA+0x1b8>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d009      	beq.n	8002bc4 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 faa4 	bl	800310c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	091b      	lsrs	r3, r3, #4
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 809a 	beq.w	8002d06 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 8093 	beq.w	8002d06 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	0b9b      	lsrs	r3, r3, #14
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d105      	bne.n	8002bf8 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	0bdb      	lsrs	r3, r3, #15
 8002bf0:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d07f      	beq.n	8002cf8 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00d      	beq.n	8002c1c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	0bdb      	lsrs	r3, r3, #15
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00d      	beq.n	8002c40 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	0b9b      	lsrs	r3, r3, #14
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d007      	beq.n	8002c40 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d128      	bne.n	8002c98 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b28      	cmp	r3, #40	; 0x28
 8002c50:	d108      	bne.n	8002c64 <I2C_Slave_ISR_DMA+0xec>
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c58:	d104      	bne.n	8002c64 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fb5f 	bl	8003320 <I2C_ITListenCplt>
 8002c62:	e048      	b.n	8002cf6 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b29      	cmp	r3, #41	; 0x29
 8002c6e:	d10e      	bne.n	8002c8e <I2C_Slave_ISR_DMA+0x116>
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c76:	d00a      	beq.n	8002c8e <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2210      	movs	r2, #16
 8002c7e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 fc9a 	bl	80035ba <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f917 	bl	8002eba <I2C_ITSlaveSeqCplt>
 8002c8c:	e033      	b.n	8002cf6 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2210      	movs	r2, #16
 8002c94:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002c96:	e034      	b.n	8002d02 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2210      	movs	r2, #16
 8002c9e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca4:	f043 0204 	orr.w	r2, r3, #4
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <I2C_Slave_ISR_DMA+0x14a>
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cc0:	d11f      	bne.n	8002d02 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
 8002cc4:	2b21      	cmp	r3, #33	; 0x21
 8002cc6:	d002      	beq.n	8002cce <I2C_Slave_ISR_DMA+0x156>
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	2b29      	cmp	r3, #41	; 0x29
 8002ccc:	d103      	bne.n	8002cd6 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2221      	movs	r2, #33	; 0x21
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8002cd4:	e008      	b.n	8002ce8 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002cd6:	7dfb      	ldrb	r3, [r7, #23]
 8002cd8:	2b22      	cmp	r3, #34	; 0x22
 8002cda:	d002      	beq.n	8002ce2 <I2C_Slave_ISR_DMA+0x16a>
 8002cdc:	7dfb      	ldrb	r3, [r7, #23]
 8002cde:	2b2a      	cmp	r3, #42	; 0x2a
 8002ce0:	d102      	bne.n	8002ce8 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2222      	movs	r2, #34	; 0x22
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cec:	4619      	mov	r1, r3
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 fb6c 	bl	80033cc <I2C_ITError>
      if (treatdmanack == 1U)
 8002cf4:	e005      	b.n	8002d02 <I2C_Slave_ISR_DMA+0x18a>
 8002cf6:	e004      	b.n	8002d02 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2210      	movs	r2, #16
 8002cfe:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002d00:	e011      	b.n	8002d26 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8002d02:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002d04:	e00f      	b.n	8002d26 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	08db      	lsrs	r3, r3, #3
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d009      	beq.n	8002d26 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	08db      	lsrs	r3, r3, #3
 8002d16:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002d1e:	68b9      	ldr	r1, [r7, #8]
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f809 	bl	8002d38 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3720      	adds	r7, #32
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d4e:	2b28      	cmp	r3, #40	; 0x28
 8002d50:	d16a      	bne.n	8002e28 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	0c1b      	lsrs	r3, r3, #16
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002d70:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d7e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002d8c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d138      	bne.n	8002e08 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002d96:	897b      	ldrh	r3, [r7, #10]
 8002d98:	09db      	lsrs	r3, r3, #7
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	89bb      	ldrh	r3, [r7, #12]
 8002d9e:	4053      	eors	r3, r2
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f003 0306 	and.w	r3, r3, #6
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d11c      	bne.n	8002de4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002daa:	897b      	ldrh	r3, [r7, #10]
 8002dac:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d13b      	bne.n	8002e38 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2208      	movs	r2, #8
 8002dcc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002dd6:	89ba      	ldrh	r2, [r7, #12]
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff fb6d 	bl	80024bc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002de2:	e029      	b.n	8002e38 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002de4:	893b      	ldrh	r3, [r7, #8]
 8002de6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002de8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fe57 	bl	8003aa0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002dfa:	89ba      	ldrh	r2, [r7, #12]
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	4619      	mov	r1, r3
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7ff fb5b 	bl	80024bc <HAL_I2C_AddrCallback>
}
 8002e06:	e017      	b.n	8002e38 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002e08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fe47 	bl	8003aa0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e1a:	89ba      	ldrh	r2, [r7, #12]
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff fb4b 	bl	80024bc <HAL_I2C_AddrCallback>
}
 8002e26:	e007      	b.n	8002e38 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2208      	movs	r2, #8
 8002e2e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002e38:	bf00      	nop
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b21      	cmp	r3, #33	; 0x21
 8002e5a:	d115      	bne.n	8002e88 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2211      	movs	r2, #17
 8002e68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e70:	2101      	movs	r1, #1
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fe14 	bl	8003aa0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f009 f872 	bl	800bf6a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e86:	e014      	b.n	8002eb2 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2212      	movs	r2, #18
 8002e94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e9c:	2102      	movs	r1, #2
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fdfe 	bl	8003aa0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f009 f851 	bl	800bf54 <HAL_I2C_MasterRxCpltCallback>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	0b9b      	lsrs	r3, r3, #14
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	e00d      	b.n	8002f0c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	0bdb      	lsrs	r3, r3, #15
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d007      	beq.n	8002f0c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f0a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b29      	cmp	r3, #41	; 0x29
 8002f16:	d112      	bne.n	8002f3e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2228      	movs	r2, #40	; 0x28
 8002f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2221      	movs	r2, #33	; 0x21
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f26:	2101      	movs	r1, #1
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fdb9 	bl	8003aa0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff faac 	bl	8002494 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f3c:	e017      	b.n	8002f6e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b2a      	cmp	r3, #42	; 0x2a
 8002f48:	d111      	bne.n	8002f6e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2228      	movs	r2, #40	; 0x28
 8002f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2222      	movs	r2, #34	; 0x22
 8002f56:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f58:	2102      	movs	r1, #2
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fda0 	bl	8003aa0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff fa9d 	bl	80024a8 <HAL_I2C_SlaveRxCpltCallback>
}
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b21      	cmp	r3, #33	; 0x21
 8002f98:	d107      	bne.n	8002faa <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fd7f 	bl	8003aa0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2211      	movs	r2, #17
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
 8002fa8:	e00c      	b.n	8002fc4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b22      	cmp	r3, #34	; 0x22
 8002fb4:	d106      	bne.n	8002fc4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002fb6:	2102      	movs	r1, #2
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 fd71 	bl	8003aa0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2212      	movs	r2, #18
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6859      	ldr	r1, [r3, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4b4d      	ldr	r3, [pc, #308]	; (8003104 <I2C_ITMasterCplt+0x18c>)
 8002fd0:	400b      	ands	r3, r1
 8002fd2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a4a      	ldr	r2, [pc, #296]	; (8003108 <I2C_ITMasterCplt+0x190>)
 8002fde:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	091b      	lsrs	r3, r3, #4
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d009      	beq.n	8003000 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2210      	movs	r2, #16
 8002ff2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff8:	f043 0204 	orr.w	r2, r3, #4
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b60      	cmp	r3, #96	; 0x60
 800300a:	d10b      	bne.n	8003024 <I2C_ITMasterCplt+0xac>
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	089b      	lsrs	r3, r3, #2
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	b2db      	uxtb	r3, r3
 8003020:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003022:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fac8 	bl	80035ba <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b60      	cmp	r3, #96	; 0x60
 800303a:	d002      	beq.n	8003042 <I2C_ITMasterCplt+0xca>
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d006      	beq.n	8003050 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	4619      	mov	r1, r3
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f9bf 	bl	80033cc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800304e:	e054      	b.n	80030fa <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b21      	cmp	r3, #33	; 0x21
 800305a:	d124      	bne.n	80030a6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b40      	cmp	r3, #64	; 0x40
 8003074:	d10b      	bne.n	800308e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff fa30 	bl	80024ec <HAL_I2C_MemTxCpltCallback>
}
 800308c:	e035      	b.n	80030fa <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f008 ff63 	bl	800bf6a <HAL_I2C_MasterTxCpltCallback>
}
 80030a4:	e029      	b.n	80030fa <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b22      	cmp	r3, #34	; 0x22
 80030b0:	d123      	bne.n	80030fa <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b40      	cmp	r3, #64	; 0x40
 80030ca:	d10b      	bne.n	80030e4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f7ff fa0f 	bl	8002500 <HAL_I2C_MemRxCpltCallback>
}
 80030e2:	e00a      	b.n	80030fa <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f008 ff2d 	bl	800bf54 <HAL_I2C_MasterRxCpltCallback>
}
 80030fa:	bf00      	nop
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	fe00e800 	.word	0xfe00e800
 8003108:	ffff0000 	.word	0xffff0000

0800310c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003128:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2220      	movs	r2, #32
 8003130:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	2b21      	cmp	r3, #33	; 0x21
 8003136:	d002      	beq.n	800313e <I2C_ITSlaveCplt+0x32>
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	2b29      	cmp	r3, #41	; 0x29
 800313c:	d108      	bne.n	8003150 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800313e:	f248 0101 	movw	r1, #32769	; 0x8001
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fcac 	bl	8003aa0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2221      	movs	r2, #33	; 0x21
 800314c:	631a      	str	r2, [r3, #48]	; 0x30
 800314e:	e00d      	b.n	800316c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b22      	cmp	r3, #34	; 0x22
 8003154:	d002      	beq.n	800315c <I2C_ITSlaveCplt+0x50>
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	2b2a      	cmp	r3, #42	; 0x2a
 800315a:	d107      	bne.n	800316c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800315c:	f248 0102 	movw	r1, #32770	; 0x8002
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fc9d 	bl	8003aa0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2222      	movs	r2, #34	; 0x22
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800317a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6859      	ldr	r1, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4b64      	ldr	r3, [pc, #400]	; (8003318 <I2C_ITSlaveCplt+0x20c>)
 8003188:	400b      	ands	r3, r1
 800318a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 fa14 	bl	80035ba <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	0b9b      	lsrs	r3, r3, #14
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d013      	beq.n	80031c6 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031ac:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d020      	beq.n	80031f8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	b29a      	uxth	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031c4:	e018      	b.n	80031f8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	0bdb      	lsrs	r3, r3, #15
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d012      	beq.n	80031f8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031e0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d006      	beq.n	80031f8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	089b      	lsrs	r3, r3, #2
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d020      	beq.n	8003246 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f023 0304 	bic.w	r3, r3, #4
 800320a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00c      	beq.n	8003246 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323c:	b29b      	uxth	r3, r3
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003254:	f043 0204 	orr.w	r2, r3, #4
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	2b00      	cmp	r3, #0
 8003270:	d010      	beq.n	8003294 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	4619      	mov	r1, r3
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f8a7 	bl	80033cc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b28      	cmp	r3, #40	; 0x28
 8003288:	d141      	bne.n	800330e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800328a:	6979      	ldr	r1, [r7, #20]
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f847 	bl	8003320 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003292:	e03c      	b.n	800330e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800329c:	d014      	beq.n	80032c8 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff fe0b 	bl	8002eba <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a1d      	ldr	r2, [pc, #116]	; (800331c <I2C_ITSlaveCplt+0x210>)
 80032a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff f909 	bl	80024d8 <HAL_I2C_ListenCpltCallback>
}
 80032c6:	e022      	b.n	800330e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b22      	cmp	r3, #34	; 0x22
 80032d2:	d10e      	bne.n	80032f2 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff f8dc 	bl	80024a8 <HAL_I2C_SlaveRxCpltCallback>
}
 80032f0:	e00d      	b.n	800330e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff f8c3 	bl	8002494 <HAL_I2C_SlaveTxCpltCallback>
}
 800330e:	bf00      	nop
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	fe00e800 	.word	0xfe00e800
 800331c:	ffff0000 	.word	0xffff0000

08003320 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a26      	ldr	r2, [pc, #152]	; (80033c8 <I2C_ITListenCplt+0xa8>)
 800332e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	089b      	lsrs	r3, r3, #2
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d022      	beq.n	800339e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003374:	2b00      	cmp	r3, #0
 8003376:	d012      	beq.n	800339e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003388:	b29b      	uxth	r3, r3
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	f043 0204 	orr.w	r2, r3, #4
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800339e:	f248 0103 	movw	r1, #32771	; 0x8003
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fb7c 	bl	8003aa0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2210      	movs	r2, #16
 80033ae:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff f88d 	bl	80024d8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	ffff0000 	.word	0xffff0000

080033cc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a5d      	ldr	r2, [pc, #372]	; (8003560 <I2C_ITError+0x194>)
 80033ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	2b28      	cmp	r3, #40	; 0x28
 8003402:	d005      	beq.n	8003410 <I2C_ITError+0x44>
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	2b29      	cmp	r3, #41	; 0x29
 8003408:	d002      	beq.n	8003410 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	2b2a      	cmp	r3, #42	; 0x2a
 800340e:	d10b      	bne.n	8003428 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003410:	2103      	movs	r1, #3
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fb44 	bl	8003aa0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2228      	movs	r2, #40	; 0x28
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a50      	ldr	r2, [pc, #320]	; (8003564 <I2C_ITError+0x198>)
 8003424:	635a      	str	r2, [r3, #52]	; 0x34
 8003426:	e011      	b.n	800344c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003428:	f248 0103 	movw	r1, #32771	; 0x8003
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fb37 	bl	8003aa0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b60      	cmp	r3, #96	; 0x60
 800343c:	d003      	beq.n	8003446 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	2b00      	cmp	r3, #0
 8003458:	d039      	beq.n	80034ce <I2C_ITError+0x102>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b11      	cmp	r3, #17
 800345e:	d002      	beq.n	8003466 <I2C_ITError+0x9a>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b21      	cmp	r3, #33	; 0x21
 8003464:	d133      	bne.n	80034ce <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003474:	d107      	bne.n	8003486 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003484:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348a:	4618      	mov	r0, r3
 800348c:	f7fe f892 	bl	80015b4 <HAL_DMA_GetState>
 8003490:	4603      	mov	r3, r0
 8003492:	2b01      	cmp	r3, #1
 8003494:	d017      	beq.n	80034c6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349a:	4a33      	ldr	r2, [pc, #204]	; (8003568 <I2C_ITError+0x19c>)
 800349c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fd ffa1 	bl	80013f2 <HAL_DMA_Abort_IT>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d04d      	beq.n	8003552 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034c0:	4610      	mov	r0, r2
 80034c2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034c4:	e045      	b.n	8003552 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f850 	bl	800356c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034cc:	e041      	b.n	8003552 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d039      	beq.n	800354a <I2C_ITError+0x17e>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b12      	cmp	r3, #18
 80034da:	d002      	beq.n	80034e2 <I2C_ITError+0x116>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b22      	cmp	r3, #34	; 0x22
 80034e0:	d133      	bne.n	800354a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f0:	d107      	bne.n	8003502 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003500:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe f854 	bl	80015b4 <HAL_DMA_GetState>
 800350c:	4603      	mov	r3, r0
 800350e:	2b01      	cmp	r3, #1
 8003510:	d017      	beq.n	8003542 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003516:	4a14      	ldr	r2, [pc, #80]	; (8003568 <I2C_ITError+0x19c>)
 8003518:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003526:	4618      	mov	r0, r3
 8003528:	f7fd ff63 	bl	80013f2 <HAL_DMA_Abort_IT>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d011      	beq.n	8003556 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800353c:	4610      	mov	r0, r2
 800353e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003540:	e009      	b.n	8003556 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f812 	bl	800356c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003548:	e005      	b.n	8003556 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f80e 	bl	800356c <I2C_TreatErrorCallback>
  }
}
 8003550:	e002      	b.n	8003558 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003552:	bf00      	nop
 8003554:	e000      	b.n	8003558 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003556:	bf00      	nop
}
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	ffff0000 	.word	0xffff0000
 8003564:	0800278d 	.word	0x0800278d
 8003568:	08003603 	.word	0x08003603

0800356c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b60      	cmp	r3, #96	; 0x60
 800357e:	d10e      	bne.n	800359e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fe ffc6 	bl	8002528 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800359c:	e009      	b.n	80035b2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7fe ffb1 	bl	8002514 <HAL_I2C_ErrorCallback>
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d103      	bne.n	80035d8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2200      	movs	r2, #0
 80035d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d007      	beq.n	80035f6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699a      	ldr	r2, [r3, #24]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0201 	orr.w	r2, r2, #1
 80035f4:	619a      	str	r2, [r3, #24]
  }
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	2200      	movs	r2, #0
 800361e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	2200      	movs	r2, #0
 800362e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f7ff ff9b 	bl	800356c <I2C_TreatErrorCallback>
}
 8003636:	bf00      	nop
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	603b      	str	r3, [r7, #0]
 800364a:	4613      	mov	r3, r2
 800364c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800364e:	e022      	b.n	8003696 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003656:	d01e      	beq.n	8003696 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003658:	f7fd fcda 	bl	8001010 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d302      	bcc.n	800366e <I2C_WaitOnFlagUntilTimeout+0x30>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d113      	bne.n	8003696 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003672:	f043 0220 	orr.w	r2, r3, #32
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e00f      	b.n	80036b6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699a      	ldr	r2, [r3, #24]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4013      	ands	r3, r2
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	bf0c      	ite	eq
 80036a6:	2301      	moveq	r3, #1
 80036a8:	2300      	movne	r3, #0
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	461a      	mov	r2, r3
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d0cd      	beq.n	8003650 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036ca:	e02c      	b.n	8003726 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	68b9      	ldr	r1, [r7, #8]
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f8dd 	bl	8003890 <I2C_IsAcknowledgeFailed>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e02a      	b.n	8003736 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036e6:	d01e      	beq.n	8003726 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e8:	f7fd fc92 	bl	8001010 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d302      	bcc.n	80036fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d113      	bne.n	8003726 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003702:	f043 0220 	orr.w	r2, r3, #32
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e007      	b.n	8003736 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b02      	cmp	r3, #2
 8003732:	d1cb      	bne.n	80036cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800374a:	e028      	b.n	800379e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	68b9      	ldr	r1, [r7, #8]
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f89d 	bl	8003890 <I2C_IsAcknowledgeFailed>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e026      	b.n	80037ae <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003760:	f7fd fc56 	bl	8001010 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	429a      	cmp	r2, r3
 800376e:	d302      	bcc.n	8003776 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d113      	bne.n	800379e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f043 0220 	orr.w	r2, r3, #32
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e007      	b.n	80037ae <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b20      	cmp	r3, #32
 80037aa:	d1cf      	bne.n	800374c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037c4:	e055      	b.n	8003872 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f860 	bl	8003890 <I2C_IsAcknowledgeFailed>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e053      	b.n	8003882 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d129      	bne.n	800383c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d105      	bne.n	8003802 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	e03f      	b.n	8003882 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2220      	movs	r2, #32
 8003808:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4b1d      	ldr	r3, [pc, #116]	; (800388c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003816:	400b      	ands	r3, r1
 8003818:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e022      	b.n	8003882 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383c:	f7fd fbe8 	bl	8001010 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	429a      	cmp	r2, r3
 800384a:	d302      	bcc.n	8003852 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10f      	bne.n	8003872 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f043 0220 	orr.w	r2, r3, #32
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e007      	b.n	8003882 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b04      	cmp	r3, #4
 800387e:	d1a2      	bne.n	80037c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	fe00e800 	.word	0xfe00e800

08003890 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	2b10      	cmp	r3, #16
 80038a8:	d161      	bne.n	800396e <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038b8:	d02b      	beq.n	8003912 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038c8:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038ca:	e022      	b.n	8003912 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038d2:	d01e      	beq.n	8003912 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d4:	f7fd fb9c 	bl	8001010 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d302      	bcc.n	80038ea <I2C_IsAcknowledgeFailed+0x5a>
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d113      	bne.n	8003912 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	f043 0220 	orr.w	r2, r3, #32
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e02e      	b.n	8003970 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b20      	cmp	r3, #32
 800391e:	d1d5      	bne.n	80038cc <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2210      	movs	r2, #16
 8003926:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2220      	movs	r2, #32
 800392e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f7ff fe42 	bl	80035ba <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6859      	ldr	r1, [r3, #4]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <I2C_IsAcknowledgeFailed+0xe8>)
 8003942:	400b      	ands	r3, r1
 8003944:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	f043 0204 	orr.w	r2, r3, #4
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	fe00e800 	.word	0xfe00e800

0800397c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	460b      	mov	r3, r1
 8003988:	817b      	strh	r3, [r7, #10]
 800398a:	4613      	mov	r3, r2
 800398c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	0d5b      	lsrs	r3, r3, #21
 8003998:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800399c:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <I2C_TransferConfig+0x58>)
 800399e:	430b      	orrs	r3, r1
 80039a0:	43db      	mvns	r3, r3
 80039a2:	ea02 0103 	and.w	r1, r2, r3
 80039a6:	897b      	ldrh	r3, [r7, #10]
 80039a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039ac:	7a7b      	ldrb	r3, [r7, #9]
 80039ae:	041b      	lsls	r3, r3, #16
 80039b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	431a      	orrs	r2, r3
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	431a      	orrs	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	03ff63ff 	.word	0x03ff63ff

080039d8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ec:	4a2a      	ldr	r2, [pc, #168]	; (8003a98 <I2C_Enable_IRQ+0xc0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d004      	beq.n	80039fc <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80039f6:	4a29      	ldr	r2, [pc, #164]	; (8003a9c <I2C_Enable_IRQ+0xc4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d11d      	bne.n	8003a38 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80039fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	da03      	bge.n	8003a0c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003a0a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003a0c:	887b      	ldrh	r3, [r7, #2]
 8003a0e:	2b10      	cmp	r3, #16
 8003a10:	d103      	bne.n	8003a1a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003a18:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d103      	bne.n	8003a28 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a26:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003a28:	887b      	ldrh	r3, [r7, #2]
 8003a2a:	2b40      	cmp	r3, #64	; 0x40
 8003a2c:	d125      	bne.n	8003a7a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a34:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003a36:	e020      	b.n	8003a7a <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003a38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	da03      	bge.n	8003a48 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003a46:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003a48:	887b      	ldrh	r3, [r7, #2]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003a58:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003a5a:	887b      	ldrh	r3, [r7, #2]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003a6a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a6c:	887b      	ldrh	r3, [r7, #2]
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	d103      	bne.n	8003a7a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f043 0320 	orr.w	r3, r3, #32
 8003a78:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6819      	ldr	r1, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	601a      	str	r2, [r3, #0]
}
 8003a8a:	bf00      	nop
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	08002993 	.word	0x08002993
 8003a9c:	08002b79 	.word	0x08002b79

08003aa0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ab0:	887b      	ldrh	r3, [r7, #2]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00f      	beq.n	8003ada <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003ac0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ace:	2b28      	cmp	r3, #40	; 0x28
 8003ad0:	d003      	beq.n	8003ada <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003ad8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003ada:	887b      	ldrh	r3, [r7, #2]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00f      	beq.n	8003b04 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003aea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003af8:	2b28      	cmp	r3, #40	; 0x28
 8003afa:	d003      	beq.n	8003b04 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003b02:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	da03      	bge.n	8003b14 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003b12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b14:	887b      	ldrh	r3, [r7, #2]
 8003b16:	2b10      	cmp	r3, #16
 8003b18:	d103      	bne.n	8003b22 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003b20:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b22:	887b      	ldrh	r3, [r7, #2]
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	d103      	bne.n	8003b30 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f043 0320 	orr.w	r3, r3, #32
 8003b2e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b30:	887b      	ldrh	r3, [r7, #2]
 8003b32:	2b40      	cmp	r3, #64	; 0x40
 8003b34:	d103      	bne.n	8003b3e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b3c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6819      	ldr	r1, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	43da      	mvns	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	400a      	ands	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	d138      	bne.n	8003be4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e032      	b.n	8003be6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2224      	movs	r2, #36	; 0x24
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6819      	ldr	r1, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e000      	b.n	8003be6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003be4:	2302      	movs	r3, #2
  }
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d139      	bne.n	8003c7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e033      	b.n	8003c7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2224      	movs	r2, #36	; 0x24
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0201 	bic.w	r2, r2, #1
 8003c34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e000      	b.n	8003c7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
  }
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
	...

08003c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c9c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d102      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	f001 b823 	b.w	8004cf8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 817d 	beq.w	8003fc2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003cc8:	4bbc      	ldr	r3, [pc, #752]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 030c 	and.w	r3, r3, #12
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d00c      	beq.n	8003cee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cd4:	4bb9      	ldr	r3, [pc, #740]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 030c 	and.w	r3, r3, #12
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d15c      	bne.n	8003d9a <HAL_RCC_OscConfig+0x10e>
 8003ce0:	4bb6      	ldr	r3, [pc, #728]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cec:	d155      	bne.n	8003d9a <HAL_RCC_OscConfig+0x10e>
 8003cee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cf2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003cfa:	fa93 f3a3 	rbit	r3, r3
 8003cfe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d02:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d06:	fab3 f383 	clz	r3, r3
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	095b      	lsrs	r3, r3, #5
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d102      	bne.n	8003d20 <HAL_RCC_OscConfig+0x94>
 8003d1a:	4ba8      	ldr	r3, [pc, #672]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	e015      	b.n	8003d4c <HAL_RCC_OscConfig+0xc0>
 8003d20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d24:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d28:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003d2c:	fa93 f3a3 	rbit	r3, r3
 8003d30:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003d34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d38:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003d3c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003d40:	fa93 f3a3 	rbit	r3, r3
 8003d44:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003d48:	4b9c      	ldr	r3, [pc, #624]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d50:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003d54:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003d58:	fa92 f2a2 	rbit	r2, r2
 8003d5c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003d60:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003d64:	fab2 f282 	clz	r2, r2
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	f042 0220 	orr.w	r2, r2, #32
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	f002 021f 	and.w	r2, r2, #31
 8003d74:	2101      	movs	r1, #1
 8003d76:	fa01 f202 	lsl.w	r2, r1, r2
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 811f 	beq.w	8003fc0 <HAL_RCC_OscConfig+0x334>
 8003d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f040 8116 	bne.w	8003fc0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f000 bfaf 	b.w	8004cf8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003daa:	d106      	bne.n	8003dba <HAL_RCC_OscConfig+0x12e>
 8003dac:	4b83      	ldr	r3, [pc, #524]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a82      	ldr	r2, [pc, #520]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	e036      	b.n	8003e28 <HAL_RCC_OscConfig+0x19c>
 8003dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10c      	bne.n	8003de4 <HAL_RCC_OscConfig+0x158>
 8003dca:	4b7c      	ldr	r3, [pc, #496]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a7b      	ldr	r2, [pc, #492]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	4b79      	ldr	r3, [pc, #484]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a78      	ldr	r2, [pc, #480]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	e021      	b.n	8003e28 <HAL_RCC_OscConfig+0x19c>
 8003de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003df4:	d10c      	bne.n	8003e10 <HAL_RCC_OscConfig+0x184>
 8003df6:	4b71      	ldr	r3, [pc, #452]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a70      	ldr	r2, [pc, #448]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	4b6e      	ldr	r3, [pc, #440]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a6d      	ldr	r2, [pc, #436]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	e00b      	b.n	8003e28 <HAL_RCC_OscConfig+0x19c>
 8003e10:	4b6a      	ldr	r3, [pc, #424]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a69      	ldr	r2, [pc, #420]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	4b67      	ldr	r3, [pc, #412]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a66      	ldr	r2, [pc, #408]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e26:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e28:	4b64      	ldr	r3, [pc, #400]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	f023 020f 	bic.w	r2, r3, #15
 8003e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	495f      	ldr	r1, [pc, #380]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d059      	beq.n	8003f06 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e52:	f7fd f8dd 	bl	8001010 <HAL_GetTick>
 8003e56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	e00a      	b.n	8003e72 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7fd f8d8 	bl	8001010 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b64      	cmp	r3, #100	; 0x64
 8003e6a:	d902      	bls.n	8003e72 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	f000 bf43 	b.w	8004cf8 <HAL_RCC_OscConfig+0x106c>
 8003e72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e76:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003e7e:	fa93 f3a3 	rbit	r3, r3
 8003e82:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003e86:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8a:	fab3 f383 	clz	r3, r3
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	095b      	lsrs	r3, r3, #5
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d102      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x218>
 8003e9e:	4b47      	ldr	r3, [pc, #284]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	e015      	b.n	8003ed0 <HAL_RCC_OscConfig+0x244>
 8003ea4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ea8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003eb0:	fa93 f3a3 	rbit	r3, r3
 8003eb4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003eb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ebc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003ec0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003ec4:	fa93 f3a3 	rbit	r3, r3
 8003ec8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003ecc:	4b3b      	ldr	r3, [pc, #236]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ed4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003ed8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003edc:	fa92 f2a2 	rbit	r2, r2
 8003ee0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003ee4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003ee8:	fab2 f282 	clz	r2, r2
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	f042 0220 	orr.w	r2, r2, #32
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	f002 021f 	and.w	r2, r2, #31
 8003ef8:	2101      	movs	r1, #1
 8003efa:	fa01 f202 	lsl.w	r2, r1, r2
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ab      	beq.n	8003e5c <HAL_RCC_OscConfig+0x1d0>
 8003f04:	e05d      	b.n	8003fc2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f06:	f7fd f883 	bl	8001010 <HAL_GetTick>
 8003f0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f10:	f7fd f87e 	bl	8001010 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b64      	cmp	r3, #100	; 0x64
 8003f1e:	d902      	bls.n	8003f26 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	f000 bee9 	b.w	8004cf8 <HAL_RCC_OscConfig+0x106c>
 8003f26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f2a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003f32:	fa93 f3a3 	rbit	r3, r3
 8003f36:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003f3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f3e:	fab3 f383 	clz	r3, r3
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d102      	bne.n	8003f58 <HAL_RCC_OscConfig+0x2cc>
 8003f52:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	e015      	b.n	8003f84 <HAL_RCC_OscConfig+0x2f8>
 8003f58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f5c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f60:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003f64:	fa93 f3a3 	rbit	r3, r3
 8003f68:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003f6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f70:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003f74:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003f78:	fa93 f3a3 	rbit	r3, r3
 8003f7c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003f80:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <HAL_RCC_OscConfig+0x330>)
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f88:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003f8c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003f90:	fa92 f2a2 	rbit	r2, r2
 8003f94:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003f98:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003f9c:	fab2 f282 	clz	r2, r2
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	f042 0220 	orr.w	r2, r2, #32
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	f002 021f 	and.w	r2, r2, #31
 8003fac:	2101      	movs	r1, #1
 8003fae:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1ab      	bne.n	8003f10 <HAL_RCC_OscConfig+0x284>
 8003fb8:	e003      	b.n	8003fc2 <HAL_RCC_OscConfig+0x336>
 8003fba:	bf00      	nop
 8003fbc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 817d 	beq.w	80042d2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003fd8:	4ba6      	ldr	r3, [pc, #664]	; (8004274 <HAL_RCC_OscConfig+0x5e8>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f003 030c 	and.w	r3, r3, #12
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00b      	beq.n	8003ffc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003fe4:	4ba3      	ldr	r3, [pc, #652]	; (8004274 <HAL_RCC_OscConfig+0x5e8>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 030c 	and.w	r3, r3, #12
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d172      	bne.n	80040d6 <HAL_RCC_OscConfig+0x44a>
 8003ff0:	4ba0      	ldr	r3, [pc, #640]	; (8004274 <HAL_RCC_OscConfig+0x5e8>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d16c      	bne.n	80040d6 <HAL_RCC_OscConfig+0x44a>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004002:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004006:	fa93 f3a3 	rbit	r3, r3
 800400a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800400e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	095b      	lsrs	r3, r3, #5
 800401a:	b2db      	uxtb	r3, r3
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b01      	cmp	r3, #1
 8004024:	d102      	bne.n	800402c <HAL_RCC_OscConfig+0x3a0>
 8004026:	4b93      	ldr	r3, [pc, #588]	; (8004274 <HAL_RCC_OscConfig+0x5e8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	e013      	b.n	8004054 <HAL_RCC_OscConfig+0x3c8>
 800402c:	2302      	movs	r3, #2
 800402e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004032:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004036:	fa93 f3a3 	rbit	r3, r3
 800403a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800403e:	2302      	movs	r3, #2
 8004040:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004044:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004048:	fa93 f3a3 	rbit	r3, r3
 800404c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004050:	4b88      	ldr	r3, [pc, #544]	; (8004274 <HAL_RCC_OscConfig+0x5e8>)
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	2202      	movs	r2, #2
 8004056:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800405a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800405e:	fa92 f2a2 	rbit	r2, r2
 8004062:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004066:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800406a:	fab2 f282 	clz	r2, r2
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	f042 0220 	orr.w	r2, r2, #32
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	f002 021f 	and.w	r2, r2, #31
 800407a:	2101      	movs	r1, #1
 800407c:	fa01 f202 	lsl.w	r2, r1, r2
 8004080:	4013      	ands	r3, r2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <HAL_RCC_OscConfig+0x410>
 8004086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800408a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d002      	beq.n	800409c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	f000 be2e 	b.w	8004cf8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409c:	4b75      	ldr	r3, [pc, #468]	; (8004274 <HAL_RCC_OscConfig+0x5e8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	21f8      	movs	r1, #248	; 0xf8
 80040b2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80040ba:	fa91 f1a1 	rbit	r1, r1
 80040be:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80040c2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80040c6:	fab1 f181 	clz	r1, r1
 80040ca:	b2c9      	uxtb	r1, r1
 80040cc:	408b      	lsls	r3, r1
 80040ce:	4969      	ldr	r1, [pc, #420]	; (8004274 <HAL_RCC_OscConfig+0x5e8>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d4:	e0fd      	b.n	80042d2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 8088 	beq.w	80041f8 <HAL_RCC_OscConfig+0x56c>
 80040e8:	2301      	movs	r3, #1
 80040ea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80040f2:	fa93 f3a3 	rbit	r3, r3
 80040f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80040fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040fe:	fab3 f383 	clz	r3, r3
 8004102:	b2db      	uxtb	r3, r3
 8004104:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004108:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	461a      	mov	r2, r3
 8004110:	2301      	movs	r3, #1
 8004112:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004114:	f7fc ff7c 	bl	8001010 <HAL_GetTick>
 8004118:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411c:	e00a      	b.n	8004134 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800411e:	f7fc ff77 	bl	8001010 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d902      	bls.n	8004134 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	f000 bde2 	b.w	8004cf8 <HAL_RCC_OscConfig+0x106c>
 8004134:	2302      	movs	r3, #2
 8004136:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800413e:	fa93 f3a3 	rbit	r3, r3
 8004142:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004146:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414a:	fab3 f383 	clz	r3, r3
 800414e:	b2db      	uxtb	r3, r3
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	b2db      	uxtb	r3, r3
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b01      	cmp	r3, #1
 800415c:	d102      	bne.n	8004164 <HAL_RCC_OscConfig+0x4d8>
 800415e:	4b45      	ldr	r3, [pc, #276]	; (8004274 <HAL_RCC_OscConfig+0x5e8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	e013      	b.n	800418c <HAL_RCC_OscConfig+0x500>
 8004164:	2302      	movs	r3, #2
 8004166:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800416e:	fa93 f3a3 	rbit	r3, r3
 8004172:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004176:	2302      	movs	r3, #2
 8004178:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800417c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004180:	fa93 f3a3 	rbit	r3, r3
 8004184:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004188:	4b3a      	ldr	r3, [pc, #232]	; (8004274 <HAL_RCC_OscConfig+0x5e8>)
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	2202      	movs	r2, #2
 800418e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004192:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004196:	fa92 f2a2 	rbit	r2, r2
 800419a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800419e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80041a2:	fab2 f282 	clz	r2, r2
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	f042 0220 	orr.w	r2, r2, #32
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	f002 021f 	and.w	r2, r2, #31
 80041b2:	2101      	movs	r1, #1
 80041b4:	fa01 f202 	lsl.w	r2, r1, r2
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0af      	beq.n	800411e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041be:	4b2d      	ldr	r3, [pc, #180]	; (8004274 <HAL_RCC_OscConfig+0x5e8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	21f8      	movs	r1, #248	; 0xf8
 80041d4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80041dc:	fa91 f1a1 	rbit	r1, r1
 80041e0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80041e4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80041e8:	fab1 f181 	clz	r1, r1
 80041ec:	b2c9      	uxtb	r1, r1
 80041ee:	408b      	lsls	r3, r1
 80041f0:	4920      	ldr	r1, [pc, #128]	; (8004274 <HAL_RCC_OscConfig+0x5e8>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	600b      	str	r3, [r1, #0]
 80041f6:	e06c      	b.n	80042d2 <HAL_RCC_OscConfig+0x646>
 80041f8:	2301      	movs	r3, #1
 80041fa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004202:	fa93 f3a3 	rbit	r3, r3
 8004206:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800420a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800420e:	fab3 f383 	clz	r3, r3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004218:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	461a      	mov	r2, r3
 8004220:	2300      	movs	r3, #0
 8004222:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004224:	f7fc fef4 	bl	8001010 <HAL_GetTick>
 8004228:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800422c:	e00a      	b.n	8004244 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800422e:	f7fc feef 	bl	8001010 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d902      	bls.n	8004244 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	f000 bd5a 	b.w	8004cf8 <HAL_RCC_OscConfig+0x106c>
 8004244:	2302      	movs	r3, #2
 8004246:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800424e:	fa93 f3a3 	rbit	r3, r3
 8004252:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425a:	fab3 f383 	clz	r3, r3
 800425e:	b2db      	uxtb	r3, r3
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	b2db      	uxtb	r3, r3
 8004264:	f043 0301 	orr.w	r3, r3, #1
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b01      	cmp	r3, #1
 800426c:	d104      	bne.n	8004278 <HAL_RCC_OscConfig+0x5ec>
 800426e:	4b01      	ldr	r3, [pc, #4]	; (8004274 <HAL_RCC_OscConfig+0x5e8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	e015      	b.n	80042a0 <HAL_RCC_OscConfig+0x614>
 8004274:	40021000 	.word	0x40021000
 8004278:	2302      	movs	r3, #2
 800427a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004282:	fa93 f3a3 	rbit	r3, r3
 8004286:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800428a:	2302      	movs	r3, #2
 800428c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004290:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004294:	fa93 f3a3 	rbit	r3, r3
 8004298:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800429c:	4bc8      	ldr	r3, [pc, #800]	; (80045c0 <HAL_RCC_OscConfig+0x934>)
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	2202      	movs	r2, #2
 80042a2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80042a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80042aa:	fa92 f2a2 	rbit	r2, r2
 80042ae:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80042b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80042b6:	fab2 f282 	clz	r2, r2
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	f042 0220 	orr.w	r2, r2, #32
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	f002 021f 	and.w	r2, r2, #31
 80042c6:	2101      	movs	r1, #1
 80042c8:	fa01 f202 	lsl.w	r2, r1, r2
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1ad      	bne.n	800422e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 8110 	beq.w	8004508 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d079      	beq.n	80043ec <HAL_RCC_OscConfig+0x760>
 80042f8:	2301      	movs	r3, #1
 80042fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004302:	fa93 f3a3 	rbit	r3, r3
 8004306:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800430a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800430e:	fab3 f383 	clz	r3, r3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	4bab      	ldr	r3, [pc, #684]	; (80045c4 <HAL_RCC_OscConfig+0x938>)
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	461a      	mov	r2, r3
 800431e:	2301      	movs	r3, #1
 8004320:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004322:	f7fc fe75 	bl	8001010 <HAL_GetTick>
 8004326:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432a:	e00a      	b.n	8004342 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800432c:	f7fc fe70 	bl	8001010 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d902      	bls.n	8004342 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	f000 bcdb 	b.w	8004cf8 <HAL_RCC_OscConfig+0x106c>
 8004342:	2302      	movs	r3, #2
 8004344:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004348:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800434c:	fa93 f3a3 	rbit	r3, r3
 8004350:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004358:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800435c:	2202      	movs	r2, #2
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004364:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	fa93 f2a3 	rbit	r2, r3
 800436e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004372:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004380:	2202      	movs	r2, #2
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	fa93 f2a3 	rbit	r2, r3
 8004392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004396:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800439a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439c:	4b88      	ldr	r3, [pc, #544]	; (80045c0 <HAL_RCC_OscConfig+0x934>)
 800439e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80043a8:	2102      	movs	r1, #2
 80043aa:	6019      	str	r1, [r3, #0]
 80043ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	fa93 f1a3 	rbit	r1, r3
 80043ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80043c2:	6019      	str	r1, [r3, #0]
  return result;
 80043c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	fab3 f383 	clz	r3, r3
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f003 031f 	and.w	r3, r3, #31
 80043de:	2101      	movs	r1, #1
 80043e0:	fa01 f303 	lsl.w	r3, r1, r3
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0a0      	beq.n	800432c <HAL_RCC_OscConfig+0x6a0>
 80043ea:	e08d      	b.n	8004508 <HAL_RCC_OscConfig+0x87c>
 80043ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80043f4:	2201      	movs	r2, #1
 80043f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	fa93 f2a3 	rbit	r2, r3
 8004406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800440a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800440e:	601a      	str	r2, [r3, #0]
  return result;
 8004410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004414:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004418:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800441a:	fab3 f383 	clz	r3, r3
 800441e:	b2db      	uxtb	r3, r3
 8004420:	461a      	mov	r2, r3
 8004422:	4b68      	ldr	r3, [pc, #416]	; (80045c4 <HAL_RCC_OscConfig+0x938>)
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	461a      	mov	r2, r3
 800442a:	2300      	movs	r3, #0
 800442c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800442e:	f7fc fdef 	bl	8001010 <HAL_GetTick>
 8004432:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004436:	e00a      	b.n	800444e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004438:	f7fc fdea 	bl	8001010 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d902      	bls.n	800444e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	f000 bc55 	b.w	8004cf8 <HAL_RCC_OscConfig+0x106c>
 800444e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004452:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004456:	2202      	movs	r2, #2
 8004458:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800445e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	fa93 f2a3 	rbit	r2, r3
 8004468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800446c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004476:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800447a:	2202      	movs	r2, #2
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004482:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	fa93 f2a3 	rbit	r2, r3
 800448c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004490:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800449e:	2202      	movs	r2, #2
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	fa93 f2a3 	rbit	r2, r3
 80044b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80044b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ba:	4b41      	ldr	r3, [pc, #260]	; (80045c0 <HAL_RCC_OscConfig+0x934>)
 80044bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80044c6:	2102      	movs	r1, #2
 80044c8:	6019      	str	r1, [r3, #0]
 80044ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	fa93 f1a3 	rbit	r1, r3
 80044d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80044e0:	6019      	str	r1, [r3, #0]
  return result;
 80044e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	fab3 f383 	clz	r3, r3
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	2101      	movs	r1, #1
 80044fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004502:	4013      	ands	r3, r2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d197      	bne.n	8004438 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800450c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 81a1 	beq.w	8004860 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800451e:	2300      	movs	r3, #0
 8004520:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004524:	4b26      	ldr	r3, [pc, #152]	; (80045c0 <HAL_RCC_OscConfig+0x934>)
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d116      	bne.n	800455e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004530:	4b23      	ldr	r3, [pc, #140]	; (80045c0 <HAL_RCC_OscConfig+0x934>)
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	4a22      	ldr	r2, [pc, #136]	; (80045c0 <HAL_RCC_OscConfig+0x934>)
 8004536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453a:	61d3      	str	r3, [r2, #28]
 800453c:	4b20      	ldr	r3, [pc, #128]	; (80045c0 <HAL_RCC_OscConfig+0x934>)
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004548:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004552:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004556:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004558:	2301      	movs	r3, #1
 800455a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455e:	4b1a      	ldr	r3, [pc, #104]	; (80045c8 <HAL_RCC_OscConfig+0x93c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004566:	2b00      	cmp	r3, #0
 8004568:	d11a      	bne.n	80045a0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800456a:	4b17      	ldr	r3, [pc, #92]	; (80045c8 <HAL_RCC_OscConfig+0x93c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a16      	ldr	r2, [pc, #88]	; (80045c8 <HAL_RCC_OscConfig+0x93c>)
 8004570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004574:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004576:	f7fc fd4b 	bl	8001010 <HAL_GetTick>
 800457a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457e:	e009      	b.n	8004594 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004580:	f7fc fd46 	bl	8001010 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b64      	cmp	r3, #100	; 0x64
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e3b1      	b.n	8004cf8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004594:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <HAL_RCC_OscConfig+0x93c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0ef      	beq.n	8004580 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d10d      	bne.n	80045cc <HAL_RCC_OscConfig+0x940>
 80045b0:	4b03      	ldr	r3, [pc, #12]	; (80045c0 <HAL_RCC_OscConfig+0x934>)
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	4a02      	ldr	r2, [pc, #8]	; (80045c0 <HAL_RCC_OscConfig+0x934>)
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	6213      	str	r3, [r2, #32]
 80045bc:	e03c      	b.n	8004638 <HAL_RCC_OscConfig+0x9ac>
 80045be:	bf00      	nop
 80045c0:	40021000 	.word	0x40021000
 80045c4:	10908120 	.word	0x10908120
 80045c8:	40007000 	.word	0x40007000
 80045cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10c      	bne.n	80045f6 <HAL_RCC_OscConfig+0x96a>
 80045dc:	4bc1      	ldr	r3, [pc, #772]	; (80048e4 <HAL_RCC_OscConfig+0xc58>)
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	4ac0      	ldr	r2, [pc, #768]	; (80048e4 <HAL_RCC_OscConfig+0xc58>)
 80045e2:	f023 0301 	bic.w	r3, r3, #1
 80045e6:	6213      	str	r3, [r2, #32]
 80045e8:	4bbe      	ldr	r3, [pc, #760]	; (80048e4 <HAL_RCC_OscConfig+0xc58>)
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	4abd      	ldr	r2, [pc, #756]	; (80048e4 <HAL_RCC_OscConfig+0xc58>)
 80045ee:	f023 0304 	bic.w	r3, r3, #4
 80045f2:	6213      	str	r3, [r2, #32]
 80045f4:	e020      	b.n	8004638 <HAL_RCC_OscConfig+0x9ac>
 80045f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	2b05      	cmp	r3, #5
 8004604:	d10c      	bne.n	8004620 <HAL_RCC_OscConfig+0x994>
 8004606:	4bb7      	ldr	r3, [pc, #732]	; (80048e4 <HAL_RCC_OscConfig+0xc58>)
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	4ab6      	ldr	r2, [pc, #728]	; (80048e4 <HAL_RCC_OscConfig+0xc58>)
 800460c:	f043 0304 	orr.w	r3, r3, #4
 8004610:	6213      	str	r3, [r2, #32]
 8004612:	4bb4      	ldr	r3, [pc, #720]	; (80048e4 <HAL_RCC_OscConfig+0xc58>)
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	4ab3      	ldr	r2, [pc, #716]	; (80048e4 <HAL_RCC_OscConfig+0xc58>)
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	6213      	str	r3, [r2, #32]
 800461e:	e00b      	b.n	8004638 <HAL_RCC_OscConfig+0x9ac>
 8004620:	4bb0      	ldr	r3, [pc, #704]	; (80048e4 <HAL_RCC_OscConfig+0xc58>)
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	4aaf      	ldr	r2, [pc, #700]	; (80048e4 <HAL_RCC_OscConfig+0xc58>)
 8004626:	f023 0301 	bic.w	r3, r3, #1
 800462a:	6213      	str	r3, [r2, #32]
 800462c:	4bad      	ldr	r3, [pc, #692]	; (80048e4 <HAL_RCC_OscConfig+0xc58>)
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	4aac      	ldr	r2, [pc, #688]	; (80048e4 <HAL_RCC_OscConfig+0xc58>)
 8004632:	f023 0304 	bic.w	r3, r3, #4
 8004636:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800463c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 8081 	beq.w	800474c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800464a:	f7fc fce1 	bl	8001010 <HAL_GetTick>
 800464e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004652:	e00b      	b.n	800466c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004654:	f7fc fcdc 	bl	8001010 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	f241 3288 	movw	r2, #5000	; 0x1388
 8004664:	4293      	cmp	r3, r2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e345      	b.n	8004cf8 <HAL_RCC_OscConfig+0x106c>
 800466c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004670:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004674:	2202      	movs	r2, #2
 8004676:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	fa93 f2a3 	rbit	r2, r3
 8004686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004694:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004698:	2202      	movs	r2, #2
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	fa93 f2a3 	rbit	r2, r3
 80046aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80046b2:	601a      	str	r2, [r3, #0]
  return result;
 80046b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80046bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046be:	fab3 f383 	clz	r3, r3
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	f043 0302 	orr.w	r3, r3, #2
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d102      	bne.n	80046d8 <HAL_RCC_OscConfig+0xa4c>
 80046d2:	4b84      	ldr	r3, [pc, #528]	; (80048e4 <HAL_RCC_OscConfig+0xc58>)
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	e013      	b.n	8004700 <HAL_RCC_OscConfig+0xa74>
 80046d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046dc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80046e0:	2202      	movs	r2, #2
 80046e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	fa93 f2a3 	rbit	r2, r3
 80046f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	4b79      	ldr	r3, [pc, #484]	; (80048e4 <HAL_RCC_OscConfig+0xc58>)
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004704:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004708:	2102      	movs	r1, #2
 800470a:	6011      	str	r1, [r2, #0]
 800470c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004710:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	fa92 f1a2 	rbit	r1, r2
 800471a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800471e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004722:	6011      	str	r1, [r2, #0]
  return result;
 8004724:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004728:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800472c:	6812      	ldr	r2, [r2, #0]
 800472e:	fab2 f282 	clz	r2, r2
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	f002 021f 	and.w	r2, r2, #31
 800473e:	2101      	movs	r1, #1
 8004740:	fa01 f202 	lsl.w	r2, r1, r2
 8004744:	4013      	ands	r3, r2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d084      	beq.n	8004654 <HAL_RCC_OscConfig+0x9c8>
 800474a:	e07f      	b.n	800484c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800474c:	f7fc fc60 	bl	8001010 <HAL_GetTick>
 8004750:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004754:	e00b      	b.n	800476e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004756:	f7fc fc5b 	bl	8001010 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	f241 3288 	movw	r2, #5000	; 0x1388
 8004766:	4293      	cmp	r3, r2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e2c4      	b.n	8004cf8 <HAL_RCC_OscConfig+0x106c>
 800476e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004772:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004776:	2202      	movs	r2, #2
 8004778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800477e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	fa93 f2a3 	rbit	r2, r3
 8004788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800478c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004796:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800479a:	2202      	movs	r2, #2
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	fa93 f2a3 	rbit	r2, r3
 80047ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80047b4:	601a      	str	r2, [r3, #0]
  return result;
 80047b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ba:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80047be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c0:	fab3 f383 	clz	r3, r3
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	f043 0302 	orr.w	r3, r3, #2
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d102      	bne.n	80047da <HAL_RCC_OscConfig+0xb4e>
 80047d4:	4b43      	ldr	r3, [pc, #268]	; (80048e4 <HAL_RCC_OscConfig+0xc58>)
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	e013      	b.n	8004802 <HAL_RCC_OscConfig+0xb76>
 80047da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047de:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80047e2:	2202      	movs	r2, #2
 80047e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	fa93 f2a3 	rbit	r2, r3
 80047f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047f8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	4b39      	ldr	r3, [pc, #228]	; (80048e4 <HAL_RCC_OscConfig+0xc58>)
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004806:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800480a:	2102      	movs	r1, #2
 800480c:	6011      	str	r1, [r2, #0]
 800480e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004812:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	fa92 f1a2 	rbit	r1, r2
 800481c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004820:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004824:	6011      	str	r1, [r2, #0]
  return result;
 8004826:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800482a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	fab2 f282 	clz	r2, r2
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	f002 021f 	and.w	r2, r2, #31
 8004840:	2101      	movs	r1, #1
 8004842:	fa01 f202 	lsl.w	r2, r1, r2
 8004846:	4013      	ands	r3, r2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d184      	bne.n	8004756 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800484c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004850:	2b01      	cmp	r3, #1
 8004852:	d105      	bne.n	8004860 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004854:	4b23      	ldr	r3, [pc, #140]	; (80048e4 <HAL_RCC_OscConfig+0xc58>)
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	4a22      	ldr	r2, [pc, #136]	; (80048e4 <HAL_RCC_OscConfig+0xc58>)
 800485a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800485e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004864:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8242 	beq.w	8004cf6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004872:	4b1c      	ldr	r3, [pc, #112]	; (80048e4 <HAL_RCC_OscConfig+0xc58>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f003 030c 	and.w	r3, r3, #12
 800487a:	2b08      	cmp	r3, #8
 800487c:	f000 8213 	beq.w	8004ca6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004884:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	2b02      	cmp	r3, #2
 800488e:	f040 8162 	bne.w	8004b56 <HAL_RCC_OscConfig+0xeca>
 8004892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004896:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800489a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800489e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	fa93 f2a3 	rbit	r2, r3
 80048ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80048b6:	601a      	str	r2, [r3, #0]
  return result;
 80048b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048bc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80048c0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c2:	fab3 f383 	clz	r3, r3
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80048cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	461a      	mov	r2, r3
 80048d4:	2300      	movs	r3, #0
 80048d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d8:	f7fc fb9a 	bl	8001010 <HAL_GetTick>
 80048dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e0:	e00c      	b.n	80048fc <HAL_RCC_OscConfig+0xc70>
 80048e2:	bf00      	nop
 80048e4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e8:	f7fc fb92 	bl	8001010 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e1fd      	b.n	8004cf8 <HAL_RCC_OscConfig+0x106c>
 80048fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004900:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004904:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800490e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	fa93 f2a3 	rbit	r2, r3
 8004918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800491c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004920:	601a      	str	r2, [r3, #0]
  return result;
 8004922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004926:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800492a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800492c:	fab3 f383 	clz	r3, r3
 8004930:	b2db      	uxtb	r3, r3
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	b2db      	uxtb	r3, r3
 8004936:	f043 0301 	orr.w	r3, r3, #1
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b01      	cmp	r3, #1
 800493e:	d102      	bne.n	8004946 <HAL_RCC_OscConfig+0xcba>
 8004940:	4bb0      	ldr	r3, [pc, #704]	; (8004c04 <HAL_RCC_OscConfig+0xf78>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	e027      	b.n	8004996 <HAL_RCC_OscConfig+0xd0a>
 8004946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800494a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800494e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004958:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	fa93 f2a3 	rbit	r2, r3
 8004962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004966:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004970:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004974:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800497e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	fa93 f2a3 	rbit	r2, r3
 8004988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800498c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	4b9c      	ldr	r3, [pc, #624]	; (8004c04 <HAL_RCC_OscConfig+0xf78>)
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800499a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800499e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80049a2:	6011      	str	r1, [r2, #0]
 80049a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049a8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80049ac:	6812      	ldr	r2, [r2, #0]
 80049ae:	fa92 f1a2 	rbit	r1, r2
 80049b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049b6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80049ba:	6011      	str	r1, [r2, #0]
  return result;
 80049bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049c0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	fab2 f282 	clz	r2, r2
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	f042 0220 	orr.w	r2, r2, #32
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	f002 021f 	and.w	r2, r2, #31
 80049d6:	2101      	movs	r1, #1
 80049d8:	fa01 f202 	lsl.w	r2, r1, r2
 80049dc:	4013      	ands	r3, r2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d182      	bne.n	80048e8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049e2:	4b88      	ldr	r3, [pc, #544]	; (8004c04 <HAL_RCC_OscConfig+0xf78>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80049f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	430b      	orrs	r3, r1
 8004a04:	497f      	ldr	r1, [pc, #508]	; (8004c04 <HAL_RCC_OscConfig+0xf78>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	604b      	str	r3, [r1, #4]
 8004a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a0e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004a12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a1c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	fa93 f2a3 	rbit	r2, r3
 8004a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a2a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004a2e:	601a      	str	r2, [r3, #0]
  return result;
 8004a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a34:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004a38:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a3a:	fab3 f383 	clz	r3, r3
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a50:	f7fc fade 	bl	8001010 <HAL_GetTick>
 8004a54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a58:	e009      	b.n	8004a6e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a5a:	f7fc fad9 	bl	8001010 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e144      	b.n	8004cf8 <HAL_RCC_OscConfig+0x106c>
 8004a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a72:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004a76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a80:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	fa93 f2a3 	rbit	r2, r3
 8004a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004a92:	601a      	str	r2, [r3, #0]
  return result;
 8004a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a98:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004a9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a9e:	fab3 f383 	clz	r3, r3
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	095b      	lsrs	r3, r3, #5
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	f043 0301 	orr.w	r3, r3, #1
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d102      	bne.n	8004ab8 <HAL_RCC_OscConfig+0xe2c>
 8004ab2:	4b54      	ldr	r3, [pc, #336]	; (8004c04 <HAL_RCC_OscConfig+0xf78>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	e027      	b.n	8004b08 <HAL_RCC_OscConfig+0xe7c>
 8004ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004abc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004ac0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ac4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	fa93 f2a3 	rbit	r2, r3
 8004ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004ae6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	fa93 f2a3 	rbit	r2, r3
 8004afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004afe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	4b3f      	ldr	r3, [pc, #252]	; (8004c04 <HAL_RCC_OscConfig+0xf78>)
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b0c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004b10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b14:	6011      	str	r1, [r2, #0]
 8004b16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b1a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	fa92 f1a2 	rbit	r1, r2
 8004b24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b28:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004b2c:	6011      	str	r1, [r2, #0]
  return result;
 8004b2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b32:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004b36:	6812      	ldr	r2, [r2, #0]
 8004b38:	fab2 f282 	clz	r2, r2
 8004b3c:	b2d2      	uxtb	r2, r2
 8004b3e:	f042 0220 	orr.w	r2, r2, #32
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	f002 021f 	and.w	r2, r2, #31
 8004b48:	2101      	movs	r1, #1
 8004b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d082      	beq.n	8004a5a <HAL_RCC_OscConfig+0xdce>
 8004b54:	e0cf      	b.n	8004cf6 <HAL_RCC_OscConfig+0x106a>
 8004b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b5a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004b5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b68:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	fa93 f2a3 	rbit	r2, r3
 8004b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b76:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004b7a:	601a      	str	r2, [r3, #0]
  return result;
 8004b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b80:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004b84:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b86:	fab3 f383 	clz	r3, r3
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	461a      	mov	r2, r3
 8004b98:	2300      	movs	r3, #0
 8004b9a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fc fa38 	bl	8001010 <HAL_GetTick>
 8004ba0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ba4:	e009      	b.n	8004bba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ba6:	f7fc fa33 	bl	8001010 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e09e      	b.n	8004cf8 <HAL_RCC_OscConfig+0x106c>
 8004bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bbe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004bc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bcc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	fa93 f2a3 	rbit	r2, r3
 8004bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bda:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004bde:	601a      	str	r2, [r3, #0]
  return result;
 8004be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004be8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bea:	fab3 f383 	clz	r3, r3
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	095b      	lsrs	r3, r3, #5
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f043 0301 	orr.w	r3, r3, #1
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d104      	bne.n	8004c08 <HAL_RCC_OscConfig+0xf7c>
 8004bfe:	4b01      	ldr	r3, [pc, #4]	; (8004c04 <HAL_RCC_OscConfig+0xf78>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	e029      	b.n	8004c58 <HAL_RCC_OscConfig+0xfcc>
 8004c04:	40021000 	.word	0x40021000
 8004c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c0c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004c10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c1a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	fa93 f2a3 	rbit	r2, r3
 8004c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c28:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c32:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004c36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c40:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	fa93 f2a3 	rbit	r2, r3
 8004c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c4e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	4b2b      	ldr	r3, [pc, #172]	; (8004d04 <HAL_RCC_OscConfig+0x1078>)
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c5c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004c60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c64:	6011      	str	r1, [r2, #0]
 8004c66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c6a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	fa92 f1a2 	rbit	r1, r2
 8004c74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c78:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004c7c:	6011      	str	r1, [r2, #0]
  return result;
 8004c7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c82:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	fab2 f282 	clz	r2, r2
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	f042 0220 	orr.w	r2, r2, #32
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	f002 021f 	and.w	r2, r2, #31
 8004c98:	2101      	movs	r1, #1
 8004c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d180      	bne.n	8004ba6 <HAL_RCC_OscConfig+0xf1a>
 8004ca4:	e027      	b.n	8004cf6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004caa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d101      	bne.n	8004cba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e01e      	b.n	8004cf8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004cba:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <HAL_RCC_OscConfig+0x1078>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004cc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004cc6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d10b      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004cda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004cde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ce6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d001      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40021000 	.word	0x40021000

08004d08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b09e      	sub	sp, #120	; 0x78
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e162      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d20:	4b90      	ldr	r3, [pc, #576]	; (8004f64 <HAL_RCC_ClockConfig+0x25c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d910      	bls.n	8004d50 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2e:	4b8d      	ldr	r3, [pc, #564]	; (8004f64 <HAL_RCC_ClockConfig+0x25c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f023 0207 	bic.w	r2, r3, #7
 8004d36:	498b      	ldr	r1, [pc, #556]	; (8004f64 <HAL_RCC_ClockConfig+0x25c>)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3e:	4b89      	ldr	r3, [pc, #548]	; (8004f64 <HAL_RCC_ClockConfig+0x25c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e14a      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d008      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d5c:	4b82      	ldr	r3, [pc, #520]	; (8004f68 <HAL_RCC_ClockConfig+0x260>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	497f      	ldr	r1, [pc, #508]	; (8004f68 <HAL_RCC_ClockConfig+0x260>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 80dc 	beq.w	8004f34 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d13c      	bne.n	8004dfe <HAL_RCC_ClockConfig+0xf6>
 8004d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d88:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d8c:	fa93 f3a3 	rbit	r3, r3
 8004d90:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d94:	fab3 f383 	clz	r3, r3
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	f043 0301 	orr.w	r3, r3, #1
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d102      	bne.n	8004dae <HAL_RCC_ClockConfig+0xa6>
 8004da8:	4b6f      	ldr	r3, [pc, #444]	; (8004f68 <HAL_RCC_ClockConfig+0x260>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	e00f      	b.n	8004dce <HAL_RCC_ClockConfig+0xc6>
 8004dae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004db2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004db6:	fa93 f3a3 	rbit	r3, r3
 8004dba:	667b      	str	r3, [r7, #100]	; 0x64
 8004dbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dc0:	663b      	str	r3, [r7, #96]	; 0x60
 8004dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dc4:	fa93 f3a3 	rbit	r3, r3
 8004dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dca:	4b67      	ldr	r3, [pc, #412]	; (8004f68 <HAL_RCC_ClockConfig+0x260>)
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004dd2:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dd6:	fa92 f2a2 	rbit	r2, r2
 8004dda:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004ddc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004dde:	fab2 f282 	clz	r2, r2
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	f042 0220 	orr.w	r2, r2, #32
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	f002 021f 	and.w	r2, r2, #31
 8004dee:	2101      	movs	r1, #1
 8004df0:	fa01 f202 	lsl.w	r2, r1, r2
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d17b      	bne.n	8004ef2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e0f3      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d13c      	bne.n	8004e80 <HAL_RCC_ClockConfig+0x178>
 8004e06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e0e:	fa93 f3a3 	rbit	r3, r3
 8004e12:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e16:	fab3 f383 	clz	r3, r3
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	095b      	lsrs	r3, r3, #5
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d102      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x128>
 8004e2a:	4b4f      	ldr	r3, [pc, #316]	; (8004f68 <HAL_RCC_ClockConfig+0x260>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	e00f      	b.n	8004e50 <HAL_RCC_ClockConfig+0x148>
 8004e30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e34:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e38:	fa93 f3a3 	rbit	r3, r3
 8004e3c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e42:	643b      	str	r3, [r7, #64]	; 0x40
 8004e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e46:	fa93 f3a3 	rbit	r3, r3
 8004e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e4c:	4b46      	ldr	r3, [pc, #280]	; (8004f68 <HAL_RCC_ClockConfig+0x260>)
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e54:	63ba      	str	r2, [r7, #56]	; 0x38
 8004e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e58:	fa92 f2a2 	rbit	r2, r2
 8004e5c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e60:	fab2 f282 	clz	r2, r2
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	f042 0220 	orr.w	r2, r2, #32
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	f002 021f 	and.w	r2, r2, #31
 8004e70:	2101      	movs	r1, #1
 8004e72:	fa01 f202 	lsl.w	r2, r1, r2
 8004e76:	4013      	ands	r3, r2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d13a      	bne.n	8004ef2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e0b2      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x2de>
 8004e80:	2302      	movs	r3, #2
 8004e82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e86:	fa93 f3a3 	rbit	r3, r3
 8004e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e8e:	fab3 f383 	clz	r3, r3
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d102      	bne.n	8004ea8 <HAL_RCC_ClockConfig+0x1a0>
 8004ea2:	4b31      	ldr	r3, [pc, #196]	; (8004f68 <HAL_RCC_ClockConfig+0x260>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	e00d      	b.n	8004ec4 <HAL_RCC_ClockConfig+0x1bc>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	fa93 f3a3 	rbit	r3, r3
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	623b      	str	r3, [r7, #32]
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	fa93 f3a3 	rbit	r3, r3
 8004ebe:	61fb      	str	r3, [r7, #28]
 8004ec0:	4b29      	ldr	r3, [pc, #164]	; (8004f68 <HAL_RCC_ClockConfig+0x260>)
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	61ba      	str	r2, [r7, #24]
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	fa92 f2a2 	rbit	r2, r2
 8004ece:	617a      	str	r2, [r7, #20]
  return result;
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	fab2 f282 	clz	r2, r2
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	f042 0220 	orr.w	r2, r2, #32
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	f002 021f 	and.w	r2, r2, #31
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e079      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ef2:	4b1d      	ldr	r3, [pc, #116]	; (8004f68 <HAL_RCC_ClockConfig+0x260>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f023 0203 	bic.w	r2, r3, #3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	491a      	ldr	r1, [pc, #104]	; (8004f68 <HAL_RCC_ClockConfig+0x260>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f04:	f7fc f884 	bl	8001010 <HAL_GetTick>
 8004f08:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0a:	e00a      	b.n	8004f22 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f0c:	f7fc f880 	bl	8001010 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e061      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f22:	4b11      	ldr	r3, [pc, #68]	; (8004f68 <HAL_RCC_ClockConfig+0x260>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f003 020c 	and.w	r2, r3, #12
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d1eb      	bne.n	8004f0c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f34:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <HAL_RCC_ClockConfig+0x25c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d214      	bcs.n	8004f6c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f42:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <HAL_RCC_ClockConfig+0x25c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f023 0207 	bic.w	r2, r3, #7
 8004f4a:	4906      	ldr	r1, [pc, #24]	; (8004f64 <HAL_RCC_ClockConfig+0x25c>)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f52:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <HAL_RCC_ClockConfig+0x25c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d005      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e040      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x2de>
 8004f64:	40022000 	.word	0x40022000
 8004f68:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f78:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <HAL_RCC_ClockConfig+0x2e8>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	491a      	ldr	r1, [pc, #104]	; (8004ff0 <HAL_RCC_ClockConfig+0x2e8>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d009      	beq.n	8004faa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f96:	4b16      	ldr	r3, [pc, #88]	; (8004ff0 <HAL_RCC_ClockConfig+0x2e8>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	4912      	ldr	r1, [pc, #72]	; (8004ff0 <HAL_RCC_ClockConfig+0x2e8>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004faa:	f000 f829 	bl	8005000 <HAL_RCC_GetSysClockFreq>
 8004fae:	4601      	mov	r1, r0
 8004fb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ff0 <HAL_RCC_ClockConfig+0x2e8>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fb8:	22f0      	movs	r2, #240	; 0xf0
 8004fba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	fa92 f2a2 	rbit	r2, r2
 8004fc2:	60fa      	str	r2, [r7, #12]
  return result;
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	fab2 f282 	clz	r2, r2
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	40d3      	lsrs	r3, r2
 8004fce:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <HAL_RCC_ClockConfig+0x2ec>)
 8004fd0:	5cd3      	ldrb	r3, [r2, r3]
 8004fd2:	fa21 f303 	lsr.w	r3, r1, r3
 8004fd6:	4a08      	ldr	r2, [pc, #32]	; (8004ff8 <HAL_RCC_ClockConfig+0x2f0>)
 8004fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004fda:	4b08      	ldr	r3, [pc, #32]	; (8004ffc <HAL_RCC_ClockConfig+0x2f4>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f009 ff42 	bl	800ee68 <HAL_InitTick>
  
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3778      	adds	r7, #120	; 0x78
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	080106b0 	.word	0x080106b0
 8004ff8:	20000044 	.word	0x20000044
 8004ffc:	20000000 	.word	0x20000000

08005000 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005000:	b480      	push	{r7}
 8005002:	b08b      	sub	sp, #44	; 0x2c
 8005004:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
 800500a:	2300      	movs	r3, #0
 800500c:	61bb      	str	r3, [r7, #24]
 800500e:	2300      	movs	r3, #0
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
 8005012:	2300      	movs	r3, #0
 8005014:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800501a:	4b29      	ldr	r3, [pc, #164]	; (80050c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f003 030c 	and.w	r3, r3, #12
 8005026:	2b04      	cmp	r3, #4
 8005028:	d002      	beq.n	8005030 <HAL_RCC_GetSysClockFreq+0x30>
 800502a:	2b08      	cmp	r3, #8
 800502c:	d003      	beq.n	8005036 <HAL_RCC_GetSysClockFreq+0x36>
 800502e:	e03c      	b.n	80050aa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005030:	4b24      	ldr	r3, [pc, #144]	; (80050c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005032:	623b      	str	r3, [r7, #32]
      break;
 8005034:	e03c      	b.n	80050b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800503c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005040:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	fa92 f2a2 	rbit	r2, r2
 8005048:	607a      	str	r2, [r7, #4]
  return result;
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	fab2 f282 	clz	r2, r2
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	40d3      	lsrs	r3, r2
 8005054:	4a1c      	ldr	r2, [pc, #112]	; (80050c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005056:	5cd3      	ldrb	r3, [r2, r3]
 8005058:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800505a:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	220f      	movs	r2, #15
 8005064:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	fa92 f2a2 	rbit	r2, r2
 800506c:	60fa      	str	r2, [r7, #12]
  return result;
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	fab2 f282 	clz	r2, r2
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	40d3      	lsrs	r3, r2
 8005078:	4a14      	ldr	r2, [pc, #80]	; (80050cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800507a:	5cd3      	ldrb	r3, [r2, r3]
 800507c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d008      	beq.n	800509a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005088:	4a0e      	ldr	r2, [pc, #56]	; (80050c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	fb02 f303 	mul.w	r3, r2, r3
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
 8005098:	e004      	b.n	80050a4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	4a0c      	ldr	r2, [pc, #48]	; (80050d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800509e:	fb02 f303 	mul.w	r3, r2, r3
 80050a2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	623b      	str	r3, [r7, #32]
      break;
 80050a8:	e002      	b.n	80050b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050aa:	4b06      	ldr	r3, [pc, #24]	; (80050c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80050ac:	623b      	str	r3, [r7, #32]
      break;
 80050ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050b0:	6a3b      	ldr	r3, [r7, #32]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	372c      	adds	r7, #44	; 0x2c
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40021000 	.word	0x40021000
 80050c4:	007a1200 	.word	0x007a1200
 80050c8:	08010684 	.word	0x08010684
 80050cc:	08010694 	.word	0x08010694
 80050d0:	003d0900 	.word	0x003d0900

080050d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050d8:	4b03      	ldr	r3, [pc, #12]	; (80050e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80050da:	681b      	ldr	r3, [r3, #0]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	20000044 	.word	0x20000044

080050ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80050f2:	f7ff ffef 	bl	80050d4 <HAL_RCC_GetHCLKFreq>
 80050f6:	4601      	mov	r1, r0
 80050f8:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005100:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005104:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	fa92 f2a2 	rbit	r2, r2
 800510c:	603a      	str	r2, [r7, #0]
  return result;
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	fab2 f282 	clz	r2, r2
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	40d3      	lsrs	r3, r2
 8005118:	4a04      	ldr	r2, [pc, #16]	; (800512c <HAL_RCC_GetPCLK1Freq+0x40>)
 800511a:	5cd3      	ldrb	r3, [r2, r3]
 800511c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005120:	4618      	mov	r0, r3
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40021000 	.word	0x40021000
 800512c:	080106c0 	.word	0x080106c0

08005130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005136:	f7ff ffcd 	bl	80050d4 <HAL_RCC_GetHCLKFreq>
 800513a:	4601      	mov	r1, r0
 800513c:	4b0b      	ldr	r3, [pc, #44]	; (800516c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005144:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005148:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	fa92 f2a2 	rbit	r2, r2
 8005150:	603a      	str	r2, [r7, #0]
  return result;
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	fab2 f282 	clz	r2, r2
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	40d3      	lsrs	r3, r2
 800515c:	4a04      	ldr	r2, [pc, #16]	; (8005170 <HAL_RCC_GetPCLK2Freq+0x40>)
 800515e:	5cd3      	ldrb	r3, [r2, r3]
 8005160:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40021000 	.word	0x40021000
 8005170:	080106c0 	.word	0x080106c0

08005174 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	220f      	movs	r2, #15
 8005182:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005184:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <HAL_RCC_GetClockConfig+0x5c>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f003 0203 	and.w	r2, r3, #3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005190:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <HAL_RCC_GetClockConfig+0x5c>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800519c:	4b0c      	ldr	r3, [pc, #48]	; (80051d0 <HAL_RCC_GetClockConfig+0x5c>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80051a8:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <HAL_RCC_GetClockConfig+0x5c>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	08db      	lsrs	r3, r3, #3
 80051ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80051b6:	4b07      	ldr	r3, [pc, #28]	; (80051d4 <HAL_RCC_GetClockConfig+0x60>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0207 	and.w	r2, r3, #7
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	601a      	str	r2, [r3, #0]
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40021000 	.word	0x40021000
 80051d4:	40022000 	.word	0x40022000

080051d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b092      	sub	sp, #72	; 0x48
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80051e8:	2300      	movs	r3, #0
 80051ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 80d4 	beq.w	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051fc:	4b4e      	ldr	r3, [pc, #312]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10e      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005208:	4b4b      	ldr	r3, [pc, #300]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	4a4a      	ldr	r2, [pc, #296]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800520e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005212:	61d3      	str	r3, [r2, #28]
 8005214:	4b48      	ldr	r3, [pc, #288]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800521c:	60bb      	str	r3, [r7, #8]
 800521e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005220:	2301      	movs	r3, #1
 8005222:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005226:	4b45      	ldr	r3, [pc, #276]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522e:	2b00      	cmp	r3, #0
 8005230:	d118      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005232:	4b42      	ldr	r3, [pc, #264]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a41      	ldr	r2, [pc, #260]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800523c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800523e:	f7fb fee7 	bl	8001010 <HAL_GetTick>
 8005242:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005244:	e008      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005246:	f7fb fee3 	bl	8001010 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b64      	cmp	r3, #100	; 0x64
 8005252:	d901      	bls.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e169      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005258:	4b38      	ldr	r3, [pc, #224]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0f0      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005264:	4b34      	ldr	r3, [pc, #208]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800526e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8084 	beq.w	800537e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800527e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005280:	429a      	cmp	r2, r3
 8005282:	d07c      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005284:	4b2c      	ldr	r3, [pc, #176]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800528e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005292:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	fa93 f3a3 	rbit	r3, r3
 800529a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800529c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800529e:	fab3 f383 	clz	r3, r3
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	461a      	mov	r2, r3
 80052a6:	4b26      	ldr	r3, [pc, #152]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	461a      	mov	r2, r3
 80052ae:	2301      	movs	r3, #1
 80052b0:	6013      	str	r3, [r2, #0]
 80052b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	fa93 f3a3 	rbit	r3, r3
 80052be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80052c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052c2:	fab3 f383 	clz	r3, r3
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	4b1d      	ldr	r3, [pc, #116]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052cc:	4413      	add	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	461a      	mov	r2, r3
 80052d2:	2300      	movs	r3, #0
 80052d4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052d6:	4a18      	ldr	r2, [pc, #96]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052da:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d04b      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e6:	f7fb fe93 	bl	8001010 <HAL_GetTick>
 80052ea:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ec:	e00a      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ee:	f7fb fe8f 	bl	8001010 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d901      	bls.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e113      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005304:	2302      	movs	r3, #2
 8005306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530a:	fa93 f3a3 	rbit	r3, r3
 800530e:	627b      	str	r3, [r7, #36]	; 0x24
 8005310:	2302      	movs	r3, #2
 8005312:	623b      	str	r3, [r7, #32]
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	fa93 f3a3 	rbit	r3, r3
 800531a:	61fb      	str	r3, [r7, #28]
  return result;
 800531c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800531e:	fab3 f383 	clz	r3, r3
 8005322:	b2db      	uxtb	r3, r3
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	b2db      	uxtb	r3, r3
 8005328:	f043 0302 	orr.w	r3, r3, #2
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d108      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005332:	4b01      	ldr	r3, [pc, #4]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	e00d      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005338:	40021000 	.word	0x40021000
 800533c:	40007000 	.word	0x40007000
 8005340:	10908100 	.word	0x10908100
 8005344:	2302      	movs	r3, #2
 8005346:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	fa93 f3a3 	rbit	r3, r3
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	4b78      	ldr	r3, [pc, #480]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	2202      	movs	r2, #2
 8005356:	613a      	str	r2, [r7, #16]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	fa92 f2a2 	rbit	r2, r2
 800535e:	60fa      	str	r2, [r7, #12]
  return result;
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	fab2 f282 	clz	r2, r2
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800536c:	b2d2      	uxtb	r2, r2
 800536e:	f002 021f 	and.w	r2, r2, #31
 8005372:	2101      	movs	r1, #1
 8005374:	fa01 f202 	lsl.w	r2, r1, r2
 8005378:	4013      	ands	r3, r2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0b7      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800537e:	4b6d      	ldr	r3, [pc, #436]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	496a      	ldr	r1, [pc, #424]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800538c:	4313      	orrs	r3, r2
 800538e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005390:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005394:	2b01      	cmp	r3, #1
 8005396:	d105      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005398:	4b66      	ldr	r3, [pc, #408]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	4a65      	ldr	r2, [pc, #404]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800539e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d008      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053b0:	4b60      	ldr	r3, [pc, #384]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b4:	f023 0203 	bic.w	r2, r3, #3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	495d      	ldr	r1, [pc, #372]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d008      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053ce:	4b59      	ldr	r3, [pc, #356]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	4956      	ldr	r1, [pc, #344]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d008      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053ec:	4b51      	ldr	r3, [pc, #324]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	494e      	ldr	r1, [pc, #312]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b00      	cmp	r3, #0
 8005408:	d008      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800540a:	4b4a      	ldr	r3, [pc, #296]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800540c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540e:	f023 0210 	bic.w	r2, r3, #16
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	4947      	ldr	r1, [pc, #284]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005418:	4313      	orrs	r3, r2
 800541a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d008      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005428:	4b42      	ldr	r3, [pc, #264]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	493f      	ldr	r1, [pc, #252]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005436:	4313      	orrs	r3, r2
 8005438:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d008      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005446:	4b3b      	ldr	r3, [pc, #236]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544a:	f023 0220 	bic.w	r2, r3, #32
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	4938      	ldr	r1, [pc, #224]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005454:	4313      	orrs	r3, r2
 8005456:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b00      	cmp	r3, #0
 8005462:	d008      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005464:	4b33      	ldr	r3, [pc, #204]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005468:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	4930      	ldr	r1, [pc, #192]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005472:	4313      	orrs	r3, r2
 8005474:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b00      	cmp	r3, #0
 8005480:	d008      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005482:	4b2c      	ldr	r3, [pc, #176]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	4929      	ldr	r1, [pc, #164]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005490:	4313      	orrs	r3, r2
 8005492:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800549c:	2b00      	cmp	r3, #0
 800549e:	d008      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80054a0:	4b24      	ldr	r3, [pc, #144]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	4921      	ldr	r1, [pc, #132]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d008      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80054be:	4b1d      	ldr	r3, [pc, #116]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	491a      	ldr	r1, [pc, #104]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d008      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80054dc:	4b15      	ldr	r3, [pc, #84]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e8:	4912      	ldr	r1, [pc, #72]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d008      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80054fa:	4b0e      	ldr	r3, [pc, #56]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	490b      	ldr	r1, [pc, #44]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005508:	4313      	orrs	r3, r2
 800550a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d008      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005518:	4b06      	ldr	r3, [pc, #24]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005524:	4903      	ldr	r1, [pc, #12]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005526:	4313      	orrs	r3, r2
 8005528:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3748      	adds	r7, #72	; 0x48
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40021000 	.word	0x40021000

08005538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e049      	b.n	80055de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f00a f80c 	bl	800f57c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2202      	movs	r2, #2
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3304      	adds	r3, #4
 8005574:	4619      	mov	r1, r3
 8005576:	4610      	mov	r0, r2
 8005578:	f000 f9e8 	bl	800594c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d001      	beq.n	8005600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e04a      	b.n	8005696 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2202      	movs	r2, #2
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0201 	orr.w	r2, r2, #1
 8005616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a21      	ldr	r2, [pc, #132]	; (80056a4 <HAL_TIM_Base_Start_IT+0xbc>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d018      	beq.n	8005654 <HAL_TIM_Base_Start_IT+0x6c>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800562a:	d013      	beq.n	8005654 <HAL_TIM_Base_Start_IT+0x6c>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1d      	ldr	r2, [pc, #116]	; (80056a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00e      	beq.n	8005654 <HAL_TIM_Base_Start_IT+0x6c>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1c      	ldr	r2, [pc, #112]	; (80056ac <HAL_TIM_Base_Start_IT+0xc4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d009      	beq.n	8005654 <HAL_TIM_Base_Start_IT+0x6c>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1a      	ldr	r2, [pc, #104]	; (80056b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d004      	beq.n	8005654 <HAL_TIM_Base_Start_IT+0x6c>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a19      	ldr	r2, [pc, #100]	; (80056b4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d115      	bne.n	8005680 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	4b17      	ldr	r3, [pc, #92]	; (80056b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800565c:	4013      	ands	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b06      	cmp	r3, #6
 8005664:	d015      	beq.n	8005692 <HAL_TIM_Base_Start_IT+0xaa>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800566c:	d011      	beq.n	8005692 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f042 0201 	orr.w	r2, r2, #1
 800567c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800567e:	e008      	b.n	8005692 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0201 	orr.w	r2, r2, #1
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	e000      	b.n	8005694 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005692:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	40012c00 	.word	0x40012c00
 80056a8:	40000400 	.word	0x40000400
 80056ac:	40000800 	.word	0x40000800
 80056b0:	40013400 	.word	0x40013400
 80056b4:	40014000 	.word	0x40014000
 80056b8:	00010007 	.word	0x00010007

080056bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d122      	bne.n	8005718 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d11b      	bne.n	8005718 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f06f 0202 	mvn.w	r2, #2
 80056e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f905 	bl	800590e <HAL_TIM_IC_CaptureCallback>
 8005704:	e005      	b.n	8005712 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f8f7 	bl	80058fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f908 	bl	8005922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b04      	cmp	r3, #4
 8005724:	d122      	bne.n	800576c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b04      	cmp	r3, #4
 8005732:	d11b      	bne.n	800576c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f06f 0204 	mvn.w	r2, #4
 800573c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2202      	movs	r2, #2
 8005742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f8db 	bl	800590e <HAL_TIM_IC_CaptureCallback>
 8005758:	e005      	b.n	8005766 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f8cd 	bl	80058fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f8de 	bl	8005922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0308 	and.w	r3, r3, #8
 8005776:	2b08      	cmp	r3, #8
 8005778:	d122      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f003 0308 	and.w	r3, r3, #8
 8005784:	2b08      	cmp	r3, #8
 8005786:	d11b      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f06f 0208 	mvn.w	r2, #8
 8005790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2204      	movs	r2, #4
 8005796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f8b1 	bl	800590e <HAL_TIM_IC_CaptureCallback>
 80057ac:	e005      	b.n	80057ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f8a3 	bl	80058fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f8b4 	bl	8005922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f003 0310 	and.w	r3, r3, #16
 80057ca:	2b10      	cmp	r3, #16
 80057cc:	d122      	bne.n	8005814 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f003 0310 	and.w	r3, r3, #16
 80057d8:	2b10      	cmp	r3, #16
 80057da:	d11b      	bne.n	8005814 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f06f 0210 	mvn.w	r2, #16
 80057e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2208      	movs	r2, #8
 80057ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f887 	bl	800590e <HAL_TIM_IC_CaptureCallback>
 8005800:	e005      	b.n	800580e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f879 	bl	80058fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f88a 	bl	8005922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b01      	cmp	r3, #1
 8005820:	d10e      	bne.n	8005840 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b01      	cmp	r3, #1
 800582e:	d107      	bne.n	8005840 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f06f 0201 	mvn.w	r2, #1
 8005838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f008 fc50 	bl	800e0e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584a:	2b80      	cmp	r3, #128	; 0x80
 800584c:	d10e      	bne.n	800586c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005858:	2b80      	cmp	r3, #128	; 0x80
 800585a:	d107      	bne.n	800586c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f98a 	bl	8005b80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800587a:	d10e      	bne.n	800589a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005886:	2b80      	cmp	r3, #128	; 0x80
 8005888:	d107      	bne.n	800589a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f97d 	bl	8005b94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a4:	2b40      	cmp	r3, #64	; 0x40
 80058a6:	d10e      	bne.n	80058c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b2:	2b40      	cmp	r3, #64	; 0x40
 80058b4:	d107      	bne.n	80058c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f838 	bl	8005936 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	f003 0320 	and.w	r3, r3, #32
 80058d0:	2b20      	cmp	r3, #32
 80058d2:	d10e      	bne.n	80058f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b20      	cmp	r3, #32
 80058e0:	d107      	bne.n	80058f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f06f 0220 	mvn.w	r2, #32
 80058ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f93d 	bl	8005b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058f2:	bf00      	nop
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
	...

0800594c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a3c      	ldr	r2, [pc, #240]	; (8005a50 <TIM_Base_SetConfig+0x104>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00f      	beq.n	8005984 <TIM_Base_SetConfig+0x38>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596a:	d00b      	beq.n	8005984 <TIM_Base_SetConfig+0x38>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a39      	ldr	r2, [pc, #228]	; (8005a54 <TIM_Base_SetConfig+0x108>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d007      	beq.n	8005984 <TIM_Base_SetConfig+0x38>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a38      	ldr	r2, [pc, #224]	; (8005a58 <TIM_Base_SetConfig+0x10c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_Base_SetConfig+0x38>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a37      	ldr	r2, [pc, #220]	; (8005a5c <TIM_Base_SetConfig+0x110>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d108      	bne.n	8005996 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2d      	ldr	r2, [pc, #180]	; (8005a50 <TIM_Base_SetConfig+0x104>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d01b      	beq.n	80059d6 <TIM_Base_SetConfig+0x8a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a4:	d017      	beq.n	80059d6 <TIM_Base_SetConfig+0x8a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a2a      	ldr	r2, [pc, #168]	; (8005a54 <TIM_Base_SetConfig+0x108>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d013      	beq.n	80059d6 <TIM_Base_SetConfig+0x8a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a29      	ldr	r2, [pc, #164]	; (8005a58 <TIM_Base_SetConfig+0x10c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d00f      	beq.n	80059d6 <TIM_Base_SetConfig+0x8a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a28      	ldr	r2, [pc, #160]	; (8005a5c <TIM_Base_SetConfig+0x110>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00b      	beq.n	80059d6 <TIM_Base_SetConfig+0x8a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a27      	ldr	r2, [pc, #156]	; (8005a60 <TIM_Base_SetConfig+0x114>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d007      	beq.n	80059d6 <TIM_Base_SetConfig+0x8a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a26      	ldr	r2, [pc, #152]	; (8005a64 <TIM_Base_SetConfig+0x118>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d003      	beq.n	80059d6 <TIM_Base_SetConfig+0x8a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a25      	ldr	r2, [pc, #148]	; (8005a68 <TIM_Base_SetConfig+0x11c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d108      	bne.n	80059e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a10      	ldr	r2, [pc, #64]	; (8005a50 <TIM_Base_SetConfig+0x104>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00f      	beq.n	8005a34 <TIM_Base_SetConfig+0xe8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a11      	ldr	r2, [pc, #68]	; (8005a5c <TIM_Base_SetConfig+0x110>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00b      	beq.n	8005a34 <TIM_Base_SetConfig+0xe8>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a10      	ldr	r2, [pc, #64]	; (8005a60 <TIM_Base_SetConfig+0x114>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d007      	beq.n	8005a34 <TIM_Base_SetConfig+0xe8>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a0f      	ldr	r2, [pc, #60]	; (8005a64 <TIM_Base_SetConfig+0x118>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <TIM_Base_SetConfig+0xe8>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a0e      	ldr	r2, [pc, #56]	; (8005a68 <TIM_Base_SetConfig+0x11c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d103      	bne.n	8005a3c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	615a      	str	r2, [r3, #20]
}
 8005a42:	bf00      	nop
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40012c00 	.word	0x40012c00
 8005a54:	40000400 	.word	0x40000400
 8005a58:	40000800 	.word	0x40000800
 8005a5c:	40013400 	.word	0x40013400
 8005a60:	40014000 	.word	0x40014000
 8005a64:	40014400 	.word	0x40014400
 8005a68:	40014800 	.word	0x40014800

08005a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d101      	bne.n	8005a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e063      	b.n	8005b4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a2b      	ldr	r2, [pc, #172]	; (8005b58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d004      	beq.n	8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a2a      	ldr	r2, [pc, #168]	; (8005b5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d108      	bne.n	8005aca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005abe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a1b      	ldr	r2, [pc, #108]	; (8005b58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d018      	beq.n	8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af6:	d013      	beq.n	8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a18      	ldr	r2, [pc, #96]	; (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00e      	beq.n	8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a17      	ldr	r2, [pc, #92]	; (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d009      	beq.n	8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a12      	ldr	r2, [pc, #72]	; (8005b5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d004      	beq.n	8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a13      	ldr	r2, [pc, #76]	; (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d10c      	bne.n	8005b3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	40012c00 	.word	0x40012c00
 8005b5c:	40013400 	.word	0x40013400
 8005b60:	40000400 	.word	0x40000400
 8005b64:	40000800 	.word	0x40000800
 8005b68:	40014000 	.word	0x40014000

08005b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e040      	b.n	8005c3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d106      	bne.n	8005bd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f009 fdbc 	bl	800f748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2224      	movs	r2, #36	; 0x24
 8005bd4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0201 	bic.w	r2, r2, #1
 8005be4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fe20 	bl	800682c <UART_SetConfig>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d101      	bne.n	8005bf6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e022      	b.n	8005c3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 ffea 	bl	8006bd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f001 f871 	bl	8006d1c <UART_CheckIdleState>
 8005c3a:	4603      	mov	r3, r0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b08b      	sub	sp, #44	; 0x2c
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c56:	2b20      	cmp	r3, #32
 8005c58:	d156      	bne.n	8005d08 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <HAL_UART_Transmit_IT+0x22>
 8005c60:	88fb      	ldrh	r3, [r7, #6]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e04f      	b.n	8005d0a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_UART_Transmit_IT+0x34>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e048      	b.n	8005d0a <HAL_UART_Transmit_IT+0xc6>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	88fa      	ldrh	r2, [r7, #6]
 8005c8a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	88fa      	ldrh	r2, [r7, #6]
 8005c92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2221      	movs	r2, #33	; 0x21
 8005ca8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb2:	d107      	bne.n	8005cc4 <HAL_UART_Transmit_IT+0x80>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d103      	bne.n	8005cc4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4a16      	ldr	r2, [pc, #88]	; (8005d18 <HAL_UART_Transmit_IT+0xd4>)
 8005cc0:	669a      	str	r2, [r3, #104]	; 0x68
 8005cc2:	e002      	b.n	8005cca <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4a15      	ldr	r2, [pc, #84]	; (8005d1c <HAL_UART_Transmit_IT+0xd8>)
 8005cc8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	613b      	str	r3, [r7, #16]
   return(result);
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	461a      	mov	r2, r3
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	623b      	str	r3, [r7, #32]
 8005cf2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	69f9      	ldr	r1, [r7, #28]
 8005cf6:	6a3a      	ldr	r2, [r7, #32]
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e6      	bne.n	8005cd2 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e000      	b.n	8005d0a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8005d08:	2302      	movs	r3, #2
  }
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	372c      	adds	r7, #44	; 0x2c
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	08007697 	.word	0x08007697
 8005d1c:	080075df 	.word	0x080075df

08005d20 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08a      	sub	sp, #40	; 0x28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d32:	2b20      	cmp	r3, #32
 8005d34:	d13d      	bne.n	8005db2 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <HAL_UART_Receive_IT+0x22>
 8005d3c:	88fb      	ldrh	r3, [r7, #6]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e036      	b.n	8005db4 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d101      	bne.n	8005d54 <HAL_UART_Receive_IT+0x34>
 8005d50:	2302      	movs	r3, #2
 8005d52:	e02f      	b.n	8005db4 <HAL_UART_Receive_IT+0x94>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d018      	beq.n	8005da2 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d84:	627b      	str	r3, [r7, #36]	; 0x24
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	623b      	str	r3, [r7, #32]
 8005d90:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	69f9      	ldr	r1, [r7, #28]
 8005d94:	6a3a      	ldr	r2, [r7, #32]
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e6      	bne.n	8005d70 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005da2:	88fb      	ldrh	r3, [r7, #6]
 8005da4:	461a      	mov	r2, r3
 8005da6:	68b9      	ldr	r1, [r7, #8]
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f001 f8c5 	bl	8006f38 <UART_Start_Receive_IT>
 8005dae:	4603      	mov	r3, r0
 8005db0:	e000      	b.n	8005db4 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005db2:	2302      	movs	r3, #2
  }
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3728      	adds	r7, #40	; 0x28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08a      	sub	sp, #40	; 0x28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dce:	2b20      	cmp	r3, #32
 8005dd0:	d178      	bne.n	8005ec4 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <HAL_UART_Transmit_DMA+0x22>
 8005dd8:	88fb      	ldrh	r3, [r7, #6]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e071      	b.n	8005ec6 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_UART_Transmit_DMA+0x34>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e06a      	b.n	8005ec6 <HAL_UART_Transmit_DMA+0x10a>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	88fa      	ldrh	r2, [r7, #6]
 8005e02:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	88fa      	ldrh	r2, [r7, #6]
 8005e0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2221      	movs	r2, #33	; 0x21
 8005e1a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d02b      	beq.n	8005e7c <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e28:	4a29      	ldr	r2, [pc, #164]	; (8005ed0 <HAL_UART_Transmit_DMA+0x114>)
 8005e2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e30:	4a28      	ldr	r2, [pc, #160]	; (8005ed4 <HAL_UART_Transmit_DMA+0x118>)
 8005e32:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e38:	4a27      	ldr	r2, [pc, #156]	; (8005ed8 <HAL_UART_Transmit_DMA+0x11c>)
 8005e3a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e40:	2200      	movs	r2, #0
 8005e42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3328      	adds	r3, #40	; 0x28
 8005e54:	461a      	mov	r2, r3
 8005e56:	88fb      	ldrh	r3, [r7, #6]
 8005e58:	f7fb fa33 	bl	80012c2 <HAL_DMA_Start_IT>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00c      	beq.n	8005e7c <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2210      	movs	r2, #16
 8005e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2220      	movs	r2, #32
 8005e76:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e024      	b.n	8005ec6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2240      	movs	r2, #64	; 0x40
 8005e82:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3308      	adds	r3, #8
 8005e92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	e853 3f00 	ldrex	r3, [r3]
 8005e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3308      	adds	r3, #8
 8005eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eac:	623a      	str	r2, [r7, #32]
 8005eae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb0:	69f9      	ldr	r1, [r7, #28]
 8005eb2:	6a3a      	ldr	r2, [r7, #32]
 8005eb4:	e841 2300 	strex	r3, r2, [r1]
 8005eb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1e5      	bne.n	8005e8c <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	e000      	b.n	8005ec6 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005ec4:	2302      	movs	r3, #2
  }
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3728      	adds	r7, #40	; 0x28
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	080072bf 	.word	0x080072bf
 8005ed4:	08007353 	.word	0x08007353
 8005ed8:	080074c5 	.word	0x080074c5

08005edc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08a      	sub	sp, #40	; 0x28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eee:	2b20      	cmp	r3, #32
 8005ef0:	d13d      	bne.n	8005f6e <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d002      	beq.n	8005efe <HAL_UART_Receive_DMA+0x22>
 8005ef8:	88fb      	ldrh	r3, [r7, #6]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e036      	b.n	8005f70 <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <HAL_UART_Receive_DMA+0x34>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e02f      	b.n	8005f70 <HAL_UART_Receive_DMA+0x94>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d018      	beq.n	8005f5e <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	613b      	str	r3, [r7, #16]
   return(result);
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	461a      	mov	r2, r3
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	623b      	str	r3, [r7, #32]
 8005f4c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4e:	69f9      	ldr	r1, [r7, #28]
 8005f50:	6a3a      	ldr	r2, [r7, #32]
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1e6      	bne.n	8005f2c <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005f5e:	88fb      	ldrh	r3, [r7, #6]
 8005f60:	461a      	mov	r2, r3
 8005f62:	68b9      	ldr	r1, [r7, #8]
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f001 f87f 	bl	8007068 <UART_Start_Receive_DMA>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	e000      	b.n	8005f70 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f6e:	2302      	movs	r3, #2
  }
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3728      	adds	r7, #40	; 0x28
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08e      	sub	sp, #56	; 0x38
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f94:	637b      	str	r3, [r7, #52]	; 0x34
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fa0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e6      	bne.n	8005f80 <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fbc:	2b80      	cmp	r3, #128	; 0x80
 8005fbe:	d13f      	bne.n	8006040 <HAL_UART_AbortTransmit_IT+0xc8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	3308      	adds	r3, #8
 8005fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	e853 3f00 	ldrex	r3, [r3]
 8005fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fd6:	633b      	str	r3, [r7, #48]	; 0x30
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3308      	adds	r3, #8
 8005fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fe0:	61ba      	str	r2, [r7, #24]
 8005fe2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe4:	6979      	ldr	r1, [r7, #20]
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	e841 2300 	strex	r3, r2, [r1]
 8005fec:	613b      	str	r3, [r7, #16]
   return(result);
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1e5      	bne.n	8005fc0 <HAL_UART_AbortTransmit_IT+0x48>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d013      	beq.n	8006024 <HAL_UART_AbortTransmit_IT+0xac>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006000:	4a18      	ldr	r2, [pc, #96]	; (8006064 <HAL_UART_AbortTransmit_IT+0xec>)
 8006002:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006008:	4618      	mov	r0, r3
 800600a:	f7fb f9f2 	bl	80013f2 <HAL_DMA_Abort_IT>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d022      	beq.n	800605a <HAL_UART_AbortTransmit_IT+0xe2>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800601e:	4610      	mov	r0, r2
 8006020:	4798      	blx	r3
 8006022:	e01a      	b.n	800605a <HAL_UART_AbortTransmit_IT+0xe2>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	669a      	str	r2, [r3, #104]	; 0x68

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2220      	movs	r2, #32
 8006036:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fbd7 	bl	80067ec <HAL_UART_AbortTransmitCpltCallback>
 800603e:	e00c      	b.n	800605a <HAL_UART_AbortTransmit_IT+0xe2>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	669a      	str	r2, [r3, #104]	; 0x68


    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2220      	movs	r2, #32
 8006052:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fbc9 	bl	80067ec <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3738      	adds	r7, #56	; 0x38
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	0800756d 	.word	0x0800756d

08006068 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b09a      	sub	sp, #104	; 0x68
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800607e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006080:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006084:	667b      	str	r3, [r7, #100]	; 0x64
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800608e:	657b      	str	r3, [r7, #84]	; 0x54
 8006090:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006094:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800609c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1e6      	bne.n	8006070 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3308      	adds	r3, #8
 80060a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ac:	e853 3f00 	ldrex	r3, [r3]
 80060b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	f023 0301 	bic.w	r3, r3, #1
 80060b8:	663b      	str	r3, [r7, #96]	; 0x60
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3308      	adds	r3, #8
 80060c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060c2:	643a      	str	r2, [r7, #64]	; 0x40
 80060c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060ca:	e841 2300 	strex	r3, r2, [r1]
 80060ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1e5      	bne.n	80060a2 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d118      	bne.n	8006110 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	f023 0310 	bic.w	r3, r3, #16
 80060f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	461a      	mov	r2, r3
 80060fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060fe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e6      	bne.n	80060de <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611a:	2b40      	cmp	r3, #64	; 0x40
 800611c:	d14e      	bne.n	80061bc <HAL_UART_AbortReceive_IT+0x154>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3308      	adds	r3, #8
 8006124:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	60bb      	str	r3, [r7, #8]
   return(result);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006134:	65bb      	str	r3, [r7, #88]	; 0x58
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3308      	adds	r3, #8
 800613c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800613e:	61ba      	str	r2, [r7, #24]
 8006140:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	6979      	ldr	r1, [r7, #20]
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	613b      	str	r3, [r7, #16]
   return(result);
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e5      	bne.n	800611e <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006156:	2b00      	cmp	r3, #0
 8006158:	d013      	beq.n	8006182 <HAL_UART_AbortReceive_IT+0x11a>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615e:	4a24      	ldr	r2, [pc, #144]	; (80061f0 <HAL_UART_AbortReceive_IT+0x188>)
 8006160:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006166:	4618      	mov	r0, r3
 8006168:	f7fb f943 	bl	80013f2 <HAL_DMA_Abort_IT>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d038      	beq.n	80061e4 <HAL_UART_AbortReceive_IT+0x17c>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800617c:	4610      	mov	r0, r2
 800617e:	4798      	blx	r3
 8006180:	e030      	b.n	80061e4 <HAL_UART_AbortReceive_IT+0x17c>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	220f      	movs	r2, #15
 8006196:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699a      	ldr	r2, [r3, #24]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f042 0208 	orr.w	r2, r2, #8
 80061a6:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2220      	movs	r2, #32
 80061ac:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fb23 	bl	8006800 <HAL_UART_AbortReceiveCpltCallback>
 80061ba:	e013      	b.n	80061e4 <HAL_UART_AbortReceive_IT+0x17c>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	220f      	movs	r2, #15
 80061d0:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2220      	movs	r2, #32
 80061d6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fb0e 	bl	8006800 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3768      	adds	r7, #104	; 0x68
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	08007597 	.word	0x08007597

080061f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b0ba      	sub	sp, #232	; 0xe8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800621a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800621e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006222:	4013      	ands	r3, r2
 8006224:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006228:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800622c:	2b00      	cmp	r3, #0
 800622e:	d115      	bne.n	800625c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006234:	f003 0320 	and.w	r3, r3, #32
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00f      	beq.n	800625c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800623c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006240:	f003 0320 	and.w	r3, r3, #32
 8006244:	2b00      	cmp	r3, #0
 8006246:	d009      	beq.n	800625c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 82a3 	beq.w	8006798 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	4798      	blx	r3
      }
      return;
 800625a:	e29d      	b.n	8006798 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800625c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 8117 	beq.w	8006494 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d106      	bne.n	8006280 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006272:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006276:	4b85      	ldr	r3, [pc, #532]	; (800648c <HAL_UART_IRQHandler+0x298>)
 8006278:	4013      	ands	r3, r2
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 810a 	beq.w	8006494 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d011      	beq.n	80062b0 <HAL_UART_IRQHandler+0xbc>
 800628c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00b      	beq.n	80062b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2201      	movs	r2, #1
 800629e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062a6:	f043 0201 	orr.w	r2, r3, #1
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d011      	beq.n	80062e0 <HAL_UART_IRQHandler+0xec>
 80062bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00b      	beq.n	80062e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2202      	movs	r2, #2
 80062ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062d6:	f043 0204 	orr.w	r2, r3, #4
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d011      	beq.n	8006310 <HAL_UART_IRQHandler+0x11c>
 80062ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00b      	beq.n	8006310 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2204      	movs	r2, #4
 80062fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006306:	f043 0202 	orr.w	r2, r3, #2
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006314:	f003 0308 	and.w	r3, r3, #8
 8006318:	2b00      	cmp	r3, #0
 800631a:	d017      	beq.n	800634c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800631c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006320:	f003 0320 	and.w	r3, r3, #32
 8006324:	2b00      	cmp	r3, #0
 8006326:	d105      	bne.n	8006334 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800632c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00b      	beq.n	800634c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2208      	movs	r2, #8
 800633a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006342:	f043 0208 	orr.w	r2, r3, #8
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800634c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006354:	2b00      	cmp	r3, #0
 8006356:	d012      	beq.n	800637e <HAL_UART_IRQHandler+0x18a>
 8006358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800635c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00c      	beq.n	800637e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800636c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006374:	f043 0220 	orr.w	r2, r3, #32
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 8209 	beq.w	800679c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800638a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00d      	beq.n	80063b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800639a:	f003 0320 	and.w	r3, r3, #32
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d007      	beq.n	80063b2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c6:	2b40      	cmp	r3, #64	; 0x40
 80063c8:	d005      	beq.n	80063d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80063ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d04f      	beq.n	8006476 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 ff0e 	bl	80071f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e6:	2b40      	cmp	r3, #64	; 0x40
 80063e8:	d141      	bne.n	800646e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3308      	adds	r3, #8
 80063f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006400:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006408:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3308      	adds	r3, #8
 8006412:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006416:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800641a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006422:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006426:	e841 2300 	strex	r3, r2, [r1]
 800642a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800642e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1d9      	bne.n	80063ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643a:	2b00      	cmp	r3, #0
 800643c:	d013      	beq.n	8006466 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006442:	4a13      	ldr	r2, [pc, #76]	; (8006490 <HAL_UART_IRQHandler+0x29c>)
 8006444:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644a:	4618      	mov	r0, r3
 800644c:	f7fa ffd1 	bl	80013f2 <HAL_DMA_Abort_IT>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d017      	beq.n	8006486 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006460:	4610      	mov	r0, r2
 8006462:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006464:	e00f      	b.n	8006486 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f9b6 	bl	80067d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800646c:	e00b      	b.n	8006486 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f9b2 	bl	80067d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006474:	e007      	b.n	8006486 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f9ae 	bl	80067d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006484:	e18a      	b.n	800679c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006486:	bf00      	nop
    return;
 8006488:	e188      	b.n	800679c <HAL_UART_IRQHandler+0x5a8>
 800648a:	bf00      	nop
 800648c:	04000120 	.word	0x04000120
 8006490:	08007541 	.word	0x08007541

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006498:	2b01      	cmp	r3, #1
 800649a:	f040 8143 	bne.w	8006724 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800649e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a2:	f003 0310 	and.w	r3, r3, #16
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 813c 	beq.w	8006724 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 8135 	beq.w	8006724 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2210      	movs	r2, #16
 80064c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064cc:	2b40      	cmp	r3, #64	; 0x40
 80064ce:	f040 80b1 	bne.w	8006634 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 815c 	beq.w	80067a0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80064ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064f2:	429a      	cmp	r2, r3
 80064f4:	f080 8154 	bcs.w	80067a0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	2b20      	cmp	r3, #32
 800650a:	f000 8085 	beq.w	8006618 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006516:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800651a:	e853 3f00 	ldrex	r3, [r3]
 800651e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006522:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006526:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800652a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006538:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800653c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006544:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006548:	e841 2300 	strex	r3, r2, [r1]
 800654c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006550:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1da      	bne.n	800650e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3308      	adds	r3, #8
 800655e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006560:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006562:	e853 3f00 	ldrex	r3, [r3]
 8006566:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006568:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800656a:	f023 0301 	bic.w	r3, r3, #1
 800656e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3308      	adds	r3, #8
 8006578:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800657c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006580:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006582:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006584:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006588:	e841 2300 	strex	r3, r2, [r1]
 800658c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800658e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1e1      	bne.n	8006558 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3308      	adds	r3, #8
 800659a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800659e:	e853 3f00 	ldrex	r3, [r3]
 80065a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	3308      	adds	r3, #8
 80065b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065b8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065c0:	e841 2300 	strex	r3, r2, [r1]
 80065c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1e3      	bne.n	8006594 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2220      	movs	r2, #32
 80065d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e0:	e853 3f00 	ldrex	r3, [r3]
 80065e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e8:	f023 0310 	bic.w	r3, r3, #16
 80065ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	461a      	mov	r2, r3
 80065f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80065fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006600:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e4      	bne.n	80065d8 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006612:	4618      	mov	r0, r3
 8006614:	f7fa feb4 	bl	8001380 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006624:	b29b      	uxth	r3, r3
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	b29b      	uxth	r3, r3
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f8f1 	bl	8006814 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006632:	e0b5      	b.n	80067a0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006640:	b29b      	uxth	r3, r3
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800664e:	b29b      	uxth	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 80a7 	beq.w	80067a4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8006656:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 80a2 	beq.w	80067a4 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800666e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006674:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	461a      	mov	r2, r3
 800667e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006682:	647b      	str	r3, [r7, #68]	; 0x44
 8006684:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006686:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006688:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800668a:	e841 2300 	strex	r3, r2, [r1]
 800668e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1e4      	bne.n	8006660 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3308      	adds	r3, #8
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	623b      	str	r3, [r7, #32]
   return(result);
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	f023 0301 	bic.w	r3, r3, #1
 80066ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3308      	adds	r3, #8
 80066b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066ba:	633a      	str	r2, [r7, #48]	; 0x30
 80066bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c2:	e841 2300 	strex	r3, r2, [r1]
 80066c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1e3      	bne.n	8006696 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2220      	movs	r2, #32
 80066d2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	e853 3f00 	ldrex	r3, [r3]
 80066ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f023 0310 	bic.w	r3, r3, #16
 80066f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	461a      	mov	r2, r3
 80066fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006702:	61fb      	str	r3, [r7, #28]
 8006704:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	69b9      	ldr	r1, [r7, #24]
 8006708:	69fa      	ldr	r2, [r7, #28]
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	617b      	str	r3, [r7, #20]
   return(result);
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e4      	bne.n	80066e0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006716:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f879 	bl	8006814 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006722:	e03f      	b.n	80067a4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00e      	beq.n	800674e <HAL_UART_IRQHandler+0x55a>
 8006730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d008      	beq.n	800674e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006744:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f001 f9f2 	bl	8007b30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800674c:	e02d      	b.n	80067aa <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800674e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00e      	beq.n	8006778 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800675a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800675e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006762:	2b00      	cmp	r3, #0
 8006764:	d008      	beq.n	8006778 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800676a:	2b00      	cmp	r3, #0
 800676c:	d01c      	beq.n	80067a8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	4798      	blx	r3
    }
    return;
 8006776:	e017      	b.n	80067a8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006780:	2b00      	cmp	r3, #0
 8006782:	d012      	beq.n	80067aa <HAL_UART_IRQHandler+0x5b6>
 8006784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00c      	beq.n	80067aa <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 ffe0 	bl	8007756 <UART_EndTransmit_IT>
    return;
 8006796:	e008      	b.n	80067aa <HAL_UART_IRQHandler+0x5b6>
      return;
 8006798:	bf00      	nop
 800679a:	e006      	b.n	80067aa <HAL_UART_IRQHandler+0x5b6>
    return;
 800679c:	bf00      	nop
 800679e:	e004      	b.n	80067aa <HAL_UART_IRQHandler+0x5b6>
      return;
 80067a0:	bf00      	nop
 80067a2:	e002      	b.n	80067aa <HAL_UART_IRQHandler+0x5b6>
      return;
 80067a4:	bf00      	nop
 80067a6:	e000      	b.n	80067aa <HAL_UART_IRQHandler+0x5b6>
    return;
 80067a8:	bf00      	nop
  }

}
 80067aa:	37e8      	adds	r7, #232	; 0xe8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	431a      	orrs	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	431a      	orrs	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	4313      	orrs	r3, r2
 800684e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800685a:	f023 030c 	bic.w	r3, r3, #12
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	6812      	ldr	r2, [r2, #0]
 8006862:	6979      	ldr	r1, [r7, #20]
 8006864:	430b      	orrs	r3, r1
 8006866:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	4313      	orrs	r3, r2
 800688c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	430a      	orrs	r2, r1
 80068a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4aa8      	ldr	r2, [pc, #672]	; (8006b48 <UART_SetConfig+0x31c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d120      	bne.n	80068ee <UART_SetConfig+0xc2>
 80068ac:	4ba7      	ldr	r3, [pc, #668]	; (8006b4c <UART_SetConfig+0x320>)
 80068ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b0:	f003 0303 	and.w	r3, r3, #3
 80068b4:	2b03      	cmp	r3, #3
 80068b6:	d817      	bhi.n	80068e8 <UART_SetConfig+0xbc>
 80068b8:	a201      	add	r2, pc, #4	; (adr r2, 80068c0 <UART_SetConfig+0x94>)
 80068ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068be:	bf00      	nop
 80068c0:	080068d1 	.word	0x080068d1
 80068c4:	080068dd 	.word	0x080068dd
 80068c8:	080068e3 	.word	0x080068e3
 80068cc:	080068d7 	.word	0x080068d7
 80068d0:	2301      	movs	r3, #1
 80068d2:	77fb      	strb	r3, [r7, #31]
 80068d4:	e0b5      	b.n	8006a42 <UART_SetConfig+0x216>
 80068d6:	2302      	movs	r3, #2
 80068d8:	77fb      	strb	r3, [r7, #31]
 80068da:	e0b2      	b.n	8006a42 <UART_SetConfig+0x216>
 80068dc:	2304      	movs	r3, #4
 80068de:	77fb      	strb	r3, [r7, #31]
 80068e0:	e0af      	b.n	8006a42 <UART_SetConfig+0x216>
 80068e2:	2308      	movs	r3, #8
 80068e4:	77fb      	strb	r3, [r7, #31]
 80068e6:	e0ac      	b.n	8006a42 <UART_SetConfig+0x216>
 80068e8:	2310      	movs	r3, #16
 80068ea:	77fb      	strb	r3, [r7, #31]
 80068ec:	e0a9      	b.n	8006a42 <UART_SetConfig+0x216>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a97      	ldr	r2, [pc, #604]	; (8006b50 <UART_SetConfig+0x324>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d124      	bne.n	8006942 <UART_SetConfig+0x116>
 80068f8:	4b94      	ldr	r3, [pc, #592]	; (8006b4c <UART_SetConfig+0x320>)
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006900:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006904:	d011      	beq.n	800692a <UART_SetConfig+0xfe>
 8006906:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800690a:	d817      	bhi.n	800693c <UART_SetConfig+0x110>
 800690c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006910:	d011      	beq.n	8006936 <UART_SetConfig+0x10a>
 8006912:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006916:	d811      	bhi.n	800693c <UART_SetConfig+0x110>
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <UART_SetConfig+0xf8>
 800691c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006920:	d006      	beq.n	8006930 <UART_SetConfig+0x104>
 8006922:	e00b      	b.n	800693c <UART_SetConfig+0x110>
 8006924:	2300      	movs	r3, #0
 8006926:	77fb      	strb	r3, [r7, #31]
 8006928:	e08b      	b.n	8006a42 <UART_SetConfig+0x216>
 800692a:	2302      	movs	r3, #2
 800692c:	77fb      	strb	r3, [r7, #31]
 800692e:	e088      	b.n	8006a42 <UART_SetConfig+0x216>
 8006930:	2304      	movs	r3, #4
 8006932:	77fb      	strb	r3, [r7, #31]
 8006934:	e085      	b.n	8006a42 <UART_SetConfig+0x216>
 8006936:	2308      	movs	r3, #8
 8006938:	77fb      	strb	r3, [r7, #31]
 800693a:	e082      	b.n	8006a42 <UART_SetConfig+0x216>
 800693c:	2310      	movs	r3, #16
 800693e:	77fb      	strb	r3, [r7, #31]
 8006940:	e07f      	b.n	8006a42 <UART_SetConfig+0x216>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a83      	ldr	r2, [pc, #524]	; (8006b54 <UART_SetConfig+0x328>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d124      	bne.n	8006996 <UART_SetConfig+0x16a>
 800694c:	4b7f      	ldr	r3, [pc, #508]	; (8006b4c <UART_SetConfig+0x320>)
 800694e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006950:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006954:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006958:	d011      	beq.n	800697e <UART_SetConfig+0x152>
 800695a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800695e:	d817      	bhi.n	8006990 <UART_SetConfig+0x164>
 8006960:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006964:	d011      	beq.n	800698a <UART_SetConfig+0x15e>
 8006966:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800696a:	d811      	bhi.n	8006990 <UART_SetConfig+0x164>
 800696c:	2b00      	cmp	r3, #0
 800696e:	d003      	beq.n	8006978 <UART_SetConfig+0x14c>
 8006970:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006974:	d006      	beq.n	8006984 <UART_SetConfig+0x158>
 8006976:	e00b      	b.n	8006990 <UART_SetConfig+0x164>
 8006978:	2300      	movs	r3, #0
 800697a:	77fb      	strb	r3, [r7, #31]
 800697c:	e061      	b.n	8006a42 <UART_SetConfig+0x216>
 800697e:	2302      	movs	r3, #2
 8006980:	77fb      	strb	r3, [r7, #31]
 8006982:	e05e      	b.n	8006a42 <UART_SetConfig+0x216>
 8006984:	2304      	movs	r3, #4
 8006986:	77fb      	strb	r3, [r7, #31]
 8006988:	e05b      	b.n	8006a42 <UART_SetConfig+0x216>
 800698a:	2308      	movs	r3, #8
 800698c:	77fb      	strb	r3, [r7, #31]
 800698e:	e058      	b.n	8006a42 <UART_SetConfig+0x216>
 8006990:	2310      	movs	r3, #16
 8006992:	77fb      	strb	r3, [r7, #31]
 8006994:	e055      	b.n	8006a42 <UART_SetConfig+0x216>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a6f      	ldr	r2, [pc, #444]	; (8006b58 <UART_SetConfig+0x32c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d124      	bne.n	80069ea <UART_SetConfig+0x1be>
 80069a0:	4b6a      	ldr	r3, [pc, #424]	; (8006b4c <UART_SetConfig+0x320>)
 80069a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80069a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069ac:	d011      	beq.n	80069d2 <UART_SetConfig+0x1a6>
 80069ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069b2:	d817      	bhi.n	80069e4 <UART_SetConfig+0x1b8>
 80069b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069b8:	d011      	beq.n	80069de <UART_SetConfig+0x1b2>
 80069ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069be:	d811      	bhi.n	80069e4 <UART_SetConfig+0x1b8>
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <UART_SetConfig+0x1a0>
 80069c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069c8:	d006      	beq.n	80069d8 <UART_SetConfig+0x1ac>
 80069ca:	e00b      	b.n	80069e4 <UART_SetConfig+0x1b8>
 80069cc:	2300      	movs	r3, #0
 80069ce:	77fb      	strb	r3, [r7, #31]
 80069d0:	e037      	b.n	8006a42 <UART_SetConfig+0x216>
 80069d2:	2302      	movs	r3, #2
 80069d4:	77fb      	strb	r3, [r7, #31]
 80069d6:	e034      	b.n	8006a42 <UART_SetConfig+0x216>
 80069d8:	2304      	movs	r3, #4
 80069da:	77fb      	strb	r3, [r7, #31]
 80069dc:	e031      	b.n	8006a42 <UART_SetConfig+0x216>
 80069de:	2308      	movs	r3, #8
 80069e0:	77fb      	strb	r3, [r7, #31]
 80069e2:	e02e      	b.n	8006a42 <UART_SetConfig+0x216>
 80069e4:	2310      	movs	r3, #16
 80069e6:	77fb      	strb	r3, [r7, #31]
 80069e8:	e02b      	b.n	8006a42 <UART_SetConfig+0x216>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a5b      	ldr	r2, [pc, #364]	; (8006b5c <UART_SetConfig+0x330>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d124      	bne.n	8006a3e <UART_SetConfig+0x212>
 80069f4:	4b55      	ldr	r3, [pc, #340]	; (8006b4c <UART_SetConfig+0x320>)
 80069f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80069fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006a00:	d011      	beq.n	8006a26 <UART_SetConfig+0x1fa>
 8006a02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006a06:	d817      	bhi.n	8006a38 <UART_SetConfig+0x20c>
 8006a08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a0c:	d011      	beq.n	8006a32 <UART_SetConfig+0x206>
 8006a0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a12:	d811      	bhi.n	8006a38 <UART_SetConfig+0x20c>
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <UART_SetConfig+0x1f4>
 8006a18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a1c:	d006      	beq.n	8006a2c <UART_SetConfig+0x200>
 8006a1e:	e00b      	b.n	8006a38 <UART_SetConfig+0x20c>
 8006a20:	2300      	movs	r3, #0
 8006a22:	77fb      	strb	r3, [r7, #31]
 8006a24:	e00d      	b.n	8006a42 <UART_SetConfig+0x216>
 8006a26:	2302      	movs	r3, #2
 8006a28:	77fb      	strb	r3, [r7, #31]
 8006a2a:	e00a      	b.n	8006a42 <UART_SetConfig+0x216>
 8006a2c:	2304      	movs	r3, #4
 8006a2e:	77fb      	strb	r3, [r7, #31]
 8006a30:	e007      	b.n	8006a42 <UART_SetConfig+0x216>
 8006a32:	2308      	movs	r3, #8
 8006a34:	77fb      	strb	r3, [r7, #31]
 8006a36:	e004      	b.n	8006a42 <UART_SetConfig+0x216>
 8006a38:	2310      	movs	r3, #16
 8006a3a:	77fb      	strb	r3, [r7, #31]
 8006a3c:	e001      	b.n	8006a42 <UART_SetConfig+0x216>
 8006a3e:	2310      	movs	r3, #16
 8006a40:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a4a:	d15c      	bne.n	8006b06 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8006a4c:	7ffb      	ldrb	r3, [r7, #31]
 8006a4e:	2b08      	cmp	r3, #8
 8006a50:	d827      	bhi.n	8006aa2 <UART_SetConfig+0x276>
 8006a52:	a201      	add	r2, pc, #4	; (adr r2, 8006a58 <UART_SetConfig+0x22c>)
 8006a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a58:	08006a7d 	.word	0x08006a7d
 8006a5c:	08006a85 	.word	0x08006a85
 8006a60:	08006a8d 	.word	0x08006a8d
 8006a64:	08006aa3 	.word	0x08006aa3
 8006a68:	08006a93 	.word	0x08006a93
 8006a6c:	08006aa3 	.word	0x08006aa3
 8006a70:	08006aa3 	.word	0x08006aa3
 8006a74:	08006aa3 	.word	0x08006aa3
 8006a78:	08006a9b 	.word	0x08006a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a7c:	f7fe fb36 	bl	80050ec <HAL_RCC_GetPCLK1Freq>
 8006a80:	61b8      	str	r0, [r7, #24]
        break;
 8006a82:	e013      	b.n	8006aac <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a84:	f7fe fb54 	bl	8005130 <HAL_RCC_GetPCLK2Freq>
 8006a88:	61b8      	str	r0, [r7, #24]
        break;
 8006a8a:	e00f      	b.n	8006aac <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a8c:	4b34      	ldr	r3, [pc, #208]	; (8006b60 <UART_SetConfig+0x334>)
 8006a8e:	61bb      	str	r3, [r7, #24]
        break;
 8006a90:	e00c      	b.n	8006aac <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a92:	f7fe fab5 	bl	8005000 <HAL_RCC_GetSysClockFreq>
 8006a96:	61b8      	str	r0, [r7, #24]
        break;
 8006a98:	e008      	b.n	8006aac <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a9e:	61bb      	str	r3, [r7, #24]
        break;
 8006aa0:	e004      	b.n	8006aac <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	77bb      	strb	r3, [r7, #30]
        break;
 8006aaa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 8084 	beq.w	8006bbc <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	005a      	lsls	r2, r3, #1
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	085b      	lsrs	r3, r3, #1
 8006abe:	441a      	add	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	2b0f      	cmp	r3, #15
 8006ad0:	d916      	bls.n	8006b00 <UART_SetConfig+0x2d4>
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad8:	d212      	bcs.n	8006b00 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	f023 030f 	bic.w	r3, r3, #15
 8006ae2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	085b      	lsrs	r3, r3, #1
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	f003 0307 	and.w	r3, r3, #7
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	89fb      	ldrh	r3, [r7, #14]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	89fa      	ldrh	r2, [r7, #14]
 8006afc:	60da      	str	r2, [r3, #12]
 8006afe:	e05d      	b.n	8006bbc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	77bb      	strb	r3, [r7, #30]
 8006b04:	e05a      	b.n	8006bbc <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b06:	7ffb      	ldrb	r3, [r7, #31]
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	d836      	bhi.n	8006b7a <UART_SetConfig+0x34e>
 8006b0c:	a201      	add	r2, pc, #4	; (adr r2, 8006b14 <UART_SetConfig+0x2e8>)
 8006b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b12:	bf00      	nop
 8006b14:	08006b39 	.word	0x08006b39
 8006b18:	08006b41 	.word	0x08006b41
 8006b1c:	08006b65 	.word	0x08006b65
 8006b20:	08006b7b 	.word	0x08006b7b
 8006b24:	08006b6b 	.word	0x08006b6b
 8006b28:	08006b7b 	.word	0x08006b7b
 8006b2c:	08006b7b 	.word	0x08006b7b
 8006b30:	08006b7b 	.word	0x08006b7b
 8006b34:	08006b73 	.word	0x08006b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b38:	f7fe fad8 	bl	80050ec <HAL_RCC_GetPCLK1Freq>
 8006b3c:	61b8      	str	r0, [r7, #24]
        break;
 8006b3e:	e021      	b.n	8006b84 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b40:	f7fe faf6 	bl	8005130 <HAL_RCC_GetPCLK2Freq>
 8006b44:	61b8      	str	r0, [r7, #24]
        break;
 8006b46:	e01d      	b.n	8006b84 <UART_SetConfig+0x358>
 8006b48:	40013800 	.word	0x40013800
 8006b4c:	40021000 	.word	0x40021000
 8006b50:	40004400 	.word	0x40004400
 8006b54:	40004800 	.word	0x40004800
 8006b58:	40004c00 	.word	0x40004c00
 8006b5c:	40005000 	.word	0x40005000
 8006b60:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b64:	4b1b      	ldr	r3, [pc, #108]	; (8006bd4 <UART_SetConfig+0x3a8>)
 8006b66:	61bb      	str	r3, [r7, #24]
        break;
 8006b68:	e00c      	b.n	8006b84 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b6a:	f7fe fa49 	bl	8005000 <HAL_RCC_GetSysClockFreq>
 8006b6e:	61b8      	str	r0, [r7, #24]
        break;
 8006b70:	e008      	b.n	8006b84 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b76:	61bb      	str	r3, [r7, #24]
        break;
 8006b78:	e004      	b.n	8006b84 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	77bb      	strb	r3, [r7, #30]
        break;
 8006b82:	bf00      	nop
    }

    if (pclk != 0U)
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d018      	beq.n	8006bbc <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	085a      	lsrs	r2, r3, #1
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	441a      	add	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	2b0f      	cmp	r3, #15
 8006ba4:	d908      	bls.n	8006bb8 <UART_SetConfig+0x38c>
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bac:	d204      	bcs.n	8006bb8 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	60da      	str	r2, [r3, #12]
 8006bb6:	e001      	b.n	8006bbc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006bc8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3720      	adds	r7, #32
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	007a1200 	.word	0x007a1200

08006bd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00a      	beq.n	8006c02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00a      	beq.n	8006c24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00a      	beq.n	8006c46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4a:	f003 0308 	and.w	r3, r3, #8
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00a      	beq.n	8006c68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6c:	f003 0310 	and.w	r3, r3, #16
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00a      	beq.n	8006c8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	f003 0320 	and.w	r3, r3, #32
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d01a      	beq.n	8006cee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cd6:	d10a      	bne.n	8006cee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00a      	beq.n	8006d10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	605a      	str	r2, [r3, #4]
  }
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af02      	add	r7, sp, #8
 8006d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d2c:	f7fa f970 	bl	8001010 <HAL_GetTick>
 8006d30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0308 	and.w	r3, r3, #8
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	d10e      	bne.n	8006d5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f82d 	bl	8006dae <UART_WaitOnFlagUntilTimeout>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e023      	b.n	8006da6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b04      	cmp	r3, #4
 8006d6a:	d10e      	bne.n	8006d8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f817 	bl	8006dae <UART_WaitOnFlagUntilTimeout>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e00d      	b.n	8006da6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2220      	movs	r2, #32
 8006d94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b09c      	sub	sp, #112	; 0x70
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	60f8      	str	r0, [r7, #12]
 8006db6:	60b9      	str	r1, [r7, #8]
 8006db8:	603b      	str	r3, [r7, #0]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dbe:	e0a5      	b.n	8006f0c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dc6:	f000 80a1 	beq.w	8006f0c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dca:	f7fa f921 	bl	8001010 <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d302      	bcc.n	8006de0 <UART_WaitOnFlagUntilTimeout+0x32>
 8006dda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d13e      	bne.n	8006e5e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006de8:	e853 3f00 	ldrex	r3, [r3]
 8006dec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006df4:	667b      	str	r3, [r7, #100]	; 0x64
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e00:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1e6      	bne.n	8006de0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3308      	adds	r3, #8
 8006e18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e24:	f023 0301 	bic.w	r3, r3, #1
 8006e28:	663b      	str	r3, [r7, #96]	; 0x60
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	3308      	adds	r3, #8
 8006e30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e32:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e5      	bne.n	8006e12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e067      	b.n	8006f2e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0304 	and.w	r3, r3, #4
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d04f      	beq.n	8006f0c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e7a:	d147      	bne.n	8006f0c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8e:	e853 3f00 	ldrex	r3, [r3]
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006eaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eac:	e841 2300 	strex	r3, r2, [r1]
 8006eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1e6      	bne.n	8006e86 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3308      	adds	r3, #8
 8006ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	e853 3f00 	ldrex	r3, [r3]
 8006ec6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f023 0301 	bic.w	r3, r3, #1
 8006ece:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3308      	adds	r3, #8
 8006ed6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ed8:	623a      	str	r2, [r7, #32]
 8006eda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006edc:	69f9      	ldr	r1, [r7, #28]
 8006ede:	6a3a      	ldr	r2, [r7, #32]
 8006ee0:	e841 2300 	strex	r3, r2, [r1]
 8006ee4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e5      	bne.n	8006eb8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2220      	movs	r2, #32
 8006efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e010      	b.n	8006f2e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	69da      	ldr	r2, [r3, #28]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	4013      	ands	r3, r2
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	bf0c      	ite	eq
 8006f1c:	2301      	moveq	r3, #1
 8006f1e:	2300      	movne	r3, #0
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	461a      	mov	r2, r3
 8006f24:	79fb      	ldrb	r3, [r7, #7]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	f43f af4a 	beq.w	8006dc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3770      	adds	r7, #112	; 0x70
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
	...

08006f38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b091      	sub	sp, #68	; 0x44
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	4613      	mov	r3, r2
 8006f44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	88fa      	ldrh	r2, [r7, #6]
 8006f50:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	88fa      	ldrh	r2, [r7, #6]
 8006f58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f6a:	d10e      	bne.n	8006f8a <UART_Start_Receive_IT+0x52>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d105      	bne.n	8006f80 <UART_Start_Receive_IT+0x48>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006f7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f7e:	e01a      	b.n	8006fb6 <UART_Start_Receive_IT+0x7e>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	22ff      	movs	r2, #255	; 0xff
 8006f84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f88:	e015      	b.n	8006fb6 <UART_Start_Receive_IT+0x7e>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10d      	bne.n	8006fae <UART_Start_Receive_IT+0x76>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d104      	bne.n	8006fa4 <UART_Start_Receive_IT+0x6c>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	22ff      	movs	r2, #255	; 0xff
 8006f9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fa2:	e008      	b.n	8006fb6 <UART_Start_Receive_IT+0x7e>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	227f      	movs	r2, #127	; 0x7f
 8006fa8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fac:	e003      	b.n	8006fb6 <UART_Start_Receive_IT+0x7e>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2222      	movs	r2, #34	; 0x22
 8006fc2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3308      	adds	r3, #8
 8006fca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fce:	e853 3f00 	ldrex	r3, [r3]
 8006fd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	f043 0301 	orr.w	r3, r3, #1
 8006fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006fe4:	637a      	str	r2, [r7, #52]	; 0x34
 8006fe6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fec:	e841 2300 	strex	r3, r2, [r1]
 8006ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1e5      	bne.n	8006fc4 <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007000:	d107      	bne.n	8007012 <UART_Start_Receive_IT+0xda>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d103      	bne.n	8007012 <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4a14      	ldr	r2, [pc, #80]	; (8007060 <UART_Start_Receive_IT+0x128>)
 800700e:	665a      	str	r2, [r3, #100]	; 0x64
 8007010:	e002      	b.n	8007018 <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4a13      	ldr	r2, [pc, #76]	; (8007064 <UART_Start_Receive_IT+0x12c>)
 8007016:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	613b      	str	r3, [r7, #16]
   return(result);
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007034:	63bb      	str	r3, [r7, #56]	; 0x38
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703e:	623b      	str	r3, [r7, #32]
 8007040:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007042:	69f9      	ldr	r1, [r7, #28]
 8007044:	6a3a      	ldr	r2, [r7, #32]
 8007046:	e841 2300 	strex	r3, r2, [r1]
 800704a:	61bb      	str	r3, [r7, #24]
   return(result);
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1e6      	bne.n	8007020 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3744      	adds	r7, #68	; 0x44
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	08007907 	.word	0x08007907
 8007064:	080077ab 	.word	0x080077ab

08007068 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b096      	sub	sp, #88	; 0x58
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	4613      	mov	r3, r2
 8007074:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	88fa      	ldrh	r2, [r7, #6]
 8007080:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2222      	movs	r2, #34	; 0x22
 8007090:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007096:	2b00      	cmp	r3, #0
 8007098:	d02b      	beq.n	80070f2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709e:	4a40      	ldr	r2, [pc, #256]	; (80071a0 <UART_Start_Receive_DMA+0x138>)
 80070a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a6:	4a3f      	ldr	r2, [pc, #252]	; (80071a4 <UART_Start_Receive_DMA+0x13c>)
 80070a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ae:	4a3e      	ldr	r2, [pc, #248]	; (80071a8 <UART_Start_Receive_DMA+0x140>)
 80070b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b6:	2200      	movs	r2, #0
 80070b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3324      	adds	r3, #36	; 0x24
 80070c4:	4619      	mov	r1, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ca:	461a      	mov	r2, r3
 80070cc:	88fb      	ldrh	r3, [r7, #6]
 80070ce:	f7fa f8f8 	bl	80012c2 <HAL_DMA_Start_IT>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00c      	beq.n	80070f2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2210      	movs	r2, #16
 80070dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2220      	movs	r2, #32
 80070ec:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e051      	b.n	8007196 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007102:	e853 3f00 	ldrex	r3, [r3]
 8007106:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800710e:	657b      	str	r3, [r7, #84]	; 0x54
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	461a      	mov	r2, r3
 8007116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007118:	64bb      	str	r3, [r7, #72]	; 0x48
 800711a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800711e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007120:	e841 2300 	strex	r3, r2, [r1]
 8007124:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e6      	bne.n	80070fa <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3308      	adds	r3, #8
 8007132:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007136:	e853 3f00 	ldrex	r3, [r3]
 800713a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	f043 0301 	orr.w	r3, r3, #1
 8007142:	653b      	str	r3, [r7, #80]	; 0x50
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3308      	adds	r3, #8
 800714a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800714c:	637a      	str	r2, [r7, #52]	; 0x34
 800714e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007150:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007154:	e841 2300 	strex	r3, r2, [r1]
 8007158:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800715a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1e5      	bne.n	800712c <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3308      	adds	r3, #8
 8007166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	e853 3f00 	ldrex	r3, [r3]
 800716e:	613b      	str	r3, [r7, #16]
   return(result);
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3308      	adds	r3, #8
 800717e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007180:	623a      	str	r2, [r7, #32]
 8007182:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007184:	69f9      	ldr	r1, [r7, #28]
 8007186:	6a3a      	ldr	r2, [r7, #32]
 8007188:	e841 2300 	strex	r3, r2, [r1]
 800718c:	61bb      	str	r3, [r7, #24]
   return(result);
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1e5      	bne.n	8007160 <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3758      	adds	r7, #88	; 0x58
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	0800736f 	.word	0x0800736f
 80071a4:	0800748d 	.word	0x0800748d
 80071a8:	080074c5 	.word	0x080074c5

080071ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b089      	sub	sp, #36	; 0x24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80071c8:	61fb      	str	r3, [r7, #28]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	61bb      	str	r3, [r7, #24]
 80071d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	6979      	ldr	r1, [r7, #20]
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	e841 2300 	strex	r3, r2, [r1]
 80071de:	613b      	str	r3, [r7, #16]
   return(result);
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1e6      	bne.n	80071b4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2220      	movs	r2, #32
 80071ea:	679a      	str	r2, [r3, #120]	; 0x78
}
 80071ec:	bf00      	nop
 80071ee:	3724      	adds	r7, #36	; 0x24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b095      	sub	sp, #84	; 0x54
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007208:	e853 3f00 	ldrex	r3, [r3]
 800720c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007214:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	461a      	mov	r2, r3
 800721c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800721e:	643b      	str	r3, [r7, #64]	; 0x40
 8007220:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007222:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007224:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007226:	e841 2300 	strex	r3, r2, [r1]
 800722a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800722c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1e6      	bne.n	8007200 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3308      	adds	r3, #8
 8007238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	61fb      	str	r3, [r7, #28]
   return(result);
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	f023 0301 	bic.w	r3, r3, #1
 8007248:	64bb      	str	r3, [r7, #72]	; 0x48
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3308      	adds	r3, #8
 8007250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007252:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007254:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e5      	bne.n	8007232 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800726a:	2b01      	cmp	r3, #1
 800726c:	d118      	bne.n	80072a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	e853 3f00 	ldrex	r3, [r3]
 800727a:	60bb      	str	r3, [r7, #8]
   return(result);
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f023 0310 	bic.w	r3, r3, #16
 8007282:	647b      	str	r3, [r7, #68]	; 0x44
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	461a      	mov	r2, r3
 800728a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800728c:	61bb      	str	r3, [r7, #24]
 800728e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007290:	6979      	ldr	r1, [r7, #20]
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	e841 2300 	strex	r3, r2, [r1]
 8007298:	613b      	str	r3, [r7, #16]
   return(result);
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1e6      	bne.n	800726e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2220      	movs	r2, #32
 80072a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80072b2:	bf00      	nop
 80072b4:	3754      	adds	r7, #84	; 0x54
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b090      	sub	sp, #64	; 0x40
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	2b20      	cmp	r3, #32
 80072d2:	d037      	beq.n	8007344 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80072d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80072dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3308      	adds	r3, #8
 80072e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	e853 3f00 	ldrex	r3, [r3]
 80072ea:	623b      	str	r3, [r7, #32]
   return(result);
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80072f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3308      	adds	r3, #8
 80072fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072fc:	633a      	str	r2, [r7, #48]	; 0x30
 80072fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007300:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007304:	e841 2300 	strex	r3, r2, [r1]
 8007308:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800730a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1e5      	bne.n	80072dc <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	60fb      	str	r3, [r7, #12]
   return(result);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007324:	637b      	str	r3, [r7, #52]	; 0x34
 8007326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800732e:	61fb      	str	r3, [r7, #28]
 8007330:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	69b9      	ldr	r1, [r7, #24]
 8007334:	69fa      	ldr	r2, [r7, #28]
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	617b      	str	r3, [r7, #20]
   return(result);
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e6      	bne.n	8007310 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007342:	e002      	b.n	800734a <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8007344:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007346:	f004 fd8d 	bl	800be64 <HAL_UART_TxCpltCallback>
}
 800734a:	bf00      	nop
 800734c:	3740      	adds	r7, #64	; 0x40
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f7ff fa25 	bl	80067b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007366:	bf00      	nop
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b09c      	sub	sp, #112	; 0x70
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	2b20      	cmp	r3, #32
 8007382:	d070      	beq.n	8007466 <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 8007384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007386:	2200      	movs	r2, #0
 8007388:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800738c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007394:	e853 3f00 	ldrex	r3, [r3]
 8007398:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800739a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800739c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80073a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80073ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e6      	bne.n	800738c <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3308      	adds	r3, #8
 80073c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c8:	e853 3f00 	ldrex	r3, [r3]
 80073cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d0:	f023 0301 	bic.w	r3, r3, #1
 80073d4:	667b      	str	r3, [r7, #100]	; 0x64
 80073d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3308      	adds	r3, #8
 80073dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80073de:	647a      	str	r2, [r7, #68]	; 0x44
 80073e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073e6:	e841 2300 	strex	r3, r2, [r1]
 80073ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1e5      	bne.n	80073be <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3308      	adds	r3, #8
 80073f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	e853 3f00 	ldrex	r3, [r3]
 8007400:	623b      	str	r3, [r7, #32]
   return(result);
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007408:	663b      	str	r3, [r7, #96]	; 0x60
 800740a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3308      	adds	r3, #8
 8007410:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007412:	633a      	str	r2, [r7, #48]	; 0x30
 8007414:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007416:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800741a:	e841 2300 	strex	r3, r2, [r1]
 800741e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1e5      	bne.n	80073f2 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007428:	2220      	movs	r2, #32
 800742a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800742c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800742e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007430:	2b01      	cmp	r3, #1
 8007432:	d118      	bne.n	8007466 <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	60fb      	str	r3, [r7, #12]
   return(result);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f023 0310 	bic.w	r3, r3, #16
 8007448:	65fb      	str	r3, [r7, #92]	; 0x5c
 800744a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007452:	61fb      	str	r3, [r7, #28]
 8007454:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	69b9      	ldr	r1, [r7, #24]
 8007458:	69fa      	ldr	r2, [r7, #28]
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	617b      	str	r3, [r7, #20]
   return(result);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e6      	bne.n	8007434 <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800746a:	2b01      	cmp	r3, #1
 800746c:	d107      	bne.n	800747e <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800746e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007470:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007474:	4619      	mov	r1, r3
 8007476:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007478:	f7ff f9cc 	bl	8006814 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800747c:	e002      	b.n	8007484 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 800747e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007480:	f004 fd28 	bl	800bed4 <HAL_UART_RxCpltCallback>
}
 8007484:	bf00      	nop
 8007486:	3770      	adds	r7, #112	; 0x70
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d109      	bne.n	80074b6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074a8:	085b      	lsrs	r3, r3, #1
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	4619      	mov	r1, r3
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f7ff f9b0 	bl	8006814 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074b4:	e002      	b.n	80074bc <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f7ff f984 	bl	80067c4 <HAL_UART_RxHalfCpltCallback>
}
 80074bc:	bf00      	nop
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074d6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074dc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e8:	2b80      	cmp	r3, #128	; 0x80
 80074ea:	d109      	bne.n	8007500 <UART_DMAError+0x3c>
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	2b21      	cmp	r3, #33	; 0x21
 80074f0:	d106      	bne.n	8007500 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80074fa:	6978      	ldr	r0, [r7, #20]
 80074fc:	f7ff fe56 	bl	80071ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800750a:	2b40      	cmp	r3, #64	; 0x40
 800750c:	d109      	bne.n	8007522 <UART_DMAError+0x5e>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2b22      	cmp	r3, #34	; 0x22
 8007512:	d106      	bne.n	8007522 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	2200      	movs	r2, #0
 8007518:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800751c:	6978      	ldr	r0, [r7, #20]
 800751e:	f7ff fe6b 	bl	80071f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007528:	f043 0210 	orr.w	r2, r3, #16
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007532:	6978      	ldr	r0, [r7, #20]
 8007534:	f7ff f950 	bl	80067d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007538:	bf00      	nop
 800753a:	3718      	adds	r7, #24
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f7ff f93a 	bl	80067d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007564:	bf00      	nop
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2220      	movs	r2, #32
 8007586:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f7ff f92f 	bl	80067ec <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800758e:	bf00      	nop
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b084      	sub	sp, #16
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a2:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	220f      	movs	r2, #15
 80075b2:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699a      	ldr	r2, [r3, #24]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f042 0208 	orr.w	r2, r2, #8
 80075c2:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2220      	movs	r2, #32
 80075c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f7ff f915 	bl	8006800 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075d6:	bf00      	nop
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80075de:	b480      	push	{r7}
 80075e0:	b08f      	sub	sp, #60	; 0x3c
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075ea:	2b21      	cmp	r3, #33	; 0x21
 80075ec:	d14d      	bne.n	800768a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d132      	bne.n	8007660 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	e853 3f00 	ldrex	r3, [r3]
 8007606:	61fb      	str	r3, [r7, #28]
   return(result);
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800760e:	637b      	str	r3, [r7, #52]	; 0x34
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	461a      	mov	r2, r3
 8007616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800761a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800761e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e6      	bne.n	80075fa <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	60bb      	str	r3, [r7, #8]
   return(result);
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007640:	633b      	str	r3, [r7, #48]	; 0x30
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764a:	61bb      	str	r3, [r7, #24]
 800764c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	6979      	ldr	r1, [r7, #20]
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	e841 2300 	strex	r3, r2, [r1]
 8007656:	613b      	str	r3, [r7, #16]
   return(result);
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1e6      	bne.n	800762c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800765e:	e014      	b.n	800768a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007664:	781a      	ldrb	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	b292      	uxth	r2, r2
 800766c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800767e:	b29b      	uxth	r3, r3
 8007680:	3b01      	subs	r3, #1
 8007682:	b29a      	uxth	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800768a:	bf00      	nop
 800768c:	373c      	adds	r7, #60	; 0x3c
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007696:	b480      	push	{r7}
 8007698:	b091      	sub	sp, #68	; 0x44
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076a2:	2b21      	cmp	r3, #33	; 0x21
 80076a4:	d151      	bne.n	800774a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d132      	bne.n	8007718 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	e853 3f00 	ldrex	r3, [r3]
 80076be:	623b      	str	r3, [r7, #32]
   return(result);
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	461a      	mov	r2, r3
 80076ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d0:	633b      	str	r3, [r7, #48]	; 0x30
 80076d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076d8:	e841 2300 	strex	r3, r2, [r1]
 80076dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1e6      	bne.n	80076b2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	e853 3f00 	ldrex	r3, [r3]
 80076f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076f8:	637b      	str	r3, [r7, #52]	; 0x34
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007702:	61fb      	str	r3, [r7, #28]
 8007704:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007706:	69b9      	ldr	r1, [r7, #24]
 8007708:	69fa      	ldr	r2, [r7, #28]
 800770a:	e841 2300 	strex	r3, r2, [r1]
 800770e:	617b      	str	r3, [r7, #20]
   return(result);
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1e6      	bne.n	80076e4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007716:	e018      	b.n	800774a <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800771c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800771e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007720:	881a      	ldrh	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800772a:	b292      	uxth	r2, r2
 800772c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007732:	1c9a      	adds	r2, r3, #2
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800773e:	b29b      	uxth	r3, r3
 8007740:	3b01      	subs	r3, #1
 8007742:	b29a      	uxth	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800774a:	bf00      	nop
 800774c:	3744      	adds	r7, #68	; 0x44
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b088      	sub	sp, #32
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	60bb      	str	r3, [r7, #8]
   return(result);
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007772:	61fb      	str	r3, [r7, #28]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	461a      	mov	r2, r3
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	61bb      	str	r3, [r7, #24]
 800777e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	6979      	ldr	r1, [r7, #20]
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	e841 2300 	strex	r3, r2, [r1]
 8007788:	613b      	str	r3, [r7, #16]
   return(result);
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e6      	bne.n	800775e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2220      	movs	r2, #32
 8007794:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f004 fb61 	bl	800be64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077a2:	bf00      	nop
 80077a4:	3720      	adds	r7, #32
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b096      	sub	sp, #88	; 0x58
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077c0:	2b22      	cmp	r3, #34	; 0x22
 80077c2:	f040 8094 	bne.w	80078ee <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80077cc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80077d0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80077d4:	b2d9      	uxtb	r1, r3
 80077d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e0:	400a      	ands	r2, r1
 80077e2:	b2d2      	uxtb	r2, r2
 80077e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	3b01      	subs	r3, #1
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007808:	b29b      	uxth	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d177      	bne.n	80078fe <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800781c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007822:	653b      	str	r3, [r7, #80]	; 0x50
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	461a      	mov	r2, r3
 800782a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800782c:	647b      	str	r3, [r7, #68]	; 0x44
 800782e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007832:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800783a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e6      	bne.n	800780e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3308      	adds	r3, #8
 8007846:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	623b      	str	r3, [r7, #32]
   return(result);
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	f023 0301 	bic.w	r3, r3, #1
 8007856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3308      	adds	r3, #8
 800785e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007860:	633a      	str	r2, [r7, #48]	; 0x30
 8007862:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007868:	e841 2300 	strex	r3, r2, [r1]
 800786c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800786e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e5      	bne.n	8007840 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2220      	movs	r2, #32
 8007878:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007884:	2b01      	cmp	r3, #1
 8007886:	d12e      	bne.n	80078e6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	e853 3f00 	ldrex	r3, [r3]
 800789a:	60fb      	str	r3, [r7, #12]
   return(result);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f023 0310 	bic.w	r3, r3, #16
 80078a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	461a      	mov	r2, r3
 80078aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078ac:	61fb      	str	r3, [r7, #28]
 80078ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	69b9      	ldr	r1, [r7, #24]
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	e841 2300 	strex	r3, r2, [r1]
 80078b8:	617b      	str	r3, [r7, #20]
   return(result);
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e6      	bne.n	800788e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	f003 0310 	and.w	r3, r3, #16
 80078ca:	2b10      	cmp	r3, #16
 80078cc:	d103      	bne.n	80078d6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2210      	movs	r2, #16
 80078d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fe ff98 	bl	8006814 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078e4:	e00b      	b.n	80078fe <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f004 faf4 	bl	800bed4 <HAL_UART_RxCpltCallback>
}
 80078ec:	e007      	b.n	80078fe <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	699a      	ldr	r2, [r3, #24]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f042 0208 	orr.w	r2, r2, #8
 80078fc:	619a      	str	r2, [r3, #24]
}
 80078fe:	bf00      	nop
 8007900:	3758      	adds	r7, #88	; 0x58
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b096      	sub	sp, #88	; 0x58
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007914:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800791c:	2b22      	cmp	r3, #34	; 0x22
 800791e:	f040 8094 	bne.w	8007a4a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007928:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007930:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007932:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007936:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800793a:	4013      	ands	r3, r2
 800793c:	b29a      	uxth	r2, r3
 800793e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007940:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007946:	1c9a      	adds	r2, r3, #2
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007952:	b29b      	uxth	r3, r3
 8007954:	3b01      	subs	r3, #1
 8007956:	b29a      	uxth	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007964:	b29b      	uxth	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d177      	bne.n	8007a5a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007972:	e853 3f00 	ldrex	r3, [r3]
 8007976:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800797e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007988:	643b      	str	r3, [r7, #64]	; 0x40
 800798a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800798e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007990:	e841 2300 	strex	r3, r2, [r1]
 8007994:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e6      	bne.n	800796a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3308      	adds	r3, #8
 80079a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	e853 3f00 	ldrex	r3, [r3]
 80079aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	f023 0301 	bic.w	r3, r3, #1
 80079b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3308      	adds	r3, #8
 80079ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079c4:	e841 2300 	strex	r3, r2, [r1]
 80079c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e5      	bne.n	800799c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2220      	movs	r2, #32
 80079d4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d12e      	bne.n	8007a42 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	e853 3f00 	ldrex	r3, [r3]
 80079f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	f023 0310 	bic.w	r3, r3, #16
 80079fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	461a      	mov	r2, r3
 8007a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a08:	61bb      	str	r3, [r7, #24]
 8007a0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0c:	6979      	ldr	r1, [r7, #20]
 8007a0e:	69ba      	ldr	r2, [r7, #24]
 8007a10:	e841 2300 	strex	r3, r2, [r1]
 8007a14:	613b      	str	r3, [r7, #16]
   return(result);
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1e6      	bne.n	80079ea <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	69db      	ldr	r3, [r3, #28]
 8007a22:	f003 0310 	and.w	r3, r3, #16
 8007a26:	2b10      	cmp	r3, #16
 8007a28:	d103      	bne.n	8007a32 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2210      	movs	r2, #16
 8007a30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7fe feea 	bl	8006814 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a40:	e00b      	b.n	8007a5a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f004 fa46 	bl	800bed4 <HAL_UART_RxCpltCallback>
}
 8007a48:	e007      	b.n	8007a5a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	699a      	ldr	r2, [r3, #24]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f042 0208 	orr.w	r2, r2, #8
 8007a58:	619a      	str	r2, [r3, #24]
}
 8007a5a:	bf00      	nop
 8007a5c:	3758      	adds	r7, #88	; 0x58
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b086      	sub	sp, #24
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	60f8      	str	r0, [r7, #12]
 8007a6a:	60b9      	str	r1, [r7, #8]
 8007a6c:	607a      	str	r2, [r7, #4]
 8007a6e:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d101      	bne.n	8007a7a <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e056      	b.n	8007b28 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d106      	bne.n	8007a90 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f007 fe5c 	bl	800f748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2224      	movs	r2, #36	; 0x24
 8007a94:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f022 0201 	bic.w	r2, r2, #1
 8007aa4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f7fe fec0 	bl	800682c <UART_SetConfig>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d101      	bne.n	8007ab6 <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e038      	b.n	8007b28 <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f7ff f88a 	bl	8006bd8 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ad2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	055b      	lsls	r3, r3, #21
 8007aec:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	041b      	lsls	r3, r3, #16
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8007b02:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	6812      	ldr	r2, [r2, #0]
 8007b0a:	6979      	ldr	r1, [r7, #20]
 8007b0c:	430b      	orrs	r3, r1
 8007b0e:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f042 0201 	orr.w	r2, r2, #1
 8007b1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f7ff f8fb 	bl	8006d1c <UART_CheckIdleState>
 8007b26:	4603      	mov	r3, r0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3718      	adds	r7, #24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b56:	2b84      	cmp	r3, #132	; 0x84
 8007b58:	d005      	beq.n	8007b66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007b5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	4413      	add	r3, r2
 8007b62:	3303      	adds	r3, #3
 8007b64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007b66:	68fb      	ldr	r3, [r7, #12]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b7a:	f3ef 8305 	mrs	r3, IPSR
 8007b7e:	607b      	str	r3, [r7, #4]
  return(result);
 8007b80:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	bf14      	ite	ne
 8007b86:	2301      	movne	r3, #1
 8007b88:	2300      	moveq	r3, #0
 8007b8a:	b2db      	uxtb	r3, r3
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007b9c:	f001 fa70 	bl	8009080 <vTaskStartScheduler>
  
  return osOK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007baa:	f7ff ffe3 	bl	8007b74 <inHandlerMode>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007bb4:	f001 fb8e 	bl	80092d4 <xTaskGetTickCountFromISR>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	e002      	b.n	8007bc2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007bbc:	f001 fb7a 	bl	80092b4 <xTaskGetTickCount>
 8007bc0:	4603      	mov	r3, r0
  }
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007bc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bc8:	b089      	sub	sp, #36	; 0x24
 8007bca:	af04      	add	r7, sp, #16
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d020      	beq.n	8007c1a <osThreadCreate+0x54>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d01c      	beq.n	8007c1a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685c      	ldr	r4, [r3, #4]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681d      	ldr	r5, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	691e      	ldr	r6, [r3, #16]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff ffa6 	bl	8007b44 <makeFreeRtosPriority>
 8007bf8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	695b      	ldr	r3, [r3, #20]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c02:	9202      	str	r2, [sp, #8]
 8007c04:	9301      	str	r3, [sp, #4]
 8007c06:	9100      	str	r1, [sp, #0]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	4632      	mov	r2, r6
 8007c0c:	4629      	mov	r1, r5
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f000 ffe2 	bl	8008bd8 <xTaskCreateStatic>
 8007c14:	4603      	mov	r3, r0
 8007c16:	60fb      	str	r3, [r7, #12]
 8007c18:	e01c      	b.n	8007c54 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685c      	ldr	r4, [r3, #4]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c26:	b29e      	uxth	r6, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7ff ff88 	bl	8007b44 <makeFreeRtosPriority>
 8007c34:	4602      	mov	r2, r0
 8007c36:	f107 030c 	add.w	r3, r7, #12
 8007c3a:	9301      	str	r3, [sp, #4]
 8007c3c:	9200      	str	r2, [sp, #0]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	4632      	mov	r2, r6
 8007c42:	4629      	mov	r1, r5
 8007c44:	4620      	mov	r0, r4
 8007c46:	f001 f823 	bl	8008c90 <xTaskCreate>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d001      	beq.n	8007c54 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007c50:	2300      	movs	r3, #0
 8007c52:	e000      	b.n	8007c56 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007c54:	68fb      	ldr	r3, [r7, #12]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c5e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b084      	sub	sp, #16
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <osDelay+0x16>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	e000      	b.n	8007c76 <osDelay+0x18>
 8007c74:	2301      	movs	r3, #1
 8007c76:	4618      	mov	r0, r3
 8007c78:	f001 f9ce 	bl	8009018 <vTaskDelay>
  
  return osOK;
 8007c7c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
	...

08007c88 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af02      	add	r7, sp, #8
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	460b      	mov	r3, r1
 8007c92:	607a      	str	r2, [r7, #4]
 8007c94:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d013      	beq.n	8007cc6 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8007c9e:	7afb      	ldrb	r3, [r7, #11]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d101      	bne.n	8007ca8 <osTimerCreate+0x20>
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	e000      	b.n	8007caa <osTimerCreate+0x22>
 8007ca8:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8007cb2:	9201      	str	r2, [sp, #4]
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	460a      	mov	r2, r1
 8007cba:	2101      	movs	r1, #1
 8007cbc:	480b      	ldr	r0, [pc, #44]	; (8007cec <osTimerCreate+0x64>)
 8007cbe:	f002 f8fe 	bl	8009ebe <xTimerCreateStatic>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	e00e      	b.n	8007ce4 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8007cc6:	7afb      	ldrb	r3, [r7, #11]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d101      	bne.n	8007cd0 <osTimerCreate+0x48>
 8007ccc:	2201      	movs	r2, #1
 8007cce:	e000      	b.n	8007cd2 <osTimerCreate+0x4a>
 8007cd0:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2101      	movs	r1, #1
 8007cdc:	4803      	ldr	r0, [pc, #12]	; (8007cec <osTimerCreate+0x64>)
 8007cde:	f002 f8cd 	bl	8009e7c <xTimerCreate>
 8007ce2:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	08010520 	.word	0x08010520

08007cf0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d007      	beq.n	8007d10 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	4619      	mov	r1, r3
 8007d06:	2001      	movs	r0, #1
 8007d08:	f000 fa42 	bl	8008190 <xQueueCreateMutexStatic>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	e003      	b.n	8007d18 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007d10:	2001      	movs	r0, #1
 8007d12:	f000 fa25 	bl	8008160 <xQueueCreateMutex>
 8007d16:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <osDelayUntil+0x18>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	e000      	b.n	8007d3a <osDelayUntil+0x1a>
 8007d38:	2301      	movs	r3, #1
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f001 f8ed 	bl	8008f1c <vTaskDelayUntil>
  
  return osOK;
 8007d42:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f103 0208 	add.w	r2, r3, #8
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f103 0208 	add.w	r2, r3, #8
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f103 0208 	add.w	r2, r3, #8
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d9a:	bf00      	nop
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007da6:	b480      	push	{r7}
 8007da8:	b085      	sub	sp, #20
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	689a      	ldr	r2, [r3, #8]
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	683a      	ldr	r2, [r7, #0]
 8007dd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	1c5a      	adds	r2, r3, #1
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	601a      	str	r2, [r3, #0]
}
 8007de2:	bf00      	nop
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dee:	b480      	push	{r7}
 8007df0:	b085      	sub	sp, #20
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e04:	d103      	bne.n	8007e0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	e00c      	b.n	8007e28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	3308      	adds	r3, #8
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	e002      	b.n	8007e1c <vListInsert+0x2e>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d2f6      	bcs.n	8007e16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	1c5a      	adds	r2, r3, #1
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	601a      	str	r2, [r3, #0]
}
 8007e54:	bf00      	nop
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	6892      	ldr	r2, [r2, #8]
 8007e76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	6852      	ldr	r2, [r2, #4]
 8007e80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d103      	bne.n	8007e94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689a      	ldr	r2, [r3, #8]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	1e5a      	subs	r2, r3, #1
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10a      	bne.n	8007ede <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007eda:	bf00      	nop
 8007edc:	e7fe      	b.n	8007edc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007ede:	f002 fc39 	bl	800a754 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eea:	68f9      	ldr	r1, [r7, #12]
 8007eec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007eee:	fb01 f303 	mul.w	r3, r1, r3
 8007ef2:	441a      	add	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	68f9      	ldr	r1, [r7, #12]
 8007f12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f14:	fb01 f303 	mul.w	r3, r1, r3
 8007f18:	441a      	add	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	22ff      	movs	r2, #255	; 0xff
 8007f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	22ff      	movs	r2, #255	; 0xff
 8007f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d114      	bne.n	8007f5e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d01a      	beq.n	8007f72 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	3310      	adds	r3, #16
 8007f40:	4618      	mov	r0, r3
 8007f42:	f001 fb49 	bl	80095d8 <xTaskRemoveFromEventList>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d012      	beq.n	8007f72 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f4c:	4b0c      	ldr	r3, [pc, #48]	; (8007f80 <xQueueGenericReset+0xcc>)
 8007f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	f3bf 8f4f 	dsb	sy
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	e009      	b.n	8007f72 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3310      	adds	r3, #16
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7ff fef2 	bl	8007d4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	3324      	adds	r3, #36	; 0x24
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7ff feed 	bl	8007d4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f72:	f002 fc1f 	bl	800a7b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f76:	2301      	movs	r3, #1
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	e000ed04 	.word	0xe000ed04

08007f84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b08e      	sub	sp, #56	; 0x38
 8007f88:	af02      	add	r7, sp, #8
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
 8007f90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10a      	bne.n	8007fae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007faa:	bf00      	nop
 8007fac:	e7fe      	b.n	8007fac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10a      	bne.n	8007fca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007fc6:	bf00      	nop
 8007fc8:	e7fe      	b.n	8007fc8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d002      	beq.n	8007fd6 <xQueueGenericCreateStatic+0x52>
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <xQueueGenericCreateStatic+0x56>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e000      	b.n	8007fdc <xQueueGenericCreateStatic+0x58>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10a      	bne.n	8007ff6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	623b      	str	r3, [r7, #32]
}
 8007ff2:	bf00      	nop
 8007ff4:	e7fe      	b.n	8007ff4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d102      	bne.n	8008002 <xQueueGenericCreateStatic+0x7e>
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d101      	bne.n	8008006 <xQueueGenericCreateStatic+0x82>
 8008002:	2301      	movs	r3, #1
 8008004:	e000      	b.n	8008008 <xQueueGenericCreateStatic+0x84>
 8008006:	2300      	movs	r3, #0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10a      	bne.n	8008022 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800800c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	61fb      	str	r3, [r7, #28]
}
 800801e:	bf00      	nop
 8008020:	e7fe      	b.n	8008020 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008022:	2348      	movs	r3, #72	; 0x48
 8008024:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	2b48      	cmp	r3, #72	; 0x48
 800802a:	d00a      	beq.n	8008042 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	61bb      	str	r3, [r7, #24]
}
 800803e:	bf00      	nop
 8008040:	e7fe      	b.n	8008040 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00d      	beq.n	8008068 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800804c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008054:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	4613      	mov	r3, r2
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	68b9      	ldr	r1, [r7, #8]
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f000 f843 	bl	80080ee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800806a:	4618      	mov	r0, r3
 800806c:	3730      	adds	r7, #48	; 0x30
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008072:	b580      	push	{r7, lr}
 8008074:	b08a      	sub	sp, #40	; 0x28
 8008076:	af02      	add	r7, sp, #8
 8008078:	60f8      	str	r0, [r7, #12]
 800807a:	60b9      	str	r1, [r7, #8]
 800807c:	4613      	mov	r3, r2
 800807e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10a      	bne.n	800809c <xQueueGenericCreate+0x2a>
	__asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808a:	f383 8811 	msr	BASEPRI, r3
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	613b      	str	r3, [r7, #16]
}
 8008098:	bf00      	nop
 800809a:	e7fe      	b.n	800809a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d102      	bne.n	80080a8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80080a2:	2300      	movs	r3, #0
 80080a4:	61fb      	str	r3, [r7, #28]
 80080a6:	e004      	b.n	80080b2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	fb02 f303 	mul.w	r3, r2, r3
 80080b0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	3348      	adds	r3, #72	; 0x48
 80080b6:	4618      	mov	r0, r3
 80080b8:	f002 fc6e 	bl	800a998 <pvPortMalloc>
 80080bc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00f      	beq.n	80080e4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	3348      	adds	r3, #72	; 0x48
 80080c8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080d2:	79fa      	ldrb	r2, [r7, #7]
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	4613      	mov	r3, r2
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	68b9      	ldr	r1, [r7, #8]
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f000 f805 	bl	80080ee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80080e4:	69bb      	ldr	r3, [r7, #24]
	}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3720      	adds	r7, #32
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	60f8      	str	r0, [r7, #12]
 80080f6:	60b9      	str	r1, [r7, #8]
 80080f8:	607a      	str	r2, [r7, #4]
 80080fa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d103      	bne.n	800810a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	69ba      	ldr	r2, [r7, #24]
 8008106:	601a      	str	r2, [r3, #0]
 8008108:	e002      	b.n	8008110 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800811c:	2101      	movs	r1, #1
 800811e:	69b8      	ldr	r0, [r7, #24]
 8008120:	f7ff fec8 	bl	8007eb4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008124:	bf00      	nop
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00e      	beq.n	8008158 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800814c:	2300      	movs	r3, #0
 800814e:	2200      	movs	r2, #0
 8008150:	2100      	movs	r1, #0
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f838 	bl	80081c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008158:	bf00      	nop
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	4603      	mov	r3, r0
 8008168:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800816a:	2301      	movs	r3, #1
 800816c:	617b      	str	r3, [r7, #20]
 800816e:	2300      	movs	r3, #0
 8008170:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008172:	79fb      	ldrb	r3, [r7, #7]
 8008174:	461a      	mov	r2, r3
 8008176:	6939      	ldr	r1, [r7, #16]
 8008178:	6978      	ldr	r0, [r7, #20]
 800817a:	f7ff ff7a 	bl	8008072 <xQueueGenericCreate>
 800817e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f7ff ffd3 	bl	800812c <prvInitialiseMutex>

		return pxNewQueue;
 8008186:	68fb      	ldr	r3, [r7, #12]
	}
 8008188:	4618      	mov	r0, r3
 800818a:	3718      	adds	r7, #24
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008190:	b580      	push	{r7, lr}
 8008192:	b088      	sub	sp, #32
 8008194:	af02      	add	r7, sp, #8
 8008196:	4603      	mov	r3, r0
 8008198:	6039      	str	r1, [r7, #0]
 800819a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800819c:	2301      	movs	r3, #1
 800819e:	617b      	str	r3, [r7, #20]
 80081a0:	2300      	movs	r3, #0
 80081a2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	2200      	movs	r2, #0
 80081ac:	6939      	ldr	r1, [r7, #16]
 80081ae:	6978      	ldr	r0, [r7, #20]
 80081b0:	f7ff fee8 	bl	8007f84 <xQueueGenericCreateStatic>
 80081b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f7ff ffb8 	bl	800812c <prvInitialiseMutex>

		return pxNewQueue;
 80081bc:	68fb      	ldr	r3, [r7, #12]
	}
 80081be:	4618      	mov	r0, r3
 80081c0:	3718      	adds	r7, #24
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08e      	sub	sp, #56	; 0x38
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80081d6:	2300      	movs	r3, #0
 80081d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d10a      	bne.n	80081fa <xQueueGenericSend+0x32>
	__asm volatile
 80081e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081f6:	bf00      	nop
 80081f8:	e7fe      	b.n	80081f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d103      	bne.n	8008208 <xQueueGenericSend+0x40>
 8008200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <xQueueGenericSend+0x44>
 8008208:	2301      	movs	r3, #1
 800820a:	e000      	b.n	800820e <xQueueGenericSend+0x46>
 800820c:	2300      	movs	r3, #0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10a      	bne.n	8008228 <xQueueGenericSend+0x60>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008224:	bf00      	nop
 8008226:	e7fe      	b.n	8008226 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	2b02      	cmp	r3, #2
 800822c:	d103      	bne.n	8008236 <xQueueGenericSend+0x6e>
 800822e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008232:	2b01      	cmp	r3, #1
 8008234:	d101      	bne.n	800823a <xQueueGenericSend+0x72>
 8008236:	2301      	movs	r3, #1
 8008238:	e000      	b.n	800823c <xQueueGenericSend+0x74>
 800823a:	2300      	movs	r3, #0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10a      	bne.n	8008256 <xQueueGenericSend+0x8e>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	623b      	str	r3, [r7, #32]
}
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008256:	f001 fb85 	bl	8009964 <xTaskGetSchedulerState>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d102      	bne.n	8008266 <xQueueGenericSend+0x9e>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <xQueueGenericSend+0xa2>
 8008266:	2301      	movs	r3, #1
 8008268:	e000      	b.n	800826c <xQueueGenericSend+0xa4>
 800826a:	2300      	movs	r3, #0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10a      	bne.n	8008286 <xQueueGenericSend+0xbe>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	61fb      	str	r3, [r7, #28]
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008286:	f002 fa65 	bl	800a754 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800828e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008292:	429a      	cmp	r2, r3
 8008294:	d302      	bcc.n	800829c <xQueueGenericSend+0xd4>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b02      	cmp	r3, #2
 800829a:	d129      	bne.n	80082f0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	68b9      	ldr	r1, [r7, #8]
 80082a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082a2:	f000 fb2b 	bl	80088fc <prvCopyDataToQueue>
 80082a6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d010      	beq.n	80082d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b2:	3324      	adds	r3, #36	; 0x24
 80082b4:	4618      	mov	r0, r3
 80082b6:	f001 f98f 	bl	80095d8 <xTaskRemoveFromEventList>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d013      	beq.n	80082e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80082c0:	4b3f      	ldr	r3, [pc, #252]	; (80083c0 <xQueueGenericSend+0x1f8>)
 80082c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	e00a      	b.n	80082e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80082d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d007      	beq.n	80082e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80082d8:	4b39      	ldr	r3, [pc, #228]	; (80083c0 <xQueueGenericSend+0x1f8>)
 80082da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80082e8:	f002 fa64 	bl	800a7b4 <vPortExitCritical>
				return pdPASS;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e063      	b.n	80083b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d103      	bne.n	80082fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082f6:	f002 fa5d 	bl	800a7b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	e05c      	b.n	80083b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008300:	2b00      	cmp	r3, #0
 8008302:	d106      	bne.n	8008312 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008304:	f107 0314 	add.w	r3, r7, #20
 8008308:	4618      	mov	r0, r3
 800830a:	f001 f9c7 	bl	800969c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800830e:	2301      	movs	r3, #1
 8008310:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008312:	f002 fa4f 	bl	800a7b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008316:	f000 ff23 	bl	8009160 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800831a:	f002 fa1b 	bl	800a754 <vPortEnterCritical>
 800831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008324:	b25b      	sxtb	r3, r3
 8008326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800832a:	d103      	bne.n	8008334 <xQueueGenericSend+0x16c>
 800832c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800833a:	b25b      	sxtb	r3, r3
 800833c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008340:	d103      	bne.n	800834a <xQueueGenericSend+0x182>
 8008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800834a:	f002 fa33 	bl	800a7b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800834e:	1d3a      	adds	r2, r7, #4
 8008350:	f107 0314 	add.w	r3, r7, #20
 8008354:	4611      	mov	r1, r2
 8008356:	4618      	mov	r0, r3
 8008358:	f001 f9b6 	bl	80096c8 <xTaskCheckForTimeOut>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d124      	bne.n	80083ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008364:	f000 fbc2 	bl	8008aec <prvIsQueueFull>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d018      	beq.n	80083a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800836e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008370:	3310      	adds	r3, #16
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	4611      	mov	r1, r2
 8008376:	4618      	mov	r0, r3
 8008378:	f001 f8de 	bl	8009538 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800837c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800837e:	f000 fb4d 	bl	8008a1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008382:	f000 fefb 	bl	800917c <xTaskResumeAll>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	f47f af7c 	bne.w	8008286 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800838e:	4b0c      	ldr	r3, [pc, #48]	; (80083c0 <xQueueGenericSend+0x1f8>)
 8008390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	e772      	b.n	8008286 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083a2:	f000 fb3b 	bl	8008a1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083a6:	f000 fee9 	bl	800917c <xTaskResumeAll>
 80083aa:	e76c      	b.n	8008286 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083ae:	f000 fb35 	bl	8008a1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083b2:	f000 fee3 	bl	800917c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083b6:	2300      	movs	r3, #0
		}
	}
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3738      	adds	r7, #56	; 0x38
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	e000ed04 	.word	0xe000ed04

080083c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b08e      	sub	sp, #56	; 0x38
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
 80083d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80083d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10a      	bne.n	80083f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80083dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083ee:	bf00      	nop
 80083f0:	e7fe      	b.n	80083f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d103      	bne.n	8008400 <xQueueGenericSendFromISR+0x3c>
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <xQueueGenericSendFromISR+0x40>
 8008400:	2301      	movs	r3, #1
 8008402:	e000      	b.n	8008406 <xQueueGenericSendFromISR+0x42>
 8008404:	2300      	movs	r3, #0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10a      	bne.n	8008420 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	623b      	str	r3, [r7, #32]
}
 800841c:	bf00      	nop
 800841e:	e7fe      	b.n	800841e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2b02      	cmp	r3, #2
 8008424:	d103      	bne.n	800842e <xQueueGenericSendFromISR+0x6a>
 8008426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800842a:	2b01      	cmp	r3, #1
 800842c:	d101      	bne.n	8008432 <xQueueGenericSendFromISR+0x6e>
 800842e:	2301      	movs	r3, #1
 8008430:	e000      	b.n	8008434 <xQueueGenericSendFromISR+0x70>
 8008432:	2300      	movs	r3, #0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10a      	bne.n	800844e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843c:	f383 8811 	msr	BASEPRI, r3
 8008440:	f3bf 8f6f 	isb	sy
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	61fb      	str	r3, [r7, #28]
}
 800844a:	bf00      	nop
 800844c:	e7fe      	b.n	800844c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800844e:	f002 fa63 	bl	800a918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008452:	f3ef 8211 	mrs	r2, BASEPRI
 8008456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	61ba      	str	r2, [r7, #24]
 8008468:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800846a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800846c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008476:	429a      	cmp	r2, r3
 8008478:	d302      	bcc.n	8008480 <xQueueGenericSendFromISR+0xbc>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2b02      	cmp	r3, #2
 800847e:	d12c      	bne.n	80084da <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008482:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	68b9      	ldr	r1, [r7, #8]
 800848e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008490:	f000 fa34 	bl	80088fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008494:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800849c:	d112      	bne.n	80084c4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d016      	beq.n	80084d4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a8:	3324      	adds	r3, #36	; 0x24
 80084aa:	4618      	mov	r0, r3
 80084ac:	f001 f894 	bl	80095d8 <xTaskRemoveFromEventList>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00e      	beq.n	80084d4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00b      	beq.n	80084d4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	601a      	str	r2, [r3, #0]
 80084c2:	e007      	b.n	80084d4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084c8:	3301      	adds	r3, #1
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	b25a      	sxtb	r2, r3
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80084d4:	2301      	movs	r3, #1
 80084d6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80084d8:	e001      	b.n	80084de <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80084da:	2300      	movs	r3, #0
 80084dc:	637b      	str	r3, [r7, #52]	; 0x34
 80084de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80084e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3738      	adds	r7, #56	; 0x38
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b08c      	sub	sp, #48	; 0x30
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008500:	2300      	movs	r3, #0
 8008502:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10a      	bne.n	8008524 <xQueueReceive+0x30>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	623b      	str	r3, [r7, #32]
}
 8008520:	bf00      	nop
 8008522:	e7fe      	b.n	8008522 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d103      	bne.n	8008532 <xQueueReceive+0x3e>
 800852a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <xQueueReceive+0x42>
 8008532:	2301      	movs	r3, #1
 8008534:	e000      	b.n	8008538 <xQueueReceive+0x44>
 8008536:	2300      	movs	r3, #0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10a      	bne.n	8008552 <xQueueReceive+0x5e>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	61fb      	str	r3, [r7, #28]
}
 800854e:	bf00      	nop
 8008550:	e7fe      	b.n	8008550 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008552:	f001 fa07 	bl	8009964 <xTaskGetSchedulerState>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d102      	bne.n	8008562 <xQueueReceive+0x6e>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d101      	bne.n	8008566 <xQueueReceive+0x72>
 8008562:	2301      	movs	r3, #1
 8008564:	e000      	b.n	8008568 <xQueueReceive+0x74>
 8008566:	2300      	movs	r3, #0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10a      	bne.n	8008582 <xQueueReceive+0x8e>
	__asm volatile
 800856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	61bb      	str	r3, [r7, #24]
}
 800857e:	bf00      	nop
 8008580:	e7fe      	b.n	8008580 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008582:	f002 f8e7 	bl	800a754 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858e:	2b00      	cmp	r3, #0
 8008590:	d01f      	beq.n	80085d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008592:	68b9      	ldr	r1, [r7, #8]
 8008594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008596:	f000 fa1b 	bl	80089d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	1e5a      	subs	r2, r3, #1
 800859e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00f      	beq.n	80085ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ac:	3310      	adds	r3, #16
 80085ae:	4618      	mov	r0, r3
 80085b0:	f001 f812 	bl	80095d8 <xTaskRemoveFromEventList>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d007      	beq.n	80085ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085ba:	4b3d      	ldr	r3, [pc, #244]	; (80086b0 <xQueueReceive+0x1bc>)
 80085bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085c0:	601a      	str	r2, [r3, #0]
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085ca:	f002 f8f3 	bl	800a7b4 <vPortExitCritical>
				return pdPASS;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e069      	b.n	80086a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d103      	bne.n	80085e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085d8:	f002 f8ec 	bl	800a7b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80085dc:	2300      	movs	r3, #0
 80085de:	e062      	b.n	80086a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d106      	bne.n	80085f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085e6:	f107 0310 	add.w	r3, r7, #16
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 f856 	bl	800969c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085f0:	2301      	movs	r3, #1
 80085f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085f4:	f002 f8de 	bl	800a7b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085f8:	f000 fdb2 	bl	8009160 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085fc:	f002 f8aa 	bl	800a754 <vPortEnterCritical>
 8008600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008602:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008606:	b25b      	sxtb	r3, r3
 8008608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800860c:	d103      	bne.n	8008616 <xQueueReceive+0x122>
 800860e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008610:	2200      	movs	r2, #0
 8008612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008618:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800861c:	b25b      	sxtb	r3, r3
 800861e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008622:	d103      	bne.n	800862c <xQueueReceive+0x138>
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	2200      	movs	r2, #0
 8008628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800862c:	f002 f8c2 	bl	800a7b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008630:	1d3a      	adds	r2, r7, #4
 8008632:	f107 0310 	add.w	r3, r7, #16
 8008636:	4611      	mov	r1, r2
 8008638:	4618      	mov	r0, r3
 800863a:	f001 f845 	bl	80096c8 <xTaskCheckForTimeOut>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d123      	bne.n	800868c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008646:	f000 fa3b 	bl	8008ac0 <prvIsQueueEmpty>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d017      	beq.n	8008680 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008652:	3324      	adds	r3, #36	; 0x24
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	4611      	mov	r1, r2
 8008658:	4618      	mov	r0, r3
 800865a:	f000 ff6d 	bl	8009538 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800865e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008660:	f000 f9dc 	bl	8008a1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008664:	f000 fd8a 	bl	800917c <xTaskResumeAll>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d189      	bne.n	8008582 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800866e:	4b10      	ldr	r3, [pc, #64]	; (80086b0 <xQueueReceive+0x1bc>)
 8008670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	e780      	b.n	8008582 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008682:	f000 f9cb 	bl	8008a1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008686:	f000 fd79 	bl	800917c <xTaskResumeAll>
 800868a:	e77a      	b.n	8008582 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800868c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800868e:	f000 f9c5 	bl	8008a1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008692:	f000 fd73 	bl	800917c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008698:	f000 fa12 	bl	8008ac0 <prvIsQueueEmpty>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f43f af6f 	beq.w	8008582 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3730      	adds	r7, #48	; 0x30
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	e000ed04 	.word	0xe000ed04

080086b4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b08e      	sub	sp, #56	; 0x38
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80086be:	2300      	movs	r3, #0
 80086c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80086c6:	2300      	movs	r3, #0
 80086c8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80086ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10a      	bne.n	80086e6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	623b      	str	r3, [r7, #32]
}
 80086e2:	bf00      	nop
 80086e4:	e7fe      	b.n	80086e4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80086e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00a      	beq.n	8008704 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80086ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	61fb      	str	r3, [r7, #28]
}
 8008700:	bf00      	nop
 8008702:	e7fe      	b.n	8008702 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008704:	f001 f92e 	bl	8009964 <xTaskGetSchedulerState>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d102      	bne.n	8008714 <xQueueSemaphoreTake+0x60>
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <xQueueSemaphoreTake+0x64>
 8008714:	2301      	movs	r3, #1
 8008716:	e000      	b.n	800871a <xQueueSemaphoreTake+0x66>
 8008718:	2300      	movs	r3, #0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10a      	bne.n	8008734 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800871e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	61bb      	str	r3, [r7, #24]
}
 8008730:	bf00      	nop
 8008732:	e7fe      	b.n	8008732 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008734:	f002 f80e 	bl	800a754 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008740:	2b00      	cmp	r3, #0
 8008742:	d024      	beq.n	800878e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008746:	1e5a      	subs	r2, r3, #1
 8008748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800874c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d104      	bne.n	800875e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008754:	f001 fad0 	bl	8009cf8 <pvTaskIncrementMutexHeldCount>
 8008758:	4602      	mov	r2, r0
 800875a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800875e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00f      	beq.n	8008786 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008768:	3310      	adds	r3, #16
 800876a:	4618      	mov	r0, r3
 800876c:	f000 ff34 	bl	80095d8 <xTaskRemoveFromEventList>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d007      	beq.n	8008786 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008776:	4b54      	ldr	r3, [pc, #336]	; (80088c8 <xQueueSemaphoreTake+0x214>)
 8008778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008786:	f002 f815 	bl	800a7b4 <vPortExitCritical>
				return pdPASS;
 800878a:	2301      	movs	r3, #1
 800878c:	e097      	b.n	80088be <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d111      	bne.n	80087b8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00a      	beq.n	80087b0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800879a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879e:	f383 8811 	msr	BASEPRI, r3
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	f3bf 8f4f 	dsb	sy
 80087aa:	617b      	str	r3, [r7, #20]
}
 80087ac:	bf00      	nop
 80087ae:	e7fe      	b.n	80087ae <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80087b0:	f002 f800 	bl	800a7b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087b4:	2300      	movs	r3, #0
 80087b6:	e082      	b.n	80088be <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d106      	bne.n	80087cc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087be:	f107 030c 	add.w	r3, r7, #12
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 ff6a 	bl	800969c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087c8:	2301      	movs	r3, #1
 80087ca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087cc:	f001 fff2 	bl	800a7b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087d0:	f000 fcc6 	bl	8009160 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087d4:	f001 ffbe 	bl	800a754 <vPortEnterCritical>
 80087d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087de:	b25b      	sxtb	r3, r3
 80087e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087e4:	d103      	bne.n	80087ee <xQueueSemaphoreTake+0x13a>
 80087e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087f4:	b25b      	sxtb	r3, r3
 80087f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087fa:	d103      	bne.n	8008804 <xQueueSemaphoreTake+0x150>
 80087fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008804:	f001 ffd6 	bl	800a7b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008808:	463a      	mov	r2, r7
 800880a:	f107 030c 	add.w	r3, r7, #12
 800880e:	4611      	mov	r1, r2
 8008810:	4618      	mov	r0, r3
 8008812:	f000 ff59 	bl	80096c8 <xTaskCheckForTimeOut>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d132      	bne.n	8008882 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800881c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800881e:	f000 f94f 	bl	8008ac0 <prvIsQueueEmpty>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d026      	beq.n	8008876 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d109      	bne.n	8008844 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008830:	f001 ff90 	bl	800a754 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	4618      	mov	r0, r3
 800883a:	f001 f8b1 	bl	80099a0 <xTaskPriorityInherit>
 800883e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008840:	f001 ffb8 	bl	800a7b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008846:	3324      	adds	r3, #36	; 0x24
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	4611      	mov	r1, r2
 800884c:	4618      	mov	r0, r3
 800884e:	f000 fe73 	bl	8009538 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008852:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008854:	f000 f8e2 	bl	8008a1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008858:	f000 fc90 	bl	800917c <xTaskResumeAll>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	f47f af68 	bne.w	8008734 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008864:	4b18      	ldr	r3, [pc, #96]	; (80088c8 <xQueueSemaphoreTake+0x214>)
 8008866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	e75e      	b.n	8008734 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008876:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008878:	f000 f8d0 	bl	8008a1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800887c:	f000 fc7e 	bl	800917c <xTaskResumeAll>
 8008880:	e758      	b.n	8008734 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008882:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008884:	f000 f8ca 	bl	8008a1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008888:	f000 fc78 	bl	800917c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800888c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800888e:	f000 f917 	bl	8008ac0 <prvIsQueueEmpty>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	f43f af4d 	beq.w	8008734 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00d      	beq.n	80088bc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80088a0:	f001 ff58 	bl	800a754 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80088a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088a6:	f000 f811 	bl	80088cc <prvGetDisinheritPriorityAfterTimeout>
 80088aa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80088ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088b2:	4618      	mov	r0, r3
 80088b4:	f001 f980 	bl	8009bb8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80088b8:	f001 ff7c 	bl	800a7b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80088bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3738      	adds	r7, #56	; 0x38
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	e000ed04 	.word	0xe000ed04

080088cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d006      	beq.n	80088ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f1c3 0304 	rsb	r3, r3, #4
 80088e6:	60fb      	str	r3, [r7, #12]
 80088e8:	e001      	b.n	80088ee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80088ea:	2300      	movs	r3, #0
 80088ec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80088ee:	68fb      	ldr	r3, [r7, #12]
	}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008908:	2300      	movs	r3, #0
 800890a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008910:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10d      	bne.n	8008936 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d14d      	bne.n	80089be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	4618      	mov	r0, r3
 8008928:	f001 f8c0 	bl	8009aac <xTaskPriorityDisinherit>
 800892c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	605a      	str	r2, [r3, #4]
 8008934:	e043      	b.n	80089be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d119      	bne.n	8008970 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6898      	ldr	r0, [r3, #8]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008944:	461a      	mov	r2, r3
 8008946:	68b9      	ldr	r1, [r7, #8]
 8008948:	f007 f974 	bl	800fc34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	689a      	ldr	r2, [r3, #8]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008954:	441a      	add	r2, r3
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	689a      	ldr	r2, [r3, #8]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	429a      	cmp	r2, r3
 8008964:	d32b      	bcc.n	80089be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	609a      	str	r2, [r3, #8]
 800896e:	e026      	b.n	80089be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	68d8      	ldr	r0, [r3, #12]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008978:	461a      	mov	r2, r3
 800897a:	68b9      	ldr	r1, [r7, #8]
 800897c:	f007 f95a 	bl	800fc34 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	68da      	ldr	r2, [r3, #12]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008988:	425b      	negs	r3, r3
 800898a:	441a      	add	r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	68da      	ldr	r2, [r3, #12]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	429a      	cmp	r2, r3
 800899a:	d207      	bcs.n	80089ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a4:	425b      	negs	r3, r3
 80089a6:	441a      	add	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d105      	bne.n	80089be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	3b01      	subs	r3, #1
 80089bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	1c5a      	adds	r2, r3, #1
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80089c6:	697b      	ldr	r3, [r7, #20]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3718      	adds	r7, #24
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d018      	beq.n	8008a14 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	68da      	ldr	r2, [r3, #12]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ea:	441a      	add	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	68da      	ldr	r2, [r3, #12]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d303      	bcc.n	8008a04 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	68d9      	ldr	r1, [r3, #12]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	6838      	ldr	r0, [r7, #0]
 8008a10:	f007 f910 	bl	800fc34 <memcpy>
	}
}
 8008a14:	bf00      	nop
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a24:	f001 fe96 	bl	800a754 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a30:	e011      	b.n	8008a56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d012      	beq.n	8008a60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	3324      	adds	r3, #36	; 0x24
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 fdca 	bl	80095d8 <xTaskRemoveFromEventList>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a4a:	f000 fe9f 	bl	800978c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	dce9      	bgt.n	8008a32 <prvUnlockQueue+0x16>
 8008a5e:	e000      	b.n	8008a62 <prvUnlockQueue+0x46>
					break;
 8008a60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	22ff      	movs	r2, #255	; 0xff
 8008a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008a6a:	f001 fea3 	bl	800a7b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a6e:	f001 fe71 	bl	800a754 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a7a:	e011      	b.n	8008aa0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d012      	beq.n	8008aaa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	3310      	adds	r3, #16
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f000 fda5 	bl	80095d8 <xTaskRemoveFromEventList>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a94:	f000 fe7a 	bl	800978c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008aa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	dce9      	bgt.n	8008a7c <prvUnlockQueue+0x60>
 8008aa8:	e000      	b.n	8008aac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008aaa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	22ff      	movs	r2, #255	; 0xff
 8008ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008ab4:	f001 fe7e 	bl	800a7b4 <vPortExitCritical>
}
 8008ab8:	bf00      	nop
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ac8:	f001 fe44 	bl	800a754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d102      	bne.n	8008ada <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	60fb      	str	r3, [r7, #12]
 8008ad8:	e001      	b.n	8008ade <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ada:	2300      	movs	r3, #0
 8008adc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ade:	f001 fe69 	bl	800a7b4 <vPortExitCritical>

	return xReturn;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008af4:	f001 fe2e 	bl	800a754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d102      	bne.n	8008b0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008b04:	2301      	movs	r3, #1
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	e001      	b.n	8008b0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b0e:	f001 fe51 	bl	800a7b4 <vPortExitCritical>

	return xReturn;
 8008b12:	68fb      	ldr	r3, [r7, #12]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b26:	2300      	movs	r3, #0
 8008b28:	60fb      	str	r3, [r7, #12]
 8008b2a:	e014      	b.n	8008b56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008b2c:	4a0f      	ldr	r2, [pc, #60]	; (8008b6c <vQueueAddToRegistry+0x50>)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10b      	bne.n	8008b50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008b38:	490c      	ldr	r1, [pc, #48]	; (8008b6c <vQueueAddToRegistry+0x50>)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008b42:	4a0a      	ldr	r2, [pc, #40]	; (8008b6c <vQueueAddToRegistry+0x50>)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	00db      	lsls	r3, r3, #3
 8008b48:	4413      	add	r3, r2
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b4e:	e006      	b.n	8008b5e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	3301      	adds	r3, #1
 8008b54:	60fb      	str	r3, [r7, #12]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2b07      	cmp	r3, #7
 8008b5a:	d9e7      	bls.n	8008b2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b5c:	bf00      	nop
 8008b5e:	bf00      	nop
 8008b60:	3714      	adds	r7, #20
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	200001d0 	.word	0x200001d0

08008b70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b086      	sub	sp, #24
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b80:	f001 fde8 	bl	800a754 <vPortEnterCritical>
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b8a:	b25b      	sxtb	r3, r3
 8008b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b90:	d103      	bne.n	8008b9a <vQueueWaitForMessageRestricted+0x2a>
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ba0:	b25b      	sxtb	r3, r3
 8008ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ba6:	d103      	bne.n	8008bb0 <vQueueWaitForMessageRestricted+0x40>
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bb0:	f001 fe00 	bl	800a7b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d106      	bne.n	8008bca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	3324      	adds	r3, #36	; 0x24
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	68b9      	ldr	r1, [r7, #8]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 fcdb 	bl	8009580 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008bca:	6978      	ldr	r0, [r7, #20]
 8008bcc:	f7ff ff26 	bl	8008a1c <prvUnlockQueue>
	}
 8008bd0:	bf00      	nop
 8008bd2:	3718      	adds	r7, #24
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b08e      	sub	sp, #56	; 0x38
 8008bdc:	af04      	add	r7, sp, #16
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
 8008be4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d10a      	bne.n	8008c02 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf0:	f383 8811 	msr	BASEPRI, r3
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	623b      	str	r3, [r7, #32]
}
 8008bfe:	bf00      	nop
 8008c00:	e7fe      	b.n	8008c00 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d10a      	bne.n	8008c1e <xTaskCreateStatic+0x46>
	__asm volatile
 8008c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	61fb      	str	r3, [r7, #28]
}
 8008c1a:	bf00      	nop
 8008c1c:	e7fe      	b.n	8008c1c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c1e:	23c4      	movs	r3, #196	; 0xc4
 8008c20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	2bc4      	cmp	r3, #196	; 0xc4
 8008c26:	d00a      	beq.n	8008c3e <xTaskCreateStatic+0x66>
	__asm volatile
 8008c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2c:	f383 8811 	msr	BASEPRI, r3
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	61bb      	str	r3, [r7, #24]
}
 8008c3a:	bf00      	nop
 8008c3c:	e7fe      	b.n	8008c3c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d01e      	beq.n	8008c82 <xTaskCreateStatic+0xaa>
 8008c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d01b      	beq.n	8008c82 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c52:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c56:	2202      	movs	r2, #2
 8008c58:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	9303      	str	r3, [sp, #12]
 8008c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c62:	9302      	str	r3, [sp, #8]
 8008c64:	f107 0314 	add.w	r3, r7, #20
 8008c68:	9301      	str	r3, [sp, #4]
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	68b9      	ldr	r1, [r7, #8]
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f000 f851 	bl	8008d1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c7c:	f000 f8e4 	bl	8008e48 <prvAddNewTaskToReadyList>
 8008c80:	e001      	b.n	8008c86 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008c82:	2300      	movs	r3, #0
 8008c84:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c86:	697b      	ldr	r3, [r7, #20]
	}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3728      	adds	r7, #40	; 0x28
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b08c      	sub	sp, #48	; 0x30
 8008c94:	af04      	add	r7, sp, #16
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	603b      	str	r3, [r7, #0]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ca0:	88fb      	ldrh	r3, [r7, #6]
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f001 fe77 	bl	800a998 <pvPortMalloc>
 8008caa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00e      	beq.n	8008cd0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008cb2:	20c4      	movs	r0, #196	; 0xc4
 8008cb4:	f001 fe70 	bl	800a998 <pvPortMalloc>
 8008cb8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d003      	beq.n	8008cc8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	631a      	str	r2, [r3, #48]	; 0x30
 8008cc6:	e005      	b.n	8008cd4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008cc8:	6978      	ldr	r0, [r7, #20]
 8008cca:	f001 ff29 	bl	800ab20 <vPortFree>
 8008cce:	e001      	b.n	8008cd4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d017      	beq.n	8008d0a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ce2:	88fa      	ldrh	r2, [r7, #6]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	9303      	str	r3, [sp, #12]
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	9302      	str	r3, [sp, #8]
 8008cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cee:	9301      	str	r3, [sp, #4]
 8008cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf2:	9300      	str	r3, [sp, #0]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	68b9      	ldr	r1, [r7, #8]
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f000 f80f 	bl	8008d1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cfe:	69f8      	ldr	r0, [r7, #28]
 8008d00:	f000 f8a2 	bl	8008e48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d04:	2301      	movs	r3, #1
 8008d06:	61bb      	str	r3, [r7, #24]
 8008d08:	e002      	b.n	8008d10 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d10:	69bb      	ldr	r3, [r7, #24]
	}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3720      	adds	r7, #32
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b088      	sub	sp, #32
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
 8008d28:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d34:	3b01      	subs	r3, #1
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	f023 0307 	bic.w	r3, r3, #7
 8008d42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	f003 0307 	and.w	r3, r3, #7
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00a      	beq.n	8008d64 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	617b      	str	r3, [r7, #20]
}
 8008d60:	bf00      	nop
 8008d62:	e7fe      	b.n	8008d62 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d64:	2300      	movs	r3, #0
 8008d66:	61fb      	str	r3, [r7, #28]
 8008d68:	e012      	b.n	8008d90 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	4413      	add	r3, r2
 8008d70:	7819      	ldrb	r1, [r3, #0]
 8008d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	4413      	add	r3, r2
 8008d78:	3334      	adds	r3, #52	; 0x34
 8008d7a:	460a      	mov	r2, r1
 8008d7c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	4413      	add	r3, r2
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d006      	beq.n	8008d98 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	61fb      	str	r3, [r7, #28]
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	2b1f      	cmp	r3, #31
 8008d94:	d9e9      	bls.n	8008d6a <prvInitialiseNewTask+0x4e>
 8008d96:	e000      	b.n	8008d9a <prvInitialiseNewTask+0x7e>
		{
			break;
 8008d98:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da4:	2b03      	cmp	r3, #3
 8008da6:	d901      	bls.n	8008dac <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008da8:	2303      	movs	r3, #3
 8008daa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008db0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008db6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8008db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dba:	2200      	movs	r2, #0
 8008dbc:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7fe ffe2 	bl	8007d8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dca:	3318      	adds	r3, #24
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7fe ffdd 	bl	8007d8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dda:	f1c3 0204 	rsb	r2, r3, #4
 8008dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008de6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dea:	2200      	movs	r2, #0
 8008dec:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfa:	335c      	adds	r3, #92	; 0x5c
 8008dfc:	2260      	movs	r2, #96	; 0x60
 8008dfe:	2100      	movs	r1, #0
 8008e00:	4618      	mov	r0, r3
 8008e02:	f006 ff25 	bl	800fc50 <memset>
 8008e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e08:	4a0c      	ldr	r2, [pc, #48]	; (8008e3c <prvInitialiseNewTask+0x120>)
 8008e0a:	661a      	str	r2, [r3, #96]	; 0x60
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	4a0c      	ldr	r2, [pc, #48]	; (8008e40 <prvInitialiseNewTask+0x124>)
 8008e10:	665a      	str	r2, [r3, #100]	; 0x64
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	4a0b      	ldr	r2, [pc, #44]	; (8008e44 <prvInitialiseNewTask+0x128>)
 8008e16:	669a      	str	r2, [r3, #104]	; 0x68
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e18:	683a      	ldr	r2, [r7, #0]
 8008e1a:	68f9      	ldr	r1, [r7, #12]
 8008e1c:	69b8      	ldr	r0, [r7, #24]
 8008e1e:	f001 fb6d 	bl	800a4fc <pxPortInitialiseStack>
 8008e22:	4602      	mov	r2, r0
 8008e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e26:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d002      	beq.n	8008e34 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e34:	bf00      	nop
 8008e36:	3720      	adds	r7, #32
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	080106e8 	.word	0x080106e8
 8008e40:	08010708 	.word	0x08010708
 8008e44:	080106c8 	.word	0x080106c8

08008e48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e50:	f001 fc80 	bl	800a754 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e54:	4b2a      	ldr	r3, [pc, #168]	; (8008f00 <prvAddNewTaskToReadyList+0xb8>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	4a29      	ldr	r2, [pc, #164]	; (8008f00 <prvAddNewTaskToReadyList+0xb8>)
 8008e5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e5e:	4b29      	ldr	r3, [pc, #164]	; (8008f04 <prvAddNewTaskToReadyList+0xbc>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d109      	bne.n	8008e7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e66:	4a27      	ldr	r2, [pc, #156]	; (8008f04 <prvAddNewTaskToReadyList+0xbc>)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e6c:	4b24      	ldr	r3, [pc, #144]	; (8008f00 <prvAddNewTaskToReadyList+0xb8>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d110      	bne.n	8008e96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e74:	f000 fcae 	bl	80097d4 <prvInitialiseTaskLists>
 8008e78:	e00d      	b.n	8008e96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e7a:	4b23      	ldr	r3, [pc, #140]	; (8008f08 <prvAddNewTaskToReadyList+0xc0>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d109      	bne.n	8008e96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e82:	4b20      	ldr	r3, [pc, #128]	; (8008f04 <prvAddNewTaskToReadyList+0xbc>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d802      	bhi.n	8008e96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e90:	4a1c      	ldr	r2, [pc, #112]	; (8008f04 <prvAddNewTaskToReadyList+0xbc>)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e96:	4b1d      	ldr	r3, [pc, #116]	; (8008f0c <prvAddNewTaskToReadyList+0xc4>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	4a1b      	ldr	r2, [pc, #108]	; (8008f0c <prvAddNewTaskToReadyList+0xc4>)
 8008e9e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	409a      	lsls	r2, r3
 8008ea8:	4b19      	ldr	r3, [pc, #100]	; (8008f10 <prvAddNewTaskToReadyList+0xc8>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	4a18      	ldr	r2, [pc, #96]	; (8008f10 <prvAddNewTaskToReadyList+0xc8>)
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4413      	add	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4a15      	ldr	r2, [pc, #84]	; (8008f14 <prvAddNewTaskToReadyList+0xcc>)
 8008ec0:	441a      	add	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	4610      	mov	r0, r2
 8008eca:	f7fe ff6c 	bl	8007da6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ece:	f001 fc71 	bl	800a7b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ed2:	4b0d      	ldr	r3, [pc, #52]	; (8008f08 <prvAddNewTaskToReadyList+0xc0>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00e      	beq.n	8008ef8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008eda:	4b0a      	ldr	r3, [pc, #40]	; (8008f04 <prvAddNewTaskToReadyList+0xbc>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d207      	bcs.n	8008ef8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ee8:	4b0b      	ldr	r3, [pc, #44]	; (8008f18 <prvAddNewTaskToReadyList+0xd0>)
 8008eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eee:	601a      	str	r2, [r3, #0]
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ef8:	bf00      	nop
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	200002d4 	.word	0x200002d4
 8008f04:	20000210 	.word	0x20000210
 8008f08:	200002e0 	.word	0x200002e0
 8008f0c:	200002f0 	.word	0x200002f0
 8008f10:	200002dc 	.word	0x200002dc
 8008f14:	20000214 	.word	0x20000214
 8008f18:	e000ed04 	.word	0xe000ed04

08008f1c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b08a      	sub	sp, #40	; 0x28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008f26:	2300      	movs	r3, #0
 8008f28:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d10a      	bne.n	8008f46 <vTaskDelayUntil+0x2a>
	__asm volatile
 8008f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	617b      	str	r3, [r7, #20]
}
 8008f42:	bf00      	nop
 8008f44:	e7fe      	b.n	8008f44 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10a      	bne.n	8008f62 <vTaskDelayUntil+0x46>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	613b      	str	r3, [r7, #16]
}
 8008f5e:	bf00      	nop
 8008f60:	e7fe      	b.n	8008f60 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8008f62:	4b2a      	ldr	r3, [pc, #168]	; (800900c <vTaskDelayUntil+0xf0>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00a      	beq.n	8008f80 <vTaskDelayUntil+0x64>
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	60fb      	str	r3, [r7, #12]
}
 8008f7c:	bf00      	nop
 8008f7e:	e7fe      	b.n	8008f7e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8008f80:	f000 f8ee 	bl	8009160 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008f84:	4b22      	ldr	r3, [pc, #136]	; (8009010 <vTaskDelayUntil+0xf4>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	683a      	ldr	r2, [r7, #0]
 8008f90:	4413      	add	r3, r2
 8008f92:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6a3a      	ldr	r2, [r7, #32]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d20b      	bcs.n	8008fb6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	69fa      	ldr	r2, [r7, #28]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d211      	bcs.n	8008fcc <vTaskDelayUntil+0xb0>
 8008fa8:	69fa      	ldr	r2, [r7, #28]
 8008faa:	6a3b      	ldr	r3, [r7, #32]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d90d      	bls.n	8008fcc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8008fb4:	e00a      	b.n	8008fcc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	69fa      	ldr	r2, [r7, #28]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d303      	bcc.n	8008fc8 <vTaskDelayUntil+0xac>
 8008fc0:	69fa      	ldr	r2, [r7, #28]
 8008fc2:	6a3b      	ldr	r3, [r7, #32]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d901      	bls.n	8008fcc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	69fa      	ldr	r2, [r7, #28]
 8008fd0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d006      	beq.n	8008fe6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008fd8:	69fa      	ldr	r2, [r7, #28]
 8008fda:	6a3b      	ldr	r3, [r7, #32]
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	2100      	movs	r1, #0
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 fe9d 	bl	8009d20 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008fe6:	f000 f8c9 	bl	800917c <xTaskResumeAll>
 8008fea:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d107      	bne.n	8009002 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8008ff2:	4b08      	ldr	r3, [pc, #32]	; (8009014 <vTaskDelayUntil+0xf8>)
 8008ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ff8:	601a      	str	r2, [r3, #0]
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009002:	bf00      	nop
 8009004:	3728      	adds	r7, #40	; 0x28
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	200002fc 	.word	0x200002fc
 8009010:	200002d8 	.word	0x200002d8
 8009014:	e000ed04 	.word	0xe000ed04

08009018 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009020:	2300      	movs	r3, #0
 8009022:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d017      	beq.n	800905a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800902a:	4b13      	ldr	r3, [pc, #76]	; (8009078 <vTaskDelay+0x60>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00a      	beq.n	8009048 <vTaskDelay+0x30>
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	60bb      	str	r3, [r7, #8]
}
 8009044:	bf00      	nop
 8009046:	e7fe      	b.n	8009046 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009048:	f000 f88a 	bl	8009160 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800904c:	2100      	movs	r1, #0
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fe66 	bl	8009d20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009054:	f000 f892 	bl	800917c <xTaskResumeAll>
 8009058:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d107      	bne.n	8009070 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009060:	4b06      	ldr	r3, [pc, #24]	; (800907c <vTaskDelay+0x64>)
 8009062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009070:	bf00      	nop
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	200002fc 	.word	0x200002fc
 800907c:	e000ed04 	.word	0xe000ed04

08009080 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b08a      	sub	sp, #40	; 0x28
 8009084:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009086:	2300      	movs	r3, #0
 8009088:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800908a:	2300      	movs	r3, #0
 800908c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800908e:	463a      	mov	r2, r7
 8009090:	1d39      	adds	r1, r7, #4
 8009092:	f107 0308 	add.w	r3, r7, #8
 8009096:	4618      	mov	r0, r3
 8009098:	f004 fa20 	bl	800d4dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800909c:	6839      	ldr	r1, [r7, #0]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	9202      	str	r2, [sp, #8]
 80090a4:	9301      	str	r3, [sp, #4]
 80090a6:	2300      	movs	r3, #0
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	2300      	movs	r3, #0
 80090ac:	460a      	mov	r2, r1
 80090ae:	4924      	ldr	r1, [pc, #144]	; (8009140 <vTaskStartScheduler+0xc0>)
 80090b0:	4824      	ldr	r0, [pc, #144]	; (8009144 <vTaskStartScheduler+0xc4>)
 80090b2:	f7ff fd91 	bl	8008bd8 <xTaskCreateStatic>
 80090b6:	4603      	mov	r3, r0
 80090b8:	4a23      	ldr	r2, [pc, #140]	; (8009148 <vTaskStartScheduler+0xc8>)
 80090ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80090bc:	4b22      	ldr	r3, [pc, #136]	; (8009148 <vTaskStartScheduler+0xc8>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d002      	beq.n	80090ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80090c4:	2301      	movs	r3, #1
 80090c6:	617b      	str	r3, [r7, #20]
 80090c8:	e001      	b.n	80090ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80090ca:	2300      	movs	r3, #0
 80090cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d102      	bne.n	80090da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80090d4:	f000 fe8a 	bl	8009dec <xTimerCreateTimerTask>
 80090d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d11b      	bne.n	8009118 <vTaskStartScheduler+0x98>
	__asm volatile
 80090e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	613b      	str	r3, [r7, #16]
}
 80090f2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80090f4:	4b15      	ldr	r3, [pc, #84]	; (800914c <vTaskStartScheduler+0xcc>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	335c      	adds	r3, #92	; 0x5c
 80090fa:	4a15      	ldr	r2, [pc, #84]	; (8009150 <vTaskStartScheduler+0xd0>)
 80090fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80090fe:	4b15      	ldr	r3, [pc, #84]	; (8009154 <vTaskStartScheduler+0xd4>)
 8009100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009104:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009106:	4b14      	ldr	r3, [pc, #80]	; (8009158 <vTaskStartScheduler+0xd8>)
 8009108:	2201      	movs	r2, #1
 800910a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800910c:	4b13      	ldr	r3, [pc, #76]	; (800915c <vTaskStartScheduler+0xdc>)
 800910e:	2200      	movs	r2, #0
 8009110:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009112:	f001 fa7d 	bl	800a610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009116:	e00e      	b.n	8009136 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800911e:	d10a      	bne.n	8009136 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	60fb      	str	r3, [r7, #12]
}
 8009132:	bf00      	nop
 8009134:	e7fe      	b.n	8009134 <vTaskStartScheduler+0xb4>
}
 8009136:	bf00      	nop
 8009138:	3718      	adds	r7, #24
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	08010524 	.word	0x08010524
 8009144:	080097a5 	.word	0x080097a5
 8009148:	200002f8 	.word	0x200002f8
 800914c:	20000210 	.word	0x20000210
 8009150:	20000128 	.word	0x20000128
 8009154:	200002f4 	.word	0x200002f4
 8009158:	200002e0 	.word	0x200002e0
 800915c:	200002d8 	.word	0x200002d8

08009160 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009160:	b480      	push	{r7}
 8009162:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009164:	4b04      	ldr	r3, [pc, #16]	; (8009178 <vTaskSuspendAll+0x18>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	3301      	adds	r3, #1
 800916a:	4a03      	ldr	r2, [pc, #12]	; (8009178 <vTaskSuspendAll+0x18>)
 800916c:	6013      	str	r3, [r2, #0]
}
 800916e:	bf00      	nop
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr
 8009178:	200002fc 	.word	0x200002fc

0800917c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009182:	2300      	movs	r3, #0
 8009184:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009186:	2300      	movs	r3, #0
 8009188:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800918a:	4b41      	ldr	r3, [pc, #260]	; (8009290 <xTaskResumeAll+0x114>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10a      	bne.n	80091a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8009192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009196:	f383 8811 	msr	BASEPRI, r3
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	603b      	str	r3, [r7, #0]
}
 80091a4:	bf00      	nop
 80091a6:	e7fe      	b.n	80091a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80091a8:	f001 fad4 	bl	800a754 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80091ac:	4b38      	ldr	r3, [pc, #224]	; (8009290 <xTaskResumeAll+0x114>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	3b01      	subs	r3, #1
 80091b2:	4a37      	ldr	r2, [pc, #220]	; (8009290 <xTaskResumeAll+0x114>)
 80091b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091b6:	4b36      	ldr	r3, [pc, #216]	; (8009290 <xTaskResumeAll+0x114>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d161      	bne.n	8009282 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80091be:	4b35      	ldr	r3, [pc, #212]	; (8009294 <xTaskResumeAll+0x118>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d05d      	beq.n	8009282 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091c6:	e02e      	b.n	8009226 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80091c8:	4b33      	ldr	r3, [pc, #204]	; (8009298 <xTaskResumeAll+0x11c>)
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	3318      	adds	r3, #24
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fe fe43 	bl	8007e60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	3304      	adds	r3, #4
 80091de:	4618      	mov	r0, r3
 80091e0:	f7fe fe3e 	bl	8007e60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e8:	2201      	movs	r2, #1
 80091ea:	409a      	lsls	r2, r3
 80091ec:	4b2b      	ldr	r3, [pc, #172]	; (800929c <xTaskResumeAll+0x120>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4313      	orrs	r3, r2
 80091f2:	4a2a      	ldr	r2, [pc, #168]	; (800929c <xTaskResumeAll+0x120>)
 80091f4:	6013      	str	r3, [r2, #0]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091fa:	4613      	mov	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	4413      	add	r3, r2
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4a27      	ldr	r2, [pc, #156]	; (80092a0 <xTaskResumeAll+0x124>)
 8009204:	441a      	add	r2, r3
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	3304      	adds	r3, #4
 800920a:	4619      	mov	r1, r3
 800920c:	4610      	mov	r0, r2
 800920e:	f7fe fdca 	bl	8007da6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009216:	4b23      	ldr	r3, [pc, #140]	; (80092a4 <xTaskResumeAll+0x128>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921c:	429a      	cmp	r2, r3
 800921e:	d302      	bcc.n	8009226 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009220:	4b21      	ldr	r3, [pc, #132]	; (80092a8 <xTaskResumeAll+0x12c>)
 8009222:	2201      	movs	r2, #1
 8009224:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009226:	4b1c      	ldr	r3, [pc, #112]	; (8009298 <xTaskResumeAll+0x11c>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1cc      	bne.n	80091c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d001      	beq.n	8009238 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009234:	f000 fb70 	bl	8009918 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009238:	4b1c      	ldr	r3, [pc, #112]	; (80092ac <xTaskResumeAll+0x130>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d010      	beq.n	8009266 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009244:	f000 f858 	bl	80092f8 <xTaskIncrementTick>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d002      	beq.n	8009254 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800924e:	4b16      	ldr	r3, [pc, #88]	; (80092a8 <xTaskResumeAll+0x12c>)
 8009250:	2201      	movs	r2, #1
 8009252:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	3b01      	subs	r3, #1
 8009258:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1f1      	bne.n	8009244 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009260:	4b12      	ldr	r3, [pc, #72]	; (80092ac <xTaskResumeAll+0x130>)
 8009262:	2200      	movs	r2, #0
 8009264:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009266:	4b10      	ldr	r3, [pc, #64]	; (80092a8 <xTaskResumeAll+0x12c>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d009      	beq.n	8009282 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800926e:	2301      	movs	r3, #1
 8009270:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009272:	4b0f      	ldr	r3, [pc, #60]	; (80092b0 <xTaskResumeAll+0x134>)
 8009274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009278:	601a      	str	r2, [r3, #0]
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009282:	f001 fa97 	bl	800a7b4 <vPortExitCritical>

	return xAlreadyYielded;
 8009286:	68bb      	ldr	r3, [r7, #8]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	200002fc 	.word	0x200002fc
 8009294:	200002d4 	.word	0x200002d4
 8009298:	20000294 	.word	0x20000294
 800929c:	200002dc 	.word	0x200002dc
 80092a0:	20000214 	.word	0x20000214
 80092a4:	20000210 	.word	0x20000210
 80092a8:	200002e8 	.word	0x200002e8
 80092ac:	200002e4 	.word	0x200002e4
 80092b0:	e000ed04 	.word	0xe000ed04

080092b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80092ba:	4b05      	ldr	r3, [pc, #20]	; (80092d0 <xTaskGetTickCount+0x1c>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80092c0:	687b      	ldr	r3, [r7, #4]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	370c      	adds	r7, #12
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	200002d8 	.word	0x200002d8

080092d4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092da:	f001 fb1d 	bl	800a918 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80092de:	2300      	movs	r3, #0
 80092e0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80092e2:	4b04      	ldr	r3, [pc, #16]	; (80092f4 <xTaskGetTickCountFromISR+0x20>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092e8:	683b      	ldr	r3, [r7, #0]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	200002d8 	.word	0x200002d8

080092f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80092fe:	2300      	movs	r3, #0
 8009300:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009302:	4b51      	ldr	r3, [pc, #324]	; (8009448 <xTaskIncrementTick+0x150>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	f040 808d 	bne.w	8009426 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800930c:	4b4f      	ldr	r3, [pc, #316]	; (800944c <xTaskIncrementTick+0x154>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	3301      	adds	r3, #1
 8009312:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009314:	4a4d      	ldr	r2, [pc, #308]	; (800944c <xTaskIncrementTick+0x154>)
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d120      	bne.n	8009362 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009320:	4b4b      	ldr	r3, [pc, #300]	; (8009450 <xTaskIncrementTick+0x158>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <xTaskIncrementTick+0x48>
	__asm volatile
 800932a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	603b      	str	r3, [r7, #0]
}
 800933c:	bf00      	nop
 800933e:	e7fe      	b.n	800933e <xTaskIncrementTick+0x46>
 8009340:	4b43      	ldr	r3, [pc, #268]	; (8009450 <xTaskIncrementTick+0x158>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	60fb      	str	r3, [r7, #12]
 8009346:	4b43      	ldr	r3, [pc, #268]	; (8009454 <xTaskIncrementTick+0x15c>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a41      	ldr	r2, [pc, #260]	; (8009450 <xTaskIncrementTick+0x158>)
 800934c:	6013      	str	r3, [r2, #0]
 800934e:	4a41      	ldr	r2, [pc, #260]	; (8009454 <xTaskIncrementTick+0x15c>)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6013      	str	r3, [r2, #0]
 8009354:	4b40      	ldr	r3, [pc, #256]	; (8009458 <xTaskIncrementTick+0x160>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	3301      	adds	r3, #1
 800935a:	4a3f      	ldr	r2, [pc, #252]	; (8009458 <xTaskIncrementTick+0x160>)
 800935c:	6013      	str	r3, [r2, #0]
 800935e:	f000 fadb 	bl	8009918 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009362:	4b3e      	ldr	r3, [pc, #248]	; (800945c <xTaskIncrementTick+0x164>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	693a      	ldr	r2, [r7, #16]
 8009368:	429a      	cmp	r2, r3
 800936a:	d34d      	bcc.n	8009408 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800936c:	4b38      	ldr	r3, [pc, #224]	; (8009450 <xTaskIncrementTick+0x158>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d101      	bne.n	800937a <xTaskIncrementTick+0x82>
 8009376:	2301      	movs	r3, #1
 8009378:	e000      	b.n	800937c <xTaskIncrementTick+0x84>
 800937a:	2300      	movs	r3, #0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d004      	beq.n	800938a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009380:	4b36      	ldr	r3, [pc, #216]	; (800945c <xTaskIncrementTick+0x164>)
 8009382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009386:	601a      	str	r2, [r3, #0]
					break;
 8009388:	e03e      	b.n	8009408 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800938a:	4b31      	ldr	r3, [pc, #196]	; (8009450 <xTaskIncrementTick+0x158>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800939a:	693a      	ldr	r2, [r7, #16]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d203      	bcs.n	80093aa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80093a2:	4a2e      	ldr	r2, [pc, #184]	; (800945c <xTaskIncrementTick+0x164>)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6013      	str	r3, [r2, #0]
						break;
 80093a8:	e02e      	b.n	8009408 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	3304      	adds	r3, #4
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fe fd56 	bl	8007e60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d004      	beq.n	80093c6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	3318      	adds	r3, #24
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fe fd4d 	bl	8007e60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ca:	2201      	movs	r2, #1
 80093cc:	409a      	lsls	r2, r3
 80093ce:	4b24      	ldr	r3, [pc, #144]	; (8009460 <xTaskIncrementTick+0x168>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	4a22      	ldr	r2, [pc, #136]	; (8009460 <xTaskIncrementTick+0x168>)
 80093d6:	6013      	str	r3, [r2, #0]
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093dc:	4613      	mov	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4413      	add	r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	4a1f      	ldr	r2, [pc, #124]	; (8009464 <xTaskIncrementTick+0x16c>)
 80093e6:	441a      	add	r2, r3
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	3304      	adds	r3, #4
 80093ec:	4619      	mov	r1, r3
 80093ee:	4610      	mov	r0, r2
 80093f0:	f7fe fcd9 	bl	8007da6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f8:	4b1b      	ldr	r3, [pc, #108]	; (8009468 <xTaskIncrementTick+0x170>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fe:	429a      	cmp	r2, r3
 8009400:	d3b4      	bcc.n	800936c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009402:	2301      	movs	r3, #1
 8009404:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009406:	e7b1      	b.n	800936c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009408:	4b17      	ldr	r3, [pc, #92]	; (8009468 <xTaskIncrementTick+0x170>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800940e:	4915      	ldr	r1, [pc, #84]	; (8009464 <xTaskIncrementTick+0x16c>)
 8009410:	4613      	mov	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	4413      	add	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	440b      	add	r3, r1
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d907      	bls.n	8009430 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009420:	2301      	movs	r3, #1
 8009422:	617b      	str	r3, [r7, #20]
 8009424:	e004      	b.n	8009430 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009426:	4b11      	ldr	r3, [pc, #68]	; (800946c <xTaskIncrementTick+0x174>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3301      	adds	r3, #1
 800942c:	4a0f      	ldr	r2, [pc, #60]	; (800946c <xTaskIncrementTick+0x174>)
 800942e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009430:	4b0f      	ldr	r3, [pc, #60]	; (8009470 <xTaskIncrementTick+0x178>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d001      	beq.n	800943c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009438:	2301      	movs	r3, #1
 800943a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800943c:	697b      	ldr	r3, [r7, #20]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3718      	adds	r7, #24
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	200002fc 	.word	0x200002fc
 800944c:	200002d8 	.word	0x200002d8
 8009450:	2000028c 	.word	0x2000028c
 8009454:	20000290 	.word	0x20000290
 8009458:	200002ec 	.word	0x200002ec
 800945c:	200002f4 	.word	0x200002f4
 8009460:	200002dc 	.word	0x200002dc
 8009464:	20000214 	.word	0x20000214
 8009468:	20000210 	.word	0x20000210
 800946c:	200002e4 	.word	0x200002e4
 8009470:	200002e8 	.word	0x200002e8

08009474 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009474:	b480      	push	{r7}
 8009476:	b087      	sub	sp, #28
 8009478:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800947a:	4b29      	ldr	r3, [pc, #164]	; (8009520 <vTaskSwitchContext+0xac>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d003      	beq.n	800948a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009482:	4b28      	ldr	r3, [pc, #160]	; (8009524 <vTaskSwitchContext+0xb0>)
 8009484:	2201      	movs	r2, #1
 8009486:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009488:	e044      	b.n	8009514 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800948a:	4b26      	ldr	r3, [pc, #152]	; (8009524 <vTaskSwitchContext+0xb0>)
 800948c:	2200      	movs	r2, #0
 800948e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009490:	4b25      	ldr	r3, [pc, #148]	; (8009528 <vTaskSwitchContext+0xb4>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	fab3 f383 	clz	r3, r3
 800949c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800949e:	7afb      	ldrb	r3, [r7, #11]
 80094a0:	f1c3 031f 	rsb	r3, r3, #31
 80094a4:	617b      	str	r3, [r7, #20]
 80094a6:	4921      	ldr	r1, [pc, #132]	; (800952c <vTaskSwitchContext+0xb8>)
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	4613      	mov	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4413      	add	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	440b      	add	r3, r1
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10a      	bne.n	80094d0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80094ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094be:	f383 8811 	msr	BASEPRI, r3
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	607b      	str	r3, [r7, #4]
}
 80094cc:	bf00      	nop
 80094ce:	e7fe      	b.n	80094ce <vTaskSwitchContext+0x5a>
 80094d0:	697a      	ldr	r2, [r7, #20]
 80094d2:	4613      	mov	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4a14      	ldr	r2, [pc, #80]	; (800952c <vTaskSwitchContext+0xb8>)
 80094dc:	4413      	add	r3, r2
 80094de:	613b      	str	r3, [r7, #16]
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	685a      	ldr	r2, [r3, #4]
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	605a      	str	r2, [r3, #4]
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	685a      	ldr	r2, [r3, #4]
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	3308      	adds	r3, #8
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d104      	bne.n	8009500 <vTaskSwitchContext+0x8c>
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	685a      	ldr	r2, [r3, #4]
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	605a      	str	r2, [r3, #4]
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	4a0a      	ldr	r2, [pc, #40]	; (8009530 <vTaskSwitchContext+0xbc>)
 8009508:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800950a:	4b09      	ldr	r3, [pc, #36]	; (8009530 <vTaskSwitchContext+0xbc>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	335c      	adds	r3, #92	; 0x5c
 8009510:	4a08      	ldr	r2, [pc, #32]	; (8009534 <vTaskSwitchContext+0xc0>)
 8009512:	6013      	str	r3, [r2, #0]
}
 8009514:	bf00      	nop
 8009516:	371c      	adds	r7, #28
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr
 8009520:	200002fc 	.word	0x200002fc
 8009524:	200002e8 	.word	0x200002e8
 8009528:	200002dc 	.word	0x200002dc
 800952c:	20000214 	.word	0x20000214
 8009530:	20000210 	.word	0x20000210
 8009534:	20000128 	.word	0x20000128

08009538 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10a      	bne.n	800955e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	60fb      	str	r3, [r7, #12]
}
 800955a:	bf00      	nop
 800955c:	e7fe      	b.n	800955c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800955e:	4b07      	ldr	r3, [pc, #28]	; (800957c <vTaskPlaceOnEventList+0x44>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3318      	adds	r3, #24
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f7fe fc41 	bl	8007dee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800956c:	2101      	movs	r1, #1
 800956e:	6838      	ldr	r0, [r7, #0]
 8009570:	f000 fbd6 	bl	8009d20 <prvAddCurrentTaskToDelayedList>
}
 8009574:	bf00      	nop
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	20000210 	.word	0x20000210

08009580 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009596:	f383 8811 	msr	BASEPRI, r3
 800959a:	f3bf 8f6f 	isb	sy
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	617b      	str	r3, [r7, #20]
}
 80095a4:	bf00      	nop
 80095a6:	e7fe      	b.n	80095a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095a8:	4b0a      	ldr	r3, [pc, #40]	; (80095d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	3318      	adds	r3, #24
 80095ae:	4619      	mov	r1, r3
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f7fe fbf8 	bl	8007da6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d002      	beq.n	80095c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80095bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80095c2:	6879      	ldr	r1, [r7, #4]
 80095c4:	68b8      	ldr	r0, [r7, #8]
 80095c6:	f000 fbab 	bl	8009d20 <prvAddCurrentTaskToDelayedList>
	}
 80095ca:	bf00      	nop
 80095cc:	3718      	adds	r7, #24
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	20000210 	.word	0x20000210

080095d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10a      	bne.n	8009604 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80095ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f2:	f383 8811 	msr	BASEPRI, r3
 80095f6:	f3bf 8f6f 	isb	sy
 80095fa:	f3bf 8f4f 	dsb	sy
 80095fe:	60fb      	str	r3, [r7, #12]
}
 8009600:	bf00      	nop
 8009602:	e7fe      	b.n	8009602 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	3318      	adds	r3, #24
 8009608:	4618      	mov	r0, r3
 800960a:	f7fe fc29 	bl	8007e60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800960e:	4b1d      	ldr	r3, [pc, #116]	; (8009684 <xTaskRemoveFromEventList+0xac>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d11c      	bne.n	8009650 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	3304      	adds	r3, #4
 800961a:	4618      	mov	r0, r3
 800961c:	f7fe fc20 	bl	8007e60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009624:	2201      	movs	r2, #1
 8009626:	409a      	lsls	r2, r3
 8009628:	4b17      	ldr	r3, [pc, #92]	; (8009688 <xTaskRemoveFromEventList+0xb0>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4313      	orrs	r3, r2
 800962e:	4a16      	ldr	r2, [pc, #88]	; (8009688 <xTaskRemoveFromEventList+0xb0>)
 8009630:	6013      	str	r3, [r2, #0]
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009636:	4613      	mov	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	4a13      	ldr	r2, [pc, #76]	; (800968c <xTaskRemoveFromEventList+0xb4>)
 8009640:	441a      	add	r2, r3
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	3304      	adds	r3, #4
 8009646:	4619      	mov	r1, r3
 8009648:	4610      	mov	r0, r2
 800964a:	f7fe fbac 	bl	8007da6 <vListInsertEnd>
 800964e:	e005      	b.n	800965c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	3318      	adds	r3, #24
 8009654:	4619      	mov	r1, r3
 8009656:	480e      	ldr	r0, [pc, #56]	; (8009690 <xTaskRemoveFromEventList+0xb8>)
 8009658:	f7fe fba5 	bl	8007da6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009660:	4b0c      	ldr	r3, [pc, #48]	; (8009694 <xTaskRemoveFromEventList+0xbc>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009666:	429a      	cmp	r2, r3
 8009668:	d905      	bls.n	8009676 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800966a:	2301      	movs	r3, #1
 800966c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800966e:	4b0a      	ldr	r3, [pc, #40]	; (8009698 <xTaskRemoveFromEventList+0xc0>)
 8009670:	2201      	movs	r2, #1
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	e001      	b.n	800967a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009676:	2300      	movs	r3, #0
 8009678:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800967a:	697b      	ldr	r3, [r7, #20]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3718      	adds	r7, #24
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	200002fc 	.word	0x200002fc
 8009688:	200002dc 	.word	0x200002dc
 800968c:	20000214 	.word	0x20000214
 8009690:	20000294 	.word	0x20000294
 8009694:	20000210 	.word	0x20000210
 8009698:	200002e8 	.word	0x200002e8

0800969c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80096a4:	4b06      	ldr	r3, [pc, #24]	; (80096c0 <vTaskInternalSetTimeOutState+0x24>)
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80096ac:	4b05      	ldr	r3, [pc, #20]	; (80096c4 <vTaskInternalSetTimeOutState+0x28>)
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	605a      	str	r2, [r3, #4]
}
 80096b4:	bf00      	nop
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr
 80096c0:	200002ec 	.word	0x200002ec
 80096c4:	200002d8 	.word	0x200002d8

080096c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b088      	sub	sp, #32
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d10a      	bne.n	80096ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80096d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096dc:	f383 8811 	msr	BASEPRI, r3
 80096e0:	f3bf 8f6f 	isb	sy
 80096e4:	f3bf 8f4f 	dsb	sy
 80096e8:	613b      	str	r3, [r7, #16]
}
 80096ea:	bf00      	nop
 80096ec:	e7fe      	b.n	80096ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10a      	bne.n	800970a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80096f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f8:	f383 8811 	msr	BASEPRI, r3
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	60fb      	str	r3, [r7, #12]
}
 8009706:	bf00      	nop
 8009708:	e7fe      	b.n	8009708 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800970a:	f001 f823 	bl	800a754 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800970e:	4b1d      	ldr	r3, [pc, #116]	; (8009784 <xTaskCheckForTimeOut+0xbc>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	69ba      	ldr	r2, [r7, #24]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009726:	d102      	bne.n	800972e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009728:	2300      	movs	r3, #0
 800972a:	61fb      	str	r3, [r7, #28]
 800972c:	e023      	b.n	8009776 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	4b15      	ldr	r3, [pc, #84]	; (8009788 <xTaskCheckForTimeOut+0xc0>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	429a      	cmp	r2, r3
 8009738:	d007      	beq.n	800974a <xTaskCheckForTimeOut+0x82>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	69ba      	ldr	r2, [r7, #24]
 8009740:	429a      	cmp	r2, r3
 8009742:	d302      	bcc.n	800974a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009744:	2301      	movs	r3, #1
 8009746:	61fb      	str	r3, [r7, #28]
 8009748:	e015      	b.n	8009776 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	429a      	cmp	r2, r3
 8009752:	d20b      	bcs.n	800976c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	1ad2      	subs	r2, r2, r3
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f7ff ff9b 	bl	800969c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009766:	2300      	movs	r3, #0
 8009768:	61fb      	str	r3, [r7, #28]
 800976a:	e004      	b.n	8009776 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	2200      	movs	r2, #0
 8009770:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009772:	2301      	movs	r3, #1
 8009774:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009776:	f001 f81d 	bl	800a7b4 <vPortExitCritical>

	return xReturn;
 800977a:	69fb      	ldr	r3, [r7, #28]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3720      	adds	r7, #32
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	200002d8 	.word	0x200002d8
 8009788:	200002ec 	.word	0x200002ec

0800978c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800978c:	b480      	push	{r7}
 800978e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009790:	4b03      	ldr	r3, [pc, #12]	; (80097a0 <vTaskMissedYield+0x14>)
 8009792:	2201      	movs	r2, #1
 8009794:	601a      	str	r2, [r3, #0]
}
 8009796:	bf00      	nop
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	200002e8 	.word	0x200002e8

080097a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80097ac:	f000 f852 	bl	8009854 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80097b0:	4b06      	ldr	r3, [pc, #24]	; (80097cc <prvIdleTask+0x28>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d9f9      	bls.n	80097ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80097b8:	4b05      	ldr	r3, [pc, #20]	; (80097d0 <prvIdleTask+0x2c>)
 80097ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80097c8:	e7f0      	b.n	80097ac <prvIdleTask+0x8>
 80097ca:	bf00      	nop
 80097cc:	20000214 	.word	0x20000214
 80097d0:	e000ed04 	.word	0xe000ed04

080097d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097da:	2300      	movs	r3, #0
 80097dc:	607b      	str	r3, [r7, #4]
 80097de:	e00c      	b.n	80097fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	4613      	mov	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4413      	add	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	4a12      	ldr	r2, [pc, #72]	; (8009834 <prvInitialiseTaskLists+0x60>)
 80097ec:	4413      	add	r3, r2
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7fe faac 	bl	8007d4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	3301      	adds	r3, #1
 80097f8:	607b      	str	r3, [r7, #4]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2b03      	cmp	r3, #3
 80097fe:	d9ef      	bls.n	80097e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009800:	480d      	ldr	r0, [pc, #52]	; (8009838 <prvInitialiseTaskLists+0x64>)
 8009802:	f7fe faa3 	bl	8007d4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009806:	480d      	ldr	r0, [pc, #52]	; (800983c <prvInitialiseTaskLists+0x68>)
 8009808:	f7fe faa0 	bl	8007d4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800980c:	480c      	ldr	r0, [pc, #48]	; (8009840 <prvInitialiseTaskLists+0x6c>)
 800980e:	f7fe fa9d 	bl	8007d4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009812:	480c      	ldr	r0, [pc, #48]	; (8009844 <prvInitialiseTaskLists+0x70>)
 8009814:	f7fe fa9a 	bl	8007d4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009818:	480b      	ldr	r0, [pc, #44]	; (8009848 <prvInitialiseTaskLists+0x74>)
 800981a:	f7fe fa97 	bl	8007d4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800981e:	4b0b      	ldr	r3, [pc, #44]	; (800984c <prvInitialiseTaskLists+0x78>)
 8009820:	4a05      	ldr	r2, [pc, #20]	; (8009838 <prvInitialiseTaskLists+0x64>)
 8009822:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009824:	4b0a      	ldr	r3, [pc, #40]	; (8009850 <prvInitialiseTaskLists+0x7c>)
 8009826:	4a05      	ldr	r2, [pc, #20]	; (800983c <prvInitialiseTaskLists+0x68>)
 8009828:	601a      	str	r2, [r3, #0]
}
 800982a:	bf00      	nop
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	20000214 	.word	0x20000214
 8009838:	20000264 	.word	0x20000264
 800983c:	20000278 	.word	0x20000278
 8009840:	20000294 	.word	0x20000294
 8009844:	200002a8 	.word	0x200002a8
 8009848:	200002c0 	.word	0x200002c0
 800984c:	2000028c 	.word	0x2000028c
 8009850:	20000290 	.word	0x20000290

08009854 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800985a:	e019      	b.n	8009890 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800985c:	f000 ff7a 	bl	800a754 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009860:	4b10      	ldr	r3, [pc, #64]	; (80098a4 <prvCheckTasksWaitingTermination+0x50>)
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	3304      	adds	r3, #4
 800986c:	4618      	mov	r0, r3
 800986e:	f7fe faf7 	bl	8007e60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009872:	4b0d      	ldr	r3, [pc, #52]	; (80098a8 <prvCheckTasksWaitingTermination+0x54>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3b01      	subs	r3, #1
 8009878:	4a0b      	ldr	r2, [pc, #44]	; (80098a8 <prvCheckTasksWaitingTermination+0x54>)
 800987a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800987c:	4b0b      	ldr	r3, [pc, #44]	; (80098ac <prvCheckTasksWaitingTermination+0x58>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	3b01      	subs	r3, #1
 8009882:	4a0a      	ldr	r2, [pc, #40]	; (80098ac <prvCheckTasksWaitingTermination+0x58>)
 8009884:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009886:	f000 ff95 	bl	800a7b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f810 	bl	80098b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009890:	4b06      	ldr	r3, [pc, #24]	; (80098ac <prvCheckTasksWaitingTermination+0x58>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1e1      	bne.n	800985c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009898:	bf00      	nop
 800989a:	bf00      	nop
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	200002a8 	.word	0x200002a8
 80098a8:	200002d4 	.word	0x200002d4
 80098ac:	200002bc 	.word	0x200002bc

080098b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	335c      	adds	r3, #92	; 0x5c
 80098bc:	4618      	mov	r0, r3
 80098be:	f006 fb65 	bl	800ff8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d108      	bne.n	80098de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d0:	4618      	mov	r0, r3
 80098d2:	f001 f925 	bl	800ab20 <vPortFree>
				vPortFree( pxTCB );
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f001 f922 	bl	800ab20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80098dc:	e018      	b.n	8009910 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d103      	bne.n	80098f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f001 f919 	bl	800ab20 <vPortFree>
	}
 80098ee:	e00f      	b.n	8009910 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d00a      	beq.n	8009910 <prvDeleteTCB+0x60>
	__asm volatile
 80098fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fe:	f383 8811 	msr	BASEPRI, r3
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	60fb      	str	r3, [r7, #12]
}
 800990c:	bf00      	nop
 800990e:	e7fe      	b.n	800990e <prvDeleteTCB+0x5e>
	}
 8009910:	bf00      	nop
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800991e:	4b0f      	ldr	r3, [pc, #60]	; (800995c <prvResetNextTaskUnblockTime+0x44>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d101      	bne.n	800992c <prvResetNextTaskUnblockTime+0x14>
 8009928:	2301      	movs	r3, #1
 800992a:	e000      	b.n	800992e <prvResetNextTaskUnblockTime+0x16>
 800992c:	2300      	movs	r3, #0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d004      	beq.n	800993c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009932:	4b0b      	ldr	r3, [pc, #44]	; (8009960 <prvResetNextTaskUnblockTime+0x48>)
 8009934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009938:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800993a:	e008      	b.n	800994e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800993c:	4b07      	ldr	r3, [pc, #28]	; (800995c <prvResetNextTaskUnblockTime+0x44>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	4a05      	ldr	r2, [pc, #20]	; (8009960 <prvResetNextTaskUnblockTime+0x48>)
 800994c:	6013      	str	r3, [r2, #0]
}
 800994e:	bf00      	nop
 8009950:	370c      	adds	r7, #12
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	2000028c 	.word	0x2000028c
 8009960:	200002f4 	.word	0x200002f4

08009964 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800996a:	4b0b      	ldr	r3, [pc, #44]	; (8009998 <xTaskGetSchedulerState+0x34>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d102      	bne.n	8009978 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009972:	2301      	movs	r3, #1
 8009974:	607b      	str	r3, [r7, #4]
 8009976:	e008      	b.n	800998a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009978:	4b08      	ldr	r3, [pc, #32]	; (800999c <xTaskGetSchedulerState+0x38>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d102      	bne.n	8009986 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009980:	2302      	movs	r3, #2
 8009982:	607b      	str	r3, [r7, #4]
 8009984:	e001      	b.n	800998a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009986:	2300      	movs	r3, #0
 8009988:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800998a:	687b      	ldr	r3, [r7, #4]
	}
 800998c:	4618      	mov	r0, r3
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr
 8009998:	200002e0 	.word	0x200002e0
 800999c:	200002fc 	.word	0x200002fc

080099a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80099ac:	2300      	movs	r3, #0
 80099ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d06e      	beq.n	8009a94 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ba:	4b39      	ldr	r3, [pc, #228]	; (8009aa0 <xTaskPriorityInherit+0x100>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d25e      	bcs.n	8009a82 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	db06      	blt.n	80099da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099cc:	4b34      	ldr	r3, [pc, #208]	; (8009aa0 <xTaskPriorityInherit+0x100>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d2:	f1c3 0204 	rsb	r2, r3, #4
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	6959      	ldr	r1, [r3, #20]
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e2:	4613      	mov	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4a2e      	ldr	r2, [pc, #184]	; (8009aa4 <xTaskPriorityInherit+0x104>)
 80099ec:	4413      	add	r3, r2
 80099ee:	4299      	cmp	r1, r3
 80099f0:	d101      	bne.n	80099f6 <xTaskPriorityInherit+0x56>
 80099f2:	2301      	movs	r3, #1
 80099f4:	e000      	b.n	80099f8 <xTaskPriorityInherit+0x58>
 80099f6:	2300      	movs	r3, #0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d03a      	beq.n	8009a72 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	3304      	adds	r3, #4
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7fe fa2d 	bl	8007e60 <uxListRemove>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d115      	bne.n	8009a38 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a10:	4924      	ldr	r1, [pc, #144]	; (8009aa4 <xTaskPriorityInherit+0x104>)
 8009a12:	4613      	mov	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4413      	add	r3, r2
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	440b      	add	r3, r1
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d10a      	bne.n	8009a38 <xTaskPriorityInherit+0x98>
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a26:	2201      	movs	r2, #1
 8009a28:	fa02 f303 	lsl.w	r3, r2, r3
 8009a2c:	43da      	mvns	r2, r3
 8009a2e:	4b1e      	ldr	r3, [pc, #120]	; (8009aa8 <xTaskPriorityInherit+0x108>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4013      	ands	r3, r2
 8009a34:	4a1c      	ldr	r2, [pc, #112]	; (8009aa8 <xTaskPriorityInherit+0x108>)
 8009a36:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a38:	4b19      	ldr	r3, [pc, #100]	; (8009aa0 <xTaskPriorityInherit+0x100>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a46:	2201      	movs	r2, #1
 8009a48:	409a      	lsls	r2, r3
 8009a4a:	4b17      	ldr	r3, [pc, #92]	; (8009aa8 <xTaskPriorityInherit+0x108>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	4a15      	ldr	r2, [pc, #84]	; (8009aa8 <xTaskPriorityInherit+0x108>)
 8009a52:	6013      	str	r3, [r2, #0]
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a58:	4613      	mov	r3, r2
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	4413      	add	r3, r2
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	4a10      	ldr	r2, [pc, #64]	; (8009aa4 <xTaskPriorityInherit+0x104>)
 8009a62:	441a      	add	r2, r3
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	3304      	adds	r3, #4
 8009a68:	4619      	mov	r1, r3
 8009a6a:	4610      	mov	r0, r2
 8009a6c:	f7fe f99b 	bl	8007da6 <vListInsertEnd>
 8009a70:	e004      	b.n	8009a7c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a72:	4b0b      	ldr	r3, [pc, #44]	; (8009aa0 <xTaskPriorityInherit+0x100>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	60fb      	str	r3, [r7, #12]
 8009a80:	e008      	b.n	8009a94 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a86:	4b06      	ldr	r3, [pc, #24]	; (8009aa0 <xTaskPriorityInherit+0x100>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d201      	bcs.n	8009a94 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009a90:	2301      	movs	r3, #1
 8009a92:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a94:	68fb      	ldr	r3, [r7, #12]
	}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	20000210 	.word	0x20000210
 8009aa4:	20000214 	.word	0x20000214
 8009aa8:	200002dc 	.word	0x200002dc

08009aac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d06e      	beq.n	8009ba0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009ac2:	4b3a      	ldr	r3, [pc, #232]	; (8009bac <xTaskPriorityDisinherit+0x100>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	693a      	ldr	r2, [r7, #16]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d00a      	beq.n	8009ae2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad0:	f383 8811 	msr	BASEPRI, r3
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	60fb      	str	r3, [r7, #12]
}
 8009ade:	bf00      	nop
 8009ae0:	e7fe      	b.n	8009ae0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10a      	bne.n	8009b00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aee:	f383 8811 	msr	BASEPRI, r3
 8009af2:	f3bf 8f6f 	isb	sy
 8009af6:	f3bf 8f4f 	dsb	sy
 8009afa:	60bb      	str	r3, [r7, #8]
}
 8009afc:	bf00      	nop
 8009afe:	e7fe      	b.n	8009afe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b04:	1e5a      	subs	r2, r3, #1
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d044      	beq.n	8009ba0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d140      	bne.n	8009ba0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	3304      	adds	r3, #4
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fe f99c 	bl	8007e60 <uxListRemove>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d115      	bne.n	8009b5a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b32:	491f      	ldr	r1, [pc, #124]	; (8009bb0 <xTaskPriorityDisinherit+0x104>)
 8009b34:	4613      	mov	r3, r2
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	4413      	add	r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	440b      	add	r3, r1
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d10a      	bne.n	8009b5a <xTaskPriorityDisinherit+0xae>
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b48:	2201      	movs	r2, #1
 8009b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b4e:	43da      	mvns	r2, r3
 8009b50:	4b18      	ldr	r3, [pc, #96]	; (8009bb4 <xTaskPriorityDisinherit+0x108>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4013      	ands	r3, r2
 8009b56:	4a17      	ldr	r2, [pc, #92]	; (8009bb4 <xTaskPriorityDisinherit+0x108>)
 8009b58:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b66:	f1c3 0204 	rsb	r2, r3, #4
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b72:	2201      	movs	r2, #1
 8009b74:	409a      	lsls	r2, r3
 8009b76:	4b0f      	ldr	r3, [pc, #60]	; (8009bb4 <xTaskPriorityDisinherit+0x108>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	4a0d      	ldr	r2, [pc, #52]	; (8009bb4 <xTaskPriorityDisinherit+0x108>)
 8009b7e:	6013      	str	r3, [r2, #0]
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b84:	4613      	mov	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4a08      	ldr	r2, [pc, #32]	; (8009bb0 <xTaskPriorityDisinherit+0x104>)
 8009b8e:	441a      	add	r2, r3
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	3304      	adds	r3, #4
 8009b94:	4619      	mov	r1, r3
 8009b96:	4610      	mov	r0, r2
 8009b98:	f7fe f905 	bl	8007da6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ba0:	697b      	ldr	r3, [r7, #20]
	}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3718      	adds	r7, #24
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	20000210 	.word	0x20000210
 8009bb0:	20000214 	.word	0x20000214
 8009bb4:	200002dc 	.word	0x200002dc

08009bb8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b088      	sub	sp, #32
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f000 8088 	beq.w	8009ce2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d10a      	bne.n	8009bf0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	60fb      	str	r3, [r7, #12]
}
 8009bec:	bf00      	nop
 8009bee:	e7fe      	b.n	8009bee <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d902      	bls.n	8009c00 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	61fb      	str	r3, [r7, #28]
 8009bfe:	e002      	b.n	8009c06 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c04:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0a:	69fa      	ldr	r2, [r7, #28]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d068      	beq.n	8009ce2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d163      	bne.n	8009ce2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009c1a:	4b34      	ldr	r3, [pc, #208]	; (8009cec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	69ba      	ldr	r2, [r7, #24]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d10a      	bne.n	8009c3a <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8009c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	60bb      	str	r3, [r7, #8]
}
 8009c36:	bf00      	nop
 8009c38:	e7fe      	b.n	8009c38 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	69fa      	ldr	r2, [r7, #28]
 8009c44:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	699b      	ldr	r3, [r3, #24]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	db04      	blt.n	8009c58 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	f1c3 0204 	rsb	r2, r3, #4
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	6959      	ldr	r1, [r3, #20]
 8009c5c:	693a      	ldr	r2, [r7, #16]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	4413      	add	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4a22      	ldr	r2, [pc, #136]	; (8009cf0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009c68:	4413      	add	r3, r2
 8009c6a:	4299      	cmp	r1, r3
 8009c6c:	d101      	bne.n	8009c72 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e000      	b.n	8009c74 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8009c72:	2300      	movs	r3, #0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d034      	beq.n	8009ce2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	3304      	adds	r3, #4
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fe f8ef 	bl	8007e60 <uxListRemove>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d115      	bne.n	8009cb4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c8c:	4918      	ldr	r1, [pc, #96]	; (8009cf0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009c8e:	4613      	mov	r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	440b      	add	r3, r1
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10a      	bne.n	8009cb4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca8:	43da      	mvns	r2, r3
 8009caa:	4b12      	ldr	r3, [pc, #72]	; (8009cf4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4013      	ands	r3, r2
 8009cb0:	4a10      	ldr	r2, [pc, #64]	; (8009cf4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009cb2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb8:	2201      	movs	r2, #1
 8009cba:	409a      	lsls	r2, r3
 8009cbc:	4b0d      	ldr	r3, [pc, #52]	; (8009cf4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	4a0c      	ldr	r2, [pc, #48]	; (8009cf4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009cc4:	6013      	str	r3, [r2, #0]
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4a07      	ldr	r2, [pc, #28]	; (8009cf0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009cd4:	441a      	add	r2, r3
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	3304      	adds	r3, #4
 8009cda:	4619      	mov	r1, r3
 8009cdc:	4610      	mov	r0, r2
 8009cde:	f7fe f862 	bl	8007da6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ce2:	bf00      	nop
 8009ce4:	3720      	adds	r7, #32
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	20000210 	.word	0x20000210
 8009cf0:	20000214 	.word	0x20000214
 8009cf4:	200002dc 	.word	0x200002dc

08009cf8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009cf8:	b480      	push	{r7}
 8009cfa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009cfc:	4b07      	ldr	r3, [pc, #28]	; (8009d1c <pvTaskIncrementMutexHeldCount+0x24>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d004      	beq.n	8009d0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009d04:	4b05      	ldr	r3, [pc, #20]	; (8009d1c <pvTaskIncrementMutexHeldCount+0x24>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009d0a:	3201      	adds	r2, #1
 8009d0c:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 8009d0e:	4b03      	ldr	r3, [pc, #12]	; (8009d1c <pvTaskIncrementMutexHeldCount+0x24>)
 8009d10:	681b      	ldr	r3, [r3, #0]
	}
 8009d12:	4618      	mov	r0, r3
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr
 8009d1c:	20000210 	.word	0x20000210

08009d20 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d2a:	4b29      	ldr	r3, [pc, #164]	; (8009dd0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d30:	4b28      	ldr	r3, [pc, #160]	; (8009dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3304      	adds	r3, #4
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fe f892 	bl	8007e60 <uxListRemove>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10b      	bne.n	8009d5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009d42:	4b24      	ldr	r3, [pc, #144]	; (8009dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d48:	2201      	movs	r2, #1
 8009d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d4e:	43da      	mvns	r2, r3
 8009d50:	4b21      	ldr	r3, [pc, #132]	; (8009dd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4013      	ands	r3, r2
 8009d56:	4a20      	ldr	r2, [pc, #128]	; (8009dd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009d58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d60:	d10a      	bne.n	8009d78 <prvAddCurrentTaskToDelayedList+0x58>
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d007      	beq.n	8009d78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d68:	4b1a      	ldr	r3, [pc, #104]	; (8009dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	4619      	mov	r1, r3
 8009d70:	481a      	ldr	r0, [pc, #104]	; (8009ddc <prvAddCurrentTaskToDelayedList+0xbc>)
 8009d72:	f7fe f818 	bl	8007da6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d76:	e026      	b.n	8009dc6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d80:	4b14      	ldr	r3, [pc, #80]	; (8009dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d209      	bcs.n	8009da4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d90:	4b13      	ldr	r3, [pc, #76]	; (8009de0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	4b0f      	ldr	r3, [pc, #60]	; (8009dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	3304      	adds	r3, #4
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	f7fe f826 	bl	8007dee <vListInsert>
}
 8009da2:	e010      	b.n	8009dc6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009da4:	4b0f      	ldr	r3, [pc, #60]	; (8009de4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	4b0a      	ldr	r3, [pc, #40]	; (8009dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	3304      	adds	r3, #4
 8009dae:	4619      	mov	r1, r3
 8009db0:	4610      	mov	r0, r2
 8009db2:	f7fe f81c 	bl	8007dee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009db6:	4b0c      	ldr	r3, [pc, #48]	; (8009de8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d202      	bcs.n	8009dc6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009dc0:	4a09      	ldr	r2, [pc, #36]	; (8009de8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	6013      	str	r3, [r2, #0]
}
 8009dc6:	bf00      	nop
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	200002d8 	.word	0x200002d8
 8009dd4:	20000210 	.word	0x20000210
 8009dd8:	200002dc 	.word	0x200002dc
 8009ddc:	200002c0 	.word	0x200002c0
 8009de0:	20000290 	.word	0x20000290
 8009de4:	2000028c 	.word	0x2000028c
 8009de8:	200002f4 	.word	0x200002f4

08009dec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b08a      	sub	sp, #40	; 0x28
 8009df0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009df2:	2300      	movs	r3, #0
 8009df4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009df6:	f000 fb41 	bl	800a47c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009dfa:	4b1c      	ldr	r3, [pc, #112]	; (8009e6c <xTimerCreateTimerTask+0x80>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d021      	beq.n	8009e46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009e02:	2300      	movs	r3, #0
 8009e04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009e06:	2300      	movs	r3, #0
 8009e08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009e0a:	1d3a      	adds	r2, r7, #4
 8009e0c:	f107 0108 	add.w	r1, r7, #8
 8009e10:	f107 030c 	add.w	r3, r7, #12
 8009e14:	4618      	mov	r0, r3
 8009e16:	f003 fb7b 	bl	800d510 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009e1a:	6879      	ldr	r1, [r7, #4]
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	9202      	str	r2, [sp, #8]
 8009e22:	9301      	str	r3, [sp, #4]
 8009e24:	2302      	movs	r3, #2
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	2300      	movs	r3, #0
 8009e2a:	460a      	mov	r2, r1
 8009e2c:	4910      	ldr	r1, [pc, #64]	; (8009e70 <xTimerCreateTimerTask+0x84>)
 8009e2e:	4811      	ldr	r0, [pc, #68]	; (8009e74 <xTimerCreateTimerTask+0x88>)
 8009e30:	f7fe fed2 	bl	8008bd8 <xTaskCreateStatic>
 8009e34:	4603      	mov	r3, r0
 8009e36:	4a10      	ldr	r2, [pc, #64]	; (8009e78 <xTimerCreateTimerTask+0x8c>)
 8009e38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009e3a:	4b0f      	ldr	r3, [pc, #60]	; (8009e78 <xTimerCreateTimerTask+0x8c>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d001      	beq.n	8009e46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e42:	2301      	movs	r3, #1
 8009e44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10a      	bne.n	8009e62 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e50:	f383 8811 	msr	BASEPRI, r3
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	613b      	str	r3, [r7, #16]
}
 8009e5e:	bf00      	nop
 8009e60:	e7fe      	b.n	8009e60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009e62:	697b      	ldr	r3, [r7, #20]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3718      	adds	r7, #24
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	20000330 	.word	0x20000330
 8009e70:	0801052c 	.word	0x0801052c
 8009e74:	0800a0b9 	.word	0x0800a0b9
 8009e78:	20000334 	.word	0x20000334

08009e7c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b088      	sub	sp, #32
 8009e80:	af02      	add	r7, sp, #8
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
 8009e88:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8009e8a:	202c      	movs	r0, #44	; 0x2c
 8009e8c:	f000 fd84 	bl	800a998 <pvPortMalloc>
 8009e90:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00d      	beq.n	8009eb4 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	9301      	str	r3, [sp, #4]
 8009e9c:	6a3b      	ldr	r3, [r7, #32]
 8009e9e:	9300      	str	r3, [sp, #0]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	68b9      	ldr	r1, [r7, #8]
 8009ea6:	68f8      	ldr	r0, [r7, #12]
 8009ea8:	f000 f846 	bl	8009f38 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8009eb4:	697b      	ldr	r3, [r7, #20]
	}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3718      	adds	r7, #24
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b08a      	sub	sp, #40	; 0x28
 8009ec2:	af02      	add	r7, sp, #8
 8009ec4:	60f8      	str	r0, [r7, #12]
 8009ec6:	60b9      	str	r1, [r7, #8]
 8009ec8:	607a      	str	r2, [r7, #4]
 8009eca:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009ecc:	232c      	movs	r3, #44	; 0x2c
 8009ece:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	2b2c      	cmp	r3, #44	; 0x2c
 8009ed4:	d00a      	beq.n	8009eec <xTimerCreateStatic+0x2e>
	__asm volatile
 8009ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eda:	f383 8811 	msr	BASEPRI, r3
 8009ede:	f3bf 8f6f 	isb	sy
 8009ee2:	f3bf 8f4f 	dsb	sy
 8009ee6:	61bb      	str	r3, [r7, #24]
}
 8009ee8:	bf00      	nop
 8009eea:	e7fe      	b.n	8009eea <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d10a      	bne.n	8009f08 <xTimerCreateStatic+0x4a>
	__asm volatile
 8009ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef6:	f383 8811 	msr	BASEPRI, r3
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	617b      	str	r3, [r7, #20]
}
 8009f04:	bf00      	nop
 8009f06:	e7fe      	b.n	8009f06 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0a:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00d      	beq.n	8009f2e <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	9301      	str	r3, [sp, #4]
 8009f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f18:	9300      	str	r3, [sp, #0]
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	68b9      	ldr	r1, [r7, #8]
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f000 f809 	bl	8009f38 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8009f2e:	69fb      	ldr	r3, [r7, #28]
	}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3720      	adds	r7, #32
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
 8009f44:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10a      	bne.n	8009f62 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8009f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f50:	f383 8811 	msr	BASEPRI, r3
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	f3bf 8f4f 	dsb	sy
 8009f5c:	617b      	str	r3, [r7, #20]
}
 8009f5e:	bf00      	nop
 8009f60:	e7fe      	b.n	8009f60 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d015      	beq.n	8009f94 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009f68:	f000 fa88 	bl	800a47c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f74:	68ba      	ldr	r2, [r7, #8]
 8009f76:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8009f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	683a      	ldr	r2, [r7, #0]
 8009f82:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f86:	6a3a      	ldr	r2, [r7, #32]
 8009f88:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fd fefc 	bl	8007d8c <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009f94:	bf00      	nop
 8009f96:	3718      	adds	r7, #24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b08a      	sub	sp, #40	; 0x28
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
 8009fa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009faa:	2300      	movs	r3, #0
 8009fac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d10a      	bne.n	8009fca <xTimerGenericCommand+0x2e>
	__asm volatile
 8009fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb8:	f383 8811 	msr	BASEPRI, r3
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f3bf 8f4f 	dsb	sy
 8009fc4:	623b      	str	r3, [r7, #32]
}
 8009fc6:	bf00      	nop
 8009fc8:	e7fe      	b.n	8009fc8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009fca:	4b1a      	ldr	r3, [pc, #104]	; (800a034 <xTimerGenericCommand+0x98>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d02a      	beq.n	800a028 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	2b05      	cmp	r3, #5
 8009fe2:	dc18      	bgt.n	800a016 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009fe4:	f7ff fcbe 	bl	8009964 <xTaskGetSchedulerState>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	d109      	bne.n	800a002 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009fee:	4b11      	ldr	r3, [pc, #68]	; (800a034 <xTimerGenericCommand+0x98>)
 8009ff0:	6818      	ldr	r0, [r3, #0]
 8009ff2:	f107 0114 	add.w	r1, r7, #20
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ffa:	f7fe f8e5 	bl	80081c8 <xQueueGenericSend>
 8009ffe:	6278      	str	r0, [r7, #36]	; 0x24
 800a000:	e012      	b.n	800a028 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a002:	4b0c      	ldr	r3, [pc, #48]	; (800a034 <xTimerGenericCommand+0x98>)
 800a004:	6818      	ldr	r0, [r3, #0]
 800a006:	f107 0114 	add.w	r1, r7, #20
 800a00a:	2300      	movs	r3, #0
 800a00c:	2200      	movs	r2, #0
 800a00e:	f7fe f8db 	bl	80081c8 <xQueueGenericSend>
 800a012:	6278      	str	r0, [r7, #36]	; 0x24
 800a014:	e008      	b.n	800a028 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a016:	4b07      	ldr	r3, [pc, #28]	; (800a034 <xTimerGenericCommand+0x98>)
 800a018:	6818      	ldr	r0, [r3, #0]
 800a01a:	f107 0114 	add.w	r1, r7, #20
 800a01e:	2300      	movs	r3, #0
 800a020:	683a      	ldr	r2, [r7, #0]
 800a022:	f7fe f9cf 	bl	80083c4 <xQueueGenericSendFromISR>
 800a026:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3728      	adds	r7, #40	; 0x28
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	20000330 	.word	0x20000330

0800a038 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b088      	sub	sp, #32
 800a03c:	af02      	add	r7, sp, #8
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a042:	4b1c      	ldr	r3, [pc, #112]	; (800a0b4 <prvProcessExpiredTimer+0x7c>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	3304      	adds	r3, #4
 800a050:	4618      	mov	r0, r3
 800a052:	f7fd ff05 	bl	8007e60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	69db      	ldr	r3, [r3, #28]
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d122      	bne.n	800a0a4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	699a      	ldr	r2, [r3, #24]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	18d1      	adds	r1, r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	683a      	ldr	r2, [r7, #0]
 800a06a:	6978      	ldr	r0, [r7, #20]
 800a06c:	f000 f8c8 	bl	800a200 <prvInsertTimerInActiveList>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d016      	beq.n	800a0a4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a076:	2300      	movs	r3, #0
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	2300      	movs	r3, #0
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	2100      	movs	r1, #0
 800a080:	6978      	ldr	r0, [r7, #20]
 800a082:	f7ff ff8b 	bl	8009f9c <xTimerGenericCommand>
 800a086:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d10a      	bne.n	800a0a4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800a08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a092:	f383 8811 	msr	BASEPRI, r3
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	60fb      	str	r3, [r7, #12]
}
 800a0a0:	bf00      	nop
 800a0a2:	e7fe      	b.n	800a0a2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a8:	6978      	ldr	r0, [r7, #20]
 800a0aa:	4798      	blx	r3
}
 800a0ac:	bf00      	nop
 800a0ae:	3718      	adds	r7, #24
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	20000328 	.word	0x20000328

0800a0b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a0c0:	f107 0308 	add.w	r3, r7, #8
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f000 f857 	bl	800a178 <prvGetNextExpireTime>
 800a0ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f000 f803 	bl	800a0dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a0d6:	f000 f8d5 	bl	800a284 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a0da:	e7f1      	b.n	800a0c0 <prvTimerTask+0x8>

0800a0dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a0e6:	f7ff f83b 	bl	8009160 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0ea:	f107 0308 	add.w	r3, r7, #8
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f000 f866 	bl	800a1c0 <prvSampleTimeNow>
 800a0f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d130      	bne.n	800a15e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10a      	bne.n	800a118 <prvProcessTimerOrBlockTask+0x3c>
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	429a      	cmp	r2, r3
 800a108:	d806      	bhi.n	800a118 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a10a:	f7ff f837 	bl	800917c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a10e:	68f9      	ldr	r1, [r7, #12]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7ff ff91 	bl	800a038 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a116:	e024      	b.n	800a162 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d008      	beq.n	800a130 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a11e:	4b13      	ldr	r3, [pc, #76]	; (800a16c <prvProcessTimerOrBlockTask+0x90>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	bf0c      	ite	eq
 800a128:	2301      	moveq	r3, #1
 800a12a:	2300      	movne	r3, #0
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a130:	4b0f      	ldr	r3, [pc, #60]	; (800a170 <prvProcessTimerOrBlockTask+0x94>)
 800a132:	6818      	ldr	r0, [r3, #0]
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	4619      	mov	r1, r3
 800a13e:	f7fe fd17 	bl	8008b70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a142:	f7ff f81b 	bl	800917c <xTaskResumeAll>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d10a      	bne.n	800a162 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a14c:	4b09      	ldr	r3, [pc, #36]	; (800a174 <prvProcessTimerOrBlockTask+0x98>)
 800a14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	f3bf 8f6f 	isb	sy
}
 800a15c:	e001      	b.n	800a162 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a15e:	f7ff f80d 	bl	800917c <xTaskResumeAll>
}
 800a162:	bf00      	nop
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	2000032c 	.word	0x2000032c
 800a170:	20000330 	.word	0x20000330
 800a174:	e000ed04 	.word	0xe000ed04

0800a178 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a180:	4b0e      	ldr	r3, [pc, #56]	; (800a1bc <prvGetNextExpireTime+0x44>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	bf0c      	ite	eq
 800a18a:	2301      	moveq	r3, #1
 800a18c:	2300      	movne	r3, #0
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	461a      	mov	r2, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d105      	bne.n	800a1aa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a19e:	4b07      	ldr	r3, [pc, #28]	; (800a1bc <prvGetNextExpireTime+0x44>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	60fb      	str	r3, [r7, #12]
 800a1a8:	e001      	b.n	800a1ae <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3714      	adds	r7, #20
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr
 800a1bc:	20000328 	.word	0x20000328

0800a1c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a1c8:	f7ff f874 	bl	80092b4 <xTaskGetTickCount>
 800a1cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a1ce:	4b0b      	ldr	r3, [pc, #44]	; (800a1fc <prvSampleTimeNow+0x3c>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d205      	bcs.n	800a1e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a1d8:	f000 f8ee 	bl	800a3b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	601a      	str	r2, [r3, #0]
 800a1e2:	e002      	b.n	800a1ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a1ea:	4a04      	ldr	r2, [pc, #16]	; (800a1fc <prvSampleTimeNow+0x3c>)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	20000338 	.word	0x20000338

0800a200 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]
 800a20c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a20e:	2300      	movs	r3, #0
 800a210:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	429a      	cmp	r2, r3
 800a224:	d812      	bhi.n	800a24c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	1ad2      	subs	r2, r2, r3
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	699b      	ldr	r3, [r3, #24]
 800a230:	429a      	cmp	r2, r3
 800a232:	d302      	bcc.n	800a23a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a234:	2301      	movs	r3, #1
 800a236:	617b      	str	r3, [r7, #20]
 800a238:	e01b      	b.n	800a272 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a23a:	4b10      	ldr	r3, [pc, #64]	; (800a27c <prvInsertTimerInActiveList+0x7c>)
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	3304      	adds	r3, #4
 800a242:	4619      	mov	r1, r3
 800a244:	4610      	mov	r0, r2
 800a246:	f7fd fdd2 	bl	8007dee <vListInsert>
 800a24a:	e012      	b.n	800a272 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	429a      	cmp	r2, r3
 800a252:	d206      	bcs.n	800a262 <prvInsertTimerInActiveList+0x62>
 800a254:	68ba      	ldr	r2, [r7, #8]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d302      	bcc.n	800a262 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a25c:	2301      	movs	r3, #1
 800a25e:	617b      	str	r3, [r7, #20]
 800a260:	e007      	b.n	800a272 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a262:	4b07      	ldr	r3, [pc, #28]	; (800a280 <prvInsertTimerInActiveList+0x80>)
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	3304      	adds	r3, #4
 800a26a:	4619      	mov	r1, r3
 800a26c:	4610      	mov	r0, r2
 800a26e:	f7fd fdbe 	bl	8007dee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a272:	697b      	ldr	r3, [r7, #20]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3718      	adds	r7, #24
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	2000032c 	.word	0x2000032c
 800a280:	20000328 	.word	0x20000328

0800a284 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b08c      	sub	sp, #48	; 0x30
 800a288:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a28a:	e081      	b.n	800a390 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	db7d      	blt.n	800a38e <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d004      	beq.n	800a2a8 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a0:	3304      	adds	r3, #4
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fd fddc 	bl	8007e60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2a8:	1d3b      	adds	r3, r7, #4
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7ff ff88 	bl	800a1c0 <prvSampleTimeNow>
 800a2b0:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	2b09      	cmp	r3, #9
 800a2b6:	d86b      	bhi.n	800a390 <prvProcessReceivedCommands+0x10c>
 800a2b8:	a201      	add	r2, pc, #4	; (adr r2, 800a2c0 <prvProcessReceivedCommands+0x3c>)
 800a2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2be:	bf00      	nop
 800a2c0:	0800a2e9 	.word	0x0800a2e9
 800a2c4:	0800a2e9 	.word	0x0800a2e9
 800a2c8:	0800a2e9 	.word	0x0800a2e9
 800a2cc:	0800a391 	.word	0x0800a391
 800a2d0:	0800a345 	.word	0x0800a345
 800a2d4:	0800a37d 	.word	0x0800a37d
 800a2d8:	0800a2e9 	.word	0x0800a2e9
 800a2dc:	0800a2e9 	.word	0x0800a2e9
 800a2e0:	0800a391 	.word	0x0800a391
 800a2e4:	0800a345 	.word	0x0800a345
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	18d1      	adds	r1, r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6a3a      	ldr	r2, [r7, #32]
 800a2f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2f6:	f7ff ff83 	bl	800a200 <prvInsertTimerInActiveList>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d047      	beq.n	800a390 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a306:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30a:	69db      	ldr	r3, [r3, #28]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d13f      	bne.n	800a390 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	441a      	add	r2, r3
 800a318:	2300      	movs	r3, #0
 800a31a:	9300      	str	r3, [sp, #0]
 800a31c:	2300      	movs	r3, #0
 800a31e:	2100      	movs	r1, #0
 800a320:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a322:	f7ff fe3b 	bl	8009f9c <xTimerGenericCommand>
 800a326:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d130      	bne.n	800a390 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	61bb      	str	r3, [r7, #24]
}
 800a340:	bf00      	nop
 800a342:	e7fe      	b.n	800a342 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a344:	68fa      	ldr	r2, [r7, #12]
 800a346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a348:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34c:	699b      	ldr	r3, [r3, #24]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d10a      	bne.n	800a368 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800a352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a356:	f383 8811 	msr	BASEPRI, r3
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	617b      	str	r3, [r7, #20]
}
 800a364:	bf00      	nop
 800a366:	e7fe      	b.n	800a366 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36a:	699a      	ldr	r2, [r3, #24]
 800a36c:	6a3b      	ldr	r3, [r7, #32]
 800a36e:	18d1      	adds	r1, r2, r3
 800a370:	6a3b      	ldr	r3, [r7, #32]
 800a372:	6a3a      	ldr	r2, [r7, #32]
 800a374:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a376:	f7ff ff43 	bl	800a200 <prvInsertTimerInActiveList>
					break;
 800a37a:	e009      	b.n	800a390 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a382:	2b00      	cmp	r3, #0
 800a384:	d104      	bne.n	800a390 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800a386:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a388:	f000 fbca 	bl	800ab20 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a38c:	e000      	b.n	800a390 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a38e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a390:	4b08      	ldr	r3, [pc, #32]	; (800a3b4 <prvProcessReceivedCommands+0x130>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f107 0108 	add.w	r1, r7, #8
 800a398:	2200      	movs	r2, #0
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7fe f8aa 	bl	80084f4 <xQueueReceive>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f47f af72 	bne.w	800a28c <prvProcessReceivedCommands+0x8>
	}
}
 800a3a8:	bf00      	nop
 800a3aa:	bf00      	nop
 800a3ac:	3728      	adds	r7, #40	; 0x28
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	20000330 	.word	0x20000330

0800a3b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b088      	sub	sp, #32
 800a3bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3be:	e045      	b.n	800a44c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3c0:	4b2c      	ldr	r3, [pc, #176]	; (800a474 <prvSwitchTimerLists+0xbc>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3ca:	4b2a      	ldr	r3, [pc, #168]	; (800a474 <prvSwitchTimerLists+0xbc>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	3304      	adds	r3, #4
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fd fd41 	bl	8007e60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	69db      	ldr	r3, [r3, #28]
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d12e      	bne.n	800a44c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	699b      	ldr	r3, [r3, #24]
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a3f8:	68ba      	ldr	r2, [r7, #8]
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d90e      	bls.n	800a41e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a40c:	4b19      	ldr	r3, [pc, #100]	; (800a474 <prvSwitchTimerLists+0xbc>)
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	3304      	adds	r3, #4
 800a414:	4619      	mov	r1, r3
 800a416:	4610      	mov	r0, r2
 800a418:	f7fd fce9 	bl	8007dee <vListInsert>
 800a41c:	e016      	b.n	800a44c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a41e:	2300      	movs	r3, #0
 800a420:	9300      	str	r3, [sp, #0]
 800a422:	2300      	movs	r3, #0
 800a424:	693a      	ldr	r2, [r7, #16]
 800a426:	2100      	movs	r1, #0
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f7ff fdb7 	bl	8009f9c <xTimerGenericCommand>
 800a42e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d10a      	bne.n	800a44c <prvSwitchTimerLists+0x94>
	__asm volatile
 800a436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	603b      	str	r3, [r7, #0]
}
 800a448:	bf00      	nop
 800a44a:	e7fe      	b.n	800a44a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a44c:	4b09      	ldr	r3, [pc, #36]	; (800a474 <prvSwitchTimerLists+0xbc>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d1b4      	bne.n	800a3c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a456:	4b07      	ldr	r3, [pc, #28]	; (800a474 <prvSwitchTimerLists+0xbc>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a45c:	4b06      	ldr	r3, [pc, #24]	; (800a478 <prvSwitchTimerLists+0xc0>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a04      	ldr	r2, [pc, #16]	; (800a474 <prvSwitchTimerLists+0xbc>)
 800a462:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a464:	4a04      	ldr	r2, [pc, #16]	; (800a478 <prvSwitchTimerLists+0xc0>)
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	6013      	str	r3, [r2, #0]
}
 800a46a:	bf00      	nop
 800a46c:	3718      	adds	r7, #24
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	20000328 	.word	0x20000328
 800a478:	2000032c 	.word	0x2000032c

0800a47c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a482:	f000 f967 	bl	800a754 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a486:	4b15      	ldr	r3, [pc, #84]	; (800a4dc <prvCheckForValidListAndQueue+0x60>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d120      	bne.n	800a4d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a48e:	4814      	ldr	r0, [pc, #80]	; (800a4e0 <prvCheckForValidListAndQueue+0x64>)
 800a490:	f7fd fc5c 	bl	8007d4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a494:	4813      	ldr	r0, [pc, #76]	; (800a4e4 <prvCheckForValidListAndQueue+0x68>)
 800a496:	f7fd fc59 	bl	8007d4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a49a:	4b13      	ldr	r3, [pc, #76]	; (800a4e8 <prvCheckForValidListAndQueue+0x6c>)
 800a49c:	4a10      	ldr	r2, [pc, #64]	; (800a4e0 <prvCheckForValidListAndQueue+0x64>)
 800a49e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a4a0:	4b12      	ldr	r3, [pc, #72]	; (800a4ec <prvCheckForValidListAndQueue+0x70>)
 800a4a2:	4a10      	ldr	r2, [pc, #64]	; (800a4e4 <prvCheckForValidListAndQueue+0x68>)
 800a4a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	4b11      	ldr	r3, [pc, #68]	; (800a4f0 <prvCheckForValidListAndQueue+0x74>)
 800a4ac:	4a11      	ldr	r2, [pc, #68]	; (800a4f4 <prvCheckForValidListAndQueue+0x78>)
 800a4ae:	210c      	movs	r1, #12
 800a4b0:	200a      	movs	r0, #10
 800a4b2:	f7fd fd67 	bl	8007f84 <xQueueGenericCreateStatic>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	4a08      	ldr	r2, [pc, #32]	; (800a4dc <prvCheckForValidListAndQueue+0x60>)
 800a4ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a4bc:	4b07      	ldr	r3, [pc, #28]	; (800a4dc <prvCheckForValidListAndQueue+0x60>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d005      	beq.n	800a4d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a4c4:	4b05      	ldr	r3, [pc, #20]	; (800a4dc <prvCheckForValidListAndQueue+0x60>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	490b      	ldr	r1, [pc, #44]	; (800a4f8 <prvCheckForValidListAndQueue+0x7c>)
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fe fb26 	bl	8008b1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4d0:	f000 f970 	bl	800a7b4 <vPortExitCritical>
}
 800a4d4:	bf00      	nop
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	20000330 	.word	0x20000330
 800a4e0:	20000300 	.word	0x20000300
 800a4e4:	20000314 	.word	0x20000314
 800a4e8:	20000328 	.word	0x20000328
 800a4ec:	2000032c 	.word	0x2000032c
 800a4f0:	200003b4 	.word	0x200003b4
 800a4f4:	2000033c 	.word	0x2000033c
 800a4f8:	08010534 	.word	0x08010534

0800a4fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	3b04      	subs	r3, #4
 800a50c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a514:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	3b04      	subs	r3, #4
 800a51a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	f023 0201 	bic.w	r2, r3, #1
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	3b04      	subs	r3, #4
 800a52a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a52c:	4a0c      	ldr	r2, [pc, #48]	; (800a560 <pxPortInitialiseStack+0x64>)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	3b14      	subs	r3, #20
 800a536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	3b04      	subs	r3, #4
 800a542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f06f 0202 	mvn.w	r2, #2
 800a54a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	3b20      	subs	r3, #32
 800a550:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a552:	68fb      	ldr	r3, [r7, #12]
}
 800a554:	4618      	mov	r0, r3
 800a556:	3714      	adds	r7, #20
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr
 800a560:	0800a565 	.word	0x0800a565

0800a564 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a56a:	2300      	movs	r3, #0
 800a56c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a56e:	4b12      	ldr	r3, [pc, #72]	; (800a5b8 <prvTaskExitError+0x54>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a576:	d00a      	beq.n	800a58e <prvTaskExitError+0x2a>
	__asm volatile
 800a578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57c:	f383 8811 	msr	BASEPRI, r3
 800a580:	f3bf 8f6f 	isb	sy
 800a584:	f3bf 8f4f 	dsb	sy
 800a588:	60fb      	str	r3, [r7, #12]
}
 800a58a:	bf00      	nop
 800a58c:	e7fe      	b.n	800a58c <prvTaskExitError+0x28>
	__asm volatile
 800a58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a592:	f383 8811 	msr	BASEPRI, r3
 800a596:	f3bf 8f6f 	isb	sy
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	60bb      	str	r3, [r7, #8]
}
 800a5a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a5a2:	bf00      	nop
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d0fc      	beq.n	800a5a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a5aa:	bf00      	nop
 800a5ac:	bf00      	nop
 800a5ae:	3714      	adds	r7, #20
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr
 800a5b8:	20000008 	.word	0x20000008
 800a5bc:	00000000 	.word	0x00000000

0800a5c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a5c0:	4b07      	ldr	r3, [pc, #28]	; (800a5e0 <pxCurrentTCBConst2>)
 800a5c2:	6819      	ldr	r1, [r3, #0]
 800a5c4:	6808      	ldr	r0, [r1, #0]
 800a5c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ca:	f380 8809 	msr	PSP, r0
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f04f 0000 	mov.w	r0, #0
 800a5d6:	f380 8811 	msr	BASEPRI, r0
 800a5da:	4770      	bx	lr
 800a5dc:	f3af 8000 	nop.w

0800a5e0 <pxCurrentTCBConst2>:
 800a5e0:	20000210 	.word	0x20000210
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a5e4:	bf00      	nop
 800a5e6:	bf00      	nop

0800a5e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a5e8:	4808      	ldr	r0, [pc, #32]	; (800a60c <prvPortStartFirstTask+0x24>)
 800a5ea:	6800      	ldr	r0, [r0, #0]
 800a5ec:	6800      	ldr	r0, [r0, #0]
 800a5ee:	f380 8808 	msr	MSP, r0
 800a5f2:	f04f 0000 	mov.w	r0, #0
 800a5f6:	f380 8814 	msr	CONTROL, r0
 800a5fa:	b662      	cpsie	i
 800a5fc:	b661      	cpsie	f
 800a5fe:	f3bf 8f4f 	dsb	sy
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	df00      	svc	0
 800a608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a60a:	bf00      	nop
 800a60c:	e000ed08 	.word	0xe000ed08

0800a610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a616:	4b46      	ldr	r3, [pc, #280]	; (800a730 <xPortStartScheduler+0x120>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a46      	ldr	r2, [pc, #280]	; (800a734 <xPortStartScheduler+0x124>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d10a      	bne.n	800a636 <xPortStartScheduler+0x26>
	__asm volatile
 800a620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	613b      	str	r3, [r7, #16]
}
 800a632:	bf00      	nop
 800a634:	e7fe      	b.n	800a634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a636:	4b3e      	ldr	r3, [pc, #248]	; (800a730 <xPortStartScheduler+0x120>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a3f      	ldr	r2, [pc, #252]	; (800a738 <xPortStartScheduler+0x128>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d10a      	bne.n	800a656 <xPortStartScheduler+0x46>
	__asm volatile
 800a640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	60fb      	str	r3, [r7, #12]
}
 800a652:	bf00      	nop
 800a654:	e7fe      	b.n	800a654 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a656:	4b39      	ldr	r3, [pc, #228]	; (800a73c <xPortStartScheduler+0x12c>)
 800a658:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	22ff      	movs	r2, #255	; 0xff
 800a666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a670:	78fb      	ldrb	r3, [r7, #3]
 800a672:	b2db      	uxtb	r3, r3
 800a674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a678:	b2da      	uxtb	r2, r3
 800a67a:	4b31      	ldr	r3, [pc, #196]	; (800a740 <xPortStartScheduler+0x130>)
 800a67c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a67e:	4b31      	ldr	r3, [pc, #196]	; (800a744 <xPortStartScheduler+0x134>)
 800a680:	2207      	movs	r2, #7
 800a682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a684:	e009      	b.n	800a69a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a686:	4b2f      	ldr	r3, [pc, #188]	; (800a744 <xPortStartScheduler+0x134>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	3b01      	subs	r3, #1
 800a68c:	4a2d      	ldr	r2, [pc, #180]	; (800a744 <xPortStartScheduler+0x134>)
 800a68e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a690:	78fb      	ldrb	r3, [r7, #3]
 800a692:	b2db      	uxtb	r3, r3
 800a694:	005b      	lsls	r3, r3, #1
 800a696:	b2db      	uxtb	r3, r3
 800a698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a69a:	78fb      	ldrb	r3, [r7, #3]
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6a2:	2b80      	cmp	r3, #128	; 0x80
 800a6a4:	d0ef      	beq.n	800a686 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a6a6:	4b27      	ldr	r3, [pc, #156]	; (800a744 <xPortStartScheduler+0x134>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f1c3 0307 	rsb	r3, r3, #7
 800a6ae:	2b04      	cmp	r3, #4
 800a6b0:	d00a      	beq.n	800a6c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	60bb      	str	r3, [r7, #8]
}
 800a6c4:	bf00      	nop
 800a6c6:	e7fe      	b.n	800a6c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a6c8:	4b1e      	ldr	r3, [pc, #120]	; (800a744 <xPortStartScheduler+0x134>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	021b      	lsls	r3, r3, #8
 800a6ce:	4a1d      	ldr	r2, [pc, #116]	; (800a744 <xPortStartScheduler+0x134>)
 800a6d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a6d2:	4b1c      	ldr	r3, [pc, #112]	; (800a744 <xPortStartScheduler+0x134>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a6da:	4a1a      	ldr	r2, [pc, #104]	; (800a744 <xPortStartScheduler+0x134>)
 800a6dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	b2da      	uxtb	r2, r3
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a6e6:	4b18      	ldr	r3, [pc, #96]	; (800a748 <xPortStartScheduler+0x138>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a17      	ldr	r2, [pc, #92]	; (800a748 <xPortStartScheduler+0x138>)
 800a6ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a6f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a6f2:	4b15      	ldr	r3, [pc, #84]	; (800a748 <xPortStartScheduler+0x138>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a14      	ldr	r2, [pc, #80]	; (800a748 <xPortStartScheduler+0x138>)
 800a6f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a6fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a6fe:	f000 f8dd 	bl	800a8bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a702:	4b12      	ldr	r3, [pc, #72]	; (800a74c <xPortStartScheduler+0x13c>)
 800a704:	2200      	movs	r2, #0
 800a706:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a708:	f000 f8fc 	bl	800a904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a70c:	4b10      	ldr	r3, [pc, #64]	; (800a750 <xPortStartScheduler+0x140>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a0f      	ldr	r2, [pc, #60]	; (800a750 <xPortStartScheduler+0x140>)
 800a712:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a716:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a718:	f7ff ff66 	bl	800a5e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a71c:	f7fe feaa 	bl	8009474 <vTaskSwitchContext>
	prvTaskExitError();
 800a720:	f7ff ff20 	bl	800a564 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3718      	adds	r7, #24
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	e000ed00 	.word	0xe000ed00
 800a734:	410fc271 	.word	0x410fc271
 800a738:	410fc270 	.word	0x410fc270
 800a73c:	e000e400 	.word	0xe000e400
 800a740:	200003fc 	.word	0x200003fc
 800a744:	20000400 	.word	0x20000400
 800a748:	e000ed20 	.word	0xe000ed20
 800a74c:	20000008 	.word	0x20000008
 800a750:	e000ef34 	.word	0xe000ef34

0800a754 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
	__asm volatile
 800a75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75e:	f383 8811 	msr	BASEPRI, r3
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	f3bf 8f4f 	dsb	sy
 800a76a:	607b      	str	r3, [r7, #4]
}
 800a76c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a76e:	4b0f      	ldr	r3, [pc, #60]	; (800a7ac <vPortEnterCritical+0x58>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	3301      	adds	r3, #1
 800a774:	4a0d      	ldr	r2, [pc, #52]	; (800a7ac <vPortEnterCritical+0x58>)
 800a776:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a778:	4b0c      	ldr	r3, [pc, #48]	; (800a7ac <vPortEnterCritical+0x58>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d10f      	bne.n	800a7a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a780:	4b0b      	ldr	r3, [pc, #44]	; (800a7b0 <vPortEnterCritical+0x5c>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00a      	beq.n	800a7a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78e:	f383 8811 	msr	BASEPRI, r3
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	f3bf 8f4f 	dsb	sy
 800a79a:	603b      	str	r3, [r7, #0]
}
 800a79c:	bf00      	nop
 800a79e:	e7fe      	b.n	800a79e <vPortEnterCritical+0x4a>
	}
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	20000008 	.word	0x20000008
 800a7b0:	e000ed04 	.word	0xe000ed04

0800a7b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a7ba:	4b12      	ldr	r3, [pc, #72]	; (800a804 <vPortExitCritical+0x50>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d10a      	bne.n	800a7d8 <vPortExitCritical+0x24>
	__asm volatile
 800a7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c6:	f383 8811 	msr	BASEPRI, r3
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	607b      	str	r3, [r7, #4]
}
 800a7d4:	bf00      	nop
 800a7d6:	e7fe      	b.n	800a7d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a7d8:	4b0a      	ldr	r3, [pc, #40]	; (800a804 <vPortExitCritical+0x50>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	4a09      	ldr	r2, [pc, #36]	; (800a804 <vPortExitCritical+0x50>)
 800a7e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a7e2:	4b08      	ldr	r3, [pc, #32]	; (800a804 <vPortExitCritical+0x50>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d105      	bne.n	800a7f6 <vPortExitCritical+0x42>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	f383 8811 	msr	BASEPRI, r3
}
 800a7f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a7f6:	bf00      	nop
 800a7f8:	370c      	adds	r7, #12
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	20000008 	.word	0x20000008
	...

0800a810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a810:	f3ef 8009 	mrs	r0, PSP
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	4b15      	ldr	r3, [pc, #84]	; (800a870 <pxCurrentTCBConst>)
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	f01e 0f10 	tst.w	lr, #16
 800a820:	bf08      	it	eq
 800a822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82a:	6010      	str	r0, [r2, #0]
 800a82c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a830:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a834:	f380 8811 	msr	BASEPRI, r0
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f7fe fe18 	bl	8009474 <vTaskSwitchContext>
 800a844:	f04f 0000 	mov.w	r0, #0
 800a848:	f380 8811 	msr	BASEPRI, r0
 800a84c:	bc09      	pop	{r0, r3}
 800a84e:	6819      	ldr	r1, [r3, #0]
 800a850:	6808      	ldr	r0, [r1, #0]
 800a852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a856:	f01e 0f10 	tst.w	lr, #16
 800a85a:	bf08      	it	eq
 800a85c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a860:	f380 8809 	msr	PSP, r0
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	f3af 8000 	nop.w

0800a870 <pxCurrentTCBConst>:
 800a870:	20000210 	.word	0x20000210
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a874:	bf00      	nop
 800a876:	bf00      	nop

0800a878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
	__asm volatile
 800a87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a882:	f383 8811 	msr	BASEPRI, r3
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	607b      	str	r3, [r7, #4]
}
 800a890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a892:	f7fe fd31 	bl	80092f8 <xTaskIncrementTick>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d003      	beq.n	800a8a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a89c:	4b06      	ldr	r3, [pc, #24]	; (800a8b8 <SysTick_Handler+0x40>)
 800a89e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8a2:	601a      	str	r2, [r3, #0]
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	f383 8811 	msr	BASEPRI, r3
}
 800a8ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	e000ed04 	.word	0xe000ed04

0800a8bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a8bc:	b480      	push	{r7}
 800a8be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a8c0:	4b0b      	ldr	r3, [pc, #44]	; (800a8f0 <vPortSetupTimerInterrupt+0x34>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a8c6:	4b0b      	ldr	r3, [pc, #44]	; (800a8f4 <vPortSetupTimerInterrupt+0x38>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a8cc:	4b0a      	ldr	r3, [pc, #40]	; (800a8f8 <vPortSetupTimerInterrupt+0x3c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a0a      	ldr	r2, [pc, #40]	; (800a8fc <vPortSetupTimerInterrupt+0x40>)
 800a8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8d6:	099b      	lsrs	r3, r3, #6
 800a8d8:	4a09      	ldr	r2, [pc, #36]	; (800a900 <vPortSetupTimerInterrupt+0x44>)
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a8de:	4b04      	ldr	r3, [pc, #16]	; (800a8f0 <vPortSetupTimerInterrupt+0x34>)
 800a8e0:	2207      	movs	r2, #7
 800a8e2:	601a      	str	r2, [r3, #0]
}
 800a8e4:	bf00      	nop
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	e000e010 	.word	0xe000e010
 800a8f4:	e000e018 	.word	0xe000e018
 800a8f8:	20000044 	.word	0x20000044
 800a8fc:	10624dd3 	.word	0x10624dd3
 800a900:	e000e014 	.word	0xe000e014

0800a904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a914 <vPortEnableVFP+0x10>
 800a908:	6801      	ldr	r1, [r0, #0]
 800a90a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a90e:	6001      	str	r1, [r0, #0]
 800a910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a912:	bf00      	nop
 800a914:	e000ed88 	.word	0xe000ed88

0800a918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a91e:	f3ef 8305 	mrs	r3, IPSR
 800a922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2b0f      	cmp	r3, #15
 800a928:	d914      	bls.n	800a954 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a92a:	4a17      	ldr	r2, [pc, #92]	; (800a988 <vPortValidateInterruptPriority+0x70>)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	4413      	add	r3, r2
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a934:	4b15      	ldr	r3, [pc, #84]	; (800a98c <vPortValidateInterruptPriority+0x74>)
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	7afa      	ldrb	r2, [r7, #11]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d20a      	bcs.n	800a954 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	607b      	str	r3, [r7, #4]
}
 800a950:	bf00      	nop
 800a952:	e7fe      	b.n	800a952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a954:	4b0e      	ldr	r3, [pc, #56]	; (800a990 <vPortValidateInterruptPriority+0x78>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a95c:	4b0d      	ldr	r3, [pc, #52]	; (800a994 <vPortValidateInterruptPriority+0x7c>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	429a      	cmp	r2, r3
 800a962:	d90a      	bls.n	800a97a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a968:	f383 8811 	msr	BASEPRI, r3
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	603b      	str	r3, [r7, #0]
}
 800a976:	bf00      	nop
 800a978:	e7fe      	b.n	800a978 <vPortValidateInterruptPriority+0x60>
	}
 800a97a:	bf00      	nop
 800a97c:	3714      	adds	r7, #20
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	e000e3f0 	.word	0xe000e3f0
 800a98c:	200003fc 	.word	0x200003fc
 800a990:	e000ed0c 	.word	0xe000ed0c
 800a994:	20000400 	.word	0x20000400

0800a998 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b08a      	sub	sp, #40	; 0x28
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a9a4:	f7fe fbdc 	bl	8009160 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a9a8:	4b58      	ldr	r3, [pc, #352]	; (800ab0c <pvPortMalloc+0x174>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d101      	bne.n	800a9b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a9b0:	f000 f910 	bl	800abd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a9b4:	4b56      	ldr	r3, [pc, #344]	; (800ab10 <pvPortMalloc+0x178>)
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4013      	ands	r3, r2
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f040 808e 	bne.w	800aade <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d01d      	beq.n	800aa04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a9c8:	2208      	movs	r2, #8
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f003 0307 	and.w	r3, r3, #7
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d014      	beq.n	800aa04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f023 0307 	bic.w	r3, r3, #7
 800a9e0:	3308      	adds	r3, #8
 800a9e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f003 0307 	and.w	r3, r3, #7
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00a      	beq.n	800aa04 <pvPortMalloc+0x6c>
	__asm volatile
 800a9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f2:	f383 8811 	msr	BASEPRI, r3
 800a9f6:	f3bf 8f6f 	isb	sy
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	617b      	str	r3, [r7, #20]
}
 800aa00:	bf00      	nop
 800aa02:	e7fe      	b.n	800aa02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d069      	beq.n	800aade <pvPortMalloc+0x146>
 800aa0a:	4b42      	ldr	r3, [pc, #264]	; (800ab14 <pvPortMalloc+0x17c>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d864      	bhi.n	800aade <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa14:	4b40      	ldr	r3, [pc, #256]	; (800ab18 <pvPortMalloc+0x180>)
 800aa16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa18:	4b3f      	ldr	r3, [pc, #252]	; (800ab18 <pvPortMalloc+0x180>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa1e:	e004      	b.n	800aa2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d903      	bls.n	800aa3c <pvPortMalloc+0xa4>
 800aa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1f1      	bne.n	800aa20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aa3c:	4b33      	ldr	r3, [pc, #204]	; (800ab0c <pvPortMalloc+0x174>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d04b      	beq.n	800aade <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa46:	6a3b      	ldr	r3, [r7, #32]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2208      	movs	r2, #8
 800aa4c:	4413      	add	r3, r2
 800aa4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	6a3b      	ldr	r3, [r7, #32]
 800aa56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5a:	685a      	ldr	r2, [r3, #4]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	1ad2      	subs	r2, r2, r3
 800aa60:	2308      	movs	r3, #8
 800aa62:	005b      	lsls	r3, r3, #1
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d91f      	bls.n	800aaa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	f003 0307 	and.w	r3, r3, #7
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00a      	beq.n	800aa90 <pvPortMalloc+0xf8>
	__asm volatile
 800aa7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7e:	f383 8811 	msr	BASEPRI, r3
 800aa82:	f3bf 8f6f 	isb	sy
 800aa86:	f3bf 8f4f 	dsb	sy
 800aa8a:	613b      	str	r3, [r7, #16]
}
 800aa8c:	bf00      	nop
 800aa8e:	e7fe      	b.n	800aa8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa92:	685a      	ldr	r2, [r3, #4]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	1ad2      	subs	r2, r2, r3
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aaa2:	69b8      	ldr	r0, [r7, #24]
 800aaa4:	f000 f8f8 	bl	800ac98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aaa8:	4b1a      	ldr	r3, [pc, #104]	; (800ab14 <pvPortMalloc+0x17c>)
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	1ad3      	subs	r3, r2, r3
 800aab2:	4a18      	ldr	r2, [pc, #96]	; (800ab14 <pvPortMalloc+0x17c>)
 800aab4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aab6:	4b17      	ldr	r3, [pc, #92]	; (800ab14 <pvPortMalloc+0x17c>)
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	4b18      	ldr	r3, [pc, #96]	; (800ab1c <pvPortMalloc+0x184>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d203      	bcs.n	800aaca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aac2:	4b14      	ldr	r3, [pc, #80]	; (800ab14 <pvPortMalloc+0x17c>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a15      	ldr	r2, [pc, #84]	; (800ab1c <pvPortMalloc+0x184>)
 800aac8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aaca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aacc:	685a      	ldr	r2, [r3, #4]
 800aace:	4b10      	ldr	r3, [pc, #64]	; (800ab10 <pvPortMalloc+0x178>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	431a      	orrs	r2, r3
 800aad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aada:	2200      	movs	r2, #0
 800aadc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aade:	f7fe fb4d 	bl	800917c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	f003 0307 	and.w	r3, r3, #7
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00a      	beq.n	800ab02 <pvPortMalloc+0x16a>
	__asm volatile
 800aaec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf0:	f383 8811 	msr	BASEPRI, r3
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	60fb      	str	r3, [r7, #12]
}
 800aafe:	bf00      	nop
 800ab00:	e7fe      	b.n	800ab00 <pvPortMalloc+0x168>
	return pvReturn;
 800ab02:	69fb      	ldr	r3, [r7, #28]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3728      	adds	r7, #40	; 0x28
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	2000080c 	.word	0x2000080c
 800ab10:	20000818 	.word	0x20000818
 800ab14:	20000810 	.word	0x20000810
 800ab18:	20000804 	.word	0x20000804
 800ab1c:	20000814 	.word	0x20000814

0800ab20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d048      	beq.n	800abc4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab32:	2308      	movs	r3, #8
 800ab34:	425b      	negs	r3, r3
 800ab36:	697a      	ldr	r2, [r7, #20]
 800ab38:	4413      	add	r3, r2
 800ab3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	685a      	ldr	r2, [r3, #4]
 800ab44:	4b21      	ldr	r3, [pc, #132]	; (800abcc <vPortFree+0xac>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4013      	ands	r3, r2
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d10a      	bne.n	800ab64 <vPortFree+0x44>
	__asm volatile
 800ab4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab52:	f383 8811 	msr	BASEPRI, r3
 800ab56:	f3bf 8f6f 	isb	sy
 800ab5a:	f3bf 8f4f 	dsb	sy
 800ab5e:	60fb      	str	r3, [r7, #12]
}
 800ab60:	bf00      	nop
 800ab62:	e7fe      	b.n	800ab62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00a      	beq.n	800ab82 <vPortFree+0x62>
	__asm volatile
 800ab6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab70:	f383 8811 	msr	BASEPRI, r3
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	60bb      	str	r3, [r7, #8]
}
 800ab7e:	bf00      	nop
 800ab80:	e7fe      	b.n	800ab80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	685a      	ldr	r2, [r3, #4]
 800ab86:	4b11      	ldr	r3, [pc, #68]	; (800abcc <vPortFree+0xac>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d019      	beq.n	800abc4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d115      	bne.n	800abc4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	685a      	ldr	r2, [r3, #4]
 800ab9c:	4b0b      	ldr	r3, [pc, #44]	; (800abcc <vPortFree+0xac>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	43db      	mvns	r3, r3
 800aba2:	401a      	ands	r2, r3
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aba8:	f7fe fada 	bl	8009160 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	685a      	ldr	r2, [r3, #4]
 800abb0:	4b07      	ldr	r3, [pc, #28]	; (800abd0 <vPortFree+0xb0>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4413      	add	r3, r2
 800abb6:	4a06      	ldr	r2, [pc, #24]	; (800abd0 <vPortFree+0xb0>)
 800abb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800abba:	6938      	ldr	r0, [r7, #16]
 800abbc:	f000 f86c 	bl	800ac98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800abc0:	f7fe fadc 	bl	800917c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800abc4:	bf00      	nop
 800abc6:	3718      	adds	r7, #24
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	20000818 	.word	0x20000818
 800abd0:	20000810 	.word	0x20000810

0800abd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800abda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800abe0:	4b27      	ldr	r3, [pc, #156]	; (800ac80 <prvHeapInit+0xac>)
 800abe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f003 0307 	and.w	r3, r3, #7
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00c      	beq.n	800ac08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	3307      	adds	r3, #7
 800abf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f023 0307 	bic.w	r3, r3, #7
 800abfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	1ad3      	subs	r3, r2, r3
 800ac02:	4a1f      	ldr	r2, [pc, #124]	; (800ac80 <prvHeapInit+0xac>)
 800ac04:	4413      	add	r3, r2
 800ac06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac0c:	4a1d      	ldr	r2, [pc, #116]	; (800ac84 <prvHeapInit+0xb0>)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac12:	4b1c      	ldr	r3, [pc, #112]	; (800ac84 <prvHeapInit+0xb0>)
 800ac14:	2200      	movs	r2, #0
 800ac16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ac20:	2208      	movs	r2, #8
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	1a9b      	subs	r3, r3, r2
 800ac26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f023 0307 	bic.w	r3, r3, #7
 800ac2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	4a15      	ldr	r2, [pc, #84]	; (800ac88 <prvHeapInit+0xb4>)
 800ac34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ac36:	4b14      	ldr	r3, [pc, #80]	; (800ac88 <prvHeapInit+0xb4>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ac3e:	4b12      	ldr	r3, [pc, #72]	; (800ac88 <prvHeapInit+0xb4>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2200      	movs	r2, #0
 800ac44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	1ad2      	subs	r2, r2, r3
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ac54:	4b0c      	ldr	r3, [pc, #48]	; (800ac88 <prvHeapInit+0xb4>)
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	4a0a      	ldr	r2, [pc, #40]	; (800ac8c <prvHeapInit+0xb8>)
 800ac62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	4a09      	ldr	r2, [pc, #36]	; (800ac90 <prvHeapInit+0xbc>)
 800ac6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac6c:	4b09      	ldr	r3, [pc, #36]	; (800ac94 <prvHeapInit+0xc0>)
 800ac6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ac72:	601a      	str	r2, [r3, #0]
}
 800ac74:	bf00      	nop
 800ac76:	3714      	adds	r7, #20
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	20000404 	.word	0x20000404
 800ac84:	20000804 	.word	0x20000804
 800ac88:	2000080c 	.word	0x2000080c
 800ac8c:	20000814 	.word	0x20000814
 800ac90:	20000810 	.word	0x20000810
 800ac94:	20000818 	.word	0x20000818

0800ac98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aca0:	4b28      	ldr	r3, [pc, #160]	; (800ad44 <prvInsertBlockIntoFreeList+0xac>)
 800aca2:	60fb      	str	r3, [r7, #12]
 800aca4:	e002      	b.n	800acac <prvInsertBlockIntoFreeList+0x14>
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	60fb      	str	r3, [r7, #12]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d8f7      	bhi.n	800aca6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	68ba      	ldr	r2, [r7, #8]
 800acc0:	4413      	add	r3, r2
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d108      	bne.n	800acda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	685a      	ldr	r2, [r3, #4]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	441a      	add	r2, r3
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	68ba      	ldr	r2, [r7, #8]
 800ace4:	441a      	add	r2, r3
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	429a      	cmp	r2, r3
 800acec:	d118      	bne.n	800ad20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	4b15      	ldr	r3, [pc, #84]	; (800ad48 <prvInsertBlockIntoFreeList+0xb0>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d00d      	beq.n	800ad16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	685a      	ldr	r2, [r3, #4]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	441a      	add	r2, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	e008      	b.n	800ad28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad16:	4b0c      	ldr	r3, [pc, #48]	; (800ad48 <prvInsertBlockIntoFreeList+0xb0>)
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	601a      	str	r2, [r3, #0]
 800ad1e:	e003      	b.n	800ad28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d002      	beq.n	800ad36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad36:	bf00      	nop
 800ad38:	3714      	adds	r7, #20
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	20000804 	.word	0x20000804
 800ad48:	2000080c 	.word	0x2000080c

0800ad4c <fromTickToMs>:

uint32_t fromSecToTick(float sec) {
	return (sec * configTICK_RATE_HZ);
}

float fromTickToMs(uint32_t ticks) {
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
	return ((float) (ticks) * 1000.0f) / (float) configTICK_RATE_HZ;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	ee07 3a90 	vmov	s15, r3
 800ad5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad5e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800ad80 <fromTickToMs+0x34>
 800ad62:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ad66:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800ad80 <fromTickToMs+0x34>
 800ad6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ad6e:	eef0 7a66 	vmov.f32	s15, s13
}
 800ad72:	eeb0 0a67 	vmov.f32	s0, s15
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr
 800ad80:	447a0000 	.word	0x447a0000

0800ad84 <cmp>:
uint32_t MS5837_conv_start_tick = CONVERTION_TIMEOUT;

void calculate();
void init_new_convertion();

int cmp(const void *a, const void *b) {
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
    return *(int*)a - *(int*)b;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	1ad3      	subs	r3, r2, r3
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <MS5837_02BA_init>:

bool MS5837_02BA_begin(I2C_HandleTypeDef * hi2c){
	return(MS5837_02BA_init(hi2c));
}

bool MS5837_02BA_init(I2C_HandleTypeDef * hi2c){
 800ada4:	b5b0      	push	{r4, r5, r7, lr}
 800ada6:	b086      	sub	sp, #24
 800ada8:	af02      	add	r7, sp, #8
 800adaa:	6078      	str	r0, [r7, #4]
	MS5837_hi2c = hi2c;
 800adac:	4a25      	ldr	r2, [pc, #148]	; (800ae44 <MS5837_02BA_init+0xa0>)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6013      	str	r3, [r2, #0]
	HAL_I2C_Init(hi2c);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f7f6 fffa 	bl	8001dac <HAL_I2C_Init>
	if(HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &RES_DEVICE_COMM, COMMAND_LENGTH, HAL_MAX_DELAY) != HAL_OK){
 800adb8:	4b22      	ldr	r3, [pc, #136]	; (800ae44 <MS5837_02BA_init+0xa0>)
 800adba:	6818      	ldr	r0, [r3, #0]
 800adbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adc0:	9300      	str	r3, [sp, #0]
 800adc2:	2301      	movs	r3, #1
 800adc4:	4a20      	ldr	r2, [pc, #128]	; (800ae48 <MS5837_02BA_init+0xa4>)
 800adc6:	21ec      	movs	r1, #236	; 0xec
 800adc8:	f7f7 f880 	bl	8001ecc <HAL_I2C_Master_Transmit>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d001      	beq.n	800add6 <MS5837_02BA_init+0x32>
		return false;
 800add2:	2300      	movs	r3, #0
 800add4:	e032      	b.n	800ae3c <MS5837_02BA_init+0x98>
	}
	//receiving C1 - C6
	uint8_t prom_addr = 0xA0;
 800add6:	23a0      	movs	r3, #160	; 0xa0
 800add8:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 7; i++) {
 800adda:	2300      	movs	r3, #0
 800addc:	73fb      	strb	r3, [r7, #15]
 800adde:	e029      	b.n	800ae34 <MS5837_02BA_init+0x90>
		uint8_t prom_buff[2];
		prom_addr += 2;
 800ade0:	7bbb      	ldrb	r3, [r7, #14]
 800ade2:	3302      	adds	r3, #2
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &prom_addr, COMMAND_LENGTH, HAL_MAX_DELAY);
 800ade8:	4b16      	ldr	r3, [pc, #88]	; (800ae44 <MS5837_02BA_init+0xa0>)
 800adea:	6818      	ldr	r0, [r3, #0]
 800adec:	f107 020e 	add.w	r2, r7, #14
 800adf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adf4:	9300      	str	r3, [sp, #0]
 800adf6:	2301      	movs	r3, #1
 800adf8:	21ec      	movs	r1, #236	; 0xec
 800adfa:	f7f7 f867 	bl	8001ecc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, prom_buff, PROM_LENGTH, HAL_MAX_DELAY);
 800adfe:	4b11      	ldr	r3, [pc, #68]	; (800ae44 <MS5837_02BA_init+0xa0>)
 800ae00:	6818      	ldr	r0, [r3, #0]
 800ae02:	f107 020c 	add.w	r2, r7, #12
 800ae06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae0a:	9300      	str	r3, [sp, #0]
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	21ec      	movs	r1, #236	; 0xec
 800ae10:	f7f7 f950 	bl	80020b4 <HAL_I2C_Master_Receive>
		C[i] = (prom_buff[0] << 8) | (prom_buff[1]);
 800ae14:	7b3b      	ldrb	r3, [r7, #12]
 800ae16:	021b      	lsls	r3, r3, #8
 800ae18:	7b7a      	ldrb	r2, [r7, #13]
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	7bfa      	ldrb	r2, [r7, #15]
 800ae1e:	17d9      	asrs	r1, r3, #31
 800ae20:	461c      	mov	r4, r3
 800ae22:	460d      	mov	r5, r1
 800ae24:	4909      	ldr	r1, [pc, #36]	; (800ae4c <MS5837_02BA_init+0xa8>)
 800ae26:	00d3      	lsls	r3, r2, #3
 800ae28:	440b      	add	r3, r1
 800ae2a:	e9c3 4500 	strd	r4, r5, [r3]
	for (uint8_t i = 0; i < 7; i++) {
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
 800ae30:	3301      	adds	r3, #1
 800ae32:	73fb      	strb	r3, [r7, #15]
 800ae34:	7bfb      	ldrb	r3, [r7, #15]
 800ae36:	2b06      	cmp	r3, #6
 800ae38:	d9d2      	bls.n	800ade0 <MS5837_02BA_init+0x3c>
	}
	return true;
 800ae3a:	2301      	movs	r3, #1
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bdb0      	pop	{r4, r5, r7, pc}
 800ae44:	2000081c 	.word	0x2000081c
 800ae48:	2000000c 	.word	0x2000000c
 800ae4c:	20000828 	.word	0x20000828

0800ae50 <MS5837_02BA_get_actual_pressure>:

int32_t MS5837_02BA_get_actual_pressure(){
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
	uint32_t current_tick = HAL_GetTick();
 800ae56:	f7f6 f8db 	bl	8001010 <HAL_GetTick>
 800ae5a:	6078      	str	r0, [r7, #4]
	if(MS5837_I2C_NONE == MS5837_I2C_State){
 800ae5c:	4b1b      	ldr	r3, [pc, #108]	; (800aecc <MS5837_02BA_get_actual_pressure+0x7c>)
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d101      	bne.n	800ae68 <MS5837_02BA_get_actual_pressure+0x18>
		init_new_convertion();
 800ae64:	f000 f83e 	bl	800aee4 <init_new_convertion>
	}
	if(MS5837_I2C_D1_CONVERTION == MS5837_I2C_State && current_tick - MS5837_conv_start_tick >= CONVERTION_TIMEOUT){
 800ae68:	4b18      	ldr	r3, [pc, #96]	; (800aecc <MS5837_02BA_get_actual_pressure+0x7c>)
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	2b02      	cmp	r3, #2
 800ae6e:	d10f      	bne.n	800ae90 <MS5837_02BA_get_actual_pressure+0x40>
 800ae70:	4b17      	ldr	r3, [pc, #92]	; (800aed0 <MS5837_02BA_get_actual_pressure+0x80>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	1ad3      	subs	r3, r2, r3
 800ae78:	2b13      	cmp	r3, #19
 800ae7a:	d909      	bls.n	800ae90 <MS5837_02BA_get_actual_pressure+0x40>
		MS5837_I2C_State = MS5837_I2C_D1_TX_ADC_COM;
 800ae7c:	4b13      	ldr	r3, [pc, #76]	; (800aecc <MS5837_02BA_get_actual_pressure+0x7c>)
 800ae7e:	2203      	movs	r2, #3
 800ae80:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH);
 800ae82:	4b14      	ldr	r3, [pc, #80]	; (800aed4 <MS5837_02BA_get_actual_pressure+0x84>)
 800ae84:	6818      	ldr	r0, [r3, #0]
 800ae86:	2301      	movs	r3, #1
 800ae88:	4a13      	ldr	r2, [pc, #76]	; (800aed8 <MS5837_02BA_get_actual_pressure+0x88>)
 800ae8a:	21ec      	movs	r1, #236	; 0xec
 800ae8c:	f7f7 fa08 	bl	80022a0 <HAL_I2C_Master_Transmit_IT>
	}
	if(MS5837_I2C_D2_CONVERTION == MS5837_I2C_State && current_tick - MS5837_conv_start_tick >= CONVERTION_TIMEOUT){
 800ae90:	4b0e      	ldr	r3, [pc, #56]	; (800aecc <MS5837_02BA_get_actual_pressure+0x7c>)
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	2b06      	cmp	r3, #6
 800ae96:	d10f      	bne.n	800aeb8 <MS5837_02BA_get_actual_pressure+0x68>
 800ae98:	4b0d      	ldr	r3, [pc, #52]	; (800aed0 <MS5837_02BA_get_actual_pressure+0x80>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	1ad3      	subs	r3, r2, r3
 800aea0:	2b13      	cmp	r3, #19
 800aea2:	d909      	bls.n	800aeb8 <MS5837_02BA_get_actual_pressure+0x68>
		MS5837_I2C_State = MS5837_I2C_D2_TX_ADC_COM;
 800aea4:	4b09      	ldr	r3, [pc, #36]	; (800aecc <MS5837_02BA_get_actual_pressure+0x7c>)
 800aea6:	2207      	movs	r2, #7
 800aea8:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH);
 800aeaa:	4b0a      	ldr	r3, [pc, #40]	; (800aed4 <MS5837_02BA_get_actual_pressure+0x84>)
 800aeac:	6818      	ldr	r0, [r3, #0]
 800aeae:	2301      	movs	r3, #1
 800aeb0:	4a09      	ldr	r2, [pc, #36]	; (800aed8 <MS5837_02BA_get_actual_pressure+0x88>)
 800aeb2:	21ec      	movs	r1, #236	; 0xec
 800aeb4:	f7f7 f9f4 	bl	80022a0 <HAL_I2C_Master_Transmit_IT>
	}
//	HAL_I2C_StateTypeDef i2c_state = HAL_I2C_GetState(MS5837_hi2c);
	return presure-initial_pressure;
 800aeb8:	4b08      	ldr	r3, [pc, #32]	; (800aedc <MS5837_02BA_get_actual_pressure+0x8c>)
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	4b08      	ldr	r3, [pc, #32]	; (800aee0 <MS5837_02BA_get_actual_pressure+0x90>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	1ad3      	subs	r3, r2, r3
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3708      	adds	r7, #8
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	2000087b 	.word	0x2000087b
 800aed0:	20000010 	.word	0x20000010
 800aed4:	2000081c 	.word	0x2000081c
 800aed8:	20000820 	.word	0x20000820
 800aedc:	20000870 	.word	0x20000870
 800aee0:	20000874 	.word	0x20000874

0800aee4 <init_new_convertion>:

void init_new_convertion(){
 800aee4:	b580      	push	{r7, lr}
 800aee6:	af00      	add	r7, sp, #0
	MS5837_I2C_State = MS5837_I2C_D1_TX_CONV_COM;
 800aee8:	4b05      	ldr	r3, [pc, #20]	; (800af00 <init_new_convertion+0x1c>)
 800aeea:	2201      	movs	r2, #1
 800aeec:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D1_COMM, COMMAND_LENGTH);
 800aeee:	4b05      	ldr	r3, [pc, #20]	; (800af04 <init_new_convertion+0x20>)
 800aef0:	6818      	ldr	r0, [r3, #0]
 800aef2:	2301      	movs	r3, #1
 800aef4:	4a04      	ldr	r2, [pc, #16]	; (800af08 <init_new_convertion+0x24>)
 800aef6:	21ec      	movs	r1, #236	; 0xec
 800aef8:	f7f7 f9d2 	bl	80022a0 <HAL_I2C_Master_Transmit_IT>
//	MS5837_conv_start_tick = HAL_GetTick();
}
 800aefc:	bf00      	nop
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	2000087b 	.word	0x2000087b
 800af04:	2000081c 	.word	0x2000081c
 800af08:	2000000d 	.word	0x2000000d

0800af0c <MS5837_I2C_MasterRxCplt>:

void MS5837_I2C_MasterRxCplt (I2C_HandleTypeDef * hi2c){
 800af0c:	b5b0      	push	{r4, r5, r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
	if(hi2c == MS5837_hi2c){
 800af14:	491f      	ldr	r1, [pc, #124]	; (800af94 <MS5837_I2C_MasterRxCplt+0x88>)
 800af16:	6809      	ldr	r1, [r1, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	4288      	cmp	r0, r1
 800af1c:	d135      	bne.n	800af8a <MS5837_I2C_MasterRxCplt+0x7e>
		if(MS5837_I2C_D1_RX_ADC == MS5837_I2C_State){
 800af1e:	491e      	ldr	r1, [pc, #120]	; (800af98 <MS5837_I2C_MasterRxCplt+0x8c>)
 800af20:	7809      	ldrb	r1, [r1, #0]
 800af22:	2904      	cmp	r1, #4
 800af24:	d119      	bne.n	800af5a <MS5837_I2C_MasterRxCplt+0x4e>
			D1 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 800af26:	491d      	ldr	r1, [pc, #116]	; (800af9c <MS5837_I2C_MasterRxCplt+0x90>)
 800af28:	7809      	ldrb	r1, [r1, #0]
 800af2a:	0408      	lsls	r0, r1, #16
 800af2c:	491b      	ldr	r1, [pc, #108]	; (800af9c <MS5837_I2C_MasterRxCplt+0x90>)
 800af2e:	7849      	ldrb	r1, [r1, #1]
 800af30:	0209      	lsls	r1, r1, #8
 800af32:	4301      	orrs	r1, r0
 800af34:	4819      	ldr	r0, [pc, #100]	; (800af9c <MS5837_I2C_MasterRxCplt+0x90>)
 800af36:	7880      	ldrb	r0, [r0, #2]
 800af38:	4301      	orrs	r1, r0
 800af3a:	17c8      	asrs	r0, r1, #31
 800af3c:	460a      	mov	r2, r1
 800af3e:	4603      	mov	r3, r0
 800af40:	4917      	ldr	r1, [pc, #92]	; (800afa0 <MS5837_I2C_MasterRxCplt+0x94>)
 800af42:	e9c1 2300 	strd	r2, r3, [r1]
			MS5837_I2C_State = MS5837_I2C_D2_TX_CONV_COM;
 800af46:	4b14      	ldr	r3, [pc, #80]	; (800af98 <MS5837_I2C_MasterRxCplt+0x8c>)
 800af48:	2205      	movs	r2, #5
 800af4a:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D2_COMM, COMMAND_LENGTH);
 800af4c:	4b11      	ldr	r3, [pc, #68]	; (800af94 <MS5837_I2C_MasterRxCplt+0x88>)
 800af4e:	6818      	ldr	r0, [r3, #0]
 800af50:	2301      	movs	r3, #1
 800af52:	4a14      	ldr	r2, [pc, #80]	; (800afa4 <MS5837_I2C_MasterRxCplt+0x98>)
 800af54:	21ec      	movs	r1, #236	; 0xec
 800af56:	f7f7 f9a3 	bl	80022a0 <HAL_I2C_Master_Transmit_IT>
		}
		if(MS5837_I2C_D2_RX_ADC == MS5837_I2C_State){
 800af5a:	4b0f      	ldr	r3, [pc, #60]	; (800af98 <MS5837_I2C_MasterRxCplt+0x8c>)
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	2b08      	cmp	r3, #8
 800af60:	d113      	bne.n	800af8a <MS5837_I2C_MasterRxCplt+0x7e>
			D2 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 800af62:	4b0e      	ldr	r3, [pc, #56]	; (800af9c <MS5837_I2C_MasterRxCplt+0x90>)
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	041a      	lsls	r2, r3, #16
 800af68:	4b0c      	ldr	r3, [pc, #48]	; (800af9c <MS5837_I2C_MasterRxCplt+0x90>)
 800af6a:	785b      	ldrb	r3, [r3, #1]
 800af6c:	021b      	lsls	r3, r3, #8
 800af6e:	4313      	orrs	r3, r2
 800af70:	4a0a      	ldr	r2, [pc, #40]	; (800af9c <MS5837_I2C_MasterRxCplt+0x90>)
 800af72:	7892      	ldrb	r2, [r2, #2]
 800af74:	4313      	orrs	r3, r2
 800af76:	17da      	asrs	r2, r3, #31
 800af78:	461c      	mov	r4, r3
 800af7a:	4615      	mov	r5, r2
 800af7c:	4b0a      	ldr	r3, [pc, #40]	; (800afa8 <MS5837_I2C_MasterRxCplt+0x9c>)
 800af7e:	e9c3 4500 	strd	r4, r5, [r3]
			init_new_convertion();
 800af82:	f7ff ffaf 	bl	800aee4 <init_new_convertion>
			calculate();
 800af86:	f000 f90b 	bl	800b1a0 <calculate>
		}
//		MS5837_conv_start_tick = HAL_GetTick();
	}
}
 800af8a:	bf00      	nop
 800af8c:	3708      	adds	r7, #8
 800af8e:	46bd      	mov	sp, r7
 800af90:	bdb0      	pop	{r4, r5, r7, pc}
 800af92:	bf00      	nop
 800af94:	2000081c 	.word	0x2000081c
 800af98:	2000087b 	.word	0x2000087b
 800af9c:	20000878 	.word	0x20000878
 800afa0:	20000860 	.word	0x20000860
 800afa4:	2000000e 	.word	0x2000000e
 800afa8:	20000868 	.word	0x20000868

0800afac <MS5837_I2C_MasterTxCplt>:

void MS5837_I2C_MasterTxCplt (I2C_HandleTypeDef * hi2c){
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
	if(hi2c == MS5837_hi2c){
 800afb4:	4b1e      	ldr	r3, [pc, #120]	; (800b030 <MS5837_I2C_MasterTxCplt+0x84>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d133      	bne.n	800b026 <MS5837_I2C_MasterTxCplt+0x7a>
		if(MS5837_I2C_D1_TX_CONV_COM == MS5837_I2C_State){
 800afbe:	4b1d      	ldr	r3, [pc, #116]	; (800b034 <MS5837_I2C_MasterTxCplt+0x88>)
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d107      	bne.n	800afd6 <MS5837_I2C_MasterTxCplt+0x2a>
			MS5837_I2C_State = MS5837_I2C_D1_CONVERTION;
 800afc6:	4b1b      	ldr	r3, [pc, #108]	; (800b034 <MS5837_I2C_MasterTxCplt+0x88>)
 800afc8:	2202      	movs	r2, #2
 800afca:	701a      	strb	r2, [r3, #0]
			MS5837_conv_start_tick = HAL_GetTick();
 800afcc:	f7f6 f820 	bl	8001010 <HAL_GetTick>
 800afd0:	4603      	mov	r3, r0
 800afd2:	4a19      	ldr	r2, [pc, #100]	; (800b038 <MS5837_I2C_MasterTxCplt+0x8c>)
 800afd4:	6013      	str	r3, [r2, #0]
		}
		if(MS5837_I2C_D1_TX_ADC_COM == MS5837_I2C_State){
 800afd6:	4b17      	ldr	r3, [pc, #92]	; (800b034 <MS5837_I2C_MasterTxCplt+0x88>)
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	2b03      	cmp	r3, #3
 800afdc:	d109      	bne.n	800aff2 <MS5837_I2C_MasterTxCplt+0x46>
			MS5837_I2C_State = MS5837_I2C_D1_RX_ADC;
 800afde:	4b15      	ldr	r3, [pc, #84]	; (800b034 <MS5837_I2C_MasterTxCplt+0x88>)
 800afe0:	2204      	movs	r2, #4
 800afe2:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Receive_IT(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH);
 800afe4:	4b12      	ldr	r3, [pc, #72]	; (800b030 <MS5837_I2C_MasterTxCplt+0x84>)
 800afe6:	6818      	ldr	r0, [r3, #0]
 800afe8:	2303      	movs	r3, #3
 800afea:	4a14      	ldr	r2, [pc, #80]	; (800b03c <MS5837_I2C_MasterTxCplt+0x90>)
 800afec:	21ec      	movs	r1, #236	; 0xec
 800afee:	f7f7 f9c7 	bl	8002380 <HAL_I2C_Master_Receive_IT>
		}
		if(MS5837_I2C_D2_TX_CONV_COM == MS5837_I2C_State){
 800aff2:	4b10      	ldr	r3, [pc, #64]	; (800b034 <MS5837_I2C_MasterTxCplt+0x88>)
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	2b05      	cmp	r3, #5
 800aff8:	d107      	bne.n	800b00a <MS5837_I2C_MasterTxCplt+0x5e>
			MS5837_I2C_State = MS5837_I2C_D2_CONVERTION;
 800affa:	4b0e      	ldr	r3, [pc, #56]	; (800b034 <MS5837_I2C_MasterTxCplt+0x88>)
 800affc:	2206      	movs	r2, #6
 800affe:	701a      	strb	r2, [r3, #0]
			MS5837_conv_start_tick = HAL_GetTick();
 800b000:	f7f6 f806 	bl	8001010 <HAL_GetTick>
 800b004:	4603      	mov	r3, r0
 800b006:	4a0c      	ldr	r2, [pc, #48]	; (800b038 <MS5837_I2C_MasterTxCplt+0x8c>)
 800b008:	6013      	str	r3, [r2, #0]
		}
		if(MS5837_I2C_D2_TX_ADC_COM == MS5837_I2C_State){
 800b00a:	4b0a      	ldr	r3, [pc, #40]	; (800b034 <MS5837_I2C_MasterTxCplt+0x88>)
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	2b07      	cmp	r3, #7
 800b010:	d109      	bne.n	800b026 <MS5837_I2C_MasterTxCplt+0x7a>
			MS5837_I2C_State = MS5837_I2C_D2_RX_ADC;
 800b012:	4b08      	ldr	r3, [pc, #32]	; (800b034 <MS5837_I2C_MasterTxCplt+0x88>)
 800b014:	2208      	movs	r2, #8
 800b016:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Receive_IT(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH);
 800b018:	4b05      	ldr	r3, [pc, #20]	; (800b030 <MS5837_I2C_MasterTxCplt+0x84>)
 800b01a:	6818      	ldr	r0, [r3, #0]
 800b01c:	2303      	movs	r3, #3
 800b01e:	4a07      	ldr	r2, [pc, #28]	; (800b03c <MS5837_I2C_MasterTxCplt+0x90>)
 800b020:	21ec      	movs	r1, #236	; 0xec
 800b022:	f7f7 f9ad 	bl	8002380 <HAL_I2C_Master_Receive_IT>
		}
	}
}
 800b026:	bf00      	nop
 800b028:	3708      	adds	r7, #8
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	2000081c 	.word	0x2000081c
 800b034:	2000087b 	.word	0x2000087b
 800b038:	20000010 	.word	0x20000010
 800b03c:	20000878 	.word	0x20000878

0800b040 <MS5837_02BA_check_pressure>:

void MS5837_I2C_MasterError (I2C_HandleTypeDef * hi2c){
	__NOP();
}

int32_t MS5837_02BA_check_pressure(){
 800b040:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b044:	b082      	sub	sp, #8
 800b046:	af02      	add	r7, sp, #8
	//initializing D1 conversion
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D1_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 800b048:	4b36      	ldr	r3, [pc, #216]	; (800b124 <MS5837_02BA_check_pressure+0xe4>)
 800b04a:	6818      	ldr	r0, [r3, #0]
 800b04c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b050:	9300      	str	r3, [sp, #0]
 800b052:	2301      	movs	r3, #1
 800b054:	4a34      	ldr	r2, [pc, #208]	; (800b128 <MS5837_02BA_check_pressure+0xe8>)
 800b056:	21ec      	movs	r1, #236	; 0xec
 800b058:	f7f6 ff38 	bl	8001ecc <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800b05c:	2014      	movs	r0, #20
 800b05e:	f7f5 ffe3 	bl	8001028 <HAL_Delay>
	//reading D1 data
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 800b062:	4b30      	ldr	r3, [pc, #192]	; (800b124 <MS5837_02BA_check_pressure+0xe4>)
 800b064:	6818      	ldr	r0, [r3, #0]
 800b066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b06a:	9300      	str	r3, [sp, #0]
 800b06c:	2301      	movs	r3, #1
 800b06e:	4a2f      	ldr	r2, [pc, #188]	; (800b12c <MS5837_02BA_check_pressure+0xec>)
 800b070:	21ec      	movs	r1, #236	; 0xec
 800b072:	f7f6 ff2b 	bl	8001ecc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH, HAL_MAX_DELAY);
 800b076:	4b2b      	ldr	r3, [pc, #172]	; (800b124 <MS5837_02BA_check_pressure+0xe4>)
 800b078:	6818      	ldr	r0, [r3, #0]
 800b07a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b07e:	9300      	str	r3, [sp, #0]
 800b080:	2303      	movs	r3, #3
 800b082:	4a2b      	ldr	r2, [pc, #172]	; (800b130 <MS5837_02BA_check_pressure+0xf0>)
 800b084:	21ec      	movs	r1, #236	; 0xec
 800b086:	f7f7 f815 	bl	80020b4 <HAL_I2C_Master_Receive>
	D1 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 800b08a:	4b29      	ldr	r3, [pc, #164]	; (800b130 <MS5837_02BA_check_pressure+0xf0>)
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	041a      	lsls	r2, r3, #16
 800b090:	4b27      	ldr	r3, [pc, #156]	; (800b130 <MS5837_02BA_check_pressure+0xf0>)
 800b092:	785b      	ldrb	r3, [r3, #1]
 800b094:	021b      	lsls	r3, r3, #8
 800b096:	4313      	orrs	r3, r2
 800b098:	4a25      	ldr	r2, [pc, #148]	; (800b130 <MS5837_02BA_check_pressure+0xf0>)
 800b09a:	7892      	ldrb	r2, [r2, #2]
 800b09c:	4313      	orrs	r3, r2
 800b09e:	17da      	asrs	r2, r3, #31
 800b0a0:	4698      	mov	r8, r3
 800b0a2:	4691      	mov	r9, r2
 800b0a4:	4b23      	ldr	r3, [pc, #140]	; (800b134 <MS5837_02BA_check_pressure+0xf4>)
 800b0a6:	e9c3 8900 	strd	r8, r9, [r3]
	//initializing D2 conversion
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D2_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 800b0aa:	4b1e      	ldr	r3, [pc, #120]	; (800b124 <MS5837_02BA_check_pressure+0xe4>)
 800b0ac:	6818      	ldr	r0, [r3, #0]
 800b0ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	4a20      	ldr	r2, [pc, #128]	; (800b138 <MS5837_02BA_check_pressure+0xf8>)
 800b0b8:	21ec      	movs	r1, #236	; 0xec
 800b0ba:	f7f6 ff07 	bl	8001ecc <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800b0be:	2014      	movs	r0, #20
 800b0c0:	f7f5 ffb2 	bl	8001028 <HAL_Delay>
	//reading D2 data
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 800b0c4:	4b17      	ldr	r3, [pc, #92]	; (800b124 <MS5837_02BA_check_pressure+0xe4>)
 800b0c6:	6818      	ldr	r0, [r3, #0]
 800b0c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0cc:	9300      	str	r3, [sp, #0]
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	4a16      	ldr	r2, [pc, #88]	; (800b12c <MS5837_02BA_check_pressure+0xec>)
 800b0d2:	21ec      	movs	r1, #236	; 0xec
 800b0d4:	f7f6 fefa 	bl	8001ecc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH, HAL_MAX_DELAY);
 800b0d8:	4b12      	ldr	r3, [pc, #72]	; (800b124 <MS5837_02BA_check_pressure+0xe4>)
 800b0da:	6818      	ldr	r0, [r3, #0]
 800b0dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0e0:	9300      	str	r3, [sp, #0]
 800b0e2:	2303      	movs	r3, #3
 800b0e4:	4a12      	ldr	r2, [pc, #72]	; (800b130 <MS5837_02BA_check_pressure+0xf0>)
 800b0e6:	21ec      	movs	r1, #236	; 0xec
 800b0e8:	f7f6 ffe4 	bl	80020b4 <HAL_I2C_Master_Receive>
	D2 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 800b0ec:	4b10      	ldr	r3, [pc, #64]	; (800b130 <MS5837_02BA_check_pressure+0xf0>)
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	041a      	lsls	r2, r3, #16
 800b0f2:	4b0f      	ldr	r3, [pc, #60]	; (800b130 <MS5837_02BA_check_pressure+0xf0>)
 800b0f4:	785b      	ldrb	r3, [r3, #1]
 800b0f6:	021b      	lsls	r3, r3, #8
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	4a0d      	ldr	r2, [pc, #52]	; (800b130 <MS5837_02BA_check_pressure+0xf0>)
 800b0fc:	7892      	ldrb	r2, [r2, #2]
 800b0fe:	4313      	orrs	r3, r2
 800b100:	17da      	asrs	r2, r3, #31
 800b102:	461c      	mov	r4, r3
 800b104:	4615      	mov	r5, r2
 800b106:	4b0d      	ldr	r3, [pc, #52]	; (800b13c <MS5837_02BA_check_pressure+0xfc>)
 800b108:	e9c3 4500 	strd	r4, r5, [r3]
	calculate();
 800b10c:	f000 f848 	bl	800b1a0 <calculate>
	return presure-initial_pressure;
 800b110:	4b0b      	ldr	r3, [pc, #44]	; (800b140 <MS5837_02BA_check_pressure+0x100>)
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	4b0b      	ldr	r3, [pc, #44]	; (800b144 <MS5837_02BA_check_pressure+0x104>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	1ad3      	subs	r3, r2, r3
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	46bd      	mov	sp, r7
 800b11e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b122:	bf00      	nop
 800b124:	2000081c 	.word	0x2000081c
 800b128:	2000000d 	.word	0x2000000d
 800b12c:	20000820 	.word	0x20000820
 800b130:	20000878 	.word	0x20000878
 800b134:	20000860 	.word	0x20000860
 800b138:	2000000e 	.word	0x2000000e
 800b13c:	20000868 	.word	0x20000868
 800b140:	20000870 	.word	0x20000870
 800b144:	20000874 	.word	0x20000874

0800b148 <MS5837_02BA_reset_pressure>:

uint32_t MS5837_02BA_reset_pressure(){
 800b148:	b580      	push	{r7, lr}
 800b14a:	b09a      	sub	sp, #104	; 0x68
 800b14c:	af00      	add	r7, sp, #0
	int32_t current_pressure[25];

	for(int i =0;i<25;i++)
 800b14e:	2300      	movs	r3, #0
 800b150:	667b      	str	r3, [r7, #100]	; 0x64
 800b152:	e00b      	b.n	800b16c <MS5837_02BA_reset_pressure+0x24>
	{
		current_pressure[i]=MS5837_02BA_check_pressure();
 800b154:	f7ff ff74 	bl	800b040 <MS5837_02BA_check_pressure>
 800b158:	4602      	mov	r2, r0
 800b15a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	3368      	adds	r3, #104	; 0x68
 800b160:	443b      	add	r3, r7
 800b162:	f843 2c68 	str.w	r2, [r3, #-104]
	for(int i =0;i<25;i++)
 800b166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b168:	3301      	adds	r3, #1
 800b16a:	667b      	str	r3, [r7, #100]	; 0x64
 800b16c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b16e:	2b18      	cmp	r3, #24
 800b170:	ddf0      	ble.n	800b154 <MS5837_02BA_reset_pressure+0xc>
	}
	qsort(current_pressure, 25, sizeof(int32_t), cmp );
 800b172:	4638      	mov	r0, r7
 800b174:	4b07      	ldr	r3, [pc, #28]	; (800b194 <MS5837_02BA_reset_pressure+0x4c>)
 800b176:	2204      	movs	r2, #4
 800b178:	2119      	movs	r1, #25
 800b17a:	f004 fda9 	bl	800fcd0 <qsort>
	init_new_convertion();
 800b17e:	f7ff feb1 	bl	800aee4 <init_new_convertion>
	return initial_pressure = current_pressure[24];
 800b182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b184:	4a04      	ldr	r2, [pc, #16]	; (800b198 <MS5837_02BA_reset_pressure+0x50>)
 800b186:	6013      	str	r3, [r2, #0]
 800b188:	4b03      	ldr	r3, [pc, #12]	; (800b198 <MS5837_02BA_reset_pressure+0x50>)
 800b18a:	681b      	ldr	r3, [r3, #0]
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3768      	adds	r7, #104	; 0x68
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	0800ad85 	.word	0x0800ad85
 800b198:	20000874 	.word	0x20000874
 800b19c:	00000000 	.word	0x00000000

0800b1a0 <calculate>:

void calculate(){
 800b1a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1a4:	b0be      	sub	sp, #248	; 0xf8
 800b1a6:	af00      	add	r7, sp, #0
	int64_t dT = 0;
 800b1a8:	f04f 0200 	mov.w	r2, #0
 800b1ac:	f04f 0300 	mov.w	r3, #0
 800b1b0:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t TEMP = 0;
 800b1b4:	f04f 0200 	mov.w	r2, #0
 800b1b8:	f04f 0300 	mov.w	r3, #0
 800b1bc:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
	int64_t OFF = 0;
 800b1c0:	f04f 0200 	mov.w	r2, #0
 800b1c4:	f04f 0300 	mov.w	r3, #0
 800b1c8:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
	int64_t SENS = 0;
 800b1cc:	f04f 0200 	mov.w	r2, #0
 800b1d0:	f04f 0300 	mov.w	r3, #0
 800b1d4:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	int64_t P = 0;
 800b1d8:	f04f 0200 	mov.w	r2, #0
 800b1dc:	f04f 0300 	mov.w	r3, #0
 800b1e0:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

	int64_t SENSi = 0;
 800b1e4:	f04f 0200 	mov.w	r2, #0
 800b1e8:	f04f 0300 	mov.w	r3, #0
 800b1ec:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	int64_t OFFi = 0;
 800b1f0:	f04f 0200 	mov.w	r2, #0
 800b1f4:	f04f 0300 	mov.w	r3, #0
 800b1f8:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	int64_t Ti = 0;
 800b1fc:	f04f 0200 	mov.w	r2, #0
 800b200:	f04f 0300 	mov.w	r3, #0
 800b204:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int64_t OFF2 = 0;
 800b208:	f04f 0200 	mov.w	r2, #0
 800b20c:	f04f 0300 	mov.w	r3, #0
 800b210:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t SENS2 = 0;
 800b214:	f04f 0200 	mov.w	r2, #0
 800b218:	f04f 0300 	mov.w	r3, #0
 800b21c:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	int64_t P2 = 0;
 800b220:	f04f 0200 	mov.w	r2, #0
 800b224:	f04f 0300 	mov.w	r3, #0
 800b228:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	int64_t TEMP2 = 0;
 800b22c:	f04f 0200 	mov.w	r2, #0
 800b230:	f04f 0300 	mov.w	r3, #0
 800b234:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98

	//first order compensation
	dT = D2 -  C[4]*256;
 800b238:	4be1      	ldr	r3, [pc, #900]	; (800b5c0 <calculate+0x420>)
 800b23a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b23e:	4be1      	ldr	r3, [pc, #900]	; (800b5c4 <calculate+0x424>)
 800b240:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b244:	f04f 0000 	mov.w	r0, #0
 800b248:	f04f 0100 	mov.w	r1, #0
 800b24c:	0219      	lsls	r1, r3, #8
 800b24e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b252:	0210      	lsls	r0, r2, #8
 800b254:	1a23      	subs	r3, r4, r0
 800b256:	663b      	str	r3, [r7, #96]	; 0x60
 800b258:	eb65 0301 	sbc.w	r3, r5, r1
 800b25c:	667b      	str	r3, [r7, #100]	; 0x64
 800b25e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800b262:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
	TEMP = 2000 + dT*C[4]/8388608;
 800b266:	4bd7      	ldr	r3, [pc, #860]	; (800b5c4 <calculate+0x424>)
 800b268:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800b26c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800b270:	fb02 f501 	mul.w	r5, r2, r1
 800b274:	fb00 f403 	mul.w	r4, r0, r3
 800b278:	442c      	add	r4, r5
 800b27a:	fba0 8902 	umull	r8, r9, r0, r2
 800b27e:	eb04 0309 	add.w	r3, r4, r9
 800b282:	4699      	mov	r9, r3
 800b284:	f04f 0200 	mov.w	r2, #0
 800b288:	f04f 0300 	mov.w	r3, #0
 800b28c:	ea4f 52d8 	mov.w	r2, r8, lsr #23
 800b290:	ea42 2249 	orr.w	r2, r2, r9, lsl #9
 800b294:	ea4f 53d9 	mov.w	r3, r9, lsr #23
 800b298:	f512 61fa 	adds.w	r1, r2, #2000	; 0x7d0
 800b29c:	65b9      	str	r1, [r7, #88]	; 0x58
 800b29e:	f143 0300 	adc.w	r3, r3, #0
 800b2a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b2a4:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800b2a8:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8

//	OFF = C[1]*65536 + (C[3]*dT)/128;
//	SENS = C[0]*32768 + (C[2]*dT)/256;
//	P = ((D1 * SENS)/(2097152) - OFF)/8192;

	OFF = (C[1])*131072+(C[3]*dT)/64;
 800b2ac:	4bc5      	ldr	r3, [pc, #788]	; (800b5c4 <calculate+0x424>)
 800b2ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b2b2:	f04f 0800 	mov.w	r8, #0
 800b2b6:	f04f 0900 	mov.w	r9, #0
 800b2ba:	ea4f 4943 	mov.w	r9, r3, lsl #17
 800b2be:	ea49 39d2 	orr.w	r9, r9, r2, lsr #15
 800b2c2:	ea4f 4842 	mov.w	r8, r2, lsl #17
 800b2c6:	4bbf      	ldr	r3, [pc, #764]	; (800b5c4 <calculate+0x424>)
 800b2c8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800b2cc:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800b2d0:	fb02 f501 	mul.w	r5, r2, r1
 800b2d4:	fb00 f403 	mul.w	r4, r0, r3
 800b2d8:	442c      	add	r4, r5
 800b2da:	fba0 ab02 	umull	sl, fp, r0, r2
 800b2de:	eb04 030b 	add.w	r3, r4, fp
 800b2e2:	469b      	mov	fp, r3
 800b2e4:	f04f 0200 	mov.w	r2, #0
 800b2e8:	f04f 0300 	mov.w	r3, #0
 800b2ec:	ea4f 129a 	mov.w	r2, sl, lsr #6
 800b2f0:	ea42 628b 	orr.w	r2, r2, fp, lsl #26
 800b2f4:	ea4f 139b 	mov.w	r3, fp, lsr #6
 800b2f8:	eb18 0102 	adds.w	r1, r8, r2
 800b2fc:	6539      	str	r1, [r7, #80]	; 0x50
 800b2fe:	eb49 0303 	adc.w	r3, r9, r3
 800b302:	657b      	str	r3, [r7, #84]	; 0x54
 800b304:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800b308:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0

	SENS = C[0]*65536+(C[2]*dT)/128;
 800b30c:	4bad      	ldr	r3, [pc, #692]	; (800b5c4 <calculate+0x424>)
 800b30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b312:	f04f 0800 	mov.w	r8, #0
 800b316:	f04f 0900 	mov.w	r9, #0
 800b31a:	ea4f 4903 	mov.w	r9, r3, lsl #16
 800b31e:	ea49 4912 	orr.w	r9, r9, r2, lsr #16
 800b322:	ea4f 4802 	mov.w	r8, r2, lsl #16
 800b326:	4ba7      	ldr	r3, [pc, #668]	; (800b5c4 <calculate+0x424>)
 800b328:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b32c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800b330:	fb02 f501 	mul.w	r5, r2, r1
 800b334:	fb00 f403 	mul.w	r4, r0, r3
 800b338:	442c      	add	r4, r5
 800b33a:	fba0 2302 	umull	r2, r3, r0, r2
 800b33e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b342:	4613      	mov	r3, r2
 800b344:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b348:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b34c:	18e3      	adds	r3, r4, r3
 800b34e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b352:	f04f 0200 	mov.w	r2, #0
 800b356:	f04f 0300 	mov.w	r3, #0
 800b35a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800b35e:	4621      	mov	r1, r4
 800b360:	09ca      	lsrs	r2, r1, #7
 800b362:	4629      	mov	r1, r5
 800b364:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 800b368:	4629      	mov	r1, r5
 800b36a:	09cb      	lsrs	r3, r1, #7
 800b36c:	eb18 0102 	adds.w	r1, r8, r2
 800b370:	64b9      	str	r1, [r7, #72]	; 0x48
 800b372:	eb49 0303 	adc.w	r3, r9, r3
 800b376:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b378:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800b37c:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8

	P = (D1*SENS/(2097152)-OFF)/(32768);
 800b380:	4b91      	ldr	r3, [pc, #580]	; (800b5c8 <calculate+0x428>)
 800b382:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b386:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800b38a:	fb02 f501 	mul.w	r5, r2, r1
 800b38e:	fb00 f403 	mul.w	r4, r0, r3
 800b392:	442c      	add	r4, r5
 800b394:	fba0 2302 	umull	r2, r3, r0, r2
 800b398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b39c:	4613      	mov	r3, r2
 800b39e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b3a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b3a6:	18e3      	adds	r3, r4, r3
 800b3a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b3ac:	f04f 0000 	mov.w	r0, #0
 800b3b0:	f04f 0100 	mov.w	r1, #0
 800b3b4:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800b3b8:	4623      	mov	r3, r4
 800b3ba:	0d58      	lsrs	r0, r3, #21
 800b3bc:	462b      	mov	r3, r5
 800b3be:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800b3c2:	462b      	mov	r3, r5
 800b3c4:	0d59      	lsrs	r1, r3, #21
 800b3c6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b3ca:	1a84      	subs	r4, r0, r2
 800b3cc:	643c      	str	r4, [r7, #64]	; 0x40
 800b3ce:	eb61 0303 	sbc.w	r3, r1, r3
 800b3d2:	647b      	str	r3, [r7, #68]	; 0x44
 800b3d4:	f04f 0200 	mov.w	r2, #0
 800b3d8:	f04f 0300 	mov.w	r3, #0
 800b3dc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800b3e0:	4621      	mov	r1, r4
 800b3e2:	0bca      	lsrs	r2, r1, #15
 800b3e4:	4629      	mov	r1, r5
 800b3e6:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 800b3ea:	4629      	mov	r1, r5
 800b3ec:	0bcb      	lsrs	r3, r1, #15
 800b3ee:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	//			OFFi = OFFi + 7*(TEMP + 1500l)*(TEMP + 1500l);
	//			SENSi = SENSi + 4*(TEMP + 1500l)*(TEMP + 1500l);
	//		}
	//	} else
	//	{
	Ti = (2*dT*dT)/1.37438953E11;
 800b3f2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800b3f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b3fa:	fb03 f102 	mul.w	r1, r3, r2
 800b3fe:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800b402:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b406:	fb02 f303 	mul.w	r3, r2, r3
 800b40a:	18ca      	adds	r2, r1, r3
 800b40c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b410:	fba3 1303 	umull	r1, r3, r3, r3
 800b414:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b416:	460b      	mov	r3, r1
 800b418:	67bb      	str	r3, [r7, #120]	; 0x78
 800b41a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b41c:	18d3      	adds	r3, r2, r3
 800b41e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b420:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b424:	460b      	mov	r3, r1
 800b426:	18db      	adds	r3, r3, r3
 800b428:	61bb      	str	r3, [r7, #24]
 800b42a:	4613      	mov	r3, r2
 800b42c:	eb42 0303 	adc.w	r3, r2, r3
 800b430:	61fb      	str	r3, [r7, #28]
 800b432:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b436:	4610      	mov	r0, r2
 800b438:	4619      	mov	r1, r3
 800b43a:	f7f5 f857 	bl	80004ec <__aeabi_l2d>
 800b43e:	a35e      	add	r3, pc, #376	; (adr r3, 800b5b8 <calculate+0x418>)
 800b440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b444:	f7f5 f9aa 	bl	800079c <__aeabi_ddiv>
 800b448:	4602      	mov	r2, r0
 800b44a:	460b      	mov	r3, r1
 800b44c:	4610      	mov	r0, r2
 800b44e:	4619      	mov	r1, r3
 800b450:	f7f5 fbf4 	bl	8000c3c <__aeabi_d2lz>
 800b454:	4602      	mov	r2, r0
 800b456:	460b      	mov	r3, r1
 800b458:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	OFFi = ((TEMP-2000)*(TEMP - 2000))/16;
 800b45c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800b460:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 800b464:	63b9      	str	r1, [r7, #56]	; 0x38
 800b466:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 800b46a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b46c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800b470:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 800b474:	6339      	str	r1, [r7, #48]	; 0x30
 800b476:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 800b47a:	637b      	str	r3, [r7, #52]	; 0x34
 800b47c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800b480:	462b      	mov	r3, r5
 800b482:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 800b486:	4642      	mov	r2, r8
 800b488:	fb02 f203 	mul.w	r2, r2, r3
 800b48c:	464b      	mov	r3, r9
 800b48e:	4621      	mov	r1, r4
 800b490:	fb01 f303 	mul.w	r3, r1, r3
 800b494:	4413      	add	r3, r2
 800b496:	4622      	mov	r2, r4
 800b498:	4641      	mov	r1, r8
 800b49a:	fba2 1201 	umull	r1, r2, r2, r1
 800b49e:	677a      	str	r2, [r7, #116]	; 0x74
 800b4a0:	460a      	mov	r2, r1
 800b4a2:	673a      	str	r2, [r7, #112]	; 0x70
 800b4a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b4a6:	4413      	add	r3, r2
 800b4a8:	677b      	str	r3, [r7, #116]	; 0x74
 800b4aa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800b4ae:	2900      	cmp	r1, #0
 800b4b0:	da07      	bge.n	800b4c2 <calculate+0x322>
 800b4b2:	f110 030f 	adds.w	r3, r0, #15
 800b4b6:	613b      	str	r3, [r7, #16]
 800b4b8:	f141 0300 	adc.w	r3, r1, #0
 800b4bc:	617b      	str	r3, [r7, #20]
 800b4be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b4c2:	f04f 0200 	mov.w	r2, #0
 800b4c6:	f04f 0300 	mov.w	r3, #0
 800b4ca:	0902      	lsrs	r2, r0, #4
 800b4cc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800b4d0:	110b      	asrs	r3, r1, #4
 800b4d2:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	SENSi = 0;
 800b4d6:	f04f 0200 	mov.w	r2, #0
 800b4da:	f04f 0300 	mov.w	r3, #0
 800b4de:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8

	//	}

	OFF2 = OFF - OFFi;
 800b4e2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b4e6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800b4ea:	1a84      	subs	r4, r0, r2
 800b4ec:	60bc      	str	r4, [r7, #8]
 800b4ee:	eb61 0303 	sbc.w	r3, r1, r3
 800b4f2:	60fb      	str	r3, [r7, #12]
 800b4f4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800b4f8:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
	SENS2 = SENS - SENSi;
 800b4fc:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800b500:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800b504:	1a84      	subs	r4, r0, r2
 800b506:	603c      	str	r4, [r7, #0]
 800b508:	eb61 0303 	sbc.w	r3, r1, r3
 800b50c:	607b      	str	r3, [r7, #4]
 800b50e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b512:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8

	TEMP2 = (TEMP - Ti) / 100; //C
 800b516:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800b51a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800b51e:	1a84      	subs	r4, r0, r2
 800b520:	62bc      	str	r4, [r7, #40]	; 0x28
 800b522:	eb61 0303 	sbc.w	r3, r1, r3
 800b526:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b528:	f04f 0264 	mov.w	r2, #100	; 0x64
 800b52c:	f04f 0300 	mov.w	r3, #0
 800b530:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b534:	f7f5 fb1a 	bl	8000b6c <__aeabi_ldivmod>
 800b538:	4602      	mov	r2, r0
 800b53a:	460b      	mov	r3, r1
 800b53c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	P2 = (((D1*SENS2)/2097152 - OFF2)/8192)/10; //mbar
 800b540:	4b21      	ldr	r3, [pc, #132]	; (800b5c8 <calculate+0x428>)
 800b542:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b546:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800b54a:	fb02 f501 	mul.w	r5, r2, r1
 800b54e:	fb00 f403 	mul.w	r4, r0, r3
 800b552:	442c      	add	r4, r5
 800b554:	fba0 2302 	umull	r2, r3, r0, r2
 800b558:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b55a:	4613      	mov	r3, r2
 800b55c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b55e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b560:	18e3      	adds	r3, r4, r3
 800b562:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b564:	f04f 0200 	mov.w	r2, #0
 800b568:	f04f 0300 	mov.w	r3, #0
 800b56c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800b570:	4621      	mov	r1, r4
 800b572:	0d4a      	lsrs	r2, r1, #21
 800b574:	4629      	mov	r1, r5
 800b576:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800b57a:	4629      	mov	r1, r5
 800b57c:	0d4b      	lsrs	r3, r1, #21
 800b57e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b582:	1a14      	subs	r4, r2, r0
 800b584:	623c      	str	r4, [r7, #32]
 800b586:	eb63 0301 	sbc.w	r3, r3, r1
 800b58a:	627b      	str	r3, [r7, #36]	; 0x24
 800b58c:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 800b590:	f04f 0300 	mov.w	r3, #0
 800b594:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b598:	f7f5 fb38 	bl	8000c0c <__aeabi_uldivmod>
 800b59c:	4602      	mov	r2, r0
 800b59e:	460b      	mov	r3, r1
 800b5a0:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	int32_t res[2];
	res[0] = P;
 800b5a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b5a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	res[1] = TEMP/100;
 800b5ac:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800b5b0:	f04f 0264 	mov.w	r2, #100	; 0x64
 800b5b4:	e00a      	b.n	800b5cc <calculate+0x42c>
 800b5b6:	bf00      	nop
 800b5b8:	fe280000 	.word	0xfe280000
 800b5bc:	423fffff 	.word	0x423fffff
 800b5c0:	20000868 	.word	0x20000868
 800b5c4:	20000828 	.word	0x20000828
 800b5c8:	20000860 	.word	0x20000860
 800b5cc:	f04f 0300 	mov.w	r3, #0
 800b5d0:	f7f5 facc 	bl	8000b6c <__aeabi_ldivmod>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	4613      	mov	r3, r2
 800b5da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	//	strcat(snum1,"\r\n");
	//	HAL_UART_Transmit(&huart2, (uint8_t*) snum1, strlen(snum1),6);



	presure = res[0]/10;
 800b5de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b5e2:	4a06      	ldr	r2, [pc, #24]	; (800b5fc <calculate+0x45c>)
 800b5e4:	fb82 1203 	smull	r1, r2, r2, r3
 800b5e8:	1092      	asrs	r2, r2, #2
 800b5ea:	17db      	asrs	r3, r3, #31
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	4a04      	ldr	r2, [pc, #16]	; (800b600 <calculate+0x460>)
 800b5f0:	6013      	str	r3, [r2, #0]
}
 800b5f2:	bf00      	nop
 800b5f4:	37f8      	adds	r7, #248	; 0xf8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b5fc:	66666667 	.word	0x66666667
 800b600:	20000870 	.word	0x20000870

0800b604 <GetCrc16Checksumm>:
#include "checksum.h"

uint16_t GetCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 800b604:	b480      	push	{r7}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	460b      	mov	r3, r1
 800b60e:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 800b610:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b614:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	len = len-2;
 800b616:	887b      	ldrh	r3, [r7, #2]
 800b618:	3b02      	subs	r3, #2
 800b61a:	807b      	strh	r3, [r7, #2]

    while (len--) {
 800b61c:	e025      	b.n	800b66a <GetCrc16Checksumm+0x66>
        crc ^= *pcBlock++ << 8;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	1c5a      	adds	r2, r3, #1
 800b622:	607a      	str	r2, [r7, #4]
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	021b      	lsls	r3, r3, #8
 800b628:	b21a      	sxth	r2, r3
 800b62a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b62e:	4053      	eors	r3, r2
 800b630:	b21b      	sxth	r3, r3
 800b632:	81fb      	strh	r3, [r7, #14]

        for (i = 0; i < 8; i++)
 800b634:	2300      	movs	r3, #0
 800b636:	737b      	strb	r3, [r7, #13]
 800b638:	e014      	b.n	800b664 <GetCrc16Checksumm+0x60>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 800b63a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	da09      	bge.n	800b656 <GetCrc16Checksumm+0x52>
 800b642:	89fb      	ldrh	r3, [r7, #14]
 800b644:	005b      	lsls	r3, r3, #1
 800b646:	b21b      	sxth	r3, r3
 800b648:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800b64c:	f083 0301 	eor.w	r3, r3, #1
 800b650:	b21b      	sxth	r3, r3
 800b652:	b29b      	uxth	r3, r3
 800b654:	e002      	b.n	800b65c <GetCrc16Checksumm+0x58>
 800b656:	89fb      	ldrh	r3, [r7, #14]
 800b658:	005b      	lsls	r3, r3, #1
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++)
 800b65e:	7b7b      	ldrb	r3, [r7, #13]
 800b660:	3301      	adds	r3, #1
 800b662:	737b      	strb	r3, [r7, #13]
 800b664:	7b7b      	ldrb	r3, [r7, #13]
 800b666:	2b07      	cmp	r3, #7
 800b668:	d9e7      	bls.n	800b63a <GetCrc16Checksumm+0x36>
    while (len--) {
 800b66a:	887b      	ldrh	r3, [r7, #2]
 800b66c:	1e5a      	subs	r2, r3, #1
 800b66e:	807a      	strh	r2, [r7, #2]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d1d4      	bne.n	800b61e <GetCrc16Checksumm+0x1a>
    }
    return crc;
 800b674:	89fb      	ldrh	r3, [r7, #14]
}
 800b676:	4618      	mov	r0, r3
 800b678:	3714      	adds	r7, #20
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <IsCrc16ChecksummCorrect>:

bool IsCrc16ChecksummCorrect(uint8_t *pcBlock, uint16_t len)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b086      	sub	sp, #24
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
 800b68a:	460b      	mov	r3, r1
 800b68c:	807b      	strh	r3, [r7, #2]
	uint16_t crc_calculated = GetCrc16Checksumm(pcBlock, len);
 800b68e:	887b      	ldrh	r3, [r7, #2]
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7ff ffb6 	bl	800b604 <GetCrc16Checksumm>
 800b698:	4603      	mov	r3, r0
 800b69a:	82fb      	strh	r3, [r7, #22]

	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 800b69c:	887b      	ldrh	r3, [r7, #2]
 800b69e:	3b02      	subs	r3, #2
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	4413      	add	r3, r2
 800b6a4:	613b      	str	r3, [r7, #16]
	uint16_t crc_got = *crc_pointer;
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	881b      	ldrh	r3, [r3, #0]
 800b6aa:	81fb      	strh	r3, [r7, #14]

	if(crc_got == crc_calculated) {
 800b6ac:	89fa      	ldrh	r2, [r7, #14]
 800b6ae:	8afb      	ldrh	r3, [r7, #22]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d101      	bne.n	800b6b8 <IsCrc16ChecksummCorrect+0x36>
		return true;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	e000      	b.n	800b6ba <IsCrc16ChecksummCorrect+0x38>
	}
	else {
		return false;
 800b6b8:	2300      	movs	r3, #0
	}
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3718      	adds	r7, #24
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <AddCrc16Checksumm>:

void AddCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b084      	sub	sp, #16
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	807b      	strh	r3, [r7, #2]
	uint16_t crc = GetCrc16Checksumm(pcBlock, len);
 800b6ce:	887b      	ldrh	r3, [r7, #2]
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f7ff ff96 	bl	800b604 <GetCrc16Checksumm>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	81fb      	strh	r3, [r7, #14]
	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 800b6dc:	887b      	ldrh	r3, [r7, #2]
 800b6de:	3b02      	subs	r3, #2
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	4413      	add	r3, r2
 800b6e4:	60bb      	str	r3, [r7, #8]
	*crc_pointer = crc;
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	89fa      	ldrh	r2, [r7, #14]
 800b6ea:	801a      	strh	r2, [r3, #0]
}
 800b6ec:	bf00      	nop
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <IsChecksumm8bCorrect>:
    msg[length - 2] = (uint8_t) (crc >> 8);
    msg[length - 1] = (uint8_t) crc;
}

bool IsChecksumm8bCorrect(uint8_t *msg, uint16_t length)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b087      	sub	sp, #28
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	807b      	strh	r3, [r7, #2]
    uint8_t crcGot, crc = 0;
 800b700:	2300      	movs	r3, #0
 800b702:	75fb      	strb	r3, [r7, #23]
    int i;

    crcGot = msg[length-1] ;
 800b704:	887b      	ldrh	r3, [r7, #2]
 800b706:	3b01      	subs	r3, #1
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	4413      	add	r3, r2
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	73fb      	strb	r3, [r7, #15]

        for(i=0; i < length - 1; i++){
 800b710:	2300      	movs	r3, #0
 800b712:	613b      	str	r3, [r7, #16]
 800b714:	e009      	b.n	800b72a <IsChecksumm8bCorrect+0x36>
            crc ^= msg[i];
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	4413      	add	r3, r2
 800b71c:	781a      	ldrb	r2, [r3, #0]
 800b71e:	7dfb      	ldrb	r3, [r7, #23]
 800b720:	4053      	eors	r3, r2
 800b722:	75fb      	strb	r3, [r7, #23]
        for(i=0; i < length - 1; i++){
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	3301      	adds	r3, #1
 800b728:	613b      	str	r3, [r7, #16]
 800b72a:	887b      	ldrh	r3, [r7, #2]
 800b72c:	3b01      	subs	r3, #1
 800b72e:	693a      	ldr	r2, [r7, #16]
 800b730:	429a      	cmp	r2, r3
 800b732:	dbf0      	blt.n	800b716 <IsChecksumm8bCorrect+0x22>
        }

    if(crc == crcGot)
 800b734:	7dfa      	ldrb	r2, [r7, #23]
 800b736:	7bfb      	ldrb	r3, [r7, #15]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d101      	bne.n	800b740 <IsChecksumm8bCorrect+0x4c>
        return 1;
 800b73c:	2301      	movs	r3, #1
 800b73e:	e000      	b.n	800b742 <IsChecksumm8bCorrect+0x4e>
    else return 0;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	371c      	adds	r7, #28
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr

0800b74e <AddChecksumm8b>:

void AddChecksumm8b(uint8_t *msg, uint16_t length)
{
 800b74e:	b480      	push	{r7}
 800b750:	b085      	sub	sp, #20
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
 800b756:	460b      	mov	r3, r1
 800b758:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 800b75a:	2300      	movs	r3, #0
 800b75c:	73fb      	strb	r3, [r7, #15]
	int i = 0;
 800b75e:	2300      	movs	r3, #0
 800b760:	60bb      	str	r3, [r7, #8]

	for(i=0; i < length - 1; i++) {
 800b762:	2300      	movs	r3, #0
 800b764:	60bb      	str	r3, [r7, #8]
 800b766:	e009      	b.n	800b77c <AddChecksumm8b+0x2e>
		crc ^= msg[i];
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	4413      	add	r3, r2
 800b76e:	781a      	ldrb	r2, [r3, #0]
 800b770:	7bfb      	ldrb	r3, [r7, #15]
 800b772:	4053      	eors	r3, r2
 800b774:	73fb      	strb	r3, [r7, #15]
	for(i=0; i < length - 1; i++) {
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	3301      	adds	r3, #1
 800b77a:	60bb      	str	r3, [r7, #8]
 800b77c:	887b      	ldrh	r3, [r7, #2]
 800b77e:	3b01      	subs	r3, #1
 800b780:	68ba      	ldr	r2, [r7, #8]
 800b782:	429a      	cmp	r2, r3
 800b784:	dbf0      	blt.n	800b768 <AddChecksumm8b+0x1a>
	}

	msg[length-1] = crc;
 800b786:	887b      	ldrh	r3, [r7, #2]
 800b788:	3b01      	subs	r3, #1
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	4413      	add	r3, r2
 800b78e:	7bfa      	ldrb	r2, [r7, #15]
 800b790:	701a      	strb	r2, [r3, #0]
}
 800b792:	bf00      	nop
 800b794:	3714      	adds	r7, #20
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr

0800b79e <IsChecksumm8bCorrectVma>:

bool IsChecksumm8bCorrectVma(uint8_t *msg, uint16_t length)
{
 800b79e:	b480      	push	{r7}
 800b7a0:	b087      	sub	sp, #28
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	807b      	strh	r3, [r7, #2]
	uint8_t crcGot, crc = 0;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	75fb      	strb	r3, [r7, #23]
	int i;

	crcGot = msg[length-1] ;
 800b7ae:	887b      	ldrh	r3, [r7, #2]
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	73fb      	strb	r3, [r7, #15]

	for (i = 1; i < length - 1; ++i) {
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	613b      	str	r3, [r7, #16]
 800b7be:	e009      	b.n	800b7d4 <IsChecksumm8bCorrectVma+0x36>
		crc ^= msg[i];
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	4413      	add	r3, r2
 800b7c6:	781a      	ldrb	r2, [r3, #0]
 800b7c8:	7dfb      	ldrb	r3, [r7, #23]
 800b7ca:	4053      	eors	r3, r2
 800b7cc:	75fb      	strb	r3, [r7, #23]
	for (i = 1; i < length - 1; ++i) {
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	613b      	str	r3, [r7, #16]
 800b7d4:	887b      	ldrh	r3, [r7, #2]
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	693a      	ldr	r2, [r7, #16]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	dbf0      	blt.n	800b7c0 <IsChecksumm8bCorrectVma+0x22>
	}

	if (crc == crcGot) {
 800b7de:	7dfa      	ldrb	r2, [r7, #23]
 800b7e0:	7bfb      	ldrb	r3, [r7, #15]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d101      	bne.n	800b7ea <IsChecksumm8bCorrectVma+0x4c>
		return 1;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e000      	b.n	800b7ec <IsChecksumm8bCorrectVma+0x4e>
	}
	else {
		return 0;
 800b7ea:	2300      	movs	r3, #0
	}
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	371c      	adds	r7, #28
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr

0800b7f8 <AddChecksumm8bVma>:

void AddChecksumm8bVma(uint8_t *msg, uint16_t length)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	460b      	mov	r3, r1
 800b802:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 800b804:	2300      	movs	r3, #0
 800b806:	73fb      	strb	r3, [r7, #15]

	for(int i = 1; i < length - 1; i++) {
 800b808:	2301      	movs	r3, #1
 800b80a:	60bb      	str	r3, [r7, #8]
 800b80c:	e009      	b.n	800b822 <AddChecksumm8bVma+0x2a>
		crc ^= msg[i];
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	4413      	add	r3, r2
 800b814:	781a      	ldrb	r2, [r3, #0]
 800b816:	7bfb      	ldrb	r3, [r7, #15]
 800b818:	4053      	eors	r3, r2
 800b81a:	73fb      	strb	r3, [r7, #15]
	for(int i = 1; i < length - 1; i++) {
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	3301      	adds	r3, #1
 800b820:	60bb      	str	r3, [r7, #8]
 800b822:	887b      	ldrh	r3, [r7, #2]
 800b824:	3b01      	subs	r3, #1
 800b826:	68ba      	ldr	r2, [r7, #8]
 800b828:	429a      	cmp	r2, r3
 800b82a:	dbf0      	blt.n	800b80e <AddChecksumm8bVma+0x16>
	}

	msg[length-1] = crc;
 800b82c:	887b      	ldrh	r3, [r7, #2]
 800b82e:	3b01      	subs	r3, #1
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	4413      	add	r3, r2
 800b834:	7bfa      	ldrb	r2, [r7, #15]
 800b836:	701a      	strb	r2, [r3, #0]
}
 800b838:	bf00      	nop
 800b83a:	3714      	adds	r7, #20
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <PickBit>:
        array[i] = 0x00;
    }
}

bool PickBit(uint8_t input, uint8_t bit)
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	4603      	mov	r3, r0
 800b84c:	460a      	mov	r2, r1
 800b84e:	71fb      	strb	r3, [r7, #7]
 800b850:	4613      	mov	r3, r2
 800b852:	71bb      	strb	r3, [r7, #6]
	//return (bool) ((input << (7 - bit)) >> 7);

	switch(bit) {
 800b854:	79bb      	ldrb	r3, [r7, #6]
 800b856:	2b07      	cmp	r3, #7
 800b858:	d857      	bhi.n	800b90a <PickBit+0xc6>
 800b85a:	a201      	add	r2, pc, #4	; (adr r2, 800b860 <PickBit+0x1c>)
 800b85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b860:	0800b881 	.word	0x0800b881
 800b864:	0800b893 	.word	0x0800b893
 800b868:	0800b8a5 	.word	0x0800b8a5
 800b86c:	0800b8b7 	.word	0x0800b8b7
 800b870:	0800b8c9 	.word	0x0800b8c9
 800b874:	0800b8db 	.word	0x0800b8db
 800b878:	0800b8ed 	.word	0x0800b8ed
 800b87c:	0800b8ff 	.word	0x0800b8ff
	case 0:
			return (bool) (input & 0b00000001);
 800b880:	79fb      	ldrb	r3, [r7, #7]
 800b882:	f003 0301 	and.w	r3, r3, #1
 800b886:	2b00      	cmp	r3, #0
 800b888:	bf14      	ite	ne
 800b88a:	2301      	movne	r3, #1
 800b88c:	2300      	moveq	r3, #0
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	e03c      	b.n	800b90c <PickBit+0xc8>
	case 1:
			return (bool) (input & 0b00000010);
 800b892:	79fb      	ldrb	r3, [r7, #7]
 800b894:	f003 0302 	and.w	r3, r3, #2
 800b898:	2b00      	cmp	r3, #0
 800b89a:	bf14      	ite	ne
 800b89c:	2301      	movne	r3, #1
 800b89e:	2300      	moveq	r3, #0
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	e033      	b.n	800b90c <PickBit+0xc8>
	case 2:
			return (bool) (input & 0b00000100);
 800b8a4:	79fb      	ldrb	r3, [r7, #7]
 800b8a6:	f003 0304 	and.w	r3, r3, #4
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	bf14      	ite	ne
 800b8ae:	2301      	movne	r3, #1
 800b8b0:	2300      	moveq	r3, #0
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	e02a      	b.n	800b90c <PickBit+0xc8>
	case 3:
			return (bool) (input & 0b00001000);
 800b8b6:	79fb      	ldrb	r3, [r7, #7]
 800b8b8:	f003 0308 	and.w	r3, r3, #8
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	bf14      	ite	ne
 800b8c0:	2301      	movne	r3, #1
 800b8c2:	2300      	moveq	r3, #0
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	e021      	b.n	800b90c <PickBit+0xc8>
	case 4:
			return (bool) (input & 0b00010000);
 800b8c8:	79fb      	ldrb	r3, [r7, #7]
 800b8ca:	f003 0310 	and.w	r3, r3, #16
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	bf14      	ite	ne
 800b8d2:	2301      	movne	r3, #1
 800b8d4:	2300      	moveq	r3, #0
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	e018      	b.n	800b90c <PickBit+0xc8>
	case 5:
			return (bool) (input & 0b00100000);
 800b8da:	79fb      	ldrb	r3, [r7, #7]
 800b8dc:	f003 0320 	and.w	r3, r3, #32
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	bf14      	ite	ne
 800b8e4:	2301      	movne	r3, #1
 800b8e6:	2300      	moveq	r3, #0
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	e00f      	b.n	800b90c <PickBit+0xc8>
	case 6:
			return (bool) (input & 0b01000000);
 800b8ec:	79fb      	ldrb	r3, [r7, #7]
 800b8ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	bf14      	ite	ne
 800b8f6:	2301      	movne	r3, #1
 800b8f8:	2300      	moveq	r3, #0
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	e006      	b.n	800b90c <PickBit+0xc8>
	case 7:
			return (bool) (input & 0b10000000);
 800b8fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b902:	b2db      	uxtb	r3, r3
 800b904:	09db      	lsrs	r3, r3, #7
 800b906:	b2db      	uxtb	r3, r3
 800b908:	e000      	b.n	800b90c <PickBit+0xc8>
	}
	return false;
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <variableInit>:

uint16_t counterRx = 0;


void variableInit()
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 800b91e:	af00      	add	r7, sp, #0
	rComputer.reset = 0;
 800b920:	4b49      	ldr	r3, [pc, #292]	; (800ba48 <variableInit+0x130>)
 800b922:	2200      	movs	r2, #0
 800b924:	701a      	strb	r2, [r3, #0]

	rState.cameraNum = 0;
 800b926:	4b49      	ldr	r3, [pc, #292]	; (800ba4c <variableInit+0x134>)
 800b928:	2200      	movs	r2, #0
 800b92a:	701a      	strb	r2, [r3, #0]
	rState.contourSelected = 0;
 800b92c:	4b47      	ldr	r3, [pc, #284]	; (800ba4c <variableInit+0x134>)
 800b92e:	2200      	movs	r2, #0
 800b930:	705a      	strb	r2, [r3, #1]
	rState.flash = 0;
 800b932:	4b46      	ldr	r3, [pc, #280]	; (800ba4c <variableInit+0x134>)
 800b934:	2200      	movs	r2, #0
 800b936:	709a      	strb	r2, [r3, #2]
	rState.operationMode = 0;
 800b938:	4b44      	ldr	r3, [pc, #272]	; (800ba4c <variableInit+0x134>)
 800b93a:	2200      	movs	r2, #0
 800b93c:	70da      	strb	r2, [r3, #3]
	rState.pcCounter = 0;
 800b93e:	4b43      	ldr	r3, [pc, #268]	; (800ba4c <variableInit+0x134>)
 800b940:	2200      	movs	r2, #0
 800b942:	711a      	strb	r2, [r3, #4]
	rState.lag_error = 0;
 800b944:	4b41      	ldr	r3, [pc, #260]	; (800ba4c <variableInit+0x134>)
 800b946:	f04f 0200 	mov.w	r2, #0
 800b94a:	609a      	str	r2, [r3, #8]

	rSensors.yaw = 0;
 800b94c:	4b40      	ldr	r3, [pc, #256]	; (800ba50 <variableInit+0x138>)
 800b94e:	f04f 0200 	mov.w	r2, #0
 800b952:	609a      	str	r2, [r3, #8]
	rSensors.raw_yaw = 0;
 800b954:	4b3e      	ldr	r3, [pc, #248]	; (800ba50 <variableInit+0x138>)
 800b956:	f04f 0200 	mov.w	r2, #0
 800b95a:	60da      	str	r2, [r3, #12]
	rSensors.roll =  0;
 800b95c:	4b3c      	ldr	r3, [pc, #240]	; (800ba50 <variableInit+0x138>)
 800b95e:	f04f 0200 	mov.w	r2, #0
 800b962:	601a      	str	r2, [r3, #0]
	rSensors.pitch =  0;
 800b964:	4b3a      	ldr	r3, [pc, #232]	; (800ba50 <variableInit+0x138>)
 800b966:	f04f 0200 	mov.w	r2, #0
 800b96a:	605a      	str	r2, [r3, #4]

	rSensors.old_yaw = 0;
 800b96c:	4b38      	ldr	r3, [pc, #224]	; (800ba50 <variableInit+0x138>)
 800b96e:	f04f 0200 	mov.w	r2, #0
 800b972:	611a      	str	r2, [r3, #16]
	rSensors.spins = 0;
 800b974:	4b36      	ldr	r3, [pc, #216]	; (800ba50 <variableInit+0x138>)
 800b976:	2200      	movs	r2, #0
 800b978:	831a      	strh	r2, [r3, #24]

	rSensors.pressure = 0;
 800b97a:	4b35      	ldr	r3, [pc, #212]	; (800ba50 <variableInit+0x138>)
 800b97c:	f04f 0200 	mov.w	r2, #0
 800b980:	659a      	str	r2, [r3, #88]	; 0x58
	rSensors.pressure_null = 0;
 800b982:	4b33      	ldr	r3, [pc, #204]	; (800ba50 <variableInit+0x138>)
 800b984:	f04f 0200 	mov.w	r2, #0
 800b988:	65da      	str	r2, [r3, #92]	; 0x5c

	rSensors.rollSpeed = 0;
 800b98a:	4b31      	ldr	r3, [pc, #196]	; (800ba50 <variableInit+0x138>)
 800b98c:	f04f 0200 	mov.w	r2, #0
 800b990:	61da      	str	r2, [r3, #28]
	rSensors.pitchSpeed = 0;
 800b992:	4b2f      	ldr	r3, [pc, #188]	; (800ba50 <variableInit+0x138>)
 800b994:	f04f 0200 	mov.w	r2, #0
 800b998:	621a      	str	r2, [r3, #32]
	rSensors.yawSpeed = 0;
 800b99a:	4b2d      	ldr	r3, [pc, #180]	; (800ba50 <variableInit+0x138>)
 800b99c:	f04f 0200 	mov.w	r2, #0
 800b9a0:	625a      	str	r2, [r3, #36]	; 0x24

	rSensors.accelX = 0;
 800b9a2:	4b2b      	ldr	r3, [pc, #172]	; (800ba50 <variableInit+0x138>)
 800b9a4:	f04f 0200 	mov.w	r2, #0
 800b9a8:	629a      	str	r2, [r3, #40]	; 0x28
	rSensors.accelY = 0;
 800b9aa:	4b29      	ldr	r3, [pc, #164]	; (800ba50 <variableInit+0x138>)
 800b9ac:	f04f 0200 	mov.w	r2, #0
 800b9b0:	62da      	str	r2, [r3, #44]	; 0x2c
	rSensors.accelZ = 0;
 800b9b2:	4b27      	ldr	r3, [pc, #156]	; (800ba50 <variableInit+0x138>)
 800b9b4:	f04f 0200 	mov.w	r2, #0
 800b9b8:	631a      	str	r2, [r3, #48]	; 0x30

	rSensors.magX = 0;
 800b9ba:	4b25      	ldr	r3, [pc, #148]	; (800ba50 <variableInit+0x138>)
 800b9bc:	f04f 0200 	mov.w	r2, #0
 800b9c0:	635a      	str	r2, [r3, #52]	; 0x34
	rSensors.magY = 0;
 800b9c2:	4b23      	ldr	r3, [pc, #140]	; (800ba50 <variableInit+0x138>)
 800b9c4:	f04f 0200 	mov.w	r2, #0
 800b9c8:	639a      	str	r2, [r3, #56]	; 0x38
	rSensors.magZ = 0;
 800b9ca:	4b21      	ldr	r3, [pc, #132]	; (800ba50 <variableInit+0x138>)
 800b9cc:	f04f 0200 	mov.w	r2, #0
 800b9d0:	63da      	str	r2, [r3, #60]	; 0x3c

	rSensors.quatA = 0;
 800b9d2:	4b1f      	ldr	r3, [pc, #124]	; (800ba50 <variableInit+0x138>)
 800b9d4:	f04f 0200 	mov.w	r2, #0
 800b9d8:	641a      	str	r2, [r3, #64]	; 0x40
	rSensors.quatB = 0;
 800b9da:	4b1d      	ldr	r3, [pc, #116]	; (800ba50 <variableInit+0x138>)
 800b9dc:	f04f 0200 	mov.w	r2, #0
 800b9e0:	645a      	str	r2, [r3, #68]	; 0x44
	rSensors.quatC = 0;
 800b9e2:	4b1b      	ldr	r3, [pc, #108]	; (800ba50 <variableInit+0x138>)
 800b9e4:	f04f 0200 	mov.w	r2, #0
 800b9e8:	649a      	str	r2, [r3, #72]	; 0x48
	rSensors.quatD = 0;
 800b9ea:	4b19      	ldr	r3, [pc, #100]	; (800ba50 <variableInit+0x138>)
 800b9ec:	f04f 0200 	mov.w	r2, #0
 800b9f0:	64da      	str	r2, [r3, #76]	; 0x4c

    rDevice[DEV1].address = 0x03;
 800b9f2:	4b18      	ldr	r3, [pc, #96]	; (800ba54 <variableInit+0x13c>)
 800b9f4:	2203      	movs	r2, #3
 800b9f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    rDevice[DEV2].address = 0x05;
 800b9fa:	4b16      	ldr	r3, [pc, #88]	; (800ba54 <variableInit+0x13c>)
 800b9fc:	2205      	movs	r2, #5
 800b9fe:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    rDevice[GRAB].address = 0x02;
 800ba02:	4b14      	ldr	r3, [pc, #80]	; (800ba54 <variableInit+0x13c>)
 800ba04:	2202      	movs	r2, #2
 800ba06:	729a      	strb	r2, [r3, #10]
    rDevice[GRAB_ROTATION].address = 0x06;
 800ba08:	4b12      	ldr	r3, [pc, #72]	; (800ba54 <variableInit+0x13c>)
 800ba0a:	2206      	movs	r2, #6
 800ba0c:	751a      	strb	r2, [r3, #20]
    rDevice[TILT].address = 0x01;
 800ba0e:	4b11      	ldr	r3, [pc, #68]	; (800ba54 <variableInit+0x13c>)
 800ba10:	2201      	movs	r2, #1
 800ba12:	779a      	strb	r2, [r3, #30]

	rSensors.startIMU = true;
 800ba14:	4b0e      	ldr	r3, [pc, #56]	; (800ba50 <variableInit+0x138>)
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rSensors.startPressure = true;
 800ba1c:	4b0c      	ldr	r3, [pc, #48]	; (800ba50 <variableInit+0x138>)
 800ba1e:	2201      	movs	r2, #1
 800ba20:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	thrustersInit();
 800ba24:	f003 fb1a 	bl	800f05c <thrustersInit>

	// Flash reading
	struct flashConfiguration_s config;
	flashReadSettings(&config);
 800ba28:	1d3b      	adds	r3, r7, #4
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f001 fa06 	bl	800ce3c <flashReadSettings>
	flashReadStructure(&config);
 800ba30:	1d3b      	adds	r3, r7, #4
 800ba32:	4618      	mov	r0, r3
 800ba34:	f001 fbcc 	bl	800d1d0 <flashReadStructure>

	// Thrusters initialization
	if(rState.flash) {
 800ba38:	4b04      	ldr	r3, [pc, #16]	; (800ba4c <variableInit+0x134>)
 800ba3a:	789b      	ldrb	r3, [r3, #2]
 800ba3c:	2b00      	cmp	r3, #0
		return;
	}
}
 800ba3e:	f507 770c 	add.w	r7, r7, #560	; 0x230
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	20002604 	.word	0x20002604
 800ba4c:	200024cc 	.word	0x200024cc
 800ba50:	20002598 	.word	0x20002598
 800ba54:	20002620 	.word	0x20002620

0800ba58 <uartBusesInit>:

void uartBusesInit()
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
	// Shore UART configuration
	uartBus[SHORE_UART].huart = &huart3; // Link to huart will be set before receiving
 800ba5e:	4b75      	ldr	r3, [pc, #468]	; (800bc34 <uartBusesInit+0x1dc>)
 800ba60:	4a75      	ldr	r2, [pc, #468]	; (800bc38 <uartBusesInit+0x1e0>)
 800ba62:	631a      	str	r2, [r3, #48]	; 0x30
	uartBus[SHORE_UART].rxBuffer = ShoreRequestBuffer;
 800ba64:	4b73      	ldr	r3, [pc, #460]	; (800bc34 <uartBusesInit+0x1dc>)
 800ba66:	4a75      	ldr	r2, [pc, #468]	; (800bc3c <uartBusesInit+0x1e4>)
 800ba68:	601a      	str	r2, [r3, #0]
	uartBus[SHORE_UART].txBuffer = ShoreResponseBuffer;
 800ba6a:	4b72      	ldr	r3, [pc, #456]	; (800bc34 <uartBusesInit+0x1dc>)
 800ba6c:	4a74      	ldr	r2, [pc, #464]	; (800bc40 <uartBusesInit+0x1e8>)
 800ba6e:	605a      	str	r2, [r3, #4]
	uartBus[SHORE_UART].rxLength = 0; // Length of the received message will be determined when first byte will be received
 800ba70:	4b70      	ldr	r3, [pc, #448]	; (800bc34 <uartBusesInit+0x1dc>)
 800ba72:	2200      	movs	r2, #0
 800ba74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	uartBus[SHORE_UART].txLength = 0; // Length of the transmitted message will be determined before transmit
 800ba78:	4b6e      	ldr	r3, [pc, #440]	; (800bc34 <uartBusesInit+0x1dc>)
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	uartBus[SHORE_UART].brokenRxTolerance = 20;
 800ba80:	4b6c      	ldr	r3, [pc, #432]	; (800bc34 <uartBusesInit+0x1dc>)
 800ba82:	2214      	movs	r2, #20
 800ba84:	771a      	strb	r2, [r3, #28]
	uartBus[SHORE_UART].timeoutRxTolerance = 500;
 800ba86:	4b6b      	ldr	r3, [pc, #428]	; (800bc34 <uartBusesInit+0x1dc>)
 800ba88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ba8c:	621a      	str	r2, [r3, #32]
	uartBus[SHORE_UART].receiveTimeout = 200;
 800ba8e:	4b69      	ldr	r3, [pc, #420]	; (800bc34 <uartBusesInit+0x1dc>)
 800ba90:	22c8      	movs	r2, #200	; 0xc8
 800ba92:	629a      	str	r2, [r3, #40]	; 0x28
	uartBus[SHORE_UART].transmitTimeout = 200;
 800ba94:	4b67      	ldr	r3, [pc, #412]	; (800bc34 <uartBusesInit+0x1dc>)
 800ba96:	22c8      	movs	r2, #200	; 0xc8
 800ba98:	62da      	str	r2, [r3, #44]	; 0x2c
	uartBus[SHORE_UART].txrxType = TXRX_IT;
 800ba9a:	4b66      	ldr	r3, [pc, #408]	; (800bc34 <uartBusesInit+0x1dc>)
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	// Thrusters UART configuration
	uartBus[THRUSTERS_UART].huart = &huart1;
 800baa2:	4b64      	ldr	r3, [pc, #400]	; (800bc34 <uartBusesInit+0x1dc>)
 800baa4:	4a67      	ldr	r2, [pc, #412]	; (800bc44 <uartBusesInit+0x1ec>)
 800baa6:	669a      	str	r2, [r3, #104]	; 0x68
	uartBus[THRUSTERS_UART].rxBuffer = 0; // Receive bugger will be set before receive
 800baa8:	4b62      	ldr	r3, [pc, #392]	; (800bc34 <uartBusesInit+0x1dc>)
 800baaa:	2200      	movs	r2, #0
 800baac:	639a      	str	r2, [r3, #56]	; 0x38
	uartBus[THRUSTERS_UART].txBuffer = 0; // Transmit bugger will be set before transmit
 800baae:	4b61      	ldr	r3, [pc, #388]	; (800bc34 <uartBusesInit+0x1dc>)
 800bab0:	2200      	movs	r2, #0
 800bab2:	63da      	str	r2, [r3, #60]	; 0x3c
	uartBus[THRUSTERS_UART].rxLength = 0; // Receive length will be set before transmit
 800bab4:	4b5f      	ldr	r3, [pc, #380]	; (800bc34 <uartBusesInit+0x1dc>)
 800bab6:	2200      	movs	r2, #0
 800bab8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	uartBus[THRUSTERS_UART].txLength = 0; // Transmit length will be set before transmit
 800babc:	4b5d      	ldr	r3, [pc, #372]	; (800bc34 <uartBusesInit+0x1dc>)
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	uartBus[THRUSTERS_UART].brokenRxTolerance = 0; // There is no special event on this bus
 800bac4:	4b5b      	ldr	r3, [pc, #364]	; (800bc34 <uartBusesInit+0x1dc>)
 800bac6:	2200      	movs	r2, #0
 800bac8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	uartBus[THRUSTERS_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 800bacc:	4b59      	ldr	r3, [pc, #356]	; (800bc34 <uartBusesInit+0x1dc>)
 800bace:	2200      	movs	r2, #0
 800bad0:	659a      	str	r2, [r3, #88]	; 0x58
	uartBus[THRUSTERS_UART].receiveTimeout = 100;
 800bad2:	4b58      	ldr	r3, [pc, #352]	; (800bc34 <uartBusesInit+0x1dc>)
 800bad4:	2264      	movs	r2, #100	; 0x64
 800bad6:	661a      	str	r2, [r3, #96]	; 0x60
	uartBus[THRUSTERS_UART].transmitTimeout = 100;
 800bad8:	4b56      	ldr	r3, [pc, #344]	; (800bc34 <uartBusesInit+0x1dc>)
 800bada:	2264      	movs	r2, #100	; 0x64
 800badc:	665a      	str	r2, [r3, #100]	; 0x64
	uartBus[THRUSTERS_UART].txrxType = TXRX_DMA;
 800bade:	4b55      	ldr	r3, [pc, #340]	; (800bc34 <uartBusesInit+0x1dc>)
 800bae0:	2201      	movs	r2, #1
 800bae2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	// Devices UART configuration
	uartBus[DEVICES_UART].huart = &huart4;
 800bae6:	4b53      	ldr	r3, [pc, #332]	; (800bc34 <uartBusesInit+0x1dc>)
 800bae8:	4a57      	ldr	r2, [pc, #348]	; (800bc48 <uartBusesInit+0x1f0>)
 800baea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	uartBus[DEVICES_UART].rxBuffer = 0; // Receive bugger will be set before receive
 800baee:	4b51      	ldr	r3, [pc, #324]	; (800bc34 <uartBusesInit+0x1dc>)
 800baf0:	2200      	movs	r2, #0
 800baf2:	671a      	str	r2, [r3, #112]	; 0x70
	uartBus[DEVICES_UART].txBuffer = 0; // Transmit bugger will be set before transmit
 800baf4:	4b4f      	ldr	r3, [pc, #316]	; (800bc34 <uartBusesInit+0x1dc>)
 800baf6:	2200      	movs	r2, #0
 800baf8:	675a      	str	r2, [r3, #116]	; 0x74
	uartBus[DEVICES_UART].rxLength = DEVICES_REQUEST_LENGTH;
 800bafa:	4b4e      	ldr	r3, [pc, #312]	; (800bc34 <uartBusesInit+0x1dc>)
 800bafc:	2207      	movs	r2, #7
 800bafe:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	uartBus[DEVICES_UART].txLength = DEVICES_RESPONSE_LENGTH;
 800bb02:	4b4c      	ldr	r3, [pc, #304]	; (800bc34 <uartBusesInit+0x1dc>)
 800bb04:	220a      	movs	r2, #10
 800bb06:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	uartBus[DEVICES_UART].brokenRxTolerance = 0; // There is no special event on this bus
 800bb0a:	4b4a      	ldr	r3, [pc, #296]	; (800bc34 <uartBusesInit+0x1dc>)
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	uartBus[DEVICES_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 800bb12:	4b48      	ldr	r3, [pc, #288]	; (800bc34 <uartBusesInit+0x1dc>)
 800bb14:	2200      	movs	r2, #0
 800bb16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	uartBus[DEVICES_UART].receiveTimeout = 100;
 800bb1a:	4b46      	ldr	r3, [pc, #280]	; (800bc34 <uartBusesInit+0x1dc>)
 800bb1c:	2264      	movs	r2, #100	; 0x64
 800bb1e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	uartBus[DEVICES_UART].transmitTimeout = 100;
 800bb22:	4b44      	ldr	r3, [pc, #272]	; (800bc34 <uartBusesInit+0x1dc>)
 800bb24:	2264      	movs	r2, #100	; 0x64
 800bb26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	uartBus[DEVICES_UART].txrxType = TXRX_DMA;
 800bb2a:	4b42      	ldr	r3, [pc, #264]	; (800bc34 <uartBusesInit+0x1dc>)
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

	// IMU UART configuration
	uartBus[IMU_UART].huart = &huart2;
 800bb32:	4b40      	ldr	r3, [pc, #256]	; (800bc34 <uartBusesInit+0x1dc>)
 800bb34:	4a45      	ldr	r2, [pc, #276]	; (800bc4c <uartBusesInit+0x1f4>)
 800bb36:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
 800bb3a:	4b3e      	ldr	r3, [pc, #248]	; (800bc34 <uartBusesInit+0x1dc>)
 800bb3c:	4a44      	ldr	r2, [pc, #272]	; (800bc50 <uartBusesInit+0x1f8>)
 800bb3e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	uartBus[IMU_UART].txBuffer = 0; // Buffer will be set before transmit
 800bb42:	4b3c      	ldr	r3, [pc, #240]	; (800bc34 <uartBusesInit+0x1dc>)
 800bb44:	2200      	movs	r2, #0
 800bb46:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uartBus[IMU_UART].rxLength = 0; // Receive length will be set before transmit
 800bb4a:	4b3a      	ldr	r3, [pc, #232]	; (800bc34 <uartBusesInit+0x1dc>)
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	uartBus[IMU_UART].txLength = 0; // Transmit length will be set before transmit
 800bb52:	4b38      	ldr	r3, [pc, #224]	; (800bc34 <uartBusesInit+0x1dc>)
 800bb54:	2200      	movs	r2, #0
 800bb56:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	uartBus[IMU_UART].brokenRxTolerance = 0; // There is no special event on this bus
 800bb5a:	4b36      	ldr	r3, [pc, #216]	; (800bc34 <uartBusesInit+0x1dc>)
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	uartBus[IMU_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 800bb62:	4b34      	ldr	r3, [pc, #208]	; (800bc34 <uartBusesInit+0x1dc>)
 800bb64:	2200      	movs	r2, #0
 800bb66:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	uartBus[IMU_UART].receiveTimeout = 100;
 800bb6a:	4b32      	ldr	r3, [pc, #200]	; (800bc34 <uartBusesInit+0x1dc>)
 800bb6c:	2264      	movs	r2, #100	; 0x64
 800bb6e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	uartBus[IMU_UART].transmitTimeout = 100;
 800bb72:	4b30      	ldr	r3, [pc, #192]	; (800bc34 <uartBusesInit+0x1dc>)
 800bb74:	2264      	movs	r2, #100	; 0x64
 800bb76:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	uartBus[IMU_UART].txrxType = TXRX_IT;
 800bb7a:	4b2e      	ldr	r3, [pc, #184]	; (800bc34 <uartBusesInit+0x1dc>)
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

	for(uint8_t i=0; i<UART_NUMBER; i++) {
 800bb82:	2300      	movs	r3, #0
 800bb84:	71fb      	strb	r3, [r7, #7]
 800bb86:	e04a      	b.n	800bc1e <uartBusesInit+0x1c6>
		uartBus[i].packageReceived = false;
 800bb88:	79fa      	ldrb	r2, [r7, #7]
 800bb8a:	492a      	ldr	r1, [pc, #168]	; (800bc34 <uartBusesInit+0x1dc>)
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	00db      	lsls	r3, r3, #3
 800bb90:	1a9b      	subs	r3, r3, r2
 800bb92:	00db      	lsls	r3, r3, #3
 800bb94:	440b      	add	r3, r1
 800bb96:	3308      	adds	r3, #8
 800bb98:	2200      	movs	r2, #0
 800bb9a:	701a      	strb	r2, [r3, #0]
		uartBus[i].packageTransmitted = false;
 800bb9c:	79fa      	ldrb	r2, [r7, #7]
 800bb9e:	4925      	ldr	r1, [pc, #148]	; (800bc34 <uartBusesInit+0x1dc>)
 800bba0:	4613      	mov	r3, r2
 800bba2:	00db      	lsls	r3, r3, #3
 800bba4:	1a9b      	subs	r3, r3, r2
 800bba6:	00db      	lsls	r3, r3, #3
 800bba8:	440b      	add	r3, r1
 800bbaa:	3309      	adds	r3, #9
 800bbac:	2200      	movs	r2, #0
 800bbae:	701a      	strb	r2, [r3, #0]
		uartBus[i].successRxCounter = 0;
 800bbb0:	79fa      	ldrb	r2, [r7, #7]
 800bbb2:	4920      	ldr	r1, [pc, #128]	; (800bc34 <uartBusesInit+0x1dc>)
 800bbb4:	4613      	mov	r3, r2
 800bbb6:	00db      	lsls	r3, r3, #3
 800bbb8:	1a9b      	subs	r3, r3, r2
 800bbba:	00db      	lsls	r3, r3, #3
 800bbbc:	440b      	add	r3, r1
 800bbbe:	330a      	adds	r3, #10
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	801a      	strh	r2, [r3, #0]
		uartBus[i].brokenRxCounter = 0;
 800bbc4:	79fa      	ldrb	r2, [r7, #7]
 800bbc6:	491b      	ldr	r1, [pc, #108]	; (800bc34 <uartBusesInit+0x1dc>)
 800bbc8:	4613      	mov	r3, r2
 800bbca:	00db      	lsls	r3, r3, #3
 800bbcc:	1a9b      	subs	r3, r3, r2
 800bbce:	00db      	lsls	r3, r3, #3
 800bbd0:	440b      	add	r3, r1
 800bbd2:	330c      	adds	r3, #12
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	601a      	str	r2, [r3, #0]
		uartBus[i].outdatedRxCounter = 0;
 800bbd8:	79fa      	ldrb	r2, [r7, #7]
 800bbda:	4916      	ldr	r1, [pc, #88]	; (800bc34 <uartBusesInit+0x1dc>)
 800bbdc:	4613      	mov	r3, r2
 800bbde:	00db      	lsls	r3, r3, #3
 800bbe0:	1a9b      	subs	r3, r3, r2
 800bbe2:	00db      	lsls	r3, r3, #3
 800bbe4:	440b      	add	r3, r1
 800bbe6:	3310      	adds	r3, #16
 800bbe8:	2200      	movs	r2, #0
 800bbea:	601a      	str	r2, [r3, #0]
		uartBus[i].timeoutCounter = 0;
 800bbec:	79fa      	ldrb	r2, [r7, #7]
 800bbee:	4911      	ldr	r1, [pc, #68]	; (800bc34 <uartBusesInit+0x1dc>)
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	00db      	lsls	r3, r3, #3
 800bbf4:	1a9b      	subs	r3, r3, r2
 800bbf6:	00db      	lsls	r3, r3, #3
 800bbf8:	440b      	add	r3, r1
 800bbfa:	3314      	adds	r3, #20
 800bbfc:	f04f 0200 	mov.w	r2, #0
 800bc00:	601a      	str	r2, [r3, #0]
		uartBus[i].lastMessage = 0;
 800bc02:	79fa      	ldrb	r2, [r7, #7]
 800bc04:	490b      	ldr	r1, [pc, #44]	; (800bc34 <uartBusesInit+0x1dc>)
 800bc06:	4613      	mov	r3, r2
 800bc08:	00db      	lsls	r3, r3, #3
 800bc0a:	1a9b      	subs	r3, r3, r2
 800bc0c:	00db      	lsls	r3, r3, #3
 800bc0e:	440b      	add	r3, r1
 800bc10:	3318      	adds	r3, #24
 800bc12:	f04f 0200 	mov.w	r2, #0
 800bc16:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 800bc18:	79fb      	ldrb	r3, [r7, #7]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	71fb      	strb	r3, [r7, #7]
 800bc1e:	79fb      	ldrb	r3, [r7, #7]
 800bc20:	2b03      	cmp	r3, #3
 800bc22:	d9b1      	bls.n	800bb88 <uartBusesInit+0x130>
	}
}
 800bc24:	bf00      	nop
 800bc26:	bf00      	nop
 800bc28:	370c      	adds	r7, #12
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	2000087c 	.word	0x2000087c
 800bc38:	20002e04 	.word	0x20002e04
 800bc3c:	20002a20 	.word	0x20002a20
 800bc40:	20002a74 	.word	0x20002a74
 800bc44:	20002cfc 	.word	0x20002cfc
 800bc48:	20002c78 	.word	0x20002c78
 800bc4c:	20002d80 	.word	0x20002d80
 800bc50:	20002ad8 	.word	0x20002ad8

0800bc54 <i2cBusesInit>:

void i2cBusesInit()
{
 800bc54:	b480      	push	{r7}
 800bc56:	af00      	add	r7, sp, #0
	// TODO refactor i2c communication routines
	i2cBus[DEV_I2C].hi2c = &hi2c1; // Link to hi2c will be set before receiving
 800bc58:	4b03      	ldr	r3, [pc, #12]	; (800bc68 <i2cBusesInit+0x14>)
 800bc5a:	4a04      	ldr	r2, [pc, #16]	; (800bc6c <i2cBusesInit+0x18>)
 800bc5c:	601a      	str	r2, [r3, #0]
}
 800bc5e:	bf00      	nop
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr
 800bc68:	2000095c 	.word	0x2000095c
 800bc6c:	20002b94 	.word	0x20002b94

0800bc70 <transmitPackage>:


bool transmitPackage(struct uartBus_s *bus, bool isrMode)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	460b      	mov	r3, r1
 800bc7a:	70fb      	strb	r3, [r7, #3]
    bus->packageTransmitted = false;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	725a      	strb	r2, [r3, #9]

    HAL_UART_AbortTransmit_IT(bus->huart);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7fa f976 	bl	8005f78 <HAL_UART_AbortTransmit_IT>
    switch(bus->txrxType) {
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d00d      	beq.n	800bcb2 <transmitPackage+0x42>
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d117      	bne.n	800bcca <transmitPackage+0x5a>
        case TXRX_DMA:
            HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6859      	ldr	r1, [r3, #4]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	461a      	mov	r2, r3
 800bcac:	f7fa f886 	bl	8005dbc <HAL_UART_Transmit_DMA>
            break;
 800bcb0:	e00d      	b.n	800bcce <transmitPackage+0x5e>
        case TXRX_IT:
        	HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6859      	ldr	r1, [r3, #4]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	f7f9 ffbe 	bl	8005c44 <HAL_UART_Transmit_IT>
            break;
 800bcc8:	e001      	b.n	800bcce <transmitPackage+0x5e>
        default:
            return false;
 800bcca:	2300      	movs	r3, #0
 800bccc:	e036      	b.n	800bd3c <transmitPackage+0xcc>
    }

    bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 800bcce:	f7fd faf1 	bl	80092b4 <xTaskGetTickCount>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7ff f839 	bl	800ad4c <fromTickToMs>
 800bcda:	eef0 7a40 	vmov.f32	s15, s0
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	edc3 7a05 	vstr	s15, [r3, #20]
    while (!bus->packageTransmitted && !isrMode) {
 800bce4:	e01c      	b.n	800bd20 <transmitPackage+0xb0>
    	if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 800bce6:	f7fd fae5 	bl	80092b4 <xTaskGetTickCount>
 800bcea:	4603      	mov	r3, r0
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7ff f82d 	bl	800ad4c <fromTickToMs>
 800bcf2:	eeb0 7a40 	vmov.f32	s14, s0
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	edd3 7a05 	vldr	s15, [r3, #20]
 800bcfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd04:	ee07 3a90 	vmov	s15, r3
 800bd08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd14:	dd01      	ble.n	800bd1a <transmitPackage+0xaa>
    		return false;
 800bd16:	2300      	movs	r3, #0
 800bd18:	e010      	b.n	800bd3c <transmitPackage+0xcc>
    	}
    	osDelay(DELAY_UART_TIMEOUT);
 800bd1a:	2032      	movs	r0, #50	; 0x32
 800bd1c:	f7fb ff9f 	bl	8007c5e <osDelay>
    while (!bus->packageTransmitted && !isrMode) {
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	7a5b      	ldrb	r3, [r3, #9]
 800bd24:	f083 0301 	eor.w	r3, r3, #1
 800bd28:	b2db      	uxtb	r3, r3
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d005      	beq.n	800bd3a <transmitPackage+0xca>
 800bd2e:	78fb      	ldrb	r3, [r7, #3]
 800bd30:	f083 0301 	eor.w	r3, r3, #1
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d1d5      	bne.n	800bce6 <transmitPackage+0x76>
    }
    return true;
 800bd3a:	2301      	movs	r3, #1
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3708      	adds	r7, #8
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <transmitAndReceive>:
	}
	return true;
}

bool transmitAndReceive(struct uartBus_s *bus, bool isrMode)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	460b      	mov	r3, r1
 800bd4e:	70fb      	strb	r3, [r7, #3]
	bus->packageReceived = false;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	721a      	strb	r2, [r3, #8]
	bus->packageTransmitted = false;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	725a      	strb	r2, [r3, #9]

	HAL_UART_AbortReceive_IT(bus->huart);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7fa f981 	bl	8006068 <HAL_UART_AbortReceive_IT>
	HAL_UART_AbortTransmit_IT(bus->huart);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7fa f904 	bl	8005f78 <HAL_UART_AbortTransmit_IT>
	switch(bus->txrxType) {
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d018      	beq.n	800bdac <transmitAndReceive+0x68>
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d12d      	bne.n	800bdda <transmitAndReceive+0x96>
		case TXRX_DMA:
			HAL_UART_Receive_DMA(bus->huart, bus->rxBuffer, bus->rxLength);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6819      	ldr	r1, [r3, #0]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	461a      	mov	r2, r3
 800bd90:	f7fa f8a4 	bl	8005edc <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6859      	ldr	r1, [r3, #4]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	461a      	mov	r2, r3
 800bda6:	f7fa f809 	bl	8005dbc <HAL_UART_Transmit_DMA>
			break;
 800bdaa:	e018      	b.n	800bdde <transmitAndReceive+0x9a>
		case TXRX_IT:
			HAL_UART_Receive_IT(bus->huart, bus->rxBuffer, bus->rxLength);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6819      	ldr	r1, [r3, #0]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	f7f9 ffaf 	bl	8005d20 <HAL_UART_Receive_IT>
			HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6859      	ldr	r1, [r3, #4]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	f7f9 ff36 	bl	8005c44 <HAL_UART_Transmit_IT>
			break;
 800bdd8:	e001      	b.n	800bdde <transmitAndReceive+0x9a>
		default:
			return false;
 800bdda:	2300      	movs	r3, #0
 800bddc:	e03d      	b.n	800be5a <transmitAndReceive+0x116>
	}

	bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 800bdde:	f7fd fa69 	bl	80092b4 <xTaskGetTickCount>
 800bde2:	4603      	mov	r3, r0
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7fe ffb1 	bl	800ad4c <fromTickToMs>
 800bdea:	eef0 7a40 	vmov.f32	s15, s0
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	edc3 7a05 	vstr	s15, [r3, #20]
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 800bdf4:	e01c      	b.n	800be30 <transmitAndReceive+0xec>
		if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 800bdf6:	f7fd fa5d 	bl	80092b4 <xTaskGetTickCount>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7fe ffa5 	bl	800ad4c <fromTickToMs>
 800be02:	eeb0 7a40 	vmov.f32	s14, s0
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	edd3 7a05 	vldr	s15, [r3, #20]
 800be0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be14:	ee07 3a90 	vmov	s15, r3
 800be18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800be20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be24:	dd01      	ble.n	800be2a <transmitAndReceive+0xe6>
			return false;
 800be26:	2300      	movs	r3, #0
 800be28:	e017      	b.n	800be5a <transmitAndReceive+0x116>
		}
		osDelay(DELAY_UART_TIMEOUT);
 800be2a:	2032      	movs	r0, #50	; 0x32
 800be2c:	f7fb ff17 	bl	8007c5e <osDelay>
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	7a5b      	ldrb	r3, [r3, #9]
 800be34:	f083 0301 	eor.w	r3, r3, #1
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00c      	beq.n	800be58 <transmitAndReceive+0x114>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	7a1b      	ldrb	r3, [r3, #8]
 800be42:	f083 0301 	eor.w	r3, r3, #1
 800be46:	b2db      	uxtb	r3, r3
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d005      	beq.n	800be58 <transmitAndReceive+0x114>
 800be4c:	78fb      	ldrb	r3, [r7, #3]
 800be4e:	f083 0301 	eor.w	r3, r3, #1
 800be52:	b2db      	uxtb	r3, r3
 800be54:	2b00      	cmp	r3, #0
 800be56:	d1ce      	bne.n	800bdf6 <transmitAndReceive+0xb2>
	}
	return true;
 800be58:	2301      	movs	r3, #1
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3708      	adds	r7, #8
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
	...

0800be64 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800be64:	b480      	push	{r7}
 800be66:	b085      	sub	sp, #20
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 800be6c:	4b18      	ldr	r3, [pc, #96]	; (800bed0 <HAL_UART_TxCpltCallback+0x6c>)
 800be6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	429a      	cmp	r2, r3
 800be74:	d103      	bne.n	800be7e <HAL_UART_TxCpltCallback+0x1a>
		uartBus[SHORE_UART].packageTransmitted = true;
 800be76:	4b16      	ldr	r3, [pc, #88]	; (800bed0 <HAL_UART_TxCpltCallback+0x6c>)
 800be78:	2201      	movs	r2, #1
 800be7a:	725a      	strb	r2, [r3, #9]
		return;
 800be7c:	e022      	b.n	800bec4 <HAL_UART_TxCpltCallback+0x60>
	}

	struct uartBus_s *bus = 0;
 800be7e:	2300      	movs	r3, #0
 800be80:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 800be82:	2300      	movs	r3, #0
 800be84:	73fb      	strb	r3, [r7, #15]
 800be86:	e01a      	b.n	800bebe <HAL_UART_TxCpltCallback+0x5a>
		if(uartBus[i].huart == huart) {
 800be88:	7bfa      	ldrb	r2, [r7, #15]
 800be8a:	4911      	ldr	r1, [pc, #68]	; (800bed0 <HAL_UART_TxCpltCallback+0x6c>)
 800be8c:	4613      	mov	r3, r2
 800be8e:	00db      	lsls	r3, r3, #3
 800be90:	1a9b      	subs	r3, r3, r2
 800be92:	00db      	lsls	r3, r3, #3
 800be94:	440b      	add	r3, r1
 800be96:	3330      	adds	r3, #48	; 0x30
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d10b      	bne.n	800beb8 <HAL_UART_TxCpltCallback+0x54>
			bus = &uartBus[i];
 800bea0:	7bfa      	ldrb	r2, [r7, #15]
 800bea2:	4613      	mov	r3, r2
 800bea4:	00db      	lsls	r3, r3, #3
 800bea6:	1a9b      	subs	r3, r3, r2
 800bea8:	00db      	lsls	r3, r3, #3
 800beaa:	4a09      	ldr	r2, [pc, #36]	; (800bed0 <HAL_UART_TxCpltCallback+0x6c>)
 800beac:	4413      	add	r3, r2
 800beae:	60bb      	str	r3, [r7, #8]
			bus->packageTransmitted = true;
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	2201      	movs	r2, #1
 800beb4:	725a      	strb	r2, [r3, #9]
			break;
 800beb6:	e005      	b.n	800bec4 <HAL_UART_TxCpltCallback+0x60>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 800beb8:	7bfb      	ldrb	r3, [r7, #15]
 800beba:	3301      	adds	r3, #1
 800bebc:	73fb      	strb	r3, [r7, #15]
 800bebe:	7bfb      	ldrb	r3, [r7, #15]
 800bec0:	2b03      	cmp	r3, #3
 800bec2:	d9e1      	bls.n	800be88 <HAL_UART_TxCpltCallback+0x24>
		}
	}
}
 800bec4:	3714      	adds	r7, #20
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr
 800bece:	bf00      	nop
 800bed0:	2000087c 	.word	0x2000087c

0800bed4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 800bedc:	4b1c      	ldr	r3, [pc, #112]	; (800bf50 <HAL_UART_RxCpltCallback+0x7c>)
 800bede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d102      	bne.n	800beec <HAL_UART_RxCpltCallback+0x18>
		ShoreReceive();
 800bee6:	f000 f84b 	bl	800bf80 <ShoreReceive>
		return;
 800beea:	e02d      	b.n	800bf48 <HAL_UART_RxCpltCallback+0x74>
	}

	struct uartBus_s *bus = 0;
 800beec:	2300      	movs	r3, #0
 800beee:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 800bef0:	2300      	movs	r3, #0
 800bef2:	73fb      	strb	r3, [r7, #15]
 800bef4:	e025      	b.n	800bf42 <HAL_UART_RxCpltCallback+0x6e>
		if(uartBus[i].huart == huart) {
 800bef6:	7bfa      	ldrb	r2, [r7, #15]
 800bef8:	4915      	ldr	r1, [pc, #84]	; (800bf50 <HAL_UART_RxCpltCallback+0x7c>)
 800befa:	4613      	mov	r3, r2
 800befc:	00db      	lsls	r3, r3, #3
 800befe:	1a9b      	subs	r3, r3, r2
 800bf00:	00db      	lsls	r3, r3, #3
 800bf02:	440b      	add	r3, r1
 800bf04:	3330      	adds	r3, #48	; 0x30
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d116      	bne.n	800bf3c <HAL_UART_RxCpltCallback+0x68>
			bus = &uartBus[i];
 800bf0e:	7bfa      	ldrb	r2, [r7, #15]
 800bf10:	4613      	mov	r3, r2
 800bf12:	00db      	lsls	r3, r3, #3
 800bf14:	1a9b      	subs	r3, r3, r2
 800bf16:	00db      	lsls	r3, r3, #3
 800bf18:	4a0d      	ldr	r2, [pc, #52]	; (800bf50 <HAL_UART_RxCpltCallback+0x7c>)
 800bf1a:	4413      	add	r3, r2
 800bf1c:	60bb      	str	r3, [r7, #8]
			bus->packageReceived = true;
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	2201      	movs	r2, #1
 800bf22:	721a      	strb	r2, [r3, #8]
			bus->lastMessage = fromTickToMs(xTaskGetTickCount());
 800bf24:	f7fd f9c6 	bl	80092b4 <xTaskGetTickCount>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7fe ff0e 	bl	800ad4c <fromTickToMs>
 800bf30:	eef0 7a40 	vmov.f32	s15, s0
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	edc3 7a06 	vstr	s15, [r3, #24]
			break;
 800bf3a:	e005      	b.n	800bf48 <HAL_UART_RxCpltCallback+0x74>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 800bf3c:	7bfb      	ldrb	r3, [r7, #15]
 800bf3e:	3301      	adds	r3, #1
 800bf40:	73fb      	strb	r3, [r7, #15]
 800bf42:	7bfb      	ldrb	r3, [r7, #15]
 800bf44:	2b03      	cmp	r3, #3
 800bf46:	d9d6      	bls.n	800bef6 <HAL_UART_RxCpltCallback+0x22>
		}
	}
}
 800bf48:	3710      	adds	r7, #16
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	2000087c 	.word	0x2000087c

0800bf54 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
	MS5837_I2C_MasterRxCplt(hi2c);
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f7fe ffd5 	bl	800af0c <MS5837_I2C_MasterRxCplt>
}
 800bf62:	bf00      	nop
 800bf64:	3708      	adds	r7, #8
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}

0800bf6a <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800bf6a:	b580      	push	{r7, lr}
 800bf6c:	b082      	sub	sp, #8
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	6078      	str	r0, [r7, #4]
	MS5837_I2C_MasterTxCplt(hi2c);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f7ff f81a 	bl	800afac <MS5837_I2C_MasterTxCplt>
}
 800bf78:	bf00      	nop
 800bf7a:	3708      	adds	r7, #8
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <ShoreReceive>:
	MS5837_I2C_MasterError(hi2c);
}


void ShoreReceive()
{
 800bf80:	b590      	push	{r4, r7, lr}
 800bf82:	b085      	sub	sp, #20
 800bf84:	af02      	add	r7, sp, #8
	static portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 800bf86:	4b39      	ldr	r3, [pc, #228]	; (800c06c <ShoreReceive+0xec>)
 800bf88:	2200      	movs	r2, #0
 800bf8a:	601a      	str	r2, [r3, #0]
	if(counterRx == 0) {
 800bf8c:	4b38      	ldr	r3, [pc, #224]	; (800c070 <ShoreReceive+0xf0>)
 800bf8e:	881b      	ldrh	r3, [r3, #0]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d142      	bne.n	800c01a <ShoreReceive+0x9a>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 800bf94:	2300      	movs	r3, #0
 800bf96:	71fb      	strb	r3, [r7, #7]
 800bf98:	e03b      	b.n	800c012 <ShoreReceive+0x92>
			if(uartBus[SHORE_UART].rxBuffer[0] == ShoreCodes[i]) {
 800bf9a:	4b36      	ldr	r3, [pc, #216]	; (800c074 <ShoreReceive+0xf4>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	781a      	ldrb	r2, [r3, #0]
 800bfa0:	79fb      	ldrb	r3, [r7, #7]
 800bfa2:	4935      	ldr	r1, [pc, #212]	; (800c078 <ShoreReceive+0xf8>)
 800bfa4:	5ccb      	ldrb	r3, [r1, r3]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d125      	bne.n	800bff6 <ShoreReceive+0x76>
				counterRx = 1;
 800bfaa:	4b31      	ldr	r3, [pc, #196]	; (800c070 <ShoreReceive+0xf0>)
 800bfac:	2201      	movs	r2, #1
 800bfae:	801a      	strh	r2, [r3, #0]
				uartBus[SHORE_UART].rxLength = ShoreLength[i]-1;
 800bfb0:	79fb      	ldrb	r3, [r7, #7]
 800bfb2:	4a32      	ldr	r2, [pc, #200]	; (800c07c <ShoreReceive+0xfc>)
 800bfb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	3b01      	subs	r3, #1
 800bfbc:	b2da      	uxtb	r2, r3
 800bfbe:	4b2d      	ldr	r3, [pc, #180]	; (800c074 <ShoreReceive+0xf4>)
 800bfc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer+1, uartBus[SHORE_UART].rxLength);
 800bfc4:	4b2b      	ldr	r3, [pc, #172]	; (800c074 <ShoreReceive+0xf4>)
 800bfc6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bfc8:	4b2a      	ldr	r3, [pc, #168]	; (800c074 <ShoreReceive+0xf4>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	4a29      	ldr	r2, [pc, #164]	; (800c074 <ShoreReceive+0xf4>)
 800bfd0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800bfd4:	b292      	uxth	r2, r2
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	f7f9 fea2 	bl	8005d20 <HAL_UART_Receive_IT>
				xTimerStartFromISR(UARTTimer, &xHigherPriorityTaskWoken);
 800bfdc:	4b28      	ldr	r3, [pc, #160]	; (800c080 <ShoreReceive+0x100>)
 800bfde:	681c      	ldr	r4, [r3, #0]
 800bfe0:	f7fd f978 	bl	80092d4 <xTaskGetTickCountFromISR>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	9300      	str	r3, [sp, #0]
 800bfea:	4b20      	ldr	r3, [pc, #128]	; (800c06c <ShoreReceive+0xec>)
 800bfec:	2106      	movs	r1, #6
 800bfee:	4620      	mov	r0, r4
 800bff0:	f7fd ffd4 	bl	8009f9c <xTimerGenericCommand>
				break;
 800bff4:	e026      	b.n	800c044 <ShoreReceive+0xc4>
			}

			if(i == SHORE_REQUEST_MODES_NUMBER-1) {
 800bff6:	79fb      	ldrb	r3, [r7, #7]
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	d107      	bne.n	800c00c <ShoreReceive+0x8c>
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 800bffc:	4b1d      	ldr	r3, [pc, #116]	; (800c074 <ShoreReceive+0xf4>)
 800bffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c000:	4a1c      	ldr	r2, [pc, #112]	; (800c074 <ShoreReceive+0xf4>)
 800c002:	6811      	ldr	r1, [r2, #0]
 800c004:	2201      	movs	r2, #1
 800c006:	4618      	mov	r0, r3
 800c008:	f7f9 fe8a 	bl	8005d20 <HAL_UART_Receive_IT>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 800c00c:	79fb      	ldrb	r3, [r7, #7]
 800c00e:	3301      	adds	r3, #1
 800c010:	71fb      	strb	r3, [r7, #7]
 800c012:	79fb      	ldrb	r3, [r7, #7]
 800c014:	2b02      	cmp	r3, #2
 800c016:	d9c0      	bls.n	800bf9a <ShoreReceive+0x1a>
 800c018:	e014      	b.n	800c044 <ShoreReceive+0xc4>
			}
		}
	}
	else if(counterRx == 1) {
 800c01a:	4b15      	ldr	r3, [pc, #84]	; (800c070 <ShoreReceive+0xf0>)
 800c01c:	881b      	ldrh	r3, [r3, #0]
 800c01e:	2b01      	cmp	r3, #1
 800c020:	d110      	bne.n	800c044 <ShoreReceive+0xc4>
		uartBus[SHORE_UART].packageReceived = true;
 800c022:	4b14      	ldr	r3, [pc, #80]	; (800c074 <ShoreReceive+0xf4>)
 800c024:	2201      	movs	r2, #1
 800c026:	721a      	strb	r2, [r3, #8]
		uartBus[SHORE_UART].lastMessage = fromTickToMs(xTaskGetTickCount());
 800c028:	f7fd f944 	bl	80092b4 <xTaskGetTickCount>
 800c02c:	4603      	mov	r3, r0
 800c02e:	4618      	mov	r0, r3
 800c030:	f7fe fe8c 	bl	800ad4c <fromTickToMs>
 800c034:	eef0 7a40 	vmov.f32	s15, s0
 800c038:	4b0e      	ldr	r3, [pc, #56]	; (800c074 <ShoreReceive+0xf4>)
 800c03a:	edc3 7a06 	vstr	s15, [r3, #24]
		counterRx = 2;
 800c03e:	4b0c      	ldr	r3, [pc, #48]	; (800c070 <ShoreReceive+0xf0>)
 800c040:	2202      	movs	r2, #2
 800c042:	801a      	strh	r2, [r3, #0]
	}

	if (xHigherPriorityTaskWoken == pdTRUE) {
 800c044:	4b09      	ldr	r3, [pc, #36]	; (800c06c <ShoreReceive+0xec>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2b01      	cmp	r3, #1
 800c04a:	d10a      	bne.n	800c062 <ShoreReceive+0xe2>
		xHigherPriorityTaskWoken = pdFALSE;
 800c04c:	4b07      	ldr	r3, [pc, #28]	; (800c06c <ShoreReceive+0xec>)
 800c04e:	2200      	movs	r2, #0
 800c050:	601a      	str	r2, [r3, #0]
		taskYIELD();
 800c052:	4b0c      	ldr	r3, [pc, #48]	; (800c084 <ShoreReceive+0x104>)
 800c054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c058:	601a      	str	r2, [r3, #0]
 800c05a:	f3bf 8f4f 	dsb	sy
 800c05e:	f3bf 8f6f 	isb	sy
	}
}
 800c062:	bf00      	nop
 800c064:	370c      	adds	r7, #12
 800c066:	46bd      	mov	sp, r7
 800c068:	bd90      	pop	{r4, r7, pc}
 800c06a:	bf00      	nop
 800c06c:	20000968 	.word	0x20000968
 800c070:	20000964 	.word	0x20000964
 800c074:	2000087c 	.word	0x2000087c
 800c078:	080106ac 	.word	0x080106ac
 800c07c:	080106a4 	.word	0x080106a4
 800c080:	2000096c 	.word	0x2000096c
 800c084:	e000ed04 	.word	0xe000ed04

0800c088 <DevicesRequestUpdate>:

void DevicesRequestUpdate(uint8_t *buf, uint8_t dev)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	460b      	mov	r3, r1
 800c092:	70fb      	strb	r3, [r7, #3]
	struct devicesRequest_s req;

    req.AA1 = 0xAA;
 800c094:	23aa      	movs	r3, #170	; 0xaa
 800c096:	723b      	strb	r3, [r7, #8]
    req.AA2 = 0xAA;
 800c098:	23aa      	movs	r3, #170	; 0xaa
 800c09a:	727b      	strb	r3, [r7, #9]
    req.address = rDevice[dev].address;
 800c09c:	78fa      	ldrb	r2, [r7, #3]
 800c09e:	4916      	ldr	r1, [pc, #88]	; (800c0f8 <DevicesRequestUpdate+0x70>)
 800c0a0:	4613      	mov	r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	4413      	add	r3, r2
 800c0a6:	005b      	lsls	r3, r3, #1
 800c0a8:	440b      	add	r3, r1
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	72bb      	strb	r3, [r7, #10]
    req.setting = rDevice[dev].settings;
 800c0ae:	78fa      	ldrb	r2, [r7, #3]
 800c0b0:	4911      	ldr	r1, [pc, #68]	; (800c0f8 <DevicesRequestUpdate+0x70>)
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	4413      	add	r3, r2
 800c0b8:	005b      	lsls	r3, r3, #1
 800c0ba:	440b      	add	r3, r1
 800c0bc:	3301      	adds	r3, #1
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	72fb      	strb	r3, [r7, #11]
    //req.velocity1 = 0;
    //req.velocity2 = rDevice[dev].force;

   // if(dev == GRAB) {
    	req.velocity1 = rDevice[GRAB_ROTATION].force;
 800c0c2:	4b0d      	ldr	r3, [pc, #52]	; (800c0f8 <DevicesRequestUpdate+0x70>)
 800c0c4:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800c0c8:	733b      	strb	r3, [r7, #12]
    	req.velocity2 = rDevice[GRAB].force;
 800c0ca:	4b0b      	ldr	r3, [pc, #44]	; (800c0f8 <DevicesRequestUpdate+0x70>)
 800c0cc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800c0d0:	737b      	strb	r3, [r7, #13]
//    		rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_NULL;
//    	}
//    }


    memcpy((void*)buf, (void*)&req, DEVICES_REQUEST_LENGTH);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	f107 0308 	add.w	r3, r7, #8
 800c0da:	6818      	ldr	r0, [r3, #0]
 800c0dc:	6010      	str	r0, [r2, #0]
 800c0de:	8899      	ldrh	r1, [r3, #4]
 800c0e0:	799b      	ldrb	r3, [r3, #6]
 800c0e2:	8091      	strh	r1, [r2, #4]
 800c0e4:	7193      	strb	r3, [r2, #6]
    AddChecksumm8b(buf, DEVICES_REQUEST_LENGTH);
 800c0e6:	2107      	movs	r1, #7
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f7ff fb30 	bl	800b74e <AddChecksumm8b>
}
 800c0ee:	bf00      	nop
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	20002620 	.word	0x20002620

0800c0fc <DevicesResponseUpdate>:

void DevicesResponseUpdate(uint8_t *buf, uint8_t dev)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b086      	sub	sp, #24
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	460b      	mov	r3, r1
 800c106:	70fb      	strb	r3, [r7, #3]
    if(IsChecksumm8bCorrect(buf, DEVICES_RESPONSE_LENGTH)) {
 800c108:	210a      	movs	r1, #10
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f7ff faf2 	bl	800b6f4 <IsChecksumm8bCorrect>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d04a      	beq.n	800c1ac <DevicesResponseUpdate+0xb0>
    	struct devicesResponse_s res;
    	memcpy((void*)&res, (void*)buf, DEVICES_RESPONSE_LENGTH);
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	f107 030c 	add.w	r3, r7, #12
 800c11c:	6810      	ldr	r0, [r2, #0]
 800c11e:	6851      	ldr	r1, [r2, #4]
 800c120:	c303      	stmia	r3!, {r0, r1}
 800c122:	8912      	ldrh	r2, [r2, #8]
 800c124:	801a      	strh	r2, [r3, #0]

        rDevice[dev].current = res.current1;
 800c126:	78fa      	ldrb	r2, [r7, #3]
 800c128:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800c12c:	b298      	uxth	r0, r3
 800c12e:	4924      	ldr	r1, [pc, #144]	; (800c1c0 <DevicesResponseUpdate+0xc4>)
 800c130:	4613      	mov	r3, r2
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	4413      	add	r3, r2
 800c136:	005b      	lsls	r3, r3, #1
 800c138:	440b      	add	r3, r1
 800c13a:	3304      	adds	r3, #4
 800c13c:	4602      	mov	r2, r0
 800c13e:	801a      	strh	r2, [r3, #0]
        rDevice[dev].velocity1 = res.velocity1;
 800c140:	78fa      	ldrb	r2, [r7, #3]
 800c142:	7cf8      	ldrb	r0, [r7, #19]
 800c144:	491e      	ldr	r1, [pc, #120]	; (800c1c0 <DevicesResponseUpdate+0xc4>)
 800c146:	4613      	mov	r3, r2
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	4413      	add	r3, r2
 800c14c:	005b      	lsls	r3, r3, #1
 800c14e:	440b      	add	r3, r1
 800c150:	3307      	adds	r3, #7
 800c152:	4602      	mov	r2, r0
 800c154:	701a      	strb	r2, [r3, #0]
        rDevice[dev].velocity2 = res.velocity2;
 800c156:	78fa      	ldrb	r2, [r7, #3]
 800c158:	7d38      	ldrb	r0, [r7, #20]
 800c15a:	4919      	ldr	r1, [pc, #100]	; (800c1c0 <DevicesResponseUpdate+0xc4>)
 800c15c:	4613      	mov	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	4413      	add	r3, r2
 800c162:	005b      	lsls	r3, r3, #1
 800c164:	440b      	add	r3, r1
 800c166:	3308      	adds	r3, #8
 800c168:	4602      	mov	r2, r0
 800c16a:	701a      	strb	r2, [r3, #0]

        if(rDevice[DEV2].velocity1 == 0x00 && dev == DEV2) {
 800c16c:	4b14      	ldr	r3, [pc, #80]	; (800c1c0 <DevicesResponseUpdate+0xc4>)
 800c16e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c172:	2b00      	cmp	r3, #0
 800c174:	d106      	bne.n	800c184 <DevicesResponseUpdate+0x88>
 800c176:	78fb      	ldrb	r3, [r7, #3]
 800c178:	2b05      	cmp	r3, #5
 800c17a:	d103      	bne.n	800c184 <DevicesResponseUpdate+0x88>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_FORWARD_SAT;
 800c17c:	4b11      	ldr	r3, [pc, #68]	; (800c1c4 <DevicesResponseUpdate+0xc8>)
 800c17e:	2203      	movs	r2, #3
 800c180:	701a      	strb	r2, [r3, #0]
 800c182:	e00a      	b.n	800c19a <DevicesResponseUpdate+0x9e>
        }
        else if(rDevice[DEV2].velocity2 == 0x00 && dev == DEV2) {
 800c184:	4b0e      	ldr	r3, [pc, #56]	; (800c1c0 <DevicesResponseUpdate+0xc4>)
 800c186:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d105      	bne.n	800c19a <DevicesResponseUpdate+0x9e>
 800c18e:	78fb      	ldrb	r3, [r7, #3]
 800c190:	2b05      	cmp	r3, #5
 800c192:	d102      	bne.n	800c19a <DevicesResponseUpdate+0x9e>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_BACKWARD_SAT;
 800c194:	4b0b      	ldr	r3, [pc, #44]	; (800c1c4 <DevicesResponseUpdate+0xc8>)
 800c196:	2204      	movs	r2, #4
 800c198:	701a      	strb	r2, [r3, #0]
        }
        // TODO make errors work pls
        //writeBit(&(robot->device[dev].errors), res.errors, AGAR);

        ++uartBus[DEVICES_UART].successRxCounter;
 800c19a:	4b0b      	ldr	r3, [pc, #44]	; (800c1c8 <DevicesResponseUpdate+0xcc>)
 800c19c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	b29a      	uxth	r2, r3
 800c1a4:	4b08      	ldr	r3, [pc, #32]	; (800c1c8 <DevicesResponseUpdate+0xcc>)
 800c1a6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
    }
    else {
    	++uartBus[DEVICES_UART].brokenRxCounter;
    }
}
 800c1aa:	e004      	b.n	800c1b6 <DevicesResponseUpdate+0xba>
    	++uartBus[DEVICES_UART].brokenRxCounter;
 800c1ac:	4b06      	ldr	r3, [pc, #24]	; (800c1c8 <DevicesResponseUpdate+0xcc>)
 800c1ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1b0:	3301      	adds	r3, #1
 800c1b2:	4a05      	ldr	r2, [pc, #20]	; (800c1c8 <DevicesResponseUpdate+0xcc>)
 800c1b4:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 800c1b6:	bf00      	nop
 800c1b8:	3718      	adds	r7, #24
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	20002620 	.word	0x20002620
 800c1c4:	2000265c 	.word	0x2000265c
 800c1c8:	2000087c 	.word	0x2000087c

0800c1cc <ShoreRequest>:

void ShoreRequest(uint8_t *requestBuf)
{
 800c1cc:	b5b0      	push	{r4, r5, r7, lr}
 800c1ce:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800c1d8:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800c1dc:	6018      	str	r0, [r3, #0]
    if (IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_LENGTH)) {
 800c1de:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800c1e2:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800c1e6:	211e      	movs	r1, #30
 800c1e8:	6818      	ldr	r0, [r3, #0]
 800c1ea:	f7ff fa4a 	bl	800b682 <IsCrc16ChecksummCorrect>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	f000 818f 	beq.w	800c514 <ShoreRequest+0x348>
    	struct shoreRequest_s req;
    	memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_LENGTH);
 800c1f6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800c1fa:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f507 740d 	add.w	r4, r7, #564	; 0x234
 800c204:	461d      	mov	r5, r3
 800c206:	6828      	ldr	r0, [r5, #0]
 800c208:	6869      	ldr	r1, [r5, #4]
 800c20a:	68aa      	ldr	r2, [r5, #8]
 800c20c:	68eb      	ldr	r3, [r5, #12]
 800c20e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c210:	6928      	ldr	r0, [r5, #16]
 800c212:	6969      	ldr	r1, [r5, #20]
 800c214:	69aa      	ldr	r2, [r5, #24]
 800c216:	c407      	stmia	r4!, {r0, r1, r2}
 800c218:	8bab      	ldrh	r3, [r5, #28]
 800c21a:	8023      	strh	r3, [r4, #0]

    	uint8_t tempCameraNum = 0;
 800c21c:	2300      	movs	r3, #0
 800c21e:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257

        rJoySpeed.march = req.march;
 800c222:	f9b7 3236 	ldrsh.w	r3, [r7, #566]	; 0x236
 800c226:	ee07 3a90 	vmov	s15, r3
 800c22a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c22e:	4bbe      	ldr	r3, [pc, #760]	; (800c528 <ShoreRequest+0x35c>)
 800c230:	edc3 7a00 	vstr	s15, [r3]
        rJoySpeed.lag = req.lag;
 800c234:	f9b7 3238 	ldrsh.w	r3, [r7, #568]	; 0x238
 800c238:	ee07 3a90 	vmov	s15, r3
 800c23c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c240:	4bb9      	ldr	r3, [pc, #740]	; (800c528 <ShoreRequest+0x35c>)
 800c242:	edc3 7a01 	vstr	s15, [r3, #4]
        rJoySpeed.depth = req.depth;
 800c246:	f9b7 323a 	ldrsh.w	r3, [r7, #570]	; 0x23a
 800c24a:	ee07 3a90 	vmov	s15, r3
 800c24e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c252:	4bb5      	ldr	r3, [pc, #724]	; (800c528 <ShoreRequest+0x35c>)
 800c254:	edc3 7a02 	vstr	s15, [r3, #8]
        rJoySpeed.roll = req.roll;
 800c258:	f9b7 323c 	ldrsh.w	r3, [r7, #572]	; 0x23c
 800c25c:	ee07 3a90 	vmov	s15, r3
 800c260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c264:	4bb0      	ldr	r3, [pc, #704]	; (800c528 <ShoreRequest+0x35c>)
 800c266:	edc3 7a03 	vstr	s15, [r3, #12]
        rJoySpeed.pitch = req.pitch;
 800c26a:	f9b7 323e 	ldrsh.w	r3, [r7, #574]	; 0x23e
 800c26e:	ee07 3a90 	vmov	s15, r3
 800c272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c276:	4bac      	ldr	r3, [pc, #688]	; (800c528 <ShoreRequest+0x35c>)
 800c278:	edc3 7a04 	vstr	s15, [r3, #16]
        rJoySpeed.yaw = req.yaw;
 800c27c:	f9b7 3240 	ldrsh.w	r3, [r7, #576]	; 0x240
 800c280:	ee07 3a90 	vmov	s15, r3
 800c284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c288:	4ba7      	ldr	r3, [pc, #668]	; (800c528 <ShoreRequest+0x35c>)
 800c28a:	edc3 7a05 	vstr	s15, [r3, #20]

        rDevice[GRAB].force = req.grab;
 800c28e:	f997 2243 	ldrsb.w	r2, [r7, #579]	; 0x243
 800c292:	4ba6      	ldr	r3, [pc, #664]	; (800c52c <ShoreRequest+0x360>)
 800c294:	731a      	strb	r2, [r3, #12]
        if (rDevice[GRAB].force < -127) {
 800c296:	4ba5      	ldr	r3, [pc, #660]	; (800c52c <ShoreRequest+0x360>)
 800c298:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800c29c:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800c2a0:	d102      	bne.n	800c2a8 <ShoreRequest+0xdc>
            rDevice[GRAB].force = -127;
 800c2a2:	4ba2      	ldr	r3, [pc, #648]	; (800c52c <ShoreRequest+0x360>)
 800c2a4:	2281      	movs	r2, #129	; 0x81
 800c2a6:	731a      	strb	r2, [r3, #12]
        }
        rDevice[TILT].force = req.tilt;
 800c2a8:	f997 2244 	ldrsb.w	r2, [r7, #580]	; 0x244
 800c2ac:	4b9f      	ldr	r3, [pc, #636]	; (800c52c <ShoreRequest+0x360>)
 800c2ae:	f883 2020 	strb.w	r2, [r3, #32]
        if (rDevice[TILT].force < -127) {
 800c2b2:	4b9e      	ldr	r3, [pc, #632]	; (800c52c <ShoreRequest+0x360>)
 800c2b4:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800c2b8:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800c2bc:	d103      	bne.n	800c2c6 <ShoreRequest+0xfa>
        	rDevice[TILT].force = -127;
 800c2be:	4b9b      	ldr	r3, [pc, #620]	; (800c52c <ShoreRequest+0x360>)
 800c2c0:	2281      	movs	r2, #129	; 0x81
 800c2c2:	f883 2020 	strb.w	r2, [r3, #32]
        }
        rDevice[GRAB_ROTATION].force  = req.grab_rotate;
 800c2c6:	f997 2245 	ldrsb.w	r2, [r7, #581]	; 0x245
 800c2ca:	4b98      	ldr	r3, [pc, #608]	; (800c52c <ShoreRequest+0x360>)
 800c2cc:	759a      	strb	r2, [r3, #22]
        if (rDevice[GRAB_ROTATION].force < -127) {
 800c2ce:	4b97      	ldr	r3, [pc, #604]	; (800c52c <ShoreRequest+0x360>)
 800c2d0:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800c2d4:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800c2d8:	d102      	bne.n	800c2e0 <ShoreRequest+0x114>
            rDevice[GRAB_ROTATION].force = -127;
 800c2da:	4b94      	ldr	r3, [pc, #592]	; (800c52c <ShoreRequest+0x360>)
 800c2dc:	2281      	movs	r2, #129	; 0x81
 800c2de:	759a      	strb	r2, [r3, #22]
        }

        rDevice[DEV1].force = req.dev1;
 800c2e0:	f997 2246 	ldrsb.w	r2, [r7, #582]	; 0x246
 800c2e4:	4b91      	ldr	r3, [pc, #580]	; (800c52c <ShoreRequest+0x360>)
 800c2e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        rDevice[DEV2].force = req.dev2;
 800c2ea:	f997 2247 	ldrsb.w	r2, [r7, #583]	; 0x247
 800c2ee:	4b8f      	ldr	r3, [pc, #572]	; (800c52c <ShoreRequest+0x360>)
 800c2f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        rState.lag_error = (float) req.lag_error;
 800c2f4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800c2f8:	ee07 3a90 	vmov	s15, r3
 800c2fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c300:	4b8b      	ldr	r3, [pc, #556]	; (800c530 <ShoreRequest+0x364>)
 800c302:	edc3 7a02 	vstr	s15, [r3, #8]

        rSensors.startIMU = PickBit(req.stabilize_flags, SHORE_STABILIZE_IMU_BIT);
 800c306:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 800c30a:	2106      	movs	r1, #6
 800c30c:	4618      	mov	r0, r3
 800c30e:	f7ff fa99 	bl	800b844 <PickBit>
 800c312:	4603      	mov	r3, r0
 800c314:	461a      	mov	r2, r3
 800c316:	4b87      	ldr	r3, [pc, #540]	; (800c534 <ShoreRequest+0x368>)
 800c318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(PickBit(req.stabilize_flags, SHORE_STABILIZE_SAVE_BIT)) {
 800c31c:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 800c320:	2107      	movs	r1, #7
 800c322:	4618      	mov	r0, r3
 800c324:	f7ff fa8e 	bl	800b844 <PickBit>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d009      	beq.n	800c342 <ShoreRequest+0x176>
        	struct flashConfiguration_s config;
        	flashFillStructure(&config);
 800c32e:	f107 0308 	add.w	r3, r7, #8
 800c332:	4618      	mov	r0, r3
 800c334:	f000 fde0 	bl	800cef8 <flashFillStructure>
        	flashWriteSettings(&config);
 800c338:	f107 0308 	add.w	r3, r7, #8
 800c33c:	4618      	mov	r0, r3
 800c33e:	f000 fda1 	bl	800ce84 <flashWriteSettings>
        }

        tempCameraNum = req.cameras;
 800c342:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
 800c346:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257

        uint8_t old_reset = rComputer.reset;
 800c34a:	4b7b      	ldr	r3, [pc, #492]	; (800c538 <ShoreRequest+0x36c>)
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256
        if(old_reset != req.pc_reset) {
 800c352:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800c356:	f897 2256 	ldrb.w	r2, [r7, #598]	; 0x256
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d002      	beq.n	800c364 <ShoreRequest+0x198>
            if(req.pc_reset == PC_ON_CODE) {
 800c35e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800c362:	2baa      	cmp	r3, #170	; 0xaa
            else if(req.pc_reset == PC_OFF_CODE) {
 //           	HAL_GPIO_WritePin(PC_CONTROL1_GPIO_Port, PC_CONTROL1_Pin, GPIO_PIN_SET); // RESET
   //         	HAL_GPIO_WritePin(PC_CONTROL2_GPIO_Port, PC_CONTROL2_Pin, GPIO_PIN_SET); // ONOFF
            }
        }
        rComputer.reset = req.pc_reset;
 800c364:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 800c368:	4b73      	ldr	r3, [pc, #460]	; (800c538 <ShoreRequest+0x36c>)
 800c36a:	701a      	strb	r2, [r3, #0]

        bool wasEnabled = rStabConstants[STAB_YAW].enable;
 800c36c:	4b73      	ldr	r3, [pc, #460]	; (800c53c <ShoreRequest+0x370>)
 800c36e:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 800c372:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_YAW].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_YAW_BIT);
 800c376:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 800c37a:	2103      	movs	r1, #3
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7ff fa61 	bl	800b844 <PickBit>
 800c382:	4603      	mov	r3, r0
 800c384:	461a      	mov	r2, r3
 800c386:	4b6d      	ldr	r3, [pc, #436]	; (800c53c <ShoreRequest+0x370>)
 800c388:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
        if(wasEnabled == false && rStabConstants[STAB_YAW].enable == true) {
 800c38c:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 800c390:	f083 0301 	eor.w	r3, r3, #1
 800c394:	b2db      	uxtb	r3, r3
 800c396:	2b00      	cmp	r3, #0
 800c398:	d007      	beq.n	800c3aa <ShoreRequest+0x1de>
 800c39a:	4b68      	ldr	r3, [pc, #416]	; (800c53c <ShoreRequest+0x370>)
 800c39c:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d002      	beq.n	800c3aa <ShoreRequest+0x1de>
        	stabilizationStart(STAB_YAW);
 800c3a4:	2003      	movs	r0, #3
 800c3a6:	f002 f9ab 	bl	800e700 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_ROLL].enable;
 800c3aa:	4b64      	ldr	r3, [pc, #400]	; (800c53c <ShoreRequest+0x370>)
 800c3ac:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800c3b0:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_ROLL].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_ROLL_BIT);
 800c3b4:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 800c3b8:	2101      	movs	r1, #1
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7ff fa42 	bl	800b844 <PickBit>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	4b5d      	ldr	r3, [pc, #372]	; (800c53c <ShoreRequest+0x370>)
 800c3c6:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
        if(wasEnabled == false && rStabConstants[STAB_ROLL].enable == true) {
 800c3ca:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 800c3ce:	f083 0301 	eor.w	r3, r3, #1
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d007      	beq.n	800c3e8 <ShoreRequest+0x21c>
 800c3d8:	4b58      	ldr	r3, [pc, #352]	; (800c53c <ShoreRequest+0x370>)
 800c3da:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d002      	beq.n	800c3e8 <ShoreRequest+0x21c>
        	stabilizationStart(STAB_ROLL);
 800c3e2:	2004      	movs	r0, #4
 800c3e4:	f002 f98c 	bl	800e700 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_PITCH].enable;
 800c3e8:	4b54      	ldr	r3, [pc, #336]	; (800c53c <ShoreRequest+0x370>)
 800c3ea:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 800c3ee:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_PITCH].enable = true; //PickBit(req.stabilize_flags, SHORE_STABILIZE_PITCH_BIT);
 800c3f2:	4b52      	ldr	r3, [pc, #328]	; (800c53c <ShoreRequest+0x370>)
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
        if(wasEnabled == false && rStabConstants[STAB_PITCH].enable == true) {
 800c3fa:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 800c3fe:	f083 0301 	eor.w	r3, r3, #1
 800c402:	b2db      	uxtb	r3, r3
 800c404:	2b00      	cmp	r3, #0
 800c406:	d007      	beq.n	800c418 <ShoreRequest+0x24c>
 800c408:	4b4c      	ldr	r3, [pc, #304]	; (800c53c <ShoreRequest+0x370>)
 800c40a:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d002      	beq.n	800c418 <ShoreRequest+0x24c>
        	stabilizationStart(STAB_PITCH);
 800c412:	2005      	movs	r0, #5
 800c414:	f002 f974 	bl	800e700 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_DEPTH].enable;
 800c418:	4b48      	ldr	r3, [pc, #288]	; (800c53c <ShoreRequest+0x370>)
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_DEPTH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_DEPTH_BIT);
 800c420:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 800c424:	2100      	movs	r1, #0
 800c426:	4618      	mov	r0, r3
 800c428:	f7ff fa0c 	bl	800b844 <PickBit>
 800c42c:	4603      	mov	r3, r0
 800c42e:	461a      	mov	r2, r3
 800c430:	4b42      	ldr	r3, [pc, #264]	; (800c53c <ShoreRequest+0x370>)
 800c432:	701a      	strb	r2, [r3, #0]
        if(wasEnabled == false && rStabConstants[STAB_DEPTH].enable == true) {
 800c434:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 800c438:	f083 0301 	eor.w	r3, r3, #1
 800c43c:	b2db      	uxtb	r3, r3
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d006      	beq.n	800c450 <ShoreRequest+0x284>
 800c442:	4b3e      	ldr	r3, [pc, #248]	; (800c53c <ShoreRequest+0x370>)
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d002      	beq.n	800c450 <ShoreRequest+0x284>
        	stabilizationStart(STAB_DEPTH);
 800c44a:	2000      	movs	r0, #0
 800c44c:	f002 f958 	bl	800e700 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_LAG].enable;
 800c450:	4b3a      	ldr	r3, [pc, #232]	; (800c53c <ShoreRequest+0x370>)
 800c452:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c456:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_LAG].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_LAG_BIT);
 800c45a:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 800c45e:	2104      	movs	r1, #4
 800c460:	4618      	mov	r0, r3
 800c462:	f7ff f9ef 	bl	800b844 <PickBit>
 800c466:	4603      	mov	r3, r0
 800c468:	461a      	mov	r2, r3
 800c46a:	4b34      	ldr	r3, [pc, #208]	; (800c53c <ShoreRequest+0x370>)
 800c46c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        if(wasEnabled == false && rStabConstants[STAB_LAG].enable == true) {
 800c470:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 800c474:	f083 0301 	eor.w	r3, r3, #1
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d007      	beq.n	800c48e <ShoreRequest+0x2c2>
 800c47e:	4b2f      	ldr	r3, [pc, #188]	; (800c53c <ShoreRequest+0x370>)
 800c480:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c484:	2b00      	cmp	r3, #0
 800c486:	d002      	beq.n	800c48e <ShoreRequest+0x2c2>
        	stabilizationStart(STAB_LAG);
 800c488:	2002      	movs	r0, #2
 800c48a:	f002 f939 	bl	800e700 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_MARCH].enable;
 800c48e:	4b2b      	ldr	r3, [pc, #172]	; (800c53c <ShoreRequest+0x370>)
 800c490:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c494:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_MARCH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_MARCH_BIT);
 800c498:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 800c49c:	2105      	movs	r1, #5
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7ff f9d0 	bl	800b844 <PickBit>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	4b24      	ldr	r3, [pc, #144]	; (800c53c <ShoreRequest+0x370>)
 800c4aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        if(wasEnabled == false && rStabConstants[STAB_MARCH].enable == true) {
 800c4ae:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 800c4b2:	f083 0301 	eor.w	r3, r3, #1
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d007      	beq.n	800c4cc <ShoreRequest+0x300>
 800c4bc:	4b1f      	ldr	r3, [pc, #124]	; (800c53c <ShoreRequest+0x370>)
 800c4be:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d002      	beq.n	800c4cc <ShoreRequest+0x300>
        	stabilizationStart(STAB_MARCH);
 800c4c6:	2001      	movs	r0, #1
 800c4c8:	f002 f91a 	bl	800e700 <stabilizationStart>
//        	else {
//        		rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_BACKWARD;
//        	}
//        }

        if(tempCameraNum != rState.cameraNum) {
 800c4cc:	4b18      	ldr	r3, [pc, #96]	; (800c530 <ShoreRequest+0x364>)
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	f897 2257 	ldrb.w	r2, [r7, #599]	; 0x257
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d013      	beq.n	800c500 <ShoreRequest+0x334>
        	rState.cameraNum = tempCameraNum;
 800c4d8:	4a15      	ldr	r2, [pc, #84]	; (800c530 <ShoreRequest+0x364>)
 800c4da:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800c4de:	7013      	strb	r3, [r2, #0]
        	switch(rState.cameraNum) {
 800c4e0:	4b13      	ldr	r3, [pc, #76]	; (800c530 <ShoreRequest+0x364>)
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	2b03      	cmp	r3, #3
 800c4e6:	d80c      	bhi.n	800c502 <ShoreRequest+0x336>
 800c4e8:	a201      	add	r2, pc, #4	; (adr r2, 800c4f0 <ShoreRequest+0x324>)
 800c4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ee:	bf00      	nop
 800c4f0:	0800c503 	.word	0x0800c503
 800c4f4:	0800c503 	.word	0x0800c503
 800c4f8:	0800c503 	.word	0x0800c503
 800c4fc:	0800c503 	.word	0x0800c503
        	case 3:
        //		HAL_GPIO_WritePin(GPIOA, CAM1_Pin, GPIO_PIN_SET);
        //		HAL_GPIO_WritePin(GPIOA, CAM2_Pin, GPIO_PIN_SET);
        		break;
        	}
        }
 800c500:	bf00      	nop

        // TODO tuuuupoooo
        formThrustVectors();
 800c502:	f002 ff03 	bl	800f30c <formThrustVectors>

        ++uartBus[SHORE_UART].successRxCounter;
 800c506:	4b0e      	ldr	r3, [pc, #56]	; (800c540 <ShoreRequest+0x374>)
 800c508:	895b      	ldrh	r3, [r3, #10]
 800c50a:	3301      	adds	r3, #1
 800c50c:	b29a      	uxth	r2, r3
 800c50e:	4b0c      	ldr	r3, [pc, #48]	; (800c540 <ShoreRequest+0x374>)
 800c510:	815a      	strh	r2, [r3, #10]

        	brokenRxTolerance = 0;
        }
        */
    }
}
 800c512:	e004      	b.n	800c51e <ShoreRequest+0x352>
    	++uartBus[SHORE_UART].brokenRxCounter;
 800c514:	4b0a      	ldr	r3, [pc, #40]	; (800c540 <ShoreRequest+0x374>)
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	3301      	adds	r3, #1
 800c51a:	4a09      	ldr	r2, [pc, #36]	; (800c540 <ShoreRequest+0x374>)
 800c51c:	60d3      	str	r3, [r2, #12]
}
 800c51e:	bf00      	nop
 800c520:	f507 7716 	add.w	r7, r7, #600	; 0x258
 800c524:	46bd      	mov	sp, r7
 800c526:	bdb0      	pop	{r4, r5, r7, pc}
 800c528:	20002608 	.word	0x20002608
 800c52c:	20002620 	.word	0x20002620
 800c530:	200024cc 	.word	0x200024cc
 800c534:	20002598 	.word	0x20002598
 800c538:	20002604 	.word	0x20002604
 800c53c:	20002660 	.word	0x20002660
 800c540:	2000087c 	.word	0x2000087c

0800c544 <ShoreConfigRequest>:

void ShoreConfigRequest(uint8_t *requestBuf)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b098      	sub	sp, #96	; 0x60
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, REQUEST_CONFIG_LENGTH)) {
 800c54c:	2154      	movs	r1, #84	; 0x54
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f7ff f897 	bl	800b682 <IsCrc16ChecksummCorrect>
 800c554:	4603      	mov	r3, r0
 800c556:	2b00      	cmp	r3, #0
 800c558:	f000 8158 	beq.w	800c80c <ShoreConfigRequest+0x2c8>
		struct shoreConfigRequest_s req;
		memcpy((void*)&req, (void*)requestBuf, REQUEST_CONFIG_LENGTH);
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	f107 0308 	add.w	r3, r7, #8
 800c562:	4611      	mov	r1, r2
 800c564:	2254      	movs	r2, #84	; 0x54
 800c566:	4618      	mov	r0, r3
 800c568:	f003 fb64 	bl	800fc34 <memcpy>

		rJoySpeed.march = req.march;
 800c56c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c570:	ee07 3a90 	vmov	s15, r3
 800c574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c578:	4ba9      	ldr	r3, [pc, #676]	; (800c820 <ShoreConfigRequest+0x2dc>)
 800c57a:	edc3 7a00 	vstr	s15, [r3]
		rJoySpeed.lag = req.lag;
 800c57e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c582:	ee07 3a90 	vmov	s15, r3
 800c586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c58a:	4ba5      	ldr	r3, [pc, #660]	; (800c820 <ShoreConfigRequest+0x2dc>)
 800c58c:	edc3 7a01 	vstr	s15, [r3, #4]
		rJoySpeed.depth = req.depth;
 800c590:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c594:	ee07 3a90 	vmov	s15, r3
 800c598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c59c:	4ba0      	ldr	r3, [pc, #640]	; (800c820 <ShoreConfigRequest+0x2dc>)
 800c59e:	edc3 7a02 	vstr	s15, [r3, #8]
		rJoySpeed.roll = req.roll;
 800c5a2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c5a6:	ee07 3a90 	vmov	s15, r3
 800c5aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5ae:	4b9c      	ldr	r3, [pc, #624]	; (800c820 <ShoreConfigRequest+0x2dc>)
 800c5b0:	edc3 7a03 	vstr	s15, [r3, #12]
		rJoySpeed.pitch = req.pitch;
 800c5b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c5b8:	ee07 3a90 	vmov	s15, r3
 800c5bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5c0:	4b97      	ldr	r3, [pc, #604]	; (800c820 <ShoreConfigRequest+0x2dc>)
 800c5c2:	edc3 7a04 	vstr	s15, [r3, #16]
		rJoySpeed.yaw = req.yaw;
 800c5c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c5ca:	ee07 3a90 	vmov	s15, r3
 800c5ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5d2:	4b93      	ldr	r3, [pc, #588]	; (800c820 <ShoreConfigRequest+0x2dc>)
 800c5d4:	edc3 7a05 	vstr	s15, [r3, #20]

		rStabConstants[req.contour].pJoyUnitCast = req.pJoyUnitCast;
 800c5d8:	7a7b      	ldrb	r3, [r7, #9]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f8d7 2016 	ldr.w	r2, [r7, #22]
 800c5e0:	4613      	mov	r3, r2
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	498f      	ldr	r1, [pc, #572]	; (800c824 <ShoreConfigRequest+0x2e0>)
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	00db      	lsls	r3, r3, #3
 800c5ea:	4403      	add	r3, r0
 800c5ec:	00db      	lsls	r3, r3, #3
 800c5ee:	440b      	add	r3, r1
 800c5f0:	3304      	adds	r3, #4
 800c5f2:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pSpeedDyn = req.pSpeedDyn;
 800c5f4:	7a7b      	ldrb	r3, [r7, #9]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f8d7 201a 	ldr.w	r2, [r7, #26]
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	461a      	mov	r2, r3
 800c600:	4988      	ldr	r1, [pc, #544]	; (800c824 <ShoreConfigRequest+0x2e0>)
 800c602:	4603      	mov	r3, r0
 800c604:	00db      	lsls	r3, r3, #3
 800c606:	4403      	add	r3, r0
 800c608:	00db      	lsls	r3, r3, #3
 800c60a:	440b      	add	r3, r1
 800c60c:	3308      	adds	r3, #8
 800c60e:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pErrGain = req.pErrGain;
 800c610:	7a7b      	ldrb	r3, [r7, #9]
 800c612:	4618      	mov	r0, r3
 800c614:	f8d7 201e 	ldr.w	r2, [r7, #30]
 800c618:	4613      	mov	r3, r2
 800c61a:	461a      	mov	r2, r3
 800c61c:	4981      	ldr	r1, [pc, #516]	; (800c824 <ShoreConfigRequest+0x2e0>)
 800c61e:	4603      	mov	r3, r0
 800c620:	00db      	lsls	r3, r3, #3
 800c622:	4403      	add	r3, r0
 800c624:	00db      	lsls	r3, r3, #3
 800c626:	440b      	add	r3, r1
 800c628:	330c      	adds	r3, #12
 800c62a:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].aFilter[POS_FILTER].T = req.posFilterT;
 800c62c:	7a7b      	ldrb	r3, [r7, #9]
 800c62e:	4618      	mov	r0, r3
 800c630:	f8d7 2022 	ldr.w	r2, [r7, #34]	; 0x22
 800c634:	4613      	mov	r3, r2
 800c636:	461a      	mov	r2, r3
 800c638:	497a      	ldr	r1, [pc, #488]	; (800c824 <ShoreConfigRequest+0x2e0>)
 800c63a:	4603      	mov	r3, r0
 800c63c:	00db      	lsls	r3, r3, #3
 800c63e:	4403      	add	r3, r0
 800c640:	00db      	lsls	r3, r3, #3
 800c642:	440b      	add	r3, r1
 800c644:	3310      	adds	r3, #16
 800c646:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[POS_FILTER].K = req.posFilterK;
 800c648:	7a7b      	ldrb	r3, [r7, #9]
 800c64a:	4618      	mov	r0, r3
 800c64c:	f8d7 2026 	ldr.w	r2, [r7, #38]	; 0x26
 800c650:	4613      	mov	r3, r2
 800c652:	461a      	mov	r2, r3
 800c654:	4973      	ldr	r1, [pc, #460]	; (800c824 <ShoreConfigRequest+0x2e0>)
 800c656:	4603      	mov	r3, r0
 800c658:	00db      	lsls	r3, r3, #3
 800c65a:	4403      	add	r3, r0
 800c65c:	00db      	lsls	r3, r3, #3
 800c65e:	440b      	add	r3, r1
 800c660:	3314      	adds	r3, #20
 800c662:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].T = req.speedFilterT;
 800c664:	7a7b      	ldrb	r3, [r7, #9]
 800c666:	4618      	mov	r0, r3
 800c668:	f8d7 202a 	ldr.w	r2, [r7, #42]	; 0x2a
 800c66c:	4613      	mov	r3, r2
 800c66e:	461a      	mov	r2, r3
 800c670:	496c      	ldr	r1, [pc, #432]	; (800c824 <ShoreConfigRequest+0x2e0>)
 800c672:	4603      	mov	r3, r0
 800c674:	00db      	lsls	r3, r3, #3
 800c676:	4403      	add	r3, r0
 800c678:	00db      	lsls	r3, r3, #3
 800c67a:	440b      	add	r3, r1
 800c67c:	3318      	adds	r3, #24
 800c67e:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].K = req.speedFilterK;
 800c680:	7a7b      	ldrb	r3, [r7, #9]
 800c682:	4618      	mov	r0, r3
 800c684:	f8d7 202e 	ldr.w	r2, [r7, #46]	; 0x2e
 800c688:	4613      	mov	r3, r2
 800c68a:	461a      	mov	r2, r3
 800c68c:	4965      	ldr	r1, [pc, #404]	; (800c824 <ShoreConfigRequest+0x2e0>)
 800c68e:	4603      	mov	r3, r0
 800c690:	00db      	lsls	r3, r3, #3
 800c692:	4403      	add	r3, r0
 800c694:	00db      	lsls	r3, r3, #3
 800c696:	440b      	add	r3, r1
 800c698:	331c      	adds	r3, #28
 800c69a:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].pid.pGain = req.pid_pGain;
 800c69c:	7a7b      	ldrb	r3, [r7, #9]
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f8d7 2032 	ldr.w	r2, [r7, #50]	; 0x32
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	495e      	ldr	r1, [pc, #376]	; (800c824 <ShoreConfigRequest+0x2e0>)
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	00db      	lsls	r3, r3, #3
 800c6ae:	4403      	add	r3, r0
 800c6b0:	00db      	lsls	r3, r3, #3
 800c6b2:	440b      	add	r3, r1
 800c6b4:	3328      	adds	r3, #40	; 0x28
 800c6b6:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iGain = req.pid_iGain;
 800c6b8:	7a7b      	ldrb	r3, [r7, #9]
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f8d7 2036 	ldr.w	r2, [r7, #54]	; 0x36
 800c6c0:	4613      	mov	r3, r2
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	4957      	ldr	r1, [pc, #348]	; (800c824 <ShoreConfigRequest+0x2e0>)
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	00db      	lsls	r3, r3, #3
 800c6ca:	4403      	add	r3, r0
 800c6cc:	00db      	lsls	r3, r3, #3
 800c6ce:	440b      	add	r3, r1
 800c6d0:	332c      	adds	r3, #44	; 0x2c
 800c6d2:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iMax = req.pid_iMax;
 800c6d4:	7a7b      	ldrb	r3, [r7, #9]
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f8d7 203a 	ldr.w	r2, [r7, #58]	; 0x3a
 800c6dc:	4613      	mov	r3, r2
 800c6de:	461a      	mov	r2, r3
 800c6e0:	4950      	ldr	r1, [pc, #320]	; (800c824 <ShoreConfigRequest+0x2e0>)
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	00db      	lsls	r3, r3, #3
 800c6e6:	4403      	add	r3, r0
 800c6e8:	00db      	lsls	r3, r3, #3
 800c6ea:	440b      	add	r3, r1
 800c6ec:	3330      	adds	r3, #48	; 0x30
 800c6ee:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iMin = req.pid_iMin;
 800c6f0:	7a7b      	ldrb	r3, [r7, #9]
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f8d7 203e 	ldr.w	r2, [r7, #62]	; 0x3e
 800c6f8:	4613      	mov	r3, r2
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	4949      	ldr	r1, [pc, #292]	; (800c824 <ShoreConfigRequest+0x2e0>)
 800c6fe:	4603      	mov	r3, r0
 800c700:	00db      	lsls	r3, r3, #3
 800c702:	4403      	add	r3, r0
 800c704:	00db      	lsls	r3, r3, #3
 800c706:	440b      	add	r3, r1
 800c708:	3334      	adds	r3, #52	; 0x34
 800c70a:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].pThrustersMin = req.pThrustersMin;
 800c70c:	7a7b      	ldrb	r3, [r7, #9]
 800c70e:	4618      	mov	r0, r3
 800c710:	f8d7 2042 	ldr.w	r2, [r7, #66]	; 0x42
 800c714:	4613      	mov	r3, r2
 800c716:	461a      	mov	r2, r3
 800c718:	4942      	ldr	r1, [pc, #264]	; (800c824 <ShoreConfigRequest+0x2e0>)
 800c71a:	4603      	mov	r3, r0
 800c71c:	00db      	lsls	r3, r3, #3
 800c71e:	4403      	add	r3, r0
 800c720:	00db      	lsls	r3, r3, #3
 800c722:	440b      	add	r3, r1
 800c724:	3338      	adds	r3, #56	; 0x38
 800c726:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pThrustersMax = req.pThrustersMax;
 800c728:	7a7b      	ldrb	r3, [r7, #9]
 800c72a:	4618      	mov	r0, r3
 800c72c:	f8d7 2046 	ldr.w	r2, [r7, #70]	; 0x46
 800c730:	4613      	mov	r3, r2
 800c732:	461a      	mov	r2, r3
 800c734:	493b      	ldr	r1, [pc, #236]	; (800c824 <ShoreConfigRequest+0x2e0>)
 800c736:	4603      	mov	r3, r0
 800c738:	00db      	lsls	r3, r3, #3
 800c73a:	4403      	add	r3, r0
 800c73c:	00db      	lsls	r3, r3, #3
 800c73e:	440b      	add	r3, r1
 800c740:	333c      	adds	r3, #60	; 0x3c
 800c742:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].T = req.thrustersFilterT;
 800c744:	7a7b      	ldrb	r3, [r7, #9]
 800c746:	4618      	mov	r0, r3
 800c748:	f8d7 204a 	ldr.w	r2, [r7, #74]	; 0x4a
 800c74c:	4613      	mov	r3, r2
 800c74e:	461a      	mov	r2, r3
 800c750:	4934      	ldr	r1, [pc, #208]	; (800c824 <ShoreConfigRequest+0x2e0>)
 800c752:	4603      	mov	r3, r0
 800c754:	00db      	lsls	r3, r3, #3
 800c756:	4403      	add	r3, r0
 800c758:	00db      	lsls	r3, r3, #3
 800c75a:	440b      	add	r3, r1
 800c75c:	3320      	adds	r3, #32
 800c75e:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].K = req.thrustersFilterK;
 800c760:	7a7b      	ldrb	r3, [r7, #9]
 800c762:	4618      	mov	r0, r3
 800c764:	f8d7 204e 	ldr.w	r2, [r7, #78]	; 0x4e
 800c768:	4613      	mov	r3, r2
 800c76a:	461a      	mov	r2, r3
 800c76c:	492d      	ldr	r1, [pc, #180]	; (800c824 <ShoreConfigRequest+0x2e0>)
 800c76e:	4603      	mov	r3, r0
 800c770:	00db      	lsls	r3, r3, #3
 800c772:	4403      	add	r3, r0
 800c774:	00db      	lsls	r3, r3, #3
 800c776:	440b      	add	r3, r1
 800c778:	3324      	adds	r3, #36	; 0x24
 800c77a:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].sOutSummatorMax = req.sOutSummatorMax;
 800c77c:	7a7b      	ldrb	r3, [r7, #9]
 800c77e:	4618      	mov	r0, r3
 800c780:	f8d7 2052 	ldr.w	r2, [r7, #82]	; 0x52
 800c784:	4613      	mov	r3, r2
 800c786:	461a      	mov	r2, r3
 800c788:	4926      	ldr	r1, [pc, #152]	; (800c824 <ShoreConfigRequest+0x2e0>)
 800c78a:	4603      	mov	r3, r0
 800c78c:	00db      	lsls	r3, r3, #3
 800c78e:	4403      	add	r3, r0
 800c790:	00db      	lsls	r3, r3, #3
 800c792:	440b      	add	r3, r1
 800c794:	3340      	adds	r3, #64	; 0x40
 800c796:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].sOutSummatorMin = req.sOutSummatorMin;
 800c798:	7a7b      	ldrb	r3, [r7, #9]
 800c79a:	4618      	mov	r0, r3
 800c79c:	f8d7 2056 	ldr.w	r2, [r7, #86]	; 0x56
 800c7a0:	4613      	mov	r3, r2
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	491f      	ldr	r1, [pc, #124]	; (800c824 <ShoreConfigRequest+0x2e0>)
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	00db      	lsls	r3, r3, #3
 800c7aa:	4403      	add	r3, r0
 800c7ac:	00db      	lsls	r3, r3, #3
 800c7ae:	440b      	add	r3, r1
 800c7b0:	3344      	adds	r3, #68	; 0x44
 800c7b2:	601a      	str	r2, [r3, #0]

		if(rState.contourSelected != req.contour) {
 800c7b4:	4b1c      	ldr	r3, [pc, #112]	; (800c828 <ShoreConfigRequest+0x2e4>)
 800c7b6:	785a      	ldrb	r2, [r3, #1]
 800c7b8:	7a7b      	ldrb	r3, [r7, #9]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d01d      	beq.n	800c7fa <ShoreConfigRequest+0x2b6>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800c7be:	2300      	movs	r3, #0
 800c7c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c7c4:	e00e      	b.n	800c7e4 <ShoreConfigRequest+0x2a0>
				rStabConstants[i].enable = false;
 800c7c6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800c7ca:	4916      	ldr	r1, [pc, #88]	; (800c824 <ShoreConfigRequest+0x2e0>)
 800c7cc:	4613      	mov	r3, r2
 800c7ce:	00db      	lsls	r3, r3, #3
 800c7d0:	4413      	add	r3, r2
 800c7d2:	00db      	lsls	r3, r3, #3
 800c7d4:	440b      	add	r3, r1
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800c7da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7de:	3301      	adds	r3, #1
 800c7e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c7e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7e8:	2b05      	cmp	r3, #5
 800c7ea:	d9ec      	bls.n	800c7c6 <ShoreConfigRequest+0x282>
			}
			rState.contourSelected = req.contour;
 800c7ec:	7a7a      	ldrb	r2, [r7, #9]
 800c7ee:	4b0e      	ldr	r3, [pc, #56]	; (800c828 <ShoreConfigRequest+0x2e4>)
 800c7f0:	705a      	strb	r2, [r3, #1]
			stabilizationStart(req.contour);
 800c7f2:	7a7b      	ldrb	r3, [r7, #9]
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f001 ff83 	bl	800e700 <stabilizationStart>
		}

		// TODO tuuuupooo
		formThrustVectors();
 800c7fa:	f002 fd87 	bl	800f30c <formThrustVectors>

		++uartBus[SHORE_UART].successRxCounter;;
 800c7fe:	4b0b      	ldr	r3, [pc, #44]	; (800c82c <ShoreConfigRequest+0x2e8>)
 800c800:	895b      	ldrh	r3, [r3, #10]
 800c802:	3301      	adds	r3, #1
 800c804:	b29a      	uxth	r2, r3
 800c806:	4b09      	ldr	r3, [pc, #36]	; (800c82c <ShoreConfigRequest+0x2e8>)
 800c808:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 800c80a:	e004      	b.n	800c816 <ShoreConfigRequest+0x2d2>
		++uartBus[SHORE_UART].brokenRxCounter;
 800c80c:	4b07      	ldr	r3, [pc, #28]	; (800c82c <ShoreConfigRequest+0x2e8>)
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	3301      	adds	r3, #1
 800c812:	4a06      	ldr	r2, [pc, #24]	; (800c82c <ShoreConfigRequest+0x2e8>)
 800c814:	60d3      	str	r3, [r2, #12]
}
 800c816:	bf00      	nop
 800c818:	3760      	adds	r7, #96	; 0x60
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	bf00      	nop
 800c820:	20002608 	.word	0x20002608
 800c824:	20002660 	.word	0x20002660
 800c828:	200024cc 	.word	0x200024cc
 800c82c:	2000087c 	.word	0x2000087c

0800c830 <ShoreDirectRequest>:

void ShoreDirectRequest(uint8_t *requestBuf)
{
 800c830:	b5b0      	push	{r4, r5, r7, lr}
 800c832:	b088      	sub	sp, #32
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_DIRECT_LENGTH)) {
 800c838:	2111      	movs	r1, #17
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f7fe ff21 	bl	800b682 <IsCrc16ChecksummCorrect>
 800c840:	4603      	mov	r3, r0
 800c842:	2b00      	cmp	r3, #0
 800c844:	f000 809b 	beq.w	800c97e <ShoreDirectRequest+0x14e>
		struct shoreRequestDirect_s req;
		memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_DIRECT_LENGTH);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f107 040c 	add.w	r4, r7, #12
 800c84e:	461d      	mov	r5, r3
 800c850:	6828      	ldr	r0, [r5, #0]
 800c852:	6869      	ldr	r1, [r5, #4]
 800c854:	68aa      	ldr	r2, [r5, #8]
 800c856:	68eb      	ldr	r3, [r5, #12]
 800c858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c85a:	7c2b      	ldrb	r3, [r5, #16]
 800c85c:	7023      	strb	r3, [r4, #0]

		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800c85e:	2300      	movs	r3, #0
 800c860:	77fb      	strb	r3, [r7, #31]
 800c862:	e00b      	b.n	800c87c <ShoreDirectRequest+0x4c>
			rStabConstants[i].enable = false;
 800c864:	7ffa      	ldrb	r2, [r7, #31]
 800c866:	494a      	ldr	r1, [pc, #296]	; (800c990 <ShoreDirectRequest+0x160>)
 800c868:	4613      	mov	r3, r2
 800c86a:	00db      	lsls	r3, r3, #3
 800c86c:	4413      	add	r3, r2
 800c86e:	00db      	lsls	r3, r3, #3
 800c870:	440b      	add	r3, r1
 800c872:	2200      	movs	r2, #0
 800c874:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800c876:	7ffb      	ldrb	r3, [r7, #31]
 800c878:	3301      	adds	r3, #1
 800c87a:	77fb      	strb	r3, [r7, #31]
 800c87c:	7ffb      	ldrb	r3, [r7, #31]
 800c87e:	2b05      	cmp	r3, #5
 800c880:	d9f0      	bls.n	800c864 <ShoreDirectRequest+0x34>
		}

		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 800c882:	2300      	movs	r3, #0
 800c884:	77bb      	strb	r3, [r7, #30]
 800c886:	e070      	b.n	800c96a <ShoreDirectRequest+0x13a>
			if(i != req.number) {
 800c888:	7b7b      	ldrb	r3, [r7, #13]
 800c88a:	7fba      	ldrb	r2, [r7, #30]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d00a      	beq.n	800c8a6 <ShoreDirectRequest+0x76>
				rThrusters[i].desiredSpeed = 0;
 800c890:	7fba      	ldrb	r2, [r7, #30]
 800c892:	4940      	ldr	r1, [pc, #256]	; (800c994 <ShoreDirectRequest+0x164>)
 800c894:	4613      	mov	r3, r2
 800c896:	005b      	lsls	r3, r3, #1
 800c898:	4413      	add	r3, r2
 800c89a:	00db      	lsls	r3, r3, #3
 800c89c:	440b      	add	r3, r1
 800c89e:	3302      	adds	r3, #2
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	701a      	strb	r2, [r3, #0]
 800c8a4:	e05e      	b.n	800c964 <ShoreDirectRequest+0x134>
			}
			else {
				rThrusters[req.number].desiredSpeed = req.velocity;
 800c8a6:	7b7b      	ldrb	r3, [r7, #13]
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	f997 000f 	ldrsb.w	r0, [r7, #15]
 800c8ae:	4a39      	ldr	r2, [pc, #228]	; (800c994 <ShoreDirectRequest+0x164>)
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	005b      	lsls	r3, r3, #1
 800c8b4:	440b      	add	r3, r1
 800c8b6:	00db      	lsls	r3, r3, #3
 800c8b8:	4413      	add	r3, r2
 800c8ba:	3302      	adds	r3, #2
 800c8bc:	4602      	mov	r2, r0
 800c8be:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].address = req.id;
 800c8c0:	7b7b      	ldrb	r3, [r7, #13]
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	7bb8      	ldrb	r0, [r7, #14]
 800c8c6:	4a33      	ldr	r2, [pc, #204]	; (800c994 <ShoreDirectRequest+0x164>)
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	005b      	lsls	r3, r3, #1
 800c8cc:	440b      	add	r3, r1
 800c8ce:	00db      	lsls	r3, r3, #3
 800c8d0:	4413      	add	r3, r2
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].kForward = req.kForward;
 800c8d6:	7b7b      	ldrb	r3, [r7, #13]
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f8d7 2011 	ldr.w	r2, [r7, #17]
 800c8de:	4613      	mov	r3, r2
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	492c      	ldr	r1, [pc, #176]	; (800c994 <ShoreDirectRequest+0x164>)
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	005b      	lsls	r3, r3, #1
 800c8e8:	4403      	add	r3, r0
 800c8ea:	00db      	lsls	r3, r3, #3
 800c8ec:	440b      	add	r3, r1
 800c8ee:	330c      	adds	r3, #12
 800c8f0:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].kBackward = req.kBackward;
 800c8f2:	7b7b      	ldrb	r3, [r7, #13]
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f8d7 2015 	ldr.w	r2, [r7, #21]
 800c8fa:	4613      	mov	r3, r2
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	4925      	ldr	r1, [pc, #148]	; (800c994 <ShoreDirectRequest+0x164>)
 800c900:	4603      	mov	r3, r0
 800c902:	005b      	lsls	r3, r3, #1
 800c904:	4403      	add	r3, r0
 800c906:	00db      	lsls	r3, r3, #3
 800c908:	440b      	add	r3, r1
 800c90a:	3310      	adds	r3, #16
 800c90c:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].sForward = req.sForward;
 800c90e:	7b7b      	ldrb	r3, [r7, #13]
 800c910:	4619      	mov	r1, r3
 800c912:	f997 0019 	ldrsb.w	r0, [r7, #25]
 800c916:	4a1f      	ldr	r2, [pc, #124]	; (800c994 <ShoreDirectRequest+0x164>)
 800c918:	460b      	mov	r3, r1
 800c91a:	005b      	lsls	r3, r3, #1
 800c91c:	440b      	add	r3, r1
 800c91e:	00db      	lsls	r3, r3, #3
 800c920:	4413      	add	r3, r2
 800c922:	3314      	adds	r3, #20
 800c924:	4602      	mov	r2, r0
 800c926:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].sBackward = req.sBackward;
 800c928:	7b7b      	ldrb	r3, [r7, #13]
 800c92a:	4619      	mov	r1, r3
 800c92c:	f997 001a 	ldrsb.w	r0, [r7, #26]
 800c930:	4a18      	ldr	r2, [pc, #96]	; (800c994 <ShoreDirectRequest+0x164>)
 800c932:	460b      	mov	r3, r1
 800c934:	005b      	lsls	r3, r3, #1
 800c936:	440b      	add	r3, r1
 800c938:	00db      	lsls	r3, r3, #3
 800c93a:	4413      	add	r3, r2
 800c93c:	3315      	adds	r3, #21
 800c93e:	4602      	mov	r2, r0
 800c940:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].inverse = req.reverse;
 800c942:	7c3b      	ldrb	r3, [r7, #16]
 800c944:	7b7a      	ldrb	r2, [r7, #13]
 800c946:	4611      	mov	r1, r2
 800c948:	2b00      	cmp	r3, #0
 800c94a:	bf14      	ite	ne
 800c94c:	2301      	movne	r3, #1
 800c94e:	2300      	moveq	r3, #0
 800c950:	b2d8      	uxtb	r0, r3
 800c952:	4a10      	ldr	r2, [pc, #64]	; (800c994 <ShoreDirectRequest+0x164>)
 800c954:	460b      	mov	r3, r1
 800c956:	005b      	lsls	r3, r3, #1
 800c958:	440b      	add	r3, r1
 800c95a:	00db      	lsls	r3, r3, #3
 800c95c:	4413      	add	r3, r2
 800c95e:	3316      	adds	r3, #22
 800c960:	4602      	mov	r2, r0
 800c962:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 800c964:	7fbb      	ldrb	r3, [r7, #30]
 800c966:	3301      	adds	r3, #1
 800c968:	77bb      	strb	r3, [r7, #30]
 800c96a:	7fbb      	ldrb	r3, [r7, #30]
 800c96c:	2b07      	cmp	r3, #7
 800c96e:	d98b      	bls.n	800c888 <ShoreDirectRequest+0x58>
			}
		}

		++uartBus[SHORE_UART].successRxCounter;;
 800c970:	4b09      	ldr	r3, [pc, #36]	; (800c998 <ShoreDirectRequest+0x168>)
 800c972:	895b      	ldrh	r3, [r3, #10]
 800c974:	3301      	adds	r3, #1
 800c976:	b29a      	uxth	r2, r3
 800c978:	4b07      	ldr	r3, [pc, #28]	; (800c998 <ShoreDirectRequest+0x168>)
 800c97a:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 800c97c:	e004      	b.n	800c988 <ShoreDirectRequest+0x158>
		++uartBus[SHORE_UART].brokenRxCounter;
 800c97e:	4b06      	ldr	r3, [pc, #24]	; (800c998 <ShoreDirectRequest+0x168>)
 800c980:	68db      	ldr	r3, [r3, #12]
 800c982:	3301      	adds	r3, #1
 800c984:	4a04      	ldr	r2, [pc, #16]	; (800c998 <ShoreDirectRequest+0x168>)
 800c986:	60d3      	str	r3, [r2, #12]
}
 800c988:	bf00      	nop
 800c98a:	3720      	adds	r7, #32
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bdb0      	pop	{r4, r5, r7, pc}
 800c990:	20002660 	.word	0x20002660
 800c994:	200024d8 	.word	0x200024d8
 800c998:	2000087c 	.word	0x2000087c

0800c99c <ShoreResponse>:

void ShoreResponse(uint8_t *responseBuf)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b094      	sub	sp, #80	; 0x50
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
	struct shoreResponse_s res;

    res.roll = rSensors.roll;
 800c9a4:	4b1b      	ldr	r3, [pc, #108]	; (800ca14 <ShoreResponse+0x78>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	60bb      	str	r3, [r7, #8]
    res.pitch = rSensors.pitch;
 800c9aa:	4b1a      	ldr	r3, [pc, #104]	; (800ca14 <ShoreResponse+0x78>)
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	60fb      	str	r3, [r7, #12]
    res.yaw =  rSensors.yaw;//*rStabState[STAB_YAW].posSignal;//rSensors.yaw;
 800c9b0:	4b18      	ldr	r3, [pc, #96]	; (800ca14 <ShoreResponse+0x78>)
 800c9b2:	689b      	ldr	r3, [r3, #8]
 800c9b4:	613b      	str	r3, [r7, #16]
    res.rollSpeed = rSensors.rollSpeed;
 800c9b6:	4b17      	ldr	r3, [pc, #92]	; (800ca14 <ShoreResponse+0x78>)
 800c9b8:	69db      	ldr	r3, [r3, #28]
 800c9ba:	617b      	str	r3, [r7, #20]
    res.pitchSpeed = rSensors.pitchSpeed;
 800c9bc:	4b15      	ldr	r3, [pc, #84]	; (800ca14 <ShoreResponse+0x78>)
 800c9be:	6a1b      	ldr	r3, [r3, #32]
 800c9c0:	61bb      	str	r3, [r7, #24]
    res.yawSpeed = rSensors.yawSpeed;
 800c9c2:	4b14      	ldr	r3, [pc, #80]	; (800ca14 <ShoreResponse+0x78>)
 800c9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c6:	61fb      	str	r3, [r7, #28]

    res.pressure = rSensors.pressure;
 800c9c8:	4b12      	ldr	r3, [pc, #72]	; (800ca14 <ShoreResponse+0x78>)
 800c9ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9cc:	623b      	str	r3, [r7, #32]

    res.vma_errors = 0x55;         //!!!!!TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 800c9d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c9d8:	2300      	movs	r3, #0
 800c9da:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    // TODO do this properly pls
    res.dev_errors = 0;//robot->device.errors;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    res.pc_errors = rComputer.errors;
 800c9ea:	4b0b      	ldr	r3, [pc, #44]	; (800ca18 <ShoreResponse+0x7c>)
 800c9ec:	785b      	ldrb	r3, [r3, #1]
 800c9ee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

    memcpy((void*)responseBuf, (void*)&res, SHORE_RESPONSE_LENGTH);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f107 0308 	add.w	r3, r7, #8
 800c9fa:	2246      	movs	r2, #70	; 0x46
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	f003 f919 	bl	800fc34 <memcpy>
    AddCrc16Checksumm(responseBuf, SHORE_RESPONSE_LENGTH);
 800ca02:	2146      	movs	r1, #70	; 0x46
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f7fe fe5c 	bl	800b6c2 <AddCrc16Checksumm>
}
 800ca0a:	bf00      	nop
 800ca0c:	3750      	adds	r7, #80	; 0x50
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
 800ca12:	bf00      	nop
 800ca14:	20002598 	.word	0x20002598
 800ca18:	20002604 	.word	0x20002604

0800ca1c <ShoreConfigResponse>:

void ShoreConfigResponse(uint8_t *responseBuf)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b09c      	sub	sp, #112	; 0x70
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
	struct shoreConfigResponse_s res;

	res.code = REQUEST_CONFIG_CODE;
 800ca24:	2355      	movs	r3, #85	; 0x55
 800ca26:	733b      	strb	r3, [r7, #12]

	res.roll = rSensors.roll;
 800ca28:	4b74      	ldr	r3, [pc, #464]	; (800cbfc <ShoreConfigResponse+0x1e0>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f8c7 300d 	str.w	r3, [r7, #13]
	res.pitch = rSensors.pitch;
 800ca30:	4b72      	ldr	r3, [pc, #456]	; (800cbfc <ShoreConfigResponse+0x1e0>)
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	f8c7 3011 	str.w	r3, [r7, #17]
	res.yaw = rSensors.yaw;
 800ca38:	4b70      	ldr	r3, [pc, #448]	; (800cbfc <ShoreConfigResponse+0x1e0>)
 800ca3a:	689b      	ldr	r3, [r3, #8]
 800ca3c:	f8c7 3015 	str.w	r3, [r7, #21]
	res.raw_yaw = rSensors.raw_yaw;
 800ca40:	4b6e      	ldr	r3, [pc, #440]	; (800cbfc <ShoreConfigResponse+0x1e0>)
 800ca42:	68db      	ldr	r3, [r3, #12]
 800ca44:	f8c7 3019 	str.w	r3, [r7, #25]

	res.rollSpeed = rSensors.rollSpeed;
 800ca48:	4b6c      	ldr	r3, [pc, #432]	; (800cbfc <ShoreConfigResponse+0x1e0>)
 800ca4a:	69db      	ldr	r3, [r3, #28]
 800ca4c:	f8c7 301d 	str.w	r3, [r7, #29]
	res.pitchSpeed = rSensors.pitchSpeed;
 800ca50:	4b6a      	ldr	r3, [pc, #424]	; (800cbfc <ShoreConfigResponse+0x1e0>)
 800ca52:	6a1b      	ldr	r3, [r3, #32]
 800ca54:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
	res.yawSpeed = rSensors.yawSpeed;
 800ca58:	4b68      	ldr	r3, [pc, #416]	; (800cbfc <ShoreConfigResponse+0x1e0>)
 800ca5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca5c:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25

	res.pressure = rSensors.pressure;
 800ca60:	4b66      	ldr	r3, [pc, #408]	; (800cbfc <ShoreConfigResponse+0x1e0>)
 800ca62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca64:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
	res.in_pressure = 0;
 800ca68:	f04f 0300 	mov.w	r3, #0
 800ca6c:	f8c7 302d 	str.w	r3, [r7, #45]	; 0x2d

	res.inputSignal = *rStabState[rState.contourSelected].inputSignal;
 800ca70:	4b63      	ldr	r3, [pc, #396]	; (800cc00 <ShoreConfigResponse+0x1e4>)
 800ca72:	785b      	ldrb	r3, [r3, #1]
 800ca74:	4619      	mov	r1, r3
 800ca76:	4a63      	ldr	r2, [pc, #396]	; (800cc04 <ShoreConfigResponse+0x1e8>)
 800ca78:	2358      	movs	r3, #88	; 0x58
 800ca7a:	fb01 f303 	mul.w	r3, r1, r3
 800ca7e:	4413      	add	r3, r2
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f8c7 3031 	str.w	r3, [r7, #49]	; 0x31
	res.speedSignal = *rStabState[rState.contourSelected].speedSignal;
 800ca88:	4b5d      	ldr	r3, [pc, #372]	; (800cc00 <ShoreConfigResponse+0x1e4>)
 800ca8a:	785b      	ldrb	r3, [r3, #1]
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	4a5d      	ldr	r2, [pc, #372]	; (800cc04 <ShoreConfigResponse+0x1e8>)
 800ca90:	2358      	movs	r3, #88	; 0x58
 800ca92:	fb01 f303 	mul.w	r3, r1, r3
 800ca96:	4413      	add	r3, r2
 800ca98:	3304      	adds	r3, #4
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f8c7 3035 	str.w	r3, [r7, #53]	; 0x35
	res.posSignal = *rStabState[rState.contourSelected].posSignal;
 800caa2:	4b57      	ldr	r3, [pc, #348]	; (800cc00 <ShoreConfigResponse+0x1e4>)
 800caa4:	785b      	ldrb	r3, [r3, #1]
 800caa6:	4619      	mov	r1, r3
 800caa8:	4a56      	ldr	r2, [pc, #344]	; (800cc04 <ShoreConfigResponse+0x1e8>)
 800caaa:	2358      	movs	r3, #88	; 0x58
 800caac:	fb01 f303 	mul.w	r3, r1, r3
 800cab0:	4413      	add	r3, r2
 800cab2:	3308      	adds	r3, #8
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f8c7 3039 	str.w	r3, [r7, #57]	; 0x39

	res.joyUnitCasted = rStabState[rState.contourSelected].joyUnitCasted;
 800cabc:	4b50      	ldr	r3, [pc, #320]	; (800cc00 <ShoreConfigResponse+0x1e4>)
 800cabe:	785b      	ldrb	r3, [r3, #1]
 800cac0:	4619      	mov	r1, r3
 800cac2:	4a50      	ldr	r2, [pc, #320]	; (800cc04 <ShoreConfigResponse+0x1e8>)
 800cac4:	2358      	movs	r3, #88	; 0x58
 800cac6:	fb01 f303 	mul.w	r3, r1, r3
 800caca:	4413      	add	r3, r2
 800cacc:	331c      	adds	r3, #28
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f8c7 303d 	str.w	r3, [r7, #61]	; 0x3d
	res.joy_iValue = rStabState[rState.contourSelected].joy_iValue;
 800cad4:	4b4a      	ldr	r3, [pc, #296]	; (800cc00 <ShoreConfigResponse+0x1e4>)
 800cad6:	785b      	ldrb	r3, [r3, #1]
 800cad8:	4619      	mov	r1, r3
 800cada:	4a4a      	ldr	r2, [pc, #296]	; (800cc04 <ShoreConfigResponse+0x1e8>)
 800cadc:	2358      	movs	r3, #88	; 0x58
 800cade:	fb01 f303 	mul.w	r3, r1, r3
 800cae2:	4413      	add	r3, r2
 800cae4:	3320      	adds	r3, #32
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f8c7 3041 	str.w	r3, [r7, #65]	; 0x41
	res.posError = rStabState[rState.contourSelected].posError;
 800caec:	4b44      	ldr	r3, [pc, #272]	; (800cc00 <ShoreConfigResponse+0x1e4>)
 800caee:	785b      	ldrb	r3, [r3, #1]
 800caf0:	4619      	mov	r1, r3
 800caf2:	4a44      	ldr	r2, [pc, #272]	; (800cc04 <ShoreConfigResponse+0x1e8>)
 800caf4:	2358      	movs	r3, #88	; 0x58
 800caf6:	fb01 f303 	mul.w	r3, r1, r3
 800cafa:	4413      	add	r3, r2
 800cafc:	3324      	adds	r3, #36	; 0x24
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f8c7 3045 	str.w	r3, [r7, #69]	; 0x45
	res.speedError = rStabState[rState.contourSelected].speedError;
 800cb04:	4b3e      	ldr	r3, [pc, #248]	; (800cc00 <ShoreConfigResponse+0x1e4>)
 800cb06:	785b      	ldrb	r3, [r3, #1]
 800cb08:	4619      	mov	r1, r3
 800cb0a:	4a3e      	ldr	r2, [pc, #248]	; (800cc04 <ShoreConfigResponse+0x1e8>)
 800cb0c:	2358      	movs	r3, #88	; 0x58
 800cb0e:	fb01 f303 	mul.w	r3, r1, r3
 800cb12:	4413      	add	r3, r2
 800cb14:	3328      	adds	r3, #40	; 0x28
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f8c7 3049 	str.w	r3, [r7, #73]	; 0x49
	res.dynSummator = rStabState[rState.contourSelected].dynSummator;
 800cb1c:	4b38      	ldr	r3, [pc, #224]	; (800cc00 <ShoreConfigResponse+0x1e4>)
 800cb1e:	785b      	ldrb	r3, [r3, #1]
 800cb20:	4619      	mov	r1, r3
 800cb22:	4a38      	ldr	r2, [pc, #224]	; (800cc04 <ShoreConfigResponse+0x1e8>)
 800cb24:	2358      	movs	r3, #88	; 0x58
 800cb26:	fb01 f303 	mul.w	r3, r1, r3
 800cb2a:	4413      	add	r3, r2
 800cb2c:	332c      	adds	r3, #44	; 0x2c
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f8c7 304d 	str.w	r3, [r7, #77]	; 0x4d
	res.pidValue = rStabState[rState.contourSelected].pidValue;
 800cb34:	4b32      	ldr	r3, [pc, #200]	; (800cc00 <ShoreConfigResponse+0x1e4>)
 800cb36:	785b      	ldrb	r3, [r3, #1]
 800cb38:	4619      	mov	r1, r3
 800cb3a:	4a32      	ldr	r2, [pc, #200]	; (800cc04 <ShoreConfigResponse+0x1e8>)
 800cb3c:	2358      	movs	r3, #88	; 0x58
 800cb3e:	fb01 f303 	mul.w	r3, r1, r3
 800cb42:	4413      	add	r3, r2
 800cb44:	3330      	adds	r3, #48	; 0x30
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f8c7 3051 	str.w	r3, [r7, #81]	; 0x51
	res.posErrorAmp = rStabState[rState.contourSelected].posErrorAmp;
 800cb4c:	4b2c      	ldr	r3, [pc, #176]	; (800cc00 <ShoreConfigResponse+0x1e4>)
 800cb4e:	785b      	ldrb	r3, [r3, #1]
 800cb50:	4619      	mov	r1, r3
 800cb52:	4a2c      	ldr	r2, [pc, #176]	; (800cc04 <ShoreConfigResponse+0x1e8>)
 800cb54:	2358      	movs	r3, #88	; 0x58
 800cb56:	fb01 f303 	mul.w	r3, r1, r3
 800cb5a:	4413      	add	r3, r2
 800cb5c:	3338      	adds	r3, #56	; 0x38
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f8c7 3055 	str.w	r3, [r7, #85]	; 0x55
	res.speedFiltered = rStabState[rState.contourSelected].speedFiltered;
 800cb64:	4b26      	ldr	r3, [pc, #152]	; (800cc00 <ShoreConfigResponse+0x1e4>)
 800cb66:	785b      	ldrb	r3, [r3, #1]
 800cb68:	4619      	mov	r1, r3
 800cb6a:	4a26      	ldr	r2, [pc, #152]	; (800cc04 <ShoreConfigResponse+0x1e8>)
 800cb6c:	2358      	movs	r3, #88	; 0x58
 800cb6e:	fb01 f303 	mul.w	r3, r1, r3
 800cb72:	4413      	add	r3, r2
 800cb74:	333c      	adds	r3, #60	; 0x3c
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f8c7 3059 	str.w	r3, [r7, #89]	; 0x59
	res.posFiltered = rStabState[rState.contourSelected].posFiltered;
 800cb7c:	4b20      	ldr	r3, [pc, #128]	; (800cc00 <ShoreConfigResponse+0x1e4>)
 800cb7e:	785b      	ldrb	r3, [r3, #1]
 800cb80:	4619      	mov	r1, r3
 800cb82:	4a20      	ldr	r2, [pc, #128]	; (800cc04 <ShoreConfigResponse+0x1e8>)
 800cb84:	2358      	movs	r3, #88	; 0x58
 800cb86:	fb01 f303 	mul.w	r3, r1, r3
 800cb8a:	4413      	add	r3, r2
 800cb8c:	3340      	adds	r3, #64	; 0x40
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f8c7 305d 	str.w	r3, [r7, #93]	; 0x5d

	res.pid_iValue = rStabState[rState.contourSelected].pid_iValue;
 800cb94:	4b1a      	ldr	r3, [pc, #104]	; (800cc00 <ShoreConfigResponse+0x1e4>)
 800cb96:	785b      	ldrb	r3, [r3, #1]
 800cb98:	4619      	mov	r1, r3
 800cb9a:	4a1a      	ldr	r2, [pc, #104]	; (800cc04 <ShoreConfigResponse+0x1e8>)
 800cb9c:	2358      	movs	r3, #88	; 0x58
 800cb9e:	fb01 f303 	mul.w	r3, r1, r3
 800cba2:	4413      	add	r3, r2
 800cba4:	3334      	adds	r3, #52	; 0x34
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f8c7 3061 	str.w	r3, [r7, #97]	; 0x61

	res.thrustersFiltered = rStabState[rState.contourSelected].thrustersFiltered;
 800cbac:	4b14      	ldr	r3, [pc, #80]	; (800cc00 <ShoreConfigResponse+0x1e4>)
 800cbae:	785b      	ldrb	r3, [r3, #1]
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	4a14      	ldr	r2, [pc, #80]	; (800cc04 <ShoreConfigResponse+0x1e8>)
 800cbb4:	2358      	movs	r3, #88	; 0x58
 800cbb6:	fb01 f303 	mul.w	r3, r1, r3
 800cbba:	4413      	add	r3, r2
 800cbbc:	334c      	adds	r3, #76	; 0x4c
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f8c7 3065 	str.w	r3, [r7, #101]	; 0x65
	res.outputSignal = rStabState[rState.contourSelected].outputSignal;
 800cbc4:	4b0e      	ldr	r3, [pc, #56]	; (800cc00 <ShoreConfigResponse+0x1e4>)
 800cbc6:	785b      	ldrb	r3, [r3, #1]
 800cbc8:	4619      	mov	r1, r3
 800cbca:	4a0e      	ldr	r2, [pc, #56]	; (800cc04 <ShoreConfigResponse+0x1e8>)
 800cbcc:	2358      	movs	r3, #88	; 0x58
 800cbce:	fb01 f303 	mul.w	r3, r1, r3
 800cbd2:	4413      	add	r3, r2
 800cbd4:	3350      	adds	r3, #80	; 0x50
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f8c7 3069 	str.w	r3, [r7, #105]	; 0x69

	memcpy((void*)responseBuf, (void*)&res, SHORE_CONFIG_RESPONSE_LENGTH);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f107 030c 	add.w	r3, r7, #12
 800cbe4:	2263      	movs	r2, #99	; 0x63
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	f003 f824 	bl	800fc34 <memcpy>

	AddCrc16Checksumm(responseBuf, SHORE_CONFIG_RESPONSE_LENGTH);
 800cbec:	2163      	movs	r1, #99	; 0x63
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7fe fd67 	bl	800b6c2 <AddCrc16Checksumm>
}
 800cbf4:	bf00      	nop
 800cbf6:	3770      	adds	r7, #112	; 0x70
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	20002598 	.word	0x20002598
 800cc00:	200024cc 	.word	0x200024cc
 800cc04:	20002810 	.word	0x20002810

0800cc08 <ShoreDirectResponse>:

void ShoreDirectResponse(uint8_t *responseBuf)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
	struct shoreResponseDirect_s res;

	res.number = 0xFF;
 800cc10:	23ff      	movs	r3, #255	; 0xff
 800cc12:	723b      	strb	r3, [r7, #8]
	res.connection = 0xAA;
 800cc14:	23aa      	movs	r3, #170	; 0xaa
 800cc16:	727b      	strb	r3, [r7, #9]
	res.current = 0xBB;
 800cc18:	23bb      	movs	r3, #187	; 0xbb
 800cc1a:	817b      	strh	r3, [r7, #10]

    memcpy((void*)responseBuf, (void*)&res, SHORE_DIRECT_RESPONSE_LENGTH);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	461a      	mov	r2, r3
 800cc20:	f107 0308 	add.w	r3, r7, #8
 800cc24:	6818      	ldr	r0, [r3, #0]
 800cc26:	6010      	str	r0, [r2, #0]
 800cc28:	889b      	ldrh	r3, [r3, #4]
 800cc2a:	8093      	strh	r3, [r2, #4]

    AddCrc16Checksumm(responseBuf, SHORE_DIRECT_RESPONSE_LENGTH);
 800cc2c:	2106      	movs	r1, #6
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f7fe fd47 	bl	800b6c2 <AddCrc16Checksumm>
}
 800cc34:	bf00      	nop
 800cc36:	3710      	adds	r7, #16
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <ImuReceive>:
	}
	return 0;
}

void ImuReceive(uint8_t *ReceiveBuf)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
	 // Check sync byte
	 if ((ReceiveBuf[0] != 0xFA)&&(ReceiveBuf[1] != 0x01)&&(ReceiveBuf[2] != 0x08)&&(ReceiveBuf[3] != 0x01))
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	2bfa      	cmp	r3, #250	; 0xfa
 800cc4a:	d00e      	beq.n	800cc6a <ImuReceive+0x2e>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	3301      	adds	r3, #1
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	2b01      	cmp	r3, #1
 800cc54:	d009      	beq.n	800cc6a <ImuReceive+0x2e>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	3302      	adds	r3, #2
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	2b08      	cmp	r3, #8
 800cc5e:	d004      	beq.n	800cc6a <ImuReceive+0x2e>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	3303      	adds	r3, #3
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d152      	bne.n	800cd10 <ImuReceive+0xd4>
		 return;


	 rSensors.crc = (ReceiveBuf[28] << 8) | ReceiveBuf[29];
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	331c      	adds	r3, #28
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	021b      	lsls	r3, r3, #8
 800cc72:	b21a      	sxth	r2, r3
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	331d      	adds	r3, #29
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	b21b      	sxth	r3, r3
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	b21b      	sxth	r3, r3
 800cc80:	b29a      	uxth	r2, r3
 800cc82:	4b26      	ldr	r3, [pc, #152]	; (800cd1c <ImuReceive+0xe0>)
 800cc84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	 //crc length= IMU_RESPONSE_LENGTH - 1 sync byte - 2 bytes crc
	 uint16_t calculated_crc = calculateCRC(ReceiveBuf + 1, IMU_RESPONSE_LENGTH - 1 - 2);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	211b      	movs	r1, #27
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f000 f848 	bl	800cd24 <calculateCRC>
 800cc94:	4603      	mov	r3, r0
 800cc96:	81fb      	strh	r3, [r7, #14]
	 if (rSensors.crc != calculated_crc)
 800cc98:	4b20      	ldr	r3, [pc, #128]	; (800cd1c <ImuReceive+0xe0>)
 800cc9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800cc9e:	89fa      	ldrh	r2, [r7, #14]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d137      	bne.n	800cd14 <ImuReceive+0xd8>
		 return;



  	  memcpy(&rSensors.yaw, ReceiveBuf + 4, sizeof(rSensors.yaw));
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	3304      	adds	r3, #4
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	461a      	mov	r2, r3
 800ccac:	4b1b      	ldr	r3, [pc, #108]	; (800cd1c <ImuReceive+0xe0>)
 800ccae:	609a      	str	r2, [r3, #8]
  	  memcpy(&rSensors.pitch, ReceiveBuf + 8, sizeof(rSensors.pitch));
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	3308      	adds	r3, #8
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	4b18      	ldr	r3, [pc, #96]	; (800cd1c <ImuReceive+0xe0>)
 800ccba:	605a      	str	r2, [r3, #4]
  	  memcpy(&rSensors.roll, ReceiveBuf + 12, sizeof(rSensors.roll));
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	330c      	adds	r3, #12
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	4b15      	ldr	r3, [pc, #84]	; (800cd1c <ImuReceive+0xe0>)
 800ccc6:	601a      	str	r2, [r3, #0]

  	  memcpy(&rSensors.accelX, ReceiveBuf + 16, sizeof(rSensors.accelX));
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	3310      	adds	r3, #16
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	461a      	mov	r2, r3
 800ccd0:	4b12      	ldr	r3, [pc, #72]	; (800cd1c <ImuReceive+0xe0>)
 800ccd2:	629a      	str	r2, [r3, #40]	; 0x28
  	  memcpy(&rSensors.accelY, ReceiveBuf + 20, sizeof(rSensors.accelY));
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	3314      	adds	r3, #20
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	461a      	mov	r2, r3
 800ccdc:	4b0f      	ldr	r3, [pc, #60]	; (800cd1c <ImuReceive+0xe0>)
 800ccde:	62da      	str	r2, [r3, #44]	; 0x2c
  	  memcpy(&rSensors.accelZ, ReceiveBuf + 24, sizeof(rSensors.accelZ));
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	3318      	adds	r3, #24
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	461a      	mov	r2, r3
 800cce8:	4b0c      	ldr	r3, [pc, #48]	; (800cd1c <ImuReceive+0xe0>)
 800ccea:	631a      	str	r2, [r3, #48]	; 0x30



    rSensors.LastTick = xTaskGetTickCount();
 800ccec:	f7fc fae2 	bl	80092b4 <xTaskGetTickCount>
 800ccf0:	ee07 0a90 	vmov	s15, r0
 800ccf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccf8:	4b08      	ldr	r3, [pc, #32]	; (800cd1c <ImuReceive+0xe0>)
 800ccfa:	edc3 7a05 	vstr	s15, [r3, #20]


    ++uartBus[IMU_UART].successRxCounter;
 800ccfe:	4b08      	ldr	r3, [pc, #32]	; (800cd20 <ImuReceive+0xe4>)
 800cd00:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800cd04:	3301      	adds	r3, #1
 800cd06:	b29a      	uxth	r2, r3
 800cd08:	4b05      	ldr	r3, [pc, #20]	; (800cd20 <ImuReceive+0xe4>)
 800cd0a:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 800cd0e:	e002      	b.n	800cd16 <ImuReceive+0xda>
		 return;
 800cd10:	bf00      	nop
 800cd12:	e000      	b.n	800cd16 <ImuReceive+0xda>
		 return;
 800cd14:	bf00      	nop
}
 800cd16:	3710      	adds	r7, #16
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	20002598 	.word	0x20002598
 800cd20:	2000087c 	.word	0x2000087c

0800cd24 <calculateCRC>:

unsigned short calculateCRC(unsigned char data[], unsigned int length) {
 800cd24:	b480      	push	{r7}
 800cd26:	b085      	sub	sp, #20
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
    unsigned int i;
    unsigned short crc = 0;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < length; i++) {
 800cd32:	2300      	movs	r3, #0
 800cd34:	60fb      	str	r3, [r7, #12]
 800cd36:	e030      	b.n	800cd9a <calculateCRC+0x76>
        crc = (unsigned char)(crc >> 8) | (crc << 8);
 800cd38:	897b      	ldrh	r3, [r7, #10]
 800cd3a:	0a1b      	lsrs	r3, r3, #8
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	b21a      	sxth	r2, r3
 800cd42:	897b      	ldrh	r3, [r7, #10]
 800cd44:	021b      	lsls	r3, r3, #8
 800cd46:	b21b      	sxth	r3, r3
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	b21b      	sxth	r3, r3
 800cd4c:	817b      	strh	r3, [r7, #10]
        crc ^= data[i];
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	4413      	add	r3, r2
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	b29a      	uxth	r2, r3
 800cd58:	897b      	ldrh	r3, [r7, #10]
 800cd5a:	4053      	eors	r3, r2
 800cd5c:	817b      	strh	r3, [r7, #10]
        crc ^= (unsigned char)(crc & 0xff) >> 4;
 800cd5e:	897b      	ldrh	r3, [r7, #10]
 800cd60:	b2db      	uxtb	r3, r3
 800cd62:	091b      	lsrs	r3, r3, #4
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	b29a      	uxth	r2, r3
 800cd68:	897b      	ldrh	r3, [r7, #10]
 800cd6a:	4053      	eors	r3, r2
 800cd6c:	817b      	strh	r3, [r7, #10]
        crc ^= crc << 12;
 800cd6e:	897b      	ldrh	r3, [r7, #10]
 800cd70:	031b      	lsls	r3, r3, #12
 800cd72:	b21a      	sxth	r2, r3
 800cd74:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cd78:	4053      	eors	r3, r2
 800cd7a:	b21b      	sxth	r3, r3
 800cd7c:	817b      	strh	r3, [r7, #10]
        crc ^= (crc & 0x00ff) << 5;
 800cd7e:	897b      	ldrh	r3, [r7, #10]
 800cd80:	015b      	lsls	r3, r3, #5
 800cd82:	b21b      	sxth	r3, r3
 800cd84:	f403 53ff 	and.w	r3, r3, #8160	; 0x1fe0
 800cd88:	b21a      	sxth	r2, r3
 800cd8a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cd8e:	4053      	eors	r3, r2
 800cd90:	b21b      	sxth	r3, r3
 800cd92:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < length; i++) {
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	3301      	adds	r3, #1
 800cd98:	60fb      	str	r3, [r7, #12]
 800cd9a:	68fa      	ldr	r2, [r7, #12]
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d3ca      	bcc.n	800cd38 <calculateCRC+0x14>
    }
    return crc;
 800cda2:	897b      	ldrh	r3, [r7, #10]
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3714      	adds	r7, #20
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800cdb6:	4b20      	ldr	r3, [pc, #128]	; (800ce38 <MX_DMA_Init+0x88>)
 800cdb8:	695b      	ldr	r3, [r3, #20]
 800cdba:	4a1f      	ldr	r2, [pc, #124]	; (800ce38 <MX_DMA_Init+0x88>)
 800cdbc:	f043 0301 	orr.w	r3, r3, #1
 800cdc0:	6153      	str	r3, [r2, #20]
 800cdc2:	4b1d      	ldr	r3, [pc, #116]	; (800ce38 <MX_DMA_Init+0x88>)
 800cdc4:	695b      	ldr	r3, [r3, #20]
 800cdc6:	f003 0301 	and.w	r3, r3, #1
 800cdca:	607b      	str	r3, [r7, #4]
 800cdcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800cdce:	2200      	movs	r2, #0
 800cdd0:	2105      	movs	r1, #5
 800cdd2:	200c      	movs	r0, #12
 800cdd4:	f7f4 fa04 	bl	80011e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800cdd8:	200c      	movs	r0, #12
 800cdda:	f7f4 fa1d 	bl	8001218 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800cdde:	2200      	movs	r2, #0
 800cde0:	2105      	movs	r1, #5
 800cde2:	200d      	movs	r0, #13
 800cde4:	f7f4 f9fc 	bl	80011e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800cde8:	200d      	movs	r0, #13
 800cdea:	f7f4 fa15 	bl	8001218 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800cdee:	2200      	movs	r2, #0
 800cdf0:	2105      	movs	r1, #5
 800cdf2:	200e      	movs	r0, #14
 800cdf4:	f7f4 f9f4 	bl	80011e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800cdf8:	200e      	movs	r0, #14
 800cdfa:	f7f4 fa0d 	bl	8001218 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800cdfe:	2200      	movs	r2, #0
 800ce00:	2105      	movs	r1, #5
 800ce02:	200f      	movs	r0, #15
 800ce04:	f7f4 f9ec 	bl	80011e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800ce08:	200f      	movs	r0, #15
 800ce0a:	f7f4 fa05 	bl	8001218 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800ce0e:	2200      	movs	r2, #0
 800ce10:	2105      	movs	r1, #5
 800ce12:	2010      	movs	r0, #16
 800ce14:	f7f4 f9e4 	bl	80011e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800ce18:	2010      	movs	r0, #16
 800ce1a:	f7f4 f9fd 	bl	8001218 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800ce1e:	2200      	movs	r2, #0
 800ce20:	2105      	movs	r1, #5
 800ce22:	2011      	movs	r0, #17
 800ce24:	f7f4 f9dc 	bl	80011e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800ce28:	2011      	movs	r0, #17
 800ce2a:	f7f4 f9f5 	bl	8001218 <HAL_NVIC_EnableIRQ>

}
 800ce2e:	bf00      	nop
 800ce30:	3708      	adds	r7, #8
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	40021000 	.word	0x40021000

0800ce3c <flashReadSettings>:
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
	HAL_FLASH_Lock();
}

void flashReadSettings(struct flashConfiguration_s *config)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b087      	sub	sp, #28
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
	uint32_t *source_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 800ce44:	4b0e      	ldr	r3, [pc, #56]	; (800ce80 <flashReadSettings+0x44>)
 800ce46:	617b      	str	r3, [r7, #20]
	uint32_t *dest_addr = (void *)config;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	613b      	str	r3, [r7, #16]

	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	81fb      	strh	r3, [r7, #14]
 800ce50:	e00c      	b.n	800ce6c <flashReadSettings+0x30>
		*dest_addr = *(__IO uint32_t*)source_addr;
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	601a      	str	r2, [r3, #0]
		source_addr++;
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	3304      	adds	r3, #4
 800ce5e:	617b      	str	r3, [r7, #20]
		dest_addr++;
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	3304      	adds	r3, #4
 800ce64:	613b      	str	r3, [r7, #16]
	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 800ce66:	89fb      	ldrh	r3, [r7, #14]
 800ce68:	3301      	adds	r3, #1
 800ce6a:	81fb      	strh	r3, [r7, #14]
 800ce6c:	89fb      	ldrh	r3, [r7, #14]
 800ce6e:	2b89      	cmp	r3, #137	; 0x89
 800ce70:	d9ef      	bls.n	800ce52 <flashReadSettings+0x16>
	}
}
 800ce72:	bf00      	nop
 800ce74:	bf00      	nop
 800ce76:	371c      	adds	r7, #28
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr
 800ce80:	0803f800 	.word	0x0803f800

0800ce84 <flashWriteSettings>:

void flashWriteSettings(struct flashConfiguration_s *config)
{
 800ce84:	b5b0      	push	{r4, r5, r7, lr}
 800ce86:	b08a      	sub	sp, #40	; 0x28
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
	// Write settings
	HAL_FLASH_Unlock();
 800ce8c:	f7f4 fc7a 	bl	8001784 <HAL_FLASH_Unlock>

	// erase page
	FLASH_EraseInitTypeDef erase_conf;
	erase_conf.TypeErase = FLASH_TYPEERASE_PAGES; // erase only 1 page
 800ce90:	2300      	movs	r3, #0
 800ce92:	613b      	str	r3, [r7, #16]
	erase_conf.PageAddress = (uint32_t)CONFIG_PAGE_ADDR;
 800ce94:	4b17      	ldr	r3, [pc, #92]	; (800cef4 <flashWriteSettings+0x70>)
 800ce96:	617b      	str	r3, [r7, #20]
	erase_conf.NbPages = 1;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	61bb      	str	r3, [r7, #24]

	uint32_t page_error;
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
 800ce9c:	f107 020c 	add.w	r2, r7, #12
 800cea0:	f107 0310 	add.w	r3, r7, #16
 800cea4:	4611      	mov	r1, r2
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7f4 fd30 	bl	800190c <HAL_FLASHEx_Erase>

	// write page
	uint32_t *source_addr = (void *)config;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t *dest_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 800ceb0:	4b10      	ldr	r3, [pc, #64]	; (800cef4 <flashWriteSettings+0x70>)
 800ceb2:	623b      	str	r3, [r7, #32]
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	77fb      	strb	r3, [r7, #31]
 800ceb8:	e013      	b.n	800cee2 <flashWriteSettings+0x5e>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)dest_addr, *source_addr);
 800ceba:	6a39      	ldr	r1, [r7, #32]
 800cebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2200      	movs	r2, #0
 800cec2:	461c      	mov	r4, r3
 800cec4:	4615      	mov	r5, r2
 800cec6:	4622      	mov	r2, r4
 800cec8:	462b      	mov	r3, r5
 800ceca:	2002      	movs	r0, #2
 800cecc:	f7f4 fbea 	bl	80016a4 <HAL_FLASH_Program>
		source_addr++;
 800ced0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced2:	3304      	adds	r3, #4
 800ced4:	627b      	str	r3, [r7, #36]	; 0x24
		dest_addr++;
 800ced6:	6a3b      	ldr	r3, [r7, #32]
 800ced8:	3304      	adds	r3, #4
 800ceda:	623b      	str	r3, [r7, #32]
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 800cedc:	7ffb      	ldrb	r3, [r7, #31]
 800cede:	3301      	adds	r3, #1
 800cee0:	77fb      	strb	r3, [r7, #31]
 800cee2:	7ffb      	ldrb	r3, [r7, #31]
 800cee4:	2b89      	cmp	r3, #137	; 0x89
 800cee6:	d9e8      	bls.n	800ceba <flashWriteSettings+0x36>
	}

	HAL_FLASH_Lock();
 800cee8:	f7f4 fc72 	bl	80017d0 <HAL_FLASH_Lock>
}
 800ceec:	bf00      	nop
 800ceee:	3728      	adds	r7, #40	; 0x28
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bdb0      	pop	{r4, r5, r7, pc}
 800cef4:	0803f800 	.word	0x0803f800

0800cef8 <flashFillStructure>:

void flashFillStructure(struct flashConfiguration_s *config)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b085      	sub	sp, #20
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
	config->writeFlag = 0xAA;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	22aa      	movs	r2, #170	; 0xaa
 800cf04:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800cf06:	2300      	movs	r3, #0
 800cf08:	73fb      	strb	r3, [r7, #15]
 800cf0a:	e154      	b.n	800d1b6 <flashFillStructure+0x2be>
		config->stabConstants[i].pJoyUnitCast = rStabConstants[i].pJoyUnitCast;
 800cf0c:	7bf9      	ldrb	r1, [r7, #15]
 800cf0e:	7bfa      	ldrb	r2, [r7, #15]
 800cf10:	48ae      	ldr	r0, [pc, #696]	; (800d1cc <flashFillStructure+0x2d4>)
 800cf12:	460b      	mov	r3, r1
 800cf14:	00db      	lsls	r3, r3, #3
 800cf16:	440b      	add	r3, r1
 800cf18:	00db      	lsls	r3, r3, #3
 800cf1a:	4403      	add	r3, r0
 800cf1c:	3304      	adds	r3, #4
 800cf1e:	6818      	ldr	r0, [r3, #0]
 800cf20:	6879      	ldr	r1, [r7, #4]
 800cf22:	4613      	mov	r3, r2
 800cf24:	011b      	lsls	r3, r3, #4
 800cf26:	4413      	add	r3, r2
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	440b      	add	r3, r1
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	4602      	mov	r2, r0
 800cf30:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pSpeedDyn = rStabConstants[i].pSpeedDyn;
 800cf32:	7bf9      	ldrb	r1, [r7, #15]
 800cf34:	7bfa      	ldrb	r2, [r7, #15]
 800cf36:	48a5      	ldr	r0, [pc, #660]	; (800d1cc <flashFillStructure+0x2d4>)
 800cf38:	460b      	mov	r3, r1
 800cf3a:	00db      	lsls	r3, r3, #3
 800cf3c:	440b      	add	r3, r1
 800cf3e:	00db      	lsls	r3, r3, #3
 800cf40:	4403      	add	r3, r0
 800cf42:	3308      	adds	r3, #8
 800cf44:	6818      	ldr	r0, [r3, #0]
 800cf46:	6879      	ldr	r1, [r7, #4]
 800cf48:	4613      	mov	r3, r2
 800cf4a:	011b      	lsls	r3, r3, #4
 800cf4c:	4413      	add	r3, r2
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	440b      	add	r3, r1
 800cf52:	3305      	adds	r3, #5
 800cf54:	4602      	mov	r2, r0
 800cf56:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pErrGain = rStabConstants[i].pErrGain;
 800cf58:	7bf9      	ldrb	r1, [r7, #15]
 800cf5a:	7bfa      	ldrb	r2, [r7, #15]
 800cf5c:	489b      	ldr	r0, [pc, #620]	; (800d1cc <flashFillStructure+0x2d4>)
 800cf5e:	460b      	mov	r3, r1
 800cf60:	00db      	lsls	r3, r3, #3
 800cf62:	440b      	add	r3, r1
 800cf64:	00db      	lsls	r3, r3, #3
 800cf66:	4403      	add	r3, r0
 800cf68:	330c      	adds	r3, #12
 800cf6a:	6818      	ldr	r0, [r3, #0]
 800cf6c:	6879      	ldr	r1, [r7, #4]
 800cf6e:	4613      	mov	r3, r2
 800cf70:	011b      	lsls	r3, r3, #4
 800cf72:	4413      	add	r3, r2
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	440b      	add	r3, r1
 800cf78:	3308      	adds	r3, #8
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T1 = rStabConstants[i].aFilter[POS_FILTER].T;
 800cf80:	7bf9      	ldrb	r1, [r7, #15]
 800cf82:	7bfa      	ldrb	r2, [r7, #15]
 800cf84:	4891      	ldr	r0, [pc, #580]	; (800d1cc <flashFillStructure+0x2d4>)
 800cf86:	460b      	mov	r3, r1
 800cf88:	00db      	lsls	r3, r3, #3
 800cf8a:	440b      	add	r3, r1
 800cf8c:	00db      	lsls	r3, r3, #3
 800cf8e:	4403      	add	r3, r0
 800cf90:	3310      	adds	r3, #16
 800cf92:	6818      	ldr	r0, [r3, #0]
 800cf94:	6879      	ldr	r1, [r7, #4]
 800cf96:	4613      	mov	r3, r2
 800cf98:	011b      	lsls	r3, r3, #4
 800cf9a:	4413      	add	r3, r2
 800cf9c:	009b      	lsls	r3, r3, #2
 800cf9e:	440b      	add	r3, r1
 800cfa0:	3308      	adds	r3, #8
 800cfa2:	3305      	adds	r3, #5
 800cfa4:	4602      	mov	r2, r0
 800cfa6:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T2 = rStabConstants[i].aFilter[SPEED_FILTER].T;
 800cfa8:	7bf9      	ldrb	r1, [r7, #15]
 800cfaa:	7bfa      	ldrb	r2, [r7, #15]
 800cfac:	4887      	ldr	r0, [pc, #540]	; (800d1cc <flashFillStructure+0x2d4>)
 800cfae:	460b      	mov	r3, r1
 800cfb0:	00db      	lsls	r3, r3, #3
 800cfb2:	440b      	add	r3, r1
 800cfb4:	00db      	lsls	r3, r3, #3
 800cfb6:	4403      	add	r3, r0
 800cfb8:	3318      	adds	r3, #24
 800cfba:	6818      	ldr	r0, [r3, #0]
 800cfbc:	6879      	ldr	r1, [r7, #4]
 800cfbe:	4613      	mov	r3, r2
 800cfc0:	011b      	lsls	r3, r3, #4
 800cfc2:	4413      	add	r3, r2
 800cfc4:	009b      	lsls	r3, r3, #2
 800cfc6:	440b      	add	r3, r1
 800cfc8:	3310      	adds	r3, #16
 800cfca:	3301      	adds	r3, #1
 800cfcc:	4602      	mov	r2, r0
 800cfce:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K1 = rStabConstants[i].aFilter[POS_FILTER].K;
 800cfd0:	7bf9      	ldrb	r1, [r7, #15]
 800cfd2:	7bfa      	ldrb	r2, [r7, #15]
 800cfd4:	487d      	ldr	r0, [pc, #500]	; (800d1cc <flashFillStructure+0x2d4>)
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	00db      	lsls	r3, r3, #3
 800cfda:	440b      	add	r3, r1
 800cfdc:	00db      	lsls	r3, r3, #3
 800cfde:	4403      	add	r3, r0
 800cfe0:	3314      	adds	r3, #20
 800cfe2:	6818      	ldr	r0, [r3, #0]
 800cfe4:	6879      	ldr	r1, [r7, #4]
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	011b      	lsls	r3, r3, #4
 800cfea:	4413      	add	r3, r2
 800cfec:	009b      	lsls	r3, r3, #2
 800cfee:	440b      	add	r3, r1
 800cff0:	3310      	adds	r3, #16
 800cff2:	3305      	adds	r3, #5
 800cff4:	4602      	mov	r2, r0
 800cff6:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K2 = rStabConstants[i].aFilter[SPEED_FILTER].K;
 800cff8:	7bf9      	ldrb	r1, [r7, #15]
 800cffa:	7bfa      	ldrb	r2, [r7, #15]
 800cffc:	4873      	ldr	r0, [pc, #460]	; (800d1cc <flashFillStructure+0x2d4>)
 800cffe:	460b      	mov	r3, r1
 800d000:	00db      	lsls	r3, r3, #3
 800d002:	440b      	add	r3, r1
 800d004:	00db      	lsls	r3, r3, #3
 800d006:	4403      	add	r3, r0
 800d008:	331c      	adds	r3, #28
 800d00a:	6818      	ldr	r0, [r3, #0]
 800d00c:	6879      	ldr	r1, [r7, #4]
 800d00e:	4613      	mov	r3, r2
 800d010:	011b      	lsls	r3, r3, #4
 800d012:	4413      	add	r3, r2
 800d014:	009b      	lsls	r3, r3, #2
 800d016:	440b      	add	r3, r1
 800d018:	3318      	adds	r3, #24
 800d01a:	3301      	adds	r3, #1
 800d01c:	4602      	mov	r2, r0
 800d01e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_pGain = rStabConstants[i].pid.pGain;
 800d020:	7bf9      	ldrb	r1, [r7, #15]
 800d022:	7bfa      	ldrb	r2, [r7, #15]
 800d024:	4869      	ldr	r0, [pc, #420]	; (800d1cc <flashFillStructure+0x2d4>)
 800d026:	460b      	mov	r3, r1
 800d028:	00db      	lsls	r3, r3, #3
 800d02a:	440b      	add	r3, r1
 800d02c:	00db      	lsls	r3, r3, #3
 800d02e:	4403      	add	r3, r0
 800d030:	3328      	adds	r3, #40	; 0x28
 800d032:	6818      	ldr	r0, [r3, #0]
 800d034:	6879      	ldr	r1, [r7, #4]
 800d036:	4613      	mov	r3, r2
 800d038:	011b      	lsls	r3, r3, #4
 800d03a:	4413      	add	r3, r2
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	440b      	add	r3, r1
 800d040:	3318      	adds	r3, #24
 800d042:	3305      	adds	r3, #5
 800d044:	4602      	mov	r2, r0
 800d046:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iGain = rStabConstants[i].pid.iGain;
 800d048:	7bf9      	ldrb	r1, [r7, #15]
 800d04a:	7bfa      	ldrb	r2, [r7, #15]
 800d04c:	485f      	ldr	r0, [pc, #380]	; (800d1cc <flashFillStructure+0x2d4>)
 800d04e:	460b      	mov	r3, r1
 800d050:	00db      	lsls	r3, r3, #3
 800d052:	440b      	add	r3, r1
 800d054:	00db      	lsls	r3, r3, #3
 800d056:	4403      	add	r3, r0
 800d058:	332c      	adds	r3, #44	; 0x2c
 800d05a:	6818      	ldr	r0, [r3, #0]
 800d05c:	6879      	ldr	r1, [r7, #4]
 800d05e:	4613      	mov	r3, r2
 800d060:	011b      	lsls	r3, r3, #4
 800d062:	4413      	add	r3, r2
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	440b      	add	r3, r1
 800d068:	3320      	adds	r3, #32
 800d06a:	3301      	adds	r3, #1
 800d06c:	4602      	mov	r2, r0
 800d06e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMax = rStabConstants[i].pid.iMax;
 800d070:	7bf9      	ldrb	r1, [r7, #15]
 800d072:	7bfa      	ldrb	r2, [r7, #15]
 800d074:	4855      	ldr	r0, [pc, #340]	; (800d1cc <flashFillStructure+0x2d4>)
 800d076:	460b      	mov	r3, r1
 800d078:	00db      	lsls	r3, r3, #3
 800d07a:	440b      	add	r3, r1
 800d07c:	00db      	lsls	r3, r3, #3
 800d07e:	4403      	add	r3, r0
 800d080:	3330      	adds	r3, #48	; 0x30
 800d082:	6818      	ldr	r0, [r3, #0]
 800d084:	6879      	ldr	r1, [r7, #4]
 800d086:	4613      	mov	r3, r2
 800d088:	011b      	lsls	r3, r3, #4
 800d08a:	4413      	add	r3, r2
 800d08c:	009b      	lsls	r3, r3, #2
 800d08e:	440b      	add	r3, r1
 800d090:	3320      	adds	r3, #32
 800d092:	3305      	adds	r3, #5
 800d094:	4602      	mov	r2, r0
 800d096:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMin = rStabConstants[i].pid.iMin;
 800d098:	7bf9      	ldrb	r1, [r7, #15]
 800d09a:	7bfa      	ldrb	r2, [r7, #15]
 800d09c:	484b      	ldr	r0, [pc, #300]	; (800d1cc <flashFillStructure+0x2d4>)
 800d09e:	460b      	mov	r3, r1
 800d0a0:	00db      	lsls	r3, r3, #3
 800d0a2:	440b      	add	r3, r1
 800d0a4:	00db      	lsls	r3, r3, #3
 800d0a6:	4403      	add	r3, r0
 800d0a8:	3334      	adds	r3, #52	; 0x34
 800d0aa:	6818      	ldr	r0, [r3, #0]
 800d0ac:	6879      	ldr	r1, [r7, #4]
 800d0ae:	4613      	mov	r3, r2
 800d0b0:	011b      	lsls	r3, r3, #4
 800d0b2:	4413      	add	r3, r2
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	440b      	add	r3, r1
 800d0b8:	3328      	adds	r3, #40	; 0x28
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	4602      	mov	r2, r0
 800d0be:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMin = rStabConstants[i].pThrustersMin;
 800d0c0:	7bf9      	ldrb	r1, [r7, #15]
 800d0c2:	7bfa      	ldrb	r2, [r7, #15]
 800d0c4:	4841      	ldr	r0, [pc, #260]	; (800d1cc <flashFillStructure+0x2d4>)
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	00db      	lsls	r3, r3, #3
 800d0ca:	440b      	add	r3, r1
 800d0cc:	00db      	lsls	r3, r3, #3
 800d0ce:	4403      	add	r3, r0
 800d0d0:	3338      	adds	r3, #56	; 0x38
 800d0d2:	6818      	ldr	r0, [r3, #0]
 800d0d4:	6879      	ldr	r1, [r7, #4]
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	011b      	lsls	r3, r3, #4
 800d0da:	4413      	add	r3, r2
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	440b      	add	r3, r1
 800d0e0:	3328      	adds	r3, #40	; 0x28
 800d0e2:	3305      	adds	r3, #5
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMax = rStabConstants[i].pThrustersMax;
 800d0e8:	7bf9      	ldrb	r1, [r7, #15]
 800d0ea:	7bfa      	ldrb	r2, [r7, #15]
 800d0ec:	4837      	ldr	r0, [pc, #220]	; (800d1cc <flashFillStructure+0x2d4>)
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	00db      	lsls	r3, r3, #3
 800d0f2:	440b      	add	r3, r1
 800d0f4:	00db      	lsls	r3, r3, #3
 800d0f6:	4403      	add	r3, r0
 800d0f8:	333c      	adds	r3, #60	; 0x3c
 800d0fa:	6818      	ldr	r0, [r3, #0]
 800d0fc:	6879      	ldr	r1, [r7, #4]
 800d0fe:	4613      	mov	r3, r2
 800d100:	011b      	lsls	r3, r3, #4
 800d102:	4413      	add	r3, r2
 800d104:	009b      	lsls	r3, r3, #2
 800d106:	440b      	add	r3, r1
 800d108:	3330      	adds	r3, #48	; 0x30
 800d10a:	3301      	adds	r3, #1
 800d10c:	4602      	mov	r2, r0
 800d10e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_T = rStabConstants[i].aFilter[THRUSTERS_FILTER].T;
 800d110:	7bf9      	ldrb	r1, [r7, #15]
 800d112:	7bfa      	ldrb	r2, [r7, #15]
 800d114:	482d      	ldr	r0, [pc, #180]	; (800d1cc <flashFillStructure+0x2d4>)
 800d116:	460b      	mov	r3, r1
 800d118:	00db      	lsls	r3, r3, #3
 800d11a:	440b      	add	r3, r1
 800d11c:	00db      	lsls	r3, r3, #3
 800d11e:	4403      	add	r3, r0
 800d120:	3320      	adds	r3, #32
 800d122:	6818      	ldr	r0, [r3, #0]
 800d124:	6879      	ldr	r1, [r7, #4]
 800d126:	4613      	mov	r3, r2
 800d128:	011b      	lsls	r3, r3, #4
 800d12a:	4413      	add	r3, r2
 800d12c:	009b      	lsls	r3, r3, #2
 800d12e:	440b      	add	r3, r1
 800d130:	3330      	adds	r3, #48	; 0x30
 800d132:	3305      	adds	r3, #5
 800d134:	4602      	mov	r2, r0
 800d136:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_K = rStabConstants[i].aFilter[THRUSTERS_FILTER].K;
 800d138:	7bf9      	ldrb	r1, [r7, #15]
 800d13a:	7bfa      	ldrb	r2, [r7, #15]
 800d13c:	4823      	ldr	r0, [pc, #140]	; (800d1cc <flashFillStructure+0x2d4>)
 800d13e:	460b      	mov	r3, r1
 800d140:	00db      	lsls	r3, r3, #3
 800d142:	440b      	add	r3, r1
 800d144:	00db      	lsls	r3, r3, #3
 800d146:	4403      	add	r3, r0
 800d148:	3324      	adds	r3, #36	; 0x24
 800d14a:	6818      	ldr	r0, [r3, #0]
 800d14c:	6879      	ldr	r1, [r7, #4]
 800d14e:	4613      	mov	r3, r2
 800d150:	011b      	lsls	r3, r3, #4
 800d152:	4413      	add	r3, r2
 800d154:	009b      	lsls	r3, r3, #2
 800d156:	440b      	add	r3, r1
 800d158:	3338      	adds	r3, #56	; 0x38
 800d15a:	3301      	adds	r3, #1
 800d15c:	4602      	mov	r2, r0
 800d15e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMax = rStabConstants[i].sOutSummatorMax;
 800d160:	7bf9      	ldrb	r1, [r7, #15]
 800d162:	7bfa      	ldrb	r2, [r7, #15]
 800d164:	4819      	ldr	r0, [pc, #100]	; (800d1cc <flashFillStructure+0x2d4>)
 800d166:	460b      	mov	r3, r1
 800d168:	00db      	lsls	r3, r3, #3
 800d16a:	440b      	add	r3, r1
 800d16c:	00db      	lsls	r3, r3, #3
 800d16e:	4403      	add	r3, r0
 800d170:	3340      	adds	r3, #64	; 0x40
 800d172:	6818      	ldr	r0, [r3, #0]
 800d174:	6879      	ldr	r1, [r7, #4]
 800d176:	4613      	mov	r3, r2
 800d178:	011b      	lsls	r3, r3, #4
 800d17a:	4413      	add	r3, r2
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	440b      	add	r3, r1
 800d180:	3338      	adds	r3, #56	; 0x38
 800d182:	3305      	adds	r3, #5
 800d184:	4602      	mov	r2, r0
 800d186:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMin = rStabConstants[i].sOutSummatorMin;
 800d188:	7bf9      	ldrb	r1, [r7, #15]
 800d18a:	7bfa      	ldrb	r2, [r7, #15]
 800d18c:	480f      	ldr	r0, [pc, #60]	; (800d1cc <flashFillStructure+0x2d4>)
 800d18e:	460b      	mov	r3, r1
 800d190:	00db      	lsls	r3, r3, #3
 800d192:	440b      	add	r3, r1
 800d194:	00db      	lsls	r3, r3, #3
 800d196:	4403      	add	r3, r0
 800d198:	3344      	adds	r3, #68	; 0x44
 800d19a:	6818      	ldr	r0, [r3, #0]
 800d19c:	6879      	ldr	r1, [r7, #4]
 800d19e:	4613      	mov	r3, r2
 800d1a0:	011b      	lsls	r3, r3, #4
 800d1a2:	4413      	add	r3, r2
 800d1a4:	009b      	lsls	r3, r3, #2
 800d1a6:	440b      	add	r3, r1
 800d1a8:	3340      	adds	r3, #64	; 0x40
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800d1b0:	7bfb      	ldrb	r3, [r7, #15]
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	73fb      	strb	r3, [r7, #15]
 800d1b6:	7bfb      	ldrb	r3, [r7, #15]
 800d1b8:	2b05      	cmp	r3, #5
 800d1ba:	f67f aea7 	bls.w	800cf0c <flashFillStructure+0x14>
//		config->thrusters[i].kBackward = rThrusters[i].kBackward;
//		config->thrusters[i].sForward = rThrusters[i].sForward;
//		config->thrusters[i].sBackward = rThrusters[i].sBackward;
//		config->thrusters[i].inverse = rThrusters[i].inverse;
//	}
}
 800d1be:	bf00      	nop
 800d1c0:	bf00      	nop
 800d1c2:	3714      	adds	r7, #20
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr
 800d1cc:	20002660 	.word	0x20002660

0800d1d0 <flashReadStructure>:

void flashReadStructure(struct flashConfiguration_s *config)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b085      	sub	sp, #20
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800d1d8:	2300      	movs	r3, #0
 800d1da:	73fb      	strb	r3, [r7, #15]
 800d1dc:	e165      	b.n	800d4aa <flashReadStructure+0x2da>
		rStabConstants[i].pJoyUnitCast = config->stabConstants[i].pJoyUnitCast;
 800d1de:	7bfa      	ldrb	r2, [r7, #15]
 800d1e0:	7bf9      	ldrb	r1, [r7, #15]
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	4613      	mov	r3, r2
 800d1e6:	011b      	lsls	r3, r3, #4
 800d1e8:	4413      	add	r3, r2
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	4403      	add	r3, r0
 800d1ee:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800d1f2:	4613      	mov	r3, r2
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	48b7      	ldr	r0, [pc, #732]	; (800d4d4 <flashReadStructure+0x304>)
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	00db      	lsls	r3, r3, #3
 800d1fc:	440b      	add	r3, r1
 800d1fe:	00db      	lsls	r3, r3, #3
 800d200:	4403      	add	r3, r0
 800d202:	3304      	adds	r3, #4
 800d204:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pSpeedDyn = config->stabConstants[i].pSpeedDyn;
 800d206:	7bfa      	ldrb	r2, [r7, #15]
 800d208:	7bf9      	ldrb	r1, [r7, #15]
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	4613      	mov	r3, r2
 800d20e:	011b      	lsls	r3, r3, #4
 800d210:	4413      	add	r3, r2
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	4403      	add	r3, r0
 800d216:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800d21a:	4613      	mov	r3, r2
 800d21c:	461a      	mov	r2, r3
 800d21e:	48ad      	ldr	r0, [pc, #692]	; (800d4d4 <flashReadStructure+0x304>)
 800d220:	460b      	mov	r3, r1
 800d222:	00db      	lsls	r3, r3, #3
 800d224:	440b      	add	r3, r1
 800d226:	00db      	lsls	r3, r3, #3
 800d228:	4403      	add	r3, r0
 800d22a:	3308      	adds	r3, #8
 800d22c:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pErrGain = config->stabConstants[i].pErrGain;
 800d22e:	7bfa      	ldrb	r2, [r7, #15]
 800d230:	7bf9      	ldrb	r1, [r7, #15]
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	4613      	mov	r3, r2
 800d236:	011b      	lsls	r3, r3, #4
 800d238:	4413      	add	r3, r2
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	4403      	add	r3, r0
 800d23e:	3308      	adds	r3, #8
 800d240:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800d244:	4613      	mov	r3, r2
 800d246:	461a      	mov	r2, r3
 800d248:	48a2      	ldr	r0, [pc, #648]	; (800d4d4 <flashReadStructure+0x304>)
 800d24a:	460b      	mov	r3, r1
 800d24c:	00db      	lsls	r3, r3, #3
 800d24e:	440b      	add	r3, r1
 800d250:	00db      	lsls	r3, r3, #3
 800d252:	4403      	add	r3, r0
 800d254:	330c      	adds	r3, #12
 800d256:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[POS_FILTER].T = config->stabConstants[i].aFilter_T1;
 800d258:	7bfa      	ldrb	r2, [r7, #15]
 800d25a:	7bf9      	ldrb	r1, [r7, #15]
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	4613      	mov	r3, r2
 800d260:	011b      	lsls	r3, r3, #4
 800d262:	4413      	add	r3, r2
 800d264:	009b      	lsls	r3, r3, #2
 800d266:	4403      	add	r3, r0
 800d268:	3308      	adds	r3, #8
 800d26a:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800d26e:	4613      	mov	r3, r2
 800d270:	461a      	mov	r2, r3
 800d272:	4898      	ldr	r0, [pc, #608]	; (800d4d4 <flashReadStructure+0x304>)
 800d274:	460b      	mov	r3, r1
 800d276:	00db      	lsls	r3, r3, #3
 800d278:	440b      	add	r3, r1
 800d27a:	00db      	lsls	r3, r3, #3
 800d27c:	4403      	add	r3, r0
 800d27e:	3310      	adds	r3, #16
 800d280:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].T = config->stabConstants[i].aFilter_T2;
 800d282:	7bfa      	ldrb	r2, [r7, #15]
 800d284:	7bf9      	ldrb	r1, [r7, #15]
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	4613      	mov	r3, r2
 800d28a:	011b      	lsls	r3, r3, #4
 800d28c:	4413      	add	r3, r2
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	4403      	add	r3, r0
 800d292:	3310      	adds	r3, #16
 800d294:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800d298:	4613      	mov	r3, r2
 800d29a:	461a      	mov	r2, r3
 800d29c:	488d      	ldr	r0, [pc, #564]	; (800d4d4 <flashReadStructure+0x304>)
 800d29e:	460b      	mov	r3, r1
 800d2a0:	00db      	lsls	r3, r3, #3
 800d2a2:	440b      	add	r3, r1
 800d2a4:	00db      	lsls	r3, r3, #3
 800d2a6:	4403      	add	r3, r0
 800d2a8:	3318      	adds	r3, #24
 800d2aa:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[POS_FILTER].K = config->stabConstants[i].aFilter_K1;
 800d2ac:	7bfa      	ldrb	r2, [r7, #15]
 800d2ae:	7bf9      	ldrb	r1, [r7, #15]
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	4613      	mov	r3, r2
 800d2b4:	011b      	lsls	r3, r3, #4
 800d2b6:	4413      	add	r3, r2
 800d2b8:	009b      	lsls	r3, r3, #2
 800d2ba:	4403      	add	r3, r0
 800d2bc:	3310      	adds	r3, #16
 800d2be:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	4883      	ldr	r0, [pc, #524]	; (800d4d4 <flashReadStructure+0x304>)
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	00db      	lsls	r3, r3, #3
 800d2cc:	440b      	add	r3, r1
 800d2ce:	00db      	lsls	r3, r3, #3
 800d2d0:	4403      	add	r3, r0
 800d2d2:	3314      	adds	r3, #20
 800d2d4:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].K = config->stabConstants[i].aFilter_K2;
 800d2d6:	7bfa      	ldrb	r2, [r7, #15]
 800d2d8:	7bf9      	ldrb	r1, [r7, #15]
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	4613      	mov	r3, r2
 800d2de:	011b      	lsls	r3, r3, #4
 800d2e0:	4413      	add	r3, r2
 800d2e2:	009b      	lsls	r3, r3, #2
 800d2e4:	4403      	add	r3, r0
 800d2e6:	3318      	adds	r3, #24
 800d2e8:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800d2ec:	4613      	mov	r3, r2
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	4878      	ldr	r0, [pc, #480]	; (800d4d4 <flashReadStructure+0x304>)
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	00db      	lsls	r3, r3, #3
 800d2f6:	440b      	add	r3, r1
 800d2f8:	00db      	lsls	r3, r3, #3
 800d2fa:	4403      	add	r3, r0
 800d2fc:	331c      	adds	r3, #28
 800d2fe:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.pGain = config->stabConstants[i].pid_pGain;
 800d300:	7bfa      	ldrb	r2, [r7, #15]
 800d302:	7bf9      	ldrb	r1, [r7, #15]
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	4613      	mov	r3, r2
 800d308:	011b      	lsls	r3, r3, #4
 800d30a:	4413      	add	r3, r2
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	4403      	add	r3, r0
 800d310:	3318      	adds	r3, #24
 800d312:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800d316:	4613      	mov	r3, r2
 800d318:	461a      	mov	r2, r3
 800d31a:	486e      	ldr	r0, [pc, #440]	; (800d4d4 <flashReadStructure+0x304>)
 800d31c:	460b      	mov	r3, r1
 800d31e:	00db      	lsls	r3, r3, #3
 800d320:	440b      	add	r3, r1
 800d322:	00db      	lsls	r3, r3, #3
 800d324:	4403      	add	r3, r0
 800d326:	3328      	adds	r3, #40	; 0x28
 800d328:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.iGain = config->stabConstants[i].pid_iGain;
 800d32a:	7bfa      	ldrb	r2, [r7, #15]
 800d32c:	7bf9      	ldrb	r1, [r7, #15]
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	4613      	mov	r3, r2
 800d332:	011b      	lsls	r3, r3, #4
 800d334:	4413      	add	r3, r2
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	4403      	add	r3, r0
 800d33a:	3320      	adds	r3, #32
 800d33c:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800d340:	4613      	mov	r3, r2
 800d342:	461a      	mov	r2, r3
 800d344:	4863      	ldr	r0, [pc, #396]	; (800d4d4 <flashReadStructure+0x304>)
 800d346:	460b      	mov	r3, r1
 800d348:	00db      	lsls	r3, r3, #3
 800d34a:	440b      	add	r3, r1
 800d34c:	00db      	lsls	r3, r3, #3
 800d34e:	4403      	add	r3, r0
 800d350:	332c      	adds	r3, #44	; 0x2c
 800d352:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.iMax = config->stabConstants[i].pid_iMax;
 800d354:	7bfa      	ldrb	r2, [r7, #15]
 800d356:	7bf9      	ldrb	r1, [r7, #15]
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	4613      	mov	r3, r2
 800d35c:	011b      	lsls	r3, r3, #4
 800d35e:	4413      	add	r3, r2
 800d360:	009b      	lsls	r3, r3, #2
 800d362:	4403      	add	r3, r0
 800d364:	3320      	adds	r3, #32
 800d366:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800d36a:	4613      	mov	r3, r2
 800d36c:	461a      	mov	r2, r3
 800d36e:	4859      	ldr	r0, [pc, #356]	; (800d4d4 <flashReadStructure+0x304>)
 800d370:	460b      	mov	r3, r1
 800d372:	00db      	lsls	r3, r3, #3
 800d374:	440b      	add	r3, r1
 800d376:	00db      	lsls	r3, r3, #3
 800d378:	4403      	add	r3, r0
 800d37a:	3330      	adds	r3, #48	; 0x30
 800d37c:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.iMin = config->stabConstants[i].pid_iMin;
 800d37e:	7bfa      	ldrb	r2, [r7, #15]
 800d380:	7bf9      	ldrb	r1, [r7, #15]
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	4613      	mov	r3, r2
 800d386:	011b      	lsls	r3, r3, #4
 800d388:	4413      	add	r3, r2
 800d38a:	009b      	lsls	r3, r3, #2
 800d38c:	4403      	add	r3, r0
 800d38e:	3328      	adds	r3, #40	; 0x28
 800d390:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800d394:	4613      	mov	r3, r2
 800d396:	461a      	mov	r2, r3
 800d398:	484e      	ldr	r0, [pc, #312]	; (800d4d4 <flashReadStructure+0x304>)
 800d39a:	460b      	mov	r3, r1
 800d39c:	00db      	lsls	r3, r3, #3
 800d39e:	440b      	add	r3, r1
 800d3a0:	00db      	lsls	r3, r3, #3
 800d3a2:	4403      	add	r3, r0
 800d3a4:	3334      	adds	r3, #52	; 0x34
 800d3a6:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pThrustersMin = config->stabConstants[i].pThrustersMin;
 800d3a8:	7bfa      	ldrb	r2, [r7, #15]
 800d3aa:	7bf9      	ldrb	r1, [r7, #15]
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	011b      	lsls	r3, r3, #4
 800d3b2:	4413      	add	r3, r2
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	4403      	add	r3, r0
 800d3b8:	3328      	adds	r3, #40	; 0x28
 800d3ba:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800d3be:	4613      	mov	r3, r2
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	4844      	ldr	r0, [pc, #272]	; (800d4d4 <flashReadStructure+0x304>)
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	00db      	lsls	r3, r3, #3
 800d3c8:	440b      	add	r3, r1
 800d3ca:	00db      	lsls	r3, r3, #3
 800d3cc:	4403      	add	r3, r0
 800d3ce:	3338      	adds	r3, #56	; 0x38
 800d3d0:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pThrustersMax = config->stabConstants[i].pThrustersMax;
 800d3d2:	7bfa      	ldrb	r2, [r7, #15]
 800d3d4:	7bf9      	ldrb	r1, [r7, #15]
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	4613      	mov	r3, r2
 800d3da:	011b      	lsls	r3, r3, #4
 800d3dc:	4413      	add	r3, r2
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	4403      	add	r3, r0
 800d3e2:	3330      	adds	r3, #48	; 0x30
 800d3e4:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	4839      	ldr	r0, [pc, #228]	; (800d4d4 <flashReadStructure+0x304>)
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	00db      	lsls	r3, r3, #3
 800d3f2:	440b      	add	r3, r1
 800d3f4:	00db      	lsls	r3, r3, #3
 800d3f6:	4403      	add	r3, r0
 800d3f8:	333c      	adds	r3, #60	; 0x3c
 800d3fa:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].T = config->stabConstants[i].aFilter_thrusters_T;
 800d3fc:	7bfa      	ldrb	r2, [r7, #15]
 800d3fe:	7bf9      	ldrb	r1, [r7, #15]
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	4613      	mov	r3, r2
 800d404:	011b      	lsls	r3, r3, #4
 800d406:	4413      	add	r3, r2
 800d408:	009b      	lsls	r3, r3, #2
 800d40a:	4403      	add	r3, r0
 800d40c:	3330      	adds	r3, #48	; 0x30
 800d40e:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800d412:	4613      	mov	r3, r2
 800d414:	461a      	mov	r2, r3
 800d416:	482f      	ldr	r0, [pc, #188]	; (800d4d4 <flashReadStructure+0x304>)
 800d418:	460b      	mov	r3, r1
 800d41a:	00db      	lsls	r3, r3, #3
 800d41c:	440b      	add	r3, r1
 800d41e:	00db      	lsls	r3, r3, #3
 800d420:	4403      	add	r3, r0
 800d422:	3320      	adds	r3, #32
 800d424:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].K = config->stabConstants[i].aFilter_thrusters_K;
 800d426:	7bfa      	ldrb	r2, [r7, #15]
 800d428:	7bf9      	ldrb	r1, [r7, #15]
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	4613      	mov	r3, r2
 800d42e:	011b      	lsls	r3, r3, #4
 800d430:	4413      	add	r3, r2
 800d432:	009b      	lsls	r3, r3, #2
 800d434:	4403      	add	r3, r0
 800d436:	3338      	adds	r3, #56	; 0x38
 800d438:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800d43c:	4613      	mov	r3, r2
 800d43e:	461a      	mov	r2, r3
 800d440:	4824      	ldr	r0, [pc, #144]	; (800d4d4 <flashReadStructure+0x304>)
 800d442:	460b      	mov	r3, r1
 800d444:	00db      	lsls	r3, r3, #3
 800d446:	440b      	add	r3, r1
 800d448:	00db      	lsls	r3, r3, #3
 800d44a:	4403      	add	r3, r0
 800d44c:	3324      	adds	r3, #36	; 0x24
 800d44e:	601a      	str	r2, [r3, #0]
		rStabConstants[i].sOutSummatorMax = config->stabConstants[i].sOutSummatorMax;
 800d450:	7bfa      	ldrb	r2, [r7, #15]
 800d452:	7bf9      	ldrb	r1, [r7, #15]
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	4613      	mov	r3, r2
 800d458:	011b      	lsls	r3, r3, #4
 800d45a:	4413      	add	r3, r2
 800d45c:	009b      	lsls	r3, r3, #2
 800d45e:	4403      	add	r3, r0
 800d460:	3338      	adds	r3, #56	; 0x38
 800d462:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800d466:	4613      	mov	r3, r2
 800d468:	461a      	mov	r2, r3
 800d46a:	481a      	ldr	r0, [pc, #104]	; (800d4d4 <flashReadStructure+0x304>)
 800d46c:	460b      	mov	r3, r1
 800d46e:	00db      	lsls	r3, r3, #3
 800d470:	440b      	add	r3, r1
 800d472:	00db      	lsls	r3, r3, #3
 800d474:	4403      	add	r3, r0
 800d476:	3340      	adds	r3, #64	; 0x40
 800d478:	601a      	str	r2, [r3, #0]
		rStabConstants[i].sOutSummatorMin = config->stabConstants[i].sOutSummatorMin;
 800d47a:	7bfa      	ldrb	r2, [r7, #15]
 800d47c:	7bf9      	ldrb	r1, [r7, #15]
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	4613      	mov	r3, r2
 800d482:	011b      	lsls	r3, r3, #4
 800d484:	4413      	add	r3, r2
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	4403      	add	r3, r0
 800d48a:	3340      	adds	r3, #64	; 0x40
 800d48c:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800d490:	4613      	mov	r3, r2
 800d492:	461a      	mov	r2, r3
 800d494:	480f      	ldr	r0, [pc, #60]	; (800d4d4 <flashReadStructure+0x304>)
 800d496:	460b      	mov	r3, r1
 800d498:	00db      	lsls	r3, r3, #3
 800d49a:	440b      	add	r3, r1
 800d49c:	00db      	lsls	r3, r3, #3
 800d49e:	4403      	add	r3, r0
 800d4a0:	3344      	adds	r3, #68	; 0x44
 800d4a2:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800d4a4:	7bfb      	ldrb	r3, [r7, #15]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	73fb      	strb	r3, [r7, #15]
 800d4aa:	7bfb      	ldrb	r3, [r7, #15]
 800d4ac:	2b05      	cmp	r3, #5
 800d4ae:	f67f ae96 	bls.w	800d1de <flashReadStructure+0xe>
//		rThrusters[i].sForward = config->thrusters[i].sForward;
//		rThrusters[i].sBackward = config->thrusters[i].sBackward;
//		rThrusters[i].inverse = config->thrusters[i].inverse;
//	}

	if(config->writeFlag == 0xAA) {
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	2baa      	cmp	r3, #170	; 0xaa
 800d4b8:	d103      	bne.n	800d4c2 <flashReadStructure+0x2f2>
		rState.flash = true;
 800d4ba:	4b07      	ldr	r3, [pc, #28]	; (800d4d8 <flashReadStructure+0x308>)
 800d4bc:	2201      	movs	r2, #1
 800d4be:	709a      	strb	r2, [r3, #2]
	}
	else {
		rState.flash = false;
	}
}
 800d4c0:	e002      	b.n	800d4c8 <flashReadStructure+0x2f8>
		rState.flash = false;
 800d4c2:	4b05      	ldr	r3, [pc, #20]	; (800d4d8 <flashReadStructure+0x308>)
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	709a      	strb	r2, [r3, #2]
}
 800d4c8:	bf00      	nop
 800d4ca:	3714      	adds	r7, #20
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr
 800d4d4:	20002660 	.word	0x20002660
 800d4d8:	200024cc 	.word	0x200024cc

0800d4dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b085      	sub	sp, #20
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	60f8      	str	r0, [r7, #12]
 800d4e4:	60b9      	str	r1, [r7, #8]
 800d4e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	4a07      	ldr	r2, [pc, #28]	; (800d508 <vApplicationGetIdleTaskMemory+0x2c>)
 800d4ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	4a06      	ldr	r2, [pc, #24]	; (800d50c <vApplicationGetIdleTaskMemory+0x30>)
 800d4f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2280      	movs	r2, #128	; 0x80
 800d4f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800d4fa:	bf00      	nop
 800d4fc:	3714      	adds	r7, #20
 800d4fe:	46bd      	mov	sp, r7
 800d500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d504:	4770      	bx	lr
 800d506:	bf00      	nop
 800d508:	20001d44 	.word	0x20001d44
 800d50c:	20001e08 	.word	0x20001e08

0800d510 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800d510:	b480      	push	{r7}
 800d512:	b085      	sub	sp, #20
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	4a07      	ldr	r2, [pc, #28]	; (800d53c <vApplicationGetTimerTaskMemory+0x2c>)
 800d520:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	4a06      	ldr	r2, [pc, #24]	; (800d540 <vApplicationGetTimerTaskMemory+0x30>)
 800d526:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d52e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800d530:	bf00      	nop
 800d532:	3714      	adds	r7, #20
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr
 800d53c:	20002008 	.word	0x20002008
 800d540:	200020cc 	.word	0x200020cc

0800d544 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800d544:	b5b0      	push	{r4, r5, r7, lr}
 800d546:	b0bc      	sub	sp, #240	; 0xf0
 800d548:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
    uartBusesInit();
 800d54a:	f7fe fa85 	bl	800ba58 <uartBusesInit>
    i2cBusesInit();
 800d54e:	f7fe fb81 	bl	800bc54 <i2cBusesInit>
    variableInit();
 800d552:	f7fe f9e1 	bl	800b918 <variableInit>
    stabilizationInit();
 800d556:	f000 fddb 	bl	800e110 <stabilizationInit>


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of mutData */
  osMutexStaticDef(mutData, &mutDataControlBlock);
 800d55a:	2300      	movs	r3, #0
 800d55c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d560:	4b76      	ldr	r3, [pc, #472]	; (800d73c <MX_FREERTOS_Init+0x1f8>)
 800d562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  mutDataHandle = osMutexCreate(osMutex(mutData));
 800d566:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7fa fbc0 	bl	8007cf0 <osMutexCreate>
 800d570:	4603      	mov	r3, r0
 800d572:	4a73      	ldr	r2, [pc, #460]	; (800d740 <MX_FREERTOS_Init+0x1fc>)
 800d574:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of tUartTimer */
  osTimerDef(tUartTimer, func_tUartTimer);
 800d576:	4b73      	ldr	r3, [pc, #460]	; (800d744 <MX_FREERTOS_Init+0x200>)
 800d578:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d57c:	2300      	movs	r3, #0
 800d57e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  tUartTimerHandle = osTimerCreate(osTimer(tUartTimer), osTimerOnce, NULL);
 800d582:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800d586:	2200      	movs	r2, #0
 800d588:	2100      	movs	r1, #0
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7fa fb7c 	bl	8007c88 <osTimerCreate>
 800d590:	4603      	mov	r3, r0
 800d592:	4a6d      	ldr	r2, [pc, #436]	; (800d748 <MX_FREERTOS_Init+0x204>)
 800d594:	6013      	str	r3, [r2, #0]

  /* definition and creation of tSilence */
  osTimerDef(tSilence, tSilence_func);
 800d596:	4b6d      	ldr	r3, [pc, #436]	; (800d74c <MX_FREERTOS_Init+0x208>)
 800d598:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d59c:	2300      	movs	r3, #0
 800d59e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  tSilenceHandle = osTimerCreate(osTimer(tSilence), osTimerOnce, NULL);
 800d5a2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7fa fb6c 	bl	8007c88 <osTimerCreate>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	4a67      	ldr	r2, [pc, #412]	; (800d750 <MX_FREERTOS_Init+0x20c>)
 800d5b4:	6013      	str	r3, [r2, #0]

  /* definition and creation of tTechCommTImer */
  osTimerDef(tTechCommTImer, tTechCommTImer_callback);
 800d5b6:	4b67      	ldr	r3, [pc, #412]	; (800d754 <MX_FREERTOS_Init+0x210>)
 800d5b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d5bc:	2300      	movs	r3, #0
 800d5be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  tTechCommTImerHandle = osTimerCreate(osTimer(tTechCommTImer), osTimerOnce, NULL);
 800d5c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	2100      	movs	r1, #0
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f7fa fb5c 	bl	8007c88 <osTimerCreate>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	4a61      	ldr	r2, [pc, #388]	; (800d758 <MX_FREERTOS_Init+0x214>)
 800d5d4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  SilenceTimer = xTimerCreate("silence", DELAY_SILENCE/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) tSilence_func);
 800d5d6:	4b5d      	ldr	r3, [pc, #372]	; (800d74c <MX_FREERTOS_Init+0x208>)
 800d5d8:	9300      	str	r3, [sp, #0]
 800d5da:	2300      	movs	r3, #0
 800d5dc:	2200      	movs	r2, #0
 800d5de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d5e2:	485e      	ldr	r0, [pc, #376]	; (800d75c <MX_FREERTOS_Init+0x218>)
 800d5e4:	f7fc fc4a 	bl	8009e7c <xTimerCreate>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	4a5d      	ldr	r2, [pc, #372]	; (800d760 <MX_FREERTOS_Init+0x21c>)
 800d5ec:	6013      	str	r3, [r2, #0]
  UARTTimer = xTimerCreate("timer", DELAY_TIMER_TASK/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) func_tUartTimer);
 800d5ee:	4b55      	ldr	r3, [pc, #340]	; (800d744 <MX_FREERTOS_Init+0x200>)
 800d5f0:	9300      	str	r3, [sp, #0]
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	211e      	movs	r1, #30
 800d5f8:	485a      	ldr	r0, [pc, #360]	; (800d764 <MX_FREERTOS_Init+0x220>)
 800d5fa:	f7fc fc3f 	bl	8009e7c <xTimerCreate>
 800d5fe:	4603      	mov	r3, r0
 800d600:	4a59      	ldr	r2, [pc, #356]	; (800d768 <MX_FREERTOS_Init+0x224>)
 800d602:	6013      	str	r3, [r2, #0]

  xTimerStart(SilenceTimer, 10);
 800d604:	4b56      	ldr	r3, [pc, #344]	; (800d760 <MX_FREERTOS_Init+0x21c>)
 800d606:	681c      	ldr	r4, [r3, #0]
 800d608:	f7fb fe54 	bl	80092b4 <xTaskGetTickCount>
 800d60c:	4602      	mov	r2, r0
 800d60e:	230a      	movs	r3, #10
 800d610:	9300      	str	r3, [sp, #0]
 800d612:	2300      	movs	r3, #0
 800d614:	2101      	movs	r1, #1
 800d616:	4620      	mov	r0, r4
 800d618:	f7fc fcc0 	bl	8009f9c <xTimerGenericCommand>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of tLedBlinkingTask */
  osThreadStaticDef(tLedBlinkingTask, func_tLedBlinkingTask, osPriorityLow, 0, 128, tLedBlinkingTaskBuffer, &tLedBlinkingTaskControlBlock);
 800d61c:	4b53      	ldr	r3, [pc, #332]	; (800d76c <MX_FREERTOS_Init+0x228>)
 800d61e:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 800d622:	461d      	mov	r5, r3
 800d624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d628:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d62c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tLedBlinkingTaskHandle = osThreadCreate(osThread(tLedBlinkingTask), NULL);
 800d630:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800d634:	2100      	movs	r1, #0
 800d636:	4618      	mov	r0, r3
 800d638:	f7fa fac5 	bl	8007bc6 <osThreadCreate>
 800d63c:	4603      	mov	r3, r0
 800d63e:	4a4c      	ldr	r2, [pc, #304]	; (800d770 <MX_FREERTOS_Init+0x22c>)
 800d640:	6013      	str	r3, [r2, #0]

  /* definition and creation of tVmaCommTask */
  osThreadStaticDef(tVmaCommTask, func_tVmaCommTask, osPriorityBelowNormal, 0, 128, tVmaCommTaskBuffer, &tVmaCommTaskControlBlock);
 800d642:	4b4c      	ldr	r3, [pc, #304]	; (800d774 <MX_FREERTOS_Init+0x230>)
 800d644:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800d648:	461d      	mov	r5, r3
 800d64a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d64c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d64e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d652:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tVmaCommTaskHandle = osThreadCreate(osThread(tVmaCommTask), NULL);
 800d656:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d65a:	2100      	movs	r1, #0
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7fa fab2 	bl	8007bc6 <osThreadCreate>
 800d662:	4603      	mov	r3, r0
 800d664:	4a44      	ldr	r2, [pc, #272]	; (800d778 <MX_FREERTOS_Init+0x234>)
 800d666:	6013      	str	r3, [r2, #0]

  /* definition and creation of tImuCommTask */
  osThreadStaticDef(tImuCommTask, func_tImuCommTask, osPriorityBelowNormal, 0, 128, tImuCommTaskBuffer, &tImuCommTaskControlBlock);
 800d668:	4b44      	ldr	r3, [pc, #272]	; (800d77c <MX_FREERTOS_Init+0x238>)
 800d66a:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800d66e:	461d      	mov	r5, r3
 800d670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d674:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d678:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tImuCommTaskHandle = osThreadCreate(osThread(tImuCommTask), NULL);
 800d67c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800d680:	2100      	movs	r1, #0
 800d682:	4618      	mov	r0, r3
 800d684:	f7fa fa9f 	bl	8007bc6 <osThreadCreate>
 800d688:	4603      	mov	r3, r0
 800d68a:	4a3d      	ldr	r2, [pc, #244]	; (800d780 <MX_FREERTOS_Init+0x23c>)
 800d68c:	6013      	str	r3, [r2, #0]

  /* definition and creation of tStabilizationTask */
  osThreadStaticDef(tStabilizationTask, func_tStabilizationTask, osPriorityBelowNormal, 0, 128, tStabilizationTaskBuffer, &tStabilizationTaskControlBlock);
 800d68e:	4b3d      	ldr	r3, [pc, #244]	; (800d784 <MX_FREERTOS_Init+0x240>)
 800d690:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800d694:	461d      	mov	r5, r3
 800d696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d69a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d69e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tStabilizationTaskHandle = osThreadCreate(osThread(tStabilizationTask), NULL);
 800d6a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7fa fa8c 	bl	8007bc6 <osThreadCreate>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	4a35      	ldr	r2, [pc, #212]	; (800d788 <MX_FREERTOS_Init+0x244>)
 800d6b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of tDevCommTask */
  osThreadStaticDef(tDevCommTask, func_tDevCommTask, osPriorityBelowNormal, 0, 128, tDevCommTaskBuffer, &tDevCommTaskControlBlock);
 800d6b4:	4b35      	ldr	r3, [pc, #212]	; (800d78c <MX_FREERTOS_Init+0x248>)
 800d6b6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800d6ba:	461d      	mov	r5, r3
 800d6bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d6be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d6c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d6c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tDevCommTaskHandle = osThreadCreate(osThread(tDevCommTask), NULL);
 800d6c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d6cc:	2100      	movs	r1, #0
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7fa fa79 	bl	8007bc6 <osThreadCreate>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	4a2e      	ldr	r2, [pc, #184]	; (800d790 <MX_FREERTOS_Init+0x24c>)
 800d6d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of tSensCommTask */
  osThreadStaticDef(tSensCommTask, func_tSensCommTask, osPriorityBelowNormal, 0, 128, tSensCommTaskBuffer, &tSensCommTaskControlBlock);
 800d6da:	4b2e      	ldr	r3, [pc, #184]	; (800d794 <MX_FREERTOS_Init+0x250>)
 800d6dc:	f107 0420 	add.w	r4, r7, #32
 800d6e0:	461d      	mov	r5, r3
 800d6e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d6e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d6e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d6ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tSensCommTaskHandle = osThreadCreate(osThread(tSensCommTask), NULL);
 800d6ee:	f107 0320 	add.w	r3, r7, #32
 800d6f2:	2100      	movs	r1, #0
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7fa fa66 	bl	8007bc6 <osThreadCreate>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	4a26      	ldr	r2, [pc, #152]	; (800d798 <MX_FREERTOS_Init+0x254>)
 800d6fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of tPcCommTask */
  osThreadStaticDef(tPcCommTask, func_tPcCommTask, osPriorityBelowNormal, 0, 128, tPcCommTaskBuffer, &tPcCommTaskControlBlock);
 800d700:	4b26      	ldr	r3, [pc, #152]	; (800d79c <MX_FREERTOS_Init+0x258>)
 800d702:	1d3c      	adds	r4, r7, #4
 800d704:	461d      	mov	r5, r3
 800d706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d70a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d70e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tPcCommTaskHandle = osThreadCreate(osThread(tPcCommTask), NULL);
 800d712:	1d3b      	adds	r3, r7, #4
 800d714:	2100      	movs	r1, #0
 800d716:	4618      	mov	r0, r3
 800d718:	f7fa fa55 	bl	8007bc6 <osThreadCreate>
 800d71c:	4603      	mov	r3, r0
 800d71e:	4a20      	ldr	r2, [pc, #128]	; (800d7a0 <MX_FREERTOS_Init+0x25c>)
 800d720:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 800d722:	4b20      	ldr	r3, [pc, #128]	; (800d7a4 <MX_FREERTOS_Init+0x260>)
 800d724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d726:	4a1f      	ldr	r2, [pc, #124]	; (800d7a4 <MX_FREERTOS_Init+0x260>)
 800d728:	6811      	ldr	r1, [r2, #0]
 800d72a:	2201      	movs	r2, #1
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7f8 faf7 	bl	8005d20 <HAL_UART_Receive_IT>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800d732:	bf00      	nop
 800d734:	37e8      	adds	r7, #232	; 0xe8
 800d736:	46bd      	mov	sp, r7
 800d738:	bdb0      	pop	{r4, r5, r7, pc}
 800d73a:	bf00      	nop
 800d73c:	20001cfc 	.word	0x20001cfc
 800d740:	20001cf8 	.word	0x20001cf8
 800d744:	0800dba9 	.word	0x0800dba9
 800d748:	20001cec 	.word	0x20001cec
 800d74c:	0800dcb5 	.word	0x0800dcb5
 800d750:	20001cf0 	.word	0x20001cf0
 800d754:	0800dd89 	.word	0x0800dd89
 800d758:	20001cf4 	.word	0x20001cf4
 800d75c:	080105b0 	.word	0x080105b0
 800d760:	20000970 	.word	0x20000970
 800d764:	080105b8 	.word	0x080105b8
 800d768:	2000096c 	.word	0x2000096c
 800d76c:	080105c0 	.word	0x080105c0
 800d770:	20000974 	.word	0x20000974
 800d774:	080105dc 	.word	0x080105dc
 800d778:	20000c3c 	.word	0x20000c3c
 800d77c:	080105f8 	.word	0x080105f8
 800d780:	20000f04 	.word	0x20000f04
 800d784:	08010614 	.word	0x08010614
 800d788:	200011cc 	.word	0x200011cc
 800d78c:	08010630 	.word	0x08010630
 800d790:	20001494 	.word	0x20001494
 800d794:	0801064c 	.word	0x0801064c
 800d798:	2000175c 	.word	0x2000175c
 800d79c:	08010668 	.word	0x08010668
 800d7a0:	20001a24 	.word	0x20001a24
 800d7a4:	2000087c 	.word	0x2000087c

0800d7a8 <func_tLedBlinkingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_func_tLedBlinkingTask */
void func_tLedBlinkingTask(void const * argument)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b084      	sub	sp, #16
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tLedBlinkingTask */
    uint32_t sysTime = osKernelSysTick();
 800d7b0:	f7fa f9f9 	bl	8007ba6 <osKernelSysTick>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
        HAL_GPIO_TogglePin(GPIOB, led1_Pin);
 800d7b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d7bc:	4811      	ldr	r0, [pc, #68]	; (800d804 <func_tLedBlinkingTask+0x5c>)
 800d7be:	f7f4 fadb 	bl	8001d78 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 800d7c2:	f107 030c 	add.w	r3, r7, #12
 800d7c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7fa faa8 	bl	8007d20 <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led2_Pin);
 800d7d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d7d4:	480b      	ldr	r0, [pc, #44]	; (800d804 <func_tLedBlinkingTask+0x5c>)
 800d7d6:	f7f4 facf 	bl	8001d78 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 800d7da:	f107 030c 	add.w	r3, r7, #12
 800d7de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f7fa fa9c 	bl	8007d20 <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led3_Pin);
 800d7e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d7ec:	4805      	ldr	r0, [pc, #20]	; (800d804 <func_tLedBlinkingTask+0x5c>)
 800d7ee:	f7f4 fac3 	bl	8001d78 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 800d7f2:	f107 030c 	add.w	r3, r7, #12
 800d7f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7fa fa90 	bl	8007d20 <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led1_Pin);
 800d800:	e7da      	b.n	800d7b8 <func_tLedBlinkingTask+0x10>
 800d802:	bf00      	nop
 800d804:	48000400 	.word	0x48000400

0800d808 <func_tVmaCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tVmaCommTask */
void func_tVmaCommTask(void const * argument)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b084      	sub	sp, #16
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tVmaCommTask */
	uint32_t sysTime = osKernelSysTick();
 800d810:	f7fa f9c9 	bl	8007ba6 <osKernelSysTick>
 800d814:	4603      	mov	r3, r0
 800d816:	60bb      	str	r3, [r7, #8]
	uint8_t transaction = 0;
 800d818:	2300      	movs	r3, #0
 800d81a:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RE_DE_GPIO_Port,RE_DE_Pin,GPIO_PIN_SET);
 800d81c:	2201      	movs	r2, #1
 800d81e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d826:	f7f4 fa8f 	bl	8001d48 <HAL_GPIO_WritePin>
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 800d82a:	4b2c      	ldr	r3, [pc, #176]	; (800d8dc <func_tVmaCommTask+0xd4>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	2114      	movs	r1, #20
 800d830:	4618      	mov	r0, r3
 800d832:	f7fa ff3f 	bl	80086b4 <xQueueSemaphoreTake>
 800d836:	4603      	mov	r3, r0
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d10b      	bne.n	800d854 <func_tVmaCommTask+0x4c>
			fillThrustersRequest(ThrustersRequestBuffer, transaction);
 800d83c:	7bfb      	ldrb	r3, [r7, #15]
 800d83e:	4619      	mov	r1, r3
 800d840:	4827      	ldr	r0, [pc, #156]	; (800d8e0 <func_tVmaCommTask+0xd8>)
 800d842:	f001 fcad 	bl	800f1a0 <fillThrustersRequest>
			xSemaphoreGive(mutDataHandle);
 800d846:	4b25      	ldr	r3, [pc, #148]	; (800d8dc <func_tVmaCommTask+0xd4>)
 800d848:	6818      	ldr	r0, [r3, #0]
 800d84a:	2300      	movs	r3, #0
 800d84c:	2200      	movs	r2, #0
 800d84e:	2100      	movs	r1, #0
 800d850:	f7fa fcba 	bl	80081c8 <xQueueGenericSend>
		}

		uartBus[THRUSTERS_UART].txBuffer = ThrustersRequestBuffer;
 800d854:	4b23      	ldr	r3, [pc, #140]	; (800d8e4 <func_tVmaCommTask+0xdc>)
 800d856:	4a22      	ldr	r2, [pc, #136]	; (800d8e0 <func_tVmaCommTask+0xd8>)
 800d858:	63da      	str	r2, [r3, #60]	; 0x3c
		uartBus[THRUSTERS_UART].txLength = THRUSTERS_REQUEST_LENGTH;
 800d85a:	4b22      	ldr	r3, [pc, #136]	; (800d8e4 <func_tVmaCommTask+0xdc>)
 800d85c:	220d      	movs	r2, #13
 800d85e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

		uartBus[THRUSTERS_UART].rxBuffer = ThrustersResponseBuffer[transaction];
 800d862:	7bfa      	ldrb	r2, [r7, #15]
 800d864:	4613      	mov	r3, r2
 800d866:	00db      	lsls	r3, r3, #3
 800d868:	4413      	add	r3, r2
 800d86a:	4a1f      	ldr	r2, [pc, #124]	; (800d8e8 <func_tVmaCommTask+0xe0>)
 800d86c:	4413      	add	r3, r2
 800d86e:	4a1d      	ldr	r2, [pc, #116]	; (800d8e4 <func_tVmaCommTask+0xdc>)
 800d870:	6393      	str	r3, [r2, #56]	; 0x38
		uartBus[THRUSTERS_UART].rxLength = THRUSTERS_RESPONSE_LENGTH;
 800d872:	4b1c      	ldr	r3, [pc, #112]	; (800d8e4 <func_tVmaCommTask+0xdc>)
 800d874:	2209      	movs	r2, #9
 800d876:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		transmitAndReceive(&uartBus[THRUSTERS_UART], false);
 800d87a:	2100      	movs	r1, #0
 800d87c:	481b      	ldr	r0, [pc, #108]	; (800d8ec <func_tVmaCommTask+0xe4>)
 800d87e:	f7fe fa61 	bl	800bd44 <transmitAndReceive>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 800d882:	4b16      	ldr	r3, [pc, #88]	; (800d8dc <func_tVmaCommTask+0xd4>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	2114      	movs	r1, #20
 800d888:	4618      	mov	r0, r3
 800d88a:	f7fa ff13 	bl	80086b4 <xQueueSemaphoreTake>
 800d88e:	4603      	mov	r3, r0
 800d890:	2b01      	cmp	r3, #1
 800d892:	d111      	bne.n	800d8b8 <func_tVmaCommTask+0xb0>
			fillThrustersResponse(ThrustersResponseBuffer[transaction], transaction);
 800d894:	7bfa      	ldrb	r2, [r7, #15]
 800d896:	4613      	mov	r3, r2
 800d898:	00db      	lsls	r3, r3, #3
 800d89a:	4413      	add	r3, r2
 800d89c:	4a12      	ldr	r2, [pc, #72]	; (800d8e8 <func_tVmaCommTask+0xe0>)
 800d89e:	4413      	add	r3, r2
 800d8a0:	7bfa      	ldrb	r2, [r7, #15]
 800d8a2:	4611      	mov	r1, r2
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f001 fcf5 	bl	800f294 <fillThrustersResponse>
			xSemaphoreGive(mutDataHandle);
 800d8aa:	4b0c      	ldr	r3, [pc, #48]	; (800d8dc <func_tVmaCommTask+0xd4>)
 800d8ac:	6818      	ldr	r0, [r3, #0]
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	f7fa fc88 	bl	80081c8 <xQueueGenericSend>
		}

		transaction = (transaction + 1) % THRUSTERS_NUMBER;
 800d8b8:	7bfb      	ldrb	r3, [r7, #15]
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	425a      	negs	r2, r3
 800d8be:	f003 0307 	and.w	r3, r3, #7
 800d8c2:	f002 0207 	and.w	r2, r2, #7
 800d8c6:	bf58      	it	pl
 800d8c8:	4253      	negpl	r3, r2
 800d8ca:	73fb      	strb	r3, [r7, #15]
		osDelayUntil(&sysTime, DELAY_THRUSTERS_TASK);
 800d8cc:	f107 0308 	add.w	r3, r7, #8
 800d8d0:	2114      	movs	r1, #20
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7fa fa24 	bl	8007d20 <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 800d8d8:	e7a7      	b.n	800d82a <func_tVmaCommTask+0x22>
 800d8da:	bf00      	nop
 800d8dc:	20001cf8 	.word	0x20001cf8
 800d8e0:	20002af8 	.word	0x20002af8
 800d8e4:	2000087c 	.word	0x2000087c
 800d8e8:	20002b08 	.word	0x20002b08
 800d8ec:	200008b4 	.word	0x200008b4

0800d8f0 <func_tImuCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tImuCommTask */
void func_tImuCommTask(void const * argument)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tImuCommTask */
  uint32_t sysTime = osKernelSysTick();
 800d8f8:	f7fa f955 	bl	8007ba6 <osKernelSysTick>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  	if(rSensors.startIMU) {
 800d900:	4b2d      	ldr	r3, [pc, #180]	; (800d9b8 <func_tImuCommTask+0xc8>)
 800d902:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d906:	2b00      	cmp	r3, #0
 800d908:	d020      	beq.n	800d94c <func_tImuCommTask+0x5c>
			uartBus[IMU_UART].txBuffer = ImuStartRequestBuffer;
 800d90a:	4b2c      	ldr	r3, [pc, #176]	; (800d9bc <func_tImuCommTask+0xcc>)
 800d90c:	4a2c      	ldr	r2, [pc, #176]	; (800d9c0 <func_tImuCommTask+0xd0>)
 800d90e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH_AC;
 800d912:	4b2a      	ldr	r3, [pc, #168]	; (800d9bc <func_tImuCommTask+0xcc>)
 800d914:	2214      	movs	r2, #20
 800d916:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 800d91a:	2100      	movs	r1, #0
 800d91c:	4829      	ldr	r0, [pc, #164]	; (800d9c4 <func_tImuCommTask+0xd4>)
 800d91e:	f7fe f9a7 	bl	800bc70 <transmitPackage>

			uartBus[IMU_UART].txBuffer = ImuRequestBuffer;
 800d922:	4b26      	ldr	r3, [pc, #152]	; (800d9bc <func_tImuCommTask+0xcc>)
 800d924:	4a28      	ldr	r2, [pc, #160]	; (800d9c8 <func_tImuCommTask+0xd8>)
 800d926:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH;
 800d92a:	4b24      	ldr	r3, [pc, #144]	; (800d9bc <func_tImuCommTask+0xcc>)
 800d92c:	221b      	movs	r2, #27
 800d92e:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 800d932:	2100      	movs	r1, #0
 800d934:	4823      	ldr	r0, [pc, #140]	; (800d9c4 <func_tImuCommTask+0xd4>)
 800d936:	f7fe f99b 	bl	800bc70 <transmitPackage>

	  		rSensors.pressure_null = rSensors.pressure;
 800d93a:	4b1f      	ldr	r3, [pc, #124]	; (800d9b8 <func_tImuCommTask+0xc8>)
 800d93c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d93e:	4a1e      	ldr	r2, [pc, #120]	; (800d9b8 <func_tImuCommTask+0xc8>)
 800d940:	65d3      	str	r3, [r2, #92]	; 0x5c
	  		rSensors.startIMU = false;
 800d942:	4b1d      	ldr	r3, [pc, #116]	; (800d9b8 <func_tImuCommTask+0xc8>)
 800d944:	2200      	movs	r2, #0
 800d946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800d94a:	e02d      	b.n	800d9a8 <func_tImuCommTask+0xb8>
	  	}
	  	else {

	  		uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
 800d94c:	4b1b      	ldr	r3, [pc, #108]	; (800d9bc <func_tImuCommTask+0xcc>)
 800d94e:	4a1f      	ldr	r2, [pc, #124]	; (800d9cc <func_tImuCommTask+0xdc>)
 800d950:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  		uartBus[IMU_UART].rxLength = IMU_RESPONSE_LENGTH;
 800d954:	4b19      	ldr	r3, [pc, #100]	; (800d9bc <func_tImuCommTask+0xcc>)
 800d956:	221e      	movs	r2, #30
 800d958:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

	  		HAL_UART_Receive_IT(uartBus[IMU_UART].huart, uartBus[IMU_UART].rxBuffer, uartBus[IMU_UART].rxLength);
 800d95c:	4b17      	ldr	r3, [pc, #92]	; (800d9bc <func_tImuCommTask+0xcc>)
 800d95e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d962:	4a16      	ldr	r2, [pc, #88]	; (800d9bc <func_tImuCommTask+0xcc>)
 800d964:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 800d968:	4a14      	ldr	r2, [pc, #80]	; (800d9bc <func_tImuCommTask+0xcc>)
 800d96a:	f892 20cc 	ldrb.w	r2, [r2, #204]	; 0xcc
 800d96e:	b292      	uxth	r2, r2
 800d970:	4618      	mov	r0, r3
 800d972:	f7f8 f9d5 	bl	8005d20 <HAL_UART_Receive_IT>

	  		osDelayUntil(&sysTime, DELAY_IMU_TASK);
 800d976:	f107 030c 	add.w	r3, r7, #12
 800d97a:	210a      	movs	r1, #10
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7fa f9cf 	bl	8007d20 <osDelayUntil>

	  		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_IMU_TASK) == pdTRUE) {
 800d982:	4b13      	ldr	r3, [pc, #76]	; (800d9d0 <func_tImuCommTask+0xe0>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	210a      	movs	r1, #10
 800d988:	4618      	mov	r0, r3
 800d98a:	f7fa fe93 	bl	80086b4 <xQueueSemaphoreTake>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b01      	cmp	r3, #1
 800d992:	d109      	bne.n	800d9a8 <func_tImuCommTask+0xb8>
	  			ImuReceive(ImuResponseBuffer);
 800d994:	480d      	ldr	r0, [pc, #52]	; (800d9cc <func_tImuCommTask+0xdc>)
 800d996:	f7ff f951 	bl	800cc3c <ImuReceive>
	  			xSemaphoreGive(mutDataHandle);
 800d99a:	4b0d      	ldr	r3, [pc, #52]	; (800d9d0 <func_tImuCommTask+0xe0>)
 800d99c:	6818      	ldr	r0, [r3, #0]
 800d99e:	2300      	movs	r3, #0
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	2100      	movs	r1, #0
 800d9a4:	f7fa fc10 	bl	80081c8 <xQueueGenericSend>
	  		}

	  	}

	  	osDelayUntil(&sysTime, DELAY_IMU_TASK);
 800d9a8:	f107 030c 	add.w	r3, r7, #12
 800d9ac:	210a      	movs	r1, #10
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7fa f9b6 	bl	8007d20 <osDelayUntil>
	  	if(rSensors.startIMU) {
 800d9b4:	e7a4      	b.n	800d900 <func_tImuCommTask+0x10>
 800d9b6:	bf00      	nop
 800d9b8:	20002598 	.word	0x20002598
 800d9bc:	2000087c 	.word	0x2000087c
 800d9c0:	20000030 	.word	0x20000030
 800d9c4:	20000924 	.word	0x20000924
 800d9c8:	20000014 	.word	0x20000014
 800d9cc:	20002ad8 	.word	0x20002ad8
 800d9d0:	20001cf8 	.word	0x20001cf8

0800d9d4 <func_tStabilizationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tStabilizationTask */
void func_tStabilizationTask(void const * argument)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tStabilizationTask */
	uint32_t sysTime = osKernelSysTick();
 800d9dc:	f7fa f8e3 	bl	8007ba6 <osKernelSysTick>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 800d9e4:	4b16      	ldr	r3, [pc, #88]	; (800da40 <func_tStabilizationTask+0x6c>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	210a      	movs	r1, #10
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7fa fe62 	bl	80086b4 <xQueueSemaphoreTake>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	d11d      	bne.n	800da32 <func_tStabilizationTask+0x5e>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	73fb      	strb	r3, [r7, #15]
 800d9fa:	e010      	b.n	800da1e <func_tStabilizationTask+0x4a>
				if (rStabConstants[i].enable) {
 800d9fc:	7bfa      	ldrb	r2, [r7, #15]
 800d9fe:	4911      	ldr	r1, [pc, #68]	; (800da44 <func_tStabilizationTask+0x70>)
 800da00:	4613      	mov	r3, r2
 800da02:	00db      	lsls	r3, r3, #3
 800da04:	4413      	add	r3, r2
 800da06:	00db      	lsls	r3, r3, #3
 800da08:	440b      	add	r3, r1
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d003      	beq.n	800da18 <func_tStabilizationTask+0x44>
					stabilizationUpdate(i);
 800da10:	7bfb      	ldrb	r3, [r7, #15]
 800da12:	4618      	mov	r0, r3
 800da14:	f000 ff62 	bl	800e8dc <stabilizationUpdate>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800da18:	7bfb      	ldrb	r3, [r7, #15]
 800da1a:	3301      	adds	r3, #1
 800da1c:	73fb      	strb	r3, [r7, #15]
 800da1e:	7bfb      	ldrb	r3, [r7, #15]
 800da20:	2b05      	cmp	r3, #5
 800da22:	d9eb      	bls.n	800d9fc <func_tStabilizationTask+0x28>
				}
			}
			//formThrustVectors();
			xSemaphoreGive(mutDataHandle);
 800da24:	4b06      	ldr	r3, [pc, #24]	; (800da40 <func_tStabilizationTask+0x6c>)
 800da26:	6818      	ldr	r0, [r3, #0]
 800da28:	2300      	movs	r3, #0
 800da2a:	2200      	movs	r2, #0
 800da2c:	2100      	movs	r1, #0
 800da2e:	f7fa fbcb 	bl	80081c8 <xQueueGenericSend>
		}

		osDelayUntil(&sysTime, DELAY_STABILIZATION_TASK);
 800da32:	f107 0308 	add.w	r3, r7, #8
 800da36:	210a      	movs	r1, #10
 800da38:	4618      	mov	r0, r3
 800da3a:	f7fa f971 	bl	8007d20 <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 800da3e:	e7d1      	b.n	800d9e4 <func_tStabilizationTask+0x10>
 800da40:	20001cf8 	.word	0x20001cf8
 800da44:	20002660 	.word	0x20002660

0800da48 <func_tDevCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tDevCommTask */
void func_tDevCommTask(void const * argument)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tDevCommTask */
    uint32_t sysTime = osKernelSysTick();
 800da50:	f7fa f8a9 	bl	8007ba6 <osKernelSysTick>
 800da54:	4603      	mov	r3, r0
 800da56:	60bb      	str	r3, [r7, #8]
    uint8_t transaction = 0;
 800da58:	2300      	movs	r3, #0
 800da5a:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 800da5c:	4b2e      	ldr	r3, [pc, #184]	; (800db18 <func_tDevCommTask+0xd0>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	210a      	movs	r1, #10
 800da62:	4618      	mov	r0, r3
 800da64:	f7fa fe26 	bl	80086b4 <xQueueSemaphoreTake>
 800da68:	4603      	mov	r3, r0
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d10b      	bne.n	800da86 <func_tDevCommTask+0x3e>
            DevicesRequestUpdate(DevicesRequestBuffer, transaction);
 800da6e:	7bfb      	ldrb	r3, [r7, #15]
 800da70:	4619      	mov	r1, r3
 800da72:	482a      	ldr	r0, [pc, #168]	; (800db1c <func_tDevCommTask+0xd4>)
 800da74:	f7fe fb08 	bl	800c088 <DevicesRequestUpdate>
            xSemaphoreGive(mutDataHandle);
 800da78:	4b27      	ldr	r3, [pc, #156]	; (800db18 <func_tDevCommTask+0xd0>)
 800da7a:	6818      	ldr	r0, [r3, #0]
 800da7c:	2300      	movs	r3, #0
 800da7e:	2200      	movs	r2, #0
 800da80:	2100      	movs	r1, #0
 800da82:	f7fa fba1 	bl	80081c8 <xQueueGenericSend>
        }

		uartBus[DEVICES_UART].txBuffer = DevicesRequestBuffer;
 800da86:	4b26      	ldr	r3, [pc, #152]	; (800db20 <func_tDevCommTask+0xd8>)
 800da88:	4a24      	ldr	r2, [pc, #144]	; (800db1c <func_tDevCommTask+0xd4>)
 800da8a:	675a      	str	r2, [r3, #116]	; 0x74
		uartBus[DEVICES_UART].txLength = DEVICES_REQUEST_LENGTH;
 800da8c:	4b24      	ldr	r3, [pc, #144]	; (800db20 <func_tDevCommTask+0xd8>)
 800da8e:	2207      	movs	r2, #7
 800da90:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

		uartBus[DEVICES_UART].rxBuffer = DevicesResponseBuffer[transaction];
 800da94:	7bfa      	ldrb	r2, [r7, #15]
 800da96:	4613      	mov	r3, r2
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	4413      	add	r3, r2
 800da9c:	005b      	lsls	r3, r3, #1
 800da9e:	4a21      	ldr	r2, [pc, #132]	; (800db24 <func_tDevCommTask+0xdc>)
 800daa0:	4413      	add	r3, r2
 800daa2:	4a1f      	ldr	r2, [pc, #124]	; (800db20 <func_tDevCommTask+0xd8>)
 800daa4:	6713      	str	r3, [r2, #112]	; 0x70
		uartBus[DEVICES_UART].rxLength = DEVICES_RESPONSE_LENGTH;
 800daa6:	4b1e      	ldr	r3, [pc, #120]	; (800db20 <func_tDevCommTask+0xd8>)
 800daa8:	220a      	movs	r2, #10
 800daaa:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

		transmitAndReceive(&uartBus[DEVICES_UART], false);
 800daae:	2100      	movs	r1, #0
 800dab0:	481d      	ldr	r0, [pc, #116]	; (800db28 <func_tDevCommTask+0xe0>)
 800dab2:	f7fe f947 	bl	800bd44 <transmitAndReceive>

        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 800dab6:	4b18      	ldr	r3, [pc, #96]	; (800db18 <func_tDevCommTask+0xd0>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	210a      	movs	r1, #10
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7fa fdf9 	bl	80086b4 <xQueueSemaphoreTake>
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b01      	cmp	r3, #1
 800dac6:	d112      	bne.n	800daee <func_tDevCommTask+0xa6>
            DevicesResponseUpdate(DevicesResponseBuffer[transaction], transaction);
 800dac8:	7bfa      	ldrb	r2, [r7, #15]
 800daca:	4613      	mov	r3, r2
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	4413      	add	r3, r2
 800dad0:	005b      	lsls	r3, r3, #1
 800dad2:	4a14      	ldr	r2, [pc, #80]	; (800db24 <func_tDevCommTask+0xdc>)
 800dad4:	4413      	add	r3, r2
 800dad6:	7bfa      	ldrb	r2, [r7, #15]
 800dad8:	4611      	mov	r1, r2
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fe fb0e 	bl	800c0fc <DevicesResponseUpdate>
            xSemaphoreGive(mutDataHandle);
 800dae0:	4b0d      	ldr	r3, [pc, #52]	; (800db18 <func_tDevCommTask+0xd0>)
 800dae2:	6818      	ldr	r0, [r3, #0]
 800dae4:	2300      	movs	r3, #0
 800dae6:	2200      	movs	r2, #0
 800dae8:	2100      	movs	r1, #0
 800daea:	f7fa fb6d 	bl	80081c8 <xQueueGenericSend>
        }

        transaction = (transaction + 1) % DEVICES_NUMBER;
 800daee:	7bfb      	ldrb	r3, [r7, #15]
 800daf0:	1c5a      	adds	r2, r3, #1
 800daf2:	4b0e      	ldr	r3, [pc, #56]	; (800db2c <func_tDevCommTask+0xe4>)
 800daf4:	fb83 3102 	smull	r3, r1, r3, r2
 800daf8:	17d3      	asrs	r3, r2, #31
 800dafa:	1ac9      	subs	r1, r1, r3
 800dafc:	460b      	mov	r3, r1
 800dafe:	005b      	lsls	r3, r3, #1
 800db00:	440b      	add	r3, r1
 800db02:	005b      	lsls	r3, r3, #1
 800db04:	1ad1      	subs	r1, r2, r3
 800db06:	460b      	mov	r3, r1
 800db08:	73fb      	strb	r3, [r7, #15]
        osDelayUntil(&sysTime, DELAY_DEVICES_TASK);
 800db0a:	f107 0308 	add.w	r3, r7, #8
 800db0e:	210a      	movs	r1, #10
 800db10:	4618      	mov	r0, r3
 800db12:	f7fa f905 	bl	8007d20 <osDelayUntil>
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 800db16:	e7a1      	b.n	800da5c <func_tDevCommTask+0x14>
 800db18:	20001cf8 	.word	0x20001cf8
 800db1c:	20002b50 	.word	0x20002b50
 800db20:	2000087c 	.word	0x2000087c
 800db24:	20002b58 	.word	0x20002b58
 800db28:	200008ec 	.word	0x200008ec
 800db2c:	2aaaaaab 	.word	0x2aaaaaab

0800db30 <func_tSensCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tSensCommTask */
void func_tSensCommTask(void const * argument)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b084      	sub	sp, #16
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tSensCommTask */
  uint32_t sysTime = osKernelSysTick();
 800db38:	f7fa f835 	bl	8007ba6 <osKernelSysTick>
 800db3c:	4603      	mov	r3, r0
 800db3e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_SENSOR_TASK) == pdTRUE) {
 800db40:	4b0f      	ldr	r3, [pc, #60]	; (800db80 <func_tSensCommTask+0x50>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2164      	movs	r1, #100	; 0x64
 800db46:	4618      	mov	r0, r3
 800db48:	f7fa fdb4 	bl	80086b4 <xQueueSemaphoreTake>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b01      	cmp	r3, #1
 800db50:	d10f      	bne.n	800db72 <func_tSensCommTask+0x42>
//      MS5837_read(i2cBus[DEV_I2C].hi2c);
      rSensors.pressure = MS5837_02BA_get_actual_pressure();
 800db52:	f7fd f97d 	bl	800ae50 <MS5837_02BA_get_actual_pressure>
 800db56:	ee07 0a90 	vmov	s15, r0
 800db5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db5e:	4b09      	ldr	r3, [pc, #36]	; (800db84 <func_tSensCommTask+0x54>)
 800db60:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
      xSemaphoreGive(mutDataHandle);
 800db64:	4b06      	ldr	r3, [pc, #24]	; (800db80 <func_tSensCommTask+0x50>)
 800db66:	6818      	ldr	r0, [r3, #0]
 800db68:	2300      	movs	r3, #0
 800db6a:	2200      	movs	r2, #0
 800db6c:	2100      	movs	r1, #0
 800db6e:	f7fa fb2b 	bl	80081c8 <xQueueGenericSend>
    }
    osDelayUntil(&sysTime, DELAY_SENSOR_TASK); // Исправленная задержка
 800db72:	f107 030c 	add.w	r3, r7, #12
 800db76:	2164      	movs	r1, #100	; 0x64
 800db78:	4618      	mov	r0, r3
 800db7a:	f7fa f8d1 	bl	8007d20 <osDelayUntil>
    if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_SENSOR_TASK) == pdTRUE) {
 800db7e:	e7df      	b.n	800db40 <func_tSensCommTask+0x10>
 800db80:	20001cf8 	.word	0x20001cf8
 800db84:	20002598 	.word	0x20002598

0800db88 <func_tPcCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tPcCommTask */
void func_tPcCommTask(void const * argument)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tPcCommTask */
	uint32_t sysTime = osKernelSysTick();
 800db90:	f7fa f809 	bl	8007ba6 <osKernelSysTick>
 800db94:	4603      	mov	r3, r0
 800db96:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  osDelayUntil(&sysTime, DELAY_PC_TASK);
 800db98:	f107 030c 	add.w	r3, r7, #12
 800db9c:	210a      	movs	r1, #10
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7fa f8be 	bl	8007d20 <osDelayUntil>
 800dba4:	e7f8      	b.n	800db98 <func_tPcCommTask+0x10>
	...

0800dba8 <func_tUartTimer>:
  /* USER CODE END func_tPcCommTask */
}

/* func_tUartTimer function */
void func_tUartTimer(void const * argument)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tUartTimer */
	if (uartBus[SHORE_UART].packageReceived) {
 800dbb0:	4b3d      	ldr	r3, [pc, #244]	; (800dca8 <func_tUartTimer+0x100>)
 800dbb2:	7a1b      	ldrb	r3, [r3, #8]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d05a      	beq.n	800dc6e <func_tUartTimer+0xc6>
		bool package = true;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	73fb      	strb	r3, [r7, #15]
		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 800dbbc:	4b3b      	ldr	r3, [pc, #236]	; (800dcac <func_tUartTimer+0x104>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	2105      	movs	r1, #5
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7fa fd76 	bl	80086b4 <xQueueSemaphoreTake>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d140      	bne.n	800dc50 <func_tUartTimer+0xa8>
			switch(uartBus[SHORE_UART].rxBuffer[0]) {
 800dbce:	4b36      	ldr	r3, [pc, #216]	; (800dca8 <func_tUartTimer+0x100>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	2baa      	cmp	r3, #170	; 0xaa
 800dbd6:	d023      	beq.n	800dc20 <func_tUartTimer+0x78>
 800dbd8:	2baa      	cmp	r3, #170	; 0xaa
 800dbda:	dc30      	bgt.n	800dc3e <func_tUartTimer+0x96>
 800dbdc:	2b55      	cmp	r3, #85	; 0x55
 800dbde:	d010      	beq.n	800dc02 <func_tUartTimer+0x5a>
 800dbe0:	2ba5      	cmp	r3, #165	; 0xa5
 800dbe2:	d12c      	bne.n	800dc3e <func_tUartTimer+0x96>
				case SHORE_REQUEST_CODE:
					ShoreRequest(uartBus[SHORE_UART].rxBuffer);
 800dbe4:	4b30      	ldr	r3, [pc, #192]	; (800dca8 <func_tUartTimer+0x100>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f7fe faef 	bl	800c1cc <ShoreRequest>
					ShoreResponse(uartBus[SHORE_UART].txBuffer);
 800dbee:	4b2e      	ldr	r3, [pc, #184]	; (800dca8 <func_tUartTimer+0x100>)
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7fe fed2 	bl	800c99c <ShoreResponse>
					uartBus[SHORE_UART].txLength = SHORE_RESPONSE_LENGTH;
 800dbf8:	4b2b      	ldr	r3, [pc, #172]	; (800dca8 <func_tUartTimer+0x100>)
 800dbfa:	2246      	movs	r2, #70	; 0x46
 800dbfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 800dc00:	e01f      	b.n	800dc42 <func_tUartTimer+0x9a>
				case REQUEST_CONFIG_CODE:
					ShoreConfigRequest(uartBus[SHORE_UART].rxBuffer);
 800dc02:	4b29      	ldr	r3, [pc, #164]	; (800dca8 <func_tUartTimer+0x100>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7fe fc9c 	bl	800c544 <ShoreConfigRequest>
					ShoreConfigResponse(uartBus[SHORE_UART].txBuffer);
 800dc0c:	4b26      	ldr	r3, [pc, #152]	; (800dca8 <func_tUartTimer+0x100>)
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7fe ff03 	bl	800ca1c <ShoreConfigResponse>
					uartBus[SHORE_UART].txLength = SHORE_CONFIG_RESPONSE_LENGTH;
 800dc16:	4b24      	ldr	r3, [pc, #144]	; (800dca8 <func_tUartTimer+0x100>)
 800dc18:	2263      	movs	r2, #99	; 0x63
 800dc1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 800dc1e:	e010      	b.n	800dc42 <func_tUartTimer+0x9a>
				case DIRECT_REQUEST_CODE:
					ShoreDirectRequest(uartBus[SHORE_UART].rxBuffer);
 800dc20:	4b21      	ldr	r3, [pc, #132]	; (800dca8 <func_tUartTimer+0x100>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	4618      	mov	r0, r3
 800dc26:	f7fe fe03 	bl	800c830 <ShoreDirectRequest>
					ShoreDirectResponse(uartBus[SHORE_UART].txBuffer);
 800dc2a:	4b1f      	ldr	r3, [pc, #124]	; (800dca8 <func_tUartTimer+0x100>)
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7fe ffea 	bl	800cc08 <ShoreDirectResponse>
					uartBus[SHORE_UART].txLength = SHORE_DIRECT_RESPONSE_LENGTH;
 800dc34:	4b1c      	ldr	r3, [pc, #112]	; (800dca8 <func_tUartTimer+0x100>)
 800dc36:	2206      	movs	r2, #6
 800dc38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 800dc3c:	e001      	b.n	800dc42 <func_tUartTimer+0x9a>
				default:
					package = false;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	73fb      	strb	r3, [r7, #15]
			}
			xSemaphoreGive(mutDataHandle);
 800dc42:	4b1a      	ldr	r3, [pc, #104]	; (800dcac <func_tUartTimer+0x104>)
 800dc44:	6818      	ldr	r0, [r3, #0]
 800dc46:	2300      	movs	r3, #0
 800dc48:	2200      	movs	r2, #0
 800dc4a:	2100      	movs	r1, #0
 800dc4c:	f7fa fabc 	bl	80081c8 <xQueueGenericSend>
		}
		if(package) {
 800dc50:	7bfb      	ldrb	r3, [r7, #15]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d010      	beq.n	800dc78 <func_tUartTimer+0xd0>
			HAL_UART_Transmit_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].txBuffer, uartBus[SHORE_UART].txLength);
 800dc56:	4b14      	ldr	r3, [pc, #80]	; (800dca8 <func_tUartTimer+0x100>)
 800dc58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc5a:	4a13      	ldr	r2, [pc, #76]	; (800dca8 <func_tUartTimer+0x100>)
 800dc5c:	6851      	ldr	r1, [r2, #4]
 800dc5e:	4a12      	ldr	r2, [pc, #72]	; (800dca8 <func_tUartTimer+0x100>)
 800dc60:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800dc64:	b292      	uxth	r2, r2
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7f7 ffec 	bl	8005c44 <HAL_UART_Transmit_IT>
 800dc6c:	e004      	b.n	800dc78 <func_tUartTimer+0xd0>
		}
	}
	else {
		++uartBus[SHORE_UART].outdatedRxCounter;
 800dc6e:	4b0e      	ldr	r3, [pc, #56]	; (800dca8 <func_tUartTimer+0x100>)
 800dc70:	691b      	ldr	r3, [r3, #16]
 800dc72:	3301      	adds	r3, #1
 800dc74:	4a0c      	ldr	r2, [pc, #48]	; (800dca8 <func_tUartTimer+0x100>)
 800dc76:	6113      	str	r3, [r2, #16]
	}
	counterRx = 0;
 800dc78:	4b0d      	ldr	r3, [pc, #52]	; (800dcb0 <func_tUartTimer+0x108>)
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	801a      	strh	r2, [r3, #0]
	uartBus[SHORE_UART].packageReceived = false;
 800dc7e:	4b0a      	ldr	r3, [pc, #40]	; (800dca8 <func_tUartTimer+0x100>)
 800dc80:	2200      	movs	r2, #0
 800dc82:	721a      	strb	r2, [r3, #8]
	HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 800dc84:	4b08      	ldr	r3, [pc, #32]	; (800dca8 <func_tUartTimer+0x100>)
 800dc86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f7f8 f9ed 	bl	8006068 <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 800dc8e:	4b06      	ldr	r3, [pc, #24]	; (800dca8 <func_tUartTimer+0x100>)
 800dc90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc92:	4a05      	ldr	r2, [pc, #20]	; (800dca8 <func_tUartTimer+0x100>)
 800dc94:	6811      	ldr	r1, [r2, #0]
 800dc96:	2201      	movs	r2, #1
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7f8 f841 	bl	8005d20 <HAL_UART_Receive_IT>
  /* USER CODE END func_tUartTimer */
}
 800dc9e:	bf00      	nop
 800dca0:	3710      	adds	r7, #16
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	2000087c 	.word	0x2000087c
 800dcac:	20001cf8 	.word	0x20001cf8
 800dcb0:	20000964 	.word	0x20000964

0800dcb4 <tSilence_func>:

/* tSilence_func function */
void tSilence_func(void const * argument)
{
 800dcb4:	b590      	push	{r4, r7, lr}
 800dcb6:	b087      	sub	sp, #28
 800dcb8:	af02      	add	r7, sp, #8
 800dcba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tSilence_func */
	if(fromTickToMs(xTaskGetTickCount()) - uartBus[SHORE_UART].lastMessage > UART_SWITCH_DELAY && counterRx == 0) {
 800dcbc:	f7fb fafa 	bl	80092b4 <xTaskGetTickCount>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7fd f842 	bl	800ad4c <fromTickToMs>
 800dcc8:	eeb0 7a40 	vmov.f32	s14, s0
 800dccc:	4b28      	ldr	r3, [pc, #160]	; (800dd70 <tSilence_func+0xbc>)
 800dcce:	edd3 7a06 	vldr	s15, [r3, #24]
 800dcd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dcd6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800dd74 <tSilence_func+0xc0>
 800dcda:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dcde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dce2:	dd34      	ble.n	800dd4e <tSilence_func+0x9a>
 800dce4:	4b24      	ldr	r3, [pc, #144]	; (800dd78 <tSilence_func+0xc4>)
 800dce6:	881b      	ldrh	r3, [r3, #0]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d130      	bne.n	800dd4e <tSilence_func+0x9a>
//			uartBus[SHORE_UART].huart = &huart5;
//		}
//		else if(uartBus[SHORE_UART].huart == &huart5) {
//			uartBus[SHORE_UART].huart = &huart1;
//		}
		HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 800dcec:	4b20      	ldr	r3, [pc, #128]	; (800dd70 <tSilence_func+0xbc>)
 800dcee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7f8 f9b9 	bl	8006068 <HAL_UART_AbortReceive_IT>
		HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 800dcf6:	4b1e      	ldr	r3, [pc, #120]	; (800dd70 <tSilence_func+0xbc>)
 800dcf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcfa:	4a1d      	ldr	r2, [pc, #116]	; (800dd70 <tSilence_func+0xbc>)
 800dcfc:	6811      	ldr	r1, [r2, #0]
 800dcfe:	2201      	movs	r2, #1
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7f8 f80d 	bl	8005d20 <HAL_UART_Receive_IT>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 800dd06:	4b1d      	ldr	r3, [pc, #116]	; (800dd7c <tSilence_func+0xc8>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2105      	movs	r1, #5
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f7fa fcd1 	bl	80086b4 <xQueueSemaphoreTake>
 800dd12:	4603      	mov	r3, r0
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d11a      	bne.n	800dd4e <tSilence_func+0x9a>
			resetThrusters();
 800dd18:	f001 fa08 	bl	800f12c <resetThrusters>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	73fb      	strb	r3, [r7, #15]
 800dd20:	e00b      	b.n	800dd3a <tSilence_func+0x86>
				rStabConstants[i].enable = false;
 800dd22:	7bfa      	ldrb	r2, [r7, #15]
 800dd24:	4916      	ldr	r1, [pc, #88]	; (800dd80 <tSilence_func+0xcc>)
 800dd26:	4613      	mov	r3, r2
 800dd28:	00db      	lsls	r3, r3, #3
 800dd2a:	4413      	add	r3, r2
 800dd2c:	00db      	lsls	r3, r3, #3
 800dd2e:	440b      	add	r3, r1
 800dd30:	2200      	movs	r2, #0
 800dd32:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800dd34:	7bfb      	ldrb	r3, [r7, #15]
 800dd36:	3301      	adds	r3, #1
 800dd38:	73fb      	strb	r3, [r7, #15]
 800dd3a:	7bfb      	ldrb	r3, [r7, #15]
 800dd3c:	2b05      	cmp	r3, #5
 800dd3e:	d9f0      	bls.n	800dd22 <tSilence_func+0x6e>
			}
			xSemaphoreGive(mutDataHandle);
 800dd40:	4b0e      	ldr	r3, [pc, #56]	; (800dd7c <tSilence_func+0xc8>)
 800dd42:	6818      	ldr	r0, [r3, #0]
 800dd44:	2300      	movs	r3, #0
 800dd46:	2200      	movs	r2, #0
 800dd48:	2100      	movs	r1, #0
 800dd4a:	f7fa fa3d 	bl	80081c8 <xQueueGenericSend>
//			break;
//			}
		}
//	}
	//HAL_GPIO_WritePin(GPIOE, RES_PC_2_Pin, GPIO_PIN_SET); // ONOFF
	xTimerStart(SilenceTimer, 50);
 800dd4e:	4b0d      	ldr	r3, [pc, #52]	; (800dd84 <tSilence_func+0xd0>)
 800dd50:	681c      	ldr	r4, [r3, #0]
 800dd52:	f7fb faaf 	bl	80092b4 <xTaskGetTickCount>
 800dd56:	4602      	mov	r2, r0
 800dd58:	2332      	movs	r3, #50	; 0x32
 800dd5a:	9300      	str	r3, [sp, #0]
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	2101      	movs	r1, #1
 800dd60:	4620      	mov	r0, r4
 800dd62:	f7fc f91b 	bl	8009f9c <xTimerGenericCommand>
  /* USER CODE END tSilence_func */
}
 800dd66:	bf00      	nop
 800dd68:	3714      	adds	r7, #20
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd90      	pop	{r4, r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	2000087c 	.word	0x2000087c
 800dd74:	447a0000 	.word	0x447a0000
 800dd78:	20000964 	.word	0x20000964
 800dd7c:	20001cf8 	.word	0x20001cf8
 800dd80:	20002660 	.word	0x20002660
 800dd84:	20000970 	.word	0x20000970

0800dd88 <tTechCommTImer_callback>:

/* tTechCommTImer_callback function */
void tTechCommTImer_callback(void const * argument)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b083      	sub	sp, #12
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tTechCommTImer_callback */

  /* USER CODE END tTechCommTImer_callback */
}
 800dd90:	bf00      	nop
 800dd92:	370c      	adds	r7, #12
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr

0800dd9c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA12   ------> CAN_TX
*/
void MX_GPIO_Init(void)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b08a      	sub	sp, #40	; 0x28
 800dda0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dda2:	f107 0314 	add.w	r3, r7, #20
 800dda6:	2200      	movs	r2, #0
 800dda8:	601a      	str	r2, [r3, #0]
 800ddaa:	605a      	str	r2, [r3, #4]
 800ddac:	609a      	str	r2, [r3, #8]
 800ddae:	60da      	str	r2, [r3, #12]
 800ddb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800ddb2:	4b3f      	ldr	r3, [pc, #252]	; (800deb0 <MX_GPIO_Init+0x114>)
 800ddb4:	695b      	ldr	r3, [r3, #20]
 800ddb6:	4a3e      	ldr	r2, [pc, #248]	; (800deb0 <MX_GPIO_Init+0x114>)
 800ddb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ddbc:	6153      	str	r3, [r2, #20]
 800ddbe:	4b3c      	ldr	r3, [pc, #240]	; (800deb0 <MX_GPIO_Init+0x114>)
 800ddc0:	695b      	ldr	r3, [r3, #20]
 800ddc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ddc6:	613b      	str	r3, [r7, #16]
 800ddc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ddca:	4b39      	ldr	r3, [pc, #228]	; (800deb0 <MX_GPIO_Init+0x114>)
 800ddcc:	695b      	ldr	r3, [r3, #20]
 800ddce:	4a38      	ldr	r2, [pc, #224]	; (800deb0 <MX_GPIO_Init+0x114>)
 800ddd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ddd4:	6153      	str	r3, [r2, #20]
 800ddd6:	4b36      	ldr	r3, [pc, #216]	; (800deb0 <MX_GPIO_Init+0x114>)
 800ddd8:	695b      	ldr	r3, [r3, #20]
 800ddda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ddde:	60fb      	str	r3, [r7, #12]
 800dde0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800dde2:	4b33      	ldr	r3, [pc, #204]	; (800deb0 <MX_GPIO_Init+0x114>)
 800dde4:	695b      	ldr	r3, [r3, #20]
 800dde6:	4a32      	ldr	r2, [pc, #200]	; (800deb0 <MX_GPIO_Init+0x114>)
 800dde8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ddec:	6153      	str	r3, [r2, #20]
 800ddee:	4b30      	ldr	r3, [pc, #192]	; (800deb0 <MX_GPIO_Init+0x114>)
 800ddf0:	695b      	ldr	r3, [r3, #20]
 800ddf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ddf6:	60bb      	str	r3, [r7, #8]
 800ddf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ddfa:	4b2d      	ldr	r3, [pc, #180]	; (800deb0 <MX_GPIO_Init+0x114>)
 800ddfc:	695b      	ldr	r3, [r3, #20]
 800ddfe:	4a2c      	ldr	r2, [pc, #176]	; (800deb0 <MX_GPIO_Init+0x114>)
 800de00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de04:	6153      	str	r3, [r2, #20]
 800de06:	4b2a      	ldr	r3, [pc, #168]	; (800deb0 <MX_GPIO_Init+0x114>)
 800de08:	695b      	ldr	r3, [r3, #20]
 800de0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800de0e:	607b      	str	r3, [r7, #4]
 800de10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800de12:	4b27      	ldr	r3, [pc, #156]	; (800deb0 <MX_GPIO_Init+0x114>)
 800de14:	695b      	ldr	r3, [r3, #20]
 800de16:	4a26      	ldr	r2, [pc, #152]	; (800deb0 <MX_GPIO_Init+0x114>)
 800de18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800de1c:	6153      	str	r3, [r2, #20]
 800de1e:	4b24      	ldr	r3, [pc, #144]	; (800deb0 <MX_GPIO_Init+0x114>)
 800de20:	695b      	ldr	r3, [r3, #20]
 800de22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800de26:	603b      	str	r3, [r7, #0]
 800de28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led1_Pin|led2_Pin|led3_Pin, GPIO_PIN_RESET);
 800de2a:	2200      	movs	r2, #0
 800de2c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800de30:	4820      	ldr	r0, [pc, #128]	; (800deb4 <MX_GPIO_Init+0x118>)
 800de32:	f7f3 ff89 	bl	8001d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_DE_GPIO_Port, RE_DE_Pin, GPIO_PIN_RESET);
 800de36:	2200      	movs	r2, #0
 800de38:	f44f 7180 	mov.w	r1, #256	; 0x100
 800de3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800de40:	f7f3 ff82 	bl	8001d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin;
 800de44:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800de48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800de4a:	2301      	movs	r3, #1
 800de4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de4e:	2300      	movs	r3, #0
 800de50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800de52:	2300      	movs	r3, #0
 800de54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800de56:	f107 0314 	add.w	r3, r7, #20
 800de5a:	4619      	mov	r1, r3
 800de5c:	4815      	ldr	r0, [pc, #84]	; (800deb4 <MX_GPIO_Init+0x118>)
 800de5e:	f7f3 fdf9 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RE_DE_Pin;
 800de62:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800de68:	2301      	movs	r3, #1
 800de6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de6c:	2300      	movs	r3, #0
 800de6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800de70:	2300      	movs	r3, #0
 800de72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RE_DE_GPIO_Port, &GPIO_InitStruct);
 800de74:	f107 0314 	add.w	r3, r7, #20
 800de78:	4619      	mov	r1, r3
 800de7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800de7e:	f7f3 fde9 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800de82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de88:	2302      	movs	r3, #2
 800de8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de8c:	2300      	movs	r3, #0
 800de8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800de90:	2303      	movs	r3, #3
 800de92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800de94:	2309      	movs	r3, #9
 800de96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800de98:	f107 0314 	add.w	r3, r7, #20
 800de9c:	4619      	mov	r1, r3
 800de9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dea2:	f7f3 fdd7 	bl	8001a54 <HAL_GPIO_Init>

}
 800dea6:	bf00      	nop
 800dea8:	3728      	adds	r7, #40	; 0x28
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
 800deae:	bf00      	nop
 800deb0:	40021000 	.word	0x40021000
 800deb4:	48000400 	.word	0x48000400

0800deb8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800debc:	4b1b      	ldr	r3, [pc, #108]	; (800df2c <MX_I2C1_Init+0x74>)
 800debe:	4a1c      	ldr	r2, [pc, #112]	; (800df30 <MX_I2C1_Init+0x78>)
 800dec0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 800dec2:	4b1a      	ldr	r3, [pc, #104]	; (800df2c <MX_I2C1_Init+0x74>)
 800dec4:	4a1b      	ldr	r2, [pc, #108]	; (800df34 <MX_I2C1_Init+0x7c>)
 800dec6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800dec8:	4b18      	ldr	r3, [pc, #96]	; (800df2c <MX_I2C1_Init+0x74>)
 800deca:	2200      	movs	r2, #0
 800decc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800dece:	4b17      	ldr	r3, [pc, #92]	; (800df2c <MX_I2C1_Init+0x74>)
 800ded0:	2201      	movs	r2, #1
 800ded2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ded4:	4b15      	ldr	r3, [pc, #84]	; (800df2c <MX_I2C1_Init+0x74>)
 800ded6:	2200      	movs	r2, #0
 800ded8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800deda:	4b14      	ldr	r3, [pc, #80]	; (800df2c <MX_I2C1_Init+0x74>)
 800dedc:	2200      	movs	r2, #0
 800dede:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800dee0:	4b12      	ldr	r3, [pc, #72]	; (800df2c <MX_I2C1_Init+0x74>)
 800dee2:	2200      	movs	r2, #0
 800dee4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800dee6:	4b11      	ldr	r3, [pc, #68]	; (800df2c <MX_I2C1_Init+0x74>)
 800dee8:	2200      	movs	r2, #0
 800deea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800deec:	4b0f      	ldr	r3, [pc, #60]	; (800df2c <MX_I2C1_Init+0x74>)
 800deee:	2200      	movs	r2, #0
 800def0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800def2:	480e      	ldr	r0, [pc, #56]	; (800df2c <MX_I2C1_Init+0x74>)
 800def4:	f7f3 ff5a 	bl	8001dac <HAL_I2C_Init>
 800def8:	4603      	mov	r3, r0
 800defa:	2b00      	cmp	r3, #0
 800defc:	d001      	beq.n	800df02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800defe:	f000 f901 	bl	800e104 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800df02:	2100      	movs	r1, #0
 800df04:	4809      	ldr	r0, [pc, #36]	; (800df2c <MX_I2C1_Init+0x74>)
 800df06:	f7f5 fe29 	bl	8003b5c <HAL_I2CEx_ConfigAnalogFilter>
 800df0a:	4603      	mov	r3, r0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d001      	beq.n	800df14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800df10:	f000 f8f8 	bl	800e104 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800df14:	2100      	movs	r1, #0
 800df16:	4805      	ldr	r0, [pc, #20]	; (800df2c <MX_I2C1_Init+0x74>)
 800df18:	f7f5 fe6b 	bl	8003bf2 <HAL_I2CEx_ConfigDigitalFilter>
 800df1c:	4603      	mov	r3, r0
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d001      	beq.n	800df26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800df22:	f000 f8ef 	bl	800e104 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800df26:	bf00      	nop
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	bf00      	nop
 800df2c:	20002b94 	.word	0x20002b94
 800df30:	40005400 	.word	0x40005400
 800df34:	10808dd3 	.word	0x10808dd3

0800df38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b08a      	sub	sp, #40	; 0x28
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df40:	f107 0314 	add.w	r3, r7, #20
 800df44:	2200      	movs	r2, #0
 800df46:	601a      	str	r2, [r3, #0]
 800df48:	605a      	str	r2, [r3, #4]
 800df4a:	609a      	str	r2, [r3, #8]
 800df4c:	60da      	str	r2, [r3, #12]
 800df4e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4a1b      	ldr	r2, [pc, #108]	; (800dfc4 <HAL_I2C_MspInit+0x8c>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d12f      	bne.n	800dfba <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800df5a:	4b1b      	ldr	r3, [pc, #108]	; (800dfc8 <HAL_I2C_MspInit+0x90>)
 800df5c:	695b      	ldr	r3, [r3, #20]
 800df5e:	4a1a      	ldr	r2, [pc, #104]	; (800dfc8 <HAL_I2C_MspInit+0x90>)
 800df60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800df64:	6153      	str	r3, [r2, #20]
 800df66:	4b18      	ldr	r3, [pc, #96]	; (800dfc8 <HAL_I2C_MspInit+0x90>)
 800df68:	695b      	ldr	r3, [r3, #20]
 800df6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800df6e:	613b      	str	r3, [r7, #16]
 800df70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800df72:	23c0      	movs	r3, #192	; 0xc0
 800df74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800df76:	2312      	movs	r3, #18
 800df78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df7a:	2300      	movs	r3, #0
 800df7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800df7e:	2303      	movs	r3, #3
 800df80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800df82:	2304      	movs	r3, #4
 800df84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800df86:	f107 0314 	add.w	r3, r7, #20
 800df8a:	4619      	mov	r1, r3
 800df8c:	480f      	ldr	r0, [pc, #60]	; (800dfcc <HAL_I2C_MspInit+0x94>)
 800df8e:	f7f3 fd61 	bl	8001a54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800df92:	4b0d      	ldr	r3, [pc, #52]	; (800dfc8 <HAL_I2C_MspInit+0x90>)
 800df94:	69db      	ldr	r3, [r3, #28]
 800df96:	4a0c      	ldr	r2, [pc, #48]	; (800dfc8 <HAL_I2C_MspInit+0x90>)
 800df98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800df9c:	61d3      	str	r3, [r2, #28]
 800df9e:	4b0a      	ldr	r3, [pc, #40]	; (800dfc8 <HAL_I2C_MspInit+0x90>)
 800dfa0:	69db      	ldr	r3, [r3, #28]
 800dfa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dfa6:	60fb      	str	r3, [r7, #12]
 800dfa8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800dfaa:	2200      	movs	r2, #0
 800dfac:	2105      	movs	r1, #5
 800dfae:	201f      	movs	r0, #31
 800dfb0:	f7f3 f916 	bl	80011e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800dfb4:	201f      	movs	r0, #31
 800dfb6:	f7f3 f92f 	bl	8001218 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800dfba:	bf00      	nop
 800dfbc:	3728      	adds	r7, #40	; 0x28
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	40005400 	.word	0x40005400
 800dfc8:	40021000 	.word	0x40021000
 800dfcc:	48000400 	.word	0x48000400

0800dfd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800dfd4:	f7f2 fff2 	bl	8000fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800dfd8:	f000 f81c 	bl	800e014 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800dfdc:	f7ff fede 	bl	800dd9c <MX_GPIO_Init>
  MX_DMA_Init();
 800dfe0:	f7fe fee6 	bl	800cdb0 <MX_DMA_Init>
  MX_TIM7_Init();
 800dfe4:	f001 fa94 	bl	800f510 <MX_TIM7_Init>
  MX_UART4_Init();
 800dfe8:	f001 fae8 	bl	800f5bc <MX_UART4_Init>
  MX_USART1_UART_Init();
 800dfec:	f001 fb16 	bl	800f61c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800dff0:	f001 fb44 	bl	800f67c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800dff4:	f001 fb76 	bl	800f6e4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800dff8:	f7ff ff5e 	bl	800deb8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

//  HAL_Delay(30e3); //30 seconds delay to start PC
  MS5837_02BA_init(&hi2c1);
 800dffc:	4804      	ldr	r0, [pc, #16]	; (800e010 <main+0x40>)
 800dffe:	f7fc fed1 	bl	800ada4 <MS5837_02BA_init>
  MS5837_02BA_reset_pressure();
 800e002:	f7fd f8a1 	bl	800b148 <MS5837_02BA_reset_pressure>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800e006:	f7ff fa9d 	bl	800d544 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800e00a:	f7f9 fdc5 	bl	8007b98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800e00e:	e7fe      	b.n	800e00e <main+0x3e>
 800e010:	20002b94 	.word	0x20002b94

0800e014 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b09e      	sub	sp, #120	; 0x78
 800e018:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e01a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e01e:	2228      	movs	r2, #40	; 0x28
 800e020:	2100      	movs	r1, #0
 800e022:	4618      	mov	r0, r3
 800e024:	f001 fe14 	bl	800fc50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e028:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e02c:	2200      	movs	r2, #0
 800e02e:	601a      	str	r2, [r3, #0]
 800e030:	605a      	str	r2, [r3, #4]
 800e032:	609a      	str	r2, [r3, #8]
 800e034:	60da      	str	r2, [r3, #12]
 800e036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e038:	463b      	mov	r3, r7
 800e03a:	223c      	movs	r2, #60	; 0x3c
 800e03c:	2100      	movs	r1, #0
 800e03e:	4618      	mov	r0, r3
 800e040:	f001 fe06 	bl	800fc50 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800e044:	2301      	movs	r3, #1
 800e046:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800e048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e04c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800e04e:	2300      	movs	r3, #0
 800e050:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800e052:	2301      	movs	r3, #1
 800e054:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e056:	2302      	movs	r3, #2
 800e058:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e05a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e05e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800e060:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800e064:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e066:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7f5 fe0e 	bl	8003c8c <HAL_RCC_OscConfig>
 800e070:	4603      	mov	r3, r0
 800e072:	2b00      	cmp	r3, #0
 800e074:	d001      	beq.n	800e07a <SystemClock_Config+0x66>
  {
    Error_Handler();
 800e076:	f000 f845 	bl	800e104 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e07a:	230f      	movs	r3, #15
 800e07c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e07e:	2302      	movs	r3, #2
 800e080:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e082:	2300      	movs	r3, #0
 800e084:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800e086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e08a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800e08c:	2300      	movs	r3, #0
 800e08e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800e090:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e094:	2102      	movs	r1, #2
 800e096:	4618      	mov	r0, r3
 800e098:	f7f6 fe36 	bl	8004d08 <HAL_RCC_ClockConfig>
 800e09c:	4603      	mov	r3, r0
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d001      	beq.n	800e0a6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800e0a2:	f000 f82f 	bl	800e104 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800e0a6:	232f      	movs	r3, #47	; 0x2f
 800e0a8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800e0ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e0b2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 800e0b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e0b8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 800e0ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e0be:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800e0c0:	2310      	movs	r3, #16
 800e0c2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e0c4:	463b      	mov	r3, r7
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7f7 f886 	bl	80051d8 <HAL_RCCEx_PeriphCLKConfig>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d001      	beq.n	800e0d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800e0d2:	f000 f817 	bl	800e104 <Error_Handler>
  }
}
 800e0d6:	bf00      	nop
 800e0d8:	3778      	adds	r7, #120	; 0x78
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}
	...

0800e0e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b082      	sub	sp, #8
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4a04      	ldr	r2, [pc, #16]	; (800e100 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	d101      	bne.n	800e0f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800e0f2:	f7f2 ff79 	bl	8000fe8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800e0f6:	bf00      	nop
 800e0f8:	3708      	adds	r7, #8
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	bf00      	nop
 800e100:	40012c00 	.word	0x40012c00

0800e104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e104:	b480      	push	{r7}
 800e106:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800e108:	b672      	cpsid	i
}
 800e10a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800e10c:	e7fe      	b.n	800e10c <Error_Handler+0x8>
	...

0800e110 <stabilizationInit>:
#include "FreeRTOSTick.h"
#include "math.h"
#include "robot.h"

void stabilizationInit()
{
 800e110:	b480      	push	{r7}
 800e112:	b083      	sub	sp, #12
 800e114:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800e116:	2300      	movs	r3, #0
 800e118:	71fb      	strb	r3, [r7, #7]
 800e11a:	e16d      	b.n	800e3f8 <stabilizationInit+0x2e8>
		rStabConstants[i].enable = false;
 800e11c:	79fa      	ldrb	r2, [r7, #7]
 800e11e:	49c1      	ldr	r1, [pc, #772]	; (800e424 <stabilizationInit+0x314>)
 800e120:	4613      	mov	r3, r2
 800e122:	00db      	lsls	r3, r3, #3
 800e124:	4413      	add	r3, r2
 800e126:	00db      	lsls	r3, r3, #3
 800e128:	440b      	add	r3, r1
 800e12a:	2200      	movs	r2, #0
 800e12c:	701a      	strb	r2, [r3, #0]

		rStabState[i].speedIntegral = 0;
 800e12e:	79fb      	ldrb	r3, [r7, #7]
 800e130:	4abd      	ldr	r2, [pc, #756]	; (800e428 <stabilizationInit+0x318>)
 800e132:	2158      	movs	r1, #88	; 0x58
 800e134:	fb01 f303 	mul.w	r3, r1, r3
 800e138:	4413      	add	r3, r2
 800e13a:	330c      	adds	r3, #12
 800e13c:	f04f 0200 	mov.w	r2, #0
 800e140:	601a      	str	r2, [r3, #0]
		rStabState[i].posDerivative = 0;
 800e142:	79fb      	ldrb	r3, [r7, #7]
 800e144:	4ab8      	ldr	r2, [pc, #736]	; (800e428 <stabilizationInit+0x318>)
 800e146:	2158      	movs	r1, #88	; 0x58
 800e148:	fb01 f303 	mul.w	r3, r1, r3
 800e14c:	4413      	add	r3, r2
 800e14e:	3310      	adds	r3, #16
 800e150:	f04f 0200 	mov.w	r2, #0
 800e154:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeed = 0;
 800e156:	79fb      	ldrb	r3, [r7, #7]
 800e158:	4ab3      	ldr	r2, [pc, #716]	; (800e428 <stabilizationInit+0x318>)
 800e15a:	2158      	movs	r1, #88	; 0x58
 800e15c:	fb01 f303 	mul.w	r3, r1, r3
 800e160:	4413      	add	r3, r2
 800e162:	3314      	adds	r3, #20
 800e164:	f04f 0200 	mov.w	r2, #0
 800e168:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPos = 0;
 800e16a:	79fb      	ldrb	r3, [r7, #7]
 800e16c:	4aae      	ldr	r2, [pc, #696]	; (800e428 <stabilizationInit+0x318>)
 800e16e:	2158      	movs	r1, #88	; 0x58
 800e170:	fb01 f303 	mul.w	r3, r1, r3
 800e174:	4413      	add	r3, r2
 800e176:	3318      	adds	r3, #24
 800e178:	f04f 0200 	mov.w	r2, #0
 800e17c:	601a      	str	r2, [r3, #0]

		rStabState[i].joyUnitCasted = 0;
 800e17e:	79fb      	ldrb	r3, [r7, #7]
 800e180:	4aa9      	ldr	r2, [pc, #676]	; (800e428 <stabilizationInit+0x318>)
 800e182:	2158      	movs	r1, #88	; 0x58
 800e184:	fb01 f303 	mul.w	r3, r1, r3
 800e188:	4413      	add	r3, r2
 800e18a:	331c      	adds	r3, #28
 800e18c:	f04f 0200 	mov.w	r2, #0
 800e190:	601a      	str	r2, [r3, #0]
		rStabState[i].joy_iValue = 0;
 800e192:	79fb      	ldrb	r3, [r7, #7]
 800e194:	4aa4      	ldr	r2, [pc, #656]	; (800e428 <stabilizationInit+0x318>)
 800e196:	2158      	movs	r1, #88	; 0x58
 800e198:	fb01 f303 	mul.w	r3, r1, r3
 800e19c:	4413      	add	r3, r2
 800e19e:	3320      	adds	r3, #32
 800e1a0:	f04f 0200 	mov.w	r2, #0
 800e1a4:	601a      	str	r2, [r3, #0]
		rStabState[i].posError = 0;
 800e1a6:	79fb      	ldrb	r3, [r7, #7]
 800e1a8:	4a9f      	ldr	r2, [pc, #636]	; (800e428 <stabilizationInit+0x318>)
 800e1aa:	2158      	movs	r1, #88	; 0x58
 800e1ac:	fb01 f303 	mul.w	r3, r1, r3
 800e1b0:	4413      	add	r3, r2
 800e1b2:	3324      	adds	r3, #36	; 0x24
 800e1b4:	f04f 0200 	mov.w	r2, #0
 800e1b8:	601a      	str	r2, [r3, #0]
		rStabState[i].speedError = 0;
 800e1ba:	79fb      	ldrb	r3, [r7, #7]
 800e1bc:	4a9a      	ldr	r2, [pc, #616]	; (800e428 <stabilizationInit+0x318>)
 800e1be:	2158      	movs	r1, #88	; 0x58
 800e1c0:	fb01 f303 	mul.w	r3, r1, r3
 800e1c4:	4413      	add	r3, r2
 800e1c6:	3328      	adds	r3, #40	; 0x28
 800e1c8:	f04f 0200 	mov.w	r2, #0
 800e1cc:	601a      	str	r2, [r3, #0]
		rStabState[i].dynSummator = 0;
 800e1ce:	79fb      	ldrb	r3, [r7, #7]
 800e1d0:	4a95      	ldr	r2, [pc, #596]	; (800e428 <stabilizationInit+0x318>)
 800e1d2:	2158      	movs	r1, #88	; 0x58
 800e1d4:	fb01 f303 	mul.w	r3, r1, r3
 800e1d8:	4413      	add	r3, r2
 800e1da:	332c      	adds	r3, #44	; 0x2c
 800e1dc:	f04f 0200 	mov.w	r2, #0
 800e1e0:	601a      	str	r2, [r3, #0]
		rStabState[i].pidValue = 0;
 800e1e2:	79fb      	ldrb	r3, [r7, #7]
 800e1e4:	4a90      	ldr	r2, [pc, #576]	; (800e428 <stabilizationInit+0x318>)
 800e1e6:	2158      	movs	r1, #88	; 0x58
 800e1e8:	fb01 f303 	mul.w	r3, r1, r3
 800e1ec:	4413      	add	r3, r2
 800e1ee:	3330      	adds	r3, #48	; 0x30
 800e1f0:	f04f 0200 	mov.w	r2, #0
 800e1f4:	601a      	str	r2, [r3, #0]
		rStabState[i].pid_iValue = 0;
 800e1f6:	79fb      	ldrb	r3, [r7, #7]
 800e1f8:	4a8b      	ldr	r2, [pc, #556]	; (800e428 <stabilizationInit+0x318>)
 800e1fa:	2158      	movs	r1, #88	; 0x58
 800e1fc:	fb01 f303 	mul.w	r3, r1, r3
 800e200:	4413      	add	r3, r2
 800e202:	3334      	adds	r3, #52	; 0x34
 800e204:	f04f 0200 	mov.w	r2, #0
 800e208:	601a      	str	r2, [r3, #0]
		rStabState[i].posErrorAmp = 0;
 800e20a:	79fb      	ldrb	r3, [r7, #7]
 800e20c:	4a86      	ldr	r2, [pc, #536]	; (800e428 <stabilizationInit+0x318>)
 800e20e:	2158      	movs	r1, #88	; 0x58
 800e210:	fb01 f303 	mul.w	r3, r1, r3
 800e214:	4413      	add	r3, r2
 800e216:	3338      	adds	r3, #56	; 0x38
 800e218:	f04f 0200 	mov.w	r2, #0
 800e21c:	601a      	str	r2, [r3, #0]
		rStabState[i].speedFiltered = 0;
 800e21e:	79fb      	ldrb	r3, [r7, #7]
 800e220:	4a81      	ldr	r2, [pc, #516]	; (800e428 <stabilizationInit+0x318>)
 800e222:	2158      	movs	r1, #88	; 0x58
 800e224:	fb01 f303 	mul.w	r3, r1, r3
 800e228:	4413      	add	r3, r2
 800e22a:	333c      	adds	r3, #60	; 0x3c
 800e22c:	f04f 0200 	mov.w	r2, #0
 800e230:	601a      	str	r2, [r3, #0]
		rStabState[i].posFiltered = 0;
 800e232:	79fb      	ldrb	r3, [r7, #7]
 800e234:	4a7c      	ldr	r2, [pc, #496]	; (800e428 <stabilizationInit+0x318>)
 800e236:	2158      	movs	r1, #88	; 0x58
 800e238:	fb01 f303 	mul.w	r3, r1, r3
 800e23c:	4413      	add	r3, r2
 800e23e:	3340      	adds	r3, #64	; 0x40
 800e240:	f04f 0200 	mov.w	r2, #0
 800e244:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPosFiltered = 0;
 800e246:	79fb      	ldrb	r3, [r7, #7]
 800e248:	4a77      	ldr	r2, [pc, #476]	; (800e428 <stabilizationInit+0x318>)
 800e24a:	2158      	movs	r1, #88	; 0x58
 800e24c:	fb01 f303 	mul.w	r3, r1, r3
 800e250:	4413      	add	r3, r2
 800e252:	3344      	adds	r3, #68	; 0x44
 800e254:	f04f 0200 	mov.w	r2, #0
 800e258:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeedError = 0;
 800e25a:	79fb      	ldrb	r3, [r7, #7]
 800e25c:	4a72      	ldr	r2, [pc, #456]	; (800e428 <stabilizationInit+0x318>)
 800e25e:	2158      	movs	r1, #88	; 0x58
 800e260:	fb01 f303 	mul.w	r3, r1, r3
 800e264:	4413      	add	r3, r2
 800e266:	3348      	adds	r3, #72	; 0x48
 800e268:	f04f 0200 	mov.w	r2, #0
 800e26c:	601a      	str	r2, [r3, #0]
		rStabState[i].thrustersFiltered = 0;
 800e26e:	79fb      	ldrb	r3, [r7, #7]
 800e270:	4a6d      	ldr	r2, [pc, #436]	; (800e428 <stabilizationInit+0x318>)
 800e272:	2158      	movs	r1, #88	; 0x58
 800e274:	fb01 f303 	mul.w	r3, r1, r3
 800e278:	4413      	add	r3, r2
 800e27a:	334c      	adds	r3, #76	; 0x4c
 800e27c:	f04f 0200 	mov.w	r2, #0
 800e280:	601a      	str	r2, [r3, #0]
		rStabState[i].outputSignal = 0;
 800e282:	79fb      	ldrb	r3, [r7, #7]
 800e284:	4a68      	ldr	r2, [pc, #416]	; (800e428 <stabilizationInit+0x318>)
 800e286:	2158      	movs	r1, #88	; 0x58
 800e288:	fb01 f303 	mul.w	r3, r1, r3
 800e28c:	4413      	add	r3, r2
 800e28e:	3350      	adds	r3, #80	; 0x50
 800e290:	f04f 0200 	mov.w	r2, #0
 800e294:	601a      	str	r2, [r3, #0]

		rStabState[i].LastTick = 0;
 800e296:	79fb      	ldrb	r3, [r7, #7]
 800e298:	4a63      	ldr	r2, [pc, #396]	; (800e428 <stabilizationInit+0x318>)
 800e29a:	2158      	movs	r1, #88	; 0x58
 800e29c:	fb01 f303 	mul.w	r3, r1, r3
 800e2a0:	4413      	add	r3, r2
 800e2a2:	3354      	adds	r3, #84	; 0x54
 800e2a4:	f04f 0200 	mov.w	r2, #0
 800e2a8:	601a      	str	r2, [r3, #0]

		if(!rState.flash) {
 800e2aa:	4b60      	ldr	r3, [pc, #384]	; (800e42c <stabilizationInit+0x31c>)
 800e2ac:	789b      	ldrb	r3, [r3, #2]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	f040 809f 	bne.w	800e3f2 <stabilizationInit+0x2e2>
			rStabConstants[i].pJoyUnitCast = 1;
 800e2b4:	79fa      	ldrb	r2, [r7, #7]
 800e2b6:	495b      	ldr	r1, [pc, #364]	; (800e424 <stabilizationInit+0x314>)
 800e2b8:	4613      	mov	r3, r2
 800e2ba:	00db      	lsls	r3, r3, #3
 800e2bc:	4413      	add	r3, r2
 800e2be:	00db      	lsls	r3, r3, #3
 800e2c0:	440b      	add	r3, r1
 800e2c2:	3304      	adds	r3, #4
 800e2c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e2c8:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pSpeedDyn = 1;
 800e2ca:	79fa      	ldrb	r2, [r7, #7]
 800e2cc:	4955      	ldr	r1, [pc, #340]	; (800e424 <stabilizationInit+0x314>)
 800e2ce:	4613      	mov	r3, r2
 800e2d0:	00db      	lsls	r3, r3, #3
 800e2d2:	4413      	add	r3, r2
 800e2d4:	00db      	lsls	r3, r3, #3
 800e2d6:	440b      	add	r3, r1
 800e2d8:	3308      	adds	r3, #8
 800e2da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e2de:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pErrGain = 1;
 800e2e0:	79fa      	ldrb	r2, [r7, #7]
 800e2e2:	4950      	ldr	r1, [pc, #320]	; (800e424 <stabilizationInit+0x314>)
 800e2e4:	4613      	mov	r3, r2
 800e2e6:	00db      	lsls	r3, r3, #3
 800e2e8:	4413      	add	r3, r2
 800e2ea:	00db      	lsls	r3, r3, #3
 800e2ec:	440b      	add	r3, r1
 800e2ee:	330c      	adds	r3, #12
 800e2f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e2f4:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].T = 0;
 800e2f6:	79fa      	ldrb	r2, [r7, #7]
 800e2f8:	494a      	ldr	r1, [pc, #296]	; (800e424 <stabilizationInit+0x314>)
 800e2fa:	4613      	mov	r3, r2
 800e2fc:	00db      	lsls	r3, r3, #3
 800e2fe:	4413      	add	r3, r2
 800e300:	00db      	lsls	r3, r3, #3
 800e302:	440b      	add	r3, r1
 800e304:	3318      	adds	r3, #24
 800e306:	f04f 0200 	mov.w	r2, #0
 800e30a:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].K = 1;
 800e30c:	79fa      	ldrb	r2, [r7, #7]
 800e30e:	4945      	ldr	r1, [pc, #276]	; (800e424 <stabilizationInit+0x314>)
 800e310:	4613      	mov	r3, r2
 800e312:	00db      	lsls	r3, r3, #3
 800e314:	4413      	add	r3, r2
 800e316:	00db      	lsls	r3, r3, #3
 800e318:	440b      	add	r3, r1
 800e31a:	331c      	adds	r3, #28
 800e31c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e320:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].T = 0;
 800e322:	79fa      	ldrb	r2, [r7, #7]
 800e324:	493f      	ldr	r1, [pc, #252]	; (800e424 <stabilizationInit+0x314>)
 800e326:	4613      	mov	r3, r2
 800e328:	00db      	lsls	r3, r3, #3
 800e32a:	4413      	add	r3, r2
 800e32c:	00db      	lsls	r3, r3, #3
 800e32e:	440b      	add	r3, r1
 800e330:	3310      	adds	r3, #16
 800e332:	f04f 0200 	mov.w	r2, #0
 800e336:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].K = 1;
 800e338:	79fa      	ldrb	r2, [r7, #7]
 800e33a:	493a      	ldr	r1, [pc, #232]	; (800e424 <stabilizationInit+0x314>)
 800e33c:	4613      	mov	r3, r2
 800e33e:	00db      	lsls	r3, r3, #3
 800e340:	4413      	add	r3, r2
 800e342:	00db      	lsls	r3, r3, #3
 800e344:	440b      	add	r3, r1
 800e346:	3314      	adds	r3, #20
 800e348:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e34c:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.pGain = 1;
 800e34e:	79fa      	ldrb	r2, [r7, #7]
 800e350:	4934      	ldr	r1, [pc, #208]	; (800e424 <stabilizationInit+0x314>)
 800e352:	4613      	mov	r3, r2
 800e354:	00db      	lsls	r3, r3, #3
 800e356:	4413      	add	r3, r2
 800e358:	00db      	lsls	r3, r3, #3
 800e35a:	440b      	add	r3, r1
 800e35c:	3328      	adds	r3, #40	; 0x28
 800e35e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e362:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iGain = 1;
 800e364:	79fa      	ldrb	r2, [r7, #7]
 800e366:	492f      	ldr	r1, [pc, #188]	; (800e424 <stabilizationInit+0x314>)
 800e368:	4613      	mov	r3, r2
 800e36a:	00db      	lsls	r3, r3, #3
 800e36c:	4413      	add	r3, r2
 800e36e:	00db      	lsls	r3, r3, #3
 800e370:	440b      	add	r3, r1
 800e372:	332c      	adds	r3, #44	; 0x2c
 800e374:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e378:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMax = -1000;
 800e37a:	79fa      	ldrb	r2, [r7, #7]
 800e37c:	4929      	ldr	r1, [pc, #164]	; (800e424 <stabilizationInit+0x314>)
 800e37e:	4613      	mov	r3, r2
 800e380:	00db      	lsls	r3, r3, #3
 800e382:	4413      	add	r3, r2
 800e384:	00db      	lsls	r3, r3, #3
 800e386:	440b      	add	r3, r1
 800e388:	3330      	adds	r3, #48	; 0x30
 800e38a:	4a29      	ldr	r2, [pc, #164]	; (800e430 <stabilizationInit+0x320>)
 800e38c:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMin = 1000;
 800e38e:	79fa      	ldrb	r2, [r7, #7]
 800e390:	4924      	ldr	r1, [pc, #144]	; (800e424 <stabilizationInit+0x314>)
 800e392:	4613      	mov	r3, r2
 800e394:	00db      	lsls	r3, r3, #3
 800e396:	4413      	add	r3, r2
 800e398:	00db      	lsls	r3, r3, #3
 800e39a:	440b      	add	r3, r1
 800e39c:	3334      	adds	r3, #52	; 0x34
 800e39e:	4a25      	ldr	r2, [pc, #148]	; (800e434 <stabilizationInit+0x324>)
 800e3a0:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMax = 5000;
 800e3a2:	79fa      	ldrb	r2, [r7, #7]
 800e3a4:	491f      	ldr	r1, [pc, #124]	; (800e424 <stabilizationInit+0x314>)
 800e3a6:	4613      	mov	r3, r2
 800e3a8:	00db      	lsls	r3, r3, #3
 800e3aa:	4413      	add	r3, r2
 800e3ac:	00db      	lsls	r3, r3, #3
 800e3ae:	440b      	add	r3, r1
 800e3b0:	333c      	adds	r3, #60	; 0x3c
 800e3b2:	4a21      	ldr	r2, [pc, #132]	; (800e438 <stabilizationInit+0x328>)
 800e3b4:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMin = -5000;
 800e3b6:	79fa      	ldrb	r2, [r7, #7]
 800e3b8:	491a      	ldr	r1, [pc, #104]	; (800e424 <stabilizationInit+0x314>)
 800e3ba:	4613      	mov	r3, r2
 800e3bc:	00db      	lsls	r3, r3, #3
 800e3be:	4413      	add	r3, r2
 800e3c0:	00db      	lsls	r3, r3, #3
 800e3c2:	440b      	add	r3, r1
 800e3c4:	3338      	adds	r3, #56	; 0x38
 800e3c6:	4a1d      	ldr	r2, [pc, #116]	; (800e43c <stabilizationInit+0x32c>)
 800e3c8:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMax = 32000;
 800e3ca:	79fa      	ldrb	r2, [r7, #7]
 800e3cc:	4915      	ldr	r1, [pc, #84]	; (800e424 <stabilizationInit+0x314>)
 800e3ce:	4613      	mov	r3, r2
 800e3d0:	00db      	lsls	r3, r3, #3
 800e3d2:	4413      	add	r3, r2
 800e3d4:	00db      	lsls	r3, r3, #3
 800e3d6:	440b      	add	r3, r1
 800e3d8:	3340      	adds	r3, #64	; 0x40
 800e3da:	4a19      	ldr	r2, [pc, #100]	; (800e440 <stabilizationInit+0x330>)
 800e3dc:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMin = -32000;
 800e3de:	79fa      	ldrb	r2, [r7, #7]
 800e3e0:	4910      	ldr	r1, [pc, #64]	; (800e424 <stabilizationInit+0x314>)
 800e3e2:	4613      	mov	r3, r2
 800e3e4:	00db      	lsls	r3, r3, #3
 800e3e6:	4413      	add	r3, r2
 800e3e8:	00db      	lsls	r3, r3, #3
 800e3ea:	440b      	add	r3, r1
 800e3ec:	3344      	adds	r3, #68	; 0x44
 800e3ee:	4a15      	ldr	r2, [pc, #84]	; (800e444 <stabilizationInit+0x334>)
 800e3f0:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800e3f2:	79fb      	ldrb	r3, [r7, #7]
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	71fb      	strb	r3, [r7, #7]
 800e3f8:	79fb      	ldrb	r3, [r7, #7]
 800e3fa:	2b05      	cmp	r3, #5
 800e3fc:	f67f ae8e 	bls.w	800e11c <stabilizationInit+0xc>




	/////////////////////////////////////////////////////////////
    rStabState[STAB_ROLL].inputSignal = &rJoySpeed.roll;
 800e400:	4b09      	ldr	r3, [pc, #36]	; (800e428 <stabilizationInit+0x318>)
 800e402:	4a11      	ldr	r2, [pc, #68]	; (800e448 <stabilizationInit+0x338>)
 800e404:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    rStabState[STAB_ROLL].speedSignal = &rSensors.rollSpeed;
 800e408:	4b07      	ldr	r3, [pc, #28]	; (800e428 <stabilizationInit+0x318>)
 800e40a:	4a10      	ldr	r2, [pc, #64]	; (800e44c <stabilizationInit+0x33c>)
 800e40c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    rStabState[STAB_ROLL].posSignal = &rSensors.roll;
 800e410:	4b05      	ldr	r3, [pc, #20]	; (800e428 <stabilizationInit+0x318>)
 800e412:	4a0f      	ldr	r2, [pc, #60]	; (800e450 <stabilizationInit+0x340>)
 800e414:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    rStabConstants[STAB_ROLL].joyIntegration = false;
 800e418:	4b02      	ldr	r3, [pc, #8]	; (800e424 <stabilizationInit+0x314>)
 800e41a:	2200      	movs	r2, #0
 800e41c:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
 800e420:	e018      	b.n	800e454 <stabilizationInit+0x344>
 800e422:	bf00      	nop
 800e424:	20002660 	.word	0x20002660
 800e428:	20002810 	.word	0x20002810
 800e42c:	200024cc 	.word	0x200024cc
 800e430:	c47a0000 	.word	0xc47a0000
 800e434:	447a0000 	.word	0x447a0000
 800e438:	459c4000 	.word	0x459c4000
 800e43c:	c59c4000 	.word	0xc59c4000
 800e440:	46fa0000 	.word	0x46fa0000
 800e444:	c6fa0000 	.word	0xc6fa0000
 800e448:	20002614 	.word	0x20002614
 800e44c:	200025b4 	.word	0x200025b4
 800e450:	20002598 	.word	0x20002598
    /////////////////////////////////////////////////////////////
    rStabState[STAB_PITCH].inputSignal = &rJoySpeed.pitch;
 800e454:	4b86      	ldr	r3, [pc, #536]	; (800e670 <stabilizationInit+0x560>)
 800e456:	4a87      	ldr	r2, [pc, #540]	; (800e674 <stabilizationInit+0x564>)
 800e458:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    rStabState[STAB_PITCH].speedSignal = &rSensors.pitchSpeed;
 800e45c:	4b84      	ldr	r3, [pc, #528]	; (800e670 <stabilizationInit+0x560>)
 800e45e:	4a86      	ldr	r2, [pc, #536]	; (800e678 <stabilizationInit+0x568>)
 800e460:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    rStabState[STAB_PITCH].posSignal = &rSensors.pitch;
 800e464:	4b82      	ldr	r3, [pc, #520]	; (800e670 <stabilizationInit+0x560>)
 800e466:	4a85      	ldr	r2, [pc, #532]	; (800e67c <stabilizationInit+0x56c>)
 800e468:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    rStabConstants[STAB_PITCH].joyIntegration = true;
 800e46c:	4b84      	ldr	r3, [pc, #528]	; (800e680 <stabilizationInit+0x570>)
 800e46e:	2201      	movs	r2, #1
 800e470:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    /////////////////////////////////////////////////////////////
    rStabState[STAB_YAW].inputSignal = &rJoySpeed.yaw;
 800e474:	4b7e      	ldr	r3, [pc, #504]	; (800e670 <stabilizationInit+0x560>)
 800e476:	4a83      	ldr	r2, [pc, #524]	; (800e684 <stabilizationInit+0x574>)
 800e478:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    rStabState[STAB_YAW].speedSignal = &rSensors.yawSpeed;
 800e47c:	4b7c      	ldr	r3, [pc, #496]	; (800e670 <stabilizationInit+0x560>)
 800e47e:	4a82      	ldr	r2, [pc, #520]	; (800e688 <stabilizationInit+0x578>)
 800e480:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    rStabState[STAB_YAW].posSignal = &rSensors.yaw;//&rStabState[STAB_YAW].speedIntegral;
 800e484:	4b7a      	ldr	r3, [pc, #488]	; (800e670 <stabilizationInit+0x560>)
 800e486:	4a81      	ldr	r2, [pc, #516]	; (800e68c <stabilizationInit+0x57c>)
 800e488:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    rStabConstants[STAB_YAW].joyIntegration = true;
 800e48c:	4b7c      	ldr	r3, [pc, #496]	; (800e680 <stabilizationInit+0x570>)
 800e48e:	2201      	movs	r2, #1
 800e490:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
    /////////////////////////////////////////////////////////////
    rStabState[STAB_DEPTH].inputSignal = &rJoySpeed.depth;
 800e494:	4b76      	ldr	r3, [pc, #472]	; (800e670 <stabilizationInit+0x560>)
 800e496:	4a7e      	ldr	r2, [pc, #504]	; (800e690 <stabilizationInit+0x580>)
 800e498:	601a      	str	r2, [r3, #0]
    rStabState[STAB_DEPTH].speedSignal = &rSensors.velocity_pressure;//&rStabState[STAB_DEPTH].posDerivative;
 800e49a:	4b75      	ldr	r3, [pc, #468]	; (800e670 <stabilizationInit+0x560>)
 800e49c:	4a7d      	ldr	r2, [pc, #500]	; (800e694 <stabilizationInit+0x584>)
 800e49e:	605a      	str	r2, [r3, #4]
    rStabState[STAB_DEPTH].posSignal = &rSensors.pressure;
 800e4a0:	4b73      	ldr	r3, [pc, #460]	; (800e670 <stabilizationInit+0x560>)
 800e4a2:	4a7d      	ldr	r2, [pc, #500]	; (800e698 <stabilizationInit+0x588>)
 800e4a4:	609a      	str	r2, [r3, #8]
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 800e4a6:	4b76      	ldr	r3, [pc, #472]	; (800e680 <stabilizationInit+0x570>)
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	705a      	strb	r2, [r3, #1]
    /////////////////////////////////////////////////////////////
    rStabState[STAB_LAG].inputSignal = &rJoySpeed.lag;
 800e4ac:	4b70      	ldr	r3, [pc, #448]	; (800e670 <stabilizationInit+0x560>)
 800e4ae:	4a7b      	ldr	r2, [pc, #492]	; (800e69c <stabilizationInit+0x58c>)
 800e4b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    rStabState[STAB_LAG].speedSignal = &rStabState[STAB_LAG].posDerivative;
 800e4b4:	4b6e      	ldr	r3, [pc, #440]	; (800e670 <stabilizationInit+0x560>)
 800e4b6:	4a7a      	ldr	r2, [pc, #488]	; (800e6a0 <stabilizationInit+0x590>)
 800e4b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    rStabState[STAB_LAG].posSignal = &rState.lag_error;
 800e4bc:	4b6c      	ldr	r3, [pc, #432]	; (800e670 <stabilizationInit+0x560>)
 800e4be:	4a79      	ldr	r2, [pc, #484]	; (800e6a4 <stabilizationInit+0x594>)
 800e4c0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    rStabConstants[STAB_LAG].joyIntegration = false;
 800e4c4:	4b6e      	ldr	r3, [pc, #440]	; (800e680 <stabilizationInit+0x570>)
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    /////////////////////////////////////////////////////////////
    rStabState[STAB_MARCH].inputSignal = &rJoySpeed.march;
 800e4cc:	4b68      	ldr	r3, [pc, #416]	; (800e670 <stabilizationInit+0x560>)
 800e4ce:	4a76      	ldr	r2, [pc, #472]	; (800e6a8 <stabilizationInit+0x598>)
 800e4d0:	659a      	str	r2, [r3, #88]	; 0x58
    rStabState[STAB_MARCH].speedSignal = &rStabState[STAB_MARCH].posDerivative;
 800e4d2:	4b67      	ldr	r3, [pc, #412]	; (800e670 <stabilizationInit+0x560>)
 800e4d4:	4a75      	ldr	r2, [pc, #468]	; (800e6ac <stabilizationInit+0x59c>)
 800e4d6:	65da      	str	r2, [r3, #92]	; 0x5c
    rStabState[STAB_MARCH].posSignal = &rJoySpeed.march;
 800e4d8:	4b65      	ldr	r3, [pc, #404]	; (800e670 <stabilizationInit+0x560>)
 800e4da:	4a73      	ldr	r2, [pc, #460]	; (800e6a8 <stabilizationInit+0x598>)
 800e4dc:	661a      	str	r2, [r3, #96]	; 0x60
    rStabConstants[STAB_MARCH].joyIntegration = false;
 800e4de:	4b68      	ldr	r3, [pc, #416]	; (800e680 <stabilizationInit+0x570>)
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49


    //upload coef
	//rStabConstants[STAB_YAW].enable = true;

	rStabConstants[STAB_YAW].pJoyUnitCast = 1;
 800e4e6:	4b66      	ldr	r3, [pc, #408]	; (800e680 <stabilizationInit+0x570>)
 800e4e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e4ec:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	rStabConstants[STAB_YAW].pSpeedDyn = 0;
 800e4f0:	4b63      	ldr	r3, [pc, #396]	; (800e680 <stabilizationInit+0x570>)
 800e4f2:	f04f 0200 	mov.w	r2, #0
 800e4f6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	rStabConstants[STAB_YAW].pErrGain = 70;
 800e4fa:	4b61      	ldr	r3, [pc, #388]	; (800e680 <stabilizationInit+0x570>)
 800e4fc:	4a6c      	ldr	r2, [pc, #432]	; (800e6b0 <stabilizationInit+0x5a0>)
 800e4fe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].T = 0;
 800e502:	4b5f      	ldr	r3, [pc, #380]	; (800e680 <stabilizationInit+0x570>)
 800e504:	f04f 0200 	mov.w	r2, #0
 800e508:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].K = 120;
 800e50c:	4b5c      	ldr	r3, [pc, #368]	; (800e680 <stabilizationInit+0x570>)
 800e50e:	4a69      	ldr	r2, [pc, #420]	; (800e6b4 <stabilizationInit+0x5a4>)
 800e510:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].T = 0;
 800e514:	4b5a      	ldr	r3, [pc, #360]	; (800e680 <stabilizationInit+0x570>)
 800e516:	f04f 0200 	mov.w	r2, #0
 800e51a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].K = 1;
 800e51e:	4b58      	ldr	r3, [pc, #352]	; (800e680 <stabilizationInit+0x570>)
 800e520:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e524:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	rStabConstants[STAB_YAW].pid.pGain = 25;
 800e528:	4b55      	ldr	r3, [pc, #340]	; (800e680 <stabilizationInit+0x570>)
 800e52a:	4a63      	ldr	r2, [pc, #396]	; (800e6b8 <stabilizationInit+0x5a8>)
 800e52c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	rStabConstants[STAB_YAW].pid.iGain = 0;
 800e530:	4b53      	ldr	r3, [pc, #332]	; (800e680 <stabilizationInit+0x570>)
 800e532:	f04f 0200 	mov.w	r2, #0
 800e536:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	rStabConstants[STAB_YAW].pid.iMax = 3000;
 800e53a:	4b51      	ldr	r3, [pc, #324]	; (800e680 <stabilizationInit+0x570>)
 800e53c:	4a5f      	ldr	r2, [pc, #380]	; (800e6bc <stabilizationInit+0x5ac>)
 800e53e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	rStabConstants[STAB_YAW].pid.iMin = -3000;
 800e542:	4b4f      	ldr	r3, [pc, #316]	; (800e680 <stabilizationInit+0x570>)
 800e544:	4a5e      	ldr	r2, [pc, #376]	; (800e6c0 <stabilizationInit+0x5b0>)
 800e546:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	rStabConstants[STAB_YAW].pThrustersMax = 20000;
 800e54a:	4b4d      	ldr	r3, [pc, #308]	; (800e680 <stabilizationInit+0x570>)
 800e54c:	4a5d      	ldr	r2, [pc, #372]	; (800e6c4 <stabilizationInit+0x5b4>)
 800e54e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	rStabConstants[STAB_YAW].pThrustersMin = -20000;
 800e552:	4b4b      	ldr	r3, [pc, #300]	; (800e680 <stabilizationInit+0x570>)
 800e554:	4a5c      	ldr	r2, [pc, #368]	; (800e6c8 <stabilizationInit+0x5b8>)
 800e556:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	rStabConstants[STAB_YAW].sOutSummatorMax = 32000;
 800e55a:	4b49      	ldr	r3, [pc, #292]	; (800e680 <stabilizationInit+0x570>)
 800e55c:	4a5b      	ldr	r2, [pc, #364]	; (800e6cc <stabilizationInit+0x5bc>)
 800e55e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	rStabConstants[STAB_YAW].sOutSummatorMin = -32000;
 800e562:	4b47      	ldr	r3, [pc, #284]	; (800e680 <stabilizationInit+0x570>)
 800e564:	4a5a      	ldr	r2, [pc, #360]	; (800e6d0 <stabilizationInit+0x5c0>)
 800e566:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    rStabConstants[STAB_YAW].joyIntegration = false;
 800e56a:	4b45      	ldr	r3, [pc, #276]	; (800e680 <stabilizationInit+0x570>)
 800e56c:	2200      	movs	r2, #0
 800e56e:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9

	//rStabConstants[STAB_DEPTH].enable = true;

	rStabConstants[STAB_DEPTH].pJoyUnitCast = -1;
 800e572:	4b43      	ldr	r3, [pc, #268]	; (800e680 <stabilizationInit+0x570>)
 800e574:	4a57      	ldr	r2, [pc, #348]	; (800e6d4 <stabilizationInit+0x5c4>)
 800e576:	605a      	str	r2, [r3, #4]
	rStabConstants[STAB_DEPTH].pSpeedDyn = 1;
 800e578:	4b41      	ldr	r3, [pc, #260]	; (800e680 <stabilizationInit+0x570>)
 800e57a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e57e:	609a      	str	r2, [r3, #8]
	rStabConstants[STAB_DEPTH].pErrGain = 1;
 800e580:	4b3f      	ldr	r3, [pc, #252]	; (800e680 <stabilizationInit+0x570>)
 800e582:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e586:	60da      	str	r2, [r3, #12]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].T = 80;
 800e588:	4b3d      	ldr	r3, [pc, #244]	; (800e680 <stabilizationInit+0x570>)
 800e58a:	4a53      	ldr	r2, [pc, #332]	; (800e6d8 <stabilizationInit+0x5c8>)
 800e58c:	619a      	str	r2, [r3, #24]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].K = -15;
 800e58e:	4b3c      	ldr	r3, [pc, #240]	; (800e680 <stabilizationInit+0x570>)
 800e590:	4a52      	ldr	r2, [pc, #328]	; (800e6dc <stabilizationInit+0x5cc>)
 800e592:	61da      	str	r2, [r3, #28]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].T = 0;
 800e594:	4b3a      	ldr	r3, [pc, #232]	; (800e680 <stabilizationInit+0x570>)
 800e596:	f04f 0200 	mov.w	r2, #0
 800e59a:	611a      	str	r2, [r3, #16]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].K = -1;
 800e59c:	4b38      	ldr	r3, [pc, #224]	; (800e680 <stabilizationInit+0x570>)
 800e59e:	4a4d      	ldr	r2, [pc, #308]	; (800e6d4 <stabilizationInit+0x5c4>)
 800e5a0:	615a      	str	r2, [r3, #20]
	rStabConstants[STAB_DEPTH].pid.pGain = 30;
 800e5a2:	4b37      	ldr	r3, [pc, #220]	; (800e680 <stabilizationInit+0x570>)
 800e5a4:	4a4e      	ldr	r2, [pc, #312]	; (800e6e0 <stabilizationInit+0x5d0>)
 800e5a6:	629a      	str	r2, [r3, #40]	; 0x28
	rStabConstants[STAB_DEPTH].pid.iGain = 5;
 800e5a8:	4b35      	ldr	r3, [pc, #212]	; (800e680 <stabilizationInit+0x570>)
 800e5aa:	4a4e      	ldr	r2, [pc, #312]	; (800e6e4 <stabilizationInit+0x5d4>)
 800e5ac:	62da      	str	r2, [r3, #44]	; 0x2c
	rStabConstants[STAB_DEPTH].pid.iMax = 40;
 800e5ae:	4b34      	ldr	r3, [pc, #208]	; (800e680 <stabilizationInit+0x570>)
 800e5b0:	4a4d      	ldr	r2, [pc, #308]	; (800e6e8 <stabilizationInit+0x5d8>)
 800e5b2:	631a      	str	r2, [r3, #48]	; 0x30
	rStabConstants[STAB_DEPTH].pid.iMin = -40;
 800e5b4:	4b32      	ldr	r3, [pc, #200]	; (800e680 <stabilizationInit+0x570>)
 800e5b6:	4a4d      	ldr	r2, [pc, #308]	; (800e6ec <stabilizationInit+0x5dc>)
 800e5b8:	635a      	str	r2, [r3, #52]	; 0x34
	rStabConstants[STAB_DEPTH].pThrustersMax = 32000;
 800e5ba:	4b31      	ldr	r3, [pc, #196]	; (800e680 <stabilizationInit+0x570>)
 800e5bc:	4a43      	ldr	r2, [pc, #268]	; (800e6cc <stabilizationInit+0x5bc>)
 800e5be:	63da      	str	r2, [r3, #60]	; 0x3c
	rStabConstants[STAB_DEPTH].pThrustersMin = -32000;
 800e5c0:	4b2f      	ldr	r3, [pc, #188]	; (800e680 <stabilizationInit+0x570>)
 800e5c2:	4a43      	ldr	r2, [pc, #268]	; (800e6d0 <stabilizationInit+0x5c0>)
 800e5c4:	639a      	str	r2, [r3, #56]	; 0x38
	rStabConstants[STAB_DEPTH].sOutSummatorMax = 32000;
 800e5c6:	4b2e      	ldr	r3, [pc, #184]	; (800e680 <stabilizationInit+0x570>)
 800e5c8:	4a40      	ldr	r2, [pc, #256]	; (800e6cc <stabilizationInit+0x5bc>)
 800e5ca:	641a      	str	r2, [r3, #64]	; 0x40
	rStabConstants[STAB_DEPTH].sOutSummatorMin = -32000;
 800e5cc:	4b2c      	ldr	r3, [pc, #176]	; (800e680 <stabilizationInit+0x570>)
 800e5ce:	4a40      	ldr	r2, [pc, #256]	; (800e6d0 <stabilizationInit+0x5c0>)
 800e5d0:	645a      	str	r2, [r3, #68]	; 0x44
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 800e5d2:	4b2b      	ldr	r3, [pc, #172]	; (800e680 <stabilizationInit+0x570>)
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	705a      	strb	r2, [r3, #1]

	rStabConstants[STAB_PITCH].pJoyUnitCast = -1;
 800e5d8:	4b29      	ldr	r3, [pc, #164]	; (800e680 <stabilizationInit+0x570>)
 800e5da:	4a3e      	ldr	r2, [pc, #248]	; (800e6d4 <stabilizationInit+0x5c4>)
 800e5dc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	rStabConstants[STAB_PITCH].pSpeedDyn = 0;
 800e5e0:	4b27      	ldr	r3, [pc, #156]	; (800e680 <stabilizationInit+0x570>)
 800e5e2:	f04f 0200 	mov.w	r2, #0
 800e5e6:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	rStabConstants[STAB_PITCH].pErrGain = 1;
 800e5ea:	4b25      	ldr	r3, [pc, #148]	; (800e680 <stabilizationInit+0x570>)
 800e5ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e5f0:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	rStabConstants[STAB_PITCH].aFilter[SPEED_FILTER].T = 0;
 800e5f4:	4b22      	ldr	r3, [pc, #136]	; (800e680 <stabilizationInit+0x570>)
 800e5f6:	f04f 0200 	mov.w	r2, #0
 800e5fa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rStabConstants[STAB_PITCH].aFilter[SPEED_FILTER].K = 1;
 800e5fe:	4b20      	ldr	r3, [pc, #128]	; (800e680 <stabilizationInit+0x570>)
 800e600:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e604:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	rStabConstants[STAB_PITCH].aFilter[POS_FILTER].T = 0;
 800e608:	4b1d      	ldr	r3, [pc, #116]	; (800e680 <stabilizationInit+0x570>)
 800e60a:	f04f 0200 	mov.w	r2, #0
 800e60e:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	rStabConstants[STAB_PITCH].aFilter[POS_FILTER].K = -100;
 800e612:	4b1b      	ldr	r3, [pc, #108]	; (800e680 <stabilizationInit+0x570>)
 800e614:	4a36      	ldr	r2, [pc, #216]	; (800e6f0 <stabilizationInit+0x5e0>)
 800e616:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
	rStabConstants[STAB_PITCH].pid.pGain = 25;
 800e61a:	4b19      	ldr	r3, [pc, #100]	; (800e680 <stabilizationInit+0x570>)
 800e61c:	4a26      	ldr	r2, [pc, #152]	; (800e6b8 <stabilizationInit+0x5a8>)
 800e61e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	rStabConstants[STAB_PITCH].pid.iGain = 60;
 800e622:	4b17      	ldr	r3, [pc, #92]	; (800e680 <stabilizationInit+0x570>)
 800e624:	4a33      	ldr	r2, [pc, #204]	; (800e6f4 <stabilizationInit+0x5e4>)
 800e626:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	rStabConstants[STAB_PITCH].pid.iMax = 50;
 800e62a:	4b15      	ldr	r3, [pc, #84]	; (800e680 <stabilizationInit+0x570>)
 800e62c:	4a32      	ldr	r2, [pc, #200]	; (800e6f8 <stabilizationInit+0x5e8>)
 800e62e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	rStabConstants[STAB_PITCH].pid.iMin = -50;
 800e632:	4b13      	ldr	r3, [pc, #76]	; (800e680 <stabilizationInit+0x570>)
 800e634:	4a31      	ldr	r2, [pc, #196]	; (800e6fc <stabilizationInit+0x5ec>)
 800e636:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	rStabConstants[STAB_PITCH].pThrustersMax = 32000;
 800e63a:	4b11      	ldr	r3, [pc, #68]	; (800e680 <stabilizationInit+0x570>)
 800e63c:	4a23      	ldr	r2, [pc, #140]	; (800e6cc <stabilizationInit+0x5bc>)
 800e63e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	rStabConstants[STAB_PITCH].pThrustersMin = -32000;
 800e642:	4b0f      	ldr	r3, [pc, #60]	; (800e680 <stabilizationInit+0x570>)
 800e644:	4a22      	ldr	r2, [pc, #136]	; (800e6d0 <stabilizationInit+0x5c0>)
 800e646:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	rStabConstants[STAB_PITCH].sOutSummatorMax = 32000;
 800e64a:	4b0d      	ldr	r3, [pc, #52]	; (800e680 <stabilizationInit+0x570>)
 800e64c:	4a1f      	ldr	r2, [pc, #124]	; (800e6cc <stabilizationInit+0x5bc>)
 800e64e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	rStabConstants[STAB_PITCH].sOutSummatorMin = -32000;
 800e652:	4b0b      	ldr	r3, [pc, #44]	; (800e680 <stabilizationInit+0x570>)
 800e654:	4a1e      	ldr	r2, [pc, #120]	; (800e6d0 <stabilizationInit+0x5c0>)
 800e656:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    rStabConstants[STAB_PITCH].joyIntegration = false;
 800e65a:	4b09      	ldr	r3, [pc, #36]	; (800e680 <stabilizationInit+0x570>)
 800e65c:	2200      	movs	r2, #0
 800e65e:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169


}
 800e662:	bf00      	nop
 800e664:	370c      	adds	r7, #12
 800e666:	46bd      	mov	sp, r7
 800e668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66c:	4770      	bx	lr
 800e66e:	bf00      	nop
 800e670:	20002810 	.word	0x20002810
 800e674:	20002618 	.word	0x20002618
 800e678:	200025b8 	.word	0x200025b8
 800e67c:	2000259c 	.word	0x2000259c
 800e680:	20002660 	.word	0x20002660
 800e684:	2000261c 	.word	0x2000261c
 800e688:	200025bc 	.word	0x200025bc
 800e68c:	200025a0 	.word	0x200025a0
 800e690:	20002610 	.word	0x20002610
 800e694:	200025f8 	.word	0x200025f8
 800e698:	200025f0 	.word	0x200025f0
 800e69c:	2000260c 	.word	0x2000260c
 800e6a0:	200028d0 	.word	0x200028d0
 800e6a4:	200024d4 	.word	0x200024d4
 800e6a8:	20002608 	.word	0x20002608
 800e6ac:	20002878 	.word	0x20002878
 800e6b0:	428c0000 	.word	0x428c0000
 800e6b4:	42f00000 	.word	0x42f00000
 800e6b8:	41c80000 	.word	0x41c80000
 800e6bc:	453b8000 	.word	0x453b8000
 800e6c0:	c53b8000 	.word	0xc53b8000
 800e6c4:	469c4000 	.word	0x469c4000
 800e6c8:	c69c4000 	.word	0xc69c4000
 800e6cc:	46fa0000 	.word	0x46fa0000
 800e6d0:	c6fa0000 	.word	0xc6fa0000
 800e6d4:	bf800000 	.word	0xbf800000
 800e6d8:	42a00000 	.word	0x42a00000
 800e6dc:	c1700000 	.word	0xc1700000
 800e6e0:	41f00000 	.word	0x41f00000
 800e6e4:	40a00000 	.word	0x40a00000
 800e6e8:	42200000 	.word	0x42200000
 800e6ec:	c2200000 	.word	0xc2200000
 800e6f0:	c2c80000 	.word	0xc2c80000
 800e6f4:	42700000 	.word	0x42700000
 800e6f8:	42480000 	.word	0x42480000
 800e6fc:	c2480000 	.word	0xc2480000

0800e700 <stabilizationStart>:

void stabilizationStart(uint8_t contour)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
 800e706:	4603      	mov	r3, r0
 800e708:	71fb      	strb	r3, [r7, #7]
	rStabConstants[contour].enable = true;
 800e70a:	79fa      	ldrb	r2, [r7, #7]
 800e70c:	4970      	ldr	r1, [pc, #448]	; (800e8d0 <stabilizationStart+0x1d0>)
 800e70e:	4613      	mov	r3, r2
 800e710:	00db      	lsls	r3, r3, #3
 800e712:	4413      	add	r3, r2
 800e714:	00db      	lsls	r3, r3, #3
 800e716:	440b      	add	r3, r1
 800e718:	2201      	movs	r2, #1
 800e71a:	701a      	strb	r2, [r3, #0]

	rStabState[contour].oldSpeed = *rStabState[contour].speedSignal;
 800e71c:	79fb      	ldrb	r3, [r7, #7]
 800e71e:	4a6d      	ldr	r2, [pc, #436]	; (800e8d4 <stabilizationStart+0x1d4>)
 800e720:	2158      	movs	r1, #88	; 0x58
 800e722:	fb01 f303 	mul.w	r3, r1, r3
 800e726:	4413      	add	r3, r2
 800e728:	3304      	adds	r3, #4
 800e72a:	681a      	ldr	r2, [r3, #0]
 800e72c:	79fb      	ldrb	r3, [r7, #7]
 800e72e:	6812      	ldr	r2, [r2, #0]
 800e730:	4968      	ldr	r1, [pc, #416]	; (800e8d4 <stabilizationStart+0x1d4>)
 800e732:	2058      	movs	r0, #88	; 0x58
 800e734:	fb00 f303 	mul.w	r3, r0, r3
 800e738:	440b      	add	r3, r1
 800e73a:	3314      	adds	r3, #20
 800e73c:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPos = *rStabState[contour].posSignal;
 800e73e:	79fb      	ldrb	r3, [r7, #7]
 800e740:	4a64      	ldr	r2, [pc, #400]	; (800e8d4 <stabilizationStart+0x1d4>)
 800e742:	2158      	movs	r1, #88	; 0x58
 800e744:	fb01 f303 	mul.w	r3, r1, r3
 800e748:	4413      	add	r3, r2
 800e74a:	3308      	adds	r3, #8
 800e74c:	681a      	ldr	r2, [r3, #0]
 800e74e:	79fb      	ldrb	r3, [r7, #7]
 800e750:	6812      	ldr	r2, [r2, #0]
 800e752:	4960      	ldr	r1, [pc, #384]	; (800e8d4 <stabilizationStart+0x1d4>)
 800e754:	2058      	movs	r0, #88	; 0x58
 800e756:	fb00 f303 	mul.w	r3, r0, r3
 800e75a:	440b      	add	r3, r1
 800e75c:	3318      	adds	r3, #24
 800e75e:	601a      	str	r2, [r3, #0]
	rStabState[contour].posDerivative = 0;
 800e760:	79fb      	ldrb	r3, [r7, #7]
 800e762:	4a5c      	ldr	r2, [pc, #368]	; (800e8d4 <stabilizationStart+0x1d4>)
 800e764:	2158      	movs	r1, #88	; 0x58
 800e766:	fb01 f303 	mul.w	r3, r1, r3
 800e76a:	4413      	add	r3, r2
 800e76c:	3310      	adds	r3, #16
 800e76e:	f04f 0200 	mov.w	r2, #0
 800e772:	601a      	str	r2, [r3, #0]
	//rStabState[contour].speedIntegral = 0;
if(contour==STAB_YAW)
 800e774:	79fb      	ldrb	r3, [r7, #7]
 800e776:	2b03      	cmp	r3, #3
 800e778:	d103      	bne.n	800e782 <stabilizationStart+0x82>
{
	rSensors.yaw =0;
 800e77a:	4b57      	ldr	r3, [pc, #348]	; (800e8d8 <stabilizationStart+0x1d8>)
 800e77c:	f04f 0200 	mov.w	r2, #0
 800e780:	609a      	str	r2, [r3, #8]
}
	rStabState[contour].joyUnitCasted = 0;
 800e782:	79fb      	ldrb	r3, [r7, #7]
 800e784:	4a53      	ldr	r2, [pc, #332]	; (800e8d4 <stabilizationStart+0x1d4>)
 800e786:	2158      	movs	r1, #88	; 0x58
 800e788:	fb01 f303 	mul.w	r3, r1, r3
 800e78c:	4413      	add	r3, r2
 800e78e:	331c      	adds	r3, #28
 800e790:	f04f 0200 	mov.w	r2, #0
 800e794:	601a      	str	r2, [r3, #0]
	rStabState[contour].joy_iValue = *rStabState[contour].posSignal;
 800e796:	79fb      	ldrb	r3, [r7, #7]
 800e798:	4a4e      	ldr	r2, [pc, #312]	; (800e8d4 <stabilizationStart+0x1d4>)
 800e79a:	2158      	movs	r1, #88	; 0x58
 800e79c:	fb01 f303 	mul.w	r3, r1, r3
 800e7a0:	4413      	add	r3, r2
 800e7a2:	3308      	adds	r3, #8
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	79fb      	ldrb	r3, [r7, #7]
 800e7a8:	6812      	ldr	r2, [r2, #0]
 800e7aa:	494a      	ldr	r1, [pc, #296]	; (800e8d4 <stabilizationStart+0x1d4>)
 800e7ac:	2058      	movs	r0, #88	; 0x58
 800e7ae:	fb00 f303 	mul.w	r3, r0, r3
 800e7b2:	440b      	add	r3, r1
 800e7b4:	3320      	adds	r3, #32
 800e7b6:	601a      	str	r2, [r3, #0]
	rStabState[contour].posError = 0;
 800e7b8:	79fb      	ldrb	r3, [r7, #7]
 800e7ba:	4a46      	ldr	r2, [pc, #280]	; (800e8d4 <stabilizationStart+0x1d4>)
 800e7bc:	2158      	movs	r1, #88	; 0x58
 800e7be:	fb01 f303 	mul.w	r3, r1, r3
 800e7c2:	4413      	add	r3, r2
 800e7c4:	3324      	adds	r3, #36	; 0x24
 800e7c6:	f04f 0200 	mov.w	r2, #0
 800e7ca:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedError = 0;
 800e7cc:	79fb      	ldrb	r3, [r7, #7]
 800e7ce:	4a41      	ldr	r2, [pc, #260]	; (800e8d4 <stabilizationStart+0x1d4>)
 800e7d0:	2158      	movs	r1, #88	; 0x58
 800e7d2:	fb01 f303 	mul.w	r3, r1, r3
 800e7d6:	4413      	add	r3, r2
 800e7d8:	3328      	adds	r3, #40	; 0x28
 800e7da:	f04f 0200 	mov.w	r2, #0
 800e7de:	601a      	str	r2, [r3, #0]
	rStabState[contour].dynSummator = 0;
 800e7e0:	79fb      	ldrb	r3, [r7, #7]
 800e7e2:	4a3c      	ldr	r2, [pc, #240]	; (800e8d4 <stabilizationStart+0x1d4>)
 800e7e4:	2158      	movs	r1, #88	; 0x58
 800e7e6:	fb01 f303 	mul.w	r3, r1, r3
 800e7ea:	4413      	add	r3, r2
 800e7ec:	332c      	adds	r3, #44	; 0x2c
 800e7ee:	f04f 0200 	mov.w	r2, #0
 800e7f2:	601a      	str	r2, [r3, #0]
	rStabState[contour].pidValue = 0;
 800e7f4:	79fb      	ldrb	r3, [r7, #7]
 800e7f6:	4a37      	ldr	r2, [pc, #220]	; (800e8d4 <stabilizationStart+0x1d4>)
 800e7f8:	2158      	movs	r1, #88	; 0x58
 800e7fa:	fb01 f303 	mul.w	r3, r1, r3
 800e7fe:	4413      	add	r3, r2
 800e800:	3330      	adds	r3, #48	; 0x30
 800e802:	f04f 0200 	mov.w	r2, #0
 800e806:	601a      	str	r2, [r3, #0]
	rStabState[contour].pid_iValue = 0;
 800e808:	79fb      	ldrb	r3, [r7, #7]
 800e80a:	4a32      	ldr	r2, [pc, #200]	; (800e8d4 <stabilizationStart+0x1d4>)
 800e80c:	2158      	movs	r1, #88	; 0x58
 800e80e:	fb01 f303 	mul.w	r3, r1, r3
 800e812:	4413      	add	r3, r2
 800e814:	3334      	adds	r3, #52	; 0x34
 800e816:	f04f 0200 	mov.w	r2, #0
 800e81a:	601a      	str	r2, [r3, #0]
	rStabState[contour].posErrorAmp = 0;
 800e81c:	79fb      	ldrb	r3, [r7, #7]
 800e81e:	4a2d      	ldr	r2, [pc, #180]	; (800e8d4 <stabilizationStart+0x1d4>)
 800e820:	2158      	movs	r1, #88	; 0x58
 800e822:	fb01 f303 	mul.w	r3, r1, r3
 800e826:	4413      	add	r3, r2
 800e828:	3338      	adds	r3, #56	; 0x38
 800e82a:	f04f 0200 	mov.w	r2, #0
 800e82e:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedFiltered = 0;
 800e830:	79fb      	ldrb	r3, [r7, #7]
 800e832:	4a28      	ldr	r2, [pc, #160]	; (800e8d4 <stabilizationStart+0x1d4>)
 800e834:	2158      	movs	r1, #88	; 0x58
 800e836:	fb01 f303 	mul.w	r3, r1, r3
 800e83a:	4413      	add	r3, r2
 800e83c:	333c      	adds	r3, #60	; 0x3c
 800e83e:	f04f 0200 	mov.w	r2, #0
 800e842:	601a      	str	r2, [r3, #0]
	rStabState[contour].posFiltered = 0;
 800e844:	79fb      	ldrb	r3, [r7, #7]
 800e846:	4a23      	ldr	r2, [pc, #140]	; (800e8d4 <stabilizationStart+0x1d4>)
 800e848:	2158      	movs	r1, #88	; 0x58
 800e84a:	fb01 f303 	mul.w	r3, r1, r3
 800e84e:	4413      	add	r3, r2
 800e850:	3340      	adds	r3, #64	; 0x40
 800e852:	f04f 0200 	mov.w	r2, #0
 800e856:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPosFiltered = 0;
 800e858:	79fb      	ldrb	r3, [r7, #7]
 800e85a:	4a1e      	ldr	r2, [pc, #120]	; (800e8d4 <stabilizationStart+0x1d4>)
 800e85c:	2158      	movs	r1, #88	; 0x58
 800e85e:	fb01 f303 	mul.w	r3, r1, r3
 800e862:	4413      	add	r3, r2
 800e864:	3344      	adds	r3, #68	; 0x44
 800e866:	f04f 0200 	mov.w	r2, #0
 800e86a:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldSpeedError = 0;
 800e86c:	79fb      	ldrb	r3, [r7, #7]
 800e86e:	4a19      	ldr	r2, [pc, #100]	; (800e8d4 <stabilizationStart+0x1d4>)
 800e870:	2158      	movs	r1, #88	; 0x58
 800e872:	fb01 f303 	mul.w	r3, r1, r3
 800e876:	4413      	add	r3, r2
 800e878:	3348      	adds	r3, #72	; 0x48
 800e87a:	f04f 0200 	mov.w	r2, #0
 800e87e:	601a      	str	r2, [r3, #0]
	rStabState[contour].thrustersFiltered = 0;
 800e880:	79fb      	ldrb	r3, [r7, #7]
 800e882:	4a14      	ldr	r2, [pc, #80]	; (800e8d4 <stabilizationStart+0x1d4>)
 800e884:	2158      	movs	r1, #88	; 0x58
 800e886:	fb01 f303 	mul.w	r3, r1, r3
 800e88a:	4413      	add	r3, r2
 800e88c:	334c      	adds	r3, #76	; 0x4c
 800e88e:	f04f 0200 	mov.w	r2, #0
 800e892:	601a      	str	r2, [r3, #0]
	rStabState[contour].outputSignal = 0;
 800e894:	79fb      	ldrb	r3, [r7, #7]
 800e896:	4a0f      	ldr	r2, [pc, #60]	; (800e8d4 <stabilizationStart+0x1d4>)
 800e898:	2158      	movs	r1, #88	; 0x58
 800e89a:	fb01 f303 	mul.w	r3, r1, r3
 800e89e:	4413      	add	r3, r2
 800e8a0:	3350      	adds	r3, #80	; 0x50
 800e8a2:	f04f 0200 	mov.w	r2, #0
 800e8a6:	601a      	str	r2, [r3, #0]
	rStabState[contour].LastTick = xTaskGetTickCount();
 800e8a8:	f7fa fd04 	bl	80092b4 <xTaskGetTickCount>
 800e8ac:	ee07 0a90 	vmov	s15, r0
 800e8b0:	79fb      	ldrb	r3, [r7, #7]
 800e8b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8b6:	4a07      	ldr	r2, [pc, #28]	; (800e8d4 <stabilizationStart+0x1d4>)
 800e8b8:	2158      	movs	r1, #88	; 0x58
 800e8ba:	fb01 f303 	mul.w	r3, r1, r3
 800e8be:	4413      	add	r3, r2
 800e8c0:	3354      	adds	r3, #84	; 0x54
 800e8c2:	edc3 7a00 	vstr	s15, [r3]
}
 800e8c6:	bf00      	nop
 800e8c8:	3708      	adds	r7, #8
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
 800e8ce:	bf00      	nop
 800e8d0:	20002660 	.word	0x20002660
 800e8d4:	20002810 	.word	0x20002810
 800e8d8:	20002598 	.word	0x20002598

0800e8dc <stabilizationUpdate>:

void stabilizationUpdate(uint8_t contour)
{
 800e8dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e8e0:	b086      	sub	sp, #24
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	71fb      	strb	r3, [r7, #7]
	struct robotStabilizationConstants_s *constants = &rStabConstants[contour];
 800e8e8:	79fa      	ldrb	r2, [r7, #7]
 800e8ea:	4613      	mov	r3, r2
 800e8ec:	00db      	lsls	r3, r3, #3
 800e8ee:	4413      	add	r3, r2
 800e8f0:	00db      	lsls	r3, r3, #3
 800e8f2:	4aa6      	ldr	r2, [pc, #664]	; (800eb8c <stabilizationUpdate+0x2b0>)
 800e8f4:	4413      	add	r3, r2
 800e8f6:	617b      	str	r3, [r7, #20]
	struct robotStabilizationState_s *state = &rStabState[contour];
 800e8f8:	79fb      	ldrb	r3, [r7, #7]
 800e8fa:	2258      	movs	r2, #88	; 0x58
 800e8fc:	fb02 f303 	mul.w	r3, r2, r3
 800e900:	4aa3      	ldr	r2, [pc, #652]	; (800eb90 <stabilizationUpdate+0x2b4>)
 800e902:	4413      	add	r3, r2
 800e904:	613b      	str	r3, [r7, #16]
	float diffTime = fromTickToMs(xTaskGetTickCount() - state->LastTick) / 1000.0f;
 800e906:	f7fa fcd5 	bl	80092b4 <xTaskGetTickCount>
 800e90a:	ee07 0a90 	vmov	s15, r0
 800e90e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800e918:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e91c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e920:	ee17 0a90 	vmov	r0, s15
 800e924:	f7fc fa12 	bl	800ad4c <fromTickToMs>
 800e928:	eeb0 7a40 	vmov.f32	s14, s0
 800e92c:	eddf 6a99 	vldr	s13, [pc, #612]	; 800eb94 <stabilizationUpdate+0x2b8>
 800e930:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e934:	edc7 7a03 	vstr	s15, [r7, #12]
	state->LastTick = xTaskGetTickCount();
 800e938:	f7fa fcbc 	bl	80092b4 <xTaskGetTickCount>
 800e93c:	ee07 0a90 	vmov	s15, r0
 800e940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	// Speed feedback filtering
	struct AperiodicFilter *filter = &constants->aFilter[SPEED_FILTER];
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	3318      	adds	r3, #24
 800e94e:	60bb      	str	r3, [r7, #8]

	if(filter->T != 0) {
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	edd3 7a00 	vldr	s15, [r3]
 800e956:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e95e:	d02b      	beq.n	800e9b8 <stabilizationUpdate+0xdc>
		//state->speedFiltered = state->speedFiltered*exp(-diffTime/filter->T/1e5) + state->oldSpeed*filter->K*80*(1-exp(-diffTime/filter->T/1e5));
		state->speedFiltered = state->oldSpeed + diffTime * (1/filter->T*100) * (*state->speedSignal * filter->K*70 - state->oldSpeed);
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	ed93 7a05 	vldr	s14, [r3, #20]
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	edd3 6a00 	vldr	s13, [r3]
 800e96c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e970:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800e974:	eddf 6a8b 	vldr	s13, [pc, #556]	; 800eba4 <stabilizationUpdate+0x2c8>
 800e978:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e97c:	edd7 7a03 	vldr	s15, [r7, #12]
 800e980:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	685b      	ldr	r3, [r3, #4]
 800e988:	ed93 6a00 	vldr	s12, [r3]
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	edd3 7a01 	vldr	s15, [r3, #4]
 800e992:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e996:	ed9f 6a80 	vldr	s12, [pc, #512]	; 800eb98 <stabilizationUpdate+0x2bc>
 800e99a:	ee27 6a86 	vmul.f32	s12, s15, s12
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	edd3 7a05 	vldr	s15, [r3, #20]
 800e9a4:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e9a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e9ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 800e9b6:	e023      	b.n	800ea00 <stabilizationUpdate+0x124>
	}
	else {
		if(contour==STAB_PITCH)
 800e9b8:	79fb      	ldrb	r3, [r7, #7]
 800e9ba:	2b05      	cmp	r3, #5
 800e9bc:	d110      	bne.n	800e9e0 <stabilizationUpdate+0x104>
		{
			state->speedFiltered = *state->speedSignal*filter->K*250;
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	685b      	ldr	r3, [r3, #4]
 800e9c2:	ed93 7a00 	vldr	s14, [r3]
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	edd3 7a01 	vldr	s15, [r3, #4]
 800e9cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9d0:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800eb9c <stabilizationUpdate+0x2c0>
 800e9d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 800e9de:	e00f      	b.n	800ea00 <stabilizationUpdate+0x124>
		}
		else
		state->speedFiltered = *state->speedSignal*filter->K*10;
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	ed93 7a00 	vldr	s14, [r3]
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	edd3 7a01 	vldr	s15, [r3, #4]
 800e9ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9f2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e9f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e9fa:	693b      	ldr	r3, [r7, #16]
 800e9fc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	//state->oldSpeed = *state->speedSignal;
	state->oldSpeed = state->speedFiltered;
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	615a      	str	r2, [r3, #20]

	// Position feedback filtering
	filter = &constants->aFilter[POS_FILTER];
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	3310      	adds	r3, #16
 800ea0c:	60bb      	str	r3, [r7, #8]
	if(filter->T != 0) {
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	edd3 7a00 	vldr	s15, [r3]
 800ea14:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ea18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea1c:	d061      	beq.n	800eae2 <stabilizationUpdate+0x206>
		state->posFiltered = state->posFiltered*exp(-diffTime/filter->T) + state->oldPos*filter->K*(1-exp(-diffTime/filter->T));
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea22:	4618      	mov	r0, r3
 800ea24:	f7f1 fd38 	bl	8000498 <__aeabi_f2d>
 800ea28:	4604      	mov	r4, r0
 800ea2a:	460d      	mov	r5, r1
 800ea2c:	edd7 7a03 	vldr	s15, [r7, #12]
 800ea30:	eeb1 7a67 	vneg.f32	s14, s15
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	edd3 7a00 	vldr	s15, [r3]
 800ea3a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ea3e:	ee16 0a90 	vmov	r0, s13
 800ea42:	f7f1 fd29 	bl	8000498 <__aeabi_f2d>
 800ea46:	4602      	mov	r2, r0
 800ea48:	460b      	mov	r3, r1
 800ea4a:	ec43 2b10 	vmov	d0, r2, r3
 800ea4e:	f001 fb53 	bl	80100f8 <exp>
 800ea52:	ec53 2b10 	vmov	r2, r3, d0
 800ea56:	4620      	mov	r0, r4
 800ea58:	4629      	mov	r1, r5
 800ea5a:	f7f1 fd75 	bl	8000548 <__aeabi_dmul>
 800ea5e:	4602      	mov	r2, r0
 800ea60:	460b      	mov	r3, r1
 800ea62:	4690      	mov	r8, r2
 800ea64:	4699      	mov	r9, r3
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	ed93 7a06 	vldr	s14, [r3, #24]
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	edd3 7a01 	vldr	s15, [r3, #4]
 800ea72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea76:	ee17 0a90 	vmov	r0, s15
 800ea7a:	f7f1 fd0d 	bl	8000498 <__aeabi_f2d>
 800ea7e:	4604      	mov	r4, r0
 800ea80:	460d      	mov	r5, r1
 800ea82:	edd7 7a03 	vldr	s15, [r7, #12]
 800ea86:	eeb1 7a67 	vneg.f32	s14, s15
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	edd3 7a00 	vldr	s15, [r3]
 800ea90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ea94:	ee16 0a90 	vmov	r0, s13
 800ea98:	f7f1 fcfe 	bl	8000498 <__aeabi_f2d>
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	ec43 2b10 	vmov	d0, r2, r3
 800eaa4:	f001 fb28 	bl	80100f8 <exp>
 800eaa8:	ec53 2b10 	vmov	r2, r3, d0
 800eaac:	f04f 0000 	mov.w	r0, #0
 800eab0:	493b      	ldr	r1, [pc, #236]	; (800eba0 <stabilizationUpdate+0x2c4>)
 800eab2:	f7f1 fb91 	bl	80001d8 <__aeabi_dsub>
 800eab6:	4602      	mov	r2, r0
 800eab8:	460b      	mov	r3, r1
 800eaba:	4620      	mov	r0, r4
 800eabc:	4629      	mov	r1, r5
 800eabe:	f7f1 fd43 	bl	8000548 <__aeabi_dmul>
 800eac2:	4602      	mov	r2, r0
 800eac4:	460b      	mov	r3, r1
 800eac6:	4640      	mov	r0, r8
 800eac8:	4649      	mov	r1, r9
 800eaca:	f7f1 fb87 	bl	80001dc <__adddf3>
 800eace:	4602      	mov	r2, r0
 800ead0:	460b      	mov	r3, r1
 800ead2:	4610      	mov	r0, r2
 800ead4:	4619      	mov	r1, r3
 800ead6:	f7f1 fff9 	bl	8000acc <__aeabi_d2f>
 800eada:	4602      	mov	r2, r0
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	641a      	str	r2, [r3, #64]	; 0x40
 800eae0:	e00b      	b.n	800eafa <stabilizationUpdate+0x21e>
	}
	else {
		state->posFiltered = *state->posSignal*filter->K;
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	689b      	ldr	r3, [r3, #8]
 800eae6:	ed93 7a00 	vldr	s14, [r3]
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	edd3 7a01 	vldr	s15, [r3, #4]
 800eaf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	}
	state->oldPos = *state->posSignal;
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	689b      	ldr	r3, [r3, #8]
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	619a      	str	r2, [r3, #24]

	// Speed integration calculation
	state->speedIntegral += (*state->speedSignal * diffTime);
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	ed93 7a03 	vldr	s14, [r3, #12]
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	edd3 6a00 	vldr	s13, [r3]
 800eb12:	edd7 7a03 	vldr	s15, [r7, #12]
 800eb16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	edc3 7a03 	vstr	s15, [r3, #12]

    // Position derivative calculation
    state->posDerivative = (state->posFiltered - state->oldPosFiltered) / diffTime;
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800eb30:	ee77 6a67 	vsub.f32	s13, s14, s15
 800eb34:	ed97 7a03 	vldr	s14, [r7, #12]
 800eb38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	edc3 7a04 	vstr	s15, [r3, #16]
    state->oldPosFiltered = state->posFiltered;
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	645a      	str	r2, [r3, #68]	; 0x44

	// Input signal unit cast
	state->joyUnitCasted = constants->pJoyUnitCast * *state->inputSignal;
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	ed93 7a01 	vldr	s14, [r3, #4]
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	edd3 7a00 	vldr	s15, [r3]
 800eb58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	edc3 7a07 	vstr	s15, [r3, #28]

    // Casted input signal integration
	if(constants->joyIntegration) {
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	785b      	ldrb	r3, [r3, #1]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d01e      	beq.n	800eba8 <stabilizationUpdate+0x2cc>
		state->joy_iValue += state->joyUnitCasted * diffTime;
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	ed93 7a08 	vldr	s14, [r3, #32]
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	edd3 6a07 	vldr	s13, [r3, #28]
 800eb76:	edd7 7a03 	vldr	s15, [r7, #12]
 800eb7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	edc3 7a08 	vstr	s15, [r3, #32]
 800eb88:	e012      	b.n	800ebb0 <stabilizationUpdate+0x2d4>
 800eb8a:	bf00      	nop
 800eb8c:	20002660 	.word	0x20002660
 800eb90:	20002810 	.word	0x20002810
 800eb94:	447a0000 	.word	0x447a0000
 800eb98:	428c0000 	.word	0x428c0000
 800eb9c:	437a0000 	.word	0x437a0000
 800eba0:	3ff00000 	.word	0x3ff00000
 800eba4:	42c80000 	.word	0x42c80000
	}
	else {
		state->joy_iValue = state->joyUnitCasted;
 800eba8:	693b      	ldr	r3, [r7, #16]
 800ebaa:	69da      	ldr	r2, [r3, #28]
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	621a      	str	r2, [r3, #32]
	}

    // Position feedback summator
    state->posError = state->joy_iValue - state->posFiltered;
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	ed93 7a08 	vldr	s14, [r3, #32]
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800ebbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Feedback amplifiers
    state->posErrorAmp = state->posError * constants->pErrGain;
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	edd3 7a03 	vldr	s15, [r3, #12]
 800ebd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    // PI integration
    state->pid_iValue += (state->posErrorAmp * diffTime) * constants->pid.iGain;
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800ebe8:	edd7 7a03 	vldr	s15, [r7, #12]
 800ebec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800ebf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ebfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ebfe:	693b      	ldr	r3, [r7, #16]
 800ec00:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // PI integration saturation
    if(state->pid_iValue > constants->pid.iMax*100) {
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800ec10:	ed5f 6a1c 	vldr	s13, [pc, #-112]	; 800eba4 <stabilizationUpdate+0x2c8>
 800ec14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ec18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ec1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec20:	dd0a      	ble.n	800ec38 <stabilizationUpdate+0x35c>
    	state->pid_iValue = constants->pid.iMax*100;
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800ec28:	ed1f 7a22 	vldr	s14, [pc, #-136]	; 800eba4 <stabilizationUpdate+0x2c8>
 800ec2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 800ec36:	e018      	b.n	800ec6a <stabilizationUpdate+0x38e>
    }
    else if(state->pid_iValue < constants->pid.iMin*100) {
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800ec44:	ed5f 6a29 	vldr	s13, [pc, #-164]	; 800eba4 <stabilizationUpdate+0x2c8>
 800ec48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ec4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ec50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec54:	d509      	bpl.n	800ec6a <stabilizationUpdate+0x38e>
    	state->pid_iValue = constants->pid.iMin*100;
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800ec5c:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 800eba4 <stabilizationUpdate+0x2c8>
 800ec60:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec64:	693b      	ldr	r3, [r7, #16]
 800ec66:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    }

    // PI summator
    state->pidValue =  state->pid_iValue + (state->posErrorAmp * constants->pid.pGain);
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800ec7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec80:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    // Dynamic summator
    state->dynSummator = state->pidValue + *state->inputSignal * constants->pSpeedDyn;
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	edd3 6a00 	vldr	s13, [r3]
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	edd3 7a02 	vldr	s15, [r3, #8]
 800ec9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eca2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    // Speed feedback
    state->speedError = state->dynSummator - state->speedFiltered;
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800ecb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    // Out filtering
    filter = &constants->aFilter[THRUSTERS_FILTER];
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	3320      	adds	r3, #32
 800ecc6:	60bb      	str	r3, [r7, #8]
    if(filter->T != 0) {
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	edd3 7a00 	vldr	s15, [r3]
 800ecce:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ecd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecd6:	d061      	beq.n	800ed9c <stabilizationUpdate+0x4c0>
    	state->thrustersFiltered = state->thrustersFiltered*exp(-diffTime/filter->T) + state->oldSpeedError*filter->K*(1-exp(-diffTime/filter->T));
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f7f1 fbdb 	bl	8000498 <__aeabi_f2d>
 800ece2:	4604      	mov	r4, r0
 800ece4:	460d      	mov	r5, r1
 800ece6:	edd7 7a03 	vldr	s15, [r7, #12]
 800ecea:	eeb1 7a67 	vneg.f32	s14, s15
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	edd3 7a00 	vldr	s15, [r3]
 800ecf4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ecf8:	ee16 0a90 	vmov	r0, s13
 800ecfc:	f7f1 fbcc 	bl	8000498 <__aeabi_f2d>
 800ed00:	4602      	mov	r2, r0
 800ed02:	460b      	mov	r3, r1
 800ed04:	ec43 2b10 	vmov	d0, r2, r3
 800ed08:	f001 f9f6 	bl	80100f8 <exp>
 800ed0c:	ec53 2b10 	vmov	r2, r3, d0
 800ed10:	4620      	mov	r0, r4
 800ed12:	4629      	mov	r1, r5
 800ed14:	f7f1 fc18 	bl	8000548 <__aeabi_dmul>
 800ed18:	4602      	mov	r2, r0
 800ed1a:	460b      	mov	r3, r1
 800ed1c:	4690      	mov	r8, r2
 800ed1e:	4699      	mov	r9, r3
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	edd3 7a01 	vldr	s15, [r3, #4]
 800ed2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed30:	ee17 0a90 	vmov	r0, s15
 800ed34:	f7f1 fbb0 	bl	8000498 <__aeabi_f2d>
 800ed38:	4604      	mov	r4, r0
 800ed3a:	460d      	mov	r5, r1
 800ed3c:	edd7 7a03 	vldr	s15, [r7, #12]
 800ed40:	eeb1 7a67 	vneg.f32	s14, s15
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	edd3 7a00 	vldr	s15, [r3]
 800ed4a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ed4e:	ee16 0a90 	vmov	r0, s13
 800ed52:	f7f1 fba1 	bl	8000498 <__aeabi_f2d>
 800ed56:	4602      	mov	r2, r0
 800ed58:	460b      	mov	r3, r1
 800ed5a:	ec43 2b10 	vmov	d0, r2, r3
 800ed5e:	f001 f9cb 	bl	80100f8 <exp>
 800ed62:	ec53 2b10 	vmov	r2, r3, d0
 800ed66:	f04f 0000 	mov.w	r0, #0
 800ed6a:	492a      	ldr	r1, [pc, #168]	; (800ee14 <stabilizationUpdate+0x538>)
 800ed6c:	f7f1 fa34 	bl	80001d8 <__aeabi_dsub>
 800ed70:	4602      	mov	r2, r0
 800ed72:	460b      	mov	r3, r1
 800ed74:	4620      	mov	r0, r4
 800ed76:	4629      	mov	r1, r5
 800ed78:	f7f1 fbe6 	bl	8000548 <__aeabi_dmul>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	460b      	mov	r3, r1
 800ed80:	4640      	mov	r0, r8
 800ed82:	4649      	mov	r1, r9
 800ed84:	f7f1 fa2a 	bl	80001dc <__adddf3>
 800ed88:	4602      	mov	r2, r0
 800ed8a:	460b      	mov	r3, r1
 800ed8c:	4610      	mov	r0, r2
 800ed8e:	4619      	mov	r1, r3
 800ed90:	f7f1 fe9c 	bl	8000acc <__aeabi_d2f>
 800ed94:	4602      	mov	r2, r0
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	64da      	str	r2, [r3, #76]	; 0x4c
 800ed9a:	e00a      	b.n	800edb2 <stabilizationUpdate+0x4d6>
    }
    else {
    	state->thrustersFiltered = state->speedError*filter->K;
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	edd3 7a01 	vldr	s15, [r3, #4]
 800eda8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    }
    state->oldSpeedError = state->speedError;
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	649a      	str	r2, [r3, #72]	; 0x48

    if(state->thrustersFiltered > constants->pThrustersMax) {
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800edc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800edca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edce:	dd04      	ble.n	800edda <stabilizationUpdate+0x4fe>
    	state->thrustersFiltered = constants->pThrustersMax;
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	64da      	str	r2, [r3, #76]	; 0x4c
 800edd8:	e00e      	b.n	800edf8 <stabilizationUpdate+0x51c>
    }
    else if(state->thrustersFiltered < constants->pThrustersMin) {
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800ede0:	697b      	ldr	r3, [r7, #20]
 800ede2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800ede6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800edea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edee:	d503      	bpl.n	800edf8 <stabilizationUpdate+0x51c>
    	state->thrustersFiltered = constants->pThrustersMin;
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    state->outputSignal = -1*state->speedError;
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800edfe:	eef1 7a67 	vneg.f32	s15, s15
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 800ee08:	bf00      	nop
 800ee0a:	3718      	adds	r7, #24
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ee12:	bf00      	nop
 800ee14:	3ff00000 	.word	0x3ff00000

0800ee18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b082      	sub	sp, #8
 800ee1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ee1e:	4b11      	ldr	r3, [pc, #68]	; (800ee64 <HAL_MspInit+0x4c>)
 800ee20:	699b      	ldr	r3, [r3, #24]
 800ee22:	4a10      	ldr	r2, [pc, #64]	; (800ee64 <HAL_MspInit+0x4c>)
 800ee24:	f043 0301 	orr.w	r3, r3, #1
 800ee28:	6193      	str	r3, [r2, #24]
 800ee2a:	4b0e      	ldr	r3, [pc, #56]	; (800ee64 <HAL_MspInit+0x4c>)
 800ee2c:	699b      	ldr	r3, [r3, #24]
 800ee2e:	f003 0301 	and.w	r3, r3, #1
 800ee32:	607b      	str	r3, [r7, #4]
 800ee34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ee36:	4b0b      	ldr	r3, [pc, #44]	; (800ee64 <HAL_MspInit+0x4c>)
 800ee38:	69db      	ldr	r3, [r3, #28]
 800ee3a:	4a0a      	ldr	r2, [pc, #40]	; (800ee64 <HAL_MspInit+0x4c>)
 800ee3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee40:	61d3      	str	r3, [r2, #28]
 800ee42:	4b08      	ldr	r3, [pc, #32]	; (800ee64 <HAL_MspInit+0x4c>)
 800ee44:	69db      	ldr	r3, [r3, #28]
 800ee46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee4a:	603b      	str	r3, [r7, #0]
 800ee4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ee4e:	2200      	movs	r2, #0
 800ee50:	210f      	movs	r1, #15
 800ee52:	f06f 0001 	mvn.w	r0, #1
 800ee56:	f7f2 f9c3 	bl	80011e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ee5a:	bf00      	nop
 800ee5c:	3708      	adds	r7, #8
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}
 800ee62:	bf00      	nop
 800ee64:	40021000 	.word	0x40021000

0800ee68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b08c      	sub	sp, #48	; 0x30
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800ee70:	2300      	movs	r3, #0
 800ee72:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800ee74:	2300      	movs	r3, #0
 800ee76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800ee78:	4b2e      	ldr	r3, [pc, #184]	; (800ef34 <HAL_InitTick+0xcc>)
 800ee7a:	699b      	ldr	r3, [r3, #24]
 800ee7c:	4a2d      	ldr	r2, [pc, #180]	; (800ef34 <HAL_InitTick+0xcc>)
 800ee7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ee82:	6193      	str	r3, [r2, #24]
 800ee84:	4b2b      	ldr	r3, [pc, #172]	; (800ef34 <HAL_InitTick+0xcc>)
 800ee86:	699b      	ldr	r3, [r3, #24]
 800ee88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee8c:	60bb      	str	r3, [r7, #8]
 800ee8e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ee90:	f107 020c 	add.w	r2, r7, #12
 800ee94:	f107 0310 	add.w	r3, r7, #16
 800ee98:	4611      	mov	r1, r2
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7f6 f96a 	bl	8005174 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800eea0:	f7f6 f946 	bl	8005130 <HAL_RCC_GetPCLK2Freq>
 800eea4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800eea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea8:	4a23      	ldr	r2, [pc, #140]	; (800ef38 <HAL_InitTick+0xd0>)
 800eeaa:	fba2 2303 	umull	r2, r3, r2, r3
 800eeae:	0c9b      	lsrs	r3, r3, #18
 800eeb0:	3b01      	subs	r3, #1
 800eeb2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800eeb4:	4b21      	ldr	r3, [pc, #132]	; (800ef3c <HAL_InitTick+0xd4>)
 800eeb6:	4a22      	ldr	r2, [pc, #136]	; (800ef40 <HAL_InitTick+0xd8>)
 800eeb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800eeba:	4b20      	ldr	r3, [pc, #128]	; (800ef3c <HAL_InitTick+0xd4>)
 800eebc:	f240 32e7 	movw	r2, #999	; 0x3e7
 800eec0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800eec2:	4a1e      	ldr	r2, [pc, #120]	; (800ef3c <HAL_InitTick+0xd4>)
 800eec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800eec8:	4b1c      	ldr	r3, [pc, #112]	; (800ef3c <HAL_InitTick+0xd4>)
 800eeca:	2200      	movs	r2, #0
 800eecc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eece:	4b1b      	ldr	r3, [pc, #108]	; (800ef3c <HAL_InitTick+0xd4>)
 800eed0:	2200      	movs	r2, #0
 800eed2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800eed4:	4b19      	ldr	r3, [pc, #100]	; (800ef3c <HAL_InitTick+0xd4>)
 800eed6:	2200      	movs	r2, #0
 800eed8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800eeda:	4818      	ldr	r0, [pc, #96]	; (800ef3c <HAL_InitTick+0xd4>)
 800eedc:	f7f6 fb2c 	bl	8005538 <HAL_TIM_Base_Init>
 800eee0:	4603      	mov	r3, r0
 800eee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800eee6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d11b      	bne.n	800ef26 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800eeee:	4813      	ldr	r0, [pc, #76]	; (800ef3c <HAL_InitTick+0xd4>)
 800eef0:	f7f6 fb7a 	bl	80055e8 <HAL_TIM_Base_Start_IT>
 800eef4:	4603      	mov	r3, r0
 800eef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800eefa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d111      	bne.n	800ef26 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800ef02:	2019      	movs	r0, #25
 800ef04:	f7f2 f988 	bl	8001218 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2b0f      	cmp	r3, #15
 800ef0c:	d808      	bhi.n	800ef20 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800ef0e:	2200      	movs	r2, #0
 800ef10:	6879      	ldr	r1, [r7, #4]
 800ef12:	2019      	movs	r0, #25
 800ef14:	f7f2 f964 	bl	80011e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800ef18:	4a0a      	ldr	r2, [pc, #40]	; (800ef44 <HAL_InitTick+0xdc>)
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6013      	str	r3, [r2, #0]
 800ef1e:	e002      	b.n	800ef26 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 800ef20:	2301      	movs	r3, #1
 800ef22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800ef26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3730      	adds	r7, #48	; 0x30
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
 800ef32:	bf00      	nop
 800ef34:	40021000 	.word	0x40021000
 800ef38:	431bde83 	.word	0x431bde83
 800ef3c:	20002be0 	.word	0x20002be0
 800ef40:	40012c00 	.word	0x40012c00
 800ef44:	20000000 	.word	0x20000000

0800ef48 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800ef4c:	4802      	ldr	r0, [pc, #8]	; (800ef58 <DMA1_Channel2_IRQHandler+0x10>)
 800ef4e:	f7f2 fa8e 	bl	800146e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800ef52:	bf00      	nop
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	20002fdc 	.word	0x20002fdc

0800ef5c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800ef60:	4802      	ldr	r0, [pc, #8]	; (800ef6c <DMA1_Channel3_IRQHandler+0x10>)
 800ef62:	f7f2 fa84 	bl	800146e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800ef66:	bf00      	nop
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	20002f98 	.word	0x20002f98

0800ef70 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800ef74:	4802      	ldr	r0, [pc, #8]	; (800ef80 <DMA1_Channel4_IRQHandler+0x10>)
 800ef76:	f7f2 fa7a 	bl	800146e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800ef7a:	bf00      	nop
 800ef7c:	bd80      	pop	{r7, pc}
 800ef7e:	bf00      	nop
 800ef80:	20002ecc 	.word	0x20002ecc

0800ef84 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800ef88:	4802      	ldr	r0, [pc, #8]	; (800ef94 <DMA1_Channel5_IRQHandler+0x10>)
 800ef8a:	f7f2 fa70 	bl	800146e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800ef8e:	bf00      	nop
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	20002e88 	.word	0x20002e88

0800ef98 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800ef9c:	4802      	ldr	r0, [pc, #8]	; (800efa8 <DMA1_Channel6_IRQHandler+0x10>)
 800ef9e:	f7f2 fa66 	bl	800146e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800efa2:	bf00      	nop
 800efa4:	bd80      	pop	{r7, pc}
 800efa6:	bf00      	nop
 800efa8:	20002f54 	.word	0x20002f54

0800efac <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800efb0:	4802      	ldr	r0, [pc, #8]	; (800efbc <DMA1_Channel7_IRQHandler+0x10>)
 800efb2:	f7f2 fa5c 	bl	800146e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800efb6:	bf00      	nop
 800efb8:	bd80      	pop	{r7, pc}
 800efba:	bf00      	nop
 800efbc:	20002f10 	.word	0x20002f10

0800efc0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800efc4:	4802      	ldr	r0, [pc, #8]	; (800efd0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800efc6:	f7f6 fb79 	bl	80056bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800efca:	bf00      	nop
 800efcc:	bd80      	pop	{r7, pc}
 800efce:	bf00      	nop
 800efd0:	20002be0 	.word	0x20002be0

0800efd4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800efd8:	4802      	ldr	r0, [pc, #8]	; (800efe4 <I2C1_EV_IRQHandler+0x10>)
 800efda:	f7f3 fa41 	bl	8002460 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800efde:	bf00      	nop
 800efe0:	bd80      	pop	{r7, pc}
 800efe2:	bf00      	nop
 800efe4:	20002b94 	.word	0x20002b94

0800efe8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800efec:	4802      	ldr	r0, [pc, #8]	; (800eff8 <USART1_IRQHandler+0x10>)
 800efee:	f7f7 f901 	bl	80061f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  /* USER CODE END USART1_IRQn 1 */
}
 800eff2:	bf00      	nop
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	bf00      	nop
 800eff8:	20002cfc 	.word	0x20002cfc

0800effc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800f000:	4802      	ldr	r0, [pc, #8]	; (800f00c <USART2_IRQHandler+0x10>)
 800f002:	f7f7 f8f7 	bl	80061f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 800f006:	bf00      	nop
 800f008:	bd80      	pop	{r7, pc}
 800f00a:	bf00      	nop
 800f00c:	20002d80 	.word	0x20002d80

0800f010 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800f014:	4802      	ldr	r0, [pc, #8]	; (800f020 <USART3_IRQHandler+0x10>)
 800f016:	f7f7 f8ed 	bl	80061f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  /* USER CODE END USART3_IRQn 1 */
}
 800f01a:	bf00      	nop
 800f01c:	bd80      	pop	{r7, pc}
 800f01e:	bf00      	nop
 800f020:	20002e04 	.word	0x20002e04

0800f024 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800f028:	4802      	ldr	r0, [pc, #8]	; (800f034 <UART4_IRQHandler+0x10>)
 800f02a:	f7f7 f8e3 	bl	80061f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800f02e:	bf00      	nop
 800f030:	bd80      	pop	{r7, pc}
 800f032:	bf00      	nop
 800f034:	20002c78 	.word	0x20002c78

0800f038 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800f038:	b480      	push	{r7}
 800f03a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f03c:	4b06      	ldr	r3, [pc, #24]	; (800f058 <SystemInit+0x20>)
 800f03e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f042:	4a05      	ldr	r2, [pc, #20]	; (800f058 <SystemInit+0x20>)
 800f044:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f048:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800f04c:	bf00      	nop
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr
 800f056:	bf00      	nop
 800f058:	e000ed00 	.word	0xe000ed00

0800f05c <thrustersInit>:
    {0.4041149, 0.25000000, 0.35350677, 1.00000000, 0.3, 1.0000000, 1.00000000},
    {0.40411496, -0.25000000, 0.3535067, -1.0000000, 0.3, -1.00000000,  1.50000000}
};

void thrustersInit()
{
 800f05c:	b480      	push	{r7}
 800f05e:	b083      	sub	sp, #12
 800f060:	af00      	add	r7, sp, #0
   //Numarate by LOVE
  rThrusters[FDR].address = 1; //Forward Down Right
 800f062:	4b30      	ldr	r3, [pc, #192]	; (800f124 <thrustersInit+0xc8>)
 800f064:	2201      	movs	r2, #1
 800f066:	701a      	strb	r2, [r3, #0]
  rThrusters[FDL].address = 2; //Forward Down Left
 800f068:	4b2e      	ldr	r3, [pc, #184]	; (800f124 <thrustersInit+0xc8>)
 800f06a:	2202      	movs	r2, #2
 800f06c:	761a      	strb	r2, [r3, #24]
  rThrusters[BDR].address = 3; //Back Down Right
 800f06e:	4b2d      	ldr	r3, [pc, #180]	; (800f124 <thrustersInit+0xc8>)
 800f070:	2203      	movs	r2, #3
 800f072:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  rThrusters[BDL].address = 4; //Back Down Left
 800f076:	4b2b      	ldr	r3, [pc, #172]	; (800f124 <thrustersInit+0xc8>)
 800f078:	2204      	movs	r2, #4
 800f07a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  rThrusters[FUR].address = 5; //Forward Up Right
 800f07e:	4b29      	ldr	r3, [pc, #164]	; (800f124 <thrustersInit+0xc8>)
 800f080:	2205      	movs	r2, #5
 800f082:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  rThrusters[FUL].address = 6; //Forward Up Left
 800f086:	4b27      	ldr	r3, [pc, #156]	; (800f124 <thrustersInit+0xc8>)
 800f088:	2206      	movs	r2, #6
 800f08a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  rThrusters[BUR].address = 7; //Back Up Right
 800f08e:	4b25      	ldr	r3, [pc, #148]	; (800f124 <thrustersInit+0xc8>)
 800f090:	2207      	movs	r2, #7
 800f092:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
  rThrusters[BUL].address = 8; //Back Up Left
 800f096:	4b23      	ldr	r3, [pc, #140]	; (800f124 <thrustersInit+0xc8>)
 800f098:	2208      	movs	r2, #8
 800f09a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 800f09e:	2300      	movs	r3, #0
 800f0a0:	71fb      	strb	r3, [r7, #7]
 800f0a2:	e034      	b.n	800f10e <thrustersInit+0xb2>
    rThrusters[i].desiredSpeed = 0;
 800f0a4:	79fa      	ldrb	r2, [r7, #7]
 800f0a6:	491f      	ldr	r1, [pc, #124]	; (800f124 <thrustersInit+0xc8>)
 800f0a8:	4613      	mov	r3, r2
 800f0aa:	005b      	lsls	r3, r3, #1
 800f0ac:	4413      	add	r3, r2
 800f0ae:	00db      	lsls	r3, r3, #3
 800f0b0:	440b      	add	r3, r1
 800f0b2:	3302      	adds	r3, #2
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	701a      	strb	r2, [r3, #0]
    rThrusters[i].kForward = 0.7;
 800f0b8:	79fa      	ldrb	r2, [r7, #7]
 800f0ba:	491a      	ldr	r1, [pc, #104]	; (800f124 <thrustersInit+0xc8>)
 800f0bc:	4613      	mov	r3, r2
 800f0be:	005b      	lsls	r3, r3, #1
 800f0c0:	4413      	add	r3, r2
 800f0c2:	00db      	lsls	r3, r3, #3
 800f0c4:	440b      	add	r3, r1
 800f0c6:	330c      	adds	r3, #12
 800f0c8:	4a17      	ldr	r2, [pc, #92]	; (800f128 <thrustersInit+0xcc>)
 800f0ca:	601a      	str	r2, [r3, #0]
    rThrusters[i].kBackward = 0.7;
 800f0cc:	79fa      	ldrb	r2, [r7, #7]
 800f0ce:	4915      	ldr	r1, [pc, #84]	; (800f124 <thrustersInit+0xc8>)
 800f0d0:	4613      	mov	r3, r2
 800f0d2:	005b      	lsls	r3, r3, #1
 800f0d4:	4413      	add	r3, r2
 800f0d6:	00db      	lsls	r3, r3, #3
 800f0d8:	440b      	add	r3, r1
 800f0da:	3310      	adds	r3, #16
 800f0dc:	4a12      	ldr	r2, [pc, #72]	; (800f128 <thrustersInit+0xcc>)
 800f0de:	601a      	str	r2, [r3, #0]
    rThrusters[i].sForward = 127;
 800f0e0:	79fa      	ldrb	r2, [r7, #7]
 800f0e2:	4910      	ldr	r1, [pc, #64]	; (800f124 <thrustersInit+0xc8>)
 800f0e4:	4613      	mov	r3, r2
 800f0e6:	005b      	lsls	r3, r3, #1
 800f0e8:	4413      	add	r3, r2
 800f0ea:	00db      	lsls	r3, r3, #3
 800f0ec:	440b      	add	r3, r1
 800f0ee:	3314      	adds	r3, #20
 800f0f0:	227f      	movs	r2, #127	; 0x7f
 800f0f2:	701a      	strb	r2, [r3, #0]
    rThrusters[i].sBackward = 127;
 800f0f4:	79fa      	ldrb	r2, [r7, #7]
 800f0f6:	490b      	ldr	r1, [pc, #44]	; (800f124 <thrustersInit+0xc8>)
 800f0f8:	4613      	mov	r3, r2
 800f0fa:	005b      	lsls	r3, r3, #1
 800f0fc:	4413      	add	r3, r2
 800f0fe:	00db      	lsls	r3, r3, #3
 800f100:	440b      	add	r3, r1
 800f102:	3315      	adds	r3, #21
 800f104:	227f      	movs	r2, #127	; 0x7f
 800f106:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 800f108:	79fb      	ldrb	r3, [r7, #7]
 800f10a:	3301      	adds	r3, #1
 800f10c:	71fb      	strb	r3, [r7, #7]
 800f10e:	79fb      	ldrb	r3, [r7, #7]
 800f110:	2b07      	cmp	r3, #7
 800f112:	d9c7      	bls.n	800f0a4 <thrustersInit+0x48>
  }

}
 800f114:	bf00      	nop
 800f116:	bf00      	nop
 800f118:	370c      	adds	r7, #12
 800f11a:	46bd      	mov	sp, r7
 800f11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f120:	4770      	bx	lr
 800f122:	bf00      	nop
 800f124:	200024d8 	.word	0x200024d8
 800f128:	3f333333 	.word	0x3f333333

0800f12c <resetThrusters>:

void resetThrusters()
{
 800f12c:	b480      	push	{r7}
 800f12e:	b083      	sub	sp, #12
 800f130:	af00      	add	r7, sp, #0
  rJoySpeed.depth = 0;
 800f132:	4b19      	ldr	r3, [pc, #100]	; (800f198 <resetThrusters+0x6c>)
 800f134:	f04f 0200 	mov.w	r2, #0
 800f138:	609a      	str	r2, [r3, #8]
  rJoySpeed.lag = 0;
 800f13a:	4b17      	ldr	r3, [pc, #92]	; (800f198 <resetThrusters+0x6c>)
 800f13c:	f04f 0200 	mov.w	r2, #0
 800f140:	605a      	str	r2, [r3, #4]
  rJoySpeed.march = 0;
 800f142:	4b15      	ldr	r3, [pc, #84]	; (800f198 <resetThrusters+0x6c>)
 800f144:	f04f 0200 	mov.w	r2, #0
 800f148:	601a      	str	r2, [r3, #0]
  rJoySpeed.pitch = 0;
 800f14a:	4b13      	ldr	r3, [pc, #76]	; (800f198 <resetThrusters+0x6c>)
 800f14c:	f04f 0200 	mov.w	r2, #0
 800f150:	611a      	str	r2, [r3, #16]
  rJoySpeed.roll = 0;
 800f152:	4b11      	ldr	r3, [pc, #68]	; (800f198 <resetThrusters+0x6c>)
 800f154:	f04f 0200 	mov.w	r2, #0
 800f158:	60da      	str	r2, [r3, #12]
  rJoySpeed.yaw = 0;
 800f15a:	4b0f      	ldr	r3, [pc, #60]	; (800f198 <resetThrusters+0x6c>)
 800f15c:	f04f 0200 	mov.w	r2, #0
 800f160:	615a      	str	r2, [r3, #20]

  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 800f162:	2300      	movs	r3, #0
 800f164:	71fb      	strb	r3, [r7, #7]
 800f166:	e00c      	b.n	800f182 <resetThrusters+0x56>
    rThrusters[i].desiredSpeed = 0;
 800f168:	79fa      	ldrb	r2, [r7, #7]
 800f16a:	490c      	ldr	r1, [pc, #48]	; (800f19c <resetThrusters+0x70>)
 800f16c:	4613      	mov	r3, r2
 800f16e:	005b      	lsls	r3, r3, #1
 800f170:	4413      	add	r3, r2
 800f172:	00db      	lsls	r3, r3, #3
 800f174:	440b      	add	r3, r1
 800f176:	3302      	adds	r3, #2
 800f178:	2200      	movs	r2, #0
 800f17a:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 800f17c:	79fb      	ldrb	r3, [r7, #7]
 800f17e:	3301      	adds	r3, #1
 800f180:	71fb      	strb	r3, [r7, #7]
 800f182:	79fb      	ldrb	r3, [r7, #7]
 800f184:	2b07      	cmp	r3, #7
 800f186:	d9ef      	bls.n	800f168 <resetThrusters+0x3c>
  }

}
 800f188:	bf00      	nop
 800f18a:	bf00      	nop
 800f18c:	370c      	adds	r7, #12
 800f18e:	46bd      	mov	sp, r7
 800f190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f194:	4770      	bx	lr
 800f196:	bf00      	nop
 800f198:	20002608 	.word	0x20002608
 800f19c:	200024d8 	.word	0x200024d8

0800f1a0 <fillThrustersRequest>:

void fillThrustersRequest(uint8_t *buf, uint8_t thruster)
{
 800f1a0:	b590      	push	{r4, r7, lr}
 800f1a2:	b089      	sub	sp, #36	; 0x24
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	460b      	mov	r3, r1
 800f1aa:	70fb      	strb	r3, [r7, #3]
    struct thrustersRequest_s res;

    res.AA = 0xAA;
 800f1ac:	23aa      	movs	r3, #170	; 0xaa
 800f1ae:	733b      	strb	r3, [r7, #12]
    res.type = 0x01;
 800f1b0:	2301      	movs	r3, #1
 800f1b2:	737b      	strb	r3, [r7, #13]
    res.address = 0xAF;
 800f1b4:	23af      	movs	r3, #175	; 0xaf
 800f1b6:	73bb      	strb	r3, [r7, #14]
    for(int i=0; i<8;i++){
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	61fb      	str	r3, [r7, #28]
 800f1bc:	e04c      	b.n	800f258 <fillThrustersRequest+0xb8>
    	int16_t velocity = rThrusters[i].desiredSpeed;
 800f1be:	4933      	ldr	r1, [pc, #204]	; (800f28c <fillThrustersRequest+0xec>)
 800f1c0:	69fa      	ldr	r2, [r7, #28]
 800f1c2:	4613      	mov	r3, r2
 800f1c4:	005b      	lsls	r3, r3, #1
 800f1c6:	4413      	add	r3, r2
 800f1c8:	00db      	lsls	r3, r3, #3
 800f1ca:	440b      	add	r3, r1
 800f1cc:	3302      	adds	r3, #2
 800f1ce:	f993 3000 	ldrsb.w	r3, [r3]
 800f1d2:	837b      	strh	r3, [r7, #26]
    	if(rThrusters[i].inverse) {
//    		velocity *= -1;
    	}

    	// Multiplier constants
    	if(velocity > 0) {
 800f1d4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	dd17      	ble.n	800f20c <fillThrustersRequest+0x6c>
    		velocity = (int16_t) ( (float) (velocity) * rThrusters[i].kForward);
 800f1dc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800f1e0:	ee07 3a90 	vmov	s15, r3
 800f1e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f1e8:	4928      	ldr	r1, [pc, #160]	; (800f28c <fillThrustersRequest+0xec>)
 800f1ea:	69fa      	ldr	r2, [r7, #28]
 800f1ec:	4613      	mov	r3, r2
 800f1ee:	005b      	lsls	r3, r3, #1
 800f1f0:	4413      	add	r3, r2
 800f1f2:	00db      	lsls	r3, r3, #3
 800f1f4:	440b      	add	r3, r1
 800f1f6:	330c      	adds	r3, #12
 800f1f8:	edd3 7a00 	vldr	s15, [r3]
 800f1fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f200:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f204:	ee17 3a90 	vmov	r3, s15
 800f208:	837b      	strh	r3, [r7, #26]
 800f20a:	e01a      	b.n	800f242 <fillThrustersRequest+0xa2>
    	}
    	else if(velocity < 0) {
 800f20c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800f210:	2b00      	cmp	r3, #0
 800f212:	da16      	bge.n	800f242 <fillThrustersRequest+0xa2>
    		velocity = (int16_t) ((float) (velocity) * rThrusters[i].kBackward);
 800f214:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800f218:	ee07 3a90 	vmov	s15, r3
 800f21c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f220:	491a      	ldr	r1, [pc, #104]	; (800f28c <fillThrustersRequest+0xec>)
 800f222:	69fa      	ldr	r2, [r7, #28]
 800f224:	4613      	mov	r3, r2
 800f226:	005b      	lsls	r3, r3, #1
 800f228:	4413      	add	r3, r2
 800f22a:	00db      	lsls	r3, r3, #3
 800f22c:	440b      	add	r3, r1
 800f22e:	3310      	adds	r3, #16
 800f230:	edd3 7a00 	vldr	s15, [r3]
 800f234:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f23c:	ee17 3a90 	vmov	r3, s15
 800f240:	837b      	strh	r3, [r7, #26]
    	}

    	res.velocity[i] = velocity;
 800f242:	8b7b      	ldrh	r3, [r7, #26]
 800f244:	b259      	sxtb	r1, r3
 800f246:	f107 020f 	add.w	r2, r7, #15
 800f24a:	69fb      	ldr	r3, [r7, #28]
 800f24c:	4413      	add	r3, r2
 800f24e:	460a      	mov	r2, r1
 800f250:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<8;i++){
 800f252:	69fb      	ldr	r3, [r7, #28]
 800f254:	3301      	adds	r3, #1
 800f256:	61fb      	str	r3, [r7, #28]
 800f258:	69fb      	ldr	r3, [r7, #28]
 800f25a:	2b07      	cmp	r3, #7
 800f25c:	ddaf      	ble.n	800f1be <fillThrustersRequest+0x1e>
    }
    res.pwm_servo = rDevice[GRAB].force;
 800f25e:	4b0c      	ldr	r3, [pc, #48]	; (800f290 <fillThrustersRequest+0xf0>)
 800f260:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800f264:	75fb      	strb	r3, [r7, #23]
    memcpy((void*)buf, (void*)&res, THRUSTERS_REQUEST_LENGTH);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	461c      	mov	r4, r3
 800f26a:	f107 030c 	add.w	r3, r7, #12
 800f26e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f270:	6020      	str	r0, [r4, #0]
 800f272:	6061      	str	r1, [r4, #4]
 800f274:	60a2      	str	r2, [r4, #8]
 800f276:	781b      	ldrb	r3, [r3, #0]
 800f278:	7323      	strb	r3, [r4, #12]
    AddChecksumm8bVma(buf, THRUSTERS_REQUEST_LENGTH);
 800f27a:	210d      	movs	r1, #13
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f7fc fabb 	bl	800b7f8 <AddChecksumm8bVma>
}
 800f282:	bf00      	nop
 800f284:	3724      	adds	r7, #36	; 0x24
 800f286:	46bd      	mov	sp, r7
 800f288:	bd90      	pop	{r4, r7, pc}
 800f28a:	bf00      	nop
 800f28c:	200024d8 	.word	0x200024d8
 800f290:	20002620 	.word	0x20002620

0800f294 <fillThrustersResponse>:

void fillThrustersResponse(uint8_t *buf, uint8_t thruster)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b086      	sub	sp, #24
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	460b      	mov	r3, r1
 800f29e:	70fb      	strb	r3, [r7, #3]
	//TODO errors parsing! and what is all this new stuff means
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 800f2a0:	2109      	movs	r1, #9
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f7fc fa7b 	bl	800b79e <IsChecksumm8bCorrectVma>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d01f      	beq.n	800f2ee <fillThrustersResponse+0x5a>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d01b      	beq.n	800f2ee <fillThrustersResponse+0x5a>
    	struct thrustersResponse_s res;
    	memcpy((void*)&res, (void*)buf, THRUSTERS_RESPONSE_LENGTH);
 800f2b6:	687a      	ldr	r2, [r7, #4]
 800f2b8:	f107 030c 	add.w	r3, r7, #12
 800f2bc:	6810      	ldr	r0, [r2, #0]
 800f2be:	6851      	ldr	r1, [r2, #4]
 800f2c0:	c303      	stmia	r3!, {r0, r1}
 800f2c2:	7a12      	ldrb	r2, [r2, #8]
 800f2c4:	701a      	strb	r2, [r3, #0]

        rThrusters[thruster].current = res.current;
 800f2c6:	78fa      	ldrb	r2, [r7, #3]
 800f2c8:	8a38      	ldrh	r0, [r7, #16]
 800f2ca:	490e      	ldr	r1, [pc, #56]	; (800f304 <fillThrustersResponse+0x70>)
 800f2cc:	4613      	mov	r3, r2
 800f2ce:	005b      	lsls	r3, r3, #1
 800f2d0:	4413      	add	r3, r2
 800f2d2:	00db      	lsls	r3, r3, #3
 800f2d4:	440b      	add	r3, r1
 800f2d6:	3304      	adds	r3, #4
 800f2d8:	4602      	mov	r2, r0
 800f2da:	801a      	strh	r2, [r3, #0]

        ++uartBus[THRUSTERS_UART].successRxCounter;
 800f2dc:	4b0a      	ldr	r3, [pc, #40]	; (800f308 <fillThrustersResponse+0x74>)
 800f2de:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	b29a      	uxth	r2, r3
 800f2e6:	4b08      	ldr	r3, [pc, #32]	; (800f308 <fillThrustersResponse+0x74>)
 800f2e8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 800f2ec:	e005      	b.n	800f2fa <fillThrustersResponse+0x66>
    }
    else {
    	++uartBus[THRUSTERS_UART].brokenRxCounter;
 800f2ee:	4b06      	ldr	r3, [pc, #24]	; (800f308 <fillThrustersResponse+0x74>)
 800f2f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	4a04      	ldr	r2, [pc, #16]	; (800f308 <fillThrustersResponse+0x74>)
 800f2f6:	6453      	str	r3, [r2, #68]	; 0x44
    }
}
 800f2f8:	bf00      	nop
 800f2fa:	bf00      	nop
 800f2fc:	3718      	adds	r7, #24
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}
 800f302:	bf00      	nop
 800f304:	200024d8 	.word	0x200024d8
 800f308:	2000087c 	.word	0x2000087c

0800f30c <formThrustVectors>:

void formThrustVectors()
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b090      	sub	sp, #64	; 0x40
 800f310:	af00      	add	r7, sp, #0
  float velocity[THRUSTERS_NUMBER];
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 800f312:	2300      	movs	r3, #0
 800f314:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f318:	e00d      	b.n	800f336 <formThrustVectors+0x2a>
    velocity[i] = 0;
 800f31a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f31e:	009b      	lsls	r3, r3, #2
 800f320:	3340      	adds	r3, #64	; 0x40
 800f322:	443b      	add	r3, r7
 800f324:	3b3c      	subs	r3, #60	; 0x3c
 800f326:	f04f 0200 	mov.w	r2, #0
 800f32a:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 800f32c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f330:	3301      	adds	r3, #1
 800f332:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f336:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f33a:	2b07      	cmp	r3, #7
 800f33c:	d9ed      	bls.n	800f31a <formThrustVectors+0xe>
  float Uz;
  float Ugamma;
  float Uteta;
  float Upsi;

  Ux = rJoySpeed.march;
 800f33e:	4b5b      	ldr	r3, [pc, #364]	; (800f4ac <formThrustVectors+0x1a0>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	63bb      	str	r3, [r7, #56]	; 0x38
  Uy = rJoySpeed.lag;
 800f344:	4b59      	ldr	r3, [pc, #356]	; (800f4ac <formThrustVectors+0x1a0>)
 800f346:	685b      	ldr	r3, [r3, #4]
 800f348:	637b      	str	r3, [r7, #52]	; 0x34
  Uz = rJoySpeed.depth;
 800f34a:	4b58      	ldr	r3, [pc, #352]	; (800f4ac <formThrustVectors+0x1a0>)
 800f34c:	689b      	ldr	r3, [r3, #8]
 800f34e:	633b      	str	r3, [r7, #48]	; 0x30
  Upsi = rJoySpeed.yaw;
 800f350:	4b56      	ldr	r3, [pc, #344]	; (800f4ac <formThrustVectors+0x1a0>)
 800f352:	695b      	ldr	r3, [r3, #20]
 800f354:	62fb      	str	r3, [r7, #44]	; 0x2c
  Ugamma = rJoySpeed.roll;
 800f356:	4b55      	ldr	r3, [pc, #340]	; (800f4ac <formThrustVectors+0x1a0>)
 800f358:	68db      	ldr	r3, [r3, #12]
 800f35a:	62bb      	str	r3, [r7, #40]	; 0x28
  Uteta = rJoySpeed.pitch;
 800f35c:	4b53      	ldr	r3, [pc, #332]	; (800f4ac <formThrustVectors+0x1a0>)
 800f35e:	691b      	ldr	r3, [r3, #16]
 800f360:	627b      	str	r3, [r7, #36]	; 0x24

  for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i)
 800f362:	2300      	movs	r3, #0
 800f364:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800f368:	e095      	b.n	800f496 <formThrustVectors+0x18a>
  {
    velocity[i] = (KVMA[i][0]*Ux + KVMA[i][1]*Uy + KVMA[i][2]*Uz
 800f36a:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800f36e:	4950      	ldr	r1, [pc, #320]	; (800f4b0 <formThrustVectors+0x1a4>)
 800f370:	4613      	mov	r3, r2
 800f372:	00db      	lsls	r3, r3, #3
 800f374:	1a9b      	subs	r3, r3, r2
 800f376:	009b      	lsls	r3, r3, #2
 800f378:	440b      	add	r3, r1
 800f37a:	ed93 7a00 	vldr	s14, [r3]
 800f37e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f382:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f386:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800f38a:	4949      	ldr	r1, [pc, #292]	; (800f4b0 <formThrustVectors+0x1a4>)
 800f38c:	4613      	mov	r3, r2
 800f38e:	00db      	lsls	r3, r3, #3
 800f390:	1a9b      	subs	r3, r3, r2
 800f392:	009b      	lsls	r3, r3, #2
 800f394:	440b      	add	r3, r1
 800f396:	3304      	adds	r3, #4
 800f398:	edd3 6a00 	vldr	s13, [r3]
 800f39c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f3a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f3a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f3a8:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800f3ac:	4940      	ldr	r1, [pc, #256]	; (800f4b0 <formThrustVectors+0x1a4>)
 800f3ae:	4613      	mov	r3, r2
 800f3b0:	00db      	lsls	r3, r3, #3
 800f3b2:	1a9b      	subs	r3, r3, r2
 800f3b4:	009b      	lsls	r3, r3, #2
 800f3b6:	440b      	add	r3, r1
 800f3b8:	3308      	adds	r3, #8
 800f3ba:	edd3 6a00 	vldr	s13, [r3]
 800f3be:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f3c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f3c6:	ee37 7a27 	vadd.f32	s14, s14, s15
        + KVMA[i][3]*Ugamma + KVMA[i][4]*Uteta + KVMA[i][5]*Upsi)*KVMA[i][6];
 800f3ca:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800f3ce:	4938      	ldr	r1, [pc, #224]	; (800f4b0 <formThrustVectors+0x1a4>)
 800f3d0:	4613      	mov	r3, r2
 800f3d2:	00db      	lsls	r3, r3, #3
 800f3d4:	1a9b      	subs	r3, r3, r2
 800f3d6:	009b      	lsls	r3, r3, #2
 800f3d8:	440b      	add	r3, r1
 800f3da:	330c      	adds	r3, #12
 800f3dc:	edd3 6a00 	vldr	s13, [r3]
 800f3e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f3e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f3e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f3ec:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800f3f0:	492f      	ldr	r1, [pc, #188]	; (800f4b0 <formThrustVectors+0x1a4>)
 800f3f2:	4613      	mov	r3, r2
 800f3f4:	00db      	lsls	r3, r3, #3
 800f3f6:	1a9b      	subs	r3, r3, r2
 800f3f8:	009b      	lsls	r3, r3, #2
 800f3fa:	440b      	add	r3, r1
 800f3fc:	3310      	adds	r3, #16
 800f3fe:	edd3 6a00 	vldr	s13, [r3]
 800f402:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f406:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f40a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f40e:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800f412:	4927      	ldr	r1, [pc, #156]	; (800f4b0 <formThrustVectors+0x1a4>)
 800f414:	4613      	mov	r3, r2
 800f416:	00db      	lsls	r3, r3, #3
 800f418:	1a9b      	subs	r3, r3, r2
 800f41a:	009b      	lsls	r3, r3, #2
 800f41c:	440b      	add	r3, r1
 800f41e:	3314      	adds	r3, #20
 800f420:	edd3 6a00 	vldr	s13, [r3]
 800f424:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f42c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f430:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800f434:	491e      	ldr	r1, [pc, #120]	; (800f4b0 <formThrustVectors+0x1a4>)
 800f436:	4613      	mov	r3, r2
 800f438:	00db      	lsls	r3, r3, #3
 800f43a:	1a9b      	subs	r3, r3, r2
 800f43c:	009b      	lsls	r3, r3, #2
 800f43e:	440b      	add	r3, r1
 800f440:	3318      	adds	r3, #24
 800f442:	edd3 7a00 	vldr	s15, [r3]
    velocity[i] = (KVMA[i][0]*Ux + KVMA[i][1]*Uy + KVMA[i][2]*Uz
 800f446:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
        + KVMA[i][3]*Ugamma + KVMA[i][4]*Uteta + KVMA[i][5]*Upsi)*KVMA[i][6];
 800f44a:	ee67 7a27 	vmul.f32	s15, s14, s15
    velocity[i] = (KVMA[i][0]*Ux + KVMA[i][1]*Uy + KVMA[i][2]*Uz
 800f44e:	009b      	lsls	r3, r3, #2
 800f450:	3340      	adds	r3, #64	; 0x40
 800f452:	443b      	add	r3, r7
 800f454:	3b3c      	subs	r3, #60	; 0x3c
 800f456:	edc3 7a00 	vstr	s15, [r3]
    rThrusters[i].desiredSpeed = resizeFloatToUint8(velocity[i]);
 800f45a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	3340      	adds	r3, #64	; 0x40
 800f462:	443b      	add	r3, r7
 800f464:	3b3c      	subs	r3, #60	; 0x3c
 800f466:	edd3 7a00 	vldr	s15, [r3]
 800f46a:	eeb0 0a67 	vmov.f32	s0, s15
 800f46e:	f000 f823 	bl	800f4b8 <resizeFloatToUint8>
 800f472:	4603      	mov	r3, r0
 800f474:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800f478:	b258      	sxtb	r0, r3
 800f47a:	490e      	ldr	r1, [pc, #56]	; (800f4b4 <formThrustVectors+0x1a8>)
 800f47c:	4613      	mov	r3, r2
 800f47e:	005b      	lsls	r3, r3, #1
 800f480:	4413      	add	r3, r2
 800f482:	00db      	lsls	r3, r3, #3
 800f484:	440b      	add	r3, r1
 800f486:	3302      	adds	r3, #2
 800f488:	4602      	mov	r2, r0
 800f48a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i)
 800f48c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f490:	3301      	adds	r3, #1
 800f492:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800f496:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f49a:	2b07      	cmp	r3, #7
 800f49c:	f67f af65 	bls.w	800f36a <formThrustVectors+0x5e>
  }

}
 800f4a0:	bf00      	nop
 800f4a2:	bf00      	nop
 800f4a4:	3740      	adds	r7, #64	; 0x40
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}
 800f4aa:	bf00      	nop
 800f4ac:	20002608 	.word	0x20002608
 800f4b0:	20000048 	.word	0x20000048
 800f4b4:	200024d8 	.word	0x200024d8

0800f4b8 <resizeFloatToUint8>:

uint8_t resizeFloatToUint8(float input)
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	b085      	sub	sp, #20
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t cast = (int32_t) input;
 800f4c2:	edd7 7a01 	vldr	s15, [r7, #4]
 800f4c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f4ca:	ee17 3a90 	vmov	r3, s15
 800f4ce:	60fb      	str	r3, [r7, #12]
  cast = cast / 0xFF;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	4a0e      	ldr	r2, [pc, #56]	; (800f50c <resizeFloatToUint8+0x54>)
 800f4d4:	fb82 1203 	smull	r1, r2, r2, r3
 800f4d8:	441a      	add	r2, r3
 800f4da:	11d2      	asrs	r2, r2, #7
 800f4dc:	17db      	asrs	r3, r3, #31
 800f4de:	1ad3      	subs	r3, r2, r3
 800f4e0:	60fb      	str	r3, [r7, #12]
  if (cast > 127) {
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	2b7f      	cmp	r3, #127	; 0x7f
 800f4e6:	dd02      	ble.n	800f4ee <resizeFloatToUint8+0x36>
    cast = 127;
 800f4e8:	237f      	movs	r3, #127	; 0x7f
 800f4ea:	60fb      	str	r3, [r7, #12]
 800f4ec:	e006      	b.n	800f4fc <resizeFloatToUint8+0x44>
  }
  else if(cast < -127) {
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 800f4f4:	da02      	bge.n	800f4fc <resizeFloatToUint8+0x44>
    cast = -127;
 800f4f6:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800f4fa:	60fb      	str	r3, [r7, #12]
  }
  return (int8_t) cast;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	b2db      	uxtb	r3, r3
}
 800f500:	4618      	mov	r0, r3
 800f502:	3714      	adds	r7, #20
 800f504:	46bd      	mov	sp, r7
 800f506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50a:	4770      	bx	lr
 800f50c:	80808081 	.word	0x80808081

0800f510 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b084      	sub	sp, #16
 800f514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f516:	1d3b      	adds	r3, r7, #4
 800f518:	2200      	movs	r2, #0
 800f51a:	601a      	str	r2, [r3, #0]
 800f51c:	605a      	str	r2, [r3, #4]
 800f51e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800f520:	4b14      	ldr	r3, [pc, #80]	; (800f574 <MX_TIM7_Init+0x64>)
 800f522:	4a15      	ldr	r2, [pc, #84]	; (800f578 <MX_TIM7_Init+0x68>)
 800f524:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800f526:	4b13      	ldr	r3, [pc, #76]	; (800f574 <MX_TIM7_Init+0x64>)
 800f528:	2200      	movs	r2, #0
 800f52a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f52c:	4b11      	ldr	r3, [pc, #68]	; (800f574 <MX_TIM7_Init+0x64>)
 800f52e:	2200      	movs	r2, #0
 800f530:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800f532:	4b10      	ldr	r3, [pc, #64]	; (800f574 <MX_TIM7_Init+0x64>)
 800f534:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f538:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f53a:	4b0e      	ldr	r3, [pc, #56]	; (800f574 <MX_TIM7_Init+0x64>)
 800f53c:	2200      	movs	r2, #0
 800f53e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800f540:	480c      	ldr	r0, [pc, #48]	; (800f574 <MX_TIM7_Init+0x64>)
 800f542:	f7f5 fff9 	bl	8005538 <HAL_TIM_Base_Init>
 800f546:	4603      	mov	r3, r0
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d001      	beq.n	800f550 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800f54c:	f7fe fdda 	bl	800e104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f550:	2300      	movs	r3, #0
 800f552:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f554:	2300      	movs	r3, #0
 800f556:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800f558:	1d3b      	adds	r3, r7, #4
 800f55a:	4619      	mov	r1, r3
 800f55c:	4805      	ldr	r0, [pc, #20]	; (800f574 <MX_TIM7_Init+0x64>)
 800f55e:	f7f6 fa85 	bl	8005a6c <HAL_TIMEx_MasterConfigSynchronization>
 800f562:	4603      	mov	r3, r0
 800f564:	2b00      	cmp	r3, #0
 800f566:	d001      	beq.n	800f56c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800f568:	f7fe fdcc 	bl	800e104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800f56c:	bf00      	nop
 800f56e:	3710      	adds	r7, #16
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	20002c2c 	.word	0x20002c2c
 800f578:	40001400 	.word	0x40001400

0800f57c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800f57c:	b480      	push	{r7}
 800f57e:	b085      	sub	sp, #20
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	4a0a      	ldr	r2, [pc, #40]	; (800f5b4 <HAL_TIM_Base_MspInit+0x38>)
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d10b      	bne.n	800f5a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800f58e:	4b0a      	ldr	r3, [pc, #40]	; (800f5b8 <HAL_TIM_Base_MspInit+0x3c>)
 800f590:	69db      	ldr	r3, [r3, #28]
 800f592:	4a09      	ldr	r2, [pc, #36]	; (800f5b8 <HAL_TIM_Base_MspInit+0x3c>)
 800f594:	f043 0320 	orr.w	r3, r3, #32
 800f598:	61d3      	str	r3, [r2, #28]
 800f59a:	4b07      	ldr	r3, [pc, #28]	; (800f5b8 <HAL_TIM_Base_MspInit+0x3c>)
 800f59c:	69db      	ldr	r3, [r3, #28]
 800f59e:	f003 0320 	and.w	r3, r3, #32
 800f5a2:	60fb      	str	r3, [r7, #12]
 800f5a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800f5a6:	bf00      	nop
 800f5a8:	3714      	adds	r7, #20
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b0:	4770      	bx	lr
 800f5b2:	bf00      	nop
 800f5b4:	40001400 	.word	0x40001400
 800f5b8:	40021000 	.word	0x40021000

0800f5bc <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800f5c0:	4b14      	ldr	r3, [pc, #80]	; (800f614 <MX_UART4_Init+0x58>)
 800f5c2:	4a15      	ldr	r2, [pc, #84]	; (800f618 <MX_UART4_Init+0x5c>)
 800f5c4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800f5c6:	4b13      	ldr	r3, [pc, #76]	; (800f614 <MX_UART4_Init+0x58>)
 800f5c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800f5cc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800f5ce:	4b11      	ldr	r3, [pc, #68]	; (800f614 <MX_UART4_Init+0x58>)
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800f5d4:	4b0f      	ldr	r3, [pc, #60]	; (800f614 <MX_UART4_Init+0x58>)
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800f5da:	4b0e      	ldr	r3, [pc, #56]	; (800f614 <MX_UART4_Init+0x58>)
 800f5dc:	2200      	movs	r2, #0
 800f5de:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800f5e0:	4b0c      	ldr	r3, [pc, #48]	; (800f614 <MX_UART4_Init+0x58>)
 800f5e2:	220c      	movs	r2, #12
 800f5e4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f5e6:	4b0b      	ldr	r3, [pc, #44]	; (800f614 <MX_UART4_Init+0x58>)
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800f5ec:	4b09      	ldr	r3, [pc, #36]	; (800f614 <MX_UART4_Init+0x58>)
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800f5f2:	4b08      	ldr	r3, [pc, #32]	; (800f614 <MX_UART4_Init+0x58>)
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f5f8:	4b06      	ldr	r3, [pc, #24]	; (800f614 <MX_UART4_Init+0x58>)
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800f5fe:	4805      	ldr	r0, [pc, #20]	; (800f614 <MX_UART4_Init+0x58>)
 800f600:	f7f6 fad2 	bl	8005ba8 <HAL_UART_Init>
 800f604:	4603      	mov	r3, r0
 800f606:	2b00      	cmp	r3, #0
 800f608:	d001      	beq.n	800f60e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800f60a:	f7fe fd7b 	bl	800e104 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800f60e:	bf00      	nop
 800f610:	bd80      	pop	{r7, pc}
 800f612:	bf00      	nop
 800f614:	20002c78 	.word	0x20002c78
 800f618:	40004c00 	.word	0x40004c00

0800f61c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800f620:	4b14      	ldr	r3, [pc, #80]	; (800f674 <MX_USART1_UART_Init+0x58>)
 800f622:	4a15      	ldr	r2, [pc, #84]	; (800f678 <MX_USART1_UART_Init+0x5c>)
 800f624:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800f626:	4b13      	ldr	r3, [pc, #76]	; (800f674 <MX_USART1_UART_Init+0x58>)
 800f628:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800f62c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800f62e:	4b11      	ldr	r3, [pc, #68]	; (800f674 <MX_USART1_UART_Init+0x58>)
 800f630:	2200      	movs	r2, #0
 800f632:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800f634:	4b0f      	ldr	r3, [pc, #60]	; (800f674 <MX_USART1_UART_Init+0x58>)
 800f636:	2200      	movs	r2, #0
 800f638:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800f63a:	4b0e      	ldr	r3, [pc, #56]	; (800f674 <MX_USART1_UART_Init+0x58>)
 800f63c:	2200      	movs	r2, #0
 800f63e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800f640:	4b0c      	ldr	r3, [pc, #48]	; (800f674 <MX_USART1_UART_Init+0x58>)
 800f642:	220c      	movs	r2, #12
 800f644:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f646:	4b0b      	ldr	r3, [pc, #44]	; (800f674 <MX_USART1_UART_Init+0x58>)
 800f648:	2200      	movs	r2, #0
 800f64a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800f64c:	4b09      	ldr	r3, [pc, #36]	; (800f674 <MX_USART1_UART_Init+0x58>)
 800f64e:	2200      	movs	r2, #0
 800f650:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800f652:	4b08      	ldr	r3, [pc, #32]	; (800f674 <MX_USART1_UART_Init+0x58>)
 800f654:	2200      	movs	r2, #0
 800f656:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f658:	4b06      	ldr	r3, [pc, #24]	; (800f674 <MX_USART1_UART_Init+0x58>)
 800f65a:	2200      	movs	r2, #0
 800f65c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800f65e:	4805      	ldr	r0, [pc, #20]	; (800f674 <MX_USART1_UART_Init+0x58>)
 800f660:	f7f6 faa2 	bl	8005ba8 <HAL_UART_Init>
 800f664:	4603      	mov	r3, r0
 800f666:	2b00      	cmp	r3, #0
 800f668:	d001      	beq.n	800f66e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800f66a:	f7fe fd4b 	bl	800e104 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800f66e:	bf00      	nop
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	20002cfc 	.word	0x20002cfc
 800f678:	40013800 	.word	0x40013800

0800f67c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800f680:	4b16      	ldr	r3, [pc, #88]	; (800f6dc <MX_USART2_UART_Init+0x60>)
 800f682:	4a17      	ldr	r2, [pc, #92]	; (800f6e0 <MX_USART2_UART_Init+0x64>)
 800f684:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800f686:	4b15      	ldr	r3, [pc, #84]	; (800f6dc <MX_USART2_UART_Init+0x60>)
 800f688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800f68c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800f68e:	4b13      	ldr	r3, [pc, #76]	; (800f6dc <MX_USART2_UART_Init+0x60>)
 800f690:	2200      	movs	r2, #0
 800f692:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800f694:	4b11      	ldr	r3, [pc, #68]	; (800f6dc <MX_USART2_UART_Init+0x60>)
 800f696:	2200      	movs	r2, #0
 800f698:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800f69a:	4b10      	ldr	r3, [pc, #64]	; (800f6dc <MX_USART2_UART_Init+0x60>)
 800f69c:	2200      	movs	r2, #0
 800f69e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800f6a0:	4b0e      	ldr	r3, [pc, #56]	; (800f6dc <MX_USART2_UART_Init+0x60>)
 800f6a2:	220c      	movs	r2, #12
 800f6a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f6a6:	4b0d      	ldr	r3, [pc, #52]	; (800f6dc <MX_USART2_UART_Init+0x60>)
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800f6ac:	4b0b      	ldr	r3, [pc, #44]	; (800f6dc <MX_USART2_UART_Init+0x60>)
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800f6b2:	4b0a      	ldr	r3, [pc, #40]	; (800f6dc <MX_USART2_UART_Init+0x60>)
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800f6b8:	4b08      	ldr	r3, [pc, #32]	; (800f6dc <MX_USART2_UART_Init+0x60>)
 800f6ba:	2220      	movs	r2, #32
 800f6bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800f6be:	4b07      	ldr	r3, [pc, #28]	; (800f6dc <MX_USART2_UART_Init+0x60>)
 800f6c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f6c4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800f6c6:	4805      	ldr	r0, [pc, #20]	; (800f6dc <MX_USART2_UART_Init+0x60>)
 800f6c8:	f7f6 fa6e 	bl	8005ba8 <HAL_UART_Init>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d001      	beq.n	800f6d6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800f6d2:	f7fe fd17 	bl	800e104 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800f6d6:	bf00      	nop
 800f6d8:	bd80      	pop	{r7, pc}
 800f6da:	bf00      	nop
 800f6dc:	20002d80 	.word	0x20002d80
 800f6e0:	40004400 	.word	0x40004400

0800f6e4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800f6e8:	4b15      	ldr	r3, [pc, #84]	; (800f740 <MX_USART3_UART_Init+0x5c>)
 800f6ea:	4a16      	ldr	r2, [pc, #88]	; (800f744 <MX_USART3_UART_Init+0x60>)
 800f6ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 800f6ee:	4b14      	ldr	r3, [pc, #80]	; (800f740 <MX_USART3_UART_Init+0x5c>)
 800f6f0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800f6f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800f6f6:	4b12      	ldr	r3, [pc, #72]	; (800f740 <MX_USART3_UART_Init+0x5c>)
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800f6fc:	4b10      	ldr	r3, [pc, #64]	; (800f740 <MX_USART3_UART_Init+0x5c>)
 800f6fe:	2200      	movs	r2, #0
 800f700:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800f702:	4b0f      	ldr	r3, [pc, #60]	; (800f740 <MX_USART3_UART_Init+0x5c>)
 800f704:	2200      	movs	r2, #0
 800f706:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800f708:	4b0d      	ldr	r3, [pc, #52]	; (800f740 <MX_USART3_UART_Init+0x5c>)
 800f70a:	220c      	movs	r2, #12
 800f70c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f70e:	4b0c      	ldr	r3, [pc, #48]	; (800f740 <MX_USART3_UART_Init+0x5c>)
 800f710:	2200      	movs	r2, #0
 800f712:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800f714:	4b0a      	ldr	r3, [pc, #40]	; (800f740 <MX_USART3_UART_Init+0x5c>)
 800f716:	2200      	movs	r2, #0
 800f718:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800f71a:	4b09      	ldr	r3, [pc, #36]	; (800f740 <MX_USART3_UART_Init+0x5c>)
 800f71c:	2200      	movs	r2, #0
 800f71e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f720:	4b07      	ldr	r3, [pc, #28]	; (800f740 <MX_USART3_UART_Init+0x5c>)
 800f722:	2200      	movs	r2, #0
 800f724:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800f726:	2300      	movs	r3, #0
 800f728:	2200      	movs	r2, #0
 800f72a:	2100      	movs	r1, #0
 800f72c:	4804      	ldr	r0, [pc, #16]	; (800f740 <MX_USART3_UART_Init+0x5c>)
 800f72e:	f7f8 f998 	bl	8007a62 <HAL_RS485Ex_Init>
 800f732:	4603      	mov	r3, r0
 800f734:	2b00      	cmp	r3, #0
 800f736:	d001      	beq.n	800f73c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800f738:	f7fe fce4 	bl	800e104 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800f73c:	bf00      	nop
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	20002e04 	.word	0x20002e04
 800f744:	40004800 	.word	0x40004800

0800f748 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b090      	sub	sp, #64	; 0x40
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f754:	2200      	movs	r2, #0
 800f756:	601a      	str	r2, [r3, #0]
 800f758:	605a      	str	r2, [r3, #4]
 800f75a:	609a      	str	r2, [r3, #8]
 800f75c:	60da      	str	r2, [r3, #12]
 800f75e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	4aa0      	ldr	r2, [pc, #640]	; (800f9e8 <HAL_UART_MspInit+0x2a0>)
 800f766:	4293      	cmp	r3, r2
 800f768:	d131      	bne.n	800f7ce <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800f76a:	4ba0      	ldr	r3, [pc, #640]	; (800f9ec <HAL_UART_MspInit+0x2a4>)
 800f76c:	69db      	ldr	r3, [r3, #28]
 800f76e:	4a9f      	ldr	r2, [pc, #636]	; (800f9ec <HAL_UART_MspInit+0x2a4>)
 800f770:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f774:	61d3      	str	r3, [r2, #28]
 800f776:	4b9d      	ldr	r3, [pc, #628]	; (800f9ec <HAL_UART_MspInit+0x2a4>)
 800f778:	69db      	ldr	r3, [r3, #28]
 800f77a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f77e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f780:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f782:	4b9a      	ldr	r3, [pc, #616]	; (800f9ec <HAL_UART_MspInit+0x2a4>)
 800f784:	695b      	ldr	r3, [r3, #20]
 800f786:	4a99      	ldr	r2, [pc, #612]	; (800f9ec <HAL_UART_MspInit+0x2a4>)
 800f788:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f78c:	6153      	str	r3, [r2, #20]
 800f78e:	4b97      	ldr	r3, [pc, #604]	; (800f9ec <HAL_UART_MspInit+0x2a4>)
 800f790:	695b      	ldr	r3, [r3, #20]
 800f792:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f796:	627b      	str	r3, [r7, #36]	; 0x24
 800f798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800f79a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f79e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7a0:	2302      	movs	r3, #2
 800f7a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f7a8:	2303      	movs	r3, #3
 800f7aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800f7ac:	2305      	movs	r3, #5
 800f7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f7b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f7b4:	4619      	mov	r1, r3
 800f7b6:	488e      	ldr	r0, [pc, #568]	; (800f9f0 <HAL_UART_MspInit+0x2a8>)
 800f7b8:	f7f2 f94c 	bl	8001a54 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800f7bc:	2200      	movs	r2, #0
 800f7be:	2105      	movs	r1, #5
 800f7c0:	2034      	movs	r0, #52	; 0x34
 800f7c2:	f7f1 fd0d 	bl	80011e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800f7c6:	2034      	movs	r0, #52	; 0x34
 800f7c8:	f7f1 fd26 	bl	8001218 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800f7cc:	e1c8      	b.n	800fb60 <HAL_UART_MspInit+0x418>
  else if(uartHandle->Instance==USART1)
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	4a88      	ldr	r2, [pc, #544]	; (800f9f4 <HAL_UART_MspInit+0x2ac>)
 800f7d4:	4293      	cmp	r3, r2
 800f7d6:	f040 8081 	bne.w	800f8dc <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART1_CLK_ENABLE();
 800f7da:	4b84      	ldr	r3, [pc, #528]	; (800f9ec <HAL_UART_MspInit+0x2a4>)
 800f7dc:	699b      	ldr	r3, [r3, #24]
 800f7de:	4a83      	ldr	r2, [pc, #524]	; (800f9ec <HAL_UART_MspInit+0x2a4>)
 800f7e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f7e4:	6193      	str	r3, [r2, #24]
 800f7e6:	4b81      	ldr	r3, [pc, #516]	; (800f9ec <HAL_UART_MspInit+0x2a4>)
 800f7e8:	699b      	ldr	r3, [r3, #24]
 800f7ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f7ee:	623b      	str	r3, [r7, #32]
 800f7f0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f7f2:	4b7e      	ldr	r3, [pc, #504]	; (800f9ec <HAL_UART_MspInit+0x2a4>)
 800f7f4:	695b      	ldr	r3, [r3, #20]
 800f7f6:	4a7d      	ldr	r2, [pc, #500]	; (800f9ec <HAL_UART_MspInit+0x2a4>)
 800f7f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f7fc:	6153      	str	r3, [r2, #20]
 800f7fe:	4b7b      	ldr	r3, [pc, #492]	; (800f9ec <HAL_UART_MspInit+0x2a4>)
 800f800:	695b      	ldr	r3, [r3, #20]
 800f802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f806:	61fb      	str	r3, [r7, #28]
 800f808:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800f80a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800f80e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f810:	2302      	movs	r3, #2
 800f812:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f814:	2301      	movs	r3, #1
 800f816:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f818:	2303      	movs	r3, #3
 800f81a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f81c:	2307      	movs	r3, #7
 800f81e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f824:	4619      	mov	r1, r3
 800f826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f82a:	f7f2 f913 	bl	8001a54 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800f82e:	4b72      	ldr	r3, [pc, #456]	; (800f9f8 <HAL_UART_MspInit+0x2b0>)
 800f830:	4a72      	ldr	r2, [pc, #456]	; (800f9fc <HAL_UART_MspInit+0x2b4>)
 800f832:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f834:	4b70      	ldr	r3, [pc, #448]	; (800f9f8 <HAL_UART_MspInit+0x2b0>)
 800f836:	2200      	movs	r2, #0
 800f838:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f83a:	4b6f      	ldr	r3, [pc, #444]	; (800f9f8 <HAL_UART_MspInit+0x2b0>)
 800f83c:	2200      	movs	r2, #0
 800f83e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800f840:	4b6d      	ldr	r3, [pc, #436]	; (800f9f8 <HAL_UART_MspInit+0x2b0>)
 800f842:	2280      	movs	r2, #128	; 0x80
 800f844:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f846:	4b6c      	ldr	r3, [pc, #432]	; (800f9f8 <HAL_UART_MspInit+0x2b0>)
 800f848:	2200      	movs	r2, #0
 800f84a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f84c:	4b6a      	ldr	r3, [pc, #424]	; (800f9f8 <HAL_UART_MspInit+0x2b0>)
 800f84e:	2200      	movs	r2, #0
 800f850:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800f852:	4b69      	ldr	r3, [pc, #420]	; (800f9f8 <HAL_UART_MspInit+0x2b0>)
 800f854:	2200      	movs	r2, #0
 800f856:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800f858:	4b67      	ldr	r3, [pc, #412]	; (800f9f8 <HAL_UART_MspInit+0x2b0>)
 800f85a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f85e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800f860:	4865      	ldr	r0, [pc, #404]	; (800f9f8 <HAL_UART_MspInit+0x2b0>)
 800f862:	f7f1 fce7 	bl	8001234 <HAL_DMA_Init>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d001      	beq.n	800f870 <HAL_UART_MspInit+0x128>
      Error_Handler();
 800f86c:	f7fe fc4a 	bl	800e104 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	4a61      	ldr	r2, [pc, #388]	; (800f9f8 <HAL_UART_MspInit+0x2b0>)
 800f874:	671a      	str	r2, [r3, #112]	; 0x70
 800f876:	4a60      	ldr	r2, [pc, #384]	; (800f9f8 <HAL_UART_MspInit+0x2b0>)
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800f87c:	4b60      	ldr	r3, [pc, #384]	; (800fa00 <HAL_UART_MspInit+0x2b8>)
 800f87e:	4a61      	ldr	r2, [pc, #388]	; (800fa04 <HAL_UART_MspInit+0x2bc>)
 800f880:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f882:	4b5f      	ldr	r3, [pc, #380]	; (800fa00 <HAL_UART_MspInit+0x2b8>)
 800f884:	2210      	movs	r2, #16
 800f886:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f888:	4b5d      	ldr	r3, [pc, #372]	; (800fa00 <HAL_UART_MspInit+0x2b8>)
 800f88a:	2200      	movs	r2, #0
 800f88c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800f88e:	4b5c      	ldr	r3, [pc, #368]	; (800fa00 <HAL_UART_MspInit+0x2b8>)
 800f890:	2280      	movs	r2, #128	; 0x80
 800f892:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f894:	4b5a      	ldr	r3, [pc, #360]	; (800fa00 <HAL_UART_MspInit+0x2b8>)
 800f896:	2200      	movs	r2, #0
 800f898:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f89a:	4b59      	ldr	r3, [pc, #356]	; (800fa00 <HAL_UART_MspInit+0x2b8>)
 800f89c:	2200      	movs	r2, #0
 800f89e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800f8a0:	4b57      	ldr	r3, [pc, #348]	; (800fa00 <HAL_UART_MspInit+0x2b8>)
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800f8a6:	4b56      	ldr	r3, [pc, #344]	; (800fa00 <HAL_UART_MspInit+0x2b8>)
 800f8a8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f8ac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800f8ae:	4854      	ldr	r0, [pc, #336]	; (800fa00 <HAL_UART_MspInit+0x2b8>)
 800f8b0:	f7f1 fcc0 	bl	8001234 <HAL_DMA_Init>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d001      	beq.n	800f8be <HAL_UART_MspInit+0x176>
      Error_Handler();
 800f8ba:	f7fe fc23 	bl	800e104 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	4a4f      	ldr	r2, [pc, #316]	; (800fa00 <HAL_UART_MspInit+0x2b8>)
 800f8c2:	66da      	str	r2, [r3, #108]	; 0x6c
 800f8c4:	4a4e      	ldr	r2, [pc, #312]	; (800fa00 <HAL_UART_MspInit+0x2b8>)
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	2105      	movs	r1, #5
 800f8ce:	2025      	movs	r0, #37	; 0x25
 800f8d0:	f7f1 fc86 	bl	80011e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800f8d4:	2025      	movs	r0, #37	; 0x25
 800f8d6:	f7f1 fc9f 	bl	8001218 <HAL_NVIC_EnableIRQ>
}
 800f8da:	e141      	b.n	800fb60 <HAL_UART_MspInit+0x418>
  else if(uartHandle->Instance==USART2)
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4a49      	ldr	r2, [pc, #292]	; (800fa08 <HAL_UART_MspInit+0x2c0>)
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	f040 809a 	bne.w	800fa1c <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800f8e8:	4b40      	ldr	r3, [pc, #256]	; (800f9ec <HAL_UART_MspInit+0x2a4>)
 800f8ea:	69db      	ldr	r3, [r3, #28]
 800f8ec:	4a3f      	ldr	r2, [pc, #252]	; (800f9ec <HAL_UART_MspInit+0x2a4>)
 800f8ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f8f2:	61d3      	str	r3, [r2, #28]
 800f8f4:	4b3d      	ldr	r3, [pc, #244]	; (800f9ec <HAL_UART_MspInit+0x2a4>)
 800f8f6:	69db      	ldr	r3, [r3, #28]
 800f8f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f8fc:	61bb      	str	r3, [r7, #24]
 800f8fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f900:	4b3a      	ldr	r3, [pc, #232]	; (800f9ec <HAL_UART_MspInit+0x2a4>)
 800f902:	695b      	ldr	r3, [r3, #20]
 800f904:	4a39      	ldr	r2, [pc, #228]	; (800f9ec <HAL_UART_MspInit+0x2a4>)
 800f906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f90a:	6153      	str	r3, [r2, #20]
 800f90c:	4b37      	ldr	r3, [pc, #220]	; (800f9ec <HAL_UART_MspInit+0x2a4>)
 800f90e:	695b      	ldr	r3, [r3, #20]
 800f910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f914:	617b      	str	r3, [r7, #20]
 800f916:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800f918:	230c      	movs	r3, #12
 800f91a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f91c:	2302      	movs	r3, #2
 800f91e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f920:	2301      	movs	r3, #1
 800f922:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f924:	2303      	movs	r3, #3
 800f926:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800f928:	2307      	movs	r3, #7
 800f92a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f92c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f930:	4619      	mov	r1, r3
 800f932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f936:	f7f2 f88d 	bl	8001a54 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800f93a:	4b34      	ldr	r3, [pc, #208]	; (800fa0c <HAL_UART_MspInit+0x2c4>)
 800f93c:	4a34      	ldr	r2, [pc, #208]	; (800fa10 <HAL_UART_MspInit+0x2c8>)
 800f93e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f940:	4b32      	ldr	r3, [pc, #200]	; (800fa0c <HAL_UART_MspInit+0x2c4>)
 800f942:	2210      	movs	r2, #16
 800f944:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f946:	4b31      	ldr	r3, [pc, #196]	; (800fa0c <HAL_UART_MspInit+0x2c4>)
 800f948:	2200      	movs	r2, #0
 800f94a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800f94c:	4b2f      	ldr	r3, [pc, #188]	; (800fa0c <HAL_UART_MspInit+0x2c4>)
 800f94e:	2280      	movs	r2, #128	; 0x80
 800f950:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f952:	4b2e      	ldr	r3, [pc, #184]	; (800fa0c <HAL_UART_MspInit+0x2c4>)
 800f954:	2200      	movs	r2, #0
 800f956:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f958:	4b2c      	ldr	r3, [pc, #176]	; (800fa0c <HAL_UART_MspInit+0x2c4>)
 800f95a:	2200      	movs	r2, #0
 800f95c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800f95e:	4b2b      	ldr	r3, [pc, #172]	; (800fa0c <HAL_UART_MspInit+0x2c4>)
 800f960:	2200      	movs	r2, #0
 800f962:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800f964:	4b29      	ldr	r3, [pc, #164]	; (800fa0c <HAL_UART_MspInit+0x2c4>)
 800f966:	2200      	movs	r2, #0
 800f968:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800f96a:	4828      	ldr	r0, [pc, #160]	; (800fa0c <HAL_UART_MspInit+0x2c4>)
 800f96c:	f7f1 fc62 	bl	8001234 <HAL_DMA_Init>
 800f970:	4603      	mov	r3, r0
 800f972:	2b00      	cmp	r3, #0
 800f974:	d001      	beq.n	800f97a <HAL_UART_MspInit+0x232>
      Error_Handler();
 800f976:	f7fe fbc5 	bl	800e104 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	4a23      	ldr	r2, [pc, #140]	; (800fa0c <HAL_UART_MspInit+0x2c4>)
 800f97e:	66da      	str	r2, [r3, #108]	; 0x6c
 800f980:	4a22      	ldr	r2, [pc, #136]	; (800fa0c <HAL_UART_MspInit+0x2c4>)
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800f986:	4b23      	ldr	r3, [pc, #140]	; (800fa14 <HAL_UART_MspInit+0x2cc>)
 800f988:	4a23      	ldr	r2, [pc, #140]	; (800fa18 <HAL_UART_MspInit+0x2d0>)
 800f98a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f98c:	4b21      	ldr	r3, [pc, #132]	; (800fa14 <HAL_UART_MspInit+0x2cc>)
 800f98e:	2200      	movs	r2, #0
 800f990:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f992:	4b20      	ldr	r3, [pc, #128]	; (800fa14 <HAL_UART_MspInit+0x2cc>)
 800f994:	2200      	movs	r2, #0
 800f996:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800f998:	4b1e      	ldr	r3, [pc, #120]	; (800fa14 <HAL_UART_MspInit+0x2cc>)
 800f99a:	2280      	movs	r2, #128	; 0x80
 800f99c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f99e:	4b1d      	ldr	r3, [pc, #116]	; (800fa14 <HAL_UART_MspInit+0x2cc>)
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f9a4:	4b1b      	ldr	r3, [pc, #108]	; (800fa14 <HAL_UART_MspInit+0x2cc>)
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800f9aa:	4b1a      	ldr	r3, [pc, #104]	; (800fa14 <HAL_UART_MspInit+0x2cc>)
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800f9b0:	4b18      	ldr	r3, [pc, #96]	; (800fa14 <HAL_UART_MspInit+0x2cc>)
 800f9b2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f9b6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800f9b8:	4816      	ldr	r0, [pc, #88]	; (800fa14 <HAL_UART_MspInit+0x2cc>)
 800f9ba:	f7f1 fc3b 	bl	8001234 <HAL_DMA_Init>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d001      	beq.n	800f9c8 <HAL_UART_MspInit+0x280>
      Error_Handler();
 800f9c4:	f7fe fb9e 	bl	800e104 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	4a12      	ldr	r2, [pc, #72]	; (800fa14 <HAL_UART_MspInit+0x2cc>)
 800f9cc:	671a      	str	r2, [r3, #112]	; 0x70
 800f9ce:	4a11      	ldr	r2, [pc, #68]	; (800fa14 <HAL_UART_MspInit+0x2cc>)
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	2105      	movs	r1, #5
 800f9d8:	2026      	movs	r0, #38	; 0x26
 800f9da:	f7f1 fc01 	bl	80011e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800f9de:	2026      	movs	r0, #38	; 0x26
 800f9e0:	f7f1 fc1a 	bl	8001218 <HAL_NVIC_EnableIRQ>
}
 800f9e4:	e0bc      	b.n	800fb60 <HAL_UART_MspInit+0x418>
 800f9e6:	bf00      	nop
 800f9e8:	40004c00 	.word	0x40004c00
 800f9ec:	40021000 	.word	0x40021000
 800f9f0:	48000800 	.word	0x48000800
 800f9f4:	40013800 	.word	0x40013800
 800f9f8:	20002e88 	.word	0x20002e88
 800f9fc:	40020058 	.word	0x40020058
 800fa00:	20002ecc 	.word	0x20002ecc
 800fa04:	40020044 	.word	0x40020044
 800fa08:	40004400 	.word	0x40004400
 800fa0c:	20002f10 	.word	0x20002f10
 800fa10:	40020080 	.word	0x40020080
 800fa14:	20002f54 	.word	0x20002f54
 800fa18:	4002006c 	.word	0x4002006c
  else if(uartHandle->Instance==USART3)
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4a51      	ldr	r2, [pc, #324]	; (800fb68 <HAL_UART_MspInit+0x420>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	f040 809c 	bne.w	800fb60 <HAL_UART_MspInit+0x418>
    __HAL_RCC_USART3_CLK_ENABLE();
 800fa28:	4b50      	ldr	r3, [pc, #320]	; (800fb6c <HAL_UART_MspInit+0x424>)
 800fa2a:	69db      	ldr	r3, [r3, #28]
 800fa2c:	4a4f      	ldr	r2, [pc, #316]	; (800fb6c <HAL_UART_MspInit+0x424>)
 800fa2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fa32:	61d3      	str	r3, [r2, #28]
 800fa34:	4b4d      	ldr	r3, [pc, #308]	; (800fb6c <HAL_UART_MspInit+0x424>)
 800fa36:	69db      	ldr	r3, [r3, #28]
 800fa38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fa3c:	613b      	str	r3, [r7, #16]
 800fa3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fa40:	4b4a      	ldr	r3, [pc, #296]	; (800fb6c <HAL_UART_MspInit+0x424>)
 800fa42:	695b      	ldr	r3, [r3, #20]
 800fa44:	4a49      	ldr	r2, [pc, #292]	; (800fb6c <HAL_UART_MspInit+0x424>)
 800fa46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fa4a:	6153      	str	r3, [r2, #20]
 800fa4c:	4b47      	ldr	r3, [pc, #284]	; (800fb6c <HAL_UART_MspInit+0x424>)
 800fa4e:	695b      	ldr	r3, [r3, #20]
 800fa50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fa54:	60fb      	str	r3, [r7, #12]
 800fa56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800fa58:	4b44      	ldr	r3, [pc, #272]	; (800fb6c <HAL_UART_MspInit+0x424>)
 800fa5a:	695b      	ldr	r3, [r3, #20]
 800fa5c:	4a43      	ldr	r2, [pc, #268]	; (800fb6c <HAL_UART_MspInit+0x424>)
 800fa5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fa62:	6153      	str	r3, [r2, #20]
 800fa64:	4b41      	ldr	r3, [pc, #260]	; (800fb6c <HAL_UART_MspInit+0x424>)
 800fa66:	695b      	ldr	r3, [r3, #20]
 800fa68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fa6c:	60bb      	str	r3, [r7, #8]
 800fa6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800fa70:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800fa74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa76:	2302      	movs	r3, #2
 800fa78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800fa7e:	2303      	movs	r3, #3
 800fa80:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800fa82:	2307      	movs	r3, #7
 800fa84:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fa86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fa8a:	4619      	mov	r1, r3
 800fa8c:	4838      	ldr	r0, [pc, #224]	; (800fb70 <HAL_UART_MspInit+0x428>)
 800fa8e:	f7f1 ffe1 	bl	8001a54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800fa92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fa96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa98:	2302      	movs	r3, #2
 800fa9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800faa0:	2303      	movs	r3, #3
 800faa2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800faa4:	2307      	movs	r3, #7
 800faa6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800faa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800faac:	4619      	mov	r1, r3
 800faae:	4831      	ldr	r0, [pc, #196]	; (800fb74 <HAL_UART_MspInit+0x42c>)
 800fab0:	f7f1 ffd0 	bl	8001a54 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800fab4:	4b30      	ldr	r3, [pc, #192]	; (800fb78 <HAL_UART_MspInit+0x430>)
 800fab6:	4a31      	ldr	r2, [pc, #196]	; (800fb7c <HAL_UART_MspInit+0x434>)
 800fab8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800faba:	4b2f      	ldr	r3, [pc, #188]	; (800fb78 <HAL_UART_MspInit+0x430>)
 800fabc:	2200      	movs	r2, #0
 800fabe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800fac0:	4b2d      	ldr	r3, [pc, #180]	; (800fb78 <HAL_UART_MspInit+0x430>)
 800fac2:	2200      	movs	r2, #0
 800fac4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800fac6:	4b2c      	ldr	r3, [pc, #176]	; (800fb78 <HAL_UART_MspInit+0x430>)
 800fac8:	2280      	movs	r2, #128	; 0x80
 800faca:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800facc:	4b2a      	ldr	r3, [pc, #168]	; (800fb78 <HAL_UART_MspInit+0x430>)
 800face:	2200      	movs	r2, #0
 800fad0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800fad2:	4b29      	ldr	r3, [pc, #164]	; (800fb78 <HAL_UART_MspInit+0x430>)
 800fad4:	2200      	movs	r2, #0
 800fad6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800fad8:	4b27      	ldr	r3, [pc, #156]	; (800fb78 <HAL_UART_MspInit+0x430>)
 800fada:	2200      	movs	r2, #0
 800fadc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800fade:	4b26      	ldr	r3, [pc, #152]	; (800fb78 <HAL_UART_MspInit+0x430>)
 800fae0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fae4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800fae6:	4824      	ldr	r0, [pc, #144]	; (800fb78 <HAL_UART_MspInit+0x430>)
 800fae8:	f7f1 fba4 	bl	8001234 <HAL_DMA_Init>
 800faec:	4603      	mov	r3, r0
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d001      	beq.n	800faf6 <HAL_UART_MspInit+0x3ae>
      Error_Handler();
 800faf2:	f7fe fb07 	bl	800e104 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	4a1f      	ldr	r2, [pc, #124]	; (800fb78 <HAL_UART_MspInit+0x430>)
 800fafa:	671a      	str	r2, [r3, #112]	; 0x70
 800fafc:	4a1e      	ldr	r2, [pc, #120]	; (800fb78 <HAL_UART_MspInit+0x430>)
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800fb02:	4b1f      	ldr	r3, [pc, #124]	; (800fb80 <HAL_UART_MspInit+0x438>)
 800fb04:	4a1f      	ldr	r2, [pc, #124]	; (800fb84 <HAL_UART_MspInit+0x43c>)
 800fb06:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800fb08:	4b1d      	ldr	r3, [pc, #116]	; (800fb80 <HAL_UART_MspInit+0x438>)
 800fb0a:	2210      	movs	r2, #16
 800fb0c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800fb0e:	4b1c      	ldr	r3, [pc, #112]	; (800fb80 <HAL_UART_MspInit+0x438>)
 800fb10:	2200      	movs	r2, #0
 800fb12:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800fb14:	4b1a      	ldr	r3, [pc, #104]	; (800fb80 <HAL_UART_MspInit+0x438>)
 800fb16:	2280      	movs	r2, #128	; 0x80
 800fb18:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800fb1a:	4b19      	ldr	r3, [pc, #100]	; (800fb80 <HAL_UART_MspInit+0x438>)
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800fb20:	4b17      	ldr	r3, [pc, #92]	; (800fb80 <HAL_UART_MspInit+0x438>)
 800fb22:	2200      	movs	r2, #0
 800fb24:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800fb26:	4b16      	ldr	r3, [pc, #88]	; (800fb80 <HAL_UART_MspInit+0x438>)
 800fb28:	2200      	movs	r2, #0
 800fb2a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800fb2c:	4b14      	ldr	r3, [pc, #80]	; (800fb80 <HAL_UART_MspInit+0x438>)
 800fb2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fb32:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800fb34:	4812      	ldr	r0, [pc, #72]	; (800fb80 <HAL_UART_MspInit+0x438>)
 800fb36:	f7f1 fb7d 	bl	8001234 <HAL_DMA_Init>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d001      	beq.n	800fb44 <HAL_UART_MspInit+0x3fc>
      Error_Handler();
 800fb40:	f7fe fae0 	bl	800e104 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	4a0e      	ldr	r2, [pc, #56]	; (800fb80 <HAL_UART_MspInit+0x438>)
 800fb48:	66da      	str	r2, [r3, #108]	; 0x6c
 800fb4a:	4a0d      	ldr	r2, [pc, #52]	; (800fb80 <HAL_UART_MspInit+0x438>)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800fb50:	2200      	movs	r2, #0
 800fb52:	2105      	movs	r1, #5
 800fb54:	2027      	movs	r0, #39	; 0x27
 800fb56:	f7f1 fb43 	bl	80011e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800fb5a:	2027      	movs	r0, #39	; 0x27
 800fb5c:	f7f1 fb5c 	bl	8001218 <HAL_NVIC_EnableIRQ>
}
 800fb60:	bf00      	nop
 800fb62:	3740      	adds	r7, #64	; 0x40
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}
 800fb68:	40004800 	.word	0x40004800
 800fb6c:	40021000 	.word	0x40021000
 800fb70:	48000400 	.word	0x48000400
 800fb74:	48000c00 	.word	0x48000c00
 800fb78:	20002f98 	.word	0x20002f98
 800fb7c:	40020030 	.word	0x40020030
 800fb80:	20002fdc 	.word	0x20002fdc
 800fb84:	4002001c 	.word	0x4002001c

0800fb88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800fb88:	f8df d034 	ldr.w	sp, [pc, #52]	; 800fbc0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800fb8c:	480d      	ldr	r0, [pc, #52]	; (800fbc4 <LoopForever+0x6>)
  ldr r1, =_edata
 800fb8e:	490e      	ldr	r1, [pc, #56]	; (800fbc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 800fb90:	4a0e      	ldr	r2, [pc, #56]	; (800fbcc <LoopForever+0xe>)
  movs r3, #0
 800fb92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800fb94:	e002      	b.n	800fb9c <LoopCopyDataInit>

0800fb96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800fb96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800fb98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800fb9a:	3304      	adds	r3, #4

0800fb9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800fb9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800fb9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800fba0:	d3f9      	bcc.n	800fb96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800fba2:	4a0b      	ldr	r2, [pc, #44]	; (800fbd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 800fba4:	4c0b      	ldr	r4, [pc, #44]	; (800fbd4 <LoopForever+0x16>)
  movs r3, #0
 800fba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800fba8:	e001      	b.n	800fbae <LoopFillZerobss>

0800fbaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800fbaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800fbac:	3204      	adds	r2, #4

0800fbae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800fbae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800fbb0:	d3fb      	bcc.n	800fbaa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800fbb2:	f7ff fa41 	bl	800f038 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800fbb6:	f000 f817 	bl	800fbe8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800fbba:	f7fe fa09 	bl	800dfd0 <main>

0800fbbe <LoopForever>:

LoopForever:
    b LoopForever
 800fbbe:	e7fe      	b.n	800fbbe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800fbc0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800fbc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800fbc8:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 800fbcc:	08010768 	.word	0x08010768
  ldr r2, =_sbss
 800fbd0:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 800fbd4:	20003028 	.word	0x20003028

0800fbd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800fbd8:	e7fe      	b.n	800fbd8 <ADC1_2_IRQHandler>
	...

0800fbdc <__errno>:
 800fbdc:	4b01      	ldr	r3, [pc, #4]	; (800fbe4 <__errno+0x8>)
 800fbde:	6818      	ldr	r0, [r3, #0]
 800fbe0:	4770      	bx	lr
 800fbe2:	bf00      	nop
 800fbe4:	20000128 	.word	0x20000128

0800fbe8 <__libc_init_array>:
 800fbe8:	b570      	push	{r4, r5, r6, lr}
 800fbea:	4d0d      	ldr	r5, [pc, #52]	; (800fc20 <__libc_init_array+0x38>)
 800fbec:	4c0d      	ldr	r4, [pc, #52]	; (800fc24 <__libc_init_array+0x3c>)
 800fbee:	1b64      	subs	r4, r4, r5
 800fbf0:	10a4      	asrs	r4, r4, #2
 800fbf2:	2600      	movs	r6, #0
 800fbf4:	42a6      	cmp	r6, r4
 800fbf6:	d109      	bne.n	800fc0c <__libc_init_array+0x24>
 800fbf8:	4d0b      	ldr	r5, [pc, #44]	; (800fc28 <__libc_init_array+0x40>)
 800fbfa:	4c0c      	ldr	r4, [pc, #48]	; (800fc2c <__libc_init_array+0x44>)
 800fbfc:	f000 fc82 	bl	8010504 <_init>
 800fc00:	1b64      	subs	r4, r4, r5
 800fc02:	10a4      	asrs	r4, r4, #2
 800fc04:	2600      	movs	r6, #0
 800fc06:	42a6      	cmp	r6, r4
 800fc08:	d105      	bne.n	800fc16 <__libc_init_array+0x2e>
 800fc0a:	bd70      	pop	{r4, r5, r6, pc}
 800fc0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc10:	4798      	blx	r3
 800fc12:	3601      	adds	r6, #1
 800fc14:	e7ee      	b.n	800fbf4 <__libc_init_array+0xc>
 800fc16:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc1a:	4798      	blx	r3
 800fc1c:	3601      	adds	r6, #1
 800fc1e:	e7f2      	b.n	800fc06 <__libc_init_array+0x1e>
 800fc20:	08010760 	.word	0x08010760
 800fc24:	08010760 	.word	0x08010760
 800fc28:	08010760 	.word	0x08010760
 800fc2c:	08010764 	.word	0x08010764

0800fc30 <__retarget_lock_acquire_recursive>:
 800fc30:	4770      	bx	lr

0800fc32 <__retarget_lock_release_recursive>:
 800fc32:	4770      	bx	lr

0800fc34 <memcpy>:
 800fc34:	440a      	add	r2, r1
 800fc36:	4291      	cmp	r1, r2
 800fc38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fc3c:	d100      	bne.n	800fc40 <memcpy+0xc>
 800fc3e:	4770      	bx	lr
 800fc40:	b510      	push	{r4, lr}
 800fc42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc4a:	4291      	cmp	r1, r2
 800fc4c:	d1f9      	bne.n	800fc42 <memcpy+0xe>
 800fc4e:	bd10      	pop	{r4, pc}

0800fc50 <memset>:
 800fc50:	4402      	add	r2, r0
 800fc52:	4603      	mov	r3, r0
 800fc54:	4293      	cmp	r3, r2
 800fc56:	d100      	bne.n	800fc5a <memset+0xa>
 800fc58:	4770      	bx	lr
 800fc5a:	f803 1b01 	strb.w	r1, [r3], #1
 800fc5e:	e7f9      	b.n	800fc54 <memset+0x4>

0800fc60 <swapfunc>:
 800fc60:	2b02      	cmp	r3, #2
 800fc62:	b510      	push	{r4, lr}
 800fc64:	d00a      	beq.n	800fc7c <swapfunc+0x1c>
 800fc66:	0892      	lsrs	r2, r2, #2
 800fc68:	3a01      	subs	r2, #1
 800fc6a:	6803      	ldr	r3, [r0, #0]
 800fc6c:	680c      	ldr	r4, [r1, #0]
 800fc6e:	f840 4b04 	str.w	r4, [r0], #4
 800fc72:	2a00      	cmp	r2, #0
 800fc74:	f841 3b04 	str.w	r3, [r1], #4
 800fc78:	dcf6      	bgt.n	800fc68 <swapfunc+0x8>
 800fc7a:	bd10      	pop	{r4, pc}
 800fc7c:	4402      	add	r2, r0
 800fc7e:	780c      	ldrb	r4, [r1, #0]
 800fc80:	7803      	ldrb	r3, [r0, #0]
 800fc82:	f800 4b01 	strb.w	r4, [r0], #1
 800fc86:	f801 3b01 	strb.w	r3, [r1], #1
 800fc8a:	1a13      	subs	r3, r2, r0
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	dcf6      	bgt.n	800fc7e <swapfunc+0x1e>
 800fc90:	e7f3      	b.n	800fc7a <swapfunc+0x1a>

0800fc92 <med3.constprop.0>:
 800fc92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc94:	460c      	mov	r4, r1
 800fc96:	4615      	mov	r5, r2
 800fc98:	4607      	mov	r7, r0
 800fc9a:	461e      	mov	r6, r3
 800fc9c:	4798      	blx	r3
 800fc9e:	2800      	cmp	r0, #0
 800fca0:	4629      	mov	r1, r5
 800fca2:	4620      	mov	r0, r4
 800fca4:	da0a      	bge.n	800fcbc <med3.constprop.0+0x2a>
 800fca6:	47b0      	blx	r6
 800fca8:	2800      	cmp	r0, #0
 800fcaa:	db05      	blt.n	800fcb8 <med3.constprop.0+0x26>
 800fcac:	4629      	mov	r1, r5
 800fcae:	4638      	mov	r0, r7
 800fcb0:	47b0      	blx	r6
 800fcb2:	2800      	cmp	r0, #0
 800fcb4:	db0a      	blt.n	800fccc <med3.constprop.0+0x3a>
 800fcb6:	463c      	mov	r4, r7
 800fcb8:	4620      	mov	r0, r4
 800fcba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcbc:	47b0      	blx	r6
 800fcbe:	2800      	cmp	r0, #0
 800fcc0:	dcfa      	bgt.n	800fcb8 <med3.constprop.0+0x26>
 800fcc2:	4629      	mov	r1, r5
 800fcc4:	4638      	mov	r0, r7
 800fcc6:	47b0      	blx	r6
 800fcc8:	2800      	cmp	r0, #0
 800fcca:	dbf4      	blt.n	800fcb6 <med3.constprop.0+0x24>
 800fccc:	462c      	mov	r4, r5
 800fcce:	e7f3      	b.n	800fcb8 <med3.constprop.0+0x26>

0800fcd0 <qsort>:
 800fcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcd4:	469a      	mov	sl, r3
 800fcd6:	ea40 0302 	orr.w	r3, r0, r2
 800fcda:	079b      	lsls	r3, r3, #30
 800fcdc:	b097      	sub	sp, #92	; 0x5c
 800fcde:	4606      	mov	r6, r0
 800fce0:	4614      	mov	r4, r2
 800fce2:	d11a      	bne.n	800fd1a <qsort+0x4a>
 800fce4:	f1b2 0804 	subs.w	r8, r2, #4
 800fce8:	bf18      	it	ne
 800fcea:	f04f 0801 	movne.w	r8, #1
 800fcee:	2300      	movs	r3, #0
 800fcf0:	9302      	str	r3, [sp, #8]
 800fcf2:	1933      	adds	r3, r6, r4
 800fcf4:	fb04 f701 	mul.w	r7, r4, r1
 800fcf8:	9301      	str	r3, [sp, #4]
 800fcfa:	2906      	cmp	r1, #6
 800fcfc:	eb06 0307 	add.w	r3, r6, r7
 800fd00:	9303      	str	r3, [sp, #12]
 800fd02:	d82a      	bhi.n	800fd5a <qsort+0x8a>
 800fd04:	9b01      	ldr	r3, [sp, #4]
 800fd06:	9a03      	ldr	r2, [sp, #12]
 800fd08:	4293      	cmp	r3, r2
 800fd0a:	d310      	bcc.n	800fd2e <qsort+0x5e>
 800fd0c:	9b02      	ldr	r3, [sp, #8]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	f040 811e 	bne.w	800ff50 <qsort+0x280>
 800fd14:	b017      	add	sp, #92	; 0x5c
 800fd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd1a:	f04f 0802 	mov.w	r8, #2
 800fd1e:	e7e6      	b.n	800fcee <qsort+0x1e>
 800fd20:	4643      	mov	r3, r8
 800fd22:	4622      	mov	r2, r4
 800fd24:	4639      	mov	r1, r7
 800fd26:	4628      	mov	r0, r5
 800fd28:	f7ff ff9a 	bl	800fc60 <swapfunc>
 800fd2c:	e00e      	b.n	800fd4c <qsort+0x7c>
 800fd2e:	9d01      	ldr	r5, [sp, #4]
 800fd30:	e00d      	b.n	800fd4e <qsort+0x7e>
 800fd32:	1b2f      	subs	r7, r5, r4
 800fd34:	4629      	mov	r1, r5
 800fd36:	4638      	mov	r0, r7
 800fd38:	47d0      	blx	sl
 800fd3a:	2800      	cmp	r0, #0
 800fd3c:	dd09      	ble.n	800fd52 <qsort+0x82>
 800fd3e:	f1b8 0f00 	cmp.w	r8, #0
 800fd42:	d1ed      	bne.n	800fd20 <qsort+0x50>
 800fd44:	682b      	ldr	r3, [r5, #0]
 800fd46:	683a      	ldr	r2, [r7, #0]
 800fd48:	602a      	str	r2, [r5, #0]
 800fd4a:	603b      	str	r3, [r7, #0]
 800fd4c:	463d      	mov	r5, r7
 800fd4e:	42ae      	cmp	r6, r5
 800fd50:	d3ef      	bcc.n	800fd32 <qsort+0x62>
 800fd52:	9b01      	ldr	r3, [sp, #4]
 800fd54:	4423      	add	r3, r4
 800fd56:	9301      	str	r3, [sp, #4]
 800fd58:	e7d4      	b.n	800fd04 <qsort+0x34>
 800fd5a:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800fd5e:	1b3f      	subs	r7, r7, r4
 800fd60:	2907      	cmp	r1, #7
 800fd62:	fb04 6909 	mla	r9, r4, r9, r6
 800fd66:	4437      	add	r7, r6
 800fd68:	d022      	beq.n	800fdb0 <qsort+0xe0>
 800fd6a:	2928      	cmp	r1, #40	; 0x28
 800fd6c:	d945      	bls.n	800fdfa <qsort+0x12a>
 800fd6e:	08c9      	lsrs	r1, r1, #3
 800fd70:	fb04 f501 	mul.w	r5, r4, r1
 800fd74:	4653      	mov	r3, sl
 800fd76:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 800fd7a:	1971      	adds	r1, r6, r5
 800fd7c:	4630      	mov	r0, r6
 800fd7e:	f7ff ff88 	bl	800fc92 <med3.constprop.0>
 800fd82:	4649      	mov	r1, r9
 800fd84:	eb09 0205 	add.w	r2, r9, r5
 800fd88:	4653      	mov	r3, sl
 800fd8a:	4683      	mov	fp, r0
 800fd8c:	1b48      	subs	r0, r1, r5
 800fd8e:	f7ff ff80 	bl	800fc92 <med3.constprop.0>
 800fd92:	463a      	mov	r2, r7
 800fd94:	4681      	mov	r9, r0
 800fd96:	4653      	mov	r3, sl
 800fd98:	1b79      	subs	r1, r7, r5
 800fd9a:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800fd9e:	f7ff ff78 	bl	800fc92 <med3.constprop.0>
 800fda2:	4602      	mov	r2, r0
 800fda4:	4649      	mov	r1, r9
 800fda6:	4653      	mov	r3, sl
 800fda8:	4658      	mov	r0, fp
 800fdaa:	f7ff ff72 	bl	800fc92 <med3.constprop.0>
 800fdae:	4681      	mov	r9, r0
 800fdb0:	f1b8 0f00 	cmp.w	r8, #0
 800fdb4:	d124      	bne.n	800fe00 <qsort+0x130>
 800fdb6:	6833      	ldr	r3, [r6, #0]
 800fdb8:	f8d9 2000 	ldr.w	r2, [r9]
 800fdbc:	6032      	str	r2, [r6, #0]
 800fdbe:	f8c9 3000 	str.w	r3, [r9]
 800fdc2:	eb06 0b04 	add.w	fp, r6, r4
 800fdc6:	46b9      	mov	r9, r7
 800fdc8:	465d      	mov	r5, fp
 800fdca:	2300      	movs	r3, #0
 800fdcc:	45bb      	cmp	fp, r7
 800fdce:	d835      	bhi.n	800fe3c <qsort+0x16c>
 800fdd0:	4631      	mov	r1, r6
 800fdd2:	4658      	mov	r0, fp
 800fdd4:	9304      	str	r3, [sp, #16]
 800fdd6:	47d0      	blx	sl
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	9b04      	ldr	r3, [sp, #16]
 800fddc:	dc3e      	bgt.n	800fe5c <qsort+0x18c>
 800fdde:	d10a      	bne.n	800fdf6 <qsort+0x126>
 800fde0:	f1b8 0f00 	cmp.w	r8, #0
 800fde4:	d113      	bne.n	800fe0e <qsort+0x13e>
 800fde6:	682b      	ldr	r3, [r5, #0]
 800fde8:	f8db 2000 	ldr.w	r2, [fp]
 800fdec:	602a      	str	r2, [r5, #0]
 800fdee:	f8cb 3000 	str.w	r3, [fp]
 800fdf2:	4425      	add	r5, r4
 800fdf4:	2301      	movs	r3, #1
 800fdf6:	44a3      	add	fp, r4
 800fdf8:	e7e8      	b.n	800fdcc <qsort+0xfc>
 800fdfa:	463a      	mov	r2, r7
 800fdfc:	46b3      	mov	fp, r6
 800fdfe:	e7d1      	b.n	800fda4 <qsort+0xd4>
 800fe00:	4643      	mov	r3, r8
 800fe02:	4622      	mov	r2, r4
 800fe04:	4649      	mov	r1, r9
 800fe06:	4630      	mov	r0, r6
 800fe08:	f7ff ff2a 	bl	800fc60 <swapfunc>
 800fe0c:	e7d9      	b.n	800fdc2 <qsort+0xf2>
 800fe0e:	4643      	mov	r3, r8
 800fe10:	4622      	mov	r2, r4
 800fe12:	4659      	mov	r1, fp
 800fe14:	4628      	mov	r0, r5
 800fe16:	f7ff ff23 	bl	800fc60 <swapfunc>
 800fe1a:	e7ea      	b.n	800fdf2 <qsort+0x122>
 800fe1c:	d10b      	bne.n	800fe36 <qsort+0x166>
 800fe1e:	f1b8 0f00 	cmp.w	r8, #0
 800fe22:	d114      	bne.n	800fe4e <qsort+0x17e>
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	f8d9 2000 	ldr.w	r2, [r9]
 800fe2a:	603a      	str	r2, [r7, #0]
 800fe2c:	f8c9 3000 	str.w	r3, [r9]
 800fe30:	eba9 0904 	sub.w	r9, r9, r4
 800fe34:	2301      	movs	r3, #1
 800fe36:	9f04      	ldr	r7, [sp, #16]
 800fe38:	45bb      	cmp	fp, r7
 800fe3a:	d90f      	bls.n	800fe5c <qsort+0x18c>
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d143      	bne.n	800fec8 <qsort+0x1f8>
 800fe40:	9b01      	ldr	r3, [sp, #4]
 800fe42:	9a03      	ldr	r2, [sp, #12]
 800fe44:	4293      	cmp	r3, r2
 800fe46:	f4bf af61 	bcs.w	800fd0c <qsort+0x3c>
 800fe4a:	9d01      	ldr	r5, [sp, #4]
 800fe4c:	e036      	b.n	800febc <qsort+0x1ec>
 800fe4e:	4643      	mov	r3, r8
 800fe50:	4622      	mov	r2, r4
 800fe52:	4649      	mov	r1, r9
 800fe54:	4638      	mov	r0, r7
 800fe56:	f7ff ff03 	bl	800fc60 <swapfunc>
 800fe5a:	e7e9      	b.n	800fe30 <qsort+0x160>
 800fe5c:	4631      	mov	r1, r6
 800fe5e:	4638      	mov	r0, r7
 800fe60:	9305      	str	r3, [sp, #20]
 800fe62:	47d0      	blx	sl
 800fe64:	1b3b      	subs	r3, r7, r4
 800fe66:	2800      	cmp	r0, #0
 800fe68:	9304      	str	r3, [sp, #16]
 800fe6a:	9b05      	ldr	r3, [sp, #20]
 800fe6c:	dad6      	bge.n	800fe1c <qsort+0x14c>
 800fe6e:	f1b8 0f00 	cmp.w	r8, #0
 800fe72:	d006      	beq.n	800fe82 <qsort+0x1b2>
 800fe74:	4643      	mov	r3, r8
 800fe76:	4622      	mov	r2, r4
 800fe78:	4639      	mov	r1, r7
 800fe7a:	4658      	mov	r0, fp
 800fe7c:	f7ff fef0 	bl	800fc60 <swapfunc>
 800fe80:	e005      	b.n	800fe8e <qsort+0x1be>
 800fe82:	f8db 3000 	ldr.w	r3, [fp]
 800fe86:	683a      	ldr	r2, [r7, #0]
 800fe88:	f8cb 2000 	str.w	r2, [fp]
 800fe8c:	603b      	str	r3, [r7, #0]
 800fe8e:	9f04      	ldr	r7, [sp, #16]
 800fe90:	e7b0      	b.n	800fdf4 <qsort+0x124>
 800fe92:	4643      	mov	r3, r8
 800fe94:	4622      	mov	r2, r4
 800fe96:	4639      	mov	r1, r7
 800fe98:	4628      	mov	r0, r5
 800fe9a:	f7ff fee1 	bl	800fc60 <swapfunc>
 800fe9e:	e00c      	b.n	800feba <qsort+0x1ea>
 800fea0:	1b2f      	subs	r7, r5, r4
 800fea2:	4629      	mov	r1, r5
 800fea4:	4638      	mov	r0, r7
 800fea6:	47d0      	blx	sl
 800fea8:	2800      	cmp	r0, #0
 800feaa:	dd09      	ble.n	800fec0 <qsort+0x1f0>
 800feac:	f1b8 0f00 	cmp.w	r8, #0
 800feb0:	d1ef      	bne.n	800fe92 <qsort+0x1c2>
 800feb2:	682b      	ldr	r3, [r5, #0]
 800feb4:	683a      	ldr	r2, [r7, #0]
 800feb6:	602a      	str	r2, [r5, #0]
 800feb8:	603b      	str	r3, [r7, #0]
 800feba:	463d      	mov	r5, r7
 800febc:	42ae      	cmp	r6, r5
 800febe:	d3ef      	bcc.n	800fea0 <qsort+0x1d0>
 800fec0:	9b01      	ldr	r3, [sp, #4]
 800fec2:	4423      	add	r3, r4
 800fec4:	9301      	str	r3, [sp, #4]
 800fec6:	e7bb      	b.n	800fe40 <qsort+0x170>
 800fec8:	ebab 0305 	sub.w	r3, fp, r5
 800fecc:	1baa      	subs	r2, r5, r6
 800fece:	429a      	cmp	r2, r3
 800fed0:	bfa8      	it	ge
 800fed2:	461a      	movge	r2, r3
 800fed4:	9301      	str	r3, [sp, #4]
 800fed6:	b12a      	cbz	r2, 800fee4 <qsort+0x214>
 800fed8:	4643      	mov	r3, r8
 800feda:	ebab 0102 	sub.w	r1, fp, r2
 800fede:	4630      	mov	r0, r6
 800fee0:	f7ff febe 	bl	800fc60 <swapfunc>
 800fee4:	9b03      	ldr	r3, [sp, #12]
 800fee6:	eba3 0209 	sub.w	r2, r3, r9
 800feea:	eba9 0707 	sub.w	r7, r9, r7
 800feee:	1b12      	subs	r2, r2, r4
 800fef0:	42ba      	cmp	r2, r7
 800fef2:	bf28      	it	cs
 800fef4:	463a      	movcs	r2, r7
 800fef6:	b12a      	cbz	r2, 800ff04 <qsort+0x234>
 800fef8:	9903      	ldr	r1, [sp, #12]
 800fefa:	4643      	mov	r3, r8
 800fefc:	1a89      	subs	r1, r1, r2
 800fefe:	4658      	mov	r0, fp
 800ff00:	f7ff feae 	bl	800fc60 <swapfunc>
 800ff04:	9d01      	ldr	r5, [sp, #4]
 800ff06:	9b03      	ldr	r3, [sp, #12]
 800ff08:	42af      	cmp	r7, r5
 800ff0a:	eba3 0007 	sub.w	r0, r3, r7
 800ff0e:	d904      	bls.n	800ff1a <qsort+0x24a>
 800ff10:	4633      	mov	r3, r6
 800ff12:	463d      	mov	r5, r7
 800ff14:	9f01      	ldr	r7, [sp, #4]
 800ff16:	4606      	mov	r6, r0
 800ff18:	4618      	mov	r0, r3
 800ff1a:	42a7      	cmp	r7, r4
 800ff1c:	d921      	bls.n	800ff62 <qsort+0x292>
 800ff1e:	fbb7 f1f4 	udiv	r1, r7, r4
 800ff22:	9b02      	ldr	r3, [sp, #8]
 800ff24:	2b07      	cmp	r3, #7
 800ff26:	d80d      	bhi.n	800ff44 <qsort+0x274>
 800ff28:	fbb5 f5f4 	udiv	r5, r5, r4
 800ff2c:	aa16      	add	r2, sp, #88	; 0x58
 800ff2e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ff32:	f843 6c40 	str.w	r6, [r3, #-64]
 800ff36:	f843 5c3c 	str.w	r5, [r3, #-60]
 800ff3a:	9b02      	ldr	r3, [sp, #8]
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	9302      	str	r3, [sp, #8]
 800ff40:	4606      	mov	r6, r0
 800ff42:	e6d6      	b.n	800fcf2 <qsort+0x22>
 800ff44:	4653      	mov	r3, sl
 800ff46:	4622      	mov	r2, r4
 800ff48:	f7ff fec2 	bl	800fcd0 <qsort>
 800ff4c:	42a5      	cmp	r5, r4
 800ff4e:	d80b      	bhi.n	800ff68 <qsort+0x298>
 800ff50:	9b02      	ldr	r3, [sp, #8]
 800ff52:	aa16      	add	r2, sp, #88	; 0x58
 800ff54:	3b01      	subs	r3, #1
 800ff56:	9302      	str	r3, [sp, #8]
 800ff58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ff5c:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 800ff60:	e7ee      	b.n	800ff40 <qsort+0x270>
 800ff62:	42a5      	cmp	r5, r4
 800ff64:	f67f aed2 	bls.w	800fd0c <qsort+0x3c>
 800ff68:	fbb5 f1f4 	udiv	r1, r5, r4
 800ff6c:	4630      	mov	r0, r6
 800ff6e:	e7e7      	b.n	800ff40 <qsort+0x270>

0800ff70 <cleanup_glue>:
 800ff70:	b538      	push	{r3, r4, r5, lr}
 800ff72:	460c      	mov	r4, r1
 800ff74:	6809      	ldr	r1, [r1, #0]
 800ff76:	4605      	mov	r5, r0
 800ff78:	b109      	cbz	r1, 800ff7e <cleanup_glue+0xe>
 800ff7a:	f7ff fff9 	bl	800ff70 <cleanup_glue>
 800ff7e:	4621      	mov	r1, r4
 800ff80:	4628      	mov	r0, r5
 800ff82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff86:	f000 b869 	b.w	801005c <_free_r>
	...

0800ff8c <_reclaim_reent>:
 800ff8c:	4b2c      	ldr	r3, [pc, #176]	; (8010040 <_reclaim_reent+0xb4>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	4283      	cmp	r3, r0
 800ff92:	b570      	push	{r4, r5, r6, lr}
 800ff94:	4604      	mov	r4, r0
 800ff96:	d051      	beq.n	801003c <_reclaim_reent+0xb0>
 800ff98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ff9a:	b143      	cbz	r3, 800ffae <_reclaim_reent+0x22>
 800ff9c:	68db      	ldr	r3, [r3, #12]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d14a      	bne.n	8010038 <_reclaim_reent+0xac>
 800ffa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ffa4:	6819      	ldr	r1, [r3, #0]
 800ffa6:	b111      	cbz	r1, 800ffae <_reclaim_reent+0x22>
 800ffa8:	4620      	mov	r0, r4
 800ffaa:	f000 f857 	bl	801005c <_free_r>
 800ffae:	6961      	ldr	r1, [r4, #20]
 800ffb0:	b111      	cbz	r1, 800ffb8 <_reclaim_reent+0x2c>
 800ffb2:	4620      	mov	r0, r4
 800ffb4:	f000 f852 	bl	801005c <_free_r>
 800ffb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ffba:	b111      	cbz	r1, 800ffc2 <_reclaim_reent+0x36>
 800ffbc:	4620      	mov	r0, r4
 800ffbe:	f000 f84d 	bl	801005c <_free_r>
 800ffc2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ffc4:	b111      	cbz	r1, 800ffcc <_reclaim_reent+0x40>
 800ffc6:	4620      	mov	r0, r4
 800ffc8:	f000 f848 	bl	801005c <_free_r>
 800ffcc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ffce:	b111      	cbz	r1, 800ffd6 <_reclaim_reent+0x4a>
 800ffd0:	4620      	mov	r0, r4
 800ffd2:	f000 f843 	bl	801005c <_free_r>
 800ffd6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ffd8:	b111      	cbz	r1, 800ffe0 <_reclaim_reent+0x54>
 800ffda:	4620      	mov	r0, r4
 800ffdc:	f000 f83e 	bl	801005c <_free_r>
 800ffe0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ffe2:	b111      	cbz	r1, 800ffea <_reclaim_reent+0x5e>
 800ffe4:	4620      	mov	r0, r4
 800ffe6:	f000 f839 	bl	801005c <_free_r>
 800ffea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ffec:	b111      	cbz	r1, 800fff4 <_reclaim_reent+0x68>
 800ffee:	4620      	mov	r0, r4
 800fff0:	f000 f834 	bl	801005c <_free_r>
 800fff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fff6:	b111      	cbz	r1, 800fffe <_reclaim_reent+0x72>
 800fff8:	4620      	mov	r0, r4
 800fffa:	f000 f82f 	bl	801005c <_free_r>
 800fffe:	69a3      	ldr	r3, [r4, #24]
 8010000:	b1e3      	cbz	r3, 801003c <_reclaim_reent+0xb0>
 8010002:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010004:	4620      	mov	r0, r4
 8010006:	4798      	blx	r3
 8010008:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801000a:	b1b9      	cbz	r1, 801003c <_reclaim_reent+0xb0>
 801000c:	4620      	mov	r0, r4
 801000e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010012:	f7ff bfad 	b.w	800ff70 <cleanup_glue>
 8010016:	5949      	ldr	r1, [r1, r5]
 8010018:	b941      	cbnz	r1, 801002c <_reclaim_reent+0xa0>
 801001a:	3504      	adds	r5, #4
 801001c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801001e:	2d80      	cmp	r5, #128	; 0x80
 8010020:	68d9      	ldr	r1, [r3, #12]
 8010022:	d1f8      	bne.n	8010016 <_reclaim_reent+0x8a>
 8010024:	4620      	mov	r0, r4
 8010026:	f000 f819 	bl	801005c <_free_r>
 801002a:	e7ba      	b.n	800ffa2 <_reclaim_reent+0x16>
 801002c:	680e      	ldr	r6, [r1, #0]
 801002e:	4620      	mov	r0, r4
 8010030:	f000 f814 	bl	801005c <_free_r>
 8010034:	4631      	mov	r1, r6
 8010036:	e7ef      	b.n	8010018 <_reclaim_reent+0x8c>
 8010038:	2500      	movs	r5, #0
 801003a:	e7ef      	b.n	801001c <_reclaim_reent+0x90>
 801003c:	bd70      	pop	{r4, r5, r6, pc}
 801003e:	bf00      	nop
 8010040:	20000128 	.word	0x20000128

08010044 <__malloc_lock>:
 8010044:	4801      	ldr	r0, [pc, #4]	; (801004c <__malloc_lock+0x8>)
 8010046:	f7ff bdf3 	b.w	800fc30 <__retarget_lock_acquire_recursive>
 801004a:	bf00      	nop
 801004c:	20003020 	.word	0x20003020

08010050 <__malloc_unlock>:
 8010050:	4801      	ldr	r0, [pc, #4]	; (8010058 <__malloc_unlock+0x8>)
 8010052:	f7ff bdee 	b.w	800fc32 <__retarget_lock_release_recursive>
 8010056:	bf00      	nop
 8010058:	20003020 	.word	0x20003020

0801005c <_free_r>:
 801005c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801005e:	2900      	cmp	r1, #0
 8010060:	d044      	beq.n	80100ec <_free_r+0x90>
 8010062:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010066:	9001      	str	r0, [sp, #4]
 8010068:	2b00      	cmp	r3, #0
 801006a:	f1a1 0404 	sub.w	r4, r1, #4
 801006e:	bfb8      	it	lt
 8010070:	18e4      	addlt	r4, r4, r3
 8010072:	f7ff ffe7 	bl	8010044 <__malloc_lock>
 8010076:	4a1e      	ldr	r2, [pc, #120]	; (80100f0 <_free_r+0x94>)
 8010078:	9801      	ldr	r0, [sp, #4]
 801007a:	6813      	ldr	r3, [r2, #0]
 801007c:	b933      	cbnz	r3, 801008c <_free_r+0x30>
 801007e:	6063      	str	r3, [r4, #4]
 8010080:	6014      	str	r4, [r2, #0]
 8010082:	b003      	add	sp, #12
 8010084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010088:	f7ff bfe2 	b.w	8010050 <__malloc_unlock>
 801008c:	42a3      	cmp	r3, r4
 801008e:	d908      	bls.n	80100a2 <_free_r+0x46>
 8010090:	6825      	ldr	r5, [r4, #0]
 8010092:	1961      	adds	r1, r4, r5
 8010094:	428b      	cmp	r3, r1
 8010096:	bf01      	itttt	eq
 8010098:	6819      	ldreq	r1, [r3, #0]
 801009a:	685b      	ldreq	r3, [r3, #4]
 801009c:	1949      	addeq	r1, r1, r5
 801009e:	6021      	streq	r1, [r4, #0]
 80100a0:	e7ed      	b.n	801007e <_free_r+0x22>
 80100a2:	461a      	mov	r2, r3
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	b10b      	cbz	r3, 80100ac <_free_r+0x50>
 80100a8:	42a3      	cmp	r3, r4
 80100aa:	d9fa      	bls.n	80100a2 <_free_r+0x46>
 80100ac:	6811      	ldr	r1, [r2, #0]
 80100ae:	1855      	adds	r5, r2, r1
 80100b0:	42a5      	cmp	r5, r4
 80100b2:	d10b      	bne.n	80100cc <_free_r+0x70>
 80100b4:	6824      	ldr	r4, [r4, #0]
 80100b6:	4421      	add	r1, r4
 80100b8:	1854      	adds	r4, r2, r1
 80100ba:	42a3      	cmp	r3, r4
 80100bc:	6011      	str	r1, [r2, #0]
 80100be:	d1e0      	bne.n	8010082 <_free_r+0x26>
 80100c0:	681c      	ldr	r4, [r3, #0]
 80100c2:	685b      	ldr	r3, [r3, #4]
 80100c4:	6053      	str	r3, [r2, #4]
 80100c6:	4421      	add	r1, r4
 80100c8:	6011      	str	r1, [r2, #0]
 80100ca:	e7da      	b.n	8010082 <_free_r+0x26>
 80100cc:	d902      	bls.n	80100d4 <_free_r+0x78>
 80100ce:	230c      	movs	r3, #12
 80100d0:	6003      	str	r3, [r0, #0]
 80100d2:	e7d6      	b.n	8010082 <_free_r+0x26>
 80100d4:	6825      	ldr	r5, [r4, #0]
 80100d6:	1961      	adds	r1, r4, r5
 80100d8:	428b      	cmp	r3, r1
 80100da:	bf04      	itt	eq
 80100dc:	6819      	ldreq	r1, [r3, #0]
 80100de:	685b      	ldreq	r3, [r3, #4]
 80100e0:	6063      	str	r3, [r4, #4]
 80100e2:	bf04      	itt	eq
 80100e4:	1949      	addeq	r1, r1, r5
 80100e6:	6021      	streq	r1, [r4, #0]
 80100e8:	6054      	str	r4, [r2, #4]
 80100ea:	e7ca      	b.n	8010082 <_free_r+0x26>
 80100ec:	b003      	add	sp, #12
 80100ee:	bd30      	pop	{r4, r5, pc}
 80100f0:	20003024 	.word	0x20003024
 80100f4:	00000000 	.word	0x00000000

080100f8 <exp>:
 80100f8:	b538      	push	{r3, r4, r5, lr}
 80100fa:	ed2d 8b02 	vpush	{d8}
 80100fe:	ec55 4b10 	vmov	r4, r5, d0
 8010102:	f000 f841 	bl	8010188 <__ieee754_exp>
 8010106:	eeb0 8a40 	vmov.f32	s16, s0
 801010a:	eef0 8a60 	vmov.f32	s17, s1
 801010e:	ec45 4b10 	vmov	d0, r4, r5
 8010112:	f000 f9eb 	bl	80104ec <finite>
 8010116:	b168      	cbz	r0, 8010134 <exp+0x3c>
 8010118:	a317      	add	r3, pc, #92	; (adr r3, 8010178 <exp+0x80>)
 801011a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011e:	4620      	mov	r0, r4
 8010120:	4629      	mov	r1, r5
 8010122:	f7f0 fca1 	bl	8000a68 <__aeabi_dcmpgt>
 8010126:	b160      	cbz	r0, 8010142 <exp+0x4a>
 8010128:	f7ff fd58 	bl	800fbdc <__errno>
 801012c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8010168 <exp+0x70>
 8010130:	2322      	movs	r3, #34	; 0x22
 8010132:	6003      	str	r3, [r0, #0]
 8010134:	eeb0 0a48 	vmov.f32	s0, s16
 8010138:	eef0 0a68 	vmov.f32	s1, s17
 801013c:	ecbd 8b02 	vpop	{d8}
 8010140:	bd38      	pop	{r3, r4, r5, pc}
 8010142:	a30f      	add	r3, pc, #60	; (adr r3, 8010180 <exp+0x88>)
 8010144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010148:	4620      	mov	r0, r4
 801014a:	4629      	mov	r1, r5
 801014c:	f7f0 fc6e 	bl	8000a2c <__aeabi_dcmplt>
 8010150:	2800      	cmp	r0, #0
 8010152:	d0ef      	beq.n	8010134 <exp+0x3c>
 8010154:	f7ff fd42 	bl	800fbdc <__errno>
 8010158:	2322      	movs	r3, #34	; 0x22
 801015a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8010170 <exp+0x78>
 801015e:	6003      	str	r3, [r0, #0]
 8010160:	e7e8      	b.n	8010134 <exp+0x3c>
 8010162:	bf00      	nop
 8010164:	f3af 8000 	nop.w
 8010168:	00000000 	.word	0x00000000
 801016c:	7ff00000 	.word	0x7ff00000
	...
 8010178:	fefa39ef 	.word	0xfefa39ef
 801017c:	40862e42 	.word	0x40862e42
 8010180:	d52d3051 	.word	0xd52d3051
 8010184:	c0874910 	.word	0xc0874910

08010188 <__ieee754_exp>:
 8010188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801018c:	ec55 4b10 	vmov	r4, r5, d0
 8010190:	49b5      	ldr	r1, [pc, #724]	; (8010468 <__ieee754_exp+0x2e0>)
 8010192:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010196:	428b      	cmp	r3, r1
 8010198:	ed2d 8b04 	vpush	{d8-d9}
 801019c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80101a0:	d93d      	bls.n	801021e <__ieee754_exp+0x96>
 80101a2:	49b2      	ldr	r1, [pc, #712]	; (801046c <__ieee754_exp+0x2e4>)
 80101a4:	428b      	cmp	r3, r1
 80101a6:	d918      	bls.n	80101da <__ieee754_exp+0x52>
 80101a8:	ee10 3a10 	vmov	r3, s0
 80101ac:	f3c5 0213 	ubfx	r2, r5, #0, #20
 80101b0:	4313      	orrs	r3, r2
 80101b2:	d009      	beq.n	80101c8 <__ieee754_exp+0x40>
 80101b4:	ee10 2a10 	vmov	r2, s0
 80101b8:	462b      	mov	r3, r5
 80101ba:	4620      	mov	r0, r4
 80101bc:	4629      	mov	r1, r5
 80101be:	f7f0 f80d 	bl	80001dc <__adddf3>
 80101c2:	4604      	mov	r4, r0
 80101c4:	460d      	mov	r5, r1
 80101c6:	e002      	b.n	80101ce <__ieee754_exp+0x46>
 80101c8:	b10e      	cbz	r6, 80101ce <__ieee754_exp+0x46>
 80101ca:	2400      	movs	r4, #0
 80101cc:	2500      	movs	r5, #0
 80101ce:	ecbd 8b04 	vpop	{d8-d9}
 80101d2:	ec45 4b10 	vmov	d0, r4, r5
 80101d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101da:	a38d      	add	r3, pc, #564	; (adr r3, 8010410 <__ieee754_exp+0x288>)
 80101dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e0:	ee10 0a10 	vmov	r0, s0
 80101e4:	4629      	mov	r1, r5
 80101e6:	f7f0 fc3f 	bl	8000a68 <__aeabi_dcmpgt>
 80101ea:	4607      	mov	r7, r0
 80101ec:	b130      	cbz	r0, 80101fc <__ieee754_exp+0x74>
 80101ee:	ecbd 8b04 	vpop	{d8-d9}
 80101f2:	2000      	movs	r0, #0
 80101f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101f8:	f000 b96f 	b.w	80104da <__math_oflow>
 80101fc:	a386      	add	r3, pc, #536	; (adr r3, 8010418 <__ieee754_exp+0x290>)
 80101fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010202:	4620      	mov	r0, r4
 8010204:	4629      	mov	r1, r5
 8010206:	f7f0 fc11 	bl	8000a2c <__aeabi_dcmplt>
 801020a:	2800      	cmp	r0, #0
 801020c:	f000 808b 	beq.w	8010326 <__ieee754_exp+0x19e>
 8010210:	ecbd 8b04 	vpop	{d8-d9}
 8010214:	4638      	mov	r0, r7
 8010216:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801021a:	f000 b955 	b.w	80104c8 <__math_uflow>
 801021e:	4a94      	ldr	r2, [pc, #592]	; (8010470 <__ieee754_exp+0x2e8>)
 8010220:	4293      	cmp	r3, r2
 8010222:	f240 80ac 	bls.w	801037e <__ieee754_exp+0x1f6>
 8010226:	4a93      	ldr	r2, [pc, #588]	; (8010474 <__ieee754_exp+0x2ec>)
 8010228:	4293      	cmp	r3, r2
 801022a:	d87c      	bhi.n	8010326 <__ieee754_exp+0x19e>
 801022c:	4b92      	ldr	r3, [pc, #584]	; (8010478 <__ieee754_exp+0x2f0>)
 801022e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010236:	ee10 0a10 	vmov	r0, s0
 801023a:	4629      	mov	r1, r5
 801023c:	f7ef ffcc 	bl	80001d8 <__aeabi_dsub>
 8010240:	4b8e      	ldr	r3, [pc, #568]	; (801047c <__ieee754_exp+0x2f4>)
 8010242:	00f7      	lsls	r7, r6, #3
 8010244:	443b      	add	r3, r7
 8010246:	ed93 7b00 	vldr	d7, [r3]
 801024a:	f1c6 0a01 	rsb	sl, r6, #1
 801024e:	4680      	mov	r8, r0
 8010250:	4689      	mov	r9, r1
 8010252:	ebaa 0a06 	sub.w	sl, sl, r6
 8010256:	eeb0 8a47 	vmov.f32	s16, s14
 801025a:	eef0 8a67 	vmov.f32	s17, s15
 801025e:	ec53 2b18 	vmov	r2, r3, d8
 8010262:	4640      	mov	r0, r8
 8010264:	4649      	mov	r1, r9
 8010266:	f7ef ffb7 	bl	80001d8 <__aeabi_dsub>
 801026a:	4604      	mov	r4, r0
 801026c:	460d      	mov	r5, r1
 801026e:	4622      	mov	r2, r4
 8010270:	462b      	mov	r3, r5
 8010272:	4620      	mov	r0, r4
 8010274:	4629      	mov	r1, r5
 8010276:	f7f0 f967 	bl	8000548 <__aeabi_dmul>
 801027a:	a369      	add	r3, pc, #420	; (adr r3, 8010420 <__ieee754_exp+0x298>)
 801027c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010280:	4606      	mov	r6, r0
 8010282:	460f      	mov	r7, r1
 8010284:	f7f0 f960 	bl	8000548 <__aeabi_dmul>
 8010288:	a367      	add	r3, pc, #412	; (adr r3, 8010428 <__ieee754_exp+0x2a0>)
 801028a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801028e:	f7ef ffa3 	bl	80001d8 <__aeabi_dsub>
 8010292:	4632      	mov	r2, r6
 8010294:	463b      	mov	r3, r7
 8010296:	f7f0 f957 	bl	8000548 <__aeabi_dmul>
 801029a:	a365      	add	r3, pc, #404	; (adr r3, 8010430 <__ieee754_exp+0x2a8>)
 801029c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a0:	f7ef ff9c 	bl	80001dc <__adddf3>
 80102a4:	4632      	mov	r2, r6
 80102a6:	463b      	mov	r3, r7
 80102a8:	f7f0 f94e 	bl	8000548 <__aeabi_dmul>
 80102ac:	a362      	add	r3, pc, #392	; (adr r3, 8010438 <__ieee754_exp+0x2b0>)
 80102ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b2:	f7ef ff91 	bl	80001d8 <__aeabi_dsub>
 80102b6:	4632      	mov	r2, r6
 80102b8:	463b      	mov	r3, r7
 80102ba:	f7f0 f945 	bl	8000548 <__aeabi_dmul>
 80102be:	a360      	add	r3, pc, #384	; (adr r3, 8010440 <__ieee754_exp+0x2b8>)
 80102c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c4:	f7ef ff8a 	bl	80001dc <__adddf3>
 80102c8:	4632      	mov	r2, r6
 80102ca:	463b      	mov	r3, r7
 80102cc:	f7f0 f93c 	bl	8000548 <__aeabi_dmul>
 80102d0:	4602      	mov	r2, r0
 80102d2:	460b      	mov	r3, r1
 80102d4:	4620      	mov	r0, r4
 80102d6:	4629      	mov	r1, r5
 80102d8:	f7ef ff7e 	bl	80001d8 <__aeabi_dsub>
 80102dc:	4602      	mov	r2, r0
 80102de:	460b      	mov	r3, r1
 80102e0:	4606      	mov	r6, r0
 80102e2:	460f      	mov	r7, r1
 80102e4:	4620      	mov	r0, r4
 80102e6:	4629      	mov	r1, r5
 80102e8:	f7f0 f92e 	bl	8000548 <__aeabi_dmul>
 80102ec:	ec41 0b19 	vmov	d9, r0, r1
 80102f0:	f1ba 0f00 	cmp.w	sl, #0
 80102f4:	d15d      	bne.n	80103b2 <__ieee754_exp+0x22a>
 80102f6:	2200      	movs	r2, #0
 80102f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80102fc:	4630      	mov	r0, r6
 80102fe:	4639      	mov	r1, r7
 8010300:	f7ef ff6a 	bl	80001d8 <__aeabi_dsub>
 8010304:	4602      	mov	r2, r0
 8010306:	460b      	mov	r3, r1
 8010308:	ec51 0b19 	vmov	r0, r1, d9
 801030c:	f7f0 fa46 	bl	800079c <__aeabi_ddiv>
 8010310:	4622      	mov	r2, r4
 8010312:	462b      	mov	r3, r5
 8010314:	f7ef ff60 	bl	80001d8 <__aeabi_dsub>
 8010318:	4602      	mov	r2, r0
 801031a:	460b      	mov	r3, r1
 801031c:	2000      	movs	r0, #0
 801031e:	4958      	ldr	r1, [pc, #352]	; (8010480 <__ieee754_exp+0x2f8>)
 8010320:	f7ef ff5a 	bl	80001d8 <__aeabi_dsub>
 8010324:	e74d      	b.n	80101c2 <__ieee754_exp+0x3a>
 8010326:	4857      	ldr	r0, [pc, #348]	; (8010484 <__ieee754_exp+0x2fc>)
 8010328:	a347      	add	r3, pc, #284	; (adr r3, 8010448 <__ieee754_exp+0x2c0>)
 801032a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801032e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8010332:	4629      	mov	r1, r5
 8010334:	4620      	mov	r0, r4
 8010336:	f7f0 f907 	bl	8000548 <__aeabi_dmul>
 801033a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801033e:	f7ef ff4d 	bl	80001dc <__adddf3>
 8010342:	f7f0 fb9b 	bl	8000a7c <__aeabi_d2iz>
 8010346:	4682      	mov	sl, r0
 8010348:	f7f0 f894 	bl	8000474 <__aeabi_i2d>
 801034c:	a340      	add	r3, pc, #256	; (adr r3, 8010450 <__ieee754_exp+0x2c8>)
 801034e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010352:	4606      	mov	r6, r0
 8010354:	460f      	mov	r7, r1
 8010356:	f7f0 f8f7 	bl	8000548 <__aeabi_dmul>
 801035a:	4602      	mov	r2, r0
 801035c:	460b      	mov	r3, r1
 801035e:	4620      	mov	r0, r4
 8010360:	4629      	mov	r1, r5
 8010362:	f7ef ff39 	bl	80001d8 <__aeabi_dsub>
 8010366:	a33c      	add	r3, pc, #240	; (adr r3, 8010458 <__ieee754_exp+0x2d0>)
 8010368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801036c:	4680      	mov	r8, r0
 801036e:	4689      	mov	r9, r1
 8010370:	4630      	mov	r0, r6
 8010372:	4639      	mov	r1, r7
 8010374:	f7f0 f8e8 	bl	8000548 <__aeabi_dmul>
 8010378:	ec41 0b18 	vmov	d8, r0, r1
 801037c:	e76f      	b.n	801025e <__ieee754_exp+0xd6>
 801037e:	4a42      	ldr	r2, [pc, #264]	; (8010488 <__ieee754_exp+0x300>)
 8010380:	4293      	cmp	r3, r2
 8010382:	d811      	bhi.n	80103a8 <__ieee754_exp+0x220>
 8010384:	a336      	add	r3, pc, #216	; (adr r3, 8010460 <__ieee754_exp+0x2d8>)
 8010386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801038a:	ee10 0a10 	vmov	r0, s0
 801038e:	4629      	mov	r1, r5
 8010390:	f7ef ff24 	bl	80001dc <__adddf3>
 8010394:	4b3a      	ldr	r3, [pc, #232]	; (8010480 <__ieee754_exp+0x2f8>)
 8010396:	2200      	movs	r2, #0
 8010398:	f7f0 fb66 	bl	8000a68 <__aeabi_dcmpgt>
 801039c:	b138      	cbz	r0, 80103ae <__ieee754_exp+0x226>
 801039e:	4b38      	ldr	r3, [pc, #224]	; (8010480 <__ieee754_exp+0x2f8>)
 80103a0:	2200      	movs	r2, #0
 80103a2:	4620      	mov	r0, r4
 80103a4:	4629      	mov	r1, r5
 80103a6:	e70a      	b.n	80101be <__ieee754_exp+0x36>
 80103a8:	f04f 0a00 	mov.w	sl, #0
 80103ac:	e75f      	b.n	801026e <__ieee754_exp+0xe6>
 80103ae:	4682      	mov	sl, r0
 80103b0:	e75d      	b.n	801026e <__ieee754_exp+0xe6>
 80103b2:	4632      	mov	r2, r6
 80103b4:	463b      	mov	r3, r7
 80103b6:	2000      	movs	r0, #0
 80103b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80103bc:	f7ef ff0c 	bl	80001d8 <__aeabi_dsub>
 80103c0:	4602      	mov	r2, r0
 80103c2:	460b      	mov	r3, r1
 80103c4:	ec51 0b19 	vmov	r0, r1, d9
 80103c8:	f7f0 f9e8 	bl	800079c <__aeabi_ddiv>
 80103cc:	4602      	mov	r2, r0
 80103ce:	460b      	mov	r3, r1
 80103d0:	ec51 0b18 	vmov	r0, r1, d8
 80103d4:	f7ef ff00 	bl	80001d8 <__aeabi_dsub>
 80103d8:	4642      	mov	r2, r8
 80103da:	464b      	mov	r3, r9
 80103dc:	f7ef fefc 	bl	80001d8 <__aeabi_dsub>
 80103e0:	4602      	mov	r2, r0
 80103e2:	460b      	mov	r3, r1
 80103e4:	2000      	movs	r0, #0
 80103e6:	4926      	ldr	r1, [pc, #152]	; (8010480 <__ieee754_exp+0x2f8>)
 80103e8:	f7ef fef6 	bl	80001d8 <__aeabi_dsub>
 80103ec:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80103f0:	4592      	cmp	sl, r2
 80103f2:	db02      	blt.n	80103fa <__ieee754_exp+0x272>
 80103f4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80103f8:	e6e3      	b.n	80101c2 <__ieee754_exp+0x3a>
 80103fa:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80103fe:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8010402:	2200      	movs	r2, #0
 8010404:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8010408:	f7f0 f89e 	bl	8000548 <__aeabi_dmul>
 801040c:	e6d9      	b.n	80101c2 <__ieee754_exp+0x3a>
 801040e:	bf00      	nop
 8010410:	fefa39ef 	.word	0xfefa39ef
 8010414:	40862e42 	.word	0x40862e42
 8010418:	d52d3051 	.word	0xd52d3051
 801041c:	c0874910 	.word	0xc0874910
 8010420:	72bea4d0 	.word	0x72bea4d0
 8010424:	3e663769 	.word	0x3e663769
 8010428:	c5d26bf1 	.word	0xc5d26bf1
 801042c:	3ebbbd41 	.word	0x3ebbbd41
 8010430:	af25de2c 	.word	0xaf25de2c
 8010434:	3f11566a 	.word	0x3f11566a
 8010438:	16bebd93 	.word	0x16bebd93
 801043c:	3f66c16c 	.word	0x3f66c16c
 8010440:	5555553e 	.word	0x5555553e
 8010444:	3fc55555 	.word	0x3fc55555
 8010448:	652b82fe 	.word	0x652b82fe
 801044c:	3ff71547 	.word	0x3ff71547
 8010450:	fee00000 	.word	0xfee00000
 8010454:	3fe62e42 	.word	0x3fe62e42
 8010458:	35793c76 	.word	0x35793c76
 801045c:	3dea39ef 	.word	0x3dea39ef
 8010460:	8800759c 	.word	0x8800759c
 8010464:	7e37e43c 	.word	0x7e37e43c
 8010468:	40862e41 	.word	0x40862e41
 801046c:	7fefffff 	.word	0x7fefffff
 8010470:	3fd62e42 	.word	0x3fd62e42
 8010474:	3ff0a2b1 	.word	0x3ff0a2b1
 8010478:	08010738 	.word	0x08010738
 801047c:	08010748 	.word	0x08010748
 8010480:	3ff00000 	.word	0x3ff00000
 8010484:	08010728 	.word	0x08010728
 8010488:	3defffff 	.word	0x3defffff

0801048c <with_errno>:
 801048c:	b570      	push	{r4, r5, r6, lr}
 801048e:	4604      	mov	r4, r0
 8010490:	460d      	mov	r5, r1
 8010492:	4616      	mov	r6, r2
 8010494:	f7ff fba2 	bl	800fbdc <__errno>
 8010498:	4629      	mov	r1, r5
 801049a:	6006      	str	r6, [r0, #0]
 801049c:	4620      	mov	r0, r4
 801049e:	bd70      	pop	{r4, r5, r6, pc}

080104a0 <xflow>:
 80104a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80104a2:	4614      	mov	r4, r2
 80104a4:	461d      	mov	r5, r3
 80104a6:	b108      	cbz	r0, 80104ac <xflow+0xc>
 80104a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80104ac:	e9cd 2300 	strd	r2, r3, [sp]
 80104b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104b4:	4620      	mov	r0, r4
 80104b6:	4629      	mov	r1, r5
 80104b8:	f7f0 f846 	bl	8000548 <__aeabi_dmul>
 80104bc:	2222      	movs	r2, #34	; 0x22
 80104be:	b003      	add	sp, #12
 80104c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104c4:	f7ff bfe2 	b.w	801048c <with_errno>

080104c8 <__math_uflow>:
 80104c8:	b508      	push	{r3, lr}
 80104ca:	2200      	movs	r2, #0
 80104cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80104d0:	f7ff ffe6 	bl	80104a0 <xflow>
 80104d4:	ec41 0b10 	vmov	d0, r0, r1
 80104d8:	bd08      	pop	{r3, pc}

080104da <__math_oflow>:
 80104da:	b508      	push	{r3, lr}
 80104dc:	2200      	movs	r2, #0
 80104de:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80104e2:	f7ff ffdd 	bl	80104a0 <xflow>
 80104e6:	ec41 0b10 	vmov	d0, r0, r1
 80104ea:	bd08      	pop	{r3, pc}

080104ec <finite>:
 80104ec:	b082      	sub	sp, #8
 80104ee:	ed8d 0b00 	vstr	d0, [sp]
 80104f2:	9801      	ldr	r0, [sp, #4]
 80104f4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80104f8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80104fc:	0fc0      	lsrs	r0, r0, #31
 80104fe:	b002      	add	sp, #8
 8010500:	4770      	bx	lr
	...

08010504 <_init>:
 8010504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010506:	bf00      	nop
 8010508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801050a:	bc08      	pop	{r3}
 801050c:	469e      	mov	lr, r3
 801050e:	4770      	bx	lr

08010510 <_fini>:
 8010510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010512:	bf00      	nop
 8010514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010516:	bc08      	pop	{r3}
 8010518:	469e      	mov	lr, r3
 801051a:	4770      	bx	lr
